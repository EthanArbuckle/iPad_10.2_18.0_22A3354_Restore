void sub_1000035EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_100003704(id a1, NSError *a2)
{
  NSError *v2;
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  uint64_t v7;
  int v8;
  NSError *v9;

  v2 = a2;
  if (v2)
  {
    if (qword_100387480 != -1)
      dispatch_once(&qword_100387480, &stru_100344FF8);
    v3 = qword_100387488;
    if (os_log_type_enabled((os_log_t)qword_100387488, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v2;
      v4 = "Failed to add Feedback Assistant notification request,error,%@";
      v5 = v3;
      v6 = 12;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v8, v6);
    }
  }
  else
  {
    if (qword_100387480 != -1)
      dispatch_once(&qword_100387480, &stru_100344FF8);
    v7 = qword_100387488;
    if (os_log_type_enabled((os_log_t)qword_100387488, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      v4 = "Successfully added Feedback Assistant notification request";
      v5 = v7;
      v6 = 2;
      goto LABEL_10;
    }
  }

}

void sub_100003834(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "FeedbackAssistant");
  v2 = (void *)qword_100387488;
  qword_100387488 = (uint64_t)v1;

}

uint64_t sub_100004EDC(uint64_t result)
{
  *(_QWORD *)result = &off_100345028;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_100004EF8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_100004F1C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)result = &off_100345028;
  *(_DWORD *)(result + 52) = 0;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_DWORD *)(a2 + 44);
    v3 = 32;
    *(_BYTE *)(result + 52) = 32;
    *(_DWORD *)(result + 44) = v4;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x40u;
    *(_BYTE *)(result + 52) = v3;
    *(_DWORD *)(result + 48) = v5;
    v2 = *(_BYTE *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(result + 52) = v3;
    *(_DWORD *)(result + 40) = v6;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return result;
LABEL_16:
    v10 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 52) = v3 | 2;
    *(_QWORD *)(result + 16) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 24) = v9;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_100004FFC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    sub_100004F1C((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v10 = v3;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t sub_100005068(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_DWORD *)(result + 52);
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v2;
  v3 = *(_DWORD *)(result + 44);
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v3;
  v4 = *(_DWORD *)(result + 48);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  v6 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v6;
  v7 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7;
  v8 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v8;
  v9 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t sub_1000050EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_100345028;
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100005140(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(PB::Base *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a1 != a2)
  {
    v9 = &off_100345028;
    v3 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 52) = 0;
    v4 = *(_OWORD *)(a1 + 40);
    v11 = *(_OWORD *)(a1 + 24);
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 8) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t sub_1000051B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "createdAtTimestamp", *(_QWORD *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochNumber", *(_DWORD *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "epochTimestamp", *(_QWORD *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "lastRealTriggerTimestamp", *(_QWORD *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "receivedAtTimestamp", *(_QWORD *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 52) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "mode", *(_DWORD *)(a1 + 44));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "sessionNumber", *(_DWORD *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1000052C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  uint64_t result;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *(_BYTE *)(a1 + 52) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v64 = 0;
                v65 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v66 = v21++;
                  v67 = *(_BYTE *)(v22 + v66);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0)
                    break;
                  v64 += 7;
                  v14 = v65++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_134;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
LABEL_134:
                v3 = v66 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                do
                {
                  v3 = v21 + 1;
                  *((_QWORD *)this + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    goto LABEL_135;
                  v23 += 7;
                  v21 = v3;
                  v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_135:
              *(_DWORD *)(a1 + 44) = v25;
              goto LABEL_166;
            case 3u:
              *(_BYTE *)(a1 + 52) |= 0x40u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v72 = 0;
                v73 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v74 = v33++;
                  v75 = *(_BYTE *)(v34 + v74);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v75 & 0x7F) << v72;
                  if ((v75 & 0x80) == 0)
                    break;
                  v72 += 7;
                  v14 = v73++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_144:
                    v3 = v74 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_144;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_145;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_166;
            case 4u:
              *(_BYTE *)(a1 + 52) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v76 = 0;
                v77 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v78 = v39++;
                  v79 = *(_BYTE *)(v40 + v78);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v79 & 0x7F) << v76;
                  if ((v79 & 0x80) == 0)
                    break;
                  v76 += 7;
                  v14 = v77++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_149:
                    v3 = v78 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_149;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_150;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_166;
            case 5u:
              *(_BYTE *)(a1 + 52) |= 8u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v80 = 0;
                v81 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  v82 = v45++;
                  v83 = *(_BYTE *)(v46 + v82);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0)
                    break;
                  v80 += 7;
                  v14 = v81++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_154:
                    v3 = v82 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v49 = 0;
                goto LABEL_154;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_155;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_155:
              *(_QWORD *)(a1 + 32) = v49;
              goto LABEL_166;
            case 6u:
              *(_BYTE *)(a1 + 52) |= 1u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v84 = 0;
                v85 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_160;
                  }
                  v86 = v51++;
                  v87 = *(_BYTE *)(v52 + v86);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v87 & 0x7F) << v84;
                  if ((v87 & 0x80) == 0)
                    break;
                  v84 += 7;
                  v14 = v85++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_159:
                    v3 = v86 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v55 = 0;
                goto LABEL_159;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v3 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_160;
                v53 += 7;
                v51 = v3;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_160:
              *(_QWORD *)(a1 + 8) = v55;
              goto LABEL_166;
            default:
              if ((_DWORD)v20 == 100)
              {
                *(_BYTE *)(a1 + 52) |= 4u;
                v57 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v58 = *(_QWORD *)this;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  v88 = 0;
                  v89 = 0;
                  v61 = 0;
                  if (v2 <= v57)
                    v3 = *((_QWORD *)this + 1);
                  else
                    v3 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      v61 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_165;
                    }
                    v90 = v57++;
                    v91 = *(_BYTE *)(v58 + v90);
                    *((_QWORD *)this + 1) = v57;
                    v61 |= (unint64_t)(v91 & 0x7F) << v88;
                    if ((v91 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v14 = v89++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      goto LABEL_164;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v61 = 0;
LABEL_164:
                  v3 = v90 + 1;
                }
                else
                {
                  v59 = 0;
                  v60 = 0;
                  v61 = 0;
                  while (1)
                  {
                    v3 = v57 + 1;
                    *((_QWORD *)this + 1) = v57 + 1;
                    v62 = *(_BYTE *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0)
                      break;
                    v59 += 7;
                    v57 = v3;
                    v14 = v60++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      break;
                    }
                  }
                }
LABEL_165:
                *(_QWORD *)(a1 + 24) = v61;
              }
              else if ((_DWORD)v20 == 101)
              {
                *(_BYTE *)(a1 + 52) |= 2u;
                v27 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v28 = *(_QWORD *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  v68 = 0;
                  v69 = 0;
                  v31 = 0;
                  if (v2 <= v27)
                    v3 = *((_QWORD *)this + 1);
                  else
                    v3 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      v31 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_140;
                    }
                    v70 = v27++;
                    v71 = *(_BYTE *)(v28 + v70);
                    *((_QWORD *)this + 1) = v27;
                    v31 |= (unint64_t)(v71 & 0x7F) << v68;
                    if ((v71 & 0x80) == 0)
                      break;
                    v68 += 7;
                    v14 = v69++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v31 = 0;
LABEL_139:
                  v3 = v70 + 1;
                }
                else
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v3 = v27 + 1;
                    *((_QWORD *)this + 1) = v27 + 1;
                    v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0)
                      break;
                    v29 += 7;
                    v27 = v3;
                    v14 = v30++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      break;
                    }
                  }
                }
LABEL_140:
                *(_QWORD *)(a1 + 16) = v31;
              }
              else
              {
                result = PB::Reader::skip(this, v20, v11 & 7, 0);
                if (!(_DWORD)result)
                  return result;
                v3 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
              }
LABEL_166:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_100005AAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 44), 2u);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 3u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 5u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 6u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0x65u);
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x64u);
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0x65u);
  return result;
}

BOOL sub_100005B94(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 52) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 52) & 2) == 0;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return (*(_BYTE *)(a2 + 52) & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v2;
}

uint64_t sub_100005C90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 52) & 0x20) != 0)
  {
    v1 = *(unsigned int *)(a1 + 44);
    if ((*(_BYTE *)(a1 + 52) & 0x40) != 0)
    {
LABEL_3:
      v2 = *(unsigned int *)(a1 + 48);
      if ((*(_BYTE *)(a1 + 52) & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*(_BYTE *)(a1 + 52) & 0x40) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*(_BYTE *)(a1 + 52) & 0x10) != 0)
  {
LABEL_4:
    v3 = *(unsigned int *)(a1 + 40);
    if ((*(_BYTE *)(a1 + 52) & 8) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*(_BYTE *)(a1 + 52) & 8) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(a1 + 52) & 1) != 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v4 = 0;
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
LABEL_6:
    v5 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 52) & 4) != 0)
      goto LABEL_7;
LABEL_14:
    v6 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) != 0)
      goto LABEL_8;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_13:
  v5 = 0;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
    goto LABEL_14;
LABEL_7:
  v6 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 52) & 2) == 0)
    goto LABEL_15;
LABEL_8:
  v7 = *(_QWORD *)(a1 + 16);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void sub_100005D24(uint64_t a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  int v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int v43;
  double v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  double v52;
  int v53;
  _DWORD v54[2];
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  int v74;
  __int16 v75;
  double v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  double v92;
  __int16 v93;
  int v94;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "TwoLevelSensitivityConfig", *(unsigned __int8 *)(a1 + 32)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  *(_BYTE *)(a1 + 108) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 0, v2, 0);
  *(_BYTE *)(a1 + 109) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 1, v2, 0);
  *(_BYTE *)(a1 + 110) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 2, v2, 0);
  *(_BYTE *)(a1 + 111) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 3, v2, 0);
  *(_BYTE *)(a1 + 112) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 4, v2, 0);
  LODWORD(v4) = 0;
  LODWORD(v5) = 1065353300;
  LODWORD(v6) = 1057803469;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v2, v4, v5, v6);
  *(_DWORD *)(a1 + 116) = v7;
  LODWORD(v8) = 0;
  LODWORD(v9) = 1065353300;
  LODWORD(v10) = 1057803469;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v2, v8, v9, v10);
  *(_DWORD *)(a1 + 120) = v11;
  LODWORD(v12) = 0;
  LODWORD(v13) = 1065353300;
  LODWORD(v14) = 1057803469;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 7, v2, v12, v13, v14);
  *(_DWORD *)(a1 + 124) = v15;
  LODWORD(v16) = 2139095039;
  LODWORD(v17) = 1133903872;
  LODWORD(v18) = 0;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 8, v2, v18, v16, v17);
  *(_DWORD *)(a1 + 128) = v19;
  LODWORD(v20) = 1110625485;
  LODWORD(v21) = 1102237925;
  LODWORD(v22) = 0;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 9, v2, v22, v20, v21);
  *(_DWORD *)(a1 + 132) = v23;
  *(_DWORD *)(a1 + 136) = objc_msgSend(v3, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 10, v2, 1, 31, 10);
  LODWORD(v24) = 1120403456;
  LODWORD(v25) = 1.0;
  LODWORD(v26) = 1176256512;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 11, v2, v25, v26, v24);
  *(_DWORD *)(a1 + 140) = v27;
  *(_BYTE *)(a1 + 144) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 12, v2, 0);
  *(_BYTE *)(a1 + 145) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 13, v2, 1);
  *(_BYTE *)(a1 + 146) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 14, v2, 1);
  *(_BYTE *)(a1 + 147) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 15, v2, 1);
  *(_BYTE *)(a1 + 148) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 16, v2, 0);
  *(_BYTE *)(a1 + 149) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 17, v2, 0);
  *(_BYTE *)(a1 + 150) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 18, v2, 1);
  LODWORD(v28) = 1176255488;
  LODWORD(v29) = 0;
  LODWORD(v30) = 1176256512;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 19, v2, v29, v30, v28);
  *(_DWORD *)(a1 + 152) = v31;
  *(_BYTE *)(a1 + 156) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 20, v2, 1);
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100345100);
  v32 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v33 = *(unsigned __int8 *)(a1 + 108);
    v34 = *(unsigned __int8 *)(a1 + 109);
    v35 = *(unsigned __int8 *)(a1 + 110);
    v36 = *(unsigned __int8 *)(a1 + 111);
    v37 = *(unsigned __int8 *)(a1 + 112);
    v38 = *(float *)(a1 + 116);
    v39 = *(float *)(a1 + 120);
    v40 = *(float *)(a1 + 124);
    v41 = *(float *)(a1 + 128);
    v42 = *(float *)(a1 + 132);
    v43 = *(_DWORD *)(a1 + 136);
    v44 = *(float *)(a1 + 140);
    v45 = *(unsigned __int8 *)(a1 + 144);
    v46 = *(unsigned __int8 *)(a1 + 145);
    v47 = *(unsigned __int8 *)(a1 + 146);
    v48 = *(unsigned __int8 *)(a1 + 147);
    v49 = *(unsigned __int8 *)(a1 + 148);
    v50 = *(unsigned __int8 *)(a1 + 149);
    v51 = *(unsigned __int8 *)(a1 + 150);
    v52 = *(float *)(a1 + 152);
    v53 = *(unsigned __int8 *)(a1 + 156);
    v54[0] = 67245312;
    v54[1] = v33;
    v55 = 1026;
    v56 = v34;
    v57 = 1026;
    v58 = v35;
    v59 = 1026;
    v60 = v36;
    v61 = 1026;
    v62 = v37;
    v63 = 2050;
    v64 = v38;
    v65 = 2050;
    v66 = v39;
    v67 = 2050;
    v68 = v40;
    v69 = 2050;
    v70 = v41;
    v71 = 2050;
    v72 = v42;
    v73 = 1026;
    v74 = v43;
    v75 = 2050;
    v76 = v44;
    v77 = 1026;
    v78 = v45;
    v79 = 1026;
    v80 = v46;
    v81 = 1026;
    v82 = v47;
    v83 = 1026;
    v84 = v48;
    v85 = 1026;
    v86 = v49;
    v87 = 1026;
    v88 = v50;
    v89 = 1026;
    v90 = v51;
    v91 = 2050;
    v92 = v52;
    v93 = 1026;
    v94 = v53;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[TLS] config config-1,%{public}d,config-2,%{public}d,config-3,%{public}d,config-4,%{public}d,config-5,%{public}d,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}f,config-11,%{public}d,config-12,%{public}f,config-13,%{public}d,config-14,%{public}d,config-15,%{public}d,config-16,%{public}d,config-17,%{public}d,config-18,%{public}d,config-19,%{public}d,config-20,%{public}f,config-21,%{public}d\n", (uint8_t *)v54, 0x9Cu);
  }

}

void sub_1000061A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000061CC(uint64_t a1)
{
  id result;

  *(_BYTE *)(a1 + 40) = CLKappaDeescalator::shouldForceNoop((CLKappaDeescalator *)a1, "ForceTwoLevel");
  *(_DWORD *)(a1 + 36) = CLKappaDeescalator::shouldForceDeescalate((CLKappaDeescalator *)a1, "ForceTwoLevel");
  result = CLKappaDeescalator::shouldTurnOffTwoLevelDeescalator((CLKappaDeescalator *)a1);
  *(_BYTE *)(a1 + 80) = (_BYTE)result;
  return result;
}

uint64_t sub_100006218(uint64_t a1)
{
  char *v2;

  *(_QWORD *)a1 = off_100347FF0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)(a1 + 48), "none");
  *(_QWORD *)a1 = &off_100345078;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  if (*(char *)(a1 + 71) < 0)
  {
    *(_QWORD *)(a1 + 56) = 6;
    v2 = *(char **)(a1 + 48);
  }
  else
  {
    *(_BYTE *)(a1 + 71) = 6;
  }
  strcpy(v2, "de-TLS");
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

uint64_t sub_1000062D4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 72) = a2;
  return result;
}

uint64_t sub_1000062DC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 73) = a2;
  return result;
}

uint64_t sub_1000062E4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 76) = a2;
  return result;
}

uint64_t sub_1000062EC(_BYTE *a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = a1[111] && a1[74];
  if (a1[108] && a1[75])
    v1 |= 2uLL;
  if (a1[110] && a1[77])
    v1 |= 4uLL;
  if (a1[76])
  {
    v1 |= 0x80uLL;
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v2 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "force high sensitivity", v4, 2u);
    }
  }
  return v1;
}

BOOL sub_1000063CC(_BYTE *a1)
{
  NSObject *v2;
  _DWORD v4[2];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100345100);
  v2 = (id)qword_100387318;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 67240192;
    v4[1] = sub_1000062EC(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "proxyForCar bitmap %{public}d", (uint8_t *)v4, 8u);
  }

  return sub_1000062EC(a1) != 0;
}

void sub_1000064B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000064C8(uint64_t a1)
{
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  NSObject *v7;
  int v8;
  _BOOL4 v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  __int16 v14;
  _BOOL4 v15;
  __int16 v16;
  int v17;

  if (*(_BYTE *)(a1 + 80))
    return 6;
  if (*(_BYTE *)(a1 + 79) && !*(_BYTE *)(a1 + 74))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v11 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "De-escalating due to road distance", (uint8_t *)&v12, 2u);
    }
    *(_DWORD *)(a1 + 104) = 2;
    return 4;
  }
  else if (*(_BYTE *)(a1 + 73) && (sub_1000063CC((_BYTE *)a1) || *(_BYTE *)(a1 + 73) && *(_BYTE *)(a1 + 72)))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v3 = (id)qword_100387318;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(unsigned __int8 *)(a1 + 73);
      v5 = sub_1000063CC((_BYTE *)a1);
      v6 = *(unsigned __int8 *)(a1 + 72);
      v12 = 67240704;
      v13 = v4;
      v14 = 1026;
      v15 = v5;
      v16 = 1026;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "two-level escalation min/max cand %{public}d proxy %{public}d ls %{public}d", (uint8_t *)&v12, 0x14u);
    }

    return 5;
  }
  else
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v7 = (id)qword_100387318;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(unsigned __int8 *)(a1 + 73);
      v9 = sub_1000063CC((_BYTE *)a1);
      v10 = *(unsigned __int8 *)(a1 + 72);
      v12 = 67240704;
      v13 = v8;
      v14 = 1026;
      v15 = v9;
      v16 = 1026;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "two-level no info min/max cand %{public}d proxy %{public}d ls %{public}d", (uint8_t *)&v12, 0x14u);
    }

    return 0;
  }
}

void sub_100006728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t sub_100006744(uint64_t a1)
{
  void *v2;
  void *v3;
  unint64_t v4;
  NSObject *v6;
  _DWORD v8[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "ForceTwoLevelReason", *(unsigned __int8 *)(a1 + 32)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v4 = (unint64_t)objc_msgSend(v3, "getIntegerDefault:", v2);

  if ((v4 & 0xFF00000000) == 0 || (_DWORD)v4 == 0)
  {
    v4 = *(unsigned int *)(a1 + 104);
  }
  else if ((v4 - 1) >= 2)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v6 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v8[0] = 67109120;
      v8[1] = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[SC] rejecting invalid reason %d", (uint8_t *)v8, 8u);
    }
    v4 = 0;
  }

  return v4;
}

void sub_100006880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1000068A4(uint64_t a1)
{
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  NSObject *v7;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  _BOOL4 v14;
  __int16 v15;
  int v16;

  if (*(_BYTE *)(a1 + 80))
    return 6;
  if (*(_BYTE *)(a1 + 73) && (sub_1000063CC((_BYTE *)a1) || *(_BYTE *)(a1 + 73) && *(_BYTE *)(a1 + 72)))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v3 = (id)qword_100387318;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(unsigned __int8 *)(a1 + 73);
      v5 = sub_1000063CC((_BYTE *)a1);
      v6 = *(unsigned __int8 *)(a1 + 72);
      v11 = 67240704;
      v12 = v4;
      v13 = 1026;
      v14 = v5;
      v15 = 1026;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "two-level escalation at boundary cand %{public}d proxy %{public}d ls %{public}d", (uint8_t *)&v11, 0x14u);
    }

    return 5;
  }
  else
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v7 = (id)qword_100387318;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(unsigned __int8 *)(a1 + 73);
      v9 = sub_1000063CC((_BYTE *)a1);
      v10 = *(unsigned __int8 *)(a1 + 72);
      v11 = 67240704;
      v12 = v8;
      v13 = 1026;
      v14 = v9;
      v15 = 1026;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "two-level de-escalation at boundary cand %{public}d proxy %{public}d ls %{public}d", (uint8_t *)&v11, 0x14u);
    }

    *(_DWORD *)(a1 + 104) = 1;
    return 4;
  }
}

void sub_100006A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100006AA0(uint64_t a1, float16x4_t *a2)
{
  NSObject *v4;
  NSObject *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  double v37;

  if (a2[3].i8[4] == 1)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v4 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "got bt hint, probably in car", (uint8_t *)&v22, 2u);
    }
    *(_BYTE *)(a1 + 74) = 1;
  }
  *(_QWORD *)(a1 + 84) = vcvtq_f32_f16(a2[5]).u64[0];
  _H0 = a2[5].i16[2];
  __asm { FCVT            S0, H0 }
  *(_DWORD *)(a1 + 92) = _S0;
  *(_QWORD *)(a1 + 96) = (unint64_t)((double)(unint64_t)(*(_QWORD *)&a2[1] - *(_QWORD *)&a2[4]) / 1000000.0);
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100345100);
  v11 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(float *)(a1 + 84);
    v13 = *(float *)(a1 + 116);
    v14 = *(float *)(a1 + 88);
    v15 = *(float *)(a1 + 120);
    v16 = *(float *)(a1 + 92);
    v17 = *(float *)(a1 + 124);
    v18 = *(_QWORD *)(a1 + 96);
    v19 = *(float *)(a1 + 128);
    v22 = 134350848;
    v23 = v12;
    v24 = 2050;
    v25 = v13;
    v26 = 2050;
    v27 = v14;
    v28 = 2050;
    v29 = v15;
    v30 = 2050;
    v31 = v16;
    v32 = 2050;
    v33 = v17;
    v34 = 2050;
    v35 = v18;
    v36 = 2050;
    v37 = v19;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "imu confidence (%{public}f, %{public}f) (%{public}f, %{public}f) (%{public}f, %{public}f) (%{public}llu, %{public}f)", (uint8_t *)&v22, 0x52u);
  }
  if (*(_QWORD *)(a1 + 96) <= (unint64_t)*(float *)(a1 + 128))
  {
    if (*(float *)(a1 + 84) > *(float *)(a1 + 116)
      || *(float *)(a1 + 88) > *(float *)(a1 + 120)
      || *(float *)(a1 + 92) > *(float *)(a1 + 124))
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100345100);
      v21 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v22) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "imu cond passed", (uint8_t *)&v22, 2u);
      }
      *(_BYTE *)(a1 + 75) = 1;
    }
  }
  else
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v20 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v22) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "imu coef too old", (uint8_t *)&v22, 2u);
    }
  }
}

void sub_100006DA4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  int v6;
  double v7;
  double v8;
  NSObject *v9;
  double v10;
  NSObject *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  _BOOL4 v20;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100345100);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 156);
    v6 = *(unsigned __int8 *)(a2 + 16);
    v7 = *(double *)(a2 + 8);
    v8 = *(float *)(a1 + 140);
    v12[0] = 67241216;
    v12[1] = v5;
    v13 = 1026;
    v14 = v6;
    v15 = 2050;
    v16 = v7;
    v17 = 2050;
    v18 = v8;
    v19 = 1026;
    v20 = v7 < v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ignoreUnknownRoads %{public}d roadClass %{public}d distance to road %{public}f under %{public}f passed %{public}d", (uint8_t *)v12, 0x28u);
  }
  if (*(_BYTE *)(a1 + 156) && *(_BYTE *)(a2 + 16) == 9)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345100);
    v9 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "roadClass UNKNOWN_ROAD. Ignoring per configuration.", (uint8_t *)v12, 2u);
    }
  }
  else
  {
    v10 = *(double *)(a2 + 8);
    if (v10 < *(float *)(a1 + 140))
      *(_BYTE *)(a1 + 77) = 1;
    if (*(_BYTE *)(a1 + 149))
    {
      if (*(_BYTE *)(a1 + 150))
      {
        if (!sub_100006FE8())
          return;
        v10 = *(double *)(a2 + 8);
      }
      if (v10 > *(float *)(a1 + 152))
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_100345100);
        v11 = qword_100387318;
        if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v12[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Road Distance de-escalation condition met", (uint8_t *)v12, 2u);
        }
        *(_BYTE *)(a1 + 79) = 1;
      }
    }
  }
}

id sub_100006FE8()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[CSMapDataQuality sharedInstance](CSMapDataQuality, "sharedInstance"));
  v1 = objc_msgSend(v0, "turnByTurnDirectionsEnabled");

  return v1;
}

void sub_100007024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100007038(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

uint64_t sub_10000706C()
{
  return 6;
}

uint64_t sub_100007074()
{
  return 6;
}

uint64_t sub_10000707C()
{
  return 6;
}

_QWORD *sub_100007088(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_100007138();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_100007138()
{
  sub_10000714C("basic_string");
}

void sub_10000714C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10000719C(exception, a1);
}

void sub_100007188(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10000719C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_1000071C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_100007248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000072B8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CSInjectionServiceSilo"));
  v2 = (void *)qword_100389280;
  qword_100389280 = (uint64_t)v1;

}

void sub_1000073E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10000747C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100007768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_100007798()
{
  if (qword_1003873A0 != -1)
    dispatch_once(&qword_1003873A0, &stru_100345148);
  return (id)qword_1003873A8;
}

void sub_10000781C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "InjectionService");
  v2 = (void *)qword_1003873A8;
  qword_1003873A8 = (uint64_t)v1;

}

void sub_10000784C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double v18;
  NSObject *v19;
  int v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100345D20);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(unsigned __int16 *)(a1 + 32);
    v6 = *(unsigned __int16 *)(a1 + 34);
    v7 = *(float *)(a1 + 48);
    v8 = *(float *)(a1 + 40);
    v9 = *(float *)(a1 + 44);
    v10 = *(float *)(a1 + 52);
    v11 = *(float *)(a1 + 56);
    v12 = *(__int16 *)(a1 + 38);
    v13 = *(unsigned __int16 *)(a1 + 36);
    v14 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a1 + 60);
    v15 = *(_DWORD *)(a1 + 64);
    v17 = *(float *)(a1 + 16);
    v18 = *(float *)(a1 + 20);
    v20 = 67244032;
    v21 = v3;
    v22 = 2050;
    v23 = v4;
    v24 = 1026;
    v25 = v5;
    v26 = 1026;
    v27 = v6;
    v28 = 2050;
    v29 = v7;
    v30 = 2050;
    v31 = v8;
    v32 = 2050;
    v33 = v9;
    v34 = 2050;
    v35 = v10;
    v36 = 2050;
    v37 = v11;
    v38 = 1026;
    v39 = v12;
    v40 = 1026;
    v41 = v13;
    v42 = 1026;
    v43 = v14;
    v44 = 1026;
    v45 = v15;
    v46 = 1026;
    v47 = v16;
    v48 = 2050;
    v49 = v17;
    v50 = 2050;
    v51 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Zg] summary,%{public}d,A,%{public}llu,B,%{public}hu,C,%{public}hu,D,%{public}f,E,%{public}f,F,%{public}f,G,%{public}f,H,%{public}f,I,%{public}hd,J,%{public}hu,K,%{public}d,L,%{public}d,M,%{public}d,config-1,%{public}f,config-2,%{public}f\n", (uint8_t *)&v20, 0x82u);
  }
  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345D20);
    v19 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 67240192;
      v21 = dword_100389290;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[Zg] epoch %{public}d YES\n", (uint8_t *)&v20, 8u);
    }
  }
  ++dword_100389290;
}

id sub_100007A6C()
{
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100345D20);
  return (id)qword_100387318;
}

void sub_100007AAC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  v24 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 32)));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v3, CFSTR("zg-A"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 34)));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v4, CFSTR("zg-B"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 48)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringValue"));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v6, CFSTR("zg-C"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 40)));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "stringValue"));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v8, CFSTR("zg-D"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 44)));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringValue"));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v10, CFSTR("zg-E"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 52)));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "stringValue"));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v12, CFSTR("zg-F"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 56)));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringValue"));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v14, CFSTR("zg-G"));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", *(__int16 *)(a1 + 38)));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v15, CFSTR("zg-H"));

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 36)));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v16, CFSTR("zg-I"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 12)));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v17, CFSTR("zg-J"));

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v18, CFSTR("zg-K"));

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60)));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v19, CFSTR("zg-L"));

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 16)));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "stringValue"));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v21, CFSTR("zg-config-1"));

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 20)));
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "stringValue"));
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v23, CFSTR("zg-config-2"));

}

void sub_100007DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_100007E58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int32x2_t v7;
  CLZgDetection *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)a1, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_DWORD *)(v5 + 64) = 1;
  *(_QWORD *)(v5 + 68) = 0x410000003DCCCCCDLL;
  *(_QWORD *)(v5 + 80) = -1;
  v7 = vdup_n_s32(0x7F7FFFFFu);
  *(int32x2_t *)(v5 + 88) = v7;
  *(_DWORD *)(v5 + 96) = 2139095039;
  *(_OWORD *)(v5 + 104) = xmmword_1002E4F30;
  v8 = (CLZgDetection *)(v5 + 104);
  *(_OWORD *)(v5 + 120) = xmmword_1002E4F40;
  *(_QWORD *)(v5 + 136) = -1;
  *(int32x2_t *)(v5 + 144) = v7;
  *(_DWORD *)(v5 + 152) = 2139095039;
  sub_100009B94(v5 + 232, 0);
  *(_BYTE *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0xBF80000000000000;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 382) = 0;
  *(_QWORD *)(a1 + 390) = 0xFFFFLL;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0x4B200000000;
  *(_QWORD *)(a1 + 29296) = 0x4B200000000;
  *(_QWORD *)(a1 + 30512) = 0x12D00000000;
  *(_QWORD *)(a1 + 37744) = 0x12C00000000;
  v9 = (char *)operator new(0x90uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_100345FD0;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 7) = 0u;
  *((_QWORD *)v9 + 3) = &off_10034D018;
  *((_OWORD *)v9 + 8) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_QWORD *)v9 + 5) = 0x410000003DCCCCCDLL;
  *(_OWORD *)(v9 + 77) = 0u;
  *((_DWORD *)v9 + 26) = 0;
  *((_QWORD *)v9 + 12) = 0;
  *((_QWORD *)v9 + 14) = 0;
  *((_QWORD *)v9 + 15) = 0;
  *(_QWORD *)&v26 = v9 + 24;
  *((_QWORD *)&v26 + 1) = v9;
  sub_1000081AC(a1 + 8, &v26);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 8);
  v25 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_100008210((uint64_t)&v24, &v26);
  sub_1000081AC(v6, &v26);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance", v24));
  sub_10000827C((_QWORD *)a1, (unint64_t)objc_msgSend(v22, "hardware"));
  *(_QWORD *)(*(_QWORD *)v6 + 104) = objc_msgSend(v22, "hardware");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = CLZgDetection::getHardwareProperties(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);

  return a1;
}

void sub_10000815C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A384((uint64_t)v1 + 296);
  sub_10000A384((uint64_t)v1 + 256);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1000081AC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void *sub_100008210@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t sub_10000827C(_QWORD *a1, unint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  v4 = (std::__shared_weak_count *)a1[2];
  v14 = a1[1];
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_100008210((uint64_t)&v14, &v16);
  sub_1000081AC((uint64_t)(a1 + 4), &v16);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)(a1[4] + 104) = a2;
  CLZgDetection::setHardware((uint64_t)(a1 + 13), a2);
  result = CLZgDetection::getHardwareProperties((CLZgDetection *)(a1 + 13));
  *(_QWORD *)(a1[4] + 112) = result;
  return result;
}

uint64_t sub_10000837C(uint64_t a1)
{
  return CLZgDetection::getHardwareProperties((CLZgDetection *)(a1 + 104));
}

uint64_t sub_100008384(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int32x2_t v5;
  CLZgDetection *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;

  v2 = (_QWORD *)(a1 + 44952);
  *(_QWORD *)a1 = off_100345D50;
  *(_QWORD *)(a1 + 44952) = off_100345DF8;
  *(_QWORD *)(a1 + 44960) = off_100345EC0;
  *(_QWORD *)(a1 + 44968) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock((CLKappaAlgBlock *)a1, (uint64_t *)off_100345718);
  *(_QWORD *)v3 = off_100345218;
  *v2 = off_1003454B8;
  v2[1] = off_1003455F0;
  v2[2] = off_1003456C8;
  *(_OWORD *)(v3 + 32) = 0u;
  v4 = v3 + 32;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 1;
  *(_QWORD *)(v3 + 68) = 0x410000003DCCCCCDLL;
  *(_QWORD *)(v3 + 80) = -1;
  v5 = vdup_n_s32(0x7F7FFFFFu);
  *(int32x2_t *)(v3 + 88) = v5;
  *(_DWORD *)(v3 + 96) = 2139095039;
  *(_OWORD *)(v3 + 104) = xmmword_1002E4F30;
  v6 = (CLZgDetection *)(v3 + 104);
  *(_OWORD *)(v3 + 120) = xmmword_1002E4F40;
  *(_QWORD *)(v3 + 136) = -1;
  *(int32x2_t *)(v3 + 144) = v5;
  *(_DWORD *)(a1 + 152) = 2139095039;
  sub_100009B94(v3 + 232, 0);
  *(_BYTE *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0xBF80000000000000;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 382) = 0;
  *(_QWORD *)(a1 + 390) = 0xFFFFLL;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0x4B200000000;
  *(_QWORD *)(a1 + 29296) = 0x4B200000000;
  *(_QWORD *)(a1 + 30512) = 0x12D00000000;
  *(_QWORD *)(a1 + 37744) = 0x12C00000000;
  v7 = (char *)operator new(0x90uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = off_100345FD0;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_QWORD *)v7 + 3) = &off_10034D018;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_QWORD *)v7 + 5) = 0x410000003DCCCCCDLL;
  *(_OWORD *)(v7 + 77) = 0u;
  *((_DWORD *)v7 + 26) = 0;
  *((_QWORD *)v7 + 12) = 0;
  *((_QWORD *)v7 + 14) = 0;
  *((_QWORD *)v7 + 15) = 0;
  *(_QWORD *)&v24 = v7 + 24;
  *((_QWORD *)&v24 + 1) = v7;
  sub_1000081AC(a1 + 8, &v24);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 8);
  v23 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_100008210((uint64_t)&v22, &v24);
  sub_1000081AC(v4, &v24);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance", v22));
  sub_10000827C((_QWORD *)a1, (unint64_t)objc_msgSend(v20, "hardware"));
  *(_QWORD *)(*(_QWORD *)v4 + 104) = objc_msgSend(v20, "hardware");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = CLZgDetection::getHardwareProperties(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);

  return a1;
}

void sub_10000868C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A384((uint64_t)v1 + 296);
  sub_10000A384((uint64_t)v1 + 256);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100345718);
  _Unwind_Resume(a1);
}

void sub_1000086E0(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  id v12;
  int v13[2];

  v12 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgZgConfig", *(unsigned __int8 *)(a1 + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 983815946;
  LODWORD(v4) = 1036831949;
  LODWORD(v5) = 1.5;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v12, v3, v5, v4);
  v13[0] = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1.0;
  LODWORD(v9) = 14.0;
  LODWORD(v10) = 8.0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v12, v8, v9, v10);
  v13[1] = v11;

  sub_1000087C8(a1, v13);
}

void sub_1000087A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

double sub_1000087C8(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double result;
  double v8;
  double v9;
  int v10;
  double v11;
  __int16 v12;
  double v13;

  v3 = *a2;
  *(_DWORD *)(a1 + 68) = *a2;
  v4 = a2[1];
  *(_DWORD *)(a1 + 72) = v4;
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v5 + 16) = v3;
  *(_DWORD *)(v5 + 20) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100345D20);
  v6 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(float *)(a1 + 68);
    v9 = *(float *)(a1 + 72);
    v10 = 134218240;
    v11 = v8;
    v12 = 2048;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Zg] config %f, %f", (uint8_t *)&v10, 0x16u);
  }
  return result;
}

void sub_1000088BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v3 + 24) = a2;
  *(_DWORD *)(v3 + 44) = 0;
  v4 = *(id *)(*(_QWORD *)(a1 + 48) + 24);
  if (objc_msgSend(v4, "count"))
    *(float *)(*(_QWORD *)(a1 + 32) + 44) = CLRobustMaxAccelNorm::robustMaxAccelNorm(v4);

}

void sub_100008920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100008934(_QWORD *a1, uint64_t a2)
{
  sub_1000088BC((uint64_t)a1 + *(_QWORD *)(*a1 - 48), a2);
}

void sub_100008944(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  v3 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_DWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 29296) = 0;
  *(_DWORD *)(a1 + 30512) = 0;
  *(_DWORD *)(a1 + 37744) = 0;
  *(_DWORD *)(a1 + 388) = -65536;
  *(_OWORD *)(a1 + 368) = xmmword_1002E4F50;
  *(_QWORD *)(a1 + 80) = -1;
  *(int32x2_t *)(a1 + 88) = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a1 + 96) = 2139095039;
  CLZgDetection::reset((int32x2_t *)(a1 + 104));
  *(_DWORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 396) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0;
}

void sub_1000089F8(_QWORD *a1)
{
  sub_100008944((uint64_t)a1 + *(_QWORD *)(*a1 - 56));
}

void sub_100008A08(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  _WORD *v19;
  __int16 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v24[22];

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)a2;
  if (!*(_QWORD *)(v5 + 88))
    *(_QWORD *)(v5 + 88) = v6;
  *(_QWORD *)(v5 + 96) = v6;
  v7 = *(unsigned __int16 *)(a1 + 442);
  if (*(_WORD *)(a1 + 442))
  {
    a3 = (double)v6;
    v8 = a1 + 448;
    v9 = v7 + *(unsigned __int16 *)(a1 + 440) - 1;
    v10 = *(unsigned int *)(a1 + 444);
    if (v9 >= v10)
      v11 = *(unsigned int *)(a1 + 444);
    else
      v11 = 0;
    v12 = *(_QWORD *)(v8 + 24 * (v9 - v11));
    if ((double)v12 + 2499.99994 < a3)
    {
      ++*(_WORD *)(v5 + 80);
      *(float *)&a3 = (float)(v6 - v12) / 1000000.0;
      if (*(float *)(v5 + 72) >= *(float *)&a3)
        LODWORD(a3) = *(_DWORD *)(v5 + 72);
      *(_DWORD *)(v5 + 72) = LODWORD(a3);
    }
    if (v6 <= v12)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100345D20);
      v13 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_ERROR))
      {
        v14 = *(_QWORD *)a2;
        v15 = *(unsigned __int16 *)(a1 + 440) + (unint64_t)*(unsigned __int16 *)(a1 + 442) - 1;
        v16 = *(unsigned int *)(a1 + 444);
        if (v15 < v16)
          v16 = 0;
        v17 = *(_QWORD *)(v8 + 24 * (v15 - v16));
        *(_DWORD *)v24 = 134218240;
        *(_QWORD *)&v24[4] = v14;
        *(_WORD *)&v24[12] = 2048;
        *(_QWORD *)&v24[14] = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[Zg] acc went backward %llu <- %llu", v24, 0x16u);
      }
      return;
    }
  }
  else
  {
    LODWORD(v10) = *(_DWORD *)(a1 + 444);
  }
  v18 = (unsigned __int16 *)(a1 + 440);
  if ((_DWORD)v10 == (_DWORD)v7)
  {
    v19 = (_WORD *)(a1 + 29296);
    v20 = *(_WORD *)(a1 + 29298);
    if (v20)
    {
      v21 = (unsigned __int16)*v19;
      LOBYTE(a3) = *(_BYTE *)(a1 + v21 + 29304);
      *(float *)(a1 + 352) = *(float *)(a1 + 352) + (float)((float)LODWORD(a3) * -0.00125);
      v22 = v21 + 1;
      v23 = *(unsigned int *)(a1 + 29300);
      if (v22 < v23)
        LOWORD(v23) = 0;
      *v19 = v22 - v23;
      *(_WORD *)(a1 + 29298) = v20 - 1;
    }
  }
  *(_QWORD *)v24 = v6;
  *(_QWORD *)&v24[8] = *(_QWORD *)(a2 + 8);
  *(_DWORD *)&v24[16] = *(_DWORD *)(a2 + 16);
  sub_100008C40(v18, (__int128 *)v24);
}

unsigned __int16 *sub_100008C40(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[12 * (v3 - v2)];
  v5 = *a2;
  *((_QWORD *)v4 + 3) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v4 + 4) = v5;
  v6 = result[1];
  v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    v8 = *result + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

void sub_100008CAC(_QWORD *a1, uint64_t a2, double a3)
{
  sub_100008A08((uint64_t)a1 + *(_QWORD *)(*a1 - 64), a2, a3);
}

void sub_100008CBC(float32x2_t *a1, uint64_t a2)
{
  float32x2_t *v4;
  float32x2_t v5;
  unint64_t v6;
  float32x2_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  int32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float v15;
  __int32 v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float32x2_t v21;
  _BYTE v22[22];

  v4 = a1 + 3814;
  v5 = a1[4];
  v6 = *(_QWORD *)(a2 + 42);
  if (!*(_QWORD *)(*(_QWORD *)&v5 + 88))
    *(_QWORD *)(*(_QWORD *)&v5 + 88) = v6;
  *(_QWORD *)(*(_QWORD *)&v5 + 96) = v6;
  if (!a1[3814].i16[1])
    goto LABEL_11;
  v7 = a1 + 3815;
  v8 = a1[3814].u16[1] + (unint64_t)a1[3814].u16[0] - 1;
  v9 = a1[3814].u32[1];
  if (v8 < v9)
    v9 = 0;
  v10 = (unint64_t)v7[3 * (v8 - v9)];
  if ((double)v10 + 9999.99978 < (double)v6)
  {
    ++*(_WORD *)(*(_QWORD *)&v5 + 82);
    v11 = (float)(v6 - v10) / 1000000.0;
    if (*(float *)(*(_QWORD *)&v5 + 76) >= v11)
      v11 = *(float *)(*(_QWORD *)&v5 + 76);
    *(float *)(*(_QWORD *)&v5 + 76) = v11;
  }
  if (v6 <= v10)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100345D20);
    v17 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a2 + 42);
      v19 = v4->u16[0] + (unint64_t)v4->u16[1] - 1;
      v20 = v4->u32[1];
      if (v19 < v20)
        v20 = 0;
      v21 = v7[3 * (v19 - v20)];
      *(_DWORD *)v22 = 134218240;
      *(_QWORD *)&v22[4] = v18;
      *(_WORD *)&v22[12] = 2048;
      *(float32x2_t *)&v22[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[Zg] DM went backward %llu <- %llu", v22, 0x16u);
    }
  }
  else
  {
LABEL_11:
    *(_QWORD *)v22 = v6;
    *(_QWORD *)&v22[8] = *(_QWORD *)(a2 + 16);
    *(_DWORD *)&v22[16] = *(_DWORD *)(a2 + 24);
    sub_100008C40((unsigned __int16 *)&a1[3814], (__int128 *)v22);
    v13 = a1[10];
    v14 = *(float32x2_t *)(a2 + 42);
    if (*(_QWORD *)&v13 != -1 && *(_QWORD *)&v14 > *(_QWORD *)&v13)
    {
      *(float *)v12.i32 = (float)(unint64_t)(*(_QWORD *)&v14 - *(_QWORD *)&v13) / 1000000.0;
      v15 = (float)(*(float *)(a2 + 24) - a1[12].f32[0]) / *(float *)v12.i32;
      *(_QWORD *)v22 = (*(_QWORD *)&v14 + *(_QWORD *)&v13) >> 1;
      *(float32x2_t *)&v22[8] = vdiv_f32(vsub_f32(*(float32x2_t *)(a2 + 16), a1[11]), (float32x2_t)vdup_lane_s32(v12, 0));
      *(float *)&v22[16] = v15;
      sub_100008C40((unsigned __int16 *)&a1[4718], (__int128 *)v22);
      v14 = *(float32x2_t *)(a2 + 42);
    }
    v16 = *(_DWORD *)(a2 + 24);
    a1[10] = v14;
    a1[11] = *(float32x2_t *)(a2 + 16);
    a1[12].i32[0] = v16;
    sub_100008F2C(a1);
  }
}

void sub_100008F2C(float32x2_t *a1)
{
  unsigned __int16 *v1;
  float32x2_t *v3;
  unint64_t v4;
  unsigned __int16 *v5;
  float32x2_t *v6;
  float32x2_t v7;
  int v8;
  const CSSPUTriad_Struct *v9;
  unint64_t v10;
  CSSPUTriad_Struct *v11;
  CSSPUTriad_Struct *v12;
  unint64_t v13;
  const CSSPUTriad_Struct *v14;
  const CSSPUTriad_Struct *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float32x2_t v27;
  _QWORD *v28;
  float32x2_t v29;
  __int16 v30;
  float v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  CLZgDetection *v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unint64_t v37;
  unint64_t v38;

  v1 = (unsigned __int16 *)&a1[4718] + 1;
  if (a1[4718].u16[1] >= 2u)
  {
    v3 = a1 + 3662;
    v4 = a1[3662].u16[1];
    if (v4 < a1[55].u16[1])
    {
      v36 = (unsigned __int16 *)&a1[4718];
      v5 = (unsigned __int16 *)&a1[55];
      v6 = a1 + 3663;
      v35 = (unsigned __int16 *)&a1[3814];
      v7 = (float32x2_t)vdup_n_s32(0x3AA3D70Au);
      v33 = (unsigned __int16 *)&a1[4718] + 1;
      v34 = (CLZgDetection *)&a1[13];
      v32 = (unsigned __int16 *)&a1[55];
      do
      {
        v38 = *v1;
        v37 = v3[152].u16[1];
        v8 = sub_100009284((unsigned __int16 *)a1, v4, (uint64_t *)&v38, (uint64_t *)&v37);
        if (v8)
        {
          if (v8 == 2)
            break;
          v9 = (const CSSPUTriad_Struct *)sub_10000A7C0(v5, v4);
          v10 = v37;
          v11 = (CSSPUTriad_Struct *)sub_10000A7C0(v35, v37);
          v12 = (CSSPUTriad_Struct *)sub_10000A7C0(v35, v10 - 1);
          v13 = v38;
          v14 = (const CSSPUTriad_Struct *)sub_10000A7C0(v36, v38);
          v15 = (const CSSPUTriad_Struct *)sub_10000A7C0(v36, v13 - 1);
          CLZgDetection::queryZgState(v34, v9, v11, v12, v14, v15);
          v17 = v3->u16[1];
          v18 = v3->u32[1];
          v19 = v3->u16[0];
          if (v19 + v17 >= v18)
            v20 = v3->u32[1];
          else
            v20 = 0;
          v6->i8[v19 + v17 - v20] = v16;
          if (v18 <= v17)
          {
            if (v19 + 1 < v18)
              LOWORD(v18) = 0;
            v3->i16[0] = v19 + 1 - v18;
          }
          else
          {
            v3->i16[1] = v17 + 1;
          }
          v5 = v32;
          v1 = v33;
          if (v16)
          {
            if (*(_QWORD *)sub_10000A7C0(v32, v4) - *(_QWORD *)&a1[52] <= 0xEA3uLL)
            {
              v25 = a1[45].f32[0];
            }
            else
            {
              ++a1[49].i16[2];
              v25 = 0.00125;
            }
            v26 = v25 + 0.00125;
            a1[45].f32[0] = v26;
            if (a1[45].f32[1] >= v26)
              v26 = a1[45].f32[1];
            a1[45].f32[1] = v26;
            v27 = a1[50];
            if (!*(_QWORD *)&v27)
              v27 = *(float32x2_t *)sub_10000A7C0(v32, v4);
            a1[50] = v27;
            v28 = (_QWORD *)sub_10000A7C0(v32, v4);
            v29 = a1[51];
            if (*v28 > *(_QWORD *)&v29)
              v29 = *(float32x2_t *)sub_10000A7C0(v32, v4);
            a1[51] = v29;
            a1[44] = vadd_f32(a1[44], v7);
            a1[52] = *(float32x2_t *)sub_10000A7C0(v32, v4);
          }
        }
        else
        {
          v21 = v3->u16[1];
          v22 = v3->u32[1];
          v23 = v3->u16[0];
          if (v23 + v21 >= v22)
            v24 = v3->u32[1];
          else
            v24 = 0;
          v6->i8[v23 + v21 - v24] = 0;
          if (v22 <= v21)
          {
            if (v23 + 1 < v22)
              LOWORD(v22) = 0;
            v3->i16[0] = v23 + 1 - v22;
          }
          else
          {
            v3->i16[1] = v21 + 1;
          }
        }
        ++v4;
      }
      while (v4 < a1[55].u16[1]);
    }
    LODWORD(v38) = -1082130432;
    v30 = -1;
    LOWORD(v37) = -1;
    v31 = -1.0;
    if (a1[44].f32[0] >= a1[8].f32[1])
    {
      if (*(_DWORD *)(v1 + 1) == *v1 && a1[55].i32[1] == a1[55].u16[1])
      {
        sub_10000938C((uint64_t)a1, (float *)&v38, (__int16 *)&v37);
        ++a1[49].i16[0];
        v31 = *(float *)&v38;
        v30 = v37;
      }
      else
      {
        v30 = -1;
      }
    }
    sub_10000957C((uint64_t)a1, v30, v31);
  }
}

void sub_100009274(_QWORD *a1, uint64_t a2)
{
  sub_100008CBC((float32x2_t *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2);
}

uint64_t sub_100009284(unsigned __int16 *a1, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int16 *v4;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v16;
  uint64_t i;
  unint64_t v18;
  uint64_t v19;

  v4 = a1 + 15257;
  if (a1[18873])
  {
    v9 = a1 + 18872;
    *a3 = a1[18873];
    v10 = a1 + 220;
    while (1)
    {
      v11 = *(_QWORD *)sub_10000A7C0(v10, a2);
      v12 = (unint64_t *)sub_10000A7C0(v9, *a3 - 1);
      v13 = *a3;
      if (v11 > *v12)
        break;
      v14 = v13 - 1;
      *a3 = v14;
      if (!v14)
        return 0;
    }
    if (v13 == v4[3616])
    {
      return 2;
    }
    else
    {
      v16 = a1 + 15256;
      for (i = *v4; ; i = *a4 - 1)
      {
        *a4 = i;
        v18 = *(_QWORD *)sub_10000A7C0(v10, a2);
        if (v18 > *(_QWORD *)sub_10000A7C0(v16, *a4 - 1))
          break;
      }
      return 1;
    }
  }
  else
  {
    v19 = sub_1002D30A4();
    return sub_10000938C(v19);
  }
}

uint64_t sub_10000938C(uint64_t result, float *a2, __int16 *a3)
{
  unsigned int v3;
  uint64_t v4;
  _WORD *v5;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  __int16 v12;
  unint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  unint64_t v22;

  *a2 = 0.0;
  *a3 = 0;
  v3 = *(unsigned __int16 *)(result + 442);
  if (v3 >= 0x14)
  {
    v4 = result;
    v5 = (_WORD *)(result + 29298);
    if (v3 >= *(unsigned __int16 *)(result + 29298))
    {
      v8 = 0;
      v9 = 0.0;
      do
      {
        v10 = *(float *)(sub_10000A7C0((unsigned __int16 *)(v4 + 440), v8) + 8);
        v11 = *(float *)(sub_10000A7C0((unsigned __int16 *)(v4 + 440), v8) + 12);
        result = sub_10000A7C0((unsigned __int16 *)(v4 + 440), v8);
        v9 = v9
           + sqrtf((float)((float)(v11 * v11) + (float)(v10 * v10))+ (float)(*(float *)(result + 16) * *(float *)(result + 16)));
        ++v8;
      }
      while (v8 != 20);
      *a2 = v9 / 20.0;
      v12 = *a3;
      if ((float)(v9 / 20.0) >= *(float *)(v4 + 72))
        ++v12;
      *a3 = v12;
      if (*v5 != 20)
      {
        v13 = 0;
        do
        {
          v14 = *(float *)(sub_10000A7C0((unsigned __int16 *)(v4 + 440), v13) + 8);
          v15 = *(float *)(sub_10000A7C0((unsigned __int16 *)(v4 + 440), v13) + 12);
          v16 = sub_10000A7C0((unsigned __int16 *)(v4 + 440), v13);
          v17 = v9
              - sqrtf((float)((float)(v15 * v15) + (float)(v14 * v14))+ (float)(*(float *)(v16 + 16) * *(float *)(v16 + 16)));
          v18 = *(float *)(sub_10000A7C0((unsigned __int16 *)(v4 + 440), v13 + 20) + 8);
          v19 = *(float *)(sub_10000A7C0((unsigned __int16 *)(v4 + 440), v13 + 20) + 12);
          result = sub_10000A7C0((unsigned __int16 *)(v4 + 440), v13 + 20);
          v9 = v17
             + sqrtf((float)((float)(v19 * v19) + (float)(v18 * v18))+ (float)(*(float *)(result + 16) * *(float *)(result + 16)));
          if ((float)(v9 / 20.0) >= *(float *)(v4 + 72))
          {
            v20 = *(_QWORD *)(v4 + 432);
            if (!v20)
            {
              result = sub_10000A7C0((unsigned __int16 *)(v4 + 440), v13 + 1);
              v20 = *(_QWORD *)result;
            }
            *(_QWORD *)(v4 + 432) = v20;
            ++*a3;
          }
          v21 = *a2;
          if (*a2 < (float)(v9 / 20.0))
            v21 = v9 / 20.0;
          *a2 = v21;
          v22 = v13 + 2;
          ++v13;
        }
        while (v22 <= (unint64_t)(unsigned __int16)*v5 - 20);
      }
    }
  }
  return result;
}

float sub_10000957C(uint64_t a1, int a2, float a3)
{
  float v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  __int16 *v8;
  _DWORD *v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  float result;
  int v21;

  v3 = *(float *)(a1 + 352);
  if (v3 >= *(float *)(a1 + 68) && *(float *)(a1 + 72) <= a3)
  {
    ++*(_WORD *)(a1 + 394);
    if (v3 < *(float *)(a1 + 376))
      v3 = *(float *)(a1 + 376);
    *(float *)(a1 + 376) = v3;
    if (*(float *)(a1 + 368) > a3)
      a3 = *(float *)(a1 + 368);
    *(float *)(a1 + 368) = a3;
    v10 = *(__int16 *)(a1 + 388);
    if (v10 <= a2)
      LOWORD(v10) = a2;
    *(_WORD *)(a1 + 388) = v10;
    v6 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v6 + 8) = 1;
    *(_BYTE *)(v6 + 68) = 1;
  }
  else
  {
    if (*(float *)(a1 + 372) > a3)
      a3 = *(float *)(a1 + 372);
    *(float *)(a1 + 372) = a3;
    v4 = *(__int16 *)(a1 + 390);
    if (v4 <= a2)
      LOWORD(v4) = a2;
    *(_WORD *)(a1 + 390) = v4;
    v5 = 352;
    if (v3 < *(float *)(a1 + 380))
      v5 = 380;
    *(_DWORD *)(a1 + 380) = *(_DWORD *)(a1 + v5);
    v6 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(v6 + 8))
    {
      v7 = (int *)(a1 + 372);
      v8 = (__int16 *)(a1 + 390);
      v9 = (_DWORD *)(a1 + 380);
      goto LABEL_19;
    }
  }
  v9 = (_DWORD *)(a1 + 376);
  v7 = (int *)(a1 + 368);
  v8 = (__int16 *)(a1 + 388);
LABEL_19:
  v11 = *v8;
  v12 = *v7;
  *(_DWORD *)(v6 + 48) = *v9;
  *(_DWORD *)(v6 + 40) = v12;
  *(_WORD *)(v6 + 38) = v11;
  v13 = *(_QWORD *)(a1 + 424);
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 432);
    v15 = v14 - v13;
    if (!v14)
      v15 = 0x7FFFFFFF;
    *(_DWORD *)(v6 + 12) = v15;
    v16 = *(_QWORD *)(a1 + 400);
    v17 = v16 - v13;
    if (!v16)
      v17 = 0x7FFFFFFF;
    *(_DWORD *)(v6 + 64) = v17;
  }
  v18 = *(_QWORD *)(a1 + 408);
  if (v18)
    v19 = v18 - *(_DWORD *)(a1 + 400);
  else
    v19 = 0x7FFFFFFF;
  *(_DWORD *)(v6 + 60) = v19;
  *(_WORD *)(v6 + 32) = *(_WORD *)(a1 + 392);
  *(_DWORD *)(v6 + 34) = *(_DWORD *)(a1 + 394);
  result = *(float *)(a1 + 356);
  v21 = *(_DWORD *)(a1 + 364);
  *(float *)(v6 + 52) = result;
  *(_DWORD *)(v6 + 56) = v21;
  return result;
}

uint64_t sub_100009718()
{
  return 0;
}

uint64_t sub_100009724@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_10000978C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1000097A4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *sub_100009824@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (char *)result + *(_QWORD *)(*result - 40);
  v4 = *((_QWORD *)v2 + 1);
  v3 = *((_QWORD *)v2 + 2);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void sub_1000098F0(CLKappaAlgBlock *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100345218;
  v2 = (uint64_t)a1 + 32;
  *((_QWORD *)a1 + 5619) = off_1003454B8;
  *((_QWORD *)a1 + 5620) = off_1003455F0;
  *((_QWORD *)a1 + 5621) = off_1003456C8;
  sub_10000A384((uint64_t)a1 + 296);
  sub_10000A384((uint64_t)a1 + 256);
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100345718);
}

void sub_100009964(CLKappaAlgBlock *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100345218;
  v2 = (uint64_t)a1 + 32;
  *((_QWORD *)a1 + 5619) = off_1003454B8;
  *((_QWORD *)a1 + 5620) = off_1003455F0;
  *((_QWORD *)a1 + 5621) = off_1003456C8;
  sub_10000A384((uint64_t)a1 + 296);
  sub_10000A384((uint64_t)a1 + 256);
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100345718);
  operator delete();
}

uint64_t sub_1000099EC(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 == 2)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x10) != 0)
      return result;
    goto LABEL_6;
  }
  if (v2 != 1 || (*(_BYTE *)(a2 + 1) & 0x10) == 0)
LABEL_6:
    *(_QWORD *)(result + 424) = *(_QWORD *)(a2 + 8);
  return result;
}

_QWORD *sub_100009A24(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

uint64_t sub_100009A2C(uint64_t result)
{
  *(_QWORD *)(result + 424) = 0;
  return result;
}

void sub_100009A34(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100345218;
  *((_QWORD *)v1 + 5619) = off_1003454B8;
  *((_QWORD *)v1 + 5620) = off_1003455F0;
  *((_QWORD *)v1 + 5621) = off_1003456C8;
  sub_10000A384((uint64_t)v1 + 296);
  sub_10000A384((uint64_t)v1 + 256);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100345718);
}

void sub_100009AB8(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100345218;
  *((_QWORD *)v1 + 5619) = off_1003454B8;
  *((_QWORD *)v1 + 5620) = off_1003455F0;
  *((_QWORD *)v1 + 5621) = off_1003456C8;
  sub_10000A384((uint64_t)v1 + 296);
  sub_10000A384((uint64_t)v1 + 256);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100345718);
  operator delete();
}

_QWORD *sub_100009B50(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_100009B64(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

uint64_t sub_100009B94(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v6[99];

  v4 = a1 + 24;
  memcpy(v6, &unk_1002E4FA0, sizeof(v6));
  sub_100009E90(v4, v6, 33);
  memcpy(v6, &unk_1002E52B8, sizeof(v6));
  sub_100009E90(a1 + 64, v6, 33);
  sub_100009C84(a1, a2);
  return a1;
}

void sub_100009C58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000A384(v2);
  sub_10000A384(v1);
  _Unwind_Resume(a1);
}

double sub_100009C84(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  double result;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  _BYTE buf[12];
  __int16 v18;
  double v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  double v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  double v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  double v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  double v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  double v39;

  v16 = a2;
  *(_QWORD *)(a1 + 104) = a2;
  v3 = a1 + 24;
  if (sub_10000A3CC((_QWORD *)(a1 + 24), &v16))
  {
    *(_QWORD *)buf = &v16;
    v4 = sub_10000A480(a1 + 64, &v16, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    v5 = v4[3];
    *(_DWORD *)(a1 + 20) = *((_DWORD *)v4 + 8);
    *(_QWORD *)(a1 + 12) = v5;
    *(_QWORD *)buf = &v16;
    v6 = sub_10000A480(v3, &v16, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    v7 = v6[3];
    *(_DWORD *)(a1 + 8) = *((_DWORD *)v6 + 8);
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100345D20);
  v8 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v10 = *(float *)(a1 + 12);
    v11 = *(float *)(a1 + 16);
    v12 = *(float *)(a1 + 20);
    v13 = *(float *)a1;
    v14 = *(float *)(a1 + 4);
    v15 = *(float *)(a1 + 8);
    *(_DWORD *)buf = 136317954;
    *(_QWORD *)&buf[4] = "Lx";
    v18 = 2048;
    v19 = v10;
    v20 = 2080;
    v21 = "Ly";
    v22 = 2048;
    v23 = v11;
    v24 = 2080;
    v25 = "Lz";
    v26 = 2048;
    v27 = v12;
    v28 = 2080;
    v29 = "Ix";
    v30 = 2048;
    v31 = v13;
    v32 = 2080;
    v33 = "Iy";
    v34 = 2048;
    v35 = v14;
    v36 = 2080;
    v37 = "Iz";
    v38 = 2048;
    v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "device parameters,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f", buf, 0x7Au);
  }
  return result;
}

uint64_t sub_100009E90(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      sub_100009F08(a1, a2, (uint64_t)a2);
      a2 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_100009EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10000A384(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100009F08(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  i[4] = *(_QWORD *)(a3 + 16);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10000A150(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_10000A114(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10000A128()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_10000A150(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_10000A22C(a1, prime);
  }
}

void sub_10000A22C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_10000A128();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_10000A384(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_10000A3CC(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_10000A480(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  v13 = **a4;
  *((_DWORD *)v11 + 8) = 0;
  v11[2] = v13;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10000A150(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10000A68C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10000A6A0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t sub_10000A718(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_10000A770(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100345FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10000A780(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100345FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10000A7B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10000A7C0(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  int v16;

  v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *((_DWORD *)a1 + 1);
      v9 = 134218754;
      v10 = Current;
      v11 = 2080;
      v12 = "const T &CMQueue<CSSPUTriad_Struct>::operator[](const size_t) const [T = CSSPUTriad_Struct]";
      v13 = 2048;
      v14 = a2;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  v5 = *a1 + a2;
  if (v5 < v4)
    v4 = 0;
  return (uint64_t)&a1[12 * (v5 - v4) + 4];
}

uint64_t sub_10000A914(uint64_t result)
{
  *(_QWORD *)result = &off_100346020;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10000A92C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  operator delete();
}

uint64_t sub_10000A950(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_100346020;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_10000A97C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_100346020;
    v3 = *(_BYTE *)(a2 + 12) & 1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_10000A9D8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_10000A9FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_100346020;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_10000AA20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = &off_100346020;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_10000AA78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "nop", *(_DWORD *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10000AAC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10000ACF8(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
  return result;
}

BOOL sub_10000AD18(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_10000AD54(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    return *(int *)(a1 + 8);
  else
    return 0;
}

void sub_10000AD6C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _BOOL4 v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  int v13;
  float v14;
  float v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _DWORD v32[2];
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  double v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100346C18);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 100);
    v4 = *(_BYTE *)(a1 + 100) != 0;
    v5 = *(float *)(a1 + 80);
    v6 = *(float *)(a1 + 84);
    v7 = *(float *)(a1 + 88);
    v8 = *(_DWORD *)(a1 + 96);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(float *)(a1 + 92);
    v12 = *(_DWORD *)(a1 + 12);
    v13 = *(_DWORD *)(a1 + 76);
    v14 = *(float *)(a1 + 104);
    v15 = *(float *)(a1 + 108);
    v16 = v14;
    v17 = v15;
    v18 = (float)(v14 - v15);
    v19 = *(float *)(a1 + 112);
    v20 = *(_QWORD *)(a1 + 120);
    v21 = *(_QWORD *)(a1 + 128);
    v22 = *(unsigned __int8 *)(a1 + 140);
    v23 = *(_QWORD *)(a1 + 144);
    v24 = *(float *)(a1 + 136);
    v25 = *(float *)(a1 + 16);
    v26 = *(float *)(a1 + 20);
    v27 = *(float *)(a1 + 24);
    v28 = *(float *)(a1 + 28);
    v29 = *(float *)(a1 + 32);
    v30 = *(float *)(a1 + 36);
    v31 = *(float *)(a1 + 40);
    v32[0] = 67246848;
    v32[1] = v4;
    v33 = 2050;
    v34 = v5;
    v35 = 2050;
    v36 = v9;
    v37 = 2050;
    v38 = v6;
    v39 = 2050;
    v40 = v7;
    v41 = 1026;
    v42 = v8;
    v43 = 1026;
    v44 = v3;
    v45 = 2050;
    v46 = v10;
    v47 = 2050;
    v48 = v11;
    v49 = 1026;
    v50 = v12;
    v51 = 1026;
    v52 = v13;
    v53 = 2050;
    v54 = v16;
    v55 = 2050;
    v56 = v17;
    v57 = 2050;
    v58 = v18;
    v59 = 2050;
    v60 = v19;
    v61 = 2050;
    v62 = v20;
    v63 = 2050;
    v64 = v21;
    v65 = 1026;
    v66 = v22;
    v67 = 2050;
    v68 = v23;
    v69 = 2050;
    v70 = v24;
    v71 = 2050;
    v72 = v25;
    v73 = 2050;
    v74 = v26;
    v75 = 2050;
    v76 = v27;
    v77 = 2050;
    v78 = v28;
    v79 = 2050;
    v80 = v29;
    v81 = 2050;
    v82 = v30;
    v83 = 2050;
    v84 = v31;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[BA] summary,%{public}d,A,%{public}f,B,%{public}llu,C,%{public}f,D,%{public}f,E,%{public}d,F,%{public}d,G,%{public}llu,H,%{public}f,I,%{public}d,J,%{public}d,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}f,O,%{public}llu,P,%{public}llu,Q,%{public}d,R,%{public}llu,S,%{public}f,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f\n", (uint8_t *)v32, 0xF8u);
  }
}

void sub_10000AFA4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;

  v37 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 80)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v4, CFSTR("ba-A"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 56)));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v5, CFSTR("ba-B"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 84)));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v7, CFSTR("ba-C"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 88)));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v9, CFSTR("ba-D"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 96)));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v10, CFSTR("ba-E"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 100)));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v11, CFSTR("ba-F"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 64)));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v12, CFSTR("ba-G"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 92)));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v14, CFSTR("ba-H"));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 12)));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v15, CFSTR("ba-I"));

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 76)));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v16, CFSTR("ba-J"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 104)));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v18, CFSTR("ba-K"));

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 108)));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v20, CFSTR("ba-L"));

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (float)(*(float *)(a1 + 104) - *(float *)(a1 + 108))));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v22, CFSTR("ba-M"));

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 16)));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v24, CFSTR("ba-config-1"));

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 20)));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v26, CFSTR("ba-config-2"));

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 24)));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v28, CFSTR("ba-config-3"));

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 28)));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v30, CFSTR("ba-config-4"));

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 32)));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v32, CFSTR("ba-config-5"));

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 36)));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v34, CFSTR("ba-config-6"));

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 40)));
  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "stringValue"));
  objc_msgSend(v37, "setObject:forKeyedSubscript:", v36, CFSTR("ba-config-7"));

}

void sub_10000B46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

CLKappaAlgBlock *sub_10000B51C(CLKappaAlgBlock *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  CLKappaAlgBlock::CLKappaAlgBlock(a1, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 80) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 88) = 0x42B40000432A0000;
  *(_DWORD *)(v5 + 96) = 1145569280;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_QWORD *)(v5 + 424) = 0;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_BYTE *)(v5 + 432) = 1;
  *(_DWORD *)(v5 + 436) = 0;
  *(_QWORD *)(v5 + 440) = 1;
  *(_DWORD *)(v5 + 448) = -1082130432;
  *(_QWORD *)(v5 + 456) = 0;
  v7 = operator new(0x120uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_100346C48;
  sub_10000F2FC((uint64_t)(v7 + 3));
  *(_QWORD *)&v23 = v7 + 3;
  *((_QWORD *)&v23 + 1) = v7;
  sub_1000081AC((uint64_t)a1 + 8, &v23);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  v21 = *((_QWORD *)a1 + 1);
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10000B7D0((uint64_t)&v21, &v23);
  sub_1000081AC(v6, &v23);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaAlgBlock *))(*(_QWORD *)a1 + 304))(a1);
  return a1;
}

void sub_10000B760(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v6;

  sub_10000F218(v3 + 42);
  sub_10000F138(v3 + 36);
  sub_10000F218(v3 + 30);
  sub_10000F138(v3 + 24);
  v6 = (void *)*((_QWORD *)v1 + 25);
  if (v6)
  {
    *((_QWORD *)v1 + 26) = v6;
    operator delete(v6);
  }
  sub_10000F218((_QWORD *)v1 + 19);
  sub_10000F138(v4);
  sub_10000A718((uint64_t)v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10000B7D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

CLKappaAlgBlock *sub_10000B83C(CLKappaAlgBlock *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  *(_QWORD *)a1 = off_100345D50;
  *((_QWORD *)a1 + 58) = off_100345DF8;
  *((_QWORD *)a1 + 59) = off_100345EC0;
  *((_QWORD *)a1 + 60) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(a1, (uint64_t *)off_100346610);
  *(_QWORD *)v2 = off_100346110;
  *(_QWORD *)(v2 + 472) = off_1003464E8;
  *(_QWORD *)(v2 + 480) = off_1003465C0;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 96) = 1145569280;
  *(_BYTE *)(v2 + 432) = 1;
  *(_QWORD *)(v2 + 440) = 1;
  *(_DWORD *)(v2 + 448) = -1082130432;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 88) = 0x42B40000432A0000;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 424) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_DWORD *)(v2 + 436) = 0;
  *(_QWORD *)(v2 + 456) = 0;
  *(_QWORD *)(v2 + 464) = off_1003463B0;
  v4 = operator new(0x120uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_100346C48;
  sub_10000F2FC((uint64_t)(v4 + 3));
  *(_QWORD *)&v20 = v4 + 3;
  *((_QWORD *)&v20 + 1) = v4;
  sub_1000081AC((uint64_t)a1 + 8, &v20);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  v18 = *((_QWORD *)a1 + 1);
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10000B7D0((uint64_t)&v18, &v20);
  sub_1000081AC(v3, &v20);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaAlgBlock *))(*(_QWORD *)a1 + 304))(a1);
  return a1;
}

void sub_10000BA80(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v5;

  sub_10000F218((_QWORD *)v1 + 46);
  sub_10000F138((_QWORD *)v1 + 40);
  sub_10000F218((_QWORD *)v1 + 34);
  sub_10000F138((_QWORD *)v1 + 28);
  v5 = (void *)*((_QWORD *)v1 + 25);
  if (v5)
  {
    *((_QWORD *)v1 + 26) = v5;
    operator delete(v5);
  }
  sub_10000F218((_QWORD *)v1 + 19);
  sub_10000F138(v3);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100346610);
  _Unwind_Resume(a1);
}

double sub_10000BAF4(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  double result;
  float *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *a2;
  *(_OWORD *)(v3 + 28) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(v3 + 16) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100346C18);
  v5 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(float **)(a1 + 32);
    v8 = v7[4];
    v9 = v7[5];
    v10 = v7[6];
    v11 = v7[7];
    v12 = v7[8];
    v13 = v7[9];
    v14 = v7[10];
    v15 = 134219520;
    v16 = v8;
    v17 = 2048;
    v18 = v9;
    v19 = 2048;
    v20 = v10;
    v21 = 2048;
    v22 = v11;
    v23 = 2048;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[BA] config %f, %f, %f, %f, %f, %f, %f", (uint8_t *)&v15, 0x48u);
  }
  return result;
}

uint64_t sub_10000BC30(uint64x2_t *a1, uint64_t a2)
{
  char *v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  double v21;
  NSObject *v22;
  __int32 v23;
  uint64_t result;
  NSObject *v25;
  __int32 v26;
  int v27;
  __int32 v28;

  v2 = (char *)a1[12].i64[1];
  v4 = (char *)a1[13].i64[0];
  v3 = &a1[12].i64[1];
  v5 = v4 - v2;
  if ((unint64_t)(v4 - v2) > 0x48)
    return 1;
  v7 = a1[4].i64[1];
  if (v7)
  {
    v8 = a2 - v7;
    v9 = (uint64_t)&a1[13].i64[1];
    v10 = a1[13].u64[1];
    if ((unint64_t)v4 >= v10)
    {
      v11 = v5 >> 3;
      v12 = v10 - (_QWORD)v2;
      if (v12 >> 2 <= (unint64_t)((v5 >> 3) + 1))
        v13 = v11 + 1;
      else
        v13 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = (char *)sub_10000D60C(v9, v14);
      v16 = (char *)a1[12].i64[1];
      v17 = (char *)a1[13].i64[0];
      v2 = &v15[8 * v11];
      v19 = &v15[8 * v18];
      *(_QWORD *)v2 = v8;
      v4 = v2 + 8;
      while (v17 != v16)
      {
        v20 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v2 - 1) = v20;
        v2 -= 8;
      }
      a1[12].i64[1] = (uint64_t)v2;
      a1[13].i64[0] = (uint64_t)v4;
      a1[13].i64[1] = (uint64_t)v19;
      if (v16)
      {
        operator delete(v16);
        v2 = (char *)*v3;
      }
    }
    else
    {
      *(_QWORD *)v4 = v8;
      v4 += 8;
    }
    a1[13].i64[0] = (uint64_t)v4;
  }
  if (v4 - v2 != 80)
    return 0;
  v21 = 1.0 / (float)((float)sub_10000BE9C((uint64_t)v3) * 0.000001);
  a1[27].i32[1] = (int)v21;
  if (((int)v21 - 271) > 0xFFFFFF04)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100346C18);
    v25 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
    {
      v26 = a1[27].i32[1];
      v27 = 67240192;
      v28 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "[BA] calculatedRate, %{public}d", (uint8_t *)&v27, 8u);
    }
    a1[3] = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x3F4000003E4CCCCDLL, (float)a1[27].i32[1])));
    return 1;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100346C18);
  v22 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_ERROR))
  {
    v23 = a1[27].i32[1];
    v27 = 67109120;
    v28 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[BA] error, rate outside possible range, %d", (uint8_t *)&v27, 8u);
  }
  result = 0;
  a1[13].i64[0] = a1[12].i64[1];
  a1[27].i32[1] = 0;
  return result;
}

unint64_t sub_10000BE9C(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_10000F3D8(&v6, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v1 = v6;
  v2 = (unint64_t)(v7 - v6) >> 1;
  v3 = &v6[v2];
  if (v3 != v7)
  {
    sub_10000F490((uint64_t)v6, v3, v7);
    v1 = v6;
    v2 = (unint64_t)(v7 - v6) >> 1;
  }
  v4 = v1[v2];
  v7 = v1;
  operator delete(v1);
  return v4;
}

void sub_10000BF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_10000BF38(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v39;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v2 = *(void ***)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 144) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 120);
      v2 = (void **)(*(_QWORD *)(a1 + 112) + 8);
      *(_QWORD *)(a1 + 112) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 1024;
  }
  *(_QWORD *)(a1 + 136) = v6;
LABEL_8:
  v7 = *(void ***)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 192) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 168);
      v7 = (void **)(*(_QWORD *)(a1 + 160) + 8);
      *(_QWORD *)(a1 + 160) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_15;
    v11 = 512;
  }
  *(_QWORD *)(a1 + 184) = v11;
LABEL_15:
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 200);
  v12 = *(void ***)(a1 + 232);
  v13 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 264) = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = *(_QWORD *)(a1 + 240);
      v12 = (void **)(*(_QWORD *)(a1 + 232) + 8);
      *(_QWORD *)(a1 + 232) = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 512;
  }
  else
  {
    if (v14 >> 3 != 2)
      goto LABEL_22;
    v16 = 1024;
  }
  *(_QWORD *)(a1 + 256) = v16;
LABEL_22:
  v17 = *(void ***)(a1 + 280);
  v18 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 312) = 0;
  v19 = v18 - (_QWORD)v17;
  if (v19 >= 0x11)
  {
    do
    {
      operator delete(*v17);
      v20 = *(_QWORD *)(a1 + 288);
      v17 = (void **)(*(_QWORD *)(a1 + 280) + 8);
      *(_QWORD *)(a1 + 280) = v17;
      v19 = v20 - (_QWORD)v17;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    v21 = 256;
  }
  else
  {
    if (v19 >> 3 != 2)
      goto LABEL_29;
    v21 = 512;
  }
  *(_QWORD *)(a1 + 304) = v21;
LABEL_29:
  *(_DWORD *)(a1 + 448) = -1082130432;
  v22 = *(void ***)(a1 + 328);
  v23 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 360) = 0;
  v24 = v23 - (_QWORD)v22;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      v25 = *(_QWORD *)(a1 + 336);
      v22 = (void **)(*(_QWORD *)(a1 + 328) + 8);
      *(_QWORD *)(a1 + 328) = v22;
      v24 = v25 - (_QWORD)v22;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    v26 = 512;
  }
  else
  {
    if (v24 >> 3 != 2)
      goto LABEL_36;
    v26 = 1024;
  }
  *(_QWORD *)(a1 + 352) = v26;
LABEL_36:
  v27 = *(void ***)(a1 + 376);
  v28 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 408) = 0;
  v29 = v28 - (_QWORD)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v30 = *(_QWORD *)(a1 + 384);
      v27 = (void **)(*(_QWORD *)(a1 + 376) + 8);
      *(_QWORD *)(a1 + 376) = v27;
      v29 = v30 - (_QWORD)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    v31 = 256;
    goto LABEL_42;
  }
  if (v29 >> 3 == 2)
  {
    v31 = 512;
LABEL_42:
    *(_QWORD *)(a1 + 400) = v31;
  }
  *(_DWORD *)(a1 + 436) = 0;
  *(_QWORD *)(a1 + 440) = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  v32 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v32 + 48) = 0;
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)&result = 0x8000000080000000;
  *(_QWORD *)(v32 + 72) = 0x8000000080000000;
  *(_OWORD *)(v32 + 80) = xmmword_1002E56A0;
  *(_DWORD *)(v32 + 96) = 0;
  *(_BYTE *)(v32 + 100) = 0;
  __asm { FMOV            V2.2S, #-1.0 }
  *(_QWORD *)(v32 + 104) = _D2;
  *(_DWORD *)(v32 + 112) = -1082130432;
  *(_QWORD *)(v32 + 120) = 0;
  *(_QWORD *)(v32 + 128) = 0;
  *(_DWORD *)(v32 + 136) = -1082130432;
  *(_BYTE *)(v32 + 140) = 0;
  *(_QWORD *)(v32 + 144) = 0;
  v39 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v39 + 152) = 0;
  *(_QWORD *)(v39 + 160) = 0;
  *(_QWORD *)(v39 + 168) = 0x8000000080000000;
  *(_OWORD *)(v39 + 176) = xmmword_1002E56A0;
  *(_DWORD *)(v39 + 192) = 0;
  *(_BYTE *)(v39 + 196) = 0;
  *(_QWORD *)(v39 + 200) = _D2;
  *(_DWORD *)(v39 + 208) = -1082130432;
  *(_QWORD *)(v39 + 216) = 0;
  *(_QWORD *)(v39 + 224) = 0;
  *(_DWORD *)(v39 + 232) = -1082130432;
  *(_BYTE *)(v39 + 236) = 0;
  *(_QWORD *)(v39 + 240) = 0;
  return result;
}

void sub_10000C210(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  int v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  int v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  int v36;
  id v37;

  v37 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgBaroConfig", *(unsigned __int8 *)(a1 + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1140457472;
  LODWORD(v4) = 1129447424;
  LODWORD(v5) = 0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v37, v5, v3, v4);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1132068864;
  LODWORD(v9) = 1119092736;
  LODWORD(v10) = 0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v37, v10, v8, v9);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 20) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1128792064;
  LODWORD(v14) = 1176256512;
  LODWORD(v15) = 1145569280;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v37, v13, v14, v15);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1120403456;
  LODWORD(v19) = 20.0;
  LODWORD(v20) = 30.0;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v37, v19, v18, v20);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 28) = v21;

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v23) = 1148846080;
  LODWORD(v24) = 0;
  LODWORD(v25) = 5.0;
  objc_msgSend(v22, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v37, v24, v23, v25);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32) = v26;

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v28) = 1148846080;
  LODWORD(v29) = 0;
  LODWORD(v30) = 8.0;
  objc_msgSend(v27, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v37, v29, v28, v30);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = v31;

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v33) = -5.0;
  LODWORD(v34) = 5.0;
  LODWORD(v35) = 2.0;
  objc_msgSend(v32, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v37, v33, v34, v35);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40) = v36;

}

void sub_10000C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10000C42C(uint64x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t v20[16];

  v4 = a1[4].i64[1];
  v5 = *(_QWORD *)a2;
  if (v4 && (unint64_t)(v5 - v4) >> 4 >= 0xC35)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100346C18);
    v6 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[BA] clearing", v20, 2u);
    }
    v7 = (void **)a1[7].i64[0];
    v8 = a1[7].i64[1];
    a1[9].i64[0] = 0;
    v9 = v8 - (_QWORD)v7;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        v10 = a1[7].i64[1];
        v7 = (void **)(a1[7].i64[0] + 8);
        a1[7].i64[0] = (uint64_t)v7;
        v9 = v10 - (_QWORD)v7;
      }
      while (v9 > 0x10);
    }
    if (v9 >> 3 == 1)
    {
      v11 = 512;
    }
    else
    {
      if (v9 >> 3 != 2)
        goto LABEL_14;
      v11 = 1024;
    }
    a1[8].i64[1] = v11;
LABEL_14:
    v12 = (void **)a1[10].i64[0];
    v13 = a1[10].i64[1];
    a1[12].i64[0] = 0;
    v14 = v13 - (_QWORD)v12;
    if (v14 >= 0x11)
    {
      do
      {
        operator delete(*v12);
        v15 = a1[10].i64[1];
        v12 = (void **)(a1[10].i64[0] + 8);
        a1[10].i64[0] = (uint64_t)v12;
        v14 = v15 - (_QWORD)v12;
      }
      while (v14 > 0x10);
    }
    if (v14 >> 3 == 1)
    {
      v16 = 256;
    }
    else
    {
      if (v14 >> 3 != 2)
      {
LABEL_21:
        a1[27].i64[1] = 1;
        v5 = *(_QWORD *)a2;
        goto LABEL_22;
      }
      v16 = 512;
    }
    a1[11].i64[1] = v16;
    goto LABEL_21;
  }
LABEL_22:
  v17 = sub_10000BC30(a1, v5);
  v18 = *(_QWORD *)a2;
  a1[4].i64[1] = *(_QWORD *)a2;
  if (v17)
  {
    if (a1[27].i8[0])
    {
      a1[26].i64[0] = v18;
      a1[27].i8[0] = 0;
    }
    sub_10000C610(&a1[6].i64[1], (float *)(a2 + 8));
    sub_10000C694(&a1[9].i64[1], (_QWORD *)a2);
    sub_10000C718(a1);
    if (a1[9].i64[0] == a1[3].i64[1])
    {
      v19 = a1[27].i64[1] - 1;
      a1[27].i64[1] = v19;
      if (!v19)
      {
        sub_10000C788((uint64_t)a1);
        a1[27].i64[1] = a1[3].i64[0];
      }
    }
  }
}

float sub_10000C610(_QWORD *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10000F814(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(float *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

void sub_10000C694(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10000FF84(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

_QWORD *sub_10000C718(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;

  v1 = result[18];
  if (v1 > result[7])
  {
    v2 = result;
    ++result[17];
    result[18] = v1 - 1;
    sub_100010A30((uint64_t)(result + 13), 1);
    *(int64x2_t *)(v2 + 23) = vaddq_s64(*(int64x2_t *)(v2 + 23), (int64x2_t)xmmword_1002E56B0);
    return (_QWORD *)sub_100010A8C((uint64_t)(v2 + 19), 1);
  }
  return result;
}

void sub_10000C788(uint64_t a1)
{
  float v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  float *v7;
  float *v8;
  uint64_t v9;
  char *v10;
  float *v11;
  char *v12;
  float *v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v26;
  uint64_t v27;
  signed int v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  uint64_t v33;
  float v34;
  BOOL v35;
  unint64_t v36;
  float v37;
  float v38;
  unint64_t v39;
  float v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v2 = sub_10000CBDC(a1, (_QWORD *)(a1 + 104));
  v3 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 136);
  v4 = *(_QWORD *)(a1 + 144);
  v6 = (char *)(v3 + 8 * (v5 >> 10));
  v7 = *(float **)v6;
  v8 = (float *)(*(_QWORD *)v6 + 4 * (v5 & 0x3FF));
  v9 = *(_QWORD *)(v3 + (((v4 + v5) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v4 + v5) & 0x3FF);
  v10 = v6;
  if (v8 != (float *)v9)
  {
    v11 = (float *)(*(_QWORD *)v6 + 4 * (*(_QWORD *)(a1 + 136) & 0x3FFLL));
    v12 = (char *)(v3 + 8 * (v5 >> 10));
    while (1)
    {
      if ((char *)++v11 - (char *)v7 == 4096)
      {
        v13 = (float *)*((_QWORD *)v12 + 1);
        v12 += 8;
        v7 = v13;
        v11 = v13;
      }
      if (v11 == (float *)v9)
        break;
      if (*v8 < *v11)
      {
        v10 = v12;
        v8 = v11;
      }
    }
  }
  v14 = *v8 - v2;
  if (v8 == (float *)(*(_QWORD *)v6 + 4 * (v5 & 0x3FF)))
    v15 = 0;
  else
    v15 = (((uint64_t)v8 - *(_QWORD *)v10) >> 2) + ((v10 - v6) << 7) - ((uint64_t)(4 * (v5 & 0x3FF)) >> 2);
  v16 = 0;
  v17 = *(_QWORD *)(a1 + 184);
  v18 = *(_QWORD *)(a1 + 160);
  v19 = *(_QWORD *)(v18 + (((unint64_t)(v17 + v15) >> 6) & 0x3FFFFFFFFFFFFF8));
  v20 = (v17 + v15) & 0x1FF;
  v21 = *(_QWORD *)(v19 + 8 * v20);
  v22 = v14 * 0.2;
  v23 = v15 - 1;
  while (v23 + 1 >= 1)
  {
    v24 = *(float *)(*(_QWORD *)(v3 + (((v5 + v23) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v5 + v23) & 0x3FF)) - v2;
    --v23;
    if (v24 < v22)
      ++v16;
    else
      v16 = 0;
    if (v24 < v22 && v16 >= 3)
    {
      v26 = v23 + (int)v16;
      goto LABEL_24;
    }
  }
  v26 = -1;
LABEL_24:
  v27 = 0;
  v28 = 0;
  v29 = ~v17;
  v30 = v5 + 1;
  do
  {
    if (v15 + v27 + 1 >= v4)
    {
      *(_QWORD *)(a1 + 64) = v21;
      v38 = -1.0;
      v37 = -1.0;
      v34 = -1.0;
      goto LABEL_45;
    }
    v31 = *(float *)(*(_QWORD *)(v3 + (((v15 + v30) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v15 + v30) & 0x3FF)) - v2;
    --v29;
    if (v31 < v22)
      ++v28;
    else
      v28 = 0;
    ++v27;
    ++v30;
  }
  while (v31 >= v22 || v28 < 3);
  v33 = v27 - v28;
  *(_QWORD *)(a1 + 64) = v21;
  v34 = -1.0;
  if (v33 + v15 < -1
    || v26 < 0
    || v26 == v15
    || (v33 != -1 ? (v35 = (unint64_t)(v33 + v15 + 1) >= *(_QWORD *)(a1 + 56)) : (v35 = 1), v35))
  {
    v38 = -1.0;
    v37 = -1.0;
  }
  else
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v18 + (((unint64_t)(v26 + v17) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v26 + v17) & 0x1FF));
    v37 = (float)(*(_QWORD *)(*(_QWORD *)(v18 + (((unint64_t)(v15 - v28 - v29) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v15 - v28 - v29) & 0x1FF))
                - v36)
        * 0.001;
    v38 = (float)(*(_QWORD *)(v19 + 8 * v20) - v36) * 0.001;
    v39 = sub_10000CCF4((_QWORD *)a1, v36, v2, v14);
    if (v39)
      v34 = (float)(v39 - v36) * 0.001;
  }
LABEL_45:
  v40 = sub_10000CD78((_QWORD *)a1);
  v41 = 0;
  v42 = *(_QWORD *)(a1 + 32);
  if (v14 > *(float *)(v42 + 24) && v37 > 0.0)
    v41 = v37 <= *(float *)(v42 + 16)
       && v37 >= *(float *)(v42 + 28)
       && v38 <= *(float *)(v42 + 20)
       && v40 > *(float *)(v42 + 32);
  v43 = *(_QWORD *)(a1 + 184);
  v44 = *(_QWORD *)(a1 + 160);
  v45 = *(_QWORD *)(*(_QWORD *)(v44 + (((unint64_t)(v43 + v15) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((v43 + v15) & 0x1FF));
  if (v37 <= 0.0)
    v46 = 0;
  else
    v46 = *(_QWORD *)(*(_QWORD *)(v44 + (((unint64_t)(v43 + v26) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v43 + v26) & 0x1FF));
  v47 = *(_BYTE *)(v42 + 140);
  if (!v47 && (v14 > *(float *)(v42 + 176) || v45 == *(_QWORD *)(v42 + 160) && v37 > 0.0))
  {
    *(_QWORD *)(v42 + 152) = v46;
    *(_QWORD *)(v42 + 160) = v45;
    *(float *)(v42 + 176) = v14;
    *(float *)(v42 + 180) = v37;
    *(float *)(v42 + 184) = v38;
    *(float *)(v42 + 188) = v34;
    *(float *)(v42 + 208) = v40;
    *(_DWORD *)(v42 + 192) = *(_DWORD *)(a1 + 436);
  }
  if (v41)
  {
    *(_BYTE *)(v42 + 140) = v47 + 1;
    if (v14 > *(float *)(v42 + 80))
    {
      *(float *)(v42 + 80) = v14;
      *(float *)(v42 + 84) = v37;
      *(_QWORD *)(v42 + 56) = v46;
      *(_QWORD *)(v42 + 64) = v45;
      *(float *)(v42 + 88) = v38;
      *(float *)(v42 + 92) = v34;
      *(float *)(v42 + 112) = v40;
      *(_DWORD *)(v42 + 96) = *(_DWORD *)(a1 + 436);
    }
  }
  *(float *)(v42 + 248) = v2;
}

void sub_10000CB58(_QWORD *a1, uint64_t a2)
{
  sub_10000C42C((uint64x2_t *)((char *)a1 + *(_QWORD *)(*a1 - 88)), a2);
}

uint64_t sub_10000CB68(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 == 2)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x10) != 0)
      return result;
    goto LABEL_6;
  }
  if (v2 != 1 || (*(_BYTE *)(a2 + 1) & 0x10) == 0)
LABEL_6:
    *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 8);
  return result;
}

_QWORD *sub_10000CB9C(_QWORD *result, uint64_t a2)
{
  char *v2;
  int v3;

  v2 = (char *)result + *(_QWORD *)(*result - 88);
  v3 = v2[24];
  if (v3 == 2)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x10) != 0)
      return result;
    goto LABEL_6;
  }
  if (v3 != 1 || (*(_BYTE *)(a2 + 1) & 0x10) == 0)
LABEL_6:
    *((_QWORD *)v2 + 10) = *(_QWORD *)(a2 + 8);
  return result;
}

float sub_10000CBDC(uint64_t a1, _QWORD *a2)
{
  float **v2;
  float *v3;
  float **v4;
  float *v5;
  unint64_t v6;
  float v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  sub_100010298((uint64_t)&v9, a2);
  v2 = (float **)(v10 + 8 * (v12 >> 10));
  if (v11 == v10)
  {
    v3 = 0;
    v5 = 0;
    v4 = (float **)(v10 + 8 * ((v13 + v12) >> 10));
  }
  else
  {
    v3 = &(*v2)[v12 & 0x3FF];
    v4 = (float **)(v10 + 8 * ((v13 + v12) >> 10));
    v5 = &(*v4)[(v13 + v12) & 0x3FF];
  }
  sub_10000D640(v2, v3, v4, v5, (uint64_t)&v14);
  v6 = v12 + (v13 >> 1);
  if ((v13 & 1) != 0)
    v7 = *(float *)(*(_QWORD *)(v10 + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
  else
    v7 = (float)(*(float *)(*(_QWORD *)(v10 + (((v6 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v6 - 1) & 0x3FF))
               + *(float *)(*(_QWORD *)(v10 + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF)))
       * 0.5;
  sub_10000F138(&v9);
  return v7;
}

void sub_10000CCE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10000F138((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10000CCF4(_QWORD *a1, unint64_t a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  unint64_t v7;

  v4 = a1[18];
  if (!v4)
    return 0;
  v5 = 0;
  v6 = a4 * 0.8;
  while (1)
  {
    if ((float)(*(float *)(*(_QWORD *)(a1[14] + (((unint64_t)(a1[17] + v5) >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * ((a1[17] + v5) & 0x3FF))
               - a3) >= v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1[20] + (((unint64_t)(v5 + a1[23]) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v5 + a1[23]) & 0x1FF));
      if (v7 > a2)
        break;
    }
    if (v4 == ++v5)
      return 0;
  }
  return v7;
}

float sub_10000CD78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  float v13;
  uint64_t v15;
  float v16;

  v16 = -1.0;
  v15 = 0;
  v2 = a1[39];
  if (v2)
  {
    v3 = 0;
    v4 = a1[38];
    v5 = a1[20];
    v6 = a1[23];
    v7 = *(_QWORD *)(v5 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8));
    v8 = a1[35];
    v9 = v6 - 1;
    v10 = *(_QWORD *)(v7 + 8 * (a1[23] & 0x1FFLL));
    v11 = -1.0;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + (((unint64_t)(v4 + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v4 + v3) & 0x1FF));
      if (v12 >= v10
        && v12 <= *(_QWORD *)(*(_QWORD *)(v5 + (((v9 + a1[24]) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v9 + a1[24]) & 0x1FF)))
      {
        v13 = *(float *)(*(_QWORD *)(a1[29] + (((unint64_t)(v3 + a1[32]) >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * ((v3 + a1[32]) & 0x3FF));
        if (v13 > v11)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v8 + (((unint64_t)(v4 + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v4 + v3) & 0x1FF));
          v16 = v13;
          v11 = v13;
        }
      }
      ++v3;
    }
    while (v2 != v3);
  }
  sub_10000C610(a1 + 40, &v16);
  sub_10000C694(a1 + 46, &v15);
  return v16;
}

uint64_t sub_10000CE80(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 80);
  v2 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
      *(_DWORD *)(v2 + 72) = v3 - v1;
    v4 = *(_QWORD *)(v2 + 152);
    if (v4)
      *(_DWORD *)(v2 + 168) = v4 - v1;
    v5 = *(_QWORD *)(v2 + 64);
    if (v5)
      *(_DWORD *)(v2 + 76) = v5 - v1;
    v6 = *(_QWORD *)(v2 + 160);
    if (v6)
      *(_DWORD *)(v2 + 172) = v6 - v1;
  }
  if (!*(_BYTE *)(v2 + 140))
  {
    *(_OWORD *)(v2 + 56) = *(_OWORD *)(v2 + 152);
    *(_OWORD *)(v2 + 72) = *(_OWORD *)(v2 + 168);
    *(_OWORD *)(v2 + 136) = *(_OWORD *)(v2 + 232);
    *(_OWORD *)(v2 + 120) = *(_OWORD *)(v2 + 216);
    *(_OWORD *)(v2 + 104) = *(_OWORD *)(v2 + 200);
    *(_OWORD *)(v2 + 88) = *(_OWORD *)(v2 + 184);
    v2 = *(_QWORD *)(result + 32);
  }
  *(_DWORD *)(v2 + 12) = *(_DWORD *)(v2 + 72);
  return result;
}

uint64_t sub_10000CF14(_QWORD *a1)
{
  return sub_10000CE80((uint64_t)a1 + *(_QWORD *)(*a1 - 144));
}

double sub_10000CF24(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v39;

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v2 = *(void ***)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 144) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 120);
      v2 = (void **)(*(_QWORD *)(a1 + 112) + 8);
      *(_QWORD *)(a1 + 112) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 1024;
  }
  *(_QWORD *)(a1 + 136) = v6;
LABEL_8:
  v7 = *(void ***)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 192) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 168);
      v7 = (void **)(*(_QWORD *)(a1 + 160) + 8);
      *(_QWORD *)(a1 + 160) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 256;
  }
  else
  {
    if (v9 >> 3 != 2)
      goto LABEL_15;
    v11 = 512;
  }
  *(_QWORD *)(a1 + 184) = v11;
LABEL_15:
  v12 = *(void ***)(a1 + 232);
  v13 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 264) = 0;
  v14 = v13 - (_QWORD)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      v15 = *(_QWORD *)(a1 + 240);
      v12 = (void **)(*(_QWORD *)(a1 + 232) + 8);
      *(_QWORD *)(a1 + 232) = v12;
      v14 = v15 - (_QWORD)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    v16 = 512;
  }
  else
  {
    if (v14 >> 3 != 2)
      goto LABEL_22;
    v16 = 1024;
  }
  *(_QWORD *)(a1 + 256) = v16;
LABEL_22:
  v17 = *(void ***)(a1 + 280);
  v18 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 312) = 0;
  v19 = v18 - (_QWORD)v17;
  if (v19 >= 0x11)
  {
    do
    {
      operator delete(*v17);
      v20 = *(_QWORD *)(a1 + 288);
      v17 = (void **)(*(_QWORD *)(a1 + 280) + 8);
      *(_QWORD *)(a1 + 280) = v17;
      v19 = v20 - (_QWORD)v17;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    v21 = 256;
  }
  else
  {
    if (v19 >> 3 != 2)
      goto LABEL_29;
    v21 = 512;
  }
  *(_QWORD *)(a1 + 304) = v21;
LABEL_29:
  *(_DWORD *)(a1 + 448) = -1082130432;
  v22 = *(void ***)(a1 + 328);
  v23 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 360) = 0;
  v24 = v23 - (_QWORD)v22;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      v25 = *(_QWORD *)(a1 + 336);
      v22 = (void **)(*(_QWORD *)(a1 + 328) + 8);
      *(_QWORD *)(a1 + 328) = v22;
      v24 = v25 - (_QWORD)v22;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    v26 = 512;
  }
  else
  {
    if (v24 >> 3 != 2)
      goto LABEL_36;
    v26 = 1024;
  }
  *(_QWORD *)(a1 + 352) = v26;
LABEL_36:
  v27 = *(void ***)(a1 + 376);
  v28 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 408) = 0;
  v29 = v28 - (_QWORD)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v30 = *(_QWORD *)(a1 + 384);
      v27 = (void **)(*(_QWORD *)(a1 + 376) + 8);
      *(_QWORD *)(a1 + 376) = v27;
      v29 = v30 - (_QWORD)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    v31 = 256;
    goto LABEL_42;
  }
  if (v29 >> 3 == 2)
  {
    v31 = 512;
LABEL_42:
    *(_QWORD *)(a1 + 400) = v31;
  }
  *(_QWORD *)(a1 + 440) = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  v32 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)&result = 0x8000000080000000;
  *(_QWORD *)(v32 + 72) = 0x8000000080000000;
  *(_OWORD *)(v32 + 80) = xmmword_1002E56A0;
  *(_DWORD *)(v32 + 96) = 0;
  *(_BYTE *)(v32 + 100) = 0;
  __asm { FMOV            V2.2S, #-1.0 }
  *(_QWORD *)(v32 + 104) = _D2;
  *(_DWORD *)(v32 + 112) = -1082130432;
  *(_QWORD *)(v32 + 120) = 0;
  *(_QWORD *)(v32 + 128) = 0;
  *(_DWORD *)(v32 + 136) = -1082130432;
  *(_BYTE *)(v32 + 140) = 0;
  *(_QWORD *)(v32 + 144) = 0;
  v39 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v39 + 152) = 0;
  *(_QWORD *)(v39 + 160) = 0;
  *(_QWORD *)(v39 + 168) = 0x8000000080000000;
  *(_OWORD *)(v39 + 176) = xmmword_1002E56A0;
  *(_DWORD *)(v39 + 192) = 0;
  *(_BYTE *)(v39 + 196) = 0;
  *(_QWORD *)(v39 + 200) = _D2;
  *(_DWORD *)(v39 + 208) = -1082130432;
  *(_QWORD *)(v39 + 216) = 0;
  *(_QWORD *)(v39 + 224) = 0;
  *(_DWORD *)(v39 + 232) = -1082130432;
  *(_BYTE *)(v39 + 236) = 0;
  *(_QWORD *)(v39 + 240) = 0;
  return result;
}

double sub_10000D1E8(_QWORD *a1)
{
  return sub_10000CF24((uint64_t)a1 + *(_QWORD *)(*a1 - 56));
}

float sub_10000D1F8(uint64_t a1, uint64_t a2)
{
  float result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  char *v24;
  float *v25;
  char *v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 48) = a2;
  *(_BYTE *)(a1 + 432) = 1;
  v6 = *(_QWORD *)(a1 + 192);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160)
                               + (((unint64_t)(v6 + *(_QWORD *)(a1 + 184) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v6 + *(_QWORD *)(a1 + 184) - 1) & 0x1FF));
    *(_QWORD *)(a1 + 424) = v7;
    *(_QWORD *)(v5 + 120) = *(_QWORD *)(a1 + 416);
    *(_QWORD *)(v5 + 128) = v7;
    v8 = *(_QWORD *)(a1 + 360);
    if (v8)
    {
      *(_DWORD *)(a1 + 448) = -1082130432;
      if (!*(_BYTE *)(v5 + 140))
        goto LABEL_14;
      v9 = *(_QWORD *)(a1 + 408);
      if (!v9)
        goto LABEL_14;
      v10 = 0;
      v11 = 0;
      result = *(float *)(v5 + 40) * 1000000.0;
      v12 = *(_QWORD *)(a1 + 400);
      v13 = *(_QWORD *)(a1 + 376);
      v14 = *(_QWORD *)(v5 + 64);
      v15 = v14 + (uint64_t)result;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v13 + (((unint64_t)(v12 + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v12 + v11) & 0x1FF));
        if (v16 + 750000 >= v14 && v16 <= v15)
        {
          result = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 328)
                                        + (((unint64_t)(v11 + *(_QWORD *)(a1 + 352)) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v11 + *(_QWORD *)(a1 + 352)) & 0x3FF));
          if (result > *(float *)(v5 + 36))
          {
            *(float *)(v5 + 136) = result;
            *(_QWORD *)(v5 + 144) = v16;
            *(float *)(a1 + 448) = result;
            *(_QWORD *)(a1 + 456) = v16;
            ++*(_BYTE *)(v5 + 100);
            v10 = 1;
          }
        }
        ++v11;
      }
      while (v9 != v11);
      if ((v10 & 1) == 0)
      {
LABEL_14:
        v18 = *(_QWORD *)(a1 + 352);
        v19 = *(_QWORD *)(a1 + 328);
        v20 = (char *)(v19 + 8 * (v18 >> 10));
        if (*(_QWORD *)(a1 + 336) == v19)
        {
          v22 = 0;
          v28 = 0;
          v24 = (char *)(v19 + 8 * (v18 >> 10));
        }
        else
        {
          v21 = *(float **)v20;
          v22 = (float *)(*(_QWORD *)v20 + 4 * (*(_QWORD *)(a1 + 352) & 0x3FFLL));
          v23 = *(_QWORD *)(v19 + (((v18 + v8) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v18 + v8) & 0x3FF);
          v24 = (char *)(v19 + 8 * (v18 >> 10));
          if (v22 != (float *)v23)
          {
            v25 = (float *)(*(_QWORD *)v20 + 4 * (*(_QWORD *)(a1 + 352) & 0x3FFLL));
            v26 = (char *)(v19 + 8 * (v18 >> 10));
            while (1)
            {
              if ((char *)++v25 - (char *)v21 == 4096)
              {
                v27 = (float *)*((_QWORD *)v26 + 1);
                v26 += 8;
                v21 = v27;
                v25 = v27;
              }
              if (v25 == (float *)v23)
                break;
              if (*v22 < *v25)
              {
                v24 = v26;
                v22 = v25;
              }
            }
          }
          v28 = *(_QWORD *)v20 + 4 * (*(_QWORD *)(a1 + 352) & 0x3FFLL);
        }
        if (v22 == (float *)v28)
          v29 = 0;
        else
          v29 = (((uint64_t)v22 - *(_QWORD *)v24) >> 2) + ((v24 - v20) << 7) - ((v28 - *(_QWORD *)v20) >> 2);
        result = *(float *)(*(_QWORD *)(v19 + (((v29 + v18) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((v29 + v18) & 0x3FF));
        *(float *)(a1 + 448) = result;
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376)
                                    + (((unint64_t)(*(_QWORD *)(a1 + 400) + v29) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*(_QWORD *)(a1 + 400) + v29) & 0x1FF));
        *(_QWORD *)(a1 + 456) = v30;
        *(float *)(v5 + 136) = result;
        *(_QWORD *)(v5 + 144) = v30;
      }
    }
  }
  return result;
}

float sub_10000D45C(_QWORD *a1, uint64_t a2)
{
  return sub_10000D1F8((uint64_t)a1 + *(_QWORD *)(*a1 - 48), a2);
}

void sub_10000D46C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4;
  float v5;

  if (a1[27].i32[1] >= 1)
  {
    v5 = sqrtf((float)((float)(*(float *)(a2 + 12) * *(float *)(a2 + 12)) + (float)(*(float *)(a2 + 8) * *(float *)(a2 + 8)))+ (float)(*(float *)(a2 + 16) * *(float *)(a2 + 16)));
    sub_10000C610((int64x2_t *)a1[14].i64, &v5);
    sub_10000C694((int64x2_t *)a1[17].i64, (_QWORD *)a2);
  }
  v4 = a1[16].u64[1];
  if (v4 >= 0x321)
  {
    ++a1[16].i64[0];
    a1[16].i64[1] = v4 - 1;
    sub_100010A30((uint64_t)a1[14].i64, 1);
    a1[19] = vaddq_s64(a1[19], (int64x2_t)xmmword_1002E56B0);
    sub_100010A8C((uint64_t)a1[17].i64, 1);
  }
}

void sub_10000D51C(_QWORD *a1, uint64_t a2)
{
  sub_10000D46C((int64x2_t *)((char *)a1 + *(_QWORD *)(*a1 - 64)), a2);
}

void sub_10000D52C(CLKappaAlgBlock *a1)
{
  sub_10000F084(a1, (uint64_t *)&off_100346608);
}

void sub_10000D538(CLKappaAlgBlock *a1)
{
  sub_10000F084(a1, (uint64_t *)&off_100346608);
  operator delete();
}

void sub_10000D568(_QWORD *a1)
{
  sub_10000F084((CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24)), (uint64_t *)&off_100346608);
}

void sub_10000D580(_QWORD *a1)
{
  sub_10000F084((CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24)), (uint64_t *)&off_100346608);
  operator delete();
}

void sub_10000D5B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10000D5E8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_10000D5F8()
{
  sub_10000714C("vector");
}

void *sub_10000D60C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_10000A128();
  return operator new(8 * a2);
}

float **sub_10000D640(float **a1, float *a2, float **a3, float *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a4 == a2 || (v5 = a4 - *a3 + (((char *)a3 - (char *)a1) << 7), v6 = (char *)a2 - (char *)*a1, v5 == v6 >> 2))
    v7 = 0;
  else
    v7 = 63 - __clz(v5 - (v6 >> 2));
  return sub_10000D690(a1, a2, a3, a4, a5, 2 * v7, 1);
}

float **sub_10000D690(float **result, float *a2, float **a3, float *a4, uint64_t a5, uint64_t a6, int a7)
{
  float *v9;
  float *v11;
  uint64_t v12;
  float **v13;
  float *v14;
  float *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float **v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float **v28;
  float *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float **v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  float **v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  unint64_t v43;
  float *v44;
  float *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  float **v50;
  float *v51;
  float *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  float **v57;
  float *v58;
  uint64_t v59;
  unint64_t v60;
  float *v61;
  float *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float **v67;
  float *v68;
  unint64_t v69;
  _QWORD *v70;
  float *v71;
  float *v72;
  _QWORD *v73;
  float *v74;
  float *v75;
  _QWORD *v76;
  float *v77;
  int v78;
  float *v79;
  char *v80;
  float *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  float *v87;
  unint64_t v88;
  float *v89;
  float *v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  float **v96;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  float **v100;
  float *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float **v105;
  float *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  float **v110;
  float *v111;
  float **v112;
  float *v113;
  unint64_t v114;
  float **v115;
  float *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  char *v122;
  float *v123;
  char v124;
  float **v125;
  float *v126;

  v125 = result;
  v126 = a2;
  if (a2 != a4)
  {
    v9 = a4;
    v11 = a2;
    v12 = a6 - 1;
    while (2)
    {
      v13 = v125;
      v14 = *a3;
      v15 = *v125;
      v16 = v9 - *a3 + (((char *)a3 - (char *)v125) << 7) - (v11 - *v125);
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (v9 == v14)
            v9 = *(a3 - 1) + 1024;
          v91 = *(v9 - 1);
          if (v91 < *v11)
          {
            v92 = *v11;
            *v11 = v91;
            *(v9 - 1) = v92;
          }
          return result;
        case 3uLL:
          v93 = (char *)v11 - (char *)v15;
          v94 = v11 - v15;
          if (v93 < -3)
          {
            v108 = 1022 - v94;
            v96 = &v125[-(v108 >> 10)];
            v97 = &(*v96)[~(_WORD)v108 & 0x3FF];
          }
          else
          {
            v95 = v94 + 1;
            v96 = &v125[v95 >> 10];
            v97 = &(*v96)[v95 & 0x3FF];
          }
          if (v9 == v14)
          {
            v109 = (uint64_t)*--a3;
            v9 = (float *)(v109 + 4096);
          }
          return (float **)sub_10000E09C((uint64_t)v125, v11, (uint64_t)v96, v97, (uint64_t)a3, v9 - 1);
        case 4uLL:
          v98 = (char *)v11 - (char *)v15;
          v99 = v11 - v15;
          if (v98 >= -3)
          {
            v100 = &v125[(unint64_t)(v99 + 1) >> 10];
            v101 = &(*v100)[(v99 + 1) & 0x3FF];
            v102 = v99 + 2;
LABEL_68:
            v110 = &v125[v102 >> 10];
            v111 = &(*v110)[v102 & 0x3FF];
            goto LABEL_78;
          }
          v100 = &v125[-((unint64_t)(1022 - v99) >> 10)];
          v101 = &(*v100)[~(1022 - (_WORD)v99) & 0x3FF];
          if ((unint64_t)v98 >= 0xFFFFFFFFFFFFFFF9)
          {
            v102 = 1;
            goto LABEL_68;
          }
          v118 = 1021 - v99;
          v110 = &v125[-(v118 >> 10)];
          v111 = &(*v110)[~(_WORD)v118 & 0x3FF];
LABEL_78:
          if (v9 == v14)
          {
            v119 = (uint64_t)*--a3;
            v9 = (float *)(v119 + 4096);
          }
          return (float **)sub_10000E938((uint64_t)v125, v11, (uint64_t)v100, v101, (uint64_t)v110, v111, (uint64_t)a3, v9 - 1);
        case 5uLL:
          v103 = (char *)v11 - (char *)v15;
          v104 = v11 - v15;
          if (v103 >= -3)
          {
            v105 = &v125[(unint64_t)(v104 + 1) >> 10];
            v106 = &(*v105)[(v104 + 1) & 0x3FF];
            v107 = v104 + 2;
LABEL_71:
            v112 = &v125[v107 >> 10];
            v113 = &(*v112)[v107 & 0x3FF];
            v114 = v104 + 3;
LABEL_72:
            v115 = &v125[v114 >> 10];
            v116 = &(*v115)[v114 & 0x3FF];
            goto LABEL_73;
          }
          v105 = &v125[-((unint64_t)(1022 - v104) >> 10)];
          v106 = &(*v105)[~(1022 - (_WORD)v104) & 0x3FF];
          if ((unint64_t)v103 >= 0xFFFFFFFFFFFFFFF9)
          {
            v107 = 1;
            goto LABEL_71;
          }
          v112 = &v125[-((unint64_t)(1021 - v104) >> 10)];
          v113 = &(*v112)[~(1021 - (_WORD)v104) & 0x3FF];
          if ((unint64_t)v103 >= 0xFFFFFFFFFFFFFFF5)
          {
            v114 = 1;
            goto LABEL_72;
          }
          v120 = 1020 - v104;
          v115 = &v125[-(v120 >> 10)];
          v116 = &(*v115)[~(_WORD)v120 & 0x3FF];
LABEL_73:
          if (v9 == v14)
          {
            v117 = (uint64_t)*--a3;
            v9 = (float *)(v117 + 4096);
          }
          return (float **)sub_10000E9B8((uint64_t)v125, v11, (uint64_t)v105, v106, (uint64_t)v112, v113, (uint64_t)v115, v116, (uint64_t)a3, v9 - 1);
        default:
          if ((uint64_t)v16 <= 23)
          {
            if ((a7 & 1) != 0)
              return sub_10000DEEC(v125, v11, (uint64_t)a3, v9);
            else
              return (float **)sub_10000DF9C(v125, v11, (uint64_t)a3, v9);
          }
          if (v12 == -1)
          {
            if (v9 != v11)
              return sub_10000EA64((char *)v125, v11, a3, v9, (uint64_t)a3, v9, a5);
            return result;
          }
          v17 = v16 >> 1;
          v18 = sub_10000DE88((uint64_t)&v125, v16 >> 1);
          if (v16 < 0x81)
          {
            v25 = (char *)v9 - (char *)*a3;
            v26 = v25 >> 2;
            if (v25 < 5)
            {
              v37 = 1024 - v26;
              v28 = &a3[-(v37 >> 10)];
              v29 = &(*v28)[~(_WORD)v37 & 0x3FF];
            }
            else
            {
              v27 = v26 - 1;
              v28 = &a3[v27 >> 10];
              v29 = &(*v28)[v27 & 0x3FF];
            }
            sub_10000E09C((uint64_t)v18, v19, (uint64_t)v125, v126, (uint64_t)v28, v29);
            if ((a7 & 1) != 0)
              goto LABEL_32;
          }
          else
          {
            v20 = (char *)v9 - (char *)*a3;
            v21 = v20 >> 2;
            if (v20 < 5)
            {
              v30 = 1024 - v21;
              v23 = &a3[-(v30 >> 10)];
              v24 = &(*v23)[~(_WORD)v30 & 0x3FF];
            }
            else
            {
              v22 = v21 - 1;
              v23 = &a3[v22 >> 10];
              v24 = &(*v23)[v22 & 0x3FF];
            }
            v121 = a7;
            sub_10000E09C((uint64_t)v13, v11, (uint64_t)v18, v19, (uint64_t)v23, v24);
            v31 = (char *)v126 - (char *)*v125;
            v32 = v31 >> 2;
            if (v31 < -3)
            {
              v43 = 1022 - v32;
              v34 = &v125[-(v43 >> 10)];
              v35 = *v34;
              v36 = ~(_DWORD)v43 & 0x3FFLL;
            }
            else
            {
              v33 = v32 + 1;
              v34 = &v125[v33 >> 10];
              v35 = *v34;
              v36 = v33 & 0x3FF;
            }
            v44 = &v35[v36];
            v46 = sub_10000DE88((uint64_t)&v125, v17 - 1);
            v47 = (char *)v9 - (char *)*a3;
            v48 = v47 >> 2;
            if (v47 < 9)
            {
              v53 = 1025 - v48;
              v50 = &a3[-(v53 >> 10)];
              v51 = &(*v50)[~(_WORD)v53 & 0x3FF];
            }
            else
            {
              v49 = v48 - 2;
              v50 = &a3[v49 >> 10];
              v51 = &(*v50)[v49 & 0x3FF];
            }
            sub_10000E09C((uint64_t)v34, v44, (uint64_t)v46, v45, (uint64_t)v50, v51);
            v54 = (char *)v126 - (char *)*v125;
            v55 = v54 >> 2;
            if (v54 < -7)
            {
              v60 = 1021 - v55;
              v57 = &v125[-(v60 >> 10)];
              v58 = *v57;
              v59 = ~(_DWORD)v60 & 0x3FFLL;
            }
            else
            {
              v56 = v55 + 2;
              v57 = &v125[v56 >> 10];
              v58 = *v57;
              v59 = v56 & 0x3FF;
            }
            v61 = &v58[v59];
            v63 = sub_10000DE88((uint64_t)&v125, v17 + 1);
            v64 = (char *)v9 - (char *)*a3;
            v65 = v64 >> 2;
            if (v64 < 13)
            {
              v69 = 1026 - v65;
              v67 = &a3[-(v69 >> 10)];
              v68 = &(*v67)[~(_WORD)v69 & 0x3FF];
            }
            else
            {
              v66 = v65 - 3;
              v67 = &a3[v66 >> 10];
              v68 = &(*v67)[v66 & 0x3FF];
            }
            sub_10000E09C((uint64_t)v57, v61, (uint64_t)v63, v62, (uint64_t)v67, v68);
            v70 = sub_10000DE88((uint64_t)&v125, v17 - 1);
            v72 = v71;
            v73 = sub_10000DE88((uint64_t)&v125, v16 >> 1);
            v75 = v74;
            v76 = sub_10000DE88((uint64_t)&v125, v17 + 1);
            sub_10000E09C((uint64_t)v70, v72, (uint64_t)v73, v75, (uint64_t)v76, v77);
            sub_10000DE88((uint64_t)&v125, v17);
            v78 = *(_DWORD *)v126;
            *v126 = *v79;
            *(_DWORD *)v79 = v78;
            a7 = v121;
            if ((v121 & 1) != 0)
            {
LABEL_32:
              v38 = v125;
              v39 = v126;
              goto LABEL_33;
            }
          }
          v38 = v125;
          v39 = v126;
          v40 = (char *)v126 - (char *)*v125;
          v41 = v40 >> 2;
          if (v40 < 5)
            v42 = &v125[-((unint64_t)(1024 - v41) >> 10)][~(1024 - (_WORD)v41) & 0x3FF];
          else
            v42 = &(*(float **)((char *)v125 + (((unint64_t)(v41 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v41 - 1) & 0x3FF];
          if (*v42 >= *v126)
          {
            result = sub_10000E124(v125, v126, a3, v9);
            a7 = 0;
            v125 = result;
            v126 = v52;
            goto LABEL_45;
          }
LABEL_33:
          sub_10000E2EC(v38, v39, a3, v9, (uint64_t)&v122);
          v80 = v122;
          v81 = v123;
          if (!v124)
            goto LABEL_41;
          v82 = sub_10000E4A4((char *)v125, v126, v122, v123);
          v83 = (uint64_t)v81 - *(_QWORD *)v80;
          v84 = v83 >> 2;
          if (v83 < -3)
          {
            v88 = 1022 - v84;
            v86 = &v80[-8 * (v88 >> 10)];
            v87 = (float *)(*(_QWORD *)v86 + 4 * (~(_WORD)v88 & 0x3FF));
          }
          else
          {
            v85 = v84 + 1;
            v86 = &v80[8 * (v85 >> 10)];
            v87 = (float *)(*(_QWORD *)v86 + 4 * (v85 & 0x3FF));
          }
          result = (float **)sub_10000E4A4(v86, v87, (char *)a3, v9);
          if ((_DWORD)result)
          {
            a3 = (float **)v80;
            v9 = v81;
            if ((v82 & 1) != 0)
              return result;
          }
          else
          {
            if (!v82)
            {
LABEL_41:
              result = (float **)sub_10000D690(v125, v126, v80, v81, a5, v12, a7 & 1);
              a7 = 0;
            }
            v89 = v81 + 1;
            if ((float *)((char *)v81 - *(_QWORD *)v80 + 4) == (float *)4096)
            {
              v90 = (float *)*((_QWORD *)v80 + 1);
              v80 += 8;
              v89 = v90;
            }
            v125 = (float **)v80;
            v126 = v89;
          }
LABEL_45:
          v11 = v126;
          --v12;
          if (v9 != v126)
            continue;
          break;
      }
      break;
    }
  }
  return result;
}

_QWORD *sub_10000DE88(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 2);
    if (v4 < 1)
      result -= (unint64_t)(1023 - v4) >> 10;
    else
      result += (unint64_t)v4 >> 10;
  }
  return result;
}

float **sub_10000DEEC(float **result, float *a2, uint64_t a3, float *a4)
{
  float *v4;
  float *v5;
  float *v6;
  float **v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float v16;

  if (a2 != a4)
  {
    v4 = a2 + 1;
    v5 = *result;
    while (1)
    {
      if ((char *)v4 - (char *)v5 == 4096)
      {
        v6 = result[1];
        ++result;
        v5 = v6;
        v4 = v6;
      }
      if (v4 == a4)
        break;
      v7 = result;
      v8 = (uint64_t)v4;
      if (v4 == v5)
      {
        v7 = result - 1;
        v8 = (uint64_t)(*(result - 1) + 1024);
      }
      v10 = *(float *)(v8 - 4);
      v9 = (float *)(v8 - 4);
      v11 = v10;
      v12 = *v4;
      if (*v4 < v10)
      {
        v13 = v4;
        while (1)
        {
          *v13 = v11;
          if (v9 == a2)
            break;
          v14 = v9;
          if (v9 == *v7)
          {
            v15 = (uint64_t)*--v7;
            v9 = (float *)(v15 + 4096);
          }
          v16 = *--v9;
          v11 = v16;
          v13 = v14;
          if (v12 >= v16)
            goto LABEL_16;
        }
        v14 = a2;
LABEL_16:
        *v14 = v12;
      }
      ++v4;
    }
  }
  return result;
}

_QWORD *sub_10000DF9C(_QWORD *result, float *a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  float **v7;
  unint64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  __int16 v12;
  float **v13;
  unint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  float *v23;

  if (a2 != a4)
  {
    v4 = (uint64_t)a2 - *result;
    v5 = v4 >> 2;
    if (v4 < -3)
    {
      v8 = 1022 - v5;
      v6 = ~(_WORD)v8;
      v7 = (float **)&result[-(v8 >> 10)];
    }
    else
    {
      v6 = v5 + 1;
      v7 = (float **)&result[(unint64_t)(v5 + 1) >> 10];
    }
    v9 = *v7;
    v10 = &(*v7)[v6 & 0x3FF];
    while (v10 != a4)
    {
      v11 = v10 - v9;
      if ((char *)v10 - (char *)v9 < 5)
      {
        v14 = 1024 - v11;
        v12 = ~(_WORD)v14;
        v13 = &v7[-(v14 >> 10)];
      }
      else
      {
        v12 = v11 - 1;
        v13 = &v7[(unint64_t)(v11 - 1) >> 10];
      }
      v15 = *v13;
      v16 = &(*v13)[v12 & 0x3FF];
      v17 = *v10;
      v18 = *v16;
      if (*v10 < *v16)
      {
        v19 = v10;
        do
        {
          v20 = v16;
          *v19 = v18;
          if (v16 == v15)
          {
            v21 = *--v13;
            v15 = v21;
            v16 = v21 + 1024;
          }
          v22 = *--v16;
          v18 = v22;
          v19 = v20;
        }
        while (v17 < v22);
        *v20 = v17;
      }
      if ((char *)++v10 - (char *)v9 == 4096)
      {
        v23 = v7[1];
        ++v7;
        v9 = v23;
        v10 = v23;
      }
    }
  }
  return result;
}

uint64_t sub_10000E09C(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7)
      return 1;
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = *a2;
    if (*a4 >= *a2)
      return 1;
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

float **sub_10000E124(float **result, float *a2, float **a3, float *a4)
{
  float v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;

  v4 = *a2;
  v5 = *a3;
  v6 = (char *)a4 - (char *)*a3;
  v7 = v6 >> 2;
  if (v6 < 5)
    v8 = &a3[-((unint64_t)(1024 - v7) >> 10)][~(1024 - (_WORD)v7) & 0x3FF];
  else
    v8 = &(*(float **)((char *)a3 + (((unint64_t)(v7 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v7 - 1) & 0x3FF];
  v9 = *v8;
  v10 = *result;
  v11 = a2;
  if (v4 >= v9)
  {
    do
    {
      if ((char *)++v11 - (char *)v10 == 4096)
      {
        v13 = result[1];
        ++result;
        v10 = v13;
        v11 = v13;
      }
    }
    while ((result < a3 || result == a3 && v11 < a4) && v4 >= *v11);
  }
  else
  {
    do
    {
      if ((char *)++v11 - (char *)v10 == 4096)
      {
        v12 = result[1];
        ++result;
        v10 = v12;
        v11 = v12;
      }
    }
    while (v4 >= *v11);
  }
  if (result < a3 || result == a3 && v11 < a4)
  {
    do
    {
      if (a4 == v5)
      {
        v14 = *--a3;
        v5 = v14;
        a4 = v14 + 1024;
      }
      v15 = *--a4;
    }
    while (v4 < v15);
  }
  while (result < a3 || result == a3 && v11 < a4)
  {
    v16 = *v11;
    *v11 = *a4;
    *a4 = v16;
    do
    {
      if ((char *)++v11 - (char *)v10 == 4096)
      {
        v17 = result[1];
        ++result;
        v10 = v17;
        v11 = v17;
      }
    }
    while (v4 >= *v11);
    do
    {
      if (a4 == v5)
      {
        v18 = *--a3;
        v5 = v18;
        a4 = v18 + 1024;
      }
      v19 = *--a4;
    }
    while (v4 < v19);
  }
  v20 = (char *)v11 - (char *)v10;
  v21 = v20 >> 2;
  if (v20 < 5)
    v22 = &result[-((unint64_t)(1024 - v21) >> 10)][~(1024 - (_WORD)v21) & 0x3FF];
  else
    v22 = &(*(float **)((char *)result + (((unint64_t)(v21 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v21 - 1) & 0x3FF];
  if (v22 != a2)
    *a2 = *v22;
  *v22 = v4;
  return result;
}

float **sub_10000E2EC@<X0>(float **result@<X0>, float *a2@<X1>, float **a3@<X2>, float *a4@<X3>, uint64_t a5@<X8>)
{
  float v5;
  float *v6;
  float *v7;
  float *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float v14;
  uint64_t v15;
  float v16;
  BOOL v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  float **v26;
  unint64_t v27;
  float *v28;

  v5 = *a2;
  v6 = *result;
  v7 = a2;
  do
  {
    if ((char *)++v7 - (char *)v6 == 4096)
    {
      v8 = result[1];
      ++result;
      v6 = v8;
      v7 = v8;
    }
    v9 = *v7;
  }
  while (*v7 < v5);
  v10 = v7 - v6;
  if ((char *)v7 - (char *)v6 < 5)
    v11 = (uint64_t)&result[-((unint64_t)(1024 - v10) >> 10)][~(1024 - (_WORD)v10) & 0x3FF];
  else
    v11 = (uint64_t)&(*(float **)((char *)result + (((unint64_t)(v10 - 1) >> 7) & 0x1FFFFFFFFFFFFF8)))[(v10 - 1) & 0x3FF];
  if ((float *)v11 == a2)
  {
    do
    {
      if (result >= a3 && (result != a3 || v7 >= a4))
        break;
      if (a4 == *a3)
      {
        v15 = (uint64_t)*--a3;
        a4 = (float *)(v15 + 4096);
      }
      v16 = *--a4;
    }
    while (v16 >= v5);
  }
  else
  {
    v12 = *a3;
    do
    {
      if (a4 == v12)
      {
        v13 = *--a3;
        v12 = v13;
        a4 = v13 + 1024;
      }
      v14 = *--a4;
    }
    while (v14 >= v5);
  }
  v18 = result != a3 || v7 >= a4;
  if (result < a3)
    v18 = 0;
  while (result < a3 || result == a3 && v7 < a4)
  {
    *v7 = *a4;
    *a4 = v9;
    do
    {
      if ((char *)++v7 - (char *)v6 == 4096)
      {
        v19 = result[1];
        ++result;
        v6 = v19;
        v7 = v19;
      }
      v9 = *v7;
    }
    while (*v7 < v5);
    v20 = *a3;
    do
    {
      if (a4 == v20)
      {
        v21 = *--a3;
        v20 = v21;
        a4 = v21 + 1024;
      }
      v22 = *--a4;
    }
    while (v22 >= v5);
  }
  v23 = (char *)v7 - (char *)v6;
  v24 = v23 >> 2;
  if (v23 < 5)
  {
    v27 = 1024 - v24;
    v25 = ~(_WORD)v27;
    v26 = &result[-(v27 >> 10)];
  }
  else
  {
    v25 = v24 - 1;
    v26 = &result[(unint64_t)(v24 - 1) >> 10];
  }
  v28 = &(*v26)[v25 & 0x3FF];
  if (v28 != a2)
    *a2 = *v28;
  *v28 = v5;
  *(_QWORD *)a5 = v26;
  *(_QWORD *)(a5 + 8) = v28;
  *(_BYTE *)(a5 + 16) = v18;
  return result;
}

uint64_t sub_10000E4A4(char *a1, float *a2, char *a3, float *a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  float v11;
  float v12;
  float **v13;
  float *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  float *v18;
  char *v19;
  float *v20;
  unint64_t v21;
  char *v22;
  float *v23;
  unint64_t v24;
  char *v25;
  float *v26;
  uint64_t v27;
  char *v28;
  float *v29;
  unint64_t v30;
  char *v31;
  float *v32;
  uint64_t v33;
  char *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  float **v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  float *v44;
  int v45;
  float *v46;
  float **v47;
  float *v48;
  float v49;
  float v50;
  float *v51;
  float *v52;
  float *v53;
  float v54;
  uint64_t v55;
  float *v57;

  if (a4 == a2)
    return 1;
  v4 = (uint64_t)a4;
  v5 = (uint64_t)a3;
  v7 = *(float **)a3;
  v8 = (uint64_t)a2 - *(_QWORD *)a1;
  v9 = v8 >> 2;
  v10 = 1;
  switch((((uint64_t)a4 - *(_QWORD *)a3) >> 2) + ((a3 - a1) << 7) - (v8 >> 2))
  {
    case 0:
    case 1:
      return v10;
    case 2:
      if (v7 == a4)
        v4 = *((_QWORD *)a3 - 1) + 4096;
      v11 = *(float *)(v4 - 4);
      v12 = *a2;
      if (v11 < *a2)
      {
        *a2 = v11;
        *(float *)(v4 - 4) = v12;
      }
      return v10;
    case 3:
      if (v8 < -3)
      {
        v17 = &a1[-8 * ((unint64_t)(1022 - v9) >> 10)];
        v18 = (float *)(*(_QWORD *)v17 + 4 * (~(1022 - (_WORD)v9) & 0x3FF));
      }
      else
      {
        v17 = &a1[8 * ((unint64_t)(v9 + 1) >> 10)];
        v18 = (float *)(*(_QWORD *)v17 + 4 * (((_WORD)v9 + 1) & 0x3FF));
      }
      if (v7 == (float *)v4)
      {
        v27 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v27 + 4096;
      }
      sub_10000E09C((uint64_t)a1, a2, (uint64_t)v17, v18, v5, (float *)(v4 - 4));
      return 1;
    case 4:
      if (v8 >= -3)
      {
        v22 = &a1[8 * ((unint64_t)(v9 + 1) >> 10)];
        v23 = (float *)(*(_QWORD *)v22 + 4 * ((v9 + 1) & 0x3FF));
        v24 = v9 + 2;
LABEL_31:
        v34 = &a1[8 * (v24 >> 10)];
        v35 = (float *)(*(_QWORD *)v34 + 4 * (v24 & 0x3FF));
        goto LABEL_54;
      }
      v22 = &a1[-8 * ((unint64_t)(1022 - v9) >> 10)];
      v23 = (float *)(*(_QWORD *)v22 + 4 * (~(1022 - (_WORD)v9) & 0x3FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF9)
      {
        v24 = 1;
        goto LABEL_31;
      }
      v34 = &a1[-8 * ((unint64_t)(1021 - v9) >> 10)];
      v35 = (float *)(*(_QWORD *)v34 + 4 * (~(1021 - (_WORD)v9) & 0x3FF));
LABEL_54:
      if (v7 == (float *)v4)
      {
        v55 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v55 + 4096;
      }
      sub_10000E938((uint64_t)a1, a2, (uint64_t)v22, v23, (uint64_t)v34, v35, v5, (float *)(v4 - 4));
      return 1;
    case 5:
      if (v8 >= -3)
      {
        v19 = &a1[8 * ((unint64_t)(v9 + 1) >> 10)];
        v20 = (float *)(*(_QWORD *)v19 + 4 * ((v9 + 1) & 0x3FF));
        v21 = v9 + 2;
LABEL_24:
        v28 = &a1[8 * (v21 >> 10)];
        v29 = (float *)(*(_QWORD *)v28 + 4 * (v21 & 0x3FF));
        v30 = v9 + 3;
LABEL_25:
        v31 = &a1[8 * (v30 >> 10)];
        v32 = (float *)(*(_QWORD *)v31 + 4 * (v30 & 0x3FF));
        goto LABEL_26;
      }
      v19 = &a1[-8 * ((unint64_t)(1022 - v9) >> 10)];
      v20 = (float *)(*(_QWORD *)v19 + 4 * (~(1022 - (_WORD)v9) & 0x3FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF9)
      {
        v21 = 1;
        goto LABEL_24;
      }
      v28 = &a1[-8 * ((unint64_t)(1021 - v9) >> 10)];
      v29 = (float *)(*(_QWORD *)v28 + 4 * (~(1021 - (_WORD)v9) & 0x3FF));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFF5)
      {
        v30 = 1;
        goto LABEL_25;
      }
      v31 = &a1[-8 * ((unint64_t)(1020 - v9) >> 10)];
      v32 = (float *)(*(_QWORD *)v31 + 4 * (~(1020 - (_WORD)v9) & 0x3FF));
LABEL_26:
      if (v7 == (float *)v4)
      {
        v33 = *(_QWORD *)(v5 - 8);
        v5 -= 8;
        v4 = v33 + 4096;
      }
      sub_10000E9B8((uint64_t)a1, a2, (uint64_t)v19, v20, (uint64_t)v28, v29, (uint64_t)v31, v32, v5, (float *)(v4 - 4));
      return 1;
    default:
      if (v8 <= -8)
      {
        v13 = (float **)&a1[-8 * ((unint64_t)(1021 - v9) >> 10)];
        v14 = &(*v13)[~(1021 - (_WORD)v9) & 0x3FF];
        v16 = 1022 - v9;
        goto LABEL_17;
      }
      v13 = (float **)&a1[8 * ((unint64_t)(v9 + 2) >> 10)];
      v14 = &(*v13)[(v9 + 2) & 0x3FF];
      v15 = v9 + 1;
      if (v9 == -1)
      {
        v16 = 1023;
LABEL_17:
        v25 = &a1[-8 * (v16 >> 10)];
        v26 = (float *)(*(_QWORD *)v25 + 4 * (~(_WORD)v16 & 0x3FF));
        goto LABEL_33;
      }
      v25 = &a1[8 * (v15 >> 10)];
      v26 = (float *)(*(_QWORD *)v25 + 4 * (v15 & 0x3FF));
LABEL_33:
      sub_10000E09C((uint64_t)a1, a2, (uint64_t)v25, v26, (uint64_t)v13, v14);
      v36 = *v13;
      v37 = (char *)v14 - (char *)*v13;
      v38 = v37 >> 2;
      if (v37 < -3)
      {
        v43 = 1022 - v38;
        v40 = &v13[-(v43 >> 10)];
        v41 = *v40;
        v42 = ~(_DWORD)v43 & 0x3FFLL;
      }
      else
      {
        v39 = v38 + 1;
        v40 = &v13[v39 >> 10];
        v41 = *v40;
        v42 = v39 & 0x3FF;
      }
      v44 = &v41[v42];
      if (v44 == (float *)v4)
        return 1;
      v45 = 0;
      while (1)
      {
        v46 = v44;
        v47 = v40;
        v48 = v41;
        v49 = *v44;
        v50 = *v14;
        if (*v44 < *v14)
        {
          v51 = v44;
          while (1)
          {
            *v51 = v50;
            if (v14 == a2)
              break;
            v52 = v14;
            if (v14 == v36)
            {
              v53 = *--v13;
              v36 = v53;
              v14 = v53 + 1024;
            }
            v54 = *--v14;
            v50 = v54;
            v51 = v52;
            if (v49 >= v54)
              goto LABEL_46;
          }
          v52 = a2;
LABEL_46:
          *v52 = v49;
          if (++v45 == 8)
            break;
        }
        ++v44;
        v41 = v48;
        v40 = v47;
        if ((char *)(v46 + 1) - (char *)v48 == 4096)
        {
          v40 = v47 + 1;
          v41 = v47[1];
          v44 = v41;
        }
        v36 = v48;
        v13 = v47;
        v14 = v46;
        if (v44 == (float *)v4)
          return 1;
      }
      v57 = v44 + 1;
      if ((char *)(v44 + 1) - (char *)v48 == 4096)
        v57 = v47[1];
      v10 = v57 == (float *)v4;
      break;
  }
  return v10;
}

uint64_t sub_10000E938(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6, uint64_t a7, float *a8)
{
  uint64_t result;
  float v13;
  float v14;
  float v15;

  result = sub_10000E09C(a1, a2, a3, a4, a5, a6);
  v13 = *a6;
  if (*a8 < *a6)
  {
    *a6 = *a8;
    *a8 = v13;
    v14 = *a4;
    if (*a6 < *a4)
    {
      *a4 = *a6;
      *a6 = v14;
      v15 = *a2;
      if (*a4 < *a2)
      {
        *a2 = *a4;
        *a4 = v15;
      }
    }
  }
  return result;
}

uint64_t sub_10000E9B8(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6, uint64_t a7, float *a8, uint64_t a9, float *a10)
{
  uint64_t result;
  float v15;
  float v16;
  float v17;
  float v18;

  result = sub_10000E938(a1, a2, a3, a4, a5, a6, a7, a8);
  v15 = *a8;
  if (*a10 < *a8)
  {
    *a8 = *a10;
    *a10 = v15;
    v16 = *a6;
    if (*a8 < *a6)
    {
      *a6 = *a8;
      *a8 = v16;
      v17 = *a4;
      if (*a6 < *a4)
      {
        *a4 = *a6;
        *a6 = v17;
        v18 = *a2;
        if (*a4 < *a2)
        {
          *a2 = *a4;
          *a4 = v18;
        }
      }
    }
  }
  return result;
}

float **sub_10000EA64(char *a1, float *a2, float **a3, float *a4, uint64_t a5, float *a6, uint64_t a7)
{
  float *v9;
  float **v10;
  int64_t v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float *v18;
  char *v19;
  float *v20;
  float *v21;
  float **v22;
  float v23;
  float *v24;
  float v25;
  char *v26;
  float *v27;
  char *v28;
  float *v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v38;
  char *v39;
  float *v40;

  if (a2 == a4)
    return (float **)a5;
  v9 = a4;
  v10 = a3;
  v39 = a1;
  v40 = a2;
  v13 = ((char *)a3 - a1) << 7;
  v14 = *a3;
  v15 = a4 - *a3 + v13 - (((uint64_t)a2 - *(_QWORD *)a1) >> 2);
  if (v15 >= 2)
  {
    v38 = ((char *)a3 - a1) << 7;
    v16 = (unint64_t)(v15 - 2) >> 1;
    do
    {
      v17 = v39;
      v18 = v40;
      v19 = (char *)sub_10000DE88((uint64_t)&v39, v16);
      sub_10000ECD0(v17, v18, a7, v15, v19, v20);
      --v16;
    }
    while (v16 != -1);
    v14 = *v10;
    v13 = v38;
    v15 = v38 + v9 - *v10 - (((uint64_t)a2 - *(_QWORD *)a1) >> 2);
  }
  if (v9 == a6)
  {
    v22 = v10;
  }
  else
  {
    v21 = v9;
    v22 = v10;
    do
    {
      v23 = *v21;
      if (*v21 < *a2)
      {
        *v21 = *a2;
        *a2 = v23;
        sub_10000ECD0(a1, a2, a7, v15, a1, a2);
        v14 = *v22;
      }
      if ((char *)++v21 - (char *)v14 == 4096)
      {
        v24 = v22[1];
        ++v22;
        v14 = v24;
        v21 = v24;
      }
    }
    while (v21 != a6);
    v15 = v13 + v9 - *v10 - (((uint64_t)a2 - *(_QWORD *)a1) >> 2);
  }
  if (v15 >= 2)
  {
    do
    {
      v25 = *a2;
      sub_10000EEC0(a1, a2, a7, v15);
      v28 = v26;
      v29 = *v10;
      v30 = (uint64_t)v9;
      if (*v10 == v9)
        v30 = (uint64_t)(*(v10 - 1) + 1024);
      v31 = (float *)(v30 - 4);
      if (v31 == v27)
      {
        *v27 = v25;
      }
      else
      {
        *v27 = *v31;
        v32 = (uint64_t)(v27 + 1);
        v33 = *(_QWORD *)v26;
        if ((float *)((char *)v27 - *(_QWORD *)v26 + 4) == (float *)4096)
        {
          v28 = v26 + 8;
          v32 = *((_QWORD *)v26 + 1);
          v33 = v32;
        }
        *v31 = v25;
        if ((float *)v32 == a2)
          v34 = 0;
        else
          v34 = ((v28 - a1) << 7) + ((v32 - v33) >> 2) - (((uint64_t)a2 - *(_QWORD *)a1) >> 2);
        sub_10000EFDC(a1, (uint64_t)a2, v28, v32, a7, v34);
        v29 = *v10;
      }
      if (v9 == v29)
      {
        v35 = (uint64_t)*--v10;
        v9 = (float *)(v35 + 4096);
      }
      --v9;
    }
    while (v15-- > 2);
  }
  return v22;
}

char *sub_10000ECD0(char *result, float *a2, uint64_t a3, uint64_t a4, char *a5, float *a6)
{
  float *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  _QWORD v23[2];

  v6 = a6;
  v23[0] = result;
  v23[1] = a2;
  if (a2 == a6)
    v8 = 0;
  else
    v8 = (((uint64_t)a6 - *(_QWORD *)a5) >> 2) + ((a5 - result) << 7) - (((uint64_t)a2 - *(_QWORD *)result) >> 2);
  v9 = a4 - 2;
  if (a4 >= 2)
  {
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) >= v8)
    {
      v11 = 2 * v8;
      v12 = (2 * v8) | 1;
      result = (char *)sub_10000DE88((uint64_t)v23, v12);
      if (v11 + 2 < a4)
      {
        v14 = (uint64_t)v13 - *(_QWORD *)result;
        v15 = v14 >> 2;
        v16 = (float *)(v14 < -3
                      ? *(_QWORD *)&result[-8 * ((unint64_t)(1022 - v15) >> 10)]
                      + 4 * (~(1022 - (_WORD)v15) & 0x3FF)
                      : *(_QWORD *)&result[((unint64_t)(v15 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                      + 4 * ((v15 + 1) & 0x3FF));
        if (*v13 < *v16)
        {
          if ((float *)((char *)++v13 - *(_QWORD *)result) == (float *)4096)
            v13 = (float *)*((_QWORD *)result + 1);
          v12 = v11 + 2;
        }
      }
      v17 = *v13;
      v18 = *v6;
      if (*v13 >= *v6)
      {
        do
        {
          *v6 = v17;
          v6 = v13;
          if (v10 < v12)
            break;
          v19 = 2 * v12;
          v12 = (2 * v12) | 1;
          result = (char *)sub_10000DE88((uint64_t)v23, v12);
          if (v19 + 2 < a4)
          {
            v20 = (uint64_t)v13 - *(_QWORD *)result;
            v21 = v20 >> 2;
            v22 = (float *)(v20 < -3
                          ? *(_QWORD *)&result[-8 * ((unint64_t)(1022 - v21) >> 10)]
                          + 4 * (~(1022 - (_WORD)v21) & 0x3FF)
                          : *(_QWORD *)&result[((unint64_t)(v21 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                          + 4 * ((v21 + 1) & 0x3FF));
            if (*v13 < *v22)
            {
              if ((float *)((char *)++v13 - *(_QWORD *)result) == (float *)4096)
                v13 = (float *)*((_QWORD *)result + 1);
              v12 = v19 + 2;
            }
          }
          v17 = *v13;
        }
        while (*v13 >= v18);
        *v6 = v18;
      }
    }
  }
  return result;
}

float sub_10000EEC0(_QWORD *a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float result;

  v4 = 0;
  v5 = a4 - 2;
  if (a4 < 2)
    v5 = a4 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = a2;
    if (v4 != -1)
    {
      v8 = v4 + 1 + (((uint64_t)a2 - *a1) >> 2);
      if (v8 < 1)
      {
        v9 = 1023 - v8;
        a1 -= v9 >> 10;
        a2 = (float *)(*a1 + 4 * (~(_WORD)v9 & 0x3FF));
      }
      else
      {
        a1 += (unint64_t)v8 >> 10;
        a2 = (float *)(*a1 + 4 * (v8 & 0x3FF));
      }
    }
    v10 = (2 * v4) | 1;
    v4 = 2 * v4 + 2;
    if (v4 >= a4
      || ((v11 = (uint64_t)a2 - *a1, v12 = v11 >> 2, v11 < -3)
        ? (v13 = (float *)(a1[-((unint64_t)(1022 - v12) >> 10)] + 4 * (~(1022 - (_WORD)v12) & 0x3FF)))
        : (v13 = (float *)(*(_QWORD *)((char *)a1 + (((unint64_t)(v12 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * ((v12 + 1) & 0x3FF))),
          *a2 >= *v13))
    {
      v4 = v10;
    }
    else if ((float *)((char *)++a2 - *a1) == (float *)4096)
    {
      v14 = (float *)a1[1];
      ++a1;
      a2 = v14;
    }
    result = *a2;
    *v7 = *a2;
  }
  while (v4 <= v6);
  return result;
}

_QWORD *sub_10000EFDC(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  uint64_t v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  _QWORD v15[2];

  v15[0] = result;
  v15[1] = a2;
  v6 = a6 - 2;
  if (a6 >= 2)
  {
    v9 = v6 >> 1;
    result = sub_10000DE88((uint64_t)v15, v6 >> 1);
    if (*a3 == a4)
      a4 = *(a3 - 1) + 4096;
    v12 = *(float *)(a4 - 4);
    v11 = (float *)(a4 - 4);
    v13 = v12;
    v14 = *v10;
    if (*v10 < v12)
    {
      do
      {
        *v11 = v14;
        v11 = v10;
        if (!v9)
          break;
        v9 = (unint64_t)(v9 - 1) >> 1;
        result = sub_10000DE88((uint64_t)v15, v9);
        v14 = *v10;
      }
      while (*v10 < v13);
      *v11 = v13;
    }
  }
  return result;
}

void sub_10000F084(CLKappaAlgBlock *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 160)) = a2[7];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 168)) = a2[8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 176)) = a2[9];
  sub_10000F218((_QWORD *)a1 + 46);
  sub_10000F138((_QWORD *)a1 + 40);
  sub_10000F218((_QWORD *)a1 + 34);
  sub_10000F138((_QWORD *)a1 + 28);
  v5 = (void *)*((_QWORD *)a1 + 25);
  if (v5)
  {
    *((_QWORD *)a1 + 26) = v5;
    operator delete(v5);
  }
  sub_10000F218((_QWORD *)a1 + 19);
  sub_10000F138((_QWORD *)a1 + 13);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, a2 + 1);
}

uint64_t sub_10000F138(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10000F1CC((uint64_t)a1);
}

uint64_t sub_10000F1CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_10000F218(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10000F1CC((uint64_t)a1);
}

void sub_10000F2AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100346C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10000F2BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100346C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10000F2EC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double sub_10000F2FC(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_10034CC58;
  *(_OWORD *)(a1 + 16) = xmmword_1002E56C0;
  *(_QWORD *)(a1 + 32) = 0x4100000040A00000;
  *(_DWORD *)(a1 + 40) = 0x40000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)&result = 0x8000000080000000;
  *(_QWORD *)(a1 + 72) = 0x8000000080000000;
  __asm { FMOV            V1.2S, #-1.0 }
  *(_QWORD *)(a1 + 84) = _D1;
  *(_DWORD *)(a1 + 92) = -1082130432;
  *(_BYTE *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 104) = _D1;
  *(_DWORD *)(a1 + 112) = -1082130432;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1082130432;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0x8000000080000000;
  *(_QWORD *)(a1 + 180) = _D1;
  *(_DWORD *)(a1 + 188) = -1082130432;
  *(_BYTE *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 200) = _D1;
  *(_DWORD *)(a1 + 208) = -1082130432;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = -1082130432;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = -1082130432;
  return result;
}

_QWORD *sub_10000F3D8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10000F450(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10000F434(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10000F450(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_10000D5F8();
  result = (char *)sub_10000D60C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t sub_10000F490(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  if (a3 != a2)
  {
    v3 = a3;
    v5 = (unint64_t *)result;
    do
    {
      v6 = v3 - v5;
      if (v6 < 2)
        break;
      if (v6 == 3)
        return sub_10000F718(v5, v5 + 1, v3 - 1);
      if (v6 == 2)
      {
        v33 = *(v3 - 1);
        v34 = *v5;
        if (v33 < *v5)
        {
          *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
        return (uint64_t)sub_10000F7A0(v5, v3);
      v7 = &v5[v6 >> 1];
      v8 = v3 - 1;
      result = sub_10000F718(v5, v7, v3 - 1);
      v9 = *v5;
      if (*v5 >= *v7)
      {
        v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            *v5 = *v10;
            *v10 = v9;
            result = (result + 1);
            goto LABEL_13;
          }
        }
        v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8)
          return result;
        while (1)
        {
          v27 = *v5;
          do
          {
            v29 = *v22++;
            v28 = v29;
          }
          while (v27 >= v29);
          v30 = v22 - 1;
          do
          {
            v32 = *--v8;
            v31 = v32;
          }
          while (v27 < v32);
          if (v30 >= v8)
            break;
          *v30 = v31;
          *v8 = v28;
        }
        v5 = v22 - 1;
        if (v30 > a2)
          return result;
      }
      else
      {
        v10 = v3 - 1;
LABEL_13:
        v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          v16 = v5 + 1;
        }
        else
        {
          v12 = v5 + 1;
          while (1)
          {
            v13 = *v7;
            do
            {
              v15 = *v12++;
              v14 = v15;
            }
            while (v15 < v13);
            v16 = v12 - 1;
            do
            {
              v18 = *--v10;
              v17 = v18;
            }
            while (v18 >= v13);
            if (v16 >= v10)
              break;
            *v16 = v17;
            *v10 = v14;
            result = (result + 1);
            if (v16 == v7)
              v7 = v10;
          }
        }
        if (v16 != v7)
        {
          v19 = *v16;
          if (*v7 < *v16)
          {
            *v16 = *v7;
            *v7 = v19;
            result = (result + 1);
          }
        }
        if (v16 == a2)
          return result;
        if (!(_DWORD)result)
        {
          if (v16 <= a2)
          {
            v24 = v16 + 1;
            while (v24 != v3)
            {
              v26 = *(v24 - 1);
              v25 = *v24++;
              if (v25 < v26)
                goto LABEL_29;
            }
          }
          else
          {
            while (v11 != v16)
            {
              v21 = *(v11 - 1);
              v20 = *v11++;
              if (v20 < v21)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          v5 = v16 + 1;
        else
          v3 = v16;
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t sub_10000F718(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *sub_10000F7A0(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  while (result != a2 - 1)
  {
    v2 = result++;
    if (v2 != a2 && result != a2)
    {
      v3 = *v2;
      v4 = result;
      v5 = v2;
      v6 = result;
      do
      {
        v8 = *v6++;
        v7 = v8;
        if (v8 < v3)
        {
          v3 = v7;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v2)
      {
        v9 = *v2;
        *v2 = *v5;
        *v5 = v9;
      }
    }
  }
  return result;
}

void sub_10000F814(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10000D60C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_10000FB28(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_10000FC3C((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10000D60C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10000D60C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10000FD58(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_10000FE6C((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10000FADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10000FB28(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_10000D60C(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_10000FC3C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_10000D60C(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_10000FD58(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_10000D60C(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_10000FE6C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_10000D60C(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_10000FF84(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10000D60C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_10000FB28(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_10000FC3C((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10000D60C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10000D60C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10000FD58(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_10000FE6C((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10001024C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100010298(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char **)(v5 + 8 * (v4 >> 10));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 10));
  }
  else
  {
    v8 = &(*v7)[4 * (v4 & 0x3FF)];
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 10));
    v11 = (char *)(*(_QWORD *)v10 + 4 * (v9 & 0x3FF));
  }
  sub_100010340((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_10001032C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10000F1CC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100010340(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 2) + ((a4 - (char *)a2) << 7) - ((a3 - *a2) >> 2);
  return sub_100010374(a1, a2, a3, v5);
}

_QWORD *sub_100010374(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _DWORD *v20;
  int v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 7) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1000104A8(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 10));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 4 * (v11 & 0x3FF);
  v24[0] = v8 + 8 * (v11 >> 10);
  v24[1] = v14;
  result = sub_10000DE88((uint64_t)v24, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = *a2;
        v20 = (_DWORD *)v14;
        do
        {
          v21 = *(_DWORD *)a3;
          a3 += 4;
          *v20++ = v21;
          if (a3 - v19 == 4096)
          {
            v22 = a2[1];
            ++a2;
            v19 = v22;
            a3 = v22;
          }
        }
        while (v20 != (_DWORD *)v18);
      }
      v17 += (v18 - v14) >> 2;
      if (v13 == result)
        break;
      v23 = v13[1];
      ++v13;
      v14 = v23;
    }
    while (v23 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_1000104A8(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x3FF) != 0)
    v6 = (v5 >> 10) + 1;
  else
    v6 = v5 >> 10;
  v7 = a1[4];
  if (v6 >= v7 >> 10)
    v8 = v7 >> 10;
  else
    v8 = v6;
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10000D60C((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10000FB28(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_10000FC3C((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 1023;
          else
            v64 = 1024;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 10);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10000D60C((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10000D60C((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 10;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10000FD58(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10000D60C((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_10000FE6C((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1000109BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100010A30(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

uint64_t sub_100010A8C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t sub_100010AE8(uint64_t result)
{
  *(_QWORD *)result = &off_100346C98;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_100010AFC(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_100346C98;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_100010B3C(PB::Base *a1)
{
  sub_100010AFC(a1);
  operator delete();
}

uint64_t sub_100010B60(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_100346C98;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(_QWORD *)(a2 + 8))
    operator new();
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) |= 1u;
    *(_DWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_100010C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_100010B60((uint64_t)v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v8;
    v8 = v4;
    sub_100010AFC((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_100010C8C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = v2;
  v3 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_100010CC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_100346C98;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *v4;
  *v4 = v5;
  if (v6)
    sub_100011294((uint64_t)v4, v6);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t sub_100010D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_100010CC0((uint64_t)v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v8;
    v8 = v4;
    sub_100010AFC((PB::Base *)v6);
  }
  return a1;
}

uint64_t sub_100010D84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "uploadReason", *(_DWORD *)(a1 + 16));
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format(this, "uuid");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_100010DE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v26;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_100011084(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
    result = PB::Writer::write(this, v4, 1);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 2u);
  return result;
}

BOOL sub_1000110D8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

unint64_t sub_1000111B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = sub_1000112DC((uint64_t)&v6, v2);
  else
    v3 = 0;
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    v4 = *(int *)(a1 + 16);
  else
    v4 = 0;
  return v4 ^ v3;
}

void *sub_100011208(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_100007138();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_100011294(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    operator delete();
  }
}

unint64_t sub_1000112DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_100011318((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_100011318(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_1000116C4(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_100011618(a2, a3);
  }
  else
  {
    return sub_100011520(a2, a3);
  }
}

unint64_t sub_100011520(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_100011618(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_1000116C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void sub_1000119A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100011A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100011BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_100011CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100011D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100011E3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000120C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1000120E8()
{
  if (qword_1003873E0 != -1)
    dispatch_once(&qword_1003873E0, &stru_100346DA8);
  return (id)qword_1003873E8;
}

void sub_100012488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100012720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100012A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  void *v23;
  void *v24;
  void *v25;
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v26);
  _Block_object_dispose(&a18, 8);

  objc_destroyWeak((id *)(v27 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_100012AF8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100012B08(uint64_t a1)
{

}

void sub_100012B10(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  id v23;

  v23 = a2;
  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (v8)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = v8;
    v12 = *(id *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v11;
  }
  else
  {
    v12 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_sync_enter(v12);
    if ((objc_msgSend(v12, "registered") & 1) == 0)
    {
      objc_msgSend(v12, "setRegistered:", 1);
      objc_msgSend(v12, "setSubjectID:", v23);
      objc_msgSend(v12, "setSubjectAuthorizationToken:", v7);
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "UUIDString"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultsSubjectIDKeyName"));
      objc_msgSend(v13, "setObject:forKey:", v14, v15);

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultsSubjectAuthTokenKeyName"));
      objc_msgSend(v16, "setObject:forKey:", v7, v17);

      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v19, "timeIntervalSinceReferenceDate");
      v21 = v20;
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultsRegistrationDateKeyName"));
      objc_msgSend(v18, "setInteger:forKey:", (uint64_t)v21, v22);

    }
    objc_sync_exit(v12);

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_100012CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_100012F78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100013454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, void *a11)
{
  void *v11;
  id *v12;
  void *v13;
  id *v14;
  uint64_t v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(v12);

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v15 - 112));
  _Unwind_Resume(a1);
}

id sub_1000135A8(uint64_t a1, void *a2, _QWORD *a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  double v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  void *v21;
  unsigned int v22;
  void *v23;
  void *v24;
  id v25;
  double v26;
  double v27;
  double v28;
  id v29;
  void *v30;
  double v31;
  void *v32;
  void *v33;
  void *v34;
  CSStudiesServerUploadMetadata *v35;
  uint64_t v36;
  void *v37;
  CSStudiesServerUploadMetadata *v38;
  double v39;
  void *v40;
  uint64_t v41;
  id v43;
  unsigned int v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  id obj;
  id WeakRetained;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[5];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  void (*v62)(uint64_t);
  id v63;
  NSErrorUserInfoKey v64;
  id v65;
  _BYTE v66[128];

  v50 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  if ((sub_10001A13C(*(void **)(a1 + 32), a3, CFSTR("oob")) & 1) == 0)
  {
    v8 = 0;
    goto LABEL_38;
  }
  v49 = v5;
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v50));
  v58 = 0;
  v59 = &v58;
  v60 = 0x3032000000;
  v61 = sub_100012AF8;
  v62 = sub_100012B08;
  v63 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "folderURL"));
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472;
  v57[2] = sub_100013E20;
  v57[3] = &unk_100346D10;
  v57[4] = &v58;
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v6, 0, 5, v57));

  v7 = (void *)v59[5];
  if (v7)
  {
    v8 = 0;
    *a3 = objc_retainAutorelease(v7);
    goto LABEL_37;
  }
  v43 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v47, a3);
  if ((objc_msgSend(v43, "containsValueForKey:", CFSTR("spooled")) & 1) == 0)
  {
    v8 = 0;
    goto LABEL_36;
  }
  objc_msgSend(v43, "decodeDoubleForKey:", CFSTR("enqueueTime"));
  v10 = v9;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(v11, "timeIntervalSinceReferenceDate");
  v13 = v12;

  v44 = objc_msgSend(v43, "decodeBoolForKey:", CFSTR("spooled"));
  v14 = objc_msgSend(v43, "decodeObjectOfClass:forKey:", objc_opt_class(CSStudiesServerUploadMetadata), CFSTR("metadata"));
  v48 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if ((v44 & 1) != 0)
  {
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "URLByDeletingPathExtension"));
  }
  else
  {
    v15 = objc_msgSend(v43, "decodeObjectOfClass:forKey:", objc_opt_class(NSString), CFSTR("unspooledFilePath"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v16));

  }
  objc_msgSend(v43, "finishDecoding");
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  obj = v46;
  v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v66, 16);
  if (!v17)
    goto LABEL_29;
  v18 = *(_QWORD *)v54;
  while (2)
  {
    for (i = 0; i != v17; i = (char *)i + 1)
    {
      if (*(_QWORD *)v54 != v18)
        objc_enumerationMutation(obj);
      v20 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)i);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "pathExtension"));
      v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("oob"));

      if (v22)
      {
        if (objc_msgSend(WeakRetained, "isFileOldEnoughForDeletion:", v20))
        {
          objc_msgSend(v49, "removeItemAtURL:error:", v20, 0);
          v23 = 0;
LABEL_26:

          continue;
        }
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v20));
        v25 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v24, a3);
        if ((objc_msgSend(v25, "containsValueForKey:", CFSTR("enqueueTime")) & 1) == 0)
        {
          objc_msgSend(v49, "removeItemAtURL:error:", v20, 0);
          objc_msgSend(v43, "finishDecoding");

          goto LABEL_34;
        }
        objc_msgSend(v25, "decodeDoubleForKey:", CFSTR("enqueueTime"));
        v27 = v26;
        objc_msgSend(WeakRetained, "oobTimeout");
        if (v27 < v10 + v28)
        {
          v29 = objc_msgSend(v25, "decodeObjectOfClass:forKey:", objc_opt_class(CSStudiesServerUploadOutOfBandMetadata), CFSTR("oobMetadata"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          objc_msgSend(v30, "lookBack");
          if (v10 >= v27 - v31)
          {
            v23 = v30;
            goto LABEL_24;
          }

        }
        v23 = 0;
LABEL_24:
        objc_msgSend(v25, "finishDecoding");

        if (v23)
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "keyValuePairs"));
          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v32));

          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "keyValuePairs"));
          objc_msgSend(v33, "addEntriesFromDictionary:", v34);

          v35 = [CSStudiesServerUploadMetadata alloc];
          v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "payloadType"));
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "channel"));
          v38 = -[CSStudiesServerUploadMetadata initWithPayloadType:channel:keyValuePairs:](v35, "initWithPayloadType:channel:keyValuePairs:", v36, v37, v33);

          LOBYTE(v36) = objc_msgSend(WeakRetained, "persistToDiskWithSpooledFile:fileURL:enqueueTime:metadata:theError:", v44, v45, v38, a3, v10);
          if ((v36 & 1) == 0)
          {
            v24 = v23;
            goto LABEL_34;
          }
        }
        goto LABEL_26;
      }
    }
    v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v66, 16);
    if (v17)
      continue;
    break;
  }
LABEL_29:

  objc_msgSend(WeakRetained, "oobTimeout");
  if (v13 <= v10 + v39)
  {
    v64 = NSLocalizedDescriptionKey;
    objc_msgSend(WeakRetained, "oobTimeout");
    obj = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("OOB Timeout has not passed for file %.0f %.0f %.0f"), *(_QWORD *)&v13, *(_QWORD *)&v10, v41));
    v65 = obj;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1));
    *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 35, v24));
LABEL_34:

    v8 = 0;
  }
  else
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "URLByDeletingPathExtension"));
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "URLByAppendingPathExtension:", CFSTR("metadata")));

    v8 = objc_msgSend(v49, "copyItemAtURL:toURL:error:", v50, obj, a3);
  }

LABEL_36:
LABEL_37:

  _Block_object_dispose(&v58, 8);
  v5 = v49;
LABEL_38:

  return v8;
}

void sub_100013C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  void *v42;

  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013E20(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
  return 0;
}

uint64_t sub_100013E48(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  id WeakRetained;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  void *v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  id v23;
  void *v24;
  void *v25;
  unsigned int v26;
  void *v27;
  unsigned int v28;
  void *v29;
  void *v30;
  unsigned int v31;
  void *v32;
  void *v33;
  unsigned int v34;
  int v35;
  void *v36;
  id v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  CSHealthWrapMessageConfiguration *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  CSHealthWrapMessage *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  NSObject *v54;
  void *v55;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  SecCertificateRef v61;
  CSHealthWrapMessageConfiguration *v62;
  char v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  char v74;
  uint8_t buf[4];
  void *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  unsigned int v80;
  __int16 v81;
  unsigned int v82;
  __int16 v83;
  void *v84;
  NSErrorUserInfoKey v85;
  uint64_t v86;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  if ((sub_10001A13C(*(void **)(a1 + 32), a3, CFSTR("scanner")) & 1) != 0)
  {
    v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v5));
    v71 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v72, a3);
    if ((objc_msgSend(v71, "containsValueForKey:", CFSTR("spooled")) & 1) == 0
      || !objc_msgSend(WeakRetained, "registerForUploadingWithError:", a3))
    {
      v20 = 0;
LABEL_56:

      goto LABEL_57;
    }
    if (objc_msgSend(v71, "containsValueForKey:", CFSTR("unspooledFilePath"))
      && (v7 = objc_msgSend(v71, "decodeObjectOfClass:forKey:", objc_opt_class(NSString), CFSTR("unspooledFilePath")), v8 = (void *)objc_claimAutoreleasedReturnValue(v7), (v9 = v8) != 0))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lastPathComponent"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "folderURL"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "URLByAppendingPathComponent:", v10));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "path"));
      v14 = objc_msgSend(v73, "copyItemAtPath:toPath:error:", v9, v13, a3);

      if ((v14 & 1) == 0)
      {

        v17 = 0;
        v20 = 0;
        v19 = v9;
        goto LABEL_55;
      }
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "folderURL"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "URLByAppendingPathComponent:", v10));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "path"));

      v18 = 0;
      v19 = v9;
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByDeletingPathExtension"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "path"));
      v19 = 0;
      v18 = 1;
    }

    if (!objc_msgSend(*(id *)(a1 + 32), "isFileOldEnoughForDeletion:", v5))
    {
      v74 = 0;
      v69 = v19;
      v21 = objc_msgSend(v73, "fileExistsAtPath:isDirectory:", v17, &v74);
      if (v74)
        v22 = 0;
      else
        v22 = v21;
      if ((v22 & 1) != 0)
      {
        v23 = objc_msgSend(v71, "decodeObjectOfClass:forKey:", objc_opt_class(CSStudiesServerUploadMetadata), CFSTR("metadata"));
        v70 = (void *)objc_claimAutoreleasedReturnValue(v23);
        objc_msgSend(v71, "finishDecoding");
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
        v63 = v18;
        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKey:", CFSTR("hasIBSOS")));

        if (v68)
        {
          v25 = v70;
          v26 = objc_msgSend(v68, "isEqualToString:", CFSTR("1"));
        }
        else
        {
          v26 = 0;
          v25 = v70;
        }
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "keyValuePairs"));
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKey:", CFSTR("hasOBSOS")));

        if (v67)
          v28 = objc_msgSend(v67, "isEqualToString:", CFSTR("1"));
        else
          v28 = 0;
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "allKeysForObject:", CFSTR("companionUploaded")));

        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKey:", CFSTR("recordingUUID")));

        v31 = objc_msgSend(v66, "containsObject:", v65);
        if (v31)
        {
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
          objc_msgSend(v32, "setValue:forKey:", &off_10036C288, CFSTR("uploadedOnCompanionNotification"));

        }
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKey:", CFSTR("shouldUploadIndependentlyOfSOS")));

        if (v64)
          v34 = objc_msgSend(v64, "isEqualToString:", CFSTR("1"));
        else
          v34 = 0;
        v35 = v26 | v28;
        if (((v35 | v34 | v31) & 1) != 0)
        {
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
          v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v36));

          objc_msgSend(v58, "removeObjectsForKeys:", &off_10036DC40);
          objc_msgSend(v70, "setKeyValuePairs:", v58);
          v37 = sub_1000120E8();
          v38 = objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
            *(_DWORD *)buf = 138544386;
            v76 = v17;
            v77 = 1026;
            v78 = v35;
            v79 = 1026;
            v80 = v34;
            v81 = 1026;
            v82 = v31;
            v83 = 2114;
            v84 = v39;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "File %{public}@ will be uploaded, SOS: %{public}d independent: %{public}d companion: %{public}d metadata: %{public}@", buf, 0x28u);

          }
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "configuration"));
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "certificate"));
          v61 = sub_1000188B4(v41);

          v42 = [CSHealthWrapMessageConfiguration alloc];
          v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "subjectID"));
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "configuration"));
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "studyUUID"));
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "channel"));
          v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "payloadType"));
          v62 = -[CSHealthWrapMessageConfiguration initWithCertificate:messageUUID:subjectUUID:studyUUID:channel:payloadType:](v42, "initWithCertificate:messageUUID:subjectUUID:studyUUID:channel:payloadType:", v61, v43, v59, v44, v45, v46);

          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
          -[CSHealthWrapMessageConfiguration setKeyValuePairs:](v62, "setKeyValuePairs:", v47);

          v48 = -[CSHealthWrapMessage initWithConfiguration:]([CSHealthWrapMessage alloc], "initWithConfiguration:", v62);
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByDeletingPathExtension"));
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "URLByAppendingPathExtension:", CFSTR("temp")));

          if (-[CSHealthWrapMessage startWithOutputFileURL:error:](v48, "startWithOutputFileURL:error:", v60, a3))
          {
            v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v17));
            if (-[CSHealthWrapMessage appendDataFromFileURL:error:](v48, "appendDataFromFileURL:error:", v50, a3)
              && -[CSHealthWrapMessage finalizeWithError:](v48, "finalizeWithError:", a3)
              && objc_msgSend(v73, "removeItemAtURL:error:", v50, a3)
              && ((v63 & 1) != 0 || objc_msgSend(v73, "removeItemAtPath:error:", v69, a3)))
            {
              v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByDeletingPathExtension"));
              v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "URLByAppendingPathExtension:", CFSTR("encrypted")));

              v20 = (uint64_t)objc_msgSend(v73, "moveItemAtURL:toURL:error:", v60, v52, a3);
            }
            else
            {
              v20 = 0;
            }

          }
          else
          {
            v20 = 0;
          }

        }
        else
        {
          v53 = sub_1000120E8();
          v54 = objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keyValuePairs"));
            *(_DWORD *)buf = 138544386;
            v76 = v17;
            v77 = 1026;
            v78 = 0;
            v79 = 1026;
            v80 = 0;
            v81 = 1026;
            v82 = 0;
            v83 = 2114;
            v84 = v55;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "File %{public}@ will NOT be uploaded, SOS: %{public}d independent: %{public}d companion: %{public}d metadata: %{public}@", buf, 0x28u);

          }
          v20 = (objc_msgSend(v73, "removeItemAtPath:error:", v17, a3) & 1) != 0
             && ((v63 & 1) != 0 || objc_msgSend(v73, "removeItemAtPath:error:", v69, a3));
        }

      }
      else
      {
        if (!a3)
        {
          v20 = 0;
          goto LABEL_55;
        }
        v85 = NSLocalizedDescriptionKey;
        v86 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("While scanning, can't find file to encrypt at: %@"), v17));
        v70 = (void *)v86;
        v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v86, &v85, 1));
        v20 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 2));
      }

      v19 = v69;
      goto LABEL_55;
    }
    objc_msgSend(v73, "removeItemAtPath:error:", v17, 0);
    v20 = 1;
LABEL_55:

    goto LABEL_56;
  }
  v20 = 0;
LABEL_57:

  return v20;
}

void sub_100014784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

uint64_t sub_100014A54(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  uint64_t v5;
  dispatch_semaphore_t v6;
  void *v7;
  NSObject *v8;
  void **v10;
  uint64_t v11;
  void (*v12)(uint64_t, void *, void *);
  void *v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = sub_100012AF8;
  v20 = sub_100012B08;
  v21 = 0;
  if ((objc_msgSend(WeakRetained, "isFileOldEnoughForDeletion:", v3) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = dispatch_semaphore_create(0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "submitter"));
    v10 = _NSConcreteStackBlock;
    v11 = 3221225472;
    v12 = sub_100014BEC;
    v13 = &unk_100346D60;
    v15 = &v16;
    v8 = v6;
    v14 = v8;
    objc_msgSend(v7, "submitFileWithURL:andCompletionHandler:", v3, &v10);

    dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
    v5 = (uint64_t)objc_msgSend((id)v17[5], "statusCodeIndicatesSucess", v10, v11, v12, v13);

  }
  _Block_object_dispose(&v16, 8);

  return v5;
}

void sub_100014B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_100014BEC(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;

  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  if (qword_1003873E0 != -1)
    dispatch_once(&qword_1003873E0, &stru_100346DA8);
  v8 = (id)qword_1003873E8;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "statusCode");
    v10 = 134218242;
    v11 = v9;
    v12 = 2112;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Studies Server ingest: %ld %@", (uint8_t *)&v10, 0x16u);
  }

}

void sub_100014D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100014EC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100015134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100015300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000153F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)CSStudiesServerUploader;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100015604(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "StudiesUploader");
  v2 = (void *)qword_1003873E8;
  qword_1003873E8 = (uint64_t)v1;

}

void sub_100015860(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  unsigned int v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  NSErrorUserInfoKey v28;
  void *v29;
  NSErrorUserInfoKey v30;
  void *v31;

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (a4)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v10 = v8;
    if (objc_msgSend(v10, "statusCodeIndicatesSucess")
      && (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "MIMEType")),
          v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("application/json")),
          v11,
          v12))
    {
      v27 = 0;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v7, 0, &v27));
      v14 = v27;
      if (v14)
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
      else
      {
        v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("subjectId")));
        if (v18
          && (v19 = (void *)v18,
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKey:", CFSTR("token"))),
              v20,
              v19,
              v20))
        {
          v21 = *(_QWORD *)(a1 + 32);
          v22 = objc_alloc((Class)NSUUID);
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("subjectId")));
          v24 = objc_msgSend(v22, "initWithUUIDString:", v23);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("token")));
          (*(void (**)(uint64_t, id, void *, _QWORD))(v21 + 16))(v21, v24, v25, 0);

        }
        else
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSCocoaErrorDomain, 1024, 0));
          (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

        }
      }

    }
    else
    {
      if ((objc_msgSend(v10, "statusCodeIndicatesSucess") & 1) != 0)
      {
        v28 = NSLocalizedDescriptionKey;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "MIMEType"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Response type: %@"), v15));
        v29 = v16;
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1));
        v14 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSURLErrorDomain, -1011, v17));

      }
      else
      {
        v30 = NSLocalizedDescriptionKey;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("HTTP return code: %ld"), objc_msgSend(v10, "statusCode")));
        v31 = v15;
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1));
        v14 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSURLErrorDomain, -1008, v16));
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }

  }
}

void sub_1000162D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000162F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = a3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i), "taskDescription", (_QWORD)v12));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "absoluteString"));
        v11 = objc_msgSend(v9, "isEqualToString:", v10);

        if (v11)
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v6)
        continue;
      break;
    }
  }
LABEL_11:

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000169A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "StudiesSubmitter");
  v2 = (void *)qword_100387408;
  qword_100387408 = (uint64_t)v1;

}

void sub_100016A70(id a1)
{
  CSKappaTap2RadarConfiguration *v1;
  void *v2;

  v1 = -[CSKappaTap2RadarConfiguration initWithAllowOnBattery:checkIntervalInSeconds:coolDownPeriodInSeconds:]([CSKappaTap2RadarConfiguration alloc], "initWithAllowOnBattery:checkIntervalInSeconds:coolDownPeriodInSeconds:", 0, 3600, 1800);
  v2 = (void *)qword_100389298;
  qword_100389298 = (uint64_t)v1;

}

void sub_100016B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100016B80(id a1)
{
  CSKappaTap2RadarConfiguration *v1;
  void *v2;

  v1 = -[CSKappaTap2RadarConfiguration initWithAllowOnBattery:checkIntervalInSeconds:coolDownPeriodInSeconds:]([CSKappaTap2RadarConfiguration alloc], "initWithAllowOnBattery:checkIntervalInSeconds:coolDownPeriodInSeconds:", 0, 3600, 1800);
  v2 = (void *)qword_1003892A0;
  qword_1003892A0 = (uint64_t)v1;

}

void sub_100016D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100016FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10001706C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  NSErrorUserInfoKey v19;
  const __CFString *v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  char *v24;

  v5 = a2;
  if ((sub_10001A13C(*(void **)(a1 + 32), (_QWORD *)a3, CFSTR("ttrAction")) & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v5));
    v7 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v6, a3);
    if (!objc_msgSend(v7, "containsValueForKey:", CFSTR("triggerUUID"))
      || (objc_msgSend(v7, "containsValueForKey:", CFSTR("timestamp")) & 1) == 0)
    {
      a3 = 0;
LABEL_20:

      goto LABEL_21;
    }
    v8 = objc_msgSend(v7, "decodeObjectOfClass:forKey:", objc_opt_class(NSString), CFSTR("triggerUUID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = objc_msgSend(v7, "decodeInt64ForKey:", CFSTR("timestamp"));
    v11 = (uint64_t)CFAbsoluteTimeGetCurrent() - (_QWORD)v10;
    if (v11 >= (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "coolDownPeriodInSeconds"))
    {
      v15 = objc_msgSend(*(id *)(a1 + 32), "showConfirmationWithError:", a3);
      v16 = v15;
      if ((_DWORD)v15 == 2
        || (_DWORD)v15 != 3
        && objc_msgSend(*(id *)(a1 + 32), "showPrivacyNotificationWithError:", a3)
        && objc_msgSend(*(id *)(a1 + 32), "radarWithResult:triggerUUID:error:", v16, v9, a3))
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
        objc_msgSend(v17, "removeItemAtURL:error:", v5, 0);

        a3 = 1;
LABEL_19:

        goto LABEL_20;
      }
    }
    else
    {
      if (qword_100387410 != -1)
        dispatch_once(&qword_100387410, &stru_100346EA0);
      v12 = (id)qword_100387418;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "coolDownPeriodInSeconds");
        *(_DWORD *)buf = 138412546;
        v22 = v9;
        v23 = 2048;
        v24 = &v13[-v11];
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Backing down from TTR %@ because we still need to cool down for %lld seconds", buf, 0x16u);
      }

      if (!a3)
        goto LABEL_19;
      v19 = NSLocalizedDescriptionKey;
      v20 = CFSTR("Cooldown still in place");
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
      *(_QWORD *)a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 35, v14));

    }
    a3 = 0;
    goto LABEL_19;
  }
  a3 = 0;
LABEL_21:

  return a3;
}

void sub_100017360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10001750C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100017824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100017A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100017BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100017D54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001804C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100018128(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "KappaTap2Radar");
  v2 = (void *)qword_100387418;
  qword_100387418 = (uint64_t)v1;

}

id sub_100018158(int *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  void *v5;
  _DWORD v7[3];
  char v8;
  uint8_t buf[8];
  uint64_t v10;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100346EC0);
  v2 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    *(_DWORD *)buf = 67174657;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending sos event for mode %{private}d", buf, 8u);
  }
  PB::Writer::Writer((PB::Writer *)buf);
  SafetySOSEventDetected::SafetySOSEventDetected((SafetySOSEventDetected *)v7);
  v4 = *a1;
  v8 |= 1u;
  v7[2] = v4;
  SafetySOSEventDetected::writeTo((uint64_t)v7, (PB::Writer *)buf);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v10, *(_QWORD *)buf - v10));
  SafetySOSEventDetected::~SafetySOSEventDetected((SafetySOSEventDetected *)v7);
  PB::Writer::~Writer((PB::Writer *)buf);
  return v5;
}

void sub_100018280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  SafetySOSEventDetected::~SafetySOSEventDetected((SafetySOSEventDetected *)&a9);
  PB::Writer::~Writer((PB::Writer *)&a11);
  _Unwind_Resume(a1);
}

void sub_1000182A8(void *a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  NSObject *v5;
  _DWORD v6[3];
  unsigned __int8 v7;
  uint8_t v8[32];
  uint8_t buf[4];
  int v10;

  v1 = objc_retainAutorelease(a1);
  PB::Reader::Reader((PB::Reader *)v8, (const unsigned __int8 *)objc_msgSend(v1, "bytes"), (unint64_t)objc_msgSend(v1, "length"));
  SafetySOSEventDetected::SafetySOSEventDetected((SafetySOSEventDetected *)v6);
  SafetySOSEventDetected::readFrom((SafetySOSEventDetected *)v6, (PB::Reader *)v8);
  v2 = v7 << 31 >> 31;
  v3 = v6[2];
  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100346EC0);
  v4 = v2 & v3;
  v5 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67174657;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "receiving sos event for mode %{private}d", buf, 8u);
  }
  operator new();
}

void sub_1000183F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  SafetySOSEventDetected::~SafetySOSEventDetected((SafetySOSEventDetected *)&a9);

  _Unwind_Resume(a1);
}

id sub_100018418(int8x16_t *a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int32 v6;
  __int32 v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;
  _BYTE v15[24];
  uint64_t v16;
  __int32 v17;
  int v18;
  __int32 v19;
  char v20;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100346EC0);
  v2 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1->u8[0];
    v4 = a1[1].i64[0];
    v5 = a1[2].i64[0];
    *(_DWORD *)buf = 67109632;
    v14 = v3;
    *(_WORD *)v15 = 2048;
    *(_QWORD *)&v15[2] = v4;
    *(_WORD *)&v15[10] = 2048;
    *(_QWORD *)&v15[12] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending safety remote sample [%d %llu] [%llu]", buf, 0x1Cu);
  }
  PB::Writer::Writer((PB::Writer *)&v11);
  sub_100004EDC((uint64_t)buf);
  v7 = a1->i32[1];
  v6 = a1->i32[2];
  v18 = a1->u8[0];
  v19 = v7;
  v17 = v6;
  v8 = a1[1].i64[0];
  v16 = a1[1].i64[1];
  *(_QWORD *)v15 = v8;
  v20 |= 0x7Fu;
  *(int8x16_t *)&v15[8] = vextq_s8(a1[2], a1[2], 8uLL);
  sub_100005AAC((uint64_t)buf, (PB::Writer *)&v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v12, v11 - v12));
  PB::Base::~Base((PB::Base *)buf);
  PB::Writer::~Writer((PB::Writer *)&v11);
  return v9;
}

void sub_10001857C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  PB::Base::~Base((PB::Base *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_1000185A4(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  int v4;
  int v5;
  uint64_t v6;
  int32x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  int8x16_t v14;
  unint64_t v15;
  int8x16_t v16;
  _BYTE v17[8];
  uint64_t v18;
  int8x16_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint8_t v22[32];
  uint8_t buf[4];
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;

  v3 = objc_retainAutorelease(a1);
  PB::Reader::Reader((PB::Reader *)v22, (const unsigned __int8 *)objc_msgSend(v3, "bytes"), (unint64_t)objc_msgSend(v3, "length"));
  sub_100004EDC((uint64_t)v17);
  if ((sub_1000052C4((uint64_t)v17, (PB::Reader *)v22) & 1) != 0)
  {
    v4 = (char)(4 * v21);
    v5 = v20;
    if ((v21 & 1) != 0)
      v6 = v18;
    else
      v6 = 0;
    v7 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)0x200000004));
    v8.i64[0] = v7.i32[0];
    v8.i64[1] = v7.i32[1];
    v9 = v8;
    v10 = vextq_s8(v19, v19, 8uLL);
    if (qword_100387380 != -1)
    {
      v14 = v10;
      v16 = v9;
      dispatch_once(&qword_100387380, &stru_100346EC0);
      v10 = v14;
      v9 = v16;
    }
    v11 = v5 & (v4 >> 7);
    v15 = vbicq_s8(v10, v9).u64[0];
    v12 = qword_100387388;
    if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109632;
      v24 = v11;
      v25 = 2048;
      v26 = v6;
      v27 = 2048;
      v28 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "receiving safety remote sample [%d %llu] [%llu]", buf, 0x1Cu);
    }
    operator new();
  }
  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100346EC0);
  v13 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "receiving invalid safety remote sample", buf, 2u);
  }
  *a2 = 0;
  PB::Base::~Base((PB::Base *)v17);

}

void sub_100018814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  PB::Base::~Base((PB::Base *)va);

  _Unwind_Resume(a1);
}

void sub_10001883C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Companion");
  v2 = (void *)qword_100387388;
  qword_100387388 = (uint64_t)v1;

}

id sub_10001886C(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = objc_msgSend(objc_alloc((Class)NSData), "initWithBase64EncodedString:options:", v1, 0);

  return v2;
}

SecCertificateRef sub_1000188B4(void *a1)
{
  id v1;
  const __CFData *v2;
  SecCertificateRef v3;

  v1 = sub_10001886C(a1);
  v2 = (const __CFData *)objc_claimAutoreleasedReturnValue(v1);
  v3 = SecCertificateCreateWithData(0, v2);

  return v3;
}

void sub_1000191D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[GPBMessage message](CSHWProtoKeyValue, "message"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[GPBMessage message](CSHWProtoValue, "message"));
  v8 = objc_opt_class(NSNull);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    objc_msgSend(v7, "setType:", 1);
  }
  else
  {
    v9 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0)
    {
      objc_msgSend(v7, "setType:", 3);
      objc_msgSend(v7, "setString:", v5);
    }
    else
    {
      v10 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v5, v10) & 1) != 0)
      {
        objc_msgSend(v7, "setType:", 4);
        objc_msgSend(v7, "setInteger:", objc_msgSend(v5, "integerValue"));
      }
      else
      {
        v11 = objc_opt_class(NSData);
        if ((objc_opt_isKindOfClass(v5, v11) & 1) != 0)
        {
          objc_msgSend(v7, "setType:", 2);
          objc_msgSend(v7, "setBytes:", v5);
        }
        else
        {
          +[NSException raise:format:](NSException, "raise:format:", NSInvalidArgumentException, CFSTR("Invalid value type for key: %@"), v12);
        }
      }
    }
  }
  objc_msgSend(v6, "setValue:", v7);
  objc_msgSend(v6, "setKey:", v12);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

}

void sub_100019604(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 72);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001965C;
  block[3] = &unk_100346F10;
  block[4] = v1;
  dispatch_sync(v2, block);
}

void sub_10001965C(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = *(id **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[1], "data"));
  objc_msgSend(v1, "_writeDataToCompressor:", v2);

}

id sub_100019C44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_writeDataToCompressor:", *(_QWORD *)(a1 + 40));
}

id sub_100019D30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_finalize");
}

void sub_100019FAC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  id obj;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  obj = 0;
  v4 = objc_msgSend(v3, "appendData:error:", v2, &obj);
  v5 = obj;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 82) = v4;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 88), v5);
}

void sub_10001A054(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  id obj;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  obj = 0;
  v3 = objc_msgSend(v2, "finalizeWithError:", &obj);
  v4 = obj;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 82) = v3;
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 88), v4);
}

uint64_t sub_10001A13C(void *a1, _QWORD *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v18;
  NSErrorUserInfoKey v19;
  void *v20;

  v5 = a1;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v18 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "folderURL"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "path"));
  v10 = objc_msgSend(v7, "fileExistsAtPath:isDirectory:", v9, &v18);
  if (v18)
    v11 = v10;
  else
    v11 = 0;

  if (a2)
    v12 = v11;
  else
    v12 = 1;
  if ((v12 & 1) == 0)
  {
    v19 = NSLocalizedDescriptionKey;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "folderURL"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "path"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("On %@ find spooler directory at: %@"), v6, v14));
    v20 = v15;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
    *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 2, v16));

  }
  return v11;
}

void sub_10001A2E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_10001A3E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001A554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_10001A8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38,char a39)
{

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10001A96C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001A97C(uint64_t a1)
{

}

uint64_t sub_10001A984(uint64_t a1, int a2, id obj)
{
  id v5;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
  v5 = obj;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;

  return 0;
}

void sub_10001A9D4(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t (**v8)(_QWORD, _QWORD, _QWORD);
  uint64_t v9;
  int v10;
  id v11;
  void *v12;
  uint64_t v13;
  unsigned __int8 v14;
  id v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  id v34;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "path"));
  LODWORD(v2) = objc_msgSend(v2, "fileExistsAtPath:", v3);

  if ((_DWORD)v2)
  {
    if (qword_100387440 != -1)
      dispatch_once(&qword_100387440, &stru_100346FD0);
    v4 = (id)qword_100387448;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "folderURL"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "extension"));
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v28 = v5;
      v29 = 2112;
      v30 = v6;
      v31 = 2112;
      v32 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Folder monitor for %@ %@ attempting action on %@", buf, 0x20u);

    }
    v8 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "action"));
    v9 = *(_QWORD *)(a1 + 40);
    v26 = 0;
    v10 = ((uint64_t (**)(_QWORD, uint64_t, id *))v8)[2](v8, v9, &v26);
    v11 = v26;

    if (v10)
    {
      v12 = *(void **)(a1 + 32);
      v13 = *(_QWORD *)(a1 + 40);
      v25 = v11;
      v14 = objc_msgSend(v12, "removeItemAtURL:error:", v13, &v25);
      v15 = v25;

      if ((v14 & 1) == 0)
      {
        if (qword_100387440 != -1)
          dispatch_once(&qword_100387440, &stru_100346FD0);
        v16 = qword_100387448;
        if (os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_ERROR))
        {
          v17 = *(void **)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          v28 = v17;
          v29 = 2112;
          v30 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Unable to remove file %@: %@", buf, 0x16u);
        }
      }
      if (qword_100387440 != -1)
        dispatch_once(&qword_100387440, &stru_100346FD0);
      v18 = (id)qword_100387448;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "folderURL"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "extension"));
        v21 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412802;
        v28 = v19;
        v29 = 2112;
        v30 = v20;
        v31 = 2112;
        v32 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Action for %@ %@ on %@ succeeded", buf, 0x20u);

      }
    }
    else
    {
      if (qword_100387440 != -1)
        dispatch_once(&qword_100387440, &stru_100346FD0);
      v18 = (id)qword_100387448;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "folderURL"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "extension"));
        v24 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138413058;
        v28 = v22;
        v29 = 2112;
        v30 = v23;
        v31 = 2112;
        v32 = v24;
        v33 = 2112;
        v34 = v11;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Action for %@ %@ on %@ failed: %@", buf, 0x2Au);

      }
      v15 = v11;
    }

  }
}

void sub_10001AD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001B058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10001B224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_10001B298(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  xpc_object_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  void *v17;
  id WeakRetained;
  unsigned int v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  _BOOL4 v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint8_t buf[4];
  _BYTE v36[28];

  v3 = a2;
  state = xpc_activity_get_state(v3);
  if (qword_100387440 != -1)
    dispatch_once(&qword_100387440, &stru_100346FD0);
  v5 = qword_100387448;
  if (os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)v36 = state;
    *(_WORD *)&v36[8] = 2048;
    *(_QWORD *)&v36[10] = v6;
    *(_WORD *)&v36[18] = 2048;
    *(_QWORD *)&v36[20] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "xpc activity state %ld begin %p %p", buf, 0x20u);
  }
  if (state == 2)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPower sharedInstance](CSPower, "sharedInstance"));
    objc_msgSend(v17, "powerlogActivity:state:", 4, CFAbsoluteTimeGetCurrent());

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v34 = 0;
    v19 = objc_msgSend(WeakRetained, "scan:", &v34);
    v20 = v34;

    if ((v19 & 1) == 0)
    {
      if (qword_100387440 != -1)
        dispatch_once(&qword_100387440, &stru_100346FD0);
      v21 = qword_100387448;
      if (os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_ERROR))
      {
        v22 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v36 = v22;
        *(_WORD *)&v36[8] = 2112;
        *(_QWORD *)&v36[10] = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Error scanning folder on activity %@: %@", buf, 0x16u);
      }
    }
    v23 = xpc_activity_set_state(v3, 5);
    if (qword_100387440 != -1)
      dispatch_once(&qword_100387440, &stru_100346FD0);
    v24 = qword_100387448;
    if (os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)v36 = v25;
      *(_WORD *)&v36[8] = 1024;
      *(_DWORD *)&v36[10] = v19;
      *(_WORD *)&v36[14] = 1024;
      *(_DWORD *)&v36[16] = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Ran %@ activity. Worked: %d set as done: %d", buf, 0x18u);
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[CSPower sharedInstance](CSPower, "sharedInstance"));
    objc_msgSend(v26, "powerlogActivity:state:", 4, CFAbsoluteTimeGetCurrent());

  }
  else
  {
    if (!state)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPower sharedInstance](CSPower, "sharedInstance"));
      objc_msgSend(v7, "powerlogActivity:state:", 3, CFAbsoluteTimeGetCurrent());

      v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
      v9 = objc_msgSend(v8, "integerForKey:", CFSTR("UploaderOverrideAllIntervals"));

      if (!v9)
      {
        if (qword_100387440 != -1)
          dispatch_once(&qword_100387440, &stru_100346FD0);
        v29 = qword_100387448;
        if (os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_INFO))
        {
          v30 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v36 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Checked in for folder scanning activity: %@", buf, 0xCu);
        }
LABEL_41:
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[CSPower sharedInstance](CSPower, "sharedInstance"));
        objc_msgSend(v33, "powerlogActivity:state:", 3, CFAbsoluteTimeGetCurrent());

        if (qword_100387440 != -1)
          dispatch_once(&qword_100387440, &stru_100346FD0);
        v28 = qword_100387448;
        if (os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)v36 = 0;
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      v10 = xpc_activity_copy_criteria(v3);
      v11 = v10;
      if (v10)
      {
        xpc_dictionary_set_uint64(v10, XPC_ACTIVITY_INTERVAL, (uint64_t)v9);
        xpc_activity_set_criteria(v3, v11);
        if (qword_100387440 != -1)
          dispatch_once(&qword_100387440, &stru_100346FD0);
        v12 = qword_100387448;
        if (!os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_INFO))
          goto LABEL_40;
        v13 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)v36 = v9;
        *(_WORD *)&v36[8] = 2112;
        *(_QWORD *)&v36[10] = v13;
        v14 = "Checked in with overriden period of %llu seconds for folder scanning activity: %@";
        v15 = v12;
        v16 = 22;
      }
      else
      {
        if (qword_100387440 != -1)
          dispatch_once(&qword_100387440, &stru_100346FD0);
        v31 = qword_100387448;
        if (!os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_INFO))
          goto LABEL_40;
        v32 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v36 = v32;
        v14 = "Checked in with NULL criteria for folder scanning activity: %@";
        v15 = v31;
        v16 = 12;
      }
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v14, buf, v16);
LABEL_40:

      goto LABEL_41;
    }
    if (qword_100387440 != -1)
      dispatch_once(&qword_100387440, &stru_100346FD0);
    v27 = qword_100387448;
    if (os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v36 = 0;
      *(_WORD *)&v36[4] = 2082;
      *(_QWORD *)&v36[6] = "";
      *(_WORD *)&v36[14] = 2050;
      *(_QWORD *)&v36[16] = state;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skip folder scanning activity\", \"Current State\":%{public}ld}", buf, 0x1Cu);
    }
  }
  if (qword_100387440 != -1)
    dispatch_once(&qword_100387440, &stru_100346FD0);
  v28 = qword_100387448;
  if (os_log_type_enabled((os_log_t)qword_100387448, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v36 = state;
LABEL_45:
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "xpc activity state %ld end", buf, 0xCu);
  }
LABEL_46:

}

void sub_10001B8AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001B9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10001BA8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "FolderMonitor");
  v2 = (void *)qword_100387448;
  qword_100387448 = (uint64_t)v1;

}

void sub_10001BB98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10001BCEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001BDE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10001BE40(id a1)
{
  CSStudiesServerConfiguration *v1;
  CSStudiesServerConfiguration *v2;
  void *v3;
  id v4;

  v1 = [CSStudiesServerConfiguration alloc];
  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("28ed3541-9da1-411d-81ae-eb620f6b3a8d"));
  v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", CFSTR("https://ingest.apple-studies.com"), CFSTR("MIIDjTCCAnWgAwIBAgIEFN2TTjANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzODI4WhcNMTgwNDE4MTgzODI4WjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvR2JtAkPdG/BldPRT7EupiMo4ZvLOzztoDeul2awbM9fBU8kc3nlapOi2vooX62cyPJKsqCas465gy4U3JJBMVg/MjshfUIDBb1LQzGtvfYkirdpWOqJ7riQ0Wbe6LLRFD0963JNF1lyMHkf7OqZegIh8c+xGGgd2ynkdivaKOr2d7Qf67y2UarQc+qIgkljsaOugfBr3jsUcO0tE0j9LGOvTZZEZd3ykXUEChIkwGW+QWWd3Indit4ArSMGDjkrltGX88FBWgbPYe8dgjWcE2GkEEWhJFwIiTCHQZFHlizSzY5vyG0mcbgdl/HjbyswUn3kw8CvmSOuzi7YNolypAgMBAAGjITAfMB0GA1UdDgQWBBRaESD5M6MGBsOr4aMdm42SVZwycDANBgkqhkiG9w0BAQsFAAOCAQEAVg1mV0Zf9/o+cAbwvcQgdGIbeUghVdDybkVkeew/3dpdRN/S9k9BTusNL4gNKbRRIjJiESq68rP++8BP7xhIO3EsICFAo/fp87af1EncYIjwh9V6P77V+wnvU8Ehgj9tGj5GhU/o1tmCLmBsJi+uUz8vd7p8S/CbH0wUpe0uov4d79R1DGYrM+fansMd9JnmZfLeGU1sx2q+hEfAZyuSRJEf4+GbgEuthq0aBNC6VeXVmmNqd36at3F9O4DzJiJOZiEHXNYOXiyJYSBEvgKdd23G9tR1Pdqw//0sKv/C4b3FQWowN7uZzJ3SJTrolzpUGlTSy5PPeXsmsL7TKM27uA=="));
  v3 = (void *)qword_1003892B8;
  qword_1003892B8 = (uint64_t)v2;

}

void sub_10001BEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001BF18(id a1)
{
  CSStudiesServerConfiguration *v1;
  CSStudiesServerConfiguration *v2;
  void *v3;
  id v4;

  v1 = [CSStudiesServerConfiguration alloc];
  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("219833ee-013d-42e5-ae9b-5bc7f73eadeb"));
  v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", CFSTR("https://ingest.apple-studies.com"), CFSTR("MIIDjTCCAnWgAwIBAgIEFN2TTjANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzODI4WhcNMTgwNDE4MTgzODI4WjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvR2JtAkPdG/BldPRT7EupiMo4ZvLOzztoDeul2awbM9fBU8kc3nlapOi2vooX62cyPJKsqCas465gy4U3JJBMVg/MjshfUIDBb1LQzGtvfYkirdpWOqJ7riQ0Wbe6LLRFD0963JNF1lyMHkf7OqZegIh8c+xGGgd2ynkdivaKOr2d7Qf67y2UarQc+qIgkljsaOugfBr3jsUcO0tE0j9LGOvTZZEZd3ykXUEChIkwGW+QWWd3Indit4ArSMGDjkrltGX88FBWgbPYe8dgjWcE2GkEEWhJFwIiTCHQZFHlizSzY5vyG0mcbgdl/HjbyswUn3kw8CvmSOuzi7YNolypAgMBAAGjITAfMB0GA1UdDgQWBBRaESD5M6MGBsOr4aMdm42SVZwycDANBgkqhkiG9w0BAQsFAAOCAQEAVg1mV0Zf9/o+cAbwvcQgdGIbeUghVdDybkVkeew/3dpdRN/S9k9BTusNL4gNKbRRIjJiESq68rP++8BP7xhIO3EsICFAo/fp87af1EncYIjwh9V6P77V+wnvU8Ehgj9tGj5GhU/o1tmCLmBsJi+uUz8vd7p8S/CbH0wUpe0uov4d79R1DGYrM+fansMd9JnmZfLeGU1sx2q+hEfAZyuSRJEf4+GbgEuthq0aBNC6VeXVmmNqd36at3F9O4DzJiJOZiEHXNYOXiyJYSBEvgKdd23G9tR1Pdqw//0sKv/C4b3FQWowN7uZzJ3SJTrolzpUGlTSy5PPeXsmsL7TKM27uA=="));
  v3 = (void *)qword_1003892C0;
  qword_1003892C0 = (uint64_t)v2;

}

void sub_10001BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001BFF0(id a1)
{
  CSStudiesServerConfiguration *v1;
  CSStudiesServerConfiguration *v2;
  void *v3;
  id v4;

  v1 = [CSStudiesServerConfiguration alloc];
  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("33f4a2c5-8ff4-4a20-b5bb-6120df9ef511"));
  v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", CFSTR("https://ingest.stg.apple-studies.com"), CFSTR("MIIDjTCCAnWgAwIBAgIEDZOX8jANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzNzIxWhcNMTgwNDE4MTgzNzIxWjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3PXGIYi84LTNzcOvbKPly9+gwYjg2D5DJnMstVFrAkjfNp+6fE8PtBQPfCxYBJGnVWAMNAKHjsTHJtpq92gW+l/WG1/SGnG251LN13ugBgSI7oaf8aF3iAJ4dyFnb5xScZoFKjwXtoR2HLFgxpCfG6KYWABSvubaupxIwmqqRMNfQb6xWHhu0y1MJG6U0UX+9PghEw5xFTtIoEpkIiuOEWU6LwdhW5cnrnVFn49f9j02LHkBq/eLbjm7lXHIGwYolhNN/RurwpF2MbAaAw4pF6b//WswZUSepbnFtlfCEo3HjraNe1nVB2S+f8pysdc67Lfr8vhn6rjK2f0nQ11oZAgMBAAGjITAfMB0GA1UdDgQWBBQ/j4HEfBnPOz4ZGC5Add8PGVw6oDANBgkqhkiG9w0BAQsFAAOCAQEAEoMDoP4ls0RxjZJesTYPv+7XHqcREDlBup4vJLUSOrOU41jKaDUH2dygzdntpaSh8C3hoY/BYwWIxNPKlETikn0bNAz0Q+TX1rNPc67ZGyJwGisIsIYdcXjrL1oc6dp45KdPN1KQY2VrW3XCXbswoT+65noI13WIXpzky+UugnbQ3fGfOw/ku6NYcZ/VfVPl9nr8JdEWY9Jlbo1Ze8J7XGrDhn2llzWDfBMZOuETJG5ZxIJum2xnIblb9I0gxxMH9BGujxCw02xoSdAbrS2kQEhDCfyE4/vOMloTnjUV95DYezSfJ08CX/Uc0nm1hCB+5CjfATWNwaYddzWbzeiWag=="));
  v3 = (void *)qword_1003892C8;
  qword_1003892C8 = (uint64_t)v2;

}

void sub_10001C074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001C0C8(id a1)
{
  CSStudiesServerConfiguration *v1;
  CSStudiesServerConfiguration *v2;
  void *v3;
  id v4;

  v1 = [CSStudiesServerConfiguration alloc];
  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("b4e6b326-3293-449f-a764-b30090b310fa"));
  v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", CFSTR("https://ingest.stg.apple-studies.com"), CFSTR("MIIDjTCCAnWgAwIBAgIEDZOX8jANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzNzIxWhcNMTgwNDE4MTgzNzIxWjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3PXGIYi84LTNzcOvbKPly9+gwYjg2D5DJnMstVFrAkjfNp+6fE8PtBQPfCxYBJGnVWAMNAKHjsTHJtpq92gW+l/WG1/SGnG251LN13ugBgSI7oaf8aF3iAJ4dyFnb5xScZoFKjwXtoR2HLFgxpCfG6KYWABSvubaupxIwmqqRMNfQb6xWHhu0y1MJG6U0UX+9PghEw5xFTtIoEpkIiuOEWU6LwdhW5cnrnVFn49f9j02LHkBq/eLbjm7lXHIGwYolhNN/RurwpF2MbAaAw4pF6b//WswZUSepbnFtlfCEo3HjraNe1nVB2S+f8pysdc67Lfr8vhn6rjK2f0nQ11oZAgMBAAGjITAfMB0GA1UdDgQWBBQ/j4HEfBnPOz4ZGC5Add8PGVw6oDANBgkqhkiG9w0BAQsFAAOCAQEAEoMDoP4ls0RxjZJesTYPv+7XHqcREDlBup4vJLUSOrOU41jKaDUH2dygzdntpaSh8C3hoY/BYwWIxNPKlETikn0bNAz0Q+TX1rNPc67ZGyJwGisIsIYdcXjrL1oc6dp45KdPN1KQY2VrW3XCXbswoT+65noI13WIXpzky+UugnbQ3fGfOw/ku6NYcZ/VfVPl9nr8JdEWY9Jlbo1Ze8J7XGrDhn2llzWDfBMZOuETJG5ZxIJum2xnIblb9I0gxxMH9BGujxCw02xoSdAbrS2kQEhDCfyE4/vOMloTnjUV95DYezSfJ08CX/Uc0nm1hCB+5CjfATWNwaYddzWbzeiWag=="));
  v3 = (void *)qword_1003892D0;
  qword_1003892D0 = (uint64_t)v2;

}

void sub_10001C14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001C1A0(id a1)
{
  CSStudiesServerConfiguration *v1;
  CSStudiesServerConfiguration *v2;
  void *v3;
  id v4;

  v1 = [CSStudiesServerConfiguration alloc];
  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("33f4a2c5-8ff4-4a20-b5bb-6120df9ef511"));
  v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", CFSTR("https://ingest.stg.apple-studies.com"), CFSTR("MIIDjTCCAnWgAwIBAgIEDZOX8jANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzNzIxWhcNMTgwNDE4MTgzNzIxWjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3PXGIYi84LTNzcOvbKPly9+gwYjg2D5DJnMstVFrAkjfNp+6fE8PtBQPfCxYBJGnVWAMNAKHjsTHJtpq92gW+l/WG1/SGnG251LN13ugBgSI7oaf8aF3iAJ4dyFnb5xScZoFKjwXtoR2HLFgxpCfG6KYWABSvubaupxIwmqqRMNfQb6xWHhu0y1MJG6U0UX+9PghEw5xFTtIoEpkIiuOEWU6LwdhW5cnrnVFn49f9j02LHkBq/eLbjm7lXHIGwYolhNN/RurwpF2MbAaAw4pF6b//WswZUSepbnFtlfCEo3HjraNe1nVB2S+f8pysdc67Lfr8vhn6rjK2f0nQ11oZAgMBAAGjITAfMB0GA1UdDgQWBBQ/j4HEfBnPOz4ZGC5Add8PGVw6oDANBgkqhkiG9w0BAQsFAAOCAQEAEoMDoP4ls0RxjZJesTYPv+7XHqcREDlBup4vJLUSOrOU41jKaDUH2dygzdntpaSh8C3hoY/BYwWIxNPKlETikn0bNAz0Q+TX1rNPc67ZGyJwGisIsIYdcXjrL1oc6dp45KdPN1KQY2VrW3XCXbswoT+65noI13WIXpzky+UugnbQ3fGfOw/ku6NYcZ/VfVPl9nr8JdEWY9Jlbo1Ze8J7XGrDhn2llzWDfBMZOuETJG5ZxIJum2xnIblb9I0gxxMH9BGujxCw02xoSdAbrS2kQEhDCfyE4/vOMloTnjUV95DYezSfJ08CX/Uc0nm1hCB+5CjfATWNwaYddzWbzeiWag=="));
  v3 = (void *)qword_1003892D8;
  qword_1003892D8 = (uint64_t)v2;

}

void sub_10001C224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001C278(id a1)
{
  CSStudiesServerConfiguration *v1;
  CSStudiesServerConfiguration *v2;
  void *v3;
  id v4;

  v1 = [CSStudiesServerConfiguration alloc];
  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("fc2a58e3-5fef-42b8-89fc-a2e0bfe517b0"));
  v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", CFSTR("https://ingest.stg.apple-studies.com"), CFSTR("MIIDjTCCAnWgAwIBAgIEDZOX8jANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzNzIxWhcNMTgwNDE4MTgzNzIxWjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3PXGIYi84LTNzcOvbKPly9+gwYjg2D5DJnMstVFrAkjfNp+6fE8PtBQPfCxYBJGnVWAMNAKHjsTHJtpq92gW+l/WG1/SGnG251LN13ugBgSI7oaf8aF3iAJ4dyFnb5xScZoFKjwXtoR2HLFgxpCfG6KYWABSvubaupxIwmqqRMNfQb6xWHhu0y1MJG6U0UX+9PghEw5xFTtIoEpkIiuOEWU6LwdhW5cnrnVFn49f9j02LHkBq/eLbjm7lXHIGwYolhNN/RurwpF2MbAaAw4pF6b//WswZUSepbnFtlfCEo3HjraNe1nVB2S+f8pysdc67Lfr8vhn6rjK2f0nQ11oZAgMBAAGjITAfMB0GA1UdDgQWBBQ/j4HEfBnPOz4ZGC5Add8PGVw6oDANBgkqhkiG9w0BAQsFAAOCAQEAEoMDoP4ls0RxjZJesTYPv+7XHqcREDlBup4vJLUSOrOU41jKaDUH2dygzdntpaSh8C3hoY/BYwWIxNPKlETikn0bNAz0Q+TX1rNPc67ZGyJwGisIsIYdcXjrL1oc6dp45KdPN1KQY2VrW3XCXbswoT+65noI13WIXpzky+UugnbQ3fGfOw/ku6NYcZ/VfVPl9nr8JdEWY9Jlbo1Ze8J7XGrDhn2llzWDfBMZOuETJG5ZxIJum2xnIblb9I0gxxMH9BGujxCw02xoSdAbrS2kQEhDCfyE4/vOMloTnjUV95DYezSfJ08CX/Uc0nm1hCB+5CjfATWNwaYddzWbzeiWag=="));
  v3 = (void *)qword_1003892E0;
  qword_1003892E0 = (uint64_t)v2;

}

void sub_10001C2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001C350(id a1)
{
  CSStudiesServerConfiguration *v1;
  CSStudiesServerConfiguration *v2;
  void *v3;
  id v4;

  v1 = [CSStudiesServerConfiguration alloc];
  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("75ff2079-4a69-4622-af4d-5e561a6f7323"));
  v2 = -[CSStudiesServerConfiguration initWithServer:certificate:study:andAuthorizationID:](v1, "initWithServer:certificate:study:andAuthorizationID:", CFSTR("https://ingest.apple-studies.com"), CFSTR("MIIDjTCCAnWgAwIBAgIEFN2TTjANBgkqhkiG9w0BAQsFADB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwHhcNMTcwNDE4MTgzODI4WhcNMTgwNDE4MTgzODI4WjB3MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCUN1cGVydGlubzEXMBUGA1UEChMOQXBwbGUgSW50ZXJuYWwxDzANBgNVBAsTBkhlYWx0aDEdMBsGA1UEAxMUY29tLmFwcGxlLkhlYWx0aERhdGEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvR2JtAkPdG/BldPRT7EupiMo4ZvLOzztoDeul2awbM9fBU8kc3nlapOi2vooX62cyPJKsqCas465gy4U3JJBMVg/MjshfUIDBb1LQzGtvfYkirdpWOqJ7riQ0Wbe6LLRFD0963JNF1lyMHkf7OqZegIh8c+xGGgd2ynkdivaKOr2d7Qf67y2UarQc+qIgkljsaOugfBr3jsUcO0tE0j9LGOvTZZEZd3ykXUEChIkwGW+QWWd3Indit4ArSMGDjkrltGX88FBWgbPYe8dgjWcE2GkEEWhJFwIiTCHQZFHlizSzY5vyG0mcbgdl/HjbyswUn3kw8CvmSOuzi7YNolypAgMBAAGjITAfMB0GA1UdDgQWBBRaESD5M6MGBsOr4aMdm42SVZwycDANBgkqhkiG9w0BAQsFAAOCAQEAVg1mV0Zf9/o+cAbwvcQgdGIbeUghVdDybkVkeew/3dpdRN/S9k9BTusNL4gNKbRRIjJiESq68rP++8BP7xhIO3EsICFAo/fp87af1EncYIjwh9V6P77V+wnvU8Ehgj9tGj5GhU/o1tmCLmBsJi+uUz8vd7p8S/CbH0wUpe0uov4d79R1DGYrM+fansMd9JnmZfLeGU1sx2q+hEfAZyuSRJEf4+GbgEuthq0aBNC6VeXVmmNqd36at3F9O4DzJiJOZiEHXNYOXiyJYSBEvgKdd23G9tR1Pdqw//0sKv/C4b3FQWowN7uZzJ3SJTrolzpUGlTSy5PPeXsmsL7TKM27uA=="));
  v3 = (void *)qword_1003892E8;
  qword_1003892E8 = (uint64_t)v2;

}

void sub_10001C3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10001CE54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001D2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10001D624(uint64_t a1)
{
  NSObject *v2;
  int v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD v38[2];
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  int v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  int v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  int v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  int v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100347C88);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 80);
    v4 = *(float *)(a1 + 96);
    v5 = *(float *)(a1 + 100);
    v6 = *(_QWORD *)(a1 + 104);
    v7 = *(float *)(a1 + 208);
    v8 = *(float *)(a1 + 216);
    v9 = *(float *)(a1 + 228);
    v10 = *(float *)(a1 + 236);
    v11 = *(float *)(a1 + 248);
    v12 = *(float *)(a1 + 256);
    v13 = *(float *)(a1 + 268);
    v14 = *(float *)(a1 + 276);
    v15 = *(float *)(a1 + 288);
    v16 = *(float *)(a1 + 296);
    v17 = *(float *)(a1 + 308);
    v18 = *(float *)(a1 + 316);
    v19 = *(_QWORD *)(a1 + 120);
    v20 = *(float *)(a1 + 16);
    v21 = *(float *)(a1 + 20);
    v22 = *(float *)(a1 + 24);
    v23 = *(_DWORD *)(a1 + 28);
    v24 = *(float *)(a1 + 32);
    v25 = *(float *)(a1 + 36);
    v26 = *(_DWORD *)(a1 + 40);
    v27 = *(float *)(a1 + 44);
    v28 = *(float *)(a1 + 48);
    v29 = *(_DWORD *)(a1 + 52);
    v30 = *(float *)(a1 + 56);
    v31 = *(float *)(a1 + 60);
    v32 = *(float *)(a1 + 64);
    v33 = *(float *)(a1 + 68);
    v34 = *(float *)(a1 + 72);
    v35 = *(_DWORD *)(a1 + 76);
    v36 = *(_QWORD *)(a1 + 512);
    v37 = *(_QWORD *)(a1 + 520);
    v38[0] = 67248896;
    v38[1] = v3;
    v39 = 2050;
    v40 = v4;
    v41 = 2050;
    v42 = v5;
    v43 = 2050;
    v44 = v6;
    v45 = 2050;
    v46 = v7;
    v47 = 2050;
    v48 = v8;
    v49 = 2050;
    v50 = v9;
    v51 = 2050;
    v52 = v10;
    v53 = 2050;
    v54 = v11;
    v55 = 2050;
    v56 = v12;
    v57 = 2050;
    v58 = v13;
    v59 = 2050;
    v60 = v14;
    v61 = 2050;
    v62 = v15;
    v63 = 2050;
    v64 = v16;
    v65 = 2050;
    v66 = v17;
    v67 = 2050;
    v68 = v18;
    v69 = 2050;
    v70 = v19;
    v71 = 2050;
    v72 = v20;
    v73 = 2050;
    v74 = v21;
    v75 = 2050;
    v76 = v22;
    v77 = 1026;
    v78 = v23;
    v79 = 2050;
    v80 = v24;
    v81 = 2050;
    v82 = v25;
    v83 = 1026;
    v84 = v26;
    v85 = 2050;
    v86 = v27;
    v87 = 2050;
    v88 = v28;
    v89 = 1026;
    v90 = v29;
    v91 = 2050;
    v92 = v30;
    v93 = 2050;
    v94 = v31;
    v95 = 2050;
    v96 = v32;
    v97 = 2050;
    v98 = v33;
    v99 = 2050;
    v100 = v34;
    v101 = 1026;
    v102 = v35;
    v103 = 2050;
    v104 = v36;
    v105 = 2050;
    v106 = v37;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[PU] summary,%{public}d,A,%{public}f,B,%{public}f,C,%{public}llu,D,%{public}f,E,%{public}f,F,%{public}f,G,%{public}f,H,%{public}f,I,%{public}f,J,%{public}f,K,%{public}f,L,%{public}f,M,%{public}f,N,%{public}f,O,%{public}f,P,%{public}llu,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}d,config-5,%{public}f,config-6,%{public}f,config-7,%{public}d,config-8,%{public}f,config-9,%{public}f,config-10,%{public}d,config-11,%{public}f,config-12,%{public}f,config-13,%{public}f,config-14,%{public}f,config-15,%{public}f,config-16,%{public}d,debug-1,%{public}llu,debug-2,%{public}llu", (uint8_t *)v38, 0x14Cu);
  }
}

void sub_10001D8FC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 96)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringValue"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v4, CFSTR("pu-A"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 100)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringValue"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v6, CFSTR("pu-B"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 104)));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v7, CFSTR("pu-C"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 88)));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v8, CFSTR("pu-D"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 12)));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v9, CFSTR("pu-E"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(float *)(a1 + 16)));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringValue"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, CFSTR("pu-config-1"));

}

void sub_10001DA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10001DAC8(uint64_t result, int a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  if (a2)
  {
    *(_BYTE *)(result + 80) = 1;
    *(_BYTE *)(result + 8) = 1;
  }
  if (*(float *)(result + 96) < a5)
  {
    *(float *)(result + 96) = a5;
    *(float *)(result + 100) = a6;
    *(_QWORD *)(result + 88) = a3;
    *(_QWORD *)(result + 104) = a4;
  }
  return result;
}

uint64_t sub_10001DAF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  *(_BYTE *)(a1 + 80) = 0;
  v1 = a1 + 80;
  *(_OWORD *)(v1 + 68) = 0u;
  result = v1 + 68;
  *(_BYTE *)(result - 140) = 0;
  *(_DWORD *)(result - 136) = 0;
  *(_QWORD *)(result - 60) = 0;
  *(_OWORD *)(result - 52) = 0u;
  *(_OWORD *)(result - 36) = xmmword_1002E5890;
  *(_DWORD *)(result - 20) = 0;
  *(_QWORD *)(result - 12) = 0;
  *(_BYTE *)(result - 4) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 336) = 0u;
  *(_QWORD *)(result + 352) = 0;
  *(_DWORD *)(result + 380) = 0;
  *(_OWORD *)(result + 364) = 0u;
  return result;
}

CLKappaAlgBlock *sub_10001DB68(CLKappaAlgBlock *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  CLKappaAlgBlock::CLKappaAlgBlock(a1, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_DWORD *)(v5 + 160) = 1;
  *(_BYTE *)(v5 + 164) = 0;
  *(_BYTE *)(v5 + 214) = 0;
  *(_QWORD *)(v5 + 216) = 0x2800000000;
  *(_QWORD *)(v5 + 744) = 0;
  *(_QWORD *)(v5 + 704) = 0;
  *(_QWORD *)(v5 + 709) = 0;
  *(_OWORD *)(v5 + 720) = 0u;
  *(_DWORD *)(v5 + 736) = 0;
  v7 = operator new(0x230uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_100347CB8;
  sub_100020FE4((uint64_t)(v7 + 3));
  *(_QWORD *)&v23 = v7 + 3;
  *((_QWORD *)&v23 + 1) = v7;
  sub_1000081AC((uint64_t)a1 + 8, &v23);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  v21 = *((_QWORD *)a1 + 1);
  v22 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10001DDDC((uint64_t)&v21, &v23);
  sub_1000081AC(v6, &v23);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaAlgBlock *))(*(_QWORD *)a1 + 304))(a1);
  return a1;
}

void sub_10001DD6C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = (void *)*((_QWORD *)v1 + 17);
  if (v5)
  {
    *((_QWORD *)v1 + 18) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 14);
  if (v6)
  {
    *((_QWORD *)v1 + 15) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 11);
  if (v7)
  {
    *((_QWORD *)v1 + 12) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)v1 + 8);
  if (v8)
  {
    *((_QWORD *)v1 + 9) = v8;
    operator delete(v8);
  }
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10001DDDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

CLKappaAlgBlock *sub_10001DE48(CLKappaAlgBlock *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  *(_QWORD *)a1 = off_100345D50;
  *((_QWORD *)a1 + 94) = off_100345DF8;
  *((_QWORD *)a1 + 95) = off_100345EC0;
  *((_QWORD *)a1 + 96) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(a1, (uint64_t *)off_100347680);
  *(_QWORD *)v2 = off_100347180;
  *(_QWORD *)(v2 + 752) = off_100347420;
  *(_QWORD *)(v2 + 760) = off_100347558;
  *(_QWORD *)(v2 + 768) = off_100347630;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_DWORD *)(v2 + 160) = 1;
  *(_BYTE *)(v2 + 164) = 0;
  *(_BYTE *)(v2 + 214) = 0;
  *(_QWORD *)(v2 + 216) = 0x2800000000;
  *(_QWORD *)(v2 + 744) = 0;
  *(_QWORD *)(v2 + 704) = 0;
  *(_QWORD *)(v2 + 709) = 0;
  *(_DWORD *)(v2 + 736) = 0;
  *(_OWORD *)(v2 + 720) = 0u;
  v4 = operator new(0x230uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_100347CB8;
  sub_100020FE4((uint64_t)(v4 + 3));
  *(_QWORD *)&v20 = v4 + 3;
  *((_QWORD *)&v20 + 1) = v4;
  sub_1000081AC((uint64_t)a1 + 8, &v20);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  v18 = *((_QWORD *)a1 + 1);
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10001DDDC((uint64_t)&v18, &v20);
  sub_1000081AC(v3, &v20);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaAlgBlock *))(*(_QWORD *)a1 + 304))(a1);
  return a1;
}

void sub_10001E050(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = (void *)*((_QWORD *)v1 + 17);
  if (v4)
  {
    *((_QWORD *)v1 + 18) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)v1 + 14);
  if (v5)
  {
    *((_QWORD *)v1 + 15) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 11);
  if (v6)
  {
    *((_QWORD *)v1 + 12) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)v1 + 8);
  if (v7)
  {
    *((_QWORD *)v1 + 9) = v7;
    operator delete(v7);
  }
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100347680);
  _Unwind_Resume(a1);
}

void sub_10001E0C4(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  int v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  int v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  int v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  int v38;
  void *v39;
  void *v40;
  double v41;
  double v42;
  double v43;
  int v44;
  void *v45;
  double v46;
  double v47;
  int v48;
  void *v49;
  double v50;
  double v51;
  double v52;
  int v53;
  void *v54;
  double v55;
  double v56;
  double v57;
  int v58;
  void *v59;
  double v60;
  double v61;
  double v62;
  int v63;
  void *v64;
  id v65;

  v65 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgPulseConfig", *(unsigned __int8 *)(a1 + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1110756557;
  LODWORD(v4) = 0;
  LODWORD(v5) = 4.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v65, v4, v3, v5);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 0;
  LODWORD(v9) = 16.0;
  LODWORD(v10) = 1.5;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v65, v8, v9, v10);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 20) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 0;
  LODWORD(v14) = 10.0;
  LODWORD(v15) = 1033476506;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v65, v13, v14, v15);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 28) = objc_msgSend(v17, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v65, 1, 10, 2);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v19) = 0;
  LODWORD(v20) = 16.0;
  LODWORD(v21) = 1.5;
  objc_msgSend(v18, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v65, v19, v20, v21);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32) = v22;

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v24) = 0;
  LODWORD(v25) = 10.0;
  LODWORD(v26) = 1033476506;
  objc_msgSend(v23, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v65, v24, v25, v26);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = v27;

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40) = objc_msgSend(v28, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v65, 1, 10, 2);

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v30) = 0;
  LODWORD(v31) = 16.0;
  LODWORD(v32) = 2.0;
  objc_msgSend(v29, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 7, v65, v30, v31, v32);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 44) = v33;

  v34 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v35) = 0;
  LODWORD(v36) = 10.0;
  LODWORD(v37) = 1033476506;
  objc_msgSend(v34, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 8, v65, v35, v36, v37);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 48) = v38;

  v39 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 52) = objc_msgSend(v39, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 9, v65, 1, 10, 2);

  v40 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v41) = 1065353300;
  LODWORD(v42) = 0;
  LODWORD(v43) = 0.25;
  objc_msgSend(v40, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 10, v65, v42, v41, v43);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = v44;

  v45 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v46) = 2.0;
  LODWORD(v47) = 24.0;
  objc_msgSend(v45, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 11, v65, v46, 8589936700.0, v47);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60) = v48;

  v49 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v50) = 1132462080;
  LODWORD(v51) = 24.0;
  LODWORD(v52) = 1132462080;
  objc_msgSend(v49, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 12, v65, v51, v50, v52);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 64) = v53;

  v54 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v55) = 786163455;
  LODWORD(v56) = 0;
  LODWORD(v57) = 16.0;
  objc_msgSend(v54, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 13, v65, v56, v57, v55);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 68) = v58;

  v59 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v60) = 0;
  LODWORD(v61) = 10.0;
  LODWORD(v62) = 1033476506;
  objc_msgSend(v59, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 14, v65, v60, v61, v62);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 72) = v63;

  v64 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 76) = objc_msgSend(v64, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 15, v65, 1, 10, 2);

}

void sub_10001E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double sub_10001E4D0(uint64_t a1, float *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  double result;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  int v56;

  v3 = *(_OWORD **)(a1 + 32);
  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 3);
  v3[3] = *((_OWORD *)a2 + 2);
  v3[4] = v6;
  v3[1] = v4;
  v3[2] = v5;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100347C88);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v9 = *a2;
    v10 = a2[1];
    v11 = a2[2];
    v12 = *((_DWORD *)a2 + 3);
    v13 = a2[4];
    v14 = a2[5];
    v15 = *((_DWORD *)a2 + 6);
    v16 = a2[7];
    v17 = a2[8];
    v18 = *((_DWORD *)a2 + 9);
    v19 = a2[10];
    v20 = a2[11];
    v21 = a2[12];
    v22 = a2[13];
    v23 = a2[14];
    v24 = *((_DWORD *)a2 + 15);
    v25 = 134221824;
    v26 = v9;
    v27 = 2048;
    v28 = v10;
    v29 = 2048;
    v30 = v11;
    v31 = 1024;
    v32 = v12;
    v33 = 2048;
    v34 = v13;
    v35 = 2048;
    v36 = v14;
    v37 = 1024;
    v38 = v15;
    v39 = 2048;
    v40 = v16;
    v41 = 2048;
    v42 = v17;
    v43 = 1024;
    v44 = v18;
    v45 = 2048;
    v46 = v19;
    v47 = 2048;
    v48 = v20;
    v49 = 2048;
    v50 = v21;
    v51 = 2048;
    v52 = v22;
    v53 = 2048;
    v54 = v23;
    v55 = 1024;
    v56 = v24;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[PU] config-1,%f,config-2,%f,config-3,%f,config-4,%d,config-5,%f,config-6,%f,config-7,%d,config-8,%f,config-9,%f,config-10,%d,config-11,%f,config-12,%f,config-13,%f,config-14,%f,config-15,%f,config-16,%d", (uint8_t *)&v25, 0x92u);
  }
  return result;
}

uint64_t sub_10001E688(uint64_t result, float32x2_t *a2)
{
  if (*(_BYTE *)(result + 214))
    return sub_10001E69C((float32x2_t *)result, a2, (float32x4_t *)(result + 164));
  return result;
}

uint64_t sub_10001E69C(float32x2_t *a1, float32x2_t *a2, float32x4_t *a3)
{
  float v5;
  int v6;
  float v7;
  float32x2_t v8;
  float32x2_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  float32x2_t *v18;
  char *v19;
  float32x2_t v20;
  _DWORD *v21;
  _DWORD *v22;
  float32x2_t v23;
  __int32 v24;
  unint64_t v25;
  float32x2_t *v26;
  float32x2_t *v27;
  float32x2_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  float32x2_t *v34;
  char *v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  __int32 v40;
  __int16 v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  float v46;
  float v47;
  unint64_t v48;
  float32x2_t v49;
  int v50;
  _DWORD v51[2];
  float v52;
  float32x2_t v53;
  float v54;
  float32x4_t v55;

  v55 = *a3;
  CMOQuaternion::normalize(&v55, v55);
  v5 = a2[2].f32[0];
  v53 = a2[1];
  v54 = v5;
  CMOQuaternion::rotateFrameInPlace((CMOQuaternion *)&v55, (uint64_t)&v53);
  v51[0] = CMOQuaternion::gravity((CMOQuaternion *)&v55);
  v51[1] = v6;
  v52 = v7;
  CMOQuaternion::rotateFrameInPlace((CMOQuaternion *)&v55, (uint64_t)v51);
  v54 = v54 - v52;
  v8 = a1[10];
  v9 = (float32x2_t *)a1[9];
  if ((unint64_t)v9 >= *(_QWORD *)&v8)
  {
    v12 = a1[8];
    v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(_QWORD *)&v12) >> 2);
    v14 = v13 + 1;
    if (v13 + 1 > 0x1555555555555555)
      sub_10000D5F8();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v8 - *(_QWORD *)&v12) >> 2);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0xAAAAAAAAAAAAAAALL)
      v16 = 0x1555555555555555;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)sub_100020CA0((uint64_t)&a1[10], v16);
    else
      v17 = 0;
    v18 = (float32x2_t *)&v17[12 * v13];
    v19 = &v17[12 * v16];
    v20 = v53;
    v18[1].f32[0] = v54;
    *v18 = v20;
    v11 = (float32x2_t)((char *)&v18[1] + 4);
    v22 = (_DWORD *)a1[8];
    v21 = (_DWORD *)a1[9];
    if (v21 != v22)
    {
      do
      {
        v23 = *(float32x2_t *)(v21 - 3);
        v21 -= 3;
        v24 = v21[2];
        *(float32x2_t *)((char *)v18 - 12) = v23;
        v18 = (float32x2_t *)((char *)v18 - 12);
        v18[1].i32[0] = v24;
      }
      while (v21 != v22);
      v21 = (_DWORD *)a1[8];
    }
    a1[8] = (float32x2_t)v18;
    a1[9] = v11;
    a1[10] = (float32x2_t)v19;
    if (v21)
      operator delete(v21);
  }
  else
  {
    v10 = v53;
    v9[1].f32[0] = v54;
    *v9 = v10;
    v11 = (float32x2_t)((char *)&v9[1] + 4);
  }
  v25 = (unint64_t)a1[16];
  a1[9] = v11;
  v26 = (float32x2_t *)a1[15];
  if ((unint64_t)v26 >= v25)
  {
    v28 = (float32x2_t *)a1[14];
    v29 = v26 - v28;
    if ((unint64_t)(v29 + 1) >> 61)
      sub_10000D5F8();
    v30 = v25 - (_QWORD)v28;
    v31 = (uint64_t)(v25 - (_QWORD)v28) >> 2;
    if (v31 <= v29 + 1)
      v31 = v29 + 1;
    if (v30 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
    {
      v33 = (char *)sub_10000D60C((uint64_t)&a1[16], v32);
      v28 = (float32x2_t *)a1[14];
      v26 = (float32x2_t *)a1[15];
    }
    else
    {
      v33 = 0;
    }
    v34 = (float32x2_t *)&v33[8 * v29];
    v35 = &v33[8 * v32];
    *v34 = *a2;
    v27 = v34 + 1;
    while (v26 != v28)
    {
      v36 = v26[-1];
      --v26;
      v34[-1] = v36;
      --v34;
    }
    a1[14] = (float32x2_t)v34;
    a1[15] = (float32x2_t)v27;
    a1[16] = (float32x2_t)v35;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v26 = *a2;
    v27 = v26 + 1;
  }
  a1[15] = (float32x2_t)v27;
  v37 = (float32x2_t)vdup_n_s32(0x411CE80Au);
  v38 = vadd_f32(vmul_f32(vmul_f32(v53, (float32x2_t)vdup_n_s32(0x3AA3D70Au)), v37), a1[88]);
  v49 = v38;
  if (a1[27].i32[1] == a1[27].u16[1])
  {
    v39.f32[0] = sub_10001EB88((unsigned __int16 *)&a1[27]);
    v39.i32[1] = v40;
    v38 = vadd_f32(v38, vmul_f32(vmul_f32(v39, (float32x2_t)vdup_n_s32(0xBAA3D70A)), v37));
    v49 = v38;
    v41 = a1[27].i16[1];
    if (v41)
    {
      v42 = a1[27].u16[0] + 1;
      v43 = a1[27].u32[1];
      if (v42 < v43)
        LOWORD(v43) = 0;
      a1[27].i16[0] = v42 - v43;
      a1[27].i16[1] = v41 - 1;
    }
  }
  result = (uint64_t)sub_100021200((unsigned __int16 *)&a1[27], (uint64_t)&v53);
  v45 = 0;
  v50 = 0;
  a1[88] = v38;
  v46 = 0.0;
  a1[89].i32[0] = 0;
  do
  {
    v46 = v46 + (float)(v49.f32[v45] * v49.f32[v45]);
    ++v45;
  }
  while (v45 != 3);
  v47 = sqrtf(v46);
  a1[91].f32[1] = v47;
  if (v47 > a1[91].f32[0])
    a1[91].f32[0] = v47;
  if (!a1[89].i8[4] && a1[27].i32[1] == a1[27].u16[1])
    a1[89].i8[4] = 1;
  v48 = (unint64_t)*a2;
  if (*a2 != *(_QWORD *)&a1[90])
  {
    result = sub_10001EBE8((uint64_t)a1, v48);
    v48 = (unint64_t)*a2;
  }
  a1[93] = (float32x2_t)v48;
  return result;
}

uint64_t sub_10001EA10(_QWORD *a1, float32x2_t *a2)
{
  uint64_t result;

  result = (uint64_t)a1 + *(_QWORD *)(*a1 - 64);
  if (*(_BYTE *)(result + 214))
    return sub_10001E69C((float32x2_t *)result, a2, (float32x4_t *)(result + 164));
  return result;
}

uint64_t sub_10001EA30(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(result + 24);
  if (v2 == 2)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x10) != 0)
      return result;
    goto LABEL_6;
  }
  if (v2 != 1 || (*(_BYTE *)(a2 + 1) & 0x10) == 0)
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(result + 32) + 112) = *(_QWORD *)(a2 + 8);
  return result;
}

_QWORD *sub_10001EA68(_QWORD *result, uint64_t a2)
{
  char *v2;
  int v3;

  v2 = (char *)result + *(_QWORD *)(*result - 88);
  v3 = v2[24];
  if (v3 == 2)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x10) != 0)
      return result;
    goto LABEL_6;
  }
  if (v3 != 1 || (*(_BYTE *)(a2 + 1) & 0x10) == 0)
LABEL_6:
    *(_QWORD *)(*((_QWORD *)v2 + 4) + 112) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t sub_10001EAB0(uint64_t result, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int16 v5;

  v2 = *(unsigned __int8 *)(result + 214);
  v4 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v5 = *(_WORD *)(a2 + 48);
  *(_OWORD *)(result + 164) = *(_OWORD *)a2;
  *(_WORD *)(result + 212) = v5;
  *(_OWORD *)(result + 196) = v3;
  *(_OWORD *)(result + 180) = v4;
  if (!v2)
    *(_BYTE *)(result + 214) = 1;
  return result;
}

_QWORD *sub_10001EAE4(_QWORD *result, uint64_t a2)
{
  char *v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int16 v6;

  v2 = (char *)result + *(_QWORD *)(*result - 96);
  v3 = v2[214];
  v5 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v6 = *(_WORD *)(a2 + 48);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)a2;
  *((_WORD *)v2 + 106) = v6;
  *(_OWORD *)(v2 + 196) = v4;
  *(_OWORD *)(v2 + 180) = v5;
  if (!v3)
    v2[214] = 1;
  return result;
}

uint64_t sub_10001EB24(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1002D3210();
    __assert_rtn("operator[]", "CMVector.h", 277, "false");
  }
  return a1 + 4 * a2;
}

float sub_10001EB88(unsigned __int16 *a1)
{
  if (!a1[1])
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1002D328C();
    __assert_rtn("front", "CMVectorBuffer.h", 139, "false");
  }
  return *(float *)sub_1000210D8(a1, 0);
}

uint64_t sub_10001EBE8(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  int v13;

  if (*(_BYTE *)(result + 716))
  {
    v3 = result;
    v4 = *(float *)(result + 732);
    v5 = *(_QWORD *)(result + 32);
    if (v4 < (float)(*(float *)(v5 + 16) * 0.49033))
    {
      v8 = *(float *)(result + 736);
    }
    else
    {
      if (*(_WORD *)(result + 218))
      {
        v6 = 0;
        do
        {
          result = sub_10001ED34((unsigned __int16 *)(v3 + 216), v6);
          v7 = 0;
          v12 = *(_QWORD *)result;
          v13 = 0;
          v8 = *(float *)(v3 + 736);
          v9 = 0.0;
          do
          {
            v9 = v9 + (float)(*(float *)((char *)&v12 + v7) * *(float *)((char *)&v12 + v7));
            v7 += 4;
          }
          while (v7 != 12);
          if (v8 <= sqrtf(v9))
          {
            v10 = 0;
            v11 = 0.0;
            do
            {
              v11 = v11 + (float)(*(float *)((char *)&v12 + v10) * *(float *)((char *)&v12 + v10));
              v10 += 4;
            }
            while (v10 != 12);
            v8 = sqrtf(v11);
          }
          *(float *)(v3 + 736) = v8;
          ++v6;
        }
        while (v6 < *(unsigned __int16 *)(v3 + 218));
        v5 = *(_QWORD *)(v3 + 32);
      }
      else
      {
        v8 = *(float *)(result + 736);
      }
      *(_BYTE *)(v5 + 80) = 1;
      *(_BYTE *)(v5 + 8) = 1;
    }
    if (*(float *)(v5 + 96) < (float)(v4 / 0.49033))
    {
      *(float *)(v5 + 96) = v4 / 0.49033;
      *(float *)(v5 + 100) = v8;
      *(_QWORD *)(v5 + 88) = a2;
      *(_QWORD *)(v5 + 104) = (unint64_t)((double)a2 + -50000.0007);
    }
  }
  return result;
}

uint64_t sub_10001ED34(unsigned __int16 *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1002D3314(a2);
    __assert_rtn("operator[]", "CMVectorBuffer.h", 39, "false");
  }
  return sub_1000210D8(a1, a2);
}

void sub_10001ED9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  BOOL v5;
  void *v6;
  void *v7;
  uint64_t v8;
  float v9;
  float v10;
  unsigned int v11;
  float *v12;
  float v13;
  float v14;
  unsigned int v15;
  float *v16;
  float v17;
  float v18;
  unsigned int v19;
  float *v20;
  float v21;
  float v22;
  unsigned int v23;
  __int128 *v24;
  float *v25;
  float v26;
  float v27;
  unsigned int v28;
  __int128 *v29;
  float *v30;
  float v31;
  float v32;
  unsigned int v33;
  __int128 *v34;
  uint64_t v35;
  float *v36;
  float v37;
  float v38;
  unsigned int v39;
  float *v40;
  float v41;
  float v42;
  unsigned int v43;
  float *v44;
  float v45;
  float v46;
  unsigned int v47;
  float *v48;
  float v49;
  float v50;
  unsigned int v51;
  float *v52;
  float v53;
  float v54;
  unsigned int v55;
  float *v56;
  float v57;
  float v58;
  unsigned int v59;
  int32x2_t v60;
  int32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  __int128 v64;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  __int128 v73;
  int v74;
  __int128 v75;
  id v76;
  __int128 v77;
  int v78;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v3 + 120) = a2;
  *(_DWORD *)(v3 + 128) = *(_DWORD *)(v3 + 88) - *(_DWORD *)(v3 + 112);
  v76 = *(id *)(*(_QWORD *)(a1 + 48) + 24);
  v4 = (char *)objc_msgSend(v76, "count");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 144) = v4 != 0;
  if (v4)
    v5 = *(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 64);
  else
    v5 = 1;
  if (!v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "objectAtIndex:", 0));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v76, "objectAtIndex:", v4 - 1));
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 512) = objc_msgSend(v6, "timestamp");
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520) = objc_msgSend(v7, "timestamp");
    sub_10001F394((_QWORD *)a1);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(float *)(v8 + 20);
    v10 = *(float *)(v8 + 24);
    v11 = *(_DWORD *)(v8 + 28);
    objc_msgSend(v6, "timestamp");
    sub_10001FC54(a1, 0, v11, (uint64_t)&v77, v9, v10);
    *(_OWORD *)(v8 + 208) = v77;
    *(_DWORD *)(v8 + 224) = v78;
    v12 = *(float **)(a1 + 32);
    v13 = v12[8];
    v14 = v12[9];
    v15 = *((_DWORD *)v12 + 10);
    objc_msgSend(v6, "timestamp");
    sub_10001FC54(a1, 1, v15, (uint64_t)&v77, v13, v14);
    *(_OWORD *)(v8 + 228) = v77;
    *(_DWORD *)(v8 + 244) = v78;
    v16 = *(float **)(a1 + 32);
    v17 = v16[11];
    v18 = v16[12];
    v19 = *((_DWORD *)v16 + 13);
    objc_msgSend(v6, "timestamp");
    sub_10001FC54(a1, 2, v19, (uint64_t)&v77, v17, v18);
    *(_OWORD *)(v8 + 248) = v77;
    *(_DWORD *)(v8 + 264) = v78;
    v20 = *(float **)(a1 + 32);
    v21 = v20[17];
    v22 = v20[18];
    v23 = *((_DWORD *)v20 + 19);
    objc_msgSend(v6, "timestamp");
    sub_10001FC54(a1, 0, v23, (uint64_t)&v77, v21, v22);
    v24 = (__int128 *)(v8 + 388);
    *(_DWORD *)(v8 + 404) = v78;
    *(_OWORD *)(v8 + 388) = v77;
    v25 = *(float **)(a1 + 32);
    v26 = v25[17];
    v27 = v25[18];
    v28 = *((_DWORD *)v25 + 19);
    objc_msgSend(v6, "timestamp");
    sub_10001FC54(a1, 1, v28, (uint64_t)&v77, v26, v27);
    v29 = (__int128 *)(v8 + 408);
    *(_DWORD *)(v8 + 424) = v78;
    *(_OWORD *)(v8 + 408) = v77;
    v30 = *(float **)(a1 + 32);
    v31 = v30[17];
    v32 = v30[18];
    v33 = *((_DWORD *)v30 + 19);
    objc_msgSend(v6, "timestamp");
    sub_10001FC54(a1, 2, v33, (uint64_t)&v77, v31, v32);
    v34 = (__int128 *)(v8 + 428);
    *(_DWORD *)(v8 + 444) = v78;
    *(_OWORD *)(v8 + 428) = v77;
    v35 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
    *(_QWORD *)(v8 + 136) = 0xAAAAAAAAAAAAAAABLL * (v35 >> 2);
    if (v35)
    {
      v36 = *(float **)(a1 + 32);
      v37 = v36[5];
      v38 = v36[6];
      v39 = *((_DWORD *)v36 + 7);
      objc_msgSend(v6, "timestamp");
      sub_10001FFFC((_QWORD *)a1, 0, v39, (uint64_t)&v77, v37, v38);
      *(_OWORD *)(v8 + 268) = v77;
      *(_DWORD *)(v8 + 284) = v78;
      v40 = *(float **)(a1 + 32);
      v41 = v40[8];
      v42 = v40[9];
      v43 = *((_DWORD *)v40 + 10);
      objc_msgSend(v6, "timestamp");
      sub_10001FFFC((_QWORD *)a1, 1, v43, (uint64_t)&v77, v41, v42);
      *(_OWORD *)(v8 + 288) = v77;
      *(_DWORD *)(v8 + 304) = v78;
      v44 = *(float **)(a1 + 32);
      v45 = v44[11];
      v46 = v44[12];
      v47 = *((_DWORD *)v44 + 13);
      objc_msgSend(v6, "timestamp");
      sub_10001FFFC((_QWORD *)a1, 2, v47, (uint64_t)&v77, v45, v46);
      *(_DWORD *)(v8 + 324) = v78;
      *(_OWORD *)(v8 + 308) = v77;
      v48 = *(float **)(a1 + 32);
      v49 = v48[17];
      v50 = v48[18];
      v51 = *((_DWORD *)v48 + 19);
      objc_msgSend(v6, "timestamp");
      sub_10001FFFC((_QWORD *)a1, 0, v51, (uint64_t)&v77, v49, v50);
      *(_OWORD *)(v8 + 448) = v77;
      *(_DWORD *)(v8 + 464) = v78;
      v52 = *(float **)(a1 + 32);
      v53 = v52[17];
      v54 = v52[18];
      v55 = *((_DWORD *)v52 + 19);
      objc_msgSend(v6, "timestamp");
      sub_10001FFFC((_QWORD *)a1, 1, v55, (uint64_t)&v77, v53, v54);
      *(_DWORD *)(v8 + 484) = v78;
      *(_OWORD *)(v8 + 468) = v77;
      v56 = *(float **)(a1 + 32);
      v57 = v56[17];
      v58 = v56[18];
      v59 = *((_DWORD *)v56 + 19);
      objc_msgSend(v6, "timestamp");
      sub_10001FFFC((_QWORD *)a1, 2, v59, (uint64_t)&v77, v57, v58);
      *(_DWORD *)(v8 + 504) = v78;
      v60.i32[1] = DWORD1(v77);
      *(_OWORD *)(v8 + 488) = v77;
      v60.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56);
      *(float *)v61.i32 = 1.0 - *(float *)v60.i32;
      v62 = *(float32x4_t *)(v8 + 284);
      v63 = *(float32x4_t *)(v8 + 224);
      *(float32x4_t *)(v8 + 148) = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v8 + 268), *(float *)v60.i32), *(float32x4_t *)(v8 + 208), 1.0 - *(float *)v60.i32);
      *(float32x4_t *)(v8 + 164) = vmlaq_n_f32(vmulq_n_f32(v62, *(float *)v60.i32), v63, 1.0 - *(float *)v60.i32);
      *(float32x4_t *)(v8 + 180) = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v8 + 300), *(float *)v60.i32), *(float32x4_t *)(v8 + 240), 1.0 - *(float *)v60.i32);
      *(float32x2_t *)(v8 + 196) = vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v60, 0), *(float32x2_t *)(v8 + 316)), *(float32x2_t *)(v8 + 256), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v61, 0));
      *(float *)(v8 + 204) = (float)(*(float *)v60.i32 * *(float *)(v8 + 324))
                           + (float)((float)(1.0 - *(float *)v60.i32) * *(float *)(v8 + 264));
      *(float *)(v8 + 328) = (float)(*(float *)v60.i32 * *(float *)(v8 + 448))
                           + (float)((float)(1.0 - *(float *)v60.i32) * *(float *)(v8 + 388));
      *(float *)(v8 + 348) = (float)(*(float *)v60.i32 * *(float *)(v8 + 468))
                           + (float)((float)(1.0 - *(float *)v60.i32) * *(float *)(v8 + 408));
      *(float *)(v8 + 368) = (float)(*(float *)v60.i32 * *(float *)(v8 + 488))
                           + (float)((float)(1.0 - *(float *)v60.i32) * *(float *)(v8 + 428));
    }
    else
    {
      v64 = *(_OWORD *)(v8 + 208);
      *(_OWORD *)(v8 + 148) = v64;
      v65 = *(_DWORD *)(v8 + 224);
      *(_DWORD *)(v8 + 164) = v65;
      v66 = *(_OWORD *)(v8 + 228);
      *(_OWORD *)(v8 + 168) = v66;
      v67 = *(_DWORD *)(v8 + 244);
      *(_DWORD *)(v8 + 184) = v67;
      v68 = *(_OWORD *)(v8 + 248);
      *(_OWORD *)(v8 + 188) = v68;
      v69 = *(_DWORD *)(v8 + 264);
      *(_DWORD *)(v8 + 204) = v69;
      *(_OWORD *)(v8 + 268) = v64;
      *(_DWORD *)(v8 + 284) = v65;
      *(_OWORD *)(v8 + 288) = v66;
      *(_DWORD *)(v8 + 304) = v67;
      *(_DWORD *)(v8 + 324) = v69;
      *(_OWORD *)(v8 + 308) = v68;
      v70 = *(_DWORD *)(v8 + 404);
      *(_DWORD *)(v8 + 344) = v70;
      v71 = *v24;
      *(_OWORD *)(v8 + 328) = *v24;
      v72 = *(_DWORD *)(v8 + 424);
      *(_DWORD *)(v8 + 364) = v72;
      v73 = *v29;
      *(_OWORD *)(v8 + 348) = *v29;
      v74 = *(_DWORD *)(v8 + 444);
      *(_DWORD *)(v8 + 384) = v74;
      v75 = *v34;
      *(_OWORD *)(v8 + 368) = *v34;
      *(_DWORD *)(v8 + 464) = v70;
      *(_OWORD *)(v8 + 448) = v71;
      *(_DWORD *)(v8 + 484) = v72;
      *(_OWORD *)(v8 + 468) = v73;
      *(_DWORD *)(v8 + 504) = v74;
      *(_OWORD *)(v8 + 488) = v75;
    }
    ++*(_DWORD *)(a1 + 160);

  }
}

void sub_10001F334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_10001F394(_QWORD *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  id v16;
  void *v17;
  _BOOL4 v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  _BOOL4 v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  id v29;
  void *v30;
  _BOOL4 v31;
  void *v32;
  _OWORD *v33;
  void *v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unint64_t v41;
  float v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  unint64_t v55;
  float *v56;
  float *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  float *v63;
  char *v64;
  char *v65;
  float *v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  NSObject *v80;
  uint32_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  char **v86;
  char *v87;
  int v88;
  _DWORD v89[2];
  float v90;
  float v91[3];
  _DWORD v92[3];
  uint8_t buf[16];

  v2 = *(id *)(a1[6] + 32);
  v3 = *(id *)(a1[6] + 72);
  v4 = a1[17];
  v85 = (void **)(a1 + 17);
  v86 = (char **)(a1 + 11);
  a1[12] = a1[11];
  a1[18] = v4;
  if (objc_msgSend(v2, "count") && (unint64_t)objc_msgSend(v3, "count") >= 2)
  {
    sub_1000209F0(v86, (unint64_t)objc_msgSend(v2, "count"));
    sub_100020AC0(v85, (unint64_t)objc_msgSend(v2, "count"));
    v5 = 0;
    v6 = a1[4];
    v7 = *(float *)(v6 + 60);
    v8 = *(float *)(v6 + 64);
    while (1)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", v5));
      v10 = objc_msgSend(v9, "timestamp");
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 0));
      v12 = objc_msgSend(v11, "timestamp");

      if (v10 >= v12)
        break;
      if ((char *)objc_msgSend(v2, "count") - 1 <= (char *)++v5)
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_100347C88);
        v13 = qword_100387318;
        if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          v14 = "[PU] HG before DM; IHA not available for this epoch";
LABEL_83:
          v80 = v13;
          v81 = 2;
LABEL_84:
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, v14, buf, v81);
        }
        goto LABEL_85;
      }
    }
    v88 = 0;
    while (2)
    {
      v84 = (v88 + 1);
      v87 = (char *)(int)v84;
      while (1)
      {
        while (1)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", (int)v5, v84));
          v16 = objc_msgSend(v15, "timestamp");
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v88));
          v18 = v16 < objc_msgSend(v17, "timestamp");

          if (!v18)
            break;
          v19 = (int)v5 + 1;
          while (1)
          {
            v5 = v19;
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", v19));
            v21 = objc_msgSend(v20, "timestamp");
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v88));
            v23 = objc_msgSend(v22, "timestamp");
            v24 = v21 < v23;

            if (v21 >= v23)
              break;
            v25 = objc_msgSend(v2, "count");
            v19 = v5 + 1;
            if ((id)(v5 + 1) == v25)
            {
              if (qword_100387310 != -1)
                dispatch_once(&qword_100387310, &stru_100347C88);
              v26 = qword_100387318;
              if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[PU] Did not catch up to DM", buf, 2u);
              }
              break;
            }
          }
          if (v88 < 1)
            goto LABEL_77;
          if (qword_100387310 != -1)
            dispatch_once(&qword_100387310, &stru_100347C88);
          v27 = qword_100387318;
          if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "[PU] DM raced ahead HA", buf, 2u);
          }
          ++*(_DWORD *)(a1[4] + 528);
          if (v21 < v23)
            goto LABEL_85;
        }
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", (int)v5));
        v29 = objc_msgSend(v28, "timestamp");
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v87));
        v31 = v29 < objc_msgSend(v30, "timestamp");

        if (!v31)
          break;
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", v88));
        v33 = objc_msgSend(v32, "c_struct");

        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", (int)v5));
        v35 = (float *)objc_msgSend(v34, "c_struct");

        v36 = v35[3];
        v37 = fabsf(v35[2]);
        v38 = fabsf(v36);
        v39 = v35[4];
        v40 = fabsf(v39);
        if (v38 < v40)
          v38 = v40;
        if (v37 < v38)
          v37 = v38;
        if (v37 >= v7)
        {
          v41 = 0;
          *(float *)v92 = v35[2];
          *(float *)&v92[1] = v36;
          *(float *)&v92[2] = v39;
          do
          {
            v42 = *(float *)sub_10001EB24((uint64_t)v92, v41);
            v43 = (float *)sub_10001EB24((uint64_t)v91, v41);
            if (v42 <= (float)-v8)
              v44 = -v8;
            else
              v44 = v42;
            if (v44 >= v8)
              v44 = v8;
            *v43 = v44;
            ++v41;
          }
          while (v41 != 3);
          *(_OWORD *)buf = *v33;
          CMOQuaternion::normalize((float32x4_t *)buf, *(float32x4_t *)buf);
          v45 = CMOQuaternion::rotateFrame((CMOQuaternion *)buf, v91[0], v91[1], v91[2]);
          v47 = v46;
          v49 = v48;
          v89[0] = CMOQuaternion::gravity((CMOQuaternion *)buf);
          v89[1] = v50;
          v90 = v51;
          CMOQuaternion::rotateFrameInPlace((CMOQuaternion *)buf, (uint64_t)v89);
          v52 = v45 - v90;
          v53 = v47 - v90;
          v54 = v49 - v90;
          v56 = (float *)a1[12];
          v55 = a1[13];
          if ((unint64_t)v56 >= v55)
          {
            v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - *v86) >> 2);
            v59 = v58 + 1;
            if (v58 + 1 > 0x1555555555555555)
              sub_10000D5F8();
            v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (_QWORD)*v86) >> 2);
            if (2 * v60 > v59)
              v59 = 2 * v60;
            if (v60 >= 0xAAAAAAAAAAAAAAALL)
              v61 = 0x1555555555555555;
            else
              v61 = v59;
            if (v61)
              v62 = (char *)sub_100020CA0((uint64_t)(a1 + 13), v61);
            else
              v62 = 0;
            v63 = (float *)&v62[12 * v58];
            *v63 = v52;
            v63[1] = v53;
            v63[2] = v54;
            v65 = (char *)a1[11];
            v64 = (char *)a1[12];
            v66 = v63;
            if (v64 != v65)
            {
              do
              {
                v67 = *(_QWORD *)(v64 - 12);
                v64 -= 12;
                v68 = *((_DWORD *)v64 + 2);
                *(_QWORD *)(v66 - 3) = v67;
                v66 -= 3;
                *((_DWORD *)v66 + 2) = v68;
              }
              while (v64 != v65);
              v64 = *v86;
            }
            v57 = v63 + 3;
            a1[11] = v66;
            a1[12] = v63 + 3;
            a1[13] = &v62[12 * v61];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *v56 = v52;
            v56[1] = v53;
            v57 = v56 + 3;
            v56[2] = v54;
          }
          a1[12] = v57;
          v70 = (char *)a1[18];
          v69 = a1[19];
          if ((unint64_t)v70 >= v69)
          {
            v72 = (char *)*v85;
            v73 = (v70 - (_BYTE *)*v85) >> 3;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61)
              sub_10000D5F8();
            v75 = v69 - (_QWORD)v72;
            if (v75 >> 2 > v74)
              v74 = v75 >> 2;
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
              v76 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v76 = v74;
            if (v76)
            {
              v77 = (char *)sub_10000D60C((uint64_t)(a1 + 19), v76);
              v72 = (char *)a1[17];
              v70 = (char *)a1[18];
            }
            else
            {
              v77 = 0;
            }
            v78 = &v77[8 * v73];
            *(_QWORD *)v78 = *(_QWORD *)v35;
            v71 = v78 + 8;
            while (v70 != v72)
            {
              v79 = *((_QWORD *)v70 - 1);
              v70 -= 8;
              *((_QWORD *)v78 - 1) = v79;
              v78 -= 8;
            }
            a1[17] = v78;
            a1[18] = v71;
            a1[19] = &v77[8 * v76];
            if (v72)
              operator delete(v72);
          }
          else
          {
            *(_QWORD *)v70 = *(_QWORD *)v35;
            v71 = v70 + 8;
          }
          a1[18] = v71;
        }
        if ((char *)objc_msgSend(v2, "count") - 1 <= (char *)(int)v5)
        {
          if (qword_100387310 != -1)
            dispatch_once(&qword_100387310, &stru_100347C88);
          v13 = qword_100387318;
          if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            v14 = "[PU] Reached end of HA";
            goto LABEL_83;
          }
          goto LABEL_85;
        }
        LODWORD(v5) = v5 + 1;
      }
      if ((char *)objc_msgSend(v3, "count") - 1 > v87)
      {
        v24 = 0;
        v88 = v84;
LABEL_77:
        if (!v24)
          continue;
        goto LABEL_85;
      }
      break;
    }
    v82 = (char *)objc_msgSend(v2, "count");
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100347C88);
    v83 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = &v82[~(uint64_t)(int)v5];
      v14 = "Reached end of DM buffer with %lu Hg points unused";
      v80 = v83;
      v81 = 12;
      goto LABEL_84;
    }
  }
LABEL_85:

}

void sub_10001FB8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10001FC54(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  float v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  uint8_t buf[40];
  void *__p;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 64))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100347C88);
    v10 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[Pulse] buffer is empty", buf, 2u);
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    switch(a2)
    {
      case 2:
        *(_QWORD *)buf = &_mh_execute_header;
        *(_DWORD *)&buf[8] = 2;
        sub_100020CE4((char *)&v26, (char *)buf, (uint64_t)&buf[12], 3uLL);
        break;
      case 1:
        *(_QWORD *)buf = &_mh_execute_header;
        sub_100020CE4((char *)&v26, (char *)buf, (uint64_t)&buf[8], 2uLL);
        break;
      case 0:
        *(_DWORD *)buf = 2;
        sub_100020CE4((char *)&v26, (char *)buf, (uint64_t)&buf[4], 1uLL);
        break;
    }
    __p = 0;
    v31 = 0;
    v32 = 0;
    sub_100020E60(&__p, v26, (uint64_t)v27, (v27 - (_BYTE *)v26) >> 2);
    v33 = 0x400F29F7411CF5C3;
    v34 = 1102024197;
    memset(buf, 0, sizeof(buf));
    v11 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) - v11 == 12)
    {
      v12 = 0;
      v13 = 0.0;
      v14 = 0;
      v15 = 0.0;
    }
    else
    {
      v23 = a4;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v15 = 0.0;
      v19 = -1;
      v14 = 0;
      v20 = -1;
      v13 = 0.0;
      v24 = -1;
      do
      {
        v21 = v11 + v16;
        if (sub_100020778((uint64_t)buf, v11 + v16) <= a5)
        {
          if ((v18 & 1) != 0)
          {
            if ((float)((float)((int)v17 - v20) * 0.00125) <= a6)
            {
              v18 = 1;
            }
            else
            {
              if (v20 - v19 + 1 >= a3 && (*(float *)&buf[32] > v15 || v24 == -1))
              {
                v13 = (float)(v20 - v19) * 0.00125;
                v14 = *(_DWORD *)&buf[36];
                v15 = *(float *)&buf[32];
                v24 = v17;
              }
              v18 = 0;
              memset(&buf[20], 0, 20);
              v19 = -1;
            }
          }
          else
          {
            v18 = 0;
          }
        }
        else
        {
          if ((v18 & 1) == 0)
            v19 = v17;
          sub_1000207EC((uint64_t)buf, v21, v21 + 12, 0.00125);
          v18 = 1;
          v20 = v17;
        }
        ++v17;
        v11 = *(_QWORD *)(a1 + 64);
        v16 += 12;
      }
      while (-1 - 0x5555555555555555 * ((*(_QWORD *)(a1 + 72) - v11) >> 2) > v17);
      v12 = *(_QWORD *)&buf[12];
      a4 = v23;
    }
    *(_QWORD *)a4 = v12;
    *(float *)(a4 + 8) = v15;
    *(_DWORD *)(a4 + 12) = v14;
    *(float *)(a4 + 16) = v13;
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
  }
}

void sub_10001FFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10001FFFC(_QWORD *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  char v31;
  unint64_t v32;
  float v33;
  int v34;
  NSObject *v35;
  int v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  float v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint8_t v55[8];
  void *v56;
  _BYTE *v57;
  uint64_t v58;
  uint8_t buf[40];
  void *__p;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;

  if (a1[9] == a1[8])
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100347C88);
    v11 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v12 = "[PU] LG buffer empty";
    goto LABEL_15;
  }
  if (a1[12] == a1[11])
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100347C88);
    v11 = qword_100387318;
    if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v12 = "[PU] HA buffer empty";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, v12, buf, 2u);
LABEL_16:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return;
  }
  v56 = 0;
  v57 = 0;
  v58 = 0;
  switch(a2)
  {
    case 2:
      *(_QWORD *)buf = &_mh_execute_header;
      *(_DWORD *)&buf[8] = 2;
      sub_100020CE4((char *)&v56, (char *)buf, (uint64_t)&buf[12], 3uLL);
      break;
    case 1:
      *(_QWORD *)buf = &_mh_execute_header;
      sub_100020CE4((char *)&v56, (char *)buf, (uint64_t)&buf[8], 2uLL);
      break;
    case 0:
      *(_DWORD *)buf = 2;
      sub_100020CE4((char *)&v56, (char *)buf, (uint64_t)&buf[4], 1uLL);
      break;
  }
  __p = 0;
  v61 = 0;
  v62 = 0;
  sub_100020E60(&__p, v56, (uint64_t)v57, (v57 - (_BYTE *)v56) >> 2);
  v63 = 0x400F29F7411CF5C3;
  v64 = 1102024197;
  memset(buf, 0, sizeof(buf));
  v13 = a1[8];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[9] - v13) >> 2) - 3 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v51 = a3;
    v50 = a4;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0.0;
    v54 = -1;
    v19 = 1;
    v20 = 1;
    v52 = -1;
    v49 = -1;
    v21 = 0;
    v22 = 0.0;
    while (1)
    {
      v23 = a1[17];
      v24 = *(_QWORD *)(v23 + 8 * (int)v15);
      v25 = (int)v15;
      v26 = *(_QWORD *)(a1[14] + 8 * (int)v16);
      v27 = v24 >= v26;
      v28 = v24 - v26;
      if (!v27 && !v17)
      {
        while (1)
        {
          v29 = *(_QWORD *)(v23 + 8 * v25);
          v17 = v29 < v26;
          if (v29 >= v26)
            break;
          v15 = v25 + 1;
          v30 = v25 + 2 == (a1[18] - v23) >> 3;
          ++v25;
          if (v30)
            goto LABEL_33;
        }
        v15 = v25;
LABEL_33:
        if ((int)v16 >= 1)
        {
          if (qword_100387310 != -1)
            dispatch_once(&qword_100387310, &stru_100347C88);
          v35 = qword_100387318;
          if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)v55 = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "[PU] LG ahead of HA", v55, 2u);
          }
          ++*(_DWORD *)(a1[4] + 528);
        }
        v20 = v16;
        goto LABEL_62;
      }
      v53 = v15;
      v31 = v14;
      v32 = (int)v16;
      v33 = (float)v28 * 0.000001;
      if (v33 < 0.00125 && !v17)
      {
        v36 = v54;
        if ((v31 & 1) == 0)
          v36 = v16;
        v54 = v36;
        sub_1000207EC((uint64_t)buf, v13 + 12 * (int)v16, a1[11] + 12 * (int)v25, v33);
        sub_100020778((uint64_t)buf, v13 + 12 * (int)v16);
        v37 = v25 << 32;
        for (i = 12 * v25; ; i += 12)
        {
          LODWORD(v15) = v25 + 1;
          v39 = a1[11];
          v40 = a1[17];
          if (0xAAAAAAAAAAAAAAABLL * ((a1[12] - v39) >> 2) <= v25 + 1
            || *(_QWORD *)(v40 + 8 * v25 + 8) - *(_QWORD *)(v40 + 8 * v25) > 0x4E1uLL)
          {
            break;
          }
          v41 = v39 + i;
          sub_1000207EC((uint64_t)buf, v39 + i, v39 + i + 12, 0.0003125);
          v37 += (uint64_t)&_mh_execute_header;
          sub_100020778((uint64_t)buf, v41);
          ++v25;
        }
        v42 = a1[14];
        v43 = v37 >> 32;
        v44 = *(_QWORD *)(v40 + (v37 >> 29));
        do
        {
          if (*(_QWORD *)(v42 + 8 * v32) >= v44)
            break;
          ++v32;
        }
        while (((a1[15] - v42) >> 3) - 1 > v32);
        v45 = v39 + 12 * SHIDWORD(v37);
        v52 = v32;
        v46 = (float)(*(_QWORD *)(v42 + 8 * (int)v32) - v44) * 0.000001;
        if (v46 > 0.00125)
          v46 = 0.00125;
        sub_1000207EC((uint64_t)buf, v45, a1[8] + 12 * (int)v32, v46);
        sub_100020778((uint64_t)buf, v45);
        v47 = -1 - 0x5555555555555555 * ((uint64_t)(a1[12] - a1[11]) >> 2);
        v17 = v47 <= v43;
        if (v47 > v43)
          v15 = v15;
        else
          v15 = v25;
        v14 = 1;
        v20 = v52;
        goto LABEL_62;
      }
      if (sub_100020778((uint64_t)buf, v13 + 12 * (int)v16) <= a5)
      {
        if ((v31 & 1) != 0)
        {
          if ((float)((float)(int)(v16 - v52) * 0.00125) > a6)
          {
            if (v52 - v54 + 1 >= v51)
            {
              v15 = v53;
              if (*(float *)&buf[32] > v18 || v49 == -1)
              {
                v22 = (float)(int)(v52 - v54) * 0.00125;
                v21 = *(_DWORD *)&buf[36];
                v18 = *(float *)&buf[32];
                v49 = v16;
              }
            }
            else
            {
              v15 = v53;
            }
            v14 = 0;
            memset(&buf[20], 0, 20);
            v54 = -1;
            goto LABEL_62;
          }
          v14 = 1;
        }
        else
        {
          v14 = 0;
        }
      }
      else
      {
        v34 = v54;
        if ((v31 & 1) == 0)
          v34 = v16;
        v54 = v34;
        sub_1000207EC((uint64_t)buf, v13 + 12 * (int)v16, v13 + 12 * v19, 0.00125);
        v14 = 1;
        v52 = v16;
      }
      v15 = v53;
LABEL_62:
      v16 = v20;
      v20 = (v20 + 1);
      v19 = (int)v20;
      v13 = a1[8];
      if (-1 - 0x5555555555555555 * ((a1[9] - v13) >> 2) <= (unint64_t)(int)v20)
      {
        v48 = *(_QWORD *)&buf[12];
        a4 = v50;
        goto LABEL_69;
      }
    }
  }
  v48 = 0;
  v22 = 0.0;
  v21 = 0;
  v18 = 0.0;
LABEL_69:
  *(_QWORD *)a4 = v48;
  *(float *)(a4 + 8) = v18;
  *(_DWORD *)(a4 + 12) = v21;
  *(float *)(a4 + 16) = v22;
  if (__p)
  {
    v61 = __p;
    operator delete(__p);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_1000206C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100020708(_QWORD *a1, uint64_t a2)
{
  sub_10001ED9C((uint64_t)a1 + *(_QWORD *)(*a1 - 48), a2);
}

uint64_t sub_100020718(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_100020E60((_QWORD *)(a1 + 40), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 64) = 0x400F29F7411CF5C3;
  *(_DWORD *)(a1 + 72) = 1102024197;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

float sub_100020778(uint64_t a1, uint64_t a2)
{
  int *v2;
  int *v3;
  float v5;
  unint64_t v6;
  float v7;

  v2 = *(int **)(a1 + 40);
  v3 = *(int **)(a1 + 48);
  if (v2 == v3)
  {
    v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
    do
    {
      v6 = *v2++;
      v7 = sub_100020B64(a2, v6);
      v5 = v5 + (float)(v7 * sub_100020B64(a2, v6));
    }
    while (v2 != v3);
  }
  return sqrtf(v5);
}

void sub_1000207EC(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  int *v5;
  int *v6;
  double v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x2_t v18;
  float v19;

  v18 = 0;
  v19 = 0.0;
  v5 = *(int **)(a1 + 40);
  v6 = *(int **)(a1 + 48);
  if (v5 != v6)
  {
    v9 = a4;
    do
    {
      v10 = *v5++;
      v11 = sub_100020B64(a2, v10);
      v12 = (float)(v11 + sub_100020B64(a3, v10)) * 0.5 * v9 * *(float *)(a1 + 72);
      *(float *)sub_10001EB24((uint64_t)&v18, v10) = v12;
    }
    while (v5 != v6);
  }
  v13 = sub_100020778(a1, (uint64_t)&v18);
  *(float32x2_t *)a1 = vadd_f32(v18, *(float32x2_t *)a1);
  *(float *)(a1 + 8) = v19 + *(float *)(a1 + 8);
  v14 = sub_100020778(a1, a1);
  v15 = *(float *)(a1 + 16);
  if (*(float *)(a1 + 12) >= v14)
    v14 = *(float *)(a1 + 12);
  *(float *)(a1 + 12) = v14;
  *(float *)(a1 + 16) = v13 + v15;
  *(float32x2_t *)(a1 + 20) = vadd_f32(v18, *(float32x2_t *)(a1 + 20));
  *(float *)(a1 + 28) = v19 + *(float *)(a1 + 28);
  v16 = sub_100020778(a1, a1 + 20);
  v17 = *(float *)(a1 + 36);
  if (*(float *)(a1 + 32) >= v16)
    v16 = *(float *)(a1 + 32);
  *(float *)(a1 + 32) = v16;
  *(float *)(a1 + 36) = v13 + v17;
}

uint64_t sub_10002093C(uint64_t result)
{
  *(_QWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_10002094C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10002097C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 709) = 0;
  if (*(_BYTE *)(a1 + 214))
    *(_BYTE *)(a1 + 214) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  sub_1000209F0((char **)(a1 + 64), 0xC80uLL);
  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  *(_QWORD *)(v2 + 8) = v3;
  sub_100020AC0((void **)v2, 0xC80uLL);
  *(_DWORD *)(v2 + 624) = 0;
}

void sub_1000209F0(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_10000D5F8();
    v5 = (a1[1] - *a1) / 12;
    v6 = (char *)sub_100020CA0(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_QWORD *)(v10 - 12);
        v10 -= 12;
        v14 = *((_DWORD *)v10 + 2);
        *(_QWORD *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_100020AC0(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_10000D5F8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10000D60C(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_100020B54(_QWORD *a1)
{
  sub_10002097C((uint64_t)a1 + *(_QWORD *)(*a1 - 56));
}

float sub_100020B64(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1002D33B0();
    __assert_rtn("operator[]", "CMVector.h", 271, "false");
  }
  return *(float *)(a1 + 4 * a2);
}

void sub_100020BC8(CLKappaAlgBlock *a1)
{
  sub_100020ED8(a1, (uint64_t *)&off_100347678);
}

void sub_100020BD4(CLKappaAlgBlock *a1)
{
  sub_100020ED8(a1, (uint64_t *)&off_100347678);
  operator delete();
}

_QWORD *sub_100020C04(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_100020C0C(_QWORD *a1)
{
  sub_100020ED8((CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24)), (uint64_t *)&off_100347678);
}

void sub_100020C24(_QWORD *a1)
{
  sub_100020ED8((CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24)), (uint64_t *)&off_100347678);
  operator delete();
}

_QWORD *sub_100020C5C(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_100020C70(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void *sub_100020CA0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    sub_10000A128();
  return operator new(12 * a2);
}

char *sub_100020CE4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_10000D5F8();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_100020DEC(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_100020DEC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_10000D5F8();
  result = (char *)sub_100020E2C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_100020E2C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_10000A128();
  return operator new(4 * a2);
}

_QWORD *sub_100020E60(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100020DEC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100020EBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100020ED8(CLKappaAlgBlock *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 160)) = a2[7];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 168)) = a2[8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 176)) = a2[9];
  v5 = (void *)*((_QWORD *)a1 + 17);
  if (v5)
  {
    *((_QWORD *)a1 + 18) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)a1 + 14);
  if (v6)
  {
    *((_QWORD *)a1 + 15) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)a1 + 11);
  if (v7)
  {
    *((_QWORD *)a1 + 12) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)a1 + 8);
  if (v8)
  {
    *((_QWORD *)a1 + 9) = v8;
    operator delete(v8);
  }
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, a2 + 1);
}

void sub_100020F94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100347CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100020FA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100347CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100020FD4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_100020FE4(uint64_t a1)
{
  bzero((void *)(a1 + 8), 0x210uLL);
  *(_QWORD *)a1 = &off_10034CE38;
  *(_QWORD *)(a1 + 16) = 0x3FC0000040800000;
  *(_QWORD *)(a1 + 24) = 0x23D99999ALL;
  *(_QWORD *)(a1 + 32) = 0x3D99999A3FC00000;
  *(_DWORD *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 44) = 0x3D99999A40000000;
  *(_DWORD *)(a1 + 52) = 2;
  *(_OWORD *)(a1 + 56) = xmmword_1002E58A0;
  *(_QWORD *)(a1 + 72) = 0x23D99999ALL;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 436) = 0u;
  *(_OWORD *)(a1 + 452) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_QWORD *)(a1 + 500) = 0;
  return a1;
}

uint64_t sub_1000210D8(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  int v16;

  v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *((_DWORD *)a1 + 1);
      v9 = 134218754;
      v10 = Current;
      v11 = 2080;
      v12 = "const T &CMQueue<CMVector<float, 3>>::operator[](const size_t) const [T = CMVector<float, 3>]";
      v13 = 2048;
      v14 = a2;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  v5 = *a1 + a2;
  if (v5 < v4)
    v4 = 0;
  return (uint64_t)&a1[6 * (v5 - v4) + 4];
}

unsigned __int16 *sub_100021200(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[6 * (v3 - v2)];
  v5 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)v4 + 1) = *(_QWORD *)a2;
  *((_DWORD *)v4 + 4) = v5;
  v6 = result[1];
  v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    v8 = *result + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

void sub_1000212A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

double sub_1000212B0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = a1;
  return CFAbsoluteTimeGetCurrent();
}

void start()
{
  void *v0;
  NSObject *v1;
  void *v2;
  NSObject *v3;
  unsigned int v4;
  NSObject *v5;
  NSObject *v6;
  char v7;
  char v8;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  dispatch_queue_attr_t v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  dispatch_time_t v24;
  void *__p[3];
  const __CFString *v26;
  const __CFString *v27;
  _BYTE v28[12];
  uint8_t buf[4];
  unsigned int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;

  v0 = objc_autoreleasePoolPush();
  if (qword_1003872E0 != -1)
    dispatch_once(&qword_1003872E0, &stru_100347D18);
  v1 = qword_1003872E8;
  if (os_log_type_enabled((os_log_t)qword_1003872E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Starting", buf, 2u);
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPlatformInfo sharedInstance](CSPlatformInfo, "sharedInstance"));
  LODWORD(v3) = objc_msgSend(v2, "isKappaLoggingDevice");
  v4 = objc_msgSend(v2, "isKappaDetectionDevice");
  if ((v3 & v4) == 1)
  {
    v9 = sub_100021894();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2082;
      v34 = "assert";
      v35 = 2081;
      v36 = "false";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"logging and detection are mutually exclusive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    v11 = sub_100021894();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_signpost_enabled(v12))
    {
      *(_DWORD *)buf = 68289539;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2082;
      v34 = "assert";
      v35 = 2081;
      v36 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "logging and detection are mutually exclusive", "{\"msg%{public}.0s\":\"logging and detection are mutually exclusive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    v13 = sub_100021894();
    v3 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 2082;
      v34 = "assert";
      v35 = 2081;
      v36 = "false";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"logging and detection are mutually exclusive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/Daemon/main.mm", 51, "main");
    __break(1u);
  }
  else
  {
    if (qword_1003872E0 != -1)
      dispatch_once(&qword_1003872E0, &stru_100347D18);
    v5 = qword_1003872E8;
    if (os_log_type_enabled((os_log_t)qword_1003872E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      v30 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "isLoggingDevice %{public}d", buf, 8u);
    }
    if (qword_1003872E0 != -1)
      dispatch_once(&qword_1003872E0, &stru_100347D18);
    v6 = qword_1003872E8;
    if (os_log_type_enabled((os_log_t)qword_1003872E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      v30 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "isDetectionDevice %{public}d", buf, 8u);
    }
    v7 = _set_user_dir_suffix("com.apple.anomalydetectiond");
    if (confstr(65537, (char *)buf, 0x40uLL))
      v8 = v7;
    else
      v8 = 0;
    if ((v8 & 1) == 0)
    {
      perror("Unable to change temporary directory");
      _Exit(1);
    }
  }
  v14 = sub_100021894();
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v28 = 136446210;
    *(_QWORD *)&v28[4] = buf;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Temporary directory: %{public}s", v28, 0xCu);
  }

  v26 = CFSTR("CSCompanionService");
  v27 = CFSTR("CSCompanionService");
  v16 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1));
  objc_msgSend(v2, "isKappaDetectionDevice");
  objc_msgSend(v2, "isKappaLoggingDevice");
  v18 = (void *)objc_opt_new(CLServiceVendor, v17);
  objc_msgSend(v18, "setServiceReplacementMap:missBehavior:", v16, 0);
  objc_msgSend(v18, "ensureServiceIsRunning:", CFSTR("CSCompanionService"));
  objc_msgSend(v18, "ensureServiceIsRunning:", CFSTR("CSAnomalyEventService"));
  *(_QWORD *)v28 = 0xF00000002;
  *(_DWORD *)&v28[8] = 3;
  sub_1000219F4(__p, v28, 3uLL);
  sub_1000218D4((int **)__p, v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (((v3 | v4) & 1) == 0)
  {
    v19 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    v21 = dispatch_queue_create("FeatureDisabledExit", v20);

    v22 = sub_100021894();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "exiting in 5 seconds", v28, 2u);
    }

    v24 = dispatch_time(0, 5000000000);
    dispatch_after(v24, v21, &stru_100347CF8);

  }
  dispatch_main();
}

void sub_100021834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_100021894()
{
  if (qword_1003872E0 != -1)
    dispatch_once(&qword_1003872E0, &stru_100347D18);
  return (id)qword_1003872E8;
}

void sub_1000218D4(int **a1, void *a2)
{
  id v3;
  int *v4;
  int *v5;
  int v6;
  dispatch_source_t v7;
  NSObject *v8;
  _QWORD handler[4];
  id v10;
  NSObject *v11;
  int v12;

  v3 = a2;
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      v6 = *v4;
      sigignore(*v4);
      v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v6, 0, (dispatch_queue_t)&_dispatch_main_q);
      if (v7)
      {
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100021B34;
        handler[3] = &unk_100347D40;
        v12 = v6;
        v10 = v3;
        v8 = v7;
        v11 = v8;
        dispatch_source_set_event_handler(v8, handler);
        dispatch_activate(v8);

      }
      ++v4;
    }
    while (v4 != v5);
  }

}

void sub_1000219E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1000219F4(_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_100020DEC(a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_100021A58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100021A74(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (qword_1003872E0 != -1)
    dispatch_once(&qword_1003872E0, &stru_100347D18);
  v1 = qword_1003872E8;
  if (os_log_type_enabled((os_log_t)qword_1003872E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "exiting daemon", v2, 2u);
  }
  raise(3);
}

void sub_100021B04(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "main");
  v2 = (void *)qword_1003872E8;
  qword_1003872E8 = (uint64_t)v1;

}

void sub_100021B34(uint64_t a1)
{
  int v1;
  id v2;
  NSObject *v3;
  _DWORD v4[2];

  v1 = *(_DWORD *)(a1 + 48);
  v2 = *(id *)(a1 + 32);
  if (qword_1003872E0 != -1)
    dispatch_once(&qword_1003872E0, &stru_100347D18);
  v3 = qword_1003872E8;
  if (os_log_type_enabled((os_log_t)qword_1003872E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67240192;
    v4[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Exiting with signal %{public}d", (uint8_t *)v4, 8u);
  }
  objc_msgSend(v2, "retireServiceWithName:", CFSTR("CSKappaDetectionService"));
  _Exit(0);
}

void sub_100021BFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100021CB0(id a1)
{
  CSMartyTap2RadarConfiguration *v1;
  void *v2;

  v1 = -[CSMartyTap2RadarConfiguration initWithAllowOnBattery:checkIntervalInSeconds:coolDownPeriodInSeconds:]([CSMartyTap2RadarConfiguration alloc], "initWithAllowOnBattery:checkIntervalInSeconds:coolDownPeriodInSeconds:", 1, 3600, 1800);
  v2 = (void *)qword_100389328;
  qword_100389328 = (uint64_t)v1;

}

void sub_100021DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100021DC0(id a1)
{
  CSMartyTap2RadarConfiguration *v1;
  void *v2;

  v1 = -[CSMartyTap2RadarConfiguration initWithAllowOnBattery:checkIntervalInSeconds:coolDownPeriodInSeconds:]([CSMartyTap2RadarConfiguration alloc], "initWithAllowOnBattery:checkIntervalInSeconds:coolDownPeriodInSeconds:", 1, 3600, 1800);
  v2 = (void *)qword_100389330;
  qword_100389330 = (uint64_t)v1;

}

void sub_100022018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

id sub_100022074()
{
  if (qword_100387420 != -1)
    dispatch_once(&qword_100387420, &stru_100347E30);
  return (id)qword_100387428;
}

void sub_1000222E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void sub_1000223A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100022550(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100022858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_sync_exit(v3);
  _Unwind_Resume(a1);
}

BOOL sub_1000228EC(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  double Current;
  id v12;
  id v13;
  uint64_t v14;
  _BOOL8 v15;
  id v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v22;
  char *v23;
  void *v24;
  id v25;
  NSObject *v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  NSErrorUserInfoKey v31;
  const __CFString *v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  char *v36;

  v5 = a2;
  if ((sub_10001A13C(*(void **)(a1 + 32), a3, CFSTR("ttrAction")) & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v5));
    v7 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v6, a3);
    if (!objc_msgSend(v7, "containsValueForKey:", CFSTR("triggerUUID"))
      || !objc_msgSend(v7, "containsValueForKey:", CFSTR("timestamp"))
      || (objc_msgSend(v7, "containsValueForKey:", CFSTR("ttrManagedFiles")) & 1) == 0)
    {
      v15 = 0;
LABEL_21:

      goto LABEL_22;
    }
    v8 = objc_msgSend(v7, "decodeObjectOfClass:forKey:", objc_opt_class(NSString), CFSTR("triggerUUID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = objc_msgSend(v7, "decodeInt64ForKey:", CFSTR("timestamp"));
    Current = CFAbsoluteTimeGetCurrent();
    v12 = objc_msgSend(v7, "decodeBoolForKey:", CFSTR("ttrManagedFiles"));
    v13 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "coolDownPeriodInSeconds");
    v14 = (uint64_t)Current - (_QWORD)v10;
    v15 = v14 >= (uint64_t)v13;
    if (v14 < (uint64_t)v13)
    {
      if (qword_100387420 != -1)
        dispatch_once(&qword_100387420, &stru_100347E30);
      v22 = (id)qword_100387428;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        v23 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "coolDownPeriodInSeconds");
        *(_DWORD *)buf = 138412546;
        v34 = v9;
        v35 = 2048;
        v36 = &v23[-v14];
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Backing down from TTR %@ because we still need to cool down for %lld seconds", buf, 0x16u);
      }

      if (!a3)
        goto LABEL_44;
      v31 = NSLocalizedDescriptionKey;
      v32 = CFSTR("Cooldown still in place");
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1));
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 35, v24));
    }
    else
    {
      v16 = objc_msgSend(*(id *)(a1 + 32), "showConfirmationWithError:withEventType:", a3, 4);
      if (qword_100387420 != -1)
        dispatch_once(&qword_100387420, &stru_100347E30);
      v17 = qword_100387428;
      if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v34) = (_DWORD)v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Marty TTR confirmation result: %d", buf, 8u);
      }
      if ((_DWORD)v16 == 3)
      {
        v25 = sub_100022074();
        v26 = objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v34) = (_DWORD)v12;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "User chose not to file radar. ttrManaged,%d", buf, 8u);
        }

        objc_msgSend(*(id *)(a1 + 32), "deletePendingFiles:ttrManagedMsl:", v9, v12);
      }
      else
      {
        if ((_DWORD)v16 == 4)
        {
          v18 = sub_100022074();
          v19 = objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v34) = (_DWORD)v12;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Error with confirmation. ttrManagedFiles,%d", buf, 8u);
          }
LABEL_43:

          objc_msgSend(*(id *)(a1 + 32), "deletePendingFiles:ttrManagedMsl:", v9, v12);
LABEL_44:
          v15 = 0;
          goto LABEL_45;
        }
        if ((objc_msgSend(*(id *)(a1 + 32), "showPrivacyNotificationWithError:", a3) & 1) == 0)
        {
          v30 = sub_100022074();
          v19 = objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v34) = (_DWORD)v12;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "User did not consent. ttrManaged,%d", buf, 8u);
          }
          goto LABEL_43;
        }
        if ((objc_msgSend(*(id *)(a1 + 32), "radarWithResult:triggerUUID:ttrManagedMsl:eventType:error:", v16, v9, v12, 4, a3) & 1) == 0)
        {
          v29 = sub_100022074();
          v19 = objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v34) = (_DWORD)v12;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Not able to generate TTR. ttrManaged,%d", buf, 8u);
          }
          goto LABEL_43;
        }
      }
      v27 = sub_100022074();
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "removing TTR file", buf, 2u);
      }

      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      objc_msgSend(v24, "removeItemAtURL:error:", v5, 0);
    }

LABEL_45:
    goto LABEL_21;
  }
  if (qword_100387420 != -1)
    dispatch_once(&qword_100387420, &stru_100347E30);
  v20 = qword_100387428;
  if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "!checkForSpoolerDirectory", buf, 2u);
  }
  v15 = 0;
LABEL_22:

  return v15;
}

void sub_100022EC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL sub_100022F40(id a1, NSURL *a2, id *a3)
{
  NSURL *v4;
  void *v5;
  NSURL *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  unint64_t v13;
  double v14;
  double v15;
  NSObject *v16;
  BOOL v17;
  NSObject *v18;
  int v20;
  NSURL *v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v6 = v4;
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL path](v6, "path"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributesOfItemAtPath:error:", v7, a3));

  if (a3)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fileCreationDate"));
    objc_msgSend(v9, "timeIntervalSinceNow");
    v11 = v10;

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
    v13 = (unint64_t)objc_msgSend(v12, "getFloatDefault:", CFSTR("MartyTTRCleanupExpirationAge"));
    if ((v13 & 0xFF00000000) != 0)
      v14 = *(float *)&v13;
    else
      v14 = 14400.0;
    if (qword_100387420 != -1)
      dispatch_once(&qword_100387420, &stru_100347E30);
    v15 = fabs(v11);
    v16 = qword_100387428;
    if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
    {
      v20 = 138412802;
      v21 = v6;
      v22 = 2048;
      v23 = v15;
      v24 = 2048;
      v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Checking file: %@: age:%4.2f ageExpiration:%4.2f", (uint8_t *)&v20, 0x20u);
    }
    v17 = v15 > v14;

  }
  else
  {
    if (qword_100387420 != -1)
      dispatch_once(&qword_100387420, &stru_100347E30);
    v18 = qword_100387428;
    if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
    {
      v20 = 138412546;
      v21 = v6;
      v22 = 2112;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Error getting file attributes: %@ - %@", (uint8_t *)&v20, 0x16u);
    }
    v17 = 1;
  }

  return v17;
}

void sub_10002317C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100023268(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  id v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  id v24;
  id v25;
  id v26;
  uint8_t buf[4];
  int v28;

  v2 = *(void **)(a1 + 32);
  v26 = 0;
  v3 = objc_msgSend(v2, "showConfirmationWithError:withEventType:", &v26, *(_QWORD *)(a1 + 48));
  v4 = v26;
  if (qword_100387420 != -1)
    dispatch_once(&qword_100387420, &stru_100347E30);
  v5 = qword_100387428;
  if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v28 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Marty TTR confirmation result: %d", buf, 8u);
  }
  if ((_DWORD)v3 == 3)
  {
    if (qword_100387420 != -1)
      dispatch_once(&qword_100387420, &stru_100347E30);
    v20 = qword_100387428;
    if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)buf = 67109120;
      v28 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "User chose not to file radar. ttrManaged,%d", buf, 8u);
    }
    objc_msgSend(*(id *)(a1 + 32), "deletePendingFiles:ttrManagedMsl:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  }
  else
  {
    if ((_DWORD)v3 == 4)
    {
      if (qword_100387420 != -1)
        dispatch_once(&qword_100387420, &stru_100347E30);
      v6 = qword_100387428;
      if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(unsigned __int8 *)(a1 + 56);
        *(_DWORD *)buf = 67109120;
        v28 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Error with confirmation. ttrManagedFiles,%d", buf, 8u);
      }
      objc_msgSend(*(id *)(a1 + 32), "deletePendingFiles:ttrManagedMsl:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
    }
    if (qword_100387420 != -1)
      dispatch_once(&qword_100387420, &stru_100347E30);
    v8 = qword_100387428;
    if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "User chose to file radar.", buf, 2u);
    }
    v9 = *(void **)(a1 + 32);
    v25 = v4;
    v10 = objc_msgSend(v9, "showPrivacyNotificationWithError:", &v25);
    v11 = v25;

    v4 = v11;
    if ((v10 & 1) != 0)
    {
      v12 = *(void **)(a1 + 32);
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(unsigned __int8 *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 48);
      v24 = v11;
      v16 = objc_msgSend(v12, "radarWithResult:triggerUUID:ttrManagedMsl:eventType:error:", v3, v13, v14, v15, &v24);
      v17 = v24;

      v4 = v17;
      if ((v16 & 1) == 0)
      {
        if (qword_100387420 != -1)
          dispatch_once(&qword_100387420, &stru_100347E30);
        v18 = qword_100387428;
        if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
        {
          v19 = *(unsigned __int8 *)(a1 + 56);
          *(_DWORD *)buf = 67109120;
          v28 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Not able to generate TTR. ttrManaged,%d", buf, 8u);
        }
        objc_msgSend(*(id *)(a1 + 32), "deletePendingFiles:ttrManagedMsl:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
      }
    }
    else
    {
      if (qword_100387420 != -1)
        dispatch_once(&qword_100387420, &stru_100347E30);
      v22 = qword_100387428;
      if (os_log_type_enabled((os_log_t)qword_100387428, OS_LOG_TYPE_DEBUG))
      {
        v23 = *(unsigned __int8 *)(a1 + 56);
        *(_DWORD *)buf = 67109120;
        v28 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "User did not consent. ttrManaged,%d", buf, 8u);
      }
      objc_msgSend(*(id *)(a1 + 32), "deletePendingFiles:ttrManagedMsl:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
    }
  }

}

void sub_10002363C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100023870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100023B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100023E8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000240A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100024240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000247EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100024910(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "deletePendingMetadatafile:ttrManagedMsl:", *(_QWORD *)(a1 + 40), 1);
}

void sub_10002498C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "MartyTap2Radar");
  v2 = (void *)qword_100387428;
  qword_100387428 = (uint64_t)v1;

}

id MartyCompanion::serializeDeviceInfo(MartyCompanion *this, const CompanionDeviceInfo *a2)
{
  NSObject *v3;
  int v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  int v24;
  _BYTE v25[12];
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100347E50);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_DWORD *)this;
    if (*((char *)this + 31) >= 0)
      v5 = (char *)this + 8;
    else
      v5 = (char *)*((_QWORD *)this + 1);
    v6 = *((_DWORD *)this + 8);
    v7 = *((_DWORD *)this + 9);
    v8 = *((_DWORD *)this + 10);
    v9 = *((_DWORD *)this + 11);
    v10 = *((_DWORD *)this + 12);
    v11 = *((_DWORD *)this + 13);
    v12 = *((_DWORD *)this + 14);
    *(_DWORD *)buf = 67176707;
    v24 = v4;
    *(_WORD *)v25 = 2081;
    *(_QWORD *)&v25[2] = v5;
    *(_WORD *)&v25[10] = 1025;
    v26 = v6;
    LOWORD(v27) = 1025;
    *(_DWORD *)((char *)&v27 + 2) = v8;
    HIWORD(v27) = 1025;
    v28 = v7;
    LOWORD(v29) = 1025;
    *(_DWORD *)((char *)&v29 + 2) = v9;
    HIWORD(v29) = 1025;
    v30 = v10;
    v31 = 1025;
    v32 = v11;
    v33 = 1025;
    v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending marty device info %{private}d %{private}s %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d", buf, 0x3Cu);
  }
  PB::Writer::Writer((PB::Writer *)&v21);
  KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)buf);
  v13 = *(_DWORD *)this;
  LOBYTE(v31) = v31 | 1;
  *(_DWORD *)&v25[8] = v13;
  sub_100026138((uint64_t)buf);
  std::string::operator=(*(std::string **)v25, (const std::string *)((char *)this + 8));
  v14 = *((_DWORD *)this + 9);
  v15 = *((_DWORD *)this + 10);
  v16 = *((_DWORD *)this + 11);
  HIDWORD(v27) = *((_DWORD *)this + 8);
  v28 = v15;
  HIDWORD(v29) = v14;
  v30 = v16;
  v17 = *((_DWORD *)this + 12);
  LODWORD(v29) = *((_DWORD *)this + 13);
  v18 = *((_DWORD *)this + 14);
  LOBYTE(v31) = v31 | 0xFE;
  v26 = v18;
  LODWORD(v27) = v17;
  KappaCompanionDeviceInfo::writeTo((uint64_t)buf, (PB::Writer *)&v21);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v22, v21 - v22));
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)buf);
  PB::Writer::~Writer((PB::Writer *)&v21);
  return v19;
}

void sub_100024BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void MartyCompanion::deserializeDeviceInfo(MartyCompanion *this, const NSData *a2)
{
  MartyCompanion *v2;
  char v3;
  int v4;
  int v5;
  NSObject *v6;
  void **v7;
  int v8;
  void *__p[2];
  __int128 v10;
  __int128 v11;
  int v12;
  _BYTE v13[8];
  std::string *__str;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  uint8_t v24[32];
  uint8_t buf[4];
  int v26;
  __int16 v27;
  void **v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  v2 = objc_retainAutorelease(this);
  PB::Reader::Reader((PB::Reader *)v24, (const unsigned __int8 *)-[MartyCompanion bytes](v2, "bytes"), (unint64_t)-[MartyCompanion length](v2, "length"));
  KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v13);
  v8 = 0;
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  KappaCompanionDeviceInfo::readFrom((KappaCompanionDeviceInfo *)v13, (PB::Reader *)v24);
  v3 = v23;
  if ((v23 & 1) != 0)
    v8 = v15;
  if (__str)
  {
    std::string::operator=((std::string *)__p, __str);
    v3 = v23;
  }
  v4 = v18;
  v5 = v21;
  if ((v3 & 8) == 0)
    v4 = -1;
  if ((v3 & 0x40) == 0)
    v5 = -1;
  *((_QWORD *)&v10 + 1) = __PAIR64__(v5, v4);
  if ((v3 & 0x10) != 0)
  {
    LODWORD(v11) = v19;
    if ((v3 & 0x80) == 0)
    {
LABEL_11:
      if ((v3 & 4) == 0)
        goto LABEL_12;
      goto LABEL_25;
    }
  }
  else if ((v3 & 0x80) == 0)
  {
    goto LABEL_11;
  }
  DWORD1(v11) = v22;
  if ((v3 & 4) == 0)
  {
LABEL_12:
    if ((v3 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  DWORD2(v11) = v17;
  if ((v3 & 0x20) == 0)
  {
LABEL_13:
    if ((v3 & 2) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_26:
  HIDWORD(v11) = v20;
  if ((v3 & 2) == 0)
  {
LABEL_15:
    if (qword_100387380 != -1)
      dispatch_once(&qword_100387380, &stru_100347E50);
    v6 = qword_100387388;
    if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
    {
      if ((SBYTE7(v10) & 0x80u) == 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      *(_DWORD *)buf = 67176707;
      v26 = v8;
      v27 = 2081;
      v28 = v7;
      v29 = 1025;
      v30 = DWORD2(v10);
      v31 = 1025;
      v32 = v11;
      v33 = 1025;
      v34 = HIDWORD(v10);
      v35 = 1025;
      v36 = DWORD1(v11);
      v37 = 1025;
      v38 = DWORD2(v11);
      v39 = 1025;
      v40 = HIDWORD(v11);
      v41 = 1025;
      v42 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "receiving marty device info %{private}d %{private}s %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d %{private}d", buf, 0x3Cu);
    }
    operator new();
  }
LABEL_14:
  v12 = v16;
  goto LABEL_15;
}

void sub_100024EA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  operator delete();
}

id MartyCompanion::serializeTrigger(float16x4_t *this, const CompanionTrigger *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  __int32 v7;
  float16x4_t v8;
  double v9;
  double v10;
  __int32 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float16x4_t v16;
  int v27;
  int v28;
  int v29;
  float16x4_t v30;
  double v31;
  double v32;
  __int32 v33;
  unsigned int v34;
  __int32 v35;
  __int32 v36;
  int v37;
  int v38;
  float16x4_t v39;
  int v42;
  __int32 v43;
  float16x4_t v44;
  void *v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t __src;
  int v50;
  int v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  __int32 v59;
  __int16 v60;
  _BYTE v61[20];
  double v62;
  float16x4_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  float16x4_t v68;
  _BYTE v69[12];
  unint64_t v70;
  _BYTE v71[10];
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  float16x4_t v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100347E50);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v4 = this[1].u8[0];
    v5 = this[1].u8[1];
    v6 = this[1].u16[1];
    v7 = this[1].i32[1];
    v8 = this[2];
    v9 = *(float *)this[3].i32;
    v10 = *(float *)&this[3].i32[1];
    v11 = this[4].i8[0];
    v12 = this[4].i8[1];
    v13 = this[4].i8[2];
    v14 = this[4].i8[3];
    v15 = this[4].i8[4];
    v16 = this[5];
    _H2 = this[6].i16[0];
    __asm { FCVT            D2, H2 }
    _H3 = this[6].i16[1];
    __asm { FCVT            D3, H3 }
    _H4 = this[6].i16[2];
    __asm { FCVT            D4, H4 }
    v27 = this[6].u8[6];
    v28 = this[6].u8[7];
    v29 = this[7].u16[0];
    v30 = this[8];
    v31 = *(float *)&this[11].i32[1];
    v32 = *(float *)this[12].i32;
    *(_DWORD *)buf = 67180033;
    v53 = v4;
    v54 = 1025;
    v55 = v5;
    v56 = 1025;
    v57 = v6;
    v58 = 1025;
    v59 = v7;
    v60 = 2049;
    *(float16x4_t *)v61 = v8;
    *(_WORD *)&v61[8] = 2049;
    *(double *)&v61[10] = v9;
    *(_WORD *)&v61[18] = 2049;
    v62 = v10;
    v63.i16[0] = 1025;
    *(__int32 *)((char *)v63.i32 + 2) = v11;
    v63.i16[3] = 1025;
    v64 = v12;
    LOWORD(v65) = 1025;
    *(_DWORD *)((char *)&v65 + 2) = v13;
    HIWORD(v65) = 1025;
    v66 = v14;
    LOWORD(v67) = 1025;
    *(_DWORD *)((char *)&v67 + 2) = v15;
    HIWORD(v67) = 2049;
    v68 = v16;
    *(_WORD *)v69 = 2049;
    *(_QWORD *)&v69[2] = _D2;
    *(_WORD *)&v69[10] = 2049;
    v70 = _D3;
    *(_WORD *)v71 = 2049;
    *(_QWORD *)&v71[2] = _D4;
    v72 = 1025;
    v73 = v27;
    v74 = 1025;
    v75 = v28;
    v76 = 1025;
    v77 = v29;
    v78 = 2049;
    v79 = v30;
    v80 = 2049;
    v81 = v31;
    v82 = 2049;
    v83 = v32;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending marty trigger info %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}d %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}f %{private}d %{private}d%{private}d %{private}llu%{private}f %{private}f", buf, 0xAEu);
  }
  PB::Writer::Writer((PB::Writer *)&v47);
  KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)buf);
  v62 = *(double *)this;
  v33 = this[3].i32[1];
  HIDWORD(v65) = this[3].i32[0];
  v34 = this[1].u8[1];
  v35 = this[1].u16[1];
  *(_DWORD *)&v69[4] = this[1].u8[0];
  v68.i32[0] = v35;
  v36 = this[1].i32[1];
  v63 = this[2];
  HIDWORD(v67) = v33;
  *(_DWORD *)&v69[8] = this[4].i8[0];
  v70 = __PAIR64__(v36, v34);
  LODWORD(v67) = this[4].i8[1];
  v37 = this[4].i8[2];
  *(_QWORD *)v71 = __PAIR64__(*(unsigned int *)&v71[4], this[4].i8[3]) | 0x3E77E00000000;
  v38 = this[4].i8[4];
  v64 = v37;
  LODWORD(v65) = v38;
  v39 = this[5];
  __src = vcvtq_f32_f16(this[6]).u64[0];
  _H0 = this[6].i16[2];
  __asm { FCVT            S0, H0 }
  *(float16x4_t *)&v61[12] = v39;
  v50 = _S0;
  sub_100020CE4((char *)&v54, (char *)&__src, (uint64_t)&v51, 3uLL);
  v42 = this[6].u8[6];
  v43 = this[7].u16[0];
  v66 = this[6].u8[7];
  v68.i32[1] = v43;
  *(_DWORD *)v69 = v42;
  v44 = this[8];
  *(_DWORD *)&v71[4] |= 0x1881u;
  *(float16x4_t *)&v61[4] = v44;
  KappaTriggerSample::writeTo((uint64_t)buf, (PB::Writer *)&v47);
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v48, v47 - v48));
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)buf);
  PB::Writer::~Writer((PB::Writer *)&v47);
  return v45;
}

void sub_100025208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)va1);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void MartyCompanion::deserializeTrigger(MartyCompanion *this, const NSData *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  float v8;
  float v9;
  int v10;
  uint64_t v11;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  NSObject *v44;
  int v45;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  MartyCompanion *v60;
  int v61;
  unsigned __int8 v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  void *__p;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int16 v77;
  _BYTE v78[8];
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  float v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  float v89;
  unsigned __int16 v90;
  unsigned __int16 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  int v96;
  unsigned __int8 v97;
  int v98;
  uint8_t v99[32];
  uint8_t buf[4];
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  int v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  __int16 v120;
  int v121;
  __int16 v122;
  int v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;

  v60 = objc_retainAutorelease(this);
  PB::Reader::Reader((PB::Reader *)v99, (const unsigned __int8 *)-[MartyCompanion bytes](v60, "bytes"), (unint64_t)-[MartyCompanion length](v60, "length"));
  KappaTriggerSample::KappaTriggerSample((KappaTriggerSample *)v78);
  v76 = 0;
  v77 = 0;
  v140 = 0u;
  v141 = 0u;
  v142 = 0u;
  KappaTriggerSample::readFrom((KappaTriggerSample *)v78, (PB::Reader *)v99);
  v2 = v98;
  v3 = v93;
  v4 = v95;
  v5 = v90;
  v6 = v96;
  if ((v98 & 8) != 0)
    v7 = v83;
  else
    v7 = 0;
  if ((v98 & 0x40) != 0)
    v8 = v86;
  else
    v8 = 0.0;
  if ((v98 & 0x200) != 0)
    v9 = v89;
  else
    v9 = 0.0;
  v10 = v94;
  v71 = v88;
  v65 = v97;
  v67 = v84;
  v63 = v85;
  if ((v98 & 2) != 0)
    v11 = v82;
  else
    v11 = 0;
  __p = 0;
  v74 = 0;
  v75 = 0;
  sub_100026198(&__p, v79, v80, (v80 - (uint64_t)v79) >> 2);
  v54 = v10;
  v55 = v5;
  v61 = v4;
  v69 = v3;
  v56 = v6;
  v58 = v11;
  v59 = v7;
  _H11 = 0;
  _H12 = 0;
  _H13 = 0;
  if (v74 - (_QWORD)__p == 12)
  {
    _S0 = *(_DWORD *)__p;
    _S1 = *((_DWORD *)__p + 1);
    __asm
    {
      FCVT            H11, S0
      FCVT            H12, S1
    }
    _S0 = *((_DWORD *)__p + 2);
    __asm { FCVT            H13, S0 }
  }
  v22 = v2 << 18;
  v23 = v2 << 16;
  v24 = v2 << 21;
  v25 = v2 << 17;
  v26 = v2 << 23;
  v27 = v2 << 27;
  v28 = v2 << 14;
  v29 = v2 << 26;
  v30 = v2 << 15;
  v31 = v98 << 19;
  v32 = v92;
  v33 = v87;
  v34 = v91;
  v35 = v98 << 24;
  v36 = v98 << 20;
  if ((v98 & 1) != 0)
    v37 = v81;
  else
    v37 = 0;
  v57 = v37;
  if (qword_100387380 != -1)
  {
    v52 = v25;
    v53 = v30;
    v50 = v27;
    v51 = v26;
    v49 = v28;
    dispatch_once(&qword_100387380, &stru_100347E50);
    v28 = v49;
    v27 = v50;
    v26 = v51;
    v25 = v52;
    v30 = v53;
  }
  v38 = v69 & (v22 >> 31);
  v39 = v61 & (v23 >> 31);
  v40 = v55 & (v24 >> 31);
  v41 = v54 & (v25 >> 31);
  v68 = v67 & (v27 >> 31);
  v70 = v71 & (v26 >> 31);
  v66 = v65 & (v28 >> 31);
  v62 = v39;
  v64 = v63 & (v29 >> 31);
  v42 = v32 & (v31 >> 31);
  v43 = v33 & (v35 >> 31);
  v72 = v34 & (v36 >> 31);
  v44 = qword_100387388;
  v45 = v56 & (v30 >> 31);
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67179521;
    v101 = v38;
    v102 = 1025;
    v103 = v62;
    v104 = 1025;
    v105 = (unsigned __int16)v40;
    __asm
    {
      FCVT            D2, H11
      FCVT            D3, H12
    }
    v106 = 1025;
    __asm { FCVT            D4, H13 }
    v107 = v45;
    v108 = 2049;
    v109 = v59;
    v110 = 2049;
    v111 = v8;
    v112 = 2049;
    v113 = v9;
    v114 = 1025;
    v115 = (char)v41;
    v116 = 1025;
    v117 = (char)v70;
    v118 = 1025;
    v119 = (char)v68;
    v120 = 1025;
    v121 = (char)v66;
    v122 = 1025;
    v123 = (char)v64;
    v124 = 2049;
    v125 = v58;
    v126 = 2049;
    v127 = _D2;
    v128 = 2049;
    v129 = _D3;
    v130 = 2049;
    v131 = _D4;
    v132 = 1025;
    v133 = v42;
    v134 = 1025;
    v135 = v43;
    v136 = 1025;
    v137 = (unsigned __int16)v72;
    v138 = 2049;
    v139 = v57;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "receiving marty trigger info %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}d %{private}d %{private}d %{private}d %{private}d %{private}llu %{private}f %{private}f %{private}f %{private}d %{private}d%{private}d %{private}llu", buf, 0x9Au);
  }
  operator new();
}

void sub_100025700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
    operator delete(__p);
  KappaTriggerSample::~KappaTriggerSample((KappaTriggerSample *)&a27);

  _Unwind_Resume(a1);
}

id MartyCompanion::serializeCompanionUUID(const std::string *this, const CompanionUUID *a2)
{
  NSObject *v3;
  const std::string *v4;
  void *v5;
  uint64_t v7;
  std::string *v8;
  __int128 buf;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100347E50);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = this;
    else
      v4 = (const std::string *)this->__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "sending marty companion uuid %{public}s", (uint8_t *)&buf, 0xCu);
  }
  PB::Writer::Writer((PB::Writer *)&buf);
  MartyCompanionUUID::MartyCompanionUUID((MartyCompanionUUID *)&v7);
  sub_100026138((uint64_t)&v7);
  std::string::operator=(v8, this);
  MartyCompanionUUID::writeTo((uint64_t)&v7, (PB::Writer *)&buf);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *((_QWORD *)&buf + 1), (_QWORD)buf - *((_QWORD *)&buf + 1)));
  MartyCompanionUUID::~MartyCompanionUUID((MartyCompanionUUID *)&v7);
  PB::Writer::~Writer((PB::Writer *)&buf);
  return v5;
}

void sub_10002587C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  MartyCompanionUUID::~MartyCompanionUUID((MartyCompanionUUID *)&a9);
  PB::Writer::~Writer((PB::Writer *)&a11);
  _Unwind_Resume(a1);
}

void MartyCompanion::deserializeCompanionUUID(MartyCompanion *this, const NSData *a2)
{
  MartyCompanion *v2;
  NSObject *v3;
  std::string *v4;
  std::string v5;
  _BYTE v6[8];
  std::string *__str;
  uint8_t v8[32];
  uint8_t buf[4];
  std::string *v10;

  v2 = objc_retainAutorelease(this);
  PB::Reader::Reader((PB::Reader *)v8, (const unsigned __int8 *)-[MartyCompanion bytes](v2, "bytes"), (unint64_t)-[MartyCompanion length](v2, "length"));
  MartyCompanionUUID::MartyCompanionUUID((MartyCompanionUUID *)v6);
  memset(&v5, 0, sizeof(v5));
  MartyCompanionUUID::readFrom((MartyCompanionUUID *)v6, (PB::Reader *)v8);
  if (__str)
    std::string::operator=(&v5, __str);
  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100347E50);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v4 = &v5;
    if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (std::string *)v5.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446210;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "receiving marty companion uuid %{public}s", buf, 0xCu);
  }
  operator new();
}

void sub_100025A44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  operator delete();
}

id MartyCompanion::serializeDeviceInfoRequest(int *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  void *v5;
  _DWORD v7[3];
  char v8;
  uint8_t buf[8];
  uint64_t v10;

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100347E50);
  v2 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v3 = *a1;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending marty requesting device info nop %d", buf, 8u);
  }
  PB::Writer::Writer((PB::Writer *)buf);
  sub_10000A914((uint64_t)v7);
  v4 = *a1;
  v8 |= 1u;
  v7[2] = v4;
  sub_10000ACF8((uint64_t)v7, (PB::Writer *)buf);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v10, *(_QWORD *)buf - v10));
  PB::Base::~Base((PB::Base *)v7);
  PB::Writer::~Writer((PB::Writer *)buf);
  return v5;
}

void sub_100025BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  PB::Base::~Base((PB::Base *)&a9);
  PB::Writer::~Writer((PB::Writer *)&a11);
  _Unwind_Resume(a1);
}

void MartyCompanion::deserializeDeviceInfoRequest(MartyCompanion *this, const NSData *a2)
{
  MartyCompanion *v2;
  int v3;
  int v4;
  int v5;
  NSObject *v6;
  _DWORD v7[3];
  unsigned __int8 v8;
  uint8_t v9[32];
  uint8_t buf[4];
  int v11;

  v2 = objc_retainAutorelease(this);
  PB::Reader::Reader((PB::Reader *)v9, (const unsigned __int8 *)-[MartyCompanion bytes](v2, "bytes"), (unint64_t)-[MartyCompanion length](v2, "length"));
  sub_10000A914((uint64_t)v7);
  sub_10000AAC4((uint64_t)v7, (PB::Reader *)v9);
  v3 = v8 << 31 >> 31;
  v4 = v7[2];
  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100347E50);
  v5 = v3 & v4;
  v6 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "receiving marty requesting device info nop %d", buf, 8u);
  }
  operator new();
}

void sub_100025D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  PB::Base::~Base((PB::Base *)&a9);

  _Unwind_Resume(a1);
}

id MartyCompanion::serializeRequestUpload(const std::string *a1)
{
  NSObject *v2;
  const std::string *v3;
  int data;
  int v5;
  void *v6;
  _BYTE v8[8];
  std::string *v9;
  int v10;
  char v11;
  _BYTE buf[18];

  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100347E50);
  v2 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v3 = a1;
    else
      v3 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    data = (int)a1[1].__r_.__value_.__l.__data_;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = data;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending marty upload request uuid %{public}s %{public}d", buf, 0x12u);
  }
  PB::Writer::Writer((PB::Writer *)buf);
  sub_100010AE8((uint64_t)v8);
  sub_100026138((uint64_t)v8);
  std::string::operator=(v9, a1);
  v5 = (int)a1[1].__r_.__value_.__l.__data_;
  v11 |= 1u;
  v10 = v5;
  sub_100011084((uint64_t)v8, (PB::Writer *)buf);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)&buf[8], *(_QWORD *)buf - *(_QWORD *)&buf[8]));
  sub_100010B38((PB::Base *)v8);
  PB::Writer::~Writer((PB::Writer *)buf);
  return v6;
}

void sub_100025EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100010B38((PB::Base *)va);
  PB::Writer::~Writer((PB::Writer *)va1);
  _Unwind_Resume(a1);
}

void MartyCompanion::deserializeRequestUpload(MartyCompanion *this, const NSData *a2)
{
  MartyCompanion *v2;
  NSObject *v3;
  std::string *v4;
  std::string v5;
  int v6;
  _BYTE v7[8];
  std::string *__str;
  int v9;
  char v10;
  uint8_t v11[32];
  uint8_t buf[4];
  std::string *v13;
  __int16 v14;
  int v15;

  v2 = objc_retainAutorelease(this);
  PB::Reader::Reader((PB::Reader *)v11, (const unsigned __int8 *)-[MartyCompanion bytes](v2, "bytes"), (unint64_t)-[MartyCompanion length](v2, "length"));
  sub_100010AE8((uint64_t)v7);
  memset(&v5, 0, sizeof(v5));
  v6 = 0;
  sub_100010DE8((uint64_t)v7, (PB::Reader *)v11);
  if (__str)
    std::string::operator=(&v5, __str);
  if ((v10 & 1) != 0)
    v6 = v9;
  if (qword_100387380 != -1)
    dispatch_once(&qword_100387380, &stru_100347E50);
  v3 = qword_100387388;
  if (os_log_type_enabled((os_log_t)qword_100387388, OS_LOG_TYPE_DEBUG))
  {
    v4 = &v5;
    if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (std::string *)v5.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446466;
    v13 = v4;
    v14 = 1026;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "receiving marty upload request uuid %{public}s %{public}d", buf, 0x12u);
  }
  operator new();
}

void sub_1000260B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  operator delete();
}

void sub_100026108(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Companion");
  v2 = (void *)qword_100387388;
  qword_100387388 = (uint64_t)v1;

}

uint64_t sub_100026138(uint64_t result)
{
  if (!*(_QWORD *)(result + 8))
    operator new();
  return result;
}

_QWORD *sub_100026198(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100020DEC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1000261F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CLKappaDeescalatorAOI::CLKappaDeescalatorAOI(CLKappaDeescalatorAOI *this)
{
  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = off_100347E80;
  *((int32x2_t *)this + 9) = vdup_n_s32(0x447A0000u);
  *((_DWORD *)this + 20) = 0;
  CSKappaAOIBoost::CSKappaAOIBoost((CLKappaDeescalatorAOI *)((char *)this + 88));
}

void sub_1000264F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void **v12;
  CSKappaAOIBoost *v13;
  void *v14;

  CSKappaAOIBoost::~CSKappaAOIBoost(v13);
  CLKappaDeescalator::~CLKappaDeescalator(v12);
  _Unwind_Resume(a1);
}

unint64_t CLKappaDeescalatorAOI::setupForceControls(CLKappaDeescalatorAOI *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceAOI");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceAOI");
  *((_DWORD *)this + 9) = result;
  return result;
}

double CLKappaDeescalatorAOI::updateWithCurrentLocation(CLKappaDeescalatorAOI *this, const CSSPUGps_Struct *a2)
{
  double result;

  result = *(double *)&a2->latitude;
  *((double *)this + 9) = result;
  return result;
}

void CLKappaDeescalatorAOI::updateWithTrigger(CLKappaDeescalatorAOI *this, const TriggerSample *a2)
{
  NSObject *v4;
  int path;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100347F08);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    path = a2->path;
    v6 = BYTE2(a2[1].rmsSN);
    v7[0] = 67109376;
    v7[1] = path;
    v8 = 1024;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "AOI feedTrigger path %u martyPath %u", (uint8_t *)v7, 0xEu);
  }
  if (a2->btHint == 1)
    ++*((_DWORD *)this + 20);
}

uint64_t CLKappaDeescalatorAOI::isNearAOI(CSKappaAOIBoost::CSKappaAOIBoostImpl **this, float a2, float a3, int a4)
{
  NSObject *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  __int16 v17;
  uint8_t v18[16];
  __int16 v19;
  __int16 v20;
  uint8_t buf[16];

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100347F08);
  v8 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[SC] isNearAOI", buf, 2u);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "DisableKappaAOICheck", *((unsigned __int8 *)this + 32)));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v11 = objc_msgSend(v10, "BOOLForKey:", v9);

  if (v11)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100347F08);
    v12 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v20 = 0;
      v13 = "[SC] KappaAOI mitigation disabled, continue with escalation choice";
      v14 = (uint8_t *)&v20;
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, v13, v14, 2u);
    }
  }
  else if (a4)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100347F08);
    v12 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v19 = 0;
      v13 = "[SC] Trigger with BTHint found, continue with escalation choice";
      v14 = (uint8_t *)&v19;
      goto LABEL_26;
    }
  }
  else
  {
    if (a2 != 0.0 && a3 != 0.0)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_100347F08);
      v15 = qword_100387318;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[SC] Checking if near kappaAOI", v18, 2u);
      }
      CSKappaAOIBoost::isInAOI(this + 11, a2, a3);
    }
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100347F08);
    v12 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v17 = 0;
      v13 = "[SC] Not near kappaAOI on list, continue with escalation choice";
      v14 = (uint8_t *)&v17;
      goto LABEL_26;
    }
  }

  return 0;
}

void sub_100026A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CLKappaDeescalatorAOI::onEvaluateFollowingEscalation(CLKappaDeescalatorAOI *this)
{
  if (CLKappaDeescalatorAOI::isNearAOI((CSKappaAOIBoost::CSKappaAOIBoostImpl **)this, *((float *)this + 18), *((float *)this + 19), *((_DWORD *)this + 20)))return 4;
  else
    return 0;
}

void sub_100026A44(void **a1)
{
  *a1 = off_100347E80;
  CSKappaAOIBoost::~CSKappaAOIBoost((CSKappaAOIBoost *)(a1 + 11));
  CLKappaDeescalator::~CLKappaDeescalator(a1);
}

void sub_100026A74(void **a1)
{
  *a1 = off_100347E80;
  CSKappaAOIBoost::~CSKappaAOIBoost((CSKappaAOIBoost *)(a1 + 11));
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

uint64_t sub_100026AB8()
{
  return 6;
}

uint64_t sub_100026AC0()
{
  return 6;
}

void sub_100026ACC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

id CLKappaDeescalatorStaticGps::setupForceControls(CLKappaDeescalatorStaticGps *this)
{
  id result;

  *((_DWORD *)this + 9) = CLKappaDeescalator::shouldForceDeescalate(this, "ForceStaticGps");
  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceStaticGps");
  *((_BYTE *)this + 104) = CLKappaDeescalator::shouldForceEscalateGPS(this);
  result = CLKappaDeescalator::shouldTurnOffTwoLevelDeescalator(this);
  *((_BYTE *)this + 105) = (_BYTE)result;
  return result;
}

void CLKappaDeescalatorStaticGps::CLKappaDeescalatorStaticGps(CLKappaDeescalatorStaticGps *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = &off_100347F38;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_WORD *)this + 40) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_WORD *)this + 52) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  *(_QWORD *)((char *)this + 89) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 7;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 7;
  }
  strcpy(v2, "de-SGPS");
}

uint64_t CLKappaDeescalatorStaticGps::assertReady(CLKappaDeescalatorStaticGps *this, uint64_t a2, const char *a3)
{
  const char *v4;
  const char *v5;
  _QWORD *v6;

  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 76), (BOOL)"[SC] Static GPS missing low speed config", a3);
  CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 81), (BOOL)"[SC] Static GPS missing stationary count config", v4);
  v6 = (_QWORD *)((char *)this + 8);
  if (!*((_BYTE *)this + 16))
    v6 = &unk_1002E5A10;
  return CLKappaDeescalator::raiseUnless(*v6 != 0, (BOOL)"[SC] Static GPS missing crashtimestamp", v5);
}

uint64_t CLKappaDeescalatorStaticGps::setConfig(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 72) = *(_DWORD *)a2;
  *(_BYTE *)(result + 76) = 1;
  *(_WORD *)(result + 80) = *(unsigned __int8 *)(a2 + 4) | 0x100;
  return result;
}

uint64_t CLKappaDeescalatorStaticGps::updateCountTotal(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 92);
  if (!*(_BYTE *)(this + 96))
    v1 += *(_DWORD *)(this + 100);
  *(_DWORD *)(this + 100) = v1;
  return this;
}

double CLKappaDeescalatorStaticGps::updateWithFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)(a2 + 28);
  *(double *)(a1 + 84) = result;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t CLKappaDeescalatorStaticGps::onEvaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalatorStaticGps *this)
{
  unsigned int v1;
  uint64_t v2;

  if (*((_BYTE *)this + 81))
    v1 = *((unsigned __int8 *)this + 80);
  else
    v1 = 0;
  v2 = 2;
  if (!*((_BYTE *)this + 104))
  {
    if (*((_DWORD *)this + 25) >= v1)
      return 2;
    else
      return 3;
  }
  return v2;
}

uint64_t CLKappaDeescalatorStaticGps::onEvaluateAtBoundary(CLKappaDeescalatorStaticGps *this)
{
  unsigned int v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *((unsigned __int8 *)this + 76);
  if (*((_BYTE *)this + 76))
    v1 = *((_DWORD *)this + 18);
  if (*((_BYTE *)this + 104))
    return 2;
  if (*((_DWORD *)this + 22) < v1)
    return 4;
  if (!*((_BYTE *)this + 105))
    return 2;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100347FC0);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "turning off two level- escalating", v4, 2u);
  }
  return 5;
}

uint64_t CLKappaDeescalatorStaticGps::onPreviousEpochMadeDecision(uint64_t this)
{
  *(_BYTE *)(this + 96) = 0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t CLKappaDeescalatorStaticGps::onEarlyCrashDetected(uint64_t this)
{
  *(_DWORD *)(this + 100) = 0;
  return this;
}

void sub_100026DEC(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_100026E10(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void CLKappaDeescalator::~CLKappaDeescalator(void **this)
{
  *this = off_100347FF0;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
}

{
  *this = off_100347FF0;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
}

{
  *this = off_100347FF0;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  operator delete();
}

uint64_t CLKappaDeescalator::earlyCrashDetected(CLKappaDeescalator *this, uint64_t a2)
{
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 16) = 1;
  *((_QWORD *)this + 3) = 0;
  return (*(uint64_t (**)(CLKappaDeescalator *))(*(_QWORD *)this + 56))(this);
}

uint64_t CLKappaDeescalator::updateWithOption(uint64_t result, int a2)
{
  if (a2 != 6)
  {
    *(_DWORD *)(result + 24) = a2;
    if (a2 == 4)
      ++*(_DWORD *)(result + 28);
  }
  return result;
}

uint64_t CLKappaDeescalator::evaluateAtMinHoldDuration(CLKappaDeescalator *this)
{
  uint64_t result;
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  (*(void (**)(CLKappaDeescalator *))(*(_QWORD *)this + 48))(this);
  result = (*(uint64_t (**)(CLKappaDeescalator *))(*(_QWORD *)this + 64))(this);
  if (*((_BYTE *)this + 40))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v4 = (_QWORD *)*v4;
      v12 = 136315138;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop at min hold duration", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 1)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v5 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v6 = (_QWORD *)*v6;
      v12 = 136315138;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate at min hold duration", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if ((_DWORD)result == 6)
    return result;
  if ((_DWORD)result == 5)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v10 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v11 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v11 = (_QWORD *)*v11;
      v12 = 136315138;
      v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate at min hold duration", (uint8_t *)&v12, 0xCu);
    }
    result = 5;
    goto LABEL_33;
  }
  if ((_DWORD)result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100348070);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v8 = (_QWORD *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      v8 = (_QWORD *)*v8;
    v12 = 136315138;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate at min hold duration", (uint8_t *)&v12, 0xCu);
  }
  result = 4;
  v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

id sub_100027214()
{
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100348070);
  return (id)qword_100387318;
}

uint64_t CLKappaDeescalator::evaluateAtSecondDeescalationOpportunity(CLKappaDeescalator *this)
{
  uint64_t result;
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  (*(void (**)(CLKappaDeescalator *))(*(_QWORD *)this + 48))(this);
  result = (*(uint64_t (**)(CLKappaDeescalator *))(*(_QWORD *)this + 72))(this);
  if (*((_BYTE *)this + 40))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v4 = (_QWORD *)*v4;
      v12 = 136315138;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop at second opportunity", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v5 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v6 = (_QWORD *)*v6;
      v12 = 136315138;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate at second opportunity", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if ((_DWORD)result == 6)
    return result;
  if ((_DWORD)result == 5)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v10 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v11 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v11 = (_QWORD *)*v11;
      v12 = 136315138;
      v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate at second opportunity", (uint8_t *)&v12, 0xCu);
    }
    result = 5;
    goto LABEL_33;
  }
  if ((_DWORD)result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100348070);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v8 = (_QWORD *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      v8 = (_QWORD *)*v8;
    v12 = 136315138;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate at second opportunity", (uint8_t *)&v12, 0xCu);
  }
  result = 4;
  v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

uint64_t CLKappaDeescalator::evaluateBetweenMinAndMaxHoldDuration(CLKappaDeescalator *this)
{
  uint64_t result;
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  (*(void (**)(CLKappaDeescalator *))(*(_QWORD *)this + 48))(this);
  result = (*(uint64_t (**)(CLKappaDeescalator *))(*(_QWORD *)this + 80))(this);
  if (*((_BYTE *)this + 40))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v4 = (_QWORD *)*v4;
      v12 = 136315138;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop between min/max", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 3)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v5 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v6 = (_QWORD *)*v6;
      v12 = 136315138;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate between min/max", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if ((_DWORD)result == 6)
    return result;
  if ((_DWORD)result == 5)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v10 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v11 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v11 = (_QWORD *)*v11;
      v12 = 136315138;
      v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate between min/max", (uint8_t *)&v12, 0xCu);
    }
    result = 5;
    goto LABEL_33;
  }
  if ((_DWORD)result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100348070);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v8 = (_QWORD *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      v8 = (_QWORD *)*v8;
    v12 = 136315138;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate between min/max", (uint8_t *)&v12, 0xCu);
  }
  result = 4;
  v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

uint64_t CLKappaDeescalator::evaluateAtBoundary(CLKappaDeescalator *this)
{
  uint64_t result;
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  (*(void (**)(CLKappaDeescalator *))(*(_QWORD *)this + 48))(this);
  result = (*(uint64_t (**)(CLKappaDeescalator *))(*(_QWORD *)this + 88))(this);
  if (*((_BYTE *)this + 40))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v4 = (_QWORD *)*v4;
      v12 = 136315138;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop at boundary", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 4)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v5 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v6 = (_QWORD *)*v6;
      v12 = 136315138;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate at boundary", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if ((_DWORD)result == 6)
    return result;
  if ((_DWORD)result == 5)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v10 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v11 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v11 = (_QWORD *)*v11;
      v12 = 136315138;
      v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate at boundary", (uint8_t *)&v12, 0xCu);
    }
    result = 5;
    goto LABEL_33;
  }
  if ((_DWORD)result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100348070);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v8 = (_QWORD *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      v8 = (_QWORD *)*v8;
    v12 = 136315138;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate at boundary", (uint8_t *)&v12, 0xCu);
  }
  result = 4;
  v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

uint64_t CLKappaDeescalator::evaluateFollowingEscalation(CLKappaDeescalator *this)
{
  uint64_t result;
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  (*(void (**)(CLKappaDeescalator *))(*(_QWORD *)this + 48))(this);
  result = (*(uint64_t (**)(CLKappaDeescalator *))(*(_QWORD *)this + 96))(this);
  if (*((_BYTE *)this + 40))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v4 = (_QWORD *)*v4;
      v12 = 136315138;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%s] forcing noop following escalation", (uint8_t *)&v12, 0xCu);
    }
    return 6;
  }
  if (*((_DWORD *)this + 9) == 5)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v5 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v6 = (_QWORD *)*v6;
      v12 = 136315138;
      v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate following escalation", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_19;
  }
  if ((_DWORD)result == 6)
    return result;
  if ((_DWORD)result == 5)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_100348070);
    v10 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
    {
      v11 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v11 = (_QWORD *)*v11;
      v12 = 136315138;
      v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[%s] escalate following escalation", (uint8_t *)&v12, 0xCu);
    }
    result = 5;
    goto LABEL_33;
  }
  if ((_DWORD)result != 4)
  {
LABEL_33:
    *((_DWORD *)this + 6) = result;
    return result;
  }
LABEL_19:
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100348070);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v8 = (_QWORD *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      v8 = (_QWORD *)*v8;
    v12 = 136315138;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[%s] deescalate following escalation", (uint8_t *)&v12, 0xCu);
  }
  result = 4;
  v9 = *((_DWORD *)this + 7) + 1;
  *((_DWORD *)this + 6) = 4;
  *((_DWORD *)this + 7) = v9;
  return result;
}

uint64_t CLKappaDeescalator::previousEpochMadeDecision(CLKappaDeescalator *this)
{
  if (*((_BYTE *)this + 16))
    *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  return (*(uint64_t (**)(CLKappaDeescalator *))(*(_QWORD *)this + 104))(this);
}

uint64_t CLKappaDeescalator::assertCrashTimestamp(CLKappaDeescalator *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 16), (BOOL)"Deescalator missing crashTimestamp", a3);
}

uint64_t CLKappaDeescalator::raiseUnless(uint64_t this, BOOL a2, const char *a3)
{
  uint64_t v3;

  if ((this & 1) == 0)
  {
    v3 = sub_100028958();
    return CLKappaDeescalator::getHighSpeedDetectedStats(v3);
  }
  return this;
}

uint64_t CLKappaDeescalator::getHighSpeedDetectedStats(unsigned __int16 *a1)
{
  unint64_t v2;
  char v3;

  if (!a1[1])
    return 0;
  v2 = 0;
  v3 = 0;
  do
  {
    if (*(_BYTE *)sub_100027E40(a1, v2))
      v3 = 1;
    ++v2;
  }
  while (v2 < a1[1]);
  return v3 & 1;
}

uint64_t sub_100027E40(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  int v16;

  v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *((_DWORD *)a1 + 1);
      v9 = 134218754;
      v10 = Current;
      v11 = 2080;
      v12 = "const T &CMQueue<BOOL>::operator[](const size_t) const [T = BOOL]";
      v13 = 2048;
      v14 = a2;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  v5 = *a1 + a2;
  if (v5 < v4)
    v4 = 0;
  return (uint64_t)a1 + v5 - v4 + 8;
}

uint64_t CLKappaDeescalator::isDecidedForOption(unsigned int a1)
{
  return (a1 < 6) & (0x32u >> a1);
}

id CLKappaDeescalator::constructModePrefixKey(CLKappaDeescalator *this, const char *a2)
{
  CLKappaDeescalator *v3;
  const NSString *v4;
  const NSString *v5;

  if (a2)
    return +[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", a2, *((unsigned __int8 *)this + 32));
  v3 = (CLKappaDeescalator *)sub_100028AC8();
  return (id)CLKappaDeescalator::constructModePostKey(v3, v4, v5);
}

id CLKappaDeescalator::constructModePostKey(CLKappaDeescalator *this, NSString *a2, NSString *a3)
{
  NSString *v4;
  const NSString *v5;
  NSString *v6;
  id v7;
  id v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  int v15;
  id v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  id v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;

  v4 = a2;
  v5 = a3;
  v6 = (NSString *)v5;
  if (!v4)
  {
    v9 = sub_100027214();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "key";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    v11 = sub_100027214();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_signpost_enabled(v12))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "key";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "key is null", "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    v13 = sub_100027214();
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "key";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v15 = 237;
LABEL_18:

    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CLKappaDeescalator.mm", v15, "constructModePostKey");
    __break(1u);
  }
  if (!v5)
  {
    v16 = sub_100027214();
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "postfix";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"postfix is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    v18 = sub_100027214();
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_signpost_enabled(v19))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "postfix";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "postfix is null", "{\"msg%{public}.0s\":\"postfix is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    v20 = sub_100027214();
    v14 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "postfix";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"postfix is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v15 = 238;
    goto LABEL_18;
  }
  v7 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@%@"), v4, v5);

  return v7;
}

void sub_1000283C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t CLKappaDeescalator::shouldForceDeescalate(CLKappaDeescalator *this, const char *a2)
{
  CLKappaDeescalator *v2;
  void *v3;
  void *v4;
  CLKappaDeescalator *v5;
  unint64_t v6;
  int v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  int v14;
  _QWORD *v15;
  __int16 v16;
  int v17;

  if (!a2)
  {
    sub_100028BE4();
    __break(1u);
LABEL_14:
    dispatch_once(&qword_100387310, &stru_100348070);
    goto LABEL_7;
  }
  v5 = this;
  v2 = (CLKappaDeescalator *)+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", a2, *((unsigned __int8 *)this + 32));
  v8 = CLKappaDeescalator::constructModePostKey(v2, (NSString *)v2, CFSTR("Deescalate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v9 = (unint64_t)objc_msgSend(v4, "getIntegerDefault:", v3);
  v6 = v9;
  v10 = 0;
  if ((v9 & 0xFF00000000) != 0)
    v7 = v9;
  else
    v7 = 0;
  if ((v7 - 7) < 0xFFFFFFFA)
    goto LABEL_12;
  if (qword_100387310 != -1)
    goto LABEL_14;
LABEL_7:
  v11 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v12 = (_QWORD *)((char *)v5 + 48);
    if (*((char *)v5 + 71) < 0)
      v12 = (_QWORD *)*v12;
    v14 = 136315394;
    v15 = v12;
    v16 = 1024;
    v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[%s] forcing deescalate at %d", (uint8_t *)&v14, 0x12u);
  }
  v10 = v6;
LABEL_12:

  return v10;
}

void sub_100028564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL CLKappaDeescalator::shouldForceNoop(CLKappaDeescalator *this, const char *a2)
{
  void *v2;
  void *v3;
  CLKappaDeescalator *v4;
  char v5;
  CLKappaDeescalator *v6;
  id v7;
  unsigned int v8;
  NSObject *v9;
  _QWORD *v10;
  int v12;
  _QWORD *v13;

  if (!a2)
  {
    sub_100028D08();
    __break(1u);
LABEL_13:
    dispatch_once(&qword_100387310, &stru_100348070);
    goto LABEL_7;
  }
  v4 = this;
  v6 = +[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", a2, *((unsigned __int8 *)this + 32));
  v7 = CLKappaDeescalator::constructModePostKey(v6, (NSString *)v6, CFSTR("Noop"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v8 = (unsigned __int16)objc_msgSend(v3, "getBooleanDefault:", v2);
  if (v8 <= 0x100)
    v5 = 0;
  else
    v5 = v8;
  if (!v5)
    goto LABEL_11;
  if (qword_100387310 != -1)
    goto LABEL_13;
LABEL_7:
  v9 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v10 = (_QWORD *)((char *)v4 + 48);
    if (*((char *)v4 + 71) < 0)
      v10 = (_QWORD *)*v10;
    v12 = 136315138;
    v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[%s] forcing noop behavior", (uint8_t *)&v12, 0xCu);
  }
LABEL_11:

  return v5 != 0;
}

void sub_1000286F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CLKappaDeescalator::shouldForceEscalateGPS(CLKappaDeescalator *this)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("ForceEscalateGPS")));
  if (v2)
    v3 = objc_msgSend(v1, "BOOLForKey:", CFSTR("ForceEscalateGPS"));
  else
    v3 = 0;

  return v3;
}

void sub_10002878C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id CLKappaDeescalator::shouldTurnOffTwoLevelDeescalator(CLKappaDeescalator *this)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("TurnOffTwoLevelSense")));
  if (v2)
    v3 = objc_msgSend(v1, "BOOLForKey:", CFSTR("TurnOffTwoLevelSense"));
  else
    v3 = 0;

  return v3;
}

void sub_10002881C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL CLKappaDeescalator::shouldDeescalateForOption(int a1)
{
  return a1 == 4;
}

_DWORD *CLKappaDeescalationDecision::reset(_DWORD *this)
{
  *this = 0;
  return this;
}

_DWORD *CLKappaDeescalationDecision::update(_DWORD *result, int a2)
{
  if ((a2 - 4) < 2 || a2 == 2)
    goto LABEL_6;
  if (a2 == 3 && *result == 2)
  {
    a2 = 0;
LABEL_6:
    *result = a2;
  }
  return result;
}

void sub_10002888C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_1000288F0(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x26u);
}

void sub_100028910(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x26u);
}

void sub_100028924(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x26u);
}

BOOL sub_100028938(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_FAULT);
}

BOOL sub_100028944(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_INFO);
}

BOOL sub_100028950(os_log_t log)
{
  return os_signpost_enabled(log);
}

uint64_t sub_100028958()
{
  id v0;
  NSObject *v1;
  id v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint8_t buf[56];

  v0 = sub_100027214();
  v1 = objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
  {
    sub_1000288BC();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed assert in raiseUnless(): \", \"errorMessage\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  v2 = sub_100027214();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_signpost_enabled(v3))
  {
    sub_1000288BC();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed assert in raiseUnless(): ", "{\"msg%{public}.0s\":\"Failed assert in raiseUnless(): \", \"errorMessage\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  v4 = sub_100027214();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    sub_1000288BC();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Failed assert in raiseUnless(): \", \"errorMessage\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
  }

  v6 = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CLKappaDeescalator.mm", 221, "raiseUnless");
  return sub_100028AC8(v6);
}

uint64_t sub_100028AC8()
{
  void *v0;
  id v1;
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t v30;

  v1 = sub_100027214();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (sub_100028938(v2))
  {
    sub_10000A8E8();
    sub_100028924((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v26, v27, v28, v29, v30);
  }

  v9 = sub_100027214();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (sub_100028950(v10))
  {
    sub_10000A8E8();
    sub_1000288F0((void *)&_mh_execute_header, v11, v12, v13, "key is null", "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v26, v27, v28, v29, v30);
  }

  v16 = sub_100027214();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (sub_100028944(v17))
  {
    sub_10000A8E8();
    sub_100028910((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20, v21, v22, v23, v26, v27, v28, v29, v30);
  }

  v24 = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CLKappaDeescalator.mm", 228, "constructModePrefixKey");
  return sub_100028BE4(v24);
}

uint64_t sub_100028BE4()
{
  void *v0;
  id v1;
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t v29;

  v1 = sub_100027214();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (sub_100028938(v2))
  {
    sub_10000A8E8();
    sub_100028924((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v25, v26, v27, v28, v29);
  }

  v9 = sub_100027214();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (sub_100028950(v10))
  {
    sub_10000A8E8();
    sub_1000288F0((void *)&_mh_execute_header, v11, v12, v13, "key is null", "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v25, v26, v27, v28, v29);
  }

  v16 = sub_100027214();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (sub_100028944(v17))
  {
    sub_10000A8E8();
    sub_100028910((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20, v21, v22, v23, v25, v26, v27, v28, v29);
  }

  result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CLKappaDeescalator.mm", 247, "shouldForceDeescalate");
  __break(1u);
  return result;
}

uint64_t sub_100028D08()
{
  void *v0;
  id v1;
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  id v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  id v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t v29;

  v1 = sub_100027214();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (sub_100028938(v2))
  {
    sub_10000A8E8();
    sub_100028924((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v25, v26, v27, v28, v29);
  }

  v9 = sub_100027214();
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (sub_100028950(v10))
  {
    sub_10000A8E8();
    sub_1000288F0((void *)&_mh_execute_header, v11, v12, v13, "key is null", "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v25, v26, v27, v28, v29);
  }

  v16 = sub_100027214();
  v17 = objc_claimAutoreleasedReturnValue(v16);
  if (sub_100028944(v17))
  {
    sub_10000A8E8();
    sub_100028910((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"key is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v20, v21, v22, v23, v25, v26, v27, v28, v29);
  }

  result = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreSafety/SafetyAlgorithms/CLKappaDeescalator.mm", 268, "shouldForceNoop");
  __break(1u);
  return result;
}

double CLMartyEstimatesAlgCoupledCrashResult::reset(CLMartyEstimatesAlgCoupledCrashResult *this)
{
  double result;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 50) = 0;
  *((_QWORD *)this + 7) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

double CLMartyEstimatesAlgCoupledCrashResult::log(CLMartyEstimatesAlgCoupledCrashResult *this)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100348C48);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 7);
    v5 = *((unsigned __int8 *)this + 48);
    v6 = *((float *)this + 16);
    v7 = *((float *)this + 17);
    v8 = *((float *)this + 18);
    v9 = *((float *)this + 19);
    v10 = *((float *)this + 22);
    v11 = *((float *)this + 23);
    v12 = *((float *)this + 24);
    v13 = *((float *)this + 25);
    v14 = *((float *)this + 26);
    v15 = *((unsigned __int8 *)this + 50);
    v16 = *((float *)this + 20);
    v17 = *((float *)this + 21);
    v18 = *((float *)this + 27);
    v19 = *((float *)this + 28);
    v20 = *((float *)this + 29);
    v21 = *((float *)this + 30);
    v22 = *((float *)this + 31);
    v23 = *((float *)this + 32);
    v24 = 134353920;
    v25 = v4;
    v26 = 1026;
    v27 = v5;
    v28 = 2050;
    v29 = v6;
    v30 = 2050;
    v31 = v7;
    v32 = 2050;
    v33 = v8;
    v34 = 2050;
    v35 = v9;
    v36 = 2050;
    v37 = v10;
    v38 = 2050;
    v39 = v11;
    v40 = 2050;
    v41 = v12;
    v42 = 2050;
    v43 = v13;
    v44 = 2050;
    v45 = v14;
    v46 = 1026;
    v47 = v15;
    v48 = 2050;
    v49 = v16;
    v50 = 2050;
    v51 = v17;
    v52 = 2050;
    v53 = v18;
    v54 = 2050;
    v55 = v19;
    v56 = 2050;
    v57 = v20;
    v58 = 2050;
    v59 = v21;
    v60 = 2050;
    v61 = v22;
    v62 = 2050;
    v63 = v23;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[M][CC] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}f,F,%{public}f,G,%{public}f,H,%{public}f,I,%{public}f,J,%{public}f,K,%{public}f,L,%{public}d,M,%{public}f,N,%{public}f,O,%{public}f,P,%{public}f,Q,%{public}f,R,%{public}f,S,%{public}f,T,%{public}f\n", (uint8_t *)&v24, 0xC2u);
  }
  return result;
}

void CLMartyEstimatesAlgCoupledCrash::CLMartyEstimatesAlgCoupledCrash(CLMartyEstimatesAlgCoupledCrash *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = v5 + 32;
  *(_QWORD *)&v7 = 0x80000000800000;
  *((_QWORD *)&v7 + 1) = 0x80000000800000;
  *(_OWORD *)(v5 + 48) = v7;
  *(_OWORD *)(v5 + 64) = xmmword_1002E5A50;
  *(_OWORD *)(v5 + 80) = xmmword_1002E5A60;
  *(_QWORD *)(v5 + 96) = 0x80000000800000;
  v8 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = off_100348C78;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_QWORD *)v8 + 3) = &off_10034D318;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *(_OWORD *)(v8 + 40) = xmmword_1002E5A70;
  *((_QWORD *)v8 + 7) = 0x42AC000041980000;
  *((_DWORD *)v8 + 16) = 1097859072;
  *(_QWORD *)&v23 = v8 + 24;
  *((_QWORD *)&v23 + 1) = v8;
  sub_1000081AC((uint64_t)this + 8, &v23);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v21 = *((_QWORD *)this + 1);
  v22 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  sub_100029274((uint64_t)&v21, &v23);
  sub_1000081AC(v6, &v23);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(CLMartyEstimatesAlgCoupledCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_100029250(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_100029274@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLMartyEstimatesAlgCoupledCrash::CLMartyEstimatesAlgCoupledCrash(CLMartyEstimatesAlgCoupledCrash *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 13) = off_100345DF8;
  *((_QWORD *)this + 14) = off_100345EC0;
  *((_QWORD *)this + 15) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_100348640);
  *(_QWORD *)v2 = off_100348140;
  *(_QWORD *)(v2 + 104) = off_1003483E0;
  *(_QWORD *)(v2 + 112) = off_100348518;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 120) = off_1003485F0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)&v4 = 0x80000000800000;
  *((_QWORD *)&v4 + 1) = 0x80000000800000;
  *(_OWORD *)(v2 + 48) = v4;
  *(_OWORD *)(v2 + 64) = xmmword_1002E5A50;
  *(_OWORD *)(v2 + 80) = xmmword_1002E5A60;
  *(_QWORD *)(v2 + 96) = 0x80000000800000;
  v5 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = off_100348C78;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_QWORD *)v5 + 3) = &off_10034D318;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *(_OWORD *)(v5 + 40) = xmmword_1002E5A70;
  *((_QWORD *)v5 + 7) = 0x42AC000041980000;
  *((_DWORD *)v5 + 16) = 1097859072;
  *(_QWORD *)&v20 = v5 + 24;
  *((_QWORD *)&v20 + 1) = v5;
  sub_1000081AC((uint64_t)this + 8, &v20);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v18 = *((_QWORD *)this + 1);
  v19 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_100029274((uint64_t)&v18, &v20);
  sub_1000081AC(v3, &v20);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(CLMartyEstimatesAlgCoupledCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_100029510(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100348640);
  _Unwind_Resume(a1);
}

void CLMartyEstimatesAlgCoupledCrash::resetConfiguration(CLMartyEstimatesAlgCoupledCrash *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  void *v22;
  double v23;
  double v24;
  double v25;
  int v26;
  void *v27;
  double v28;
  double v29;
  double v30;
  int v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  int v36;
  id v37;
  __int128 v38;
  int v39;
  int v40;
  int v41;

  v37 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "EstimatesAlgCCConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 0.5;
  LODWORD(v4) = 13.0;
  LODWORD(v5) = 1193033728;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v37, v3, v5, v4);
  LODWORD(v38) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1117782016;
  LODWORD(v9) = 0;
  LODWORD(v10) = 19.0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v37, v9, v8, v10);
  DWORD1(v38) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1112014848;
  LODWORD(v14) = 0;
  LODWORD(v15) = 7.0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v37, v14, v13, v15);
  DWORD2(v38) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1157234688;
  LODWORD(v19) = 1120403456;
  LODWORD(v20) = 0;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v37, v20, v18, v19);
  HIDWORD(v38) = v21;

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v23) = 1157234688;
  LODWORD(v24) = 0;
  LODWORD(v25) = 19.0;
  objc_msgSend(v22, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v37, v24, v23, v25);
  v39 = v26;

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v28) = 1157234688;
  LODWORD(v29) = 1118568448;
  LODWORD(v30) = 0;
  objc_msgSend(v27, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v37, v30, v28, v29);
  v40 = v31;

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v33) = 0.5;
  LODWORD(v34) = 15.0;
  LODWORD(v35) = 1193033728;
  objc_msgSend(v32, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v37, v33, v35, v34);
  v41 = v36;

  CLMartyEstimatesAlgCoupledCrash::setConfig((uint64_t)this, &v38);
}

void sub_100029724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLMartyEstimatesAlgCoupledCrash::setConfig(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  double result;
  float *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *a2;
  *(_OWORD *)(v3 + 28) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(v3 + 16) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100348C48);
  v5 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(float **)(a1 + 32);
    v8 = v7[4];
    v9 = v7[5];
    v10 = v7[6];
    v11 = v7[7];
    v12 = v7[8];
    v13 = v7[9];
    v14 = v7[10];
    v15 = 134219520;
    v16 = v8;
    v17 = 2048;
    v18 = v9;
    v19 = 2048;
    v20 = v10;
    v21 = 2048;
    v22 = v11;
    v23 = 2048;
    v24 = v12;
    v25 = 2048;
    v26 = v13;
    v27 = 2048;
    v28 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[M][CC] config-1,%f,config-2,%f,config-3,%f,config-4,%f,config-5,%f,config-6,%f,config-7,%f", (uint8_t *)&v15, 0x48u);
  }
  return result;
}

uint64_t CLMartyEstimatesAlgCoupledCrash::reset(CLMartyEstimatesAlgCoupledCrash *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

double CLMartyEstimatesAlgCoupledCrash::epochFinalize(CLMartyEstimatesAlgCoupledCrash *this, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  BOOL v18;
  float v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  int v23;
  double result;

  v2 = *((_QWORD *)this + 4);
  v3 = *(float *)(v2 + 32);
  v4 = *(float *)(v2 + 36);
  v5 = *((float *)this + 21);
  v6 = v5 < v3 && *((float *)this + 23) < v3;
  v7 = *(float *)(v2 + 20);
  v8 = *(float *)(v2 + 24);
  v9 = *(float *)(v2 + 28);
  v10 = *(float *)(v2 + 40);
  v11 = *((float *)this + 12);
  v12 = *((float *)this + 14);
  v13 = *((float *)this + 15);
  v14 = *((float *)this + 16);
  v15 = *((float *)this + 22);
  v16 = v15 >= v4 || *((float *)this + 24) >= v4;
  v17 = *(float *)(v2 + 16);
  v18 = v12 < v7;
  if (v13 < v8)
    v18 = 1;
  v19 = *((float *)this + 25);
  if (v14 < v9)
    v18 = 1;
  v20 = v18 || v6;
  if (v19 < v10)
    v16 = 0;
  v21 = !v20 && v16;
  if (v11 >= *((float *)this + 17))
  {
    v22 = v12 >= *((float *)this + 18);
    if (v14 < *((float *)this + 20))
      v22 = 0;
    if (v13 < *((float *)this + 19))
      v22 = 0;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)(v2 + 56) = a2;
  if (v11 < v17)
    v21 = 0;
  *(_BYTE *)(v2 + 48) = v21;
  *(_BYTE *)(v2 + 49) = v21;
  *(float *)(v2 + 64) = v17;
  *(float *)(v2 + 68) = v7;
  *(float *)(v2 + 72) = v8;
  *(float *)(v2 + 76) = v9;
  v23 = *((_DWORD *)this + 13);
  *(float *)(v2 + 88) = v11;
  *(_DWORD *)(v2 + 92) = v23;
  *(float *)(v2 + 96) = v12;
  *(float *)(v2 + 100) = v13;
  *(_BYTE *)(v2 + 50) = v22;
  *(float *)(v2 + 80) = v3;
  *(float *)(v2 + 84) = v4;
  *(float *)(v2 + 104) = v14;
  *(float *)(v2 + 108) = v5;
  *(float *)(v2 + 112) = v15;
  result = *(double *)((char *)this + 92);
  *(double *)(v2 + 116) = result;
  *(float *)(v2 + 124) = v19;
  *(float *)(v2 + 128) = v10;
  return result;
}

double `virtual thunk to'CLMartyEstimatesAlgCoupledCrash::epochFinalize(CLMartyEstimatesAlgCoupledCrash *this, uint64_t a2)
{
  return CLMartyEstimatesAlgCoupledCrash::epochFinalize((CLMartyEstimatesAlgCoupledCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

double CLMartyEstimatesAlgCoupledCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v3;

  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 12);
  result = *(double *)(a1 + 84);
  *(_QWORD *)&v3 = *(_QWORD *)(a2 + 44);
  *((double *)&v3 + 1) = result;
  *(_OWORD *)(a1 + 84) = v3;
  return result;
}

double `virtual thunk to'CLMartyEstimatesAlgCoupledCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  char *v2;
  double result;
  __int128 v4;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 88);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a2 + 12);
  result = *(double *)(v2 + 84);
  *(_QWORD *)&v4 = *(_QWORD *)(a2 + 44);
  *((double *)&v4 + 1) = result;
  *(_OWORD *)(v2 + 84) = v4;
  return result;
}

float CLMartyEstimatesAlgCoupledCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  int v2;
  float result;

  v2 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 52) = v2;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 268);
  *(float *)(a1 + 100) = result;
  return result;
}

{
  float result;

  result = *(float *)(a2 + 20);
  *(float *)(a1 + 56) = result;
  return result;
}

float `virtual thunk to'CLMartyEstimatesAlgCoupledCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  char *v2;
  int v3;
  float result;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 32);
  v3 = *(_DWORD *)(a2 + 76);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a2 + 96);
  *((_DWORD *)v2 + 13) = v3;
  *((_DWORD *)v2 + 15) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 268);
  *((float *)v2 + 25) = result;
  return result;
}

{
  float result;

  result = *(float *)(a2 + 20);
  *(float *)((char *)a1 + *(_QWORD *)(*a1 - 104) + 56) = result;
  return result;
}

double CLMartyEstimatesAlgCoupledCrash::epochReset(CLMartyEstimatesAlgCoupledCrash *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 4);
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 50) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_DWORD *)(v1 + 128) = 0;
  return result;
}

double `virtual thunk to'CLMartyEstimatesAlgCoupledCrash::epochReset(CLMartyEstimatesAlgCoupledCrash *this)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56) + 32);
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 50) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 116) = 0u;
  return result;
}

void sub_100029AD4(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100348140;
  *((_QWORD *)a1 + 13) = off_1003483E0;
  *((_QWORD *)a1 + 14) = off_100348518;
  *((_QWORD *)a1 + 15) = off_1003485F0;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100348640);
}

void sub_100029B24(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100348140;
  *((_QWORD *)a1 + 13) = off_1003483E0;
  *((_QWORD *)a1 + 14) = off_100348518;
  *((_QWORD *)a1 + 15) = off_1003485F0;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100348640);
  operator delete();
}

void sub_100029B8C(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100348140;
  *((_QWORD *)v1 + 13) = off_1003483E0;
  *((_QWORD *)v1 + 14) = off_100348518;
  *((_QWORD *)v1 + 15) = off_1003485F0;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100348640);
}

void sub_100029BE4(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100348140;
  *((_QWORD *)v1 + 13) = off_1003483E0;
  *((_QWORD *)v1 + 14) = off_100348518;
  *((_QWORD *)v1 + 15) = off_1003485F0;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100348640);
  operator delete();
}

void sub_100029C50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_100029C80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100348C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100029C94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100348C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100029CC8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double CLMartyEstimatesAlgHighSpeedCrashResult::reset(CLMartyEstimatesAlgHighSpeedCrashResult *this)
{
  double result;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 16) = 0;
  *((_QWORD *)this + 5) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  return result;
}

double CLMartyEstimatesAlgHighSpeedCrashResult::log(CLMartyEstimatesAlgHighSpeedCrashResult *this)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100349870);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 5);
    v5 = *((unsigned __int8 *)this + 32);
    v6 = *((float *)this + 12);
    v7 = *((float *)this + 13);
    v8 = *((float *)this + 14);
    v9 = *((float *)this + 15);
    v10 = *((float *)this + 16);
    v11 = *((unsigned __int8 *)this + 68);
    v12 = *((_DWORD *)this + 18);
    v13 = *((_DWORD *)this + 19);
    v14 = *((_DWORD *)this + 20);
    v15 = 134351616;
    v16 = v4;
    v17 = 1026;
    v18 = v5;
    v19 = 2050;
    v20 = v6;
    v21 = 2050;
    v22 = v7;
    v23 = 2050;
    v24 = v8;
    v25 = 2050;
    v26 = v9;
    v27 = 2050;
    v28 = v10;
    v29 = 1026;
    v30 = v11;
    v31 = 1026;
    v32 = v12;
    v33 = 1026;
    v34 = v13;
    v35 = 1026;
    v36 = v14;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[M][HSC] AlgBlock summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}f,F,%{public}f,G,%{public}f,H,%{public}d,I,%{public}d,J,%{public}d,K,%{public}d\n", (uint8_t *)&v15, 0x5Cu);
  }
  return result;
}

void CLMartyEstimatesAlgHighSpeedCrash::CLMartyEstimatesAlgHighSpeedCrash(CLMartyEstimatesAlgHighSpeedCrash *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_QWORD *)(v5 + 32) = 0;
  v6 = v5 + 32;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 60) = 0x80000000800000;
  *(_BYTE *)(v5 + 68) = 0;
  v7 = operator new(0x70uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_1003498A0;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  v7[3] = &off_10034D3D8;
  v7[5] = 0x42A0000041700000;
  *((_DWORD *)v7 + 12) = 1112014848;
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10002A068((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLMartyEstimatesAlgHighSpeedCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10002A044(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10002A068@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLMartyEstimatesAlgHighSpeedCrash::CLMartyEstimatesAlgHighSpeedCrash(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 9) = off_100345DF8;
  *((_QWORD *)this + 10) = off_100345EC0;
  *((_QWORD *)this + 11) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_100349268);
  *(_QWORD *)v2 = off_100348D68;
  *(_QWORD *)(v2 + 72) = off_100349008;
  *(_QWORD *)(v2 + 80) = off_100349140;
  *(_QWORD *)(v2 + 88) = off_100349218;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = v2 + 32;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 60) = 0x80000000800000;
  *(_BYTE *)(v2 + 68) = 0;
  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1003498A0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  v4[3] = &off_10034D3D8;
  v4[5] = 0x42A0000041700000;
  *((_DWORD *)v4 + 12) = 1112014848;
  *(_QWORD *)&v19 = v4 + 3;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10002A068((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLMartyEstimatesAlgHighSpeedCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_10002A2DC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100349268);
  _Unwind_Resume(a1);
}

void CLMartyEstimatesAlgHighSpeedCrash::resetConfiguration(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  id v17;
  uint64_t v18;
  int v19;

  v17 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "EstimatesAlgHSCConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1008981770;
  LODWORD(v4) = 15.0;
  LODWORD(v5) = 15.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v17, v3, v4, v5);
  LODWORD(v18) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1117782016;
  LODWORD(v9) = -1138501878;
  LODWORD(v10) = 1117782016;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v17, v9, v8, v10);
  HIDWORD(v18) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1112014848;
  LODWORD(v14) = -1138501878;
  LODWORD(v15) = 1112014848;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v17, v14, v13, v15);
  v19 = v16;

  CLMartyEstimatesAlgHighSpeedCrash::setConfig((uint64_t)this, &v18);
}

void sub_10002A40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLMartyEstimatesAlgHighSpeedCrash::setConfig(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  double result;
  float *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *a2;
  *(_DWORD *)(v3 + 24) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v3 + 16) = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_100349870);
  v5 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(float **)(a1 + 32);
    v8 = v7[4];
    v9 = v7[5];
    v10 = v7[6];
    v11 = 134218496;
    v12 = v8;
    v13 = 2048;
    v14 = v9;
    v15 = 2048;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[M][HSC] config-1,%f,config-2,%f,config-3,%f", (uint8_t *)&v11, 0x20u);
  }
  return result;
}

uint64_t CLMartyEstimatesAlgHighSpeedCrash::reset(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  *((_BYTE *)this + 68) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t CLMartyEstimatesAlgHighSpeedCrash::resetCounters(uint64_t this)
{
  *(_BYTE *)(this + 68) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CLMartyEstimatesAlgHighSpeedCrash::epochFinalize(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  float v3;
  __int128 v4;
  float32x2_t v5;
  int8x8_t v6;
  float v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  float v13;
  int v14;
  BOOL v15;
  BOOL v16;
  char v17;

  v2 = *(_QWORD *)(this + 32);
  v3 = *(float *)(v2 + 16);
  *(_QWORD *)&v4 = *(_QWORD *)(v2 + 20);
  v5 = *(float32x2_t *)(this + 60);
  v6 = vmvn_s8((int8x8_t)vcge_f32(v5, *(float32x2_t *)&v4));
  v7 = v3;
  if ((v6.i8[0] & 1) != 0)
  {
    v8 = *(_DWORD *)(this + 48);
    v7 = (float)(v8 - 1);
    if (!v8)
      v7 = 0.0;
  }
  v9 = v7;
  *(_DWORD *)(this + 48) = v7;
  *(float *)v6.i32 = v3;
  if ((v6.i8[4] & 1) != 0)
  {
    v10 = *(_DWORD *)(this + 52);
    *(float *)v6.i32 = (float)(v10 - 1);
    if (!v10)
      *(float *)v6.i32 = 0.0;
  }
  v11 = *(float *)v6.i32;
  *(_DWORD *)(this + 52) = *(float *)v6.i32;
  v12 = *(_BYTE *)(this + 68);
  v13 = v3;
  if (!v12)
  {
    v14 = *(_DWORD *)(this + 56);
    v13 = (float)(v14 - 1);
    if (!v14)
      v13 = 0.0;
  }
  *(_DWORD *)(this + 56) = v13;
  if (v13)
    v15 = v9 == 0;
  else
    v15 = 1;
  v16 = v15 || v11 == 0;
  v17 = !v16;
  *(_QWORD *)(v2 + 40) = a2;
  *(_BYTE *)(v2 + 32) = v17;
  *(_BYTE *)(v2 + 33) = v17;
  *((float32x2_t *)&v4 + 1) = v5;
  *(float *)(v2 + 48) = v3;
  *(_OWORD *)(v2 + 52) = v4;
  *(_BYTE *)(v2 + 68) = v12;
  *(_DWORD *)(v2 + 72) = v9;
  *(_DWORD *)(v2 + 76) = v11;
  *(_DWORD *)(v2 + 80) = v13;
  if (!v16)
  {
    *(_BYTE *)(this + 68) = 0;
    *(_QWORD *)(this + 48) = 0;
    *(_DWORD *)(this + 56) = 0;
  }
  return this;
}

uint64_t `virtual thunk to'CLMartyEstimatesAlgHighSpeedCrash::epochFinalize(CLMartyEstimatesAlgHighSpeedCrash *this, uint64_t a2)
{
  return CLMartyEstimatesAlgHighSpeedCrash::epochFinalize((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 48), a2);
}

uint64_t CLMartyEstimatesAlgHighSpeedCrash::feedFeatures(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 68) = *(_BYTE *)(a2 + 8);
  return result;
}

_QWORD *`virtual thunk to'CLMartyEstimatesAlgHighSpeedCrash::feedFeatures(_QWORD *result, uint64_t a2)
{
  *((_BYTE *)result + *(_QWORD *)(*result - 64) + 68) = *(_BYTE *)(a2 + 8);
  return result;
}

float CLMartyEstimatesAlgHighSpeedCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  result = *(float *)(a2 + 16);
  *(float *)(a1 + 64) = result;
  return result;
}

{
  float result;

  result = *(float *)(a2 + 20);
  *(float *)(a1 + 60) = result;
  return result;
}

float `virtual thunk to'CLMartyEstimatesAlgHighSpeedCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  float result;

  result = *(float *)(a2 + 16);
  *(float *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 64) = result;
  return result;
}

{
  float result;

  result = *(float *)(a2 + 20);
  *(float *)((char *)a1 + *(_QWORD *)(*a1 - 104) + 60) = result;
  return result;
}

double CLMartyEstimatesAlgHighSpeedCrash::epochReset(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 4);
  *(_WORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_DWORD *)(v1 + 80) = 0;
  return result;
}

double `virtual thunk to'CLMartyEstimatesAlgHighSpeedCrash::epochReset(CLMartyEstimatesAlgHighSpeedCrash *this)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56) + 32);
  *(_WORD *)(v1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 68) = 0u;
  return result;
}

void sub_10002A724(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100348D68;
  *((_QWORD *)a1 + 9) = off_100349008;
  *((_QWORD *)a1 + 10) = off_100349140;
  *((_QWORD *)a1 + 11) = off_100349218;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100349268);
}

void sub_10002A774(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100348D68;
  *((_QWORD *)a1 + 9) = off_100349008;
  *((_QWORD *)a1 + 10) = off_100349140;
  *((_QWORD *)a1 + 11) = off_100349218;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100349268);
  operator delete();
}

void sub_10002A7DC(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100348D68;
  *((_QWORD *)v1 + 9) = off_100349008;
  *((_QWORD *)v1 + 10) = off_100349140;
  *((_QWORD *)v1 + 11) = off_100349218;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100349268);
}

void sub_10002A834(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100348D68;
  *((_QWORD *)v1 + 9) = off_100349008;
  *((_QWORD *)v1 + 10) = off_100349140;
  *((_QWORD *)v1 + 11) = off_100349218;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100349268);
  operator delete();
}

void sub_10002A8A0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10002A8D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1003498A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002A8E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1003498A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10002A918(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t CLKappaFeaturesAlgStepsResult::reset(uint64_t this)
{
  *(_BYTE *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_QWORD *)(this + 36) = 0;
  *(_QWORD *)(this + 41) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  return this;
}

double CLKappaFeaturesAlgStepsResult::log(CLKappaFeaturesAlgStepsResult *this)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  double v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034A498);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *((unsigned __int8 *)this + 32);
    v6 = *((float *)this + 9);
    v7 = *((float *)this + 10);
    v8 = *((float *)this + 11);
    v9 = *((unsigned __int8 *)this + 48);
    v10 = *((_QWORD *)this + 7);
    v11 = *((_QWORD *)this + 8);
    v12 = *((_QWORD *)this + 9);
    v13 = 134351104;
    v14 = v4;
    v15 = 1026;
    v16 = v5;
    v17 = 2050;
    v18 = v6;
    v19 = 2050;
    v20 = v7;
    v21 = 2050;
    v22 = v8;
    v23 = 1026;
    v24 = v9;
    v25 = 2050;
    v26 = v10;
    v27 = 2050;
    v28 = v11;
    v29 = 2050;
    v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Steps] summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}f,F,%{public}d,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}llu\n", (uint8_t *)&v13, 0x54u);
  }
  return result;
}

void CLKappaFeaturesAlgSteps::CLKappaFeaturesAlgSteps(CLKappaFeaturesAlgSteps *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  v7 = operator new(0x68uLL);
  v7[2] = 0;
  *v7 = off_10034A4C8;
  v7[1] = 0;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  v7[3] = &off_10034CFB8;
  *(_QWORD *)((char *)v7 + 65) = 0;
  *(_QWORD *)((char *)v7 + 60) = 0;
  v7[11] = 0;
  v7[12] = 0;
  v7[10] = 0;
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10002AC98((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgSteps *))(*(_QWORD *)this + 304))(this);
}

void sub_10002AC6C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10002AC98@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgSteps::CLKappaFeaturesAlgSteps(CLKappaFeaturesAlgSteps *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 9) = off_100345DF8;
  *((_QWORD *)this + 10) = off_100345EC0;
  *((_QWORD *)this + 11) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_100349E90);
  *(_QWORD *)v2 = off_100349990;
  *(_QWORD *)(v2 + 80) = off_100349D68;
  *(_QWORD *)(v2 + 88) = off_100349E40;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = off_100349C30;
  v4 = operator new(0x68uLL);
  v4[2] = 0;
  *v4 = off_10034A4C8;
  v4[1] = 0;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  v4[3] = &off_10034CFB8;
  *(_QWORD *)((char *)v4 + 65) = 0;
  *(_QWORD *)((char *)v4 + 60) = 0;
  v4[11] = 0;
  v4[12] = 0;
  v4[10] = 0;
  *(_QWORD *)&v19 = v4 + 3;
  *((_QWORD *)&v19 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v19);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17 = *((_QWORD *)this + 1);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_10002AC98((uint64_t)&v17, &v19);
  sub_1000081AC(v3, &v19);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgSteps *))(*(_QWORD *)this + 304))(this);
}

void sub_10002AEF8(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100349E90);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgSteps::reset(CLKappaFeaturesAlgSteps *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t CLKappaFeaturesAlgSteps::setConfig(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 16) = *a2;
  return result;
}

float CLKappaFeaturesAlgSteps::feedSteps(uint64_t a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4;
  uint64_t v5;
  float result;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(int32x2_t *)(a2 + 2);
  LODWORD(v5) = vcvt_f32_u32((uint32x2_t)v4).u32[0];
  HIDWORD(v5) = vcvt_f32_s32(v4).i32[1];
  *(_QWORD *)(v3 + 36) = v5;
  result = a2[4] * 60.0;
  *(float *)(v3 + 44) = result;
  *(_BYTE *)(v3 + 48) = *((_BYTE *)a2 + 20);
  *(_QWORD *)(v3 + 56) = v2;
  return result;
}

float `virtual thunk to'CLKappaFeaturesAlgSteps::feedSteps(_QWORD *a1, float *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int32x2_t v5;
  uint64_t v6;
  float result;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 104);
  v3 = *(_QWORD *)a2;
  *((_QWORD *)v2 + 8) = *(_QWORD *)a2;
  v4 = *((_QWORD *)v2 + 4);
  v5 = *(int32x2_t *)(a2 + 2);
  LODWORD(v6) = vcvt_f32_u32((uint32x2_t)v5).u32[0];
  HIDWORD(v6) = vcvt_f32_s32(v5).i32[1];
  *(_QWORD *)(v4 + 36) = v6;
  result = a2[4] * 60.0;
  *(float *)(v4 + 44) = result;
  *(_BYTE *)(v4 + 48) = *((_BYTE *)a2 + 20);
  *(_QWORD *)(v4 + 56) = v3;
  return result;
}

uint64_t CLKappaFeaturesAlgSteps::epochFinalize(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(this + 32);
  *(_QWORD *)(v2 + 24) = a2;
  v3 = *(_QWORD *)(this + 64);
  *(_BYTE *)(v2 + 32) = v3 != 0;
  *(_QWORD *)(v2 + 64) = v3;
  *(_QWORD *)(v2 + 72) = v3;
  *(_QWORD *)(this + 64) = 0;
  return this;
}

_QWORD *`virtual thunk to'CLKappaFeaturesAlgSteps::epochFinalize(_QWORD *this, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (char *)this + *(_QWORD *)(*this - 48);
  v3 = *((_QWORD *)v2 + 4);
  *(_QWORD *)(v3 + 24) = a2;
  v4 = *((_QWORD *)v2 + 8);
  *(_BYTE *)(v3 + 32) = v4 != 0;
  *(_QWORD *)(v3 + 64) = v4;
  *(_QWORD *)(v3 + 72) = v4;
  *((_QWORD *)v2 + 8) = 0;
  return this;
}

uint64_t CLKappaFeaturesAlgSteps::epochReset(CLKappaFeaturesAlgSteps *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t `virtual thunk to'CLKappaFeaturesAlgSteps::epochReset(CLKappaFeaturesAlgSteps *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 56);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 4) + 24))(*((_QWORD *)v1 + 4));
  *((_QWORD *)v1 + 8) = 0;
  return result;
}

void sub_10002B0BC(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100349990;
  *((_QWORD *)a1 + 9) = off_100349C30;
  *((_QWORD *)a1 + 10) = off_100349D68;
  *((_QWORD *)a1 + 11) = off_100349E40;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100349E90);
}

void sub_10002B114(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_100349990;
  *((_QWORD *)a1 + 9) = off_100349C30;
  *((_QWORD *)a1 + 10) = off_100349D68;
  *((_QWORD *)a1 + 11) = off_100349E40;
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_100349E90);
  operator delete();
}

void sub_10002B184(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100349990;
  *((_QWORD *)v1 + 9) = off_100349C30;
  *((_QWORD *)v1 + 10) = off_100349D68;
  *((_QWORD *)v1 + 11) = off_100349E40;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100349E90);
}

void sub_10002B1E4(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_100349990;
  *((_QWORD *)v1 + 9) = off_100349C30;
  *((_QWORD *)v1 + 10) = off_100349D68;
  *((_QWORD *)v1 + 11) = off_100349E40;
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_100349E90);
  operator delete();
}

void sub_10002B258(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10002B288(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034A4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002B29C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034A4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10002B2D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

int32x2_t CLZgDetection::reset(int32x2_t *this)
{
  int32x2_t result;

  this[4] = (int32x2_t)-1;
  result = vdup_n_s32(0x7F7FFFFFu);
  this[5] = result;
  this[6].i32[0] = 2139095039;
  return result;
}

double CLZgDetection::setHardware(uint64_t a1, unint64_t a2)
{
  return sub_100009C84(a1 + 128, a2);
}

uint64_t CLZgDetection::getHardwareProperties(CLZgDetection *this)
{
  return (uint64_t)this + 128;
}

__n128 CLZgDetection::queryZgState(CLZgDetection *this, const CSSPUTriad_Struct *a2, CSSPUTriad_Struct *a3, CSSPUTriad_Struct *a4, const CSSPUTriad_Struct *a5, const CSSPUTriad_Struct *a6)
{
  int v8;
  __n128 *v9;
  __n128 result;

  CLZgDetection::calculateGyroAndAngAccel(this, a2, a3, a4, a5, a6);
  v8 = CLZgDetection::checkZgCondition(this, a2);
  *((_BYTE *)this + 240) = v8;
  v9 = (__n128 *)((char *)this + 56);
  if (!v8)
    v9 = (__n128 *)((char *)this + 104);
  result = *v9;
  *((__n128 *)this + 2) = *v9;
  *((_QWORD *)this + 6) = v9[1].n128_u64[0];
  return result;
}

uint64_t CLZgDetection::calculateGyroAndAngAccel(CLZgDetection *this, const CSSPUTriad_Struct *a2, CSSPUTriad_Struct *a3, CSSPUTriad_Struct *a4, const CSSPUTriad_Struct *a5, const CSSPUTriad_Struct *a6)
{
  uint64_t result;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;

  v17 = 0;
  result = CLZgDetection::checkIfOnlyOneGyroSat((uint64_t)this, (float *)a4, (float *)a3, &v17);
  v13 = (float)(a2->timestamp - a4->timestamp) / (float)(a3->timestamp - a4->timestamp);
  v14 = a4->z + (float)(v13 * (float)(a3->z - a4->z));
  *((_QWORD *)this + 7) = a2->timestamp;
  *((float32x2_t *)this + 8) = vmla_n_f32(*(float32x2_t *)&a4->x, vsub_f32(*(float32x2_t *)&a3->x, *(float32x2_t *)&a4->x), v13);
  *((float *)this + 18) = v14;
  v15 = (float)(a2->timestamp - a6->timestamp) / (float)(a5->timestamp - a6->timestamp);
  v16 = a6->z + (float)(v15 * (float)(a5->z - a6->z));
  *((_QWORD *)this + 10) = a2->timestamp;
  *((float32x2_t *)this + 11) = vmla_n_f32(*(float32x2_t *)&a6->x, vsub_f32(*(float32x2_t *)&a5->x, *(float32x2_t *)&a6->x), v15);
  *((float *)this + 24) = v16;
  *((_QWORD *)this + 15) = *((_QWORD *)this + 9);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)this + 56);
  if ((_DWORD)result)
    return CLZgDetection::calculateSatGyroAndAngAccel((uint64_t)this, (uint64_t)a2, &v17);
  return result;
}

uint64_t CLZgDetection::checkZgCondition(CLZgDetection *this, const CSSPUTriad_Struct *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float x;
  float y;
  float z;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  float v17;
  double v18;
  double v19;
  double v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  _BOOL4 v30;
  _BOOL4 v32;

  v2 = *((float *)this + 36);
  v3 = *((float *)this + 37);
  v5 = *((float *)this + 32);
  v4 = *((float *)this + 33);
  v6 = *((float *)this + 34);
  v7 = *((float *)this + 35);
  x = a2->x;
  y = a2->y;
  z = a2->z;
  v11 = sqrtf((float)((float)(y * y) + (float)(x * x)) + (float)(z * z)) * 9.8067;
  v12 = *((float *)this + 16);
  v13 = *((float *)this + 17);
  v14 = *((float *)this + 18);
  v15 = v13 * v13;
  v16 = v14 * v14;
  v17 = *((float *)this + 24);
  v18 = (float)(x * 9.8067) + (v15 + v16) * v7 + (float)(v2 * (float)(v17 - (float)(v12 * v13)));
  v19 = v12 * v12;
  v20 = (float)(y * 9.8067) + (v19 + v16) * v2;
  v21 = *((float *)this + 22);
  LODWORD(v16) = *((_DWORD *)this + 23);
  *(float *)&v18 = v18 + (float)(v3 * (float)-(float)(*(float *)&v16 + (float)(v12 * v14)));
  *(float *)&v20 = v20
                 + (float)(v3 * (float)(v21 - (float)(v13 * v14)))
                 + (float)(v7 * (float)-(float)(v17 + (float)(v12 * v13)));
  v22 = (float)(z * 9.8067)
      + (v19 + v15) * v3
      + (float)(v7 * (float)(*(float *)&v16 - (float)(v12 * v14)))
      + (float)(v2 * (float)-(float)(v21 + (float)(v13 * v14)));
  v23 = sqrtf((float)((float)(*(float *)&v20 * *(float *)&v20) + (float)(*(float *)&v18 * *(float *)&v18))+ (float)(v22 * v22));
  v24 = (float)((float)-(float)((float)(v4 - v6) * v13) * v14) + (float)(v5 * v21);
  v25 = (float)((float)-(float)((float)(v6 - v5) * v12) * v14) + (float)(v4 * *(float *)&v16);
  v26 = (float)((float)-(float)((float)(v5 - v4) * v12) * v13) + (float)(v6 * v17);
  v27 = sqrtf((float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v26 * v26));
  v28 = *((float *)this + 3) * 9.8067;
  v29 = (float)(v23 / v11) <= *((float *)this + 4);
  if (v23 <= v28)
    v29 = 0;
  v30 = v27 <= *((float *)this + 5)
     && sqrtf((float)((float)(v13 * v13) + (float)(v12 * v12)) + (float)(v14 * v14)) >= *((float *)this + 6);
  if (v23 <= v28)
    v29 = 1;
  if (v29)
    return 1;
  v32 = v6 != 0.0;
  if (v4 == 0.0)
    v32 = 0;
  return v32 & v30;
}

BOOL CLZgDetection::checkIfOnlyOneGyroSat(uint64_t a1, float *a2, float *a3, _DWORD *a4)
{
  float v4;
  int v5;

  v4 = *(float *)(a1 + 8);
  if (fabsf(a3[2]) >= v4 || fabsf(a2[2]) >= v4)
  {
    v5 = 1;
    *a4 = 1;
  }
  else
  {
    v5 = 0;
  }
  if (fabsf(a3[3]) >= v4 || fabsf(a2[3]) >= v4)
  {
    ++v5;
    *a4 = 2;
  }
  if (fabsf(a3[4]) >= v4 || fabsf(a2[4]) >= v4)
  {
    ++v5;
    *a4 = 3;
  }
  return v5 == 1;
}

float32_t CLZgDetection::calculateInterpolate@<S0>(const CSSPUTriad_Struct *a1@<X1>, const CSSPUTriad_Struct *a2@<X2>, float32x2_t a3@<X3>, float32x2_t *a4@<X8>)
{
  float v5;
  float32_t result;

  v5 = (float)(*(_QWORD *)&a3 - a2->timestamp) / (float)(a1->timestamp - a2->timestamp);
  a4[1] = vmla_n_f32(*(float32x2_t *)&a2->x, vsub_f32(*(float32x2_t *)&a1->x, *(float32x2_t *)&a2->x), v5);
  result = a2->z + (float)(v5 * (float)(a1->z - a2->z));
  a4[2].f32[0] = result;
  *a4 = a3;
  return result;
}

uint64_t CLZgDetection::calculateSatGyroAndAngAccel(uint64_t result, uint64_t a2, int *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  double v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  double v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;

  v3 = *(float *)(result + 144);
  v4 = *(float *)(result + 148);
  v5 = *(float *)(result + 128);
  v6 = *(float *)(result + 132);
  v7 = *(float *)(result + 136);
  v8 = *(float *)(result + 140);
  v9 = *a3;
  if (*a3 == 3)
  {
    v21 = *(float *)(result + 64);
    v20 = *(float *)(result + 68);
    v22 = (float)((float)(v3 * v20) + (float)(v21 * v8));
    v23 = (float)(v7 * v20) - (float)(v6 * v20);
    v24 = (float)((float)(v5 * v21) - (float)(v7 * v21)) * (float)((float)(v5 * v21) - (float)(v7 * v21))
        + v22 * v22
        + v23 * v23;
    if (v24 == 0.0)
    {
      v28 = *(float *)(result + 72);
    }
    else
    {
      v26 = *(float *)(result + 88);
      v25 = *(float *)(result + 92);
      v27 = ((float)(*(float *)(a2 + 16) * 9.8067) + (v21 * v21 + v20 * v20) * v4 + (float)(v8 * v25) - (float)(v3 * v26))
          * v22;
      v28 = (float)((float)(v27 + (float)((float)-(float)(v5 * v26) * v23))
                  + (float)((float)(v25 * (float)-v6) * (float)((float)(v5 * v21) + (float)((float)-v7 * v21))))
          / v24;
    }
    *(float *)(result + 72) = v28;
    v44 = *(_QWORD *)(result + 32);
    if (v44 == -1 || (v45 = (float)(unint64_t)(*(_QWORD *)a2 - v44), v45 / 1000000.0 >= *(float *)result))
    {
      v48 = (float)((float)(v5 - v6) * v21) * v20;
    }
    else
    {
      v46 = *(float *)(result + 28);
      v47 = v7 * (float)((float)((float)(v5 - v6) * v21) * v20);
      v7 = v46 + (float)(v7 * v7);
      v48 = v47 + (float)((float)(v28 - *(float *)(result + 48)) / v45) * 1000000.0 * v46;
    }
    if (v7 == 0.0)
      v49 = *(float *)(result + 96);
    else
      v49 = v48 / v7;
    *(float *)(result + 96) = v49;
  }
  else if (v9 == 2)
  {
    v29 = *(float *)(result + 64);
    v30 = *(float *)(result + 72);
    v31 = (float)((float)(v4 * v30) + (float)(v29 * v8));
    v32 = (float)(v7 * v30) - (float)(v6 * v30);
    v33 = (float)((float)(v6 * v29) - (float)(v5 * v29)) * (float)((float)(v6 * v29) - (float)(v5 * v29))
        + v31 * v31
        + v32 * v32;
    if (v33 == 0.0)
    {
      v37 = *(float *)(result + 68);
    }
    else
    {
      v34 = *(float *)(result + 96);
      v35 = *(float *)(result + 88);
      v36 = ((float)(*(float *)(a2 + 12) * 9.8067) + (v29 * v29 + v30 * v30) * v3 + (float)(v4 * v35) - (float)(v8 * v34))
          * v31;
      v37 = (float)((float)(v36 + (float)((float)(v35 * (float)-v5) * v32))
                  + (float)((float)-(float)(v7 * v34) * (float)((float)(v6 * v29) + (float)((float)-v5 * v29))))
          / v33;
    }
    *(float *)(result + 68) = v37;
    v50 = *(_QWORD *)(result + 32);
    if (v50 == -1 || (v51 = (float)(unint64_t)(*(_QWORD *)a2 - v50), v51 / 1000000.0 >= *(float *)result))
    {
      v54 = (float)((float)(v7 - v5) * v29) * v30;
    }
    else
    {
      v52 = *(float *)(result + 28);
      v53 = v6 * (float)((float)((float)(v7 - v5) * v29) * v30);
      v6 = v52 + (float)(v6 * v6);
      v54 = v53 + (float)((float)(v37 - *(float *)(result + 44)) / v51) * 1000000.0 * v52;
    }
    if (v6 == 0.0)
      v55 = *(float *)(result + 92);
    else
      v55 = v54 / v6;
    *(float *)(result + 92) = v55;
  }
  else if (v9 == 1)
  {
    v11 = *(float *)(result + 68);
    v10 = *(float *)(result + 72);
    v12 = (float)((float)(v4 * v10) + (float)(v11 * v3));
    v13 = (float)(v6 * v11) - (float)(v5 * v11);
    v14 = (float)(v5 * v10) - (float)(v7 * v10);
    v15 = v14 * v14 + v13 * v13 + v12 * v12;
    if (v15 == 0.0)
    {
      v19 = *(float *)(result + 64);
    }
    else
    {
      v16 = *(float *)(result + 92);
      v17 = *(float *)(result + 96);
      v18 = ((float)(*(float *)(a2 + 8) * 9.8067) + (v11 * v11 + v10 * v10) * v8 + (float)(v3 * v17) - (float)(v4 * v16))
          * v12;
      v19 = (float)((float)(v18 + (float)((float)(v17 * (float)-v7) * v13)) + (float)((float)-(float)(v6 * v16) * v14))
          / v15;
    }
    *(float *)(result + 64) = v19;
    v38 = *(_QWORD *)(result + 32);
    if (v38 == -1 || (v39 = (float)(unint64_t)(*(_QWORD *)a2 - v38), v39 / 1000000.0 >= *(float *)result))
    {
      v42 = (float)((float)(v6 - v7) * v11) * v10;
    }
    else
    {
      v40 = *(float *)(result + 28);
      v41 = v5 * (float)((float)((float)(v6 - v7) * v11) * v10);
      v5 = v40 + (float)(v5 * v5);
      v42 = v41 + (float)((float)(v19 - *(float *)(result + 40)) / v39) * 1000000.0 * v40;
    }
    if (v5 == 0.0)
      v43 = *(float *)(result + 88);
    else
      v43 = v42 / v5;
    *(float *)(result + 88) = v43;
  }
  return result;
}

void sub_10002BB84(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void CLKappaFeaturesAlgPeakDetectorMAPResult::log(CLKappaFeaturesAlgPeakDetectorMAPResult *this)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  int v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD v21[2];
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  double v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034B0E0);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((unsigned __int8 *)this + 80);
    v4 = *((_QWORD *)this + 11);
    v5 = *((float *)this + 4);
    v6 = *((_QWORD *)this + 3);
    v7 = *((_DWORD *)this + 8);
    v8 = *((_QWORD *)this + 5);
    v9 = *((float *)this + 12);
    v10 = *((float *)this + 13);
    v11 = *((float *)this + 14);
    v12 = *((float *)this + 15);
    v13 = *((_QWORD *)this + 8);
    v14 = *((float *)this + 18);
    v15 = *((_DWORD *)this + 24);
    v16 = *((float *)this + 32);
    v17 = *((_QWORD *)this + 13);
    v18 = *((_QWORD *)this + 14);
    v19 = *((_QWORD *)this + 15);
    v20 = *((unsigned __int8 *)this + 184);
    v21[0] = 67244544;
    v21[1] = v3;
    v22 = 2050;
    v23 = v4;
    v24 = 2050;
    v25 = v5;
    v26 = 2050;
    v27 = v6;
    v28 = 1026;
    v29 = v7;
    v30 = 2050;
    v31 = v8;
    v32 = 2050;
    v33 = v9;
    v34 = 2050;
    v35 = v10;
    v36 = 2050;
    v37 = v11;
    v38 = 2050;
    v39 = v12;
    v40 = 2050;
    v41 = v13;
    v42 = 2050;
    v43 = v14;
    v44 = 1026;
    v45 = v15;
    v46 = 2050;
    v47 = v17;
    v48 = 2050;
    v49 = v16;
    v50 = 2050;
    v51 = v18;
    v52 = 2050;
    v53 = v19;
    v54 = 1026;
    v55 = v20;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[MAP] summary,A,%{public}d,B,%{public}llu,config-1,%{public}f,config-2,%{public}llu,config-3,%{public}d,config-4,%{public}llu,config-5,%{public}f,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}llu,config-10,%{public}f,debug-1,%{public}d,debug-2,%{public}llu,debug-3,%{public}f,debug-4,%{public}llu,debug-5,%{public}llu,debug-6,%{public}d\n", (uint8_t *)v21, 0xA6u);
  }
}

void CLKappaFeaturesAlgPeakDetectorMAPResult::reset(CLKappaFeaturesAlgPeakDetectorMAPResult *this)
{
  void *v2;
  _QWORD *v3;
  void *v4;

  v3 = (_QWORD *)((char *)this + 136);
  v2 = (void *)*((_QWORD *)this + 17);
  *((_BYTE *)v3 - 128) = 0;
  *((_DWORD *)v3 - 31) = 0;
  *((_BYTE *)v3 - 56) = 0;
  *(v3 - 6) = 0;
  *((_DWORD *)v3 - 10) = 0;
  *(v3 - 3) = 0;
  *(v3 - 2) = 0;
  *(v3 - 4) = 0;
  *((_DWORD *)v3 - 2) = 0;
  if (v2)
  {
    *((_QWORD *)this + 18) = v2;
    operator delete(v2);
  }
  v4 = (void *)*((_QWORD *)this + 20);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  if (v4)
  {
    *((_QWORD *)this + 21) = v4;
    operator delete(v4);
  }
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 184) = 1;
}

void CLKappaFeaturesAlgPeakDetectorMAP::CLKappaFeaturesAlgPeakDetectorMAP(CLKappaFeaturesAlgPeakDetectorMAP *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_DWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 117) = 0u;
  sub_10002D12C(&v21);
  sub_1000081AC((uint64_t)this + 8, &v21);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v19 = *((_QWORD *)this + 1);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_10002BFF8((uint64_t)&v19, &v21);
  sub_1000081AC(v6, &v21);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgPeakDetectorMAP *))(*(_QWORD *)this + 304))(this);
}

void sub_10002BFAC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = (void *)*((_QWORD *)v1 + 12);
  if (v6)
  {
    *((_QWORD *)v1 + 13) = v6;
    operator delete(v6);
  }
  v7 = *v4;
  if (*v4)
  {
    *((_QWORD *)v1 + 10) = v7;
    operator delete(v7);
  }
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10002BFF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaFeaturesAlgPeakDetectorMAP::CLKappaFeaturesAlgPeakDetectorMAP(CLKappaFeaturesAlgPeakDetectorMAP *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 17) = off_100345DF8;
  *((_QWORD *)this + 18) = off_100345EC0;
  *((_QWORD *)this + 19) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10034AAD8);
  *(_QWORD *)v2 = off_10034A5D8;
  *(_QWORD *)(v2 + 136) = off_10034A878;
  *(_QWORD *)(v2 + 144) = off_10034A9B0;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = v2 + 32;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_QWORD *)(v2 + 152) = off_10034AA88;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_DWORD *)(v2 + 64) = 0;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 117) = 0u;
  sub_10002D12C(&v18);
  sub_1000081AC((uint64_t)this + 8, &v18);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v16 = *((_QWORD *)this + 1);
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_10002BFF8((uint64_t)&v16, &v18);
  sub_1000081AC(v3, &v18);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgPeakDetectorMAP *))(*(_QWORD *)this + 304))(this);
}

void sub_10002C22C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = (void *)*((_QWORD *)v1 + 12);
  if (v5)
  {
    *((_QWORD *)v1 + 13) = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    *((_QWORD *)v1 + 10) = v6;
    operator delete(v6);
  }
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10034AAD8);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgPeakDetectorMAP::resetConfiguration(CLKappaFeaturesAlgPeakDetectorMAP *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  int v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  int v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  int v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  int v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  int v35;
  id v36;
  __int128 v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;

  v36 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgPeakDetectorMAPConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1148846080;
  LODWORD(v4) = 1.0;
  LODWORD(v5) = 8.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v36, v4, v3, v5);
  LODWORD(v37) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  *((_QWORD *)&v37 + 1) = (int)objc_msgSend(v7, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v36, 0, 10000000, 100000);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v38 = objc_msgSend(v8, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v36, 1, 100000, 5);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v39 = (int)objc_msgSend(v9, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v36, 0, 10000000, 120000);

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v11) = 0;
  LODWORD(v12) = 1.0;
  LODWORD(v13) = 1045220557;
  objc_msgSend(v10, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v36, v11, v12, v13);
  v40 = v14;

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v16) = 1061997773;
  LODWORD(v17) = 0;
  LODWORD(v18) = 1.0;
  objc_msgSend(v15, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v36, v17, v18, v16);
  v41 = v19;

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v21) = 0;
  LODWORD(v22) = 1.0;
  LODWORD(v23) = 1045220557;
  objc_msgSend(v20, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v36, v21, v22, v23);
  v42 = v24;

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v26) = 0;
  LODWORD(v27) = 1.0;
  LODWORD(v28) = 1.0;
  objc_msgSend(v25, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 7, v36, v26, v27, v28);
  v43 = v29;

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v44 = (int)objc_msgSend(v30, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 8, v36, 0, 10000000, 70000);

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v32) = 1120403456;
  LODWORD(v33) = 0;
  LODWORD(v34) = 15.0;
  objc_msgSend(v31, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 9, v36, v33, v32, v34);
  v45 = v35;

  CLKappaFeaturesAlgPeakDetectorMAP::setConfig((uint64_t)this, &v37);
}

void sub_10002C530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLKappaFeaturesAlgPeakDetectorMAP::setConfig(uint64_t a1, __int128 *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  NSObject *v7;
  double result;
  double v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;

  v3 = *(_OWORD **)(a1 + 32);
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_OWORD *)((char *)v3 + 60) = *(__int128 *)((char *)a2 + 44);
  v3[2] = v5;
  v3[3] = v6;
  v3[1] = v4;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034B0E0);
  v7 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v9 = *(float *)a2;
    v10 = *((_QWORD *)a2 + 1);
    v11 = *((_DWORD *)a2 + 4);
    v12 = *((_QWORD *)a2 + 3);
    v13 = *((float *)a2 + 8);
    v14 = *((float *)a2 + 9);
    v15 = *((float *)a2 + 10);
    v16 = *((float *)a2 + 11);
    v17 = *((_QWORD *)a2 + 6);
    v18 = *((float *)a2 + 14);
    v19 = 134220288;
    v20 = v9;
    v21 = 2048;
    v22 = v10;
    v23 = 1024;
    v24 = v11;
    v25 = 2048;
    v26 = v12;
    v27 = 2048;
    v28 = v13;
    v29 = 2048;
    v30 = v14;
    v31 = 2048;
    v32 = v15;
    v33 = 2048;
    v34 = v16;
    v35 = 2048;
    v36 = v17;
    v37 = 2048;
    v38 = v18;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[MAP] config-1,%f,config-2,%llu,config-3,%d,config-4,%llu,config-5,%f,config-6,%f,config-7,%f,config-8,%f,config-9,%llu,config-10,%f", (uint8_t *)&v19, 0x62u);
  }
  return result;
}

void CLKappaFeaturesAlgPeakDetectorMAP::epochFeedFastAccel(CLKappaFeaturesAlgPeakDetectorMAP *this, const CSSPUTriad_Struct *a2)
{
  float v3;
  unint64_t timestamp;
  uint64_t v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;

  v3 = sqrtf((float)((float)(a2->y * a2->y) + (float)(a2->x * a2->x)) + (float)(a2->z * a2->z));
  timestamp = a2->timestamp;
  if (v3 > *((float *)this + 16))
  {
    *((float *)this + 16) = v3;
    *((_QWORD *)this + 15) = timestamp;
  }
  v5 = *((_QWORD *)this + 4);
  v6 = *(float *)(v5 + 16);
  if (v3 >= v6 && !*((_BYTE *)this + 132))
  {
    *((_BYTE *)this + 132) = 1;
    return;
  }
  if (v3 < v6)
  {
    if (*((_BYTE *)this + 132))
    {
      v7 = *((_QWORD *)this + 15);
      if (timestamp > *(_QWORD *)(v5 + 24) + v7)
      {
        v8 = *((_QWORD *)this + 14);
        *((_BYTE *)this + 132) = 0;
        ++*((_DWORD *)this + 32);
        v9 = (char *)*((_QWORD *)this + 13);
        if ((unint64_t)v9 >= v8)
        {
          v11 = (char *)*((_QWORD *)this + 12);
          v12 = (v9 - v11) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            goto LABEL_75;
          v13 = v8 - (_QWORD)v11;
          v14 = (uint64_t)(v8 - (_QWORD)v11) >> 2;
          if (v14 <= v12 + 1)
            v14 = v12 + 1;
          if (v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
          {
            v16 = (char *)sub_10000D60C((uint64_t)this + 112, v15);
            v11 = (char *)*((_QWORD *)this + 12);
            v9 = (char *)*((_QWORD *)this + 13);
            v7 = *((_QWORD *)this + 15);
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[8 * v12];
          v18 = &v16[8 * v15];
          *(_QWORD *)v17 = v7;
          v10 = v17 + 8;
          while (v9 != v11)
          {
            v19 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *((_QWORD *)v17 - 1) = v19;
            v17 -= 8;
          }
          *((_QWORD *)this + 12) = v17;
          *((_QWORD *)this + 13) = v10;
          *((_QWORD *)this + 14) = v18;
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_QWORD *)v9 = v7;
          v10 = v9 + 8;
        }
        v20 = *((_QWORD *)this + 11);
        *((_QWORD *)this + 13) = v10;
        v21 = (char *)*((_QWORD *)this + 10);
        if ((unint64_t)v21 >= v20)
        {
          v23 = (char *)*((_QWORD *)this + 9);
          v24 = (v21 - v23) >> 2;
          if ((unint64_t)(v24 + 1) >> 62)
            goto LABEL_76;
          v25 = v20 - (_QWORD)v23;
          v26 = (uint64_t)(v20 - (_QWORD)v23) >> 1;
          if (v26 <= v24 + 1)
            v26 = v24 + 1;
          if (v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          if (v27)
          {
            v28 = (char *)sub_100020E2C((uint64_t)this + 88, v27);
            v23 = (char *)*((_QWORD *)this + 9);
            v21 = (char *)*((_QWORD *)this + 10);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[4 * v24];
          v30 = &v28[4 * v27];
          *(_DWORD *)v29 = *((_DWORD *)this + 16);
          v22 = v29 + 4;
          while (v21 != v23)
          {
            v31 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v29 - 1) = v31;
            v29 -= 4;
          }
          *((_QWORD *)this + 9) = v29;
          *((_QWORD *)this + 10) = v22;
          *((_QWORD *)this + 11) = v30;
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_DWORD *)v21 = *((_DWORD *)this + 16);
          v22 = v21 + 4;
        }
        *((_QWORD *)this + 10) = v22;
        v32 = (_QWORD *)*((_QWORD *)this + 4);
        v33 = (char *)v32[18];
        v34 = v32[19];
        if ((unint64_t)v33 < v34)
        {
          *(_QWORD *)v33 = *((_QWORD *)this + 15);
          v35 = v33 + 8;
LABEL_57:
          v32[18] = v35;
          v45 = (_QWORD *)*((_QWORD *)this + 4);
          v46 = (char *)v45[21];
          v47 = v45[22];
          if ((unint64_t)v46 < v47)
          {
            *(_DWORD *)v46 = *((_DWORD *)this + 16);
            v48 = v46 + 4;
LABEL_73:
            v45[21] = v48;
            *((_DWORD *)this + 16) = 0;
            *((_QWORD *)this + 15) = 0;
            return;
          }
          v49 = (char *)v45[20];
          v50 = (v46 - v49) >> 2;
          if (!((unint64_t)(v50 + 1) >> 62))
          {
            v51 = v47 - (_QWORD)v49;
            v52 = (uint64_t)(v47 - (_QWORD)v49) >> 1;
            if (v52 <= v50 + 1)
              v52 = v50 + 1;
            if (v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v52;
            if (v53)
            {
              v54 = (char *)sub_100020E2C((uint64_t)(v45 + 22), v53);
              v49 = (char *)v45[20];
              v46 = (char *)v45[21];
            }
            else
            {
              v54 = 0;
            }
            v55 = &v54[4 * v50];
            v56 = &v54[4 * v53];
            *(_DWORD *)v55 = *((_DWORD *)this + 16);
            v48 = v55 + 4;
            while (v46 != v49)
            {
              v57 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *((_DWORD *)v55 - 1) = v57;
              v55 -= 4;
            }
            v45[20] = v55;
            v45[21] = v48;
            v45[22] = v56;
            if (v49)
              operator delete(v49);
            goto LABEL_73;
          }
LABEL_76:
          sub_10000D5F8();
        }
        v36 = (char *)v32[17];
        v37 = (v33 - v36) >> 3;
        if (!((unint64_t)(v37 + 1) >> 61))
        {
          v38 = v34 - (_QWORD)v36;
          v39 = (uint64_t)(v34 - (_QWORD)v36) >> 2;
          if (v39 <= v37 + 1)
            v39 = v37 + 1;
          if (v38 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
          {
            v41 = (char *)sub_10000D60C((uint64_t)(v32 + 19), v40);
            v36 = (char *)v32[17];
            v33 = (char *)v32[18];
          }
          else
          {
            v41 = 0;
          }
          v42 = &v41[8 * v37];
          v43 = &v41[8 * v40];
          *(_QWORD *)v42 = *((_QWORD *)this + 15);
          v35 = v42 + 8;
          while (v33 != v36)
          {
            v44 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v42 - 1) = v44;
            v42 -= 8;
          }
          v32[17] = v42;
          v32[18] = v35;
          v32[19] = v43;
          if (v36)
            operator delete(v36);
          goto LABEL_57;
        }
LABEL_75:
        sub_10000D5F8();
      }
    }
  }
}

void `virtual thunk to'CLKappaFeaturesAlgPeakDetectorMAP::epochFeedFastAccel(CLKappaFeaturesAlgPeakDetectorMAP *this, const CSSPUTriad_Struct *a2)
{
  CLKappaFeaturesAlgPeakDetectorMAP::epochFeedFastAccel((CLKappaFeaturesAlgPeakDetectorMAP *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)), a2);
}

void CLKappaFeaturesAlgPeakDetectorMAP::epochFinalize(CLKappaFeaturesAlgPeakDetectorMAP *this, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  char *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  float v25;
  int v26;
  int v27;
  uint64_t v28;
  float v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  float v36;
  id v37;
  char *v38;
  void *v39;
  void *v40;
  char *__p;
  char *v42;
  unint64_t v43;
  char v44;

  __p = 0;
  v42 = 0;
  v43 = 0;
  v4 = *((_DWORD *)this + 32);
  v5 = *((_QWORD *)this + 4);
  if (v4 >= *(_DWORD *)(v5 + 32))
  {
    v8 = *((_QWORD *)this + 12);
    if ((unint64_t)(*((_QWORD *)this + 13) - v8) < 9)
    {
      v23 = 0;
      v24 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      v11 = 1;
      do
      {
        v12 = *(_QWORD *)(v8 + 8 * v11) - *(_QWORD *)(v8 + 8 * v11 - 8);
        if ((unint64_t)v9 >= v43)
        {
          v13 = __p;
          v14 = (v9 - __p) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            sub_10000D5F8();
          v16 = v43 - (_QWORD)__p;
          if ((uint64_t)(v43 - (_QWORD)__p) >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v17 = (unint64_t)sub_10000D60C((uint64_t)&v43, v17);
            v19 = v18;
            v13 = __p;
            v9 = v42;
          }
          else
          {
            v19 = 0;
          }
          v20 = (char *)(v17 + 8 * v14);
          *(_QWORD *)v20 = v12;
          v21 = v20 + 8;
          while (v9 != v13)
          {
            v22 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *((_QWORD *)v20 - 1) = v22;
            v20 -= 8;
          }
          __p = v20;
          v43 = v17 + 8 * v19;
          if (v13)
            operator delete(v13);
          v9 = v21;
        }
        else
        {
          *(_QWORD *)v9 = v12;
          v9 += 8;
        }
        v42 = v9;
        if (v12 <= *(_QWORD *)(*((_QWORD *)this + 4) + 40))
          v10 = 0;
        ++v11;
        v8 = *((_QWORD *)this + 12);
      }
      while (v11 < (*((_QWORD *)this + 13) - v8) >> 3);
      v23 = __p;
      v24 = v10 & 1;
    }
    std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>(v23);
    std::__sort<std::__less<float,float> &,float *>(*((_QWORD *)this + 9), *((_QWORD *)this + 10), &v44);
    v25 = (float)(unint64_t)((v42 - __p) >> 3);
    v5 = *((_QWORD *)this + 4);
    v26 = vcvtms_s32_f32(*(float *)(v5 + 48) * v25);
    v27 = vcvtps_s32_f32(*(float *)(v5 + 52) * v25);
    v28 = *((_QWORD *)this + 9);
    v29 = (float)(unint64_t)((*((_QWORD *)this + 10) - v28) >> 2);
    v30 = vcvtms_s32_f32(*(float *)(v5 + 56) * v29);
    if (v26 <= 1)
      v26 = 1;
    v31 = v26 - 1;
    if (v27 <= 1)
      v27 = 1;
    v32 = *(_QWORD *)&__p[8 * (v27 - 1)] - *(_QWORD *)&__p[8 * v31];
    if (v30 <= 1)
      v33 = 1;
    else
      v33 = v30;
    v34 = v33 - 1;
    v35 = vcvtps_s32_f32(*(float *)(v5 + 60) * v29);
    if (v35 <= 1)
      v35 = 1;
    v36 = *(float *)(v28 + 4 * (v35 - 1)) - *(float *)(v28 + 4 * v34);
    v6 = v32 <= *(_QWORD *)(v5 + 64) && v36 <= *(float *)(v5 + 72);
    *(_QWORD *)(v5 + 104) = v32;
    *(float *)(v5 + 128) = v36;
    v7 = v24 != 0;
    v4 = *((_DWORD *)this + 32);
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_DWORD *)(v5 + 128) = 0;
    v7 = 1;
  }
  *(_DWORD *)(v5 + 96) = v4;
  *(_BYTE *)(v5 + 184) = v7;
  *(_QWORD *)(v5 + 88) = a2;
  *(_BYTE *)(v5 + 80) = v6 && v7;
  v37 = *(id *)(*((_QWORD *)this + 6) + 24);
  v38 = (char *)objc_msgSend(v37, "count");
  if (v38)
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectAtIndex:", 0));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectAtIndex:", v38 - 1));
    *(_QWORD *)(*((_QWORD *)this + 4) + 112) = objc_msgSend(v39, "timestamp");
    *(_QWORD *)(*((_QWORD *)this + 4) + 120) = objc_msgSend(v40, "timestamp");

  }
  if (__p)
    operator delete(__p);
}

void sub_10002CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgPeakDetectorMAP::getLowerPercentileIndex(CLKappaFeaturesAlgPeakDetectorMAP *this, unint64_t a2, float a3)
{
  int v3;

  v3 = vcvtms_s32_f32((float)a2 * a3);
  if (v3 <= 1)
    v3 = 1;
  return (v3 - 1);
}

uint64_t CLKappaFeaturesAlgPeakDetectorMAP::getUpperPercentileIndex(CLKappaFeaturesAlgPeakDetectorMAP *this, unint64_t a2, float a3)
{
  int v3;

  v3 = vcvtps_s32_f32((float)a2 * a3);
  if (v3 <= 1)
    v3 = 1;
  return (v3 - 1);
}

void `virtual thunk to'CLKappaFeaturesAlgPeakDetectorMAP::epochFinalize(CLKappaFeaturesAlgPeakDetectorMAP *this, uint64_t a2)
{
  CLKappaFeaturesAlgPeakDetectorMAP::epochFinalize((CLKappaFeaturesAlgPeakDetectorMAP *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

uint64_t CLKappaFeaturesAlgPeakDetectorMAP::epochReset(uint64_t this)
{
  uint64_t v1;

  *(_DWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 80) = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 104) = *(_QWORD *)(this + 96);
  v1 = *(_QWORD *)(this + 32);
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 168) = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(this + 120) = 0;
  *(_DWORD *)(this + 128) = 0;
  *(_BYTE *)(this + 132) = 0;
  *(_BYTE *)(v1 + 184) = 1;
  return this;
}

_QWORD *`virtual thunk to'CLKappaFeaturesAlgPeakDetectorMAP::epochReset(_QWORD *this)
{
  char *v1;
  uint64_t v2;

  v1 = (char *)this + *(_QWORD *)(*this - 56);
  *((_DWORD *)v1 + 16) = 0;
  *((_QWORD *)v1 + 10) = *((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 13) = *((_QWORD *)v1 + 12);
  v2 = *((_QWORD *)v1 + 4);
  *(_QWORD *)(v2 + 144) = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 168) = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *((_QWORD *)v1 + 15) = 0;
  *((_DWORD *)v1 + 32) = 0;
  v1[132] = 0;
  *(_BYTE *)(v2 + 184) = 1;
  return this;
}

void sub_10002CEC8(CLKappaAlgBlock *a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_10034A5D8;
  *((_QWORD *)a1 + 17) = off_10034A878;
  *((_QWORD *)a1 + 18) = off_10034A9B0;
  *((_QWORD *)a1 + 19) = off_10034AA88;
  v2 = (void *)*((_QWORD *)a1 + 12);
  if (v2)
  {
    *((_QWORD *)a1 + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)a1 + 9);
  if (v3)
  {
    *((_QWORD *)a1 + 10) = v3;
    operator delete(v3);
  }
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10034AAD8);
}

void sub_10002CF40(CLKappaAlgBlock *a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_10034A5D8;
  *((_QWORD *)a1 + 17) = off_10034A878;
  *((_QWORD *)a1 + 18) = off_10034A9B0;
  *((_QWORD *)a1 + 19) = off_10034AA88;
  v2 = (void *)*((_QWORD *)a1 + 12);
  if (v2)
  {
    *((_QWORD *)a1 + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)a1 + 9);
  if (v3)
  {
    *((_QWORD *)a1 + 10) = v3;
    operator delete(v3);
  }
  sub_10000A718((uint64_t)a1 + 48);
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10034AAD8);
  operator delete();
}

_QWORD *sub_10002CFCC(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_10002CFD4(_QWORD *a1)
{
  CLKappaAlgBlock *v1;
  void *v2;
  void *v3;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10034A5D8;
  *((_QWORD *)v1 + 17) = off_10034A878;
  *((_QWORD *)v1 + 18) = off_10034A9B0;
  *((_QWORD *)v1 + 19) = off_10034AA88;
  v2 = (void *)*((_QWORD *)v1 + 12);
  if (v2)
  {
    *((_QWORD *)v1 + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)v1 + 9);
  if (v3)
  {
    *((_QWORD *)v1 + 10) = v3;
    operator delete(v3);
  }
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10034AAD8);
}

void sub_10002D054(_QWORD *a1)
{
  CLKappaAlgBlock *v1;
  void *v2;
  void *v3;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10034A5D8;
  *((_QWORD *)v1 + 17) = off_10034A878;
  *((_QWORD *)v1 + 18) = off_10034A9B0;
  *((_QWORD *)v1 + 19) = off_10034AA88;
  v2 = (void *)*((_QWORD *)v1 + 12);
  if (v2)
  {
    *((_QWORD *)v1 + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)v1 + 9);
  if (v3)
  {
    *((_QWORD *)v1 + 10) = v3;
    operator delete(v3);
  }
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10034AAD8);
  operator delete();
}

_QWORD *sub_10002D0E8(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_10002D0FC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

char *sub_10002D12C@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  char *result;

  v2 = (char *)operator new(0xD8uLL);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = off_10034B110;
  *((_QWORD *)v2 + 1) = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_QWORD *)v2 + 26) = 0;
  *((_DWORD *)v2 + 10) = 1090519040;
  *((_QWORD *)v2 + 6) = 100000;
  *((_DWORD *)v2 + 14) = 5;
  *((_QWORD *)v2 + 8) = 120000;
  *(_OWORD *)(v2 + 72) = xmmword_1002E5C70;
  *((_QWORD *)v2 + 11) = 70000;
  *((_DWORD *)v2 + 24) = 1097859072;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  v2[208] = 1;
  a1[1] = v2;
  *((_QWORD *)v2 + 3) = off_10034D0D8;
  result = v2 + 24;
  *a1 = result;
  return result;
}

void sub_10002D1F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034B110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10002D208(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034B110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10002D23C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_10002D3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,id location)
{
  void *v21;
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10002D438(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("CSKappaCoreAnalyticsDailyInfo")));

  objc_msgSend(v3, "getBytes:length:", *(_QWORD *)(a1 + 32) + 16, 84);
  objc_msgSend(*(id *)(a1 + 32), "updateUserInfoSettings");
  objc_msgSend(*(id *)(a1 + 32), "updateUserStats");
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)(a1 + 32) + 16, 84));

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 216), "setObject:forKey:");
}

void sub_10002D4F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002D514(uint64_t a1)
{
  NSObject **WeakRetained;
  NSObject **v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  v3 = WeakRetained;
  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = sub_10002D608;
  v11 = sub_10002D618;
  v12 = 0;
  if (WeakRetained)
  {
    v4 = WeakRetained[28];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10002D620;
    v6[3] = &unk_10034B180;
    v6[4] = v3;
    v6[5] = &v7;
    dispatch_sync(v4, v6);
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, 1, v8[5]);
  _Block_object_dispose(&v7, 8);

}

void sub_10002D5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10002D608(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002D618(uint64_t a1)
{

}

void sub_10002D620(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint8_t v11[16];

  if (qword_1003873C0 != -1)
    dispatch_once(&qword_1003873C0, &stru_10034B268);
  v2 = qword_1003873C8;
  if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CoreAnalytics queryCompanion timeout", v11, 2u);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("CSKappaCoreAnalyticsDailyInfo")));

  objc_msgSend(v4, "getBytes:length:", *(_QWORD *)(a1 + 32) + 16, 84);
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sendUserInfoToCoreAnalytics"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend(*(id *)(a1 + 32), "clearUserInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(v8, "setObject:forKey:", v9, CFSTR("CSKappaCoreAnalyticsLastSuccessfulUpload"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)(a1 + 32) + 16, 84));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 216), "setObject:forKey:", v10, CFSTR("CSKappaCoreAnalyticsDailyInfo"));

}

void sub_10002D7A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10002D7D4(uint64_t a1, void *a2)
{
  id v3;
  NSObject **WeakRetained;
  NSObject **v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[5];
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD v12[5];
  id v13;

  v3 = a2;
  WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x3032000000;
  v12[3] = sub_10002D608;
  v12[4] = sub_10002D618;
  v13 = 0;
  if (WeakRetained)
  {
    v6 = WeakRetained[28];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10002D910;
    v8[3] = &unk_10034B1D0;
    v8[4] = WeakRetained;
    v9 = v3;
    v11 = v12;
    v10 = *(id *)(a1 + 32);
    dispatch_sync(v6, v8);

  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(v7, 1, 0);
  }
  _Block_object_dispose(v12, 8);

}

void sub_10002D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_10002D910(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint8_t v12[8];
  uint8_t buf[16];

  if (qword_1003873C0 != -1)
    dispatch_once(&qword_1003873C0, &stru_10034B268);
  v2 = qword_1003873C8;
  if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CoreAnalytics query completion kTypeCASettings", buf, 2u);
  }
  objc_msgSend(*(id *)(a1 + 32), "stopTimer");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("CSKappaCoreAnalyticsDailyInfo")));

  objc_msgSend(v4, "getBytes:length:", *(_QWORD *)(a1 + 32) + 16, 84);
  objc_msgSend(*(id *)(a1 + 40), "getBytes:length:", v12, 8);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 18) = v12[4];
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 20) = v12[5];
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 30) = v12[6];
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 31) = v12[7];
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sendUserInfoToCoreAnalytics"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_msgSend(*(id *)(a1 + 32), "clearUserInfo");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  objc_msgSend(v8, "setObject:forKey:", v9, CFSTR("CSKappaCoreAnalyticsLastSuccessfulUpload"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)(a1 + 32) + 16, 84));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 216), "setObject:forKey:", v10, CFSTR("CSKappaCoreAnalyticsDailyInfo"));
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v11 + 16))(v11, 1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

}

void sub_10002DAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10002DE10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10002E8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

id sub_10002EAF0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10002EE08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10002EF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10002F7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

id sub_10002F9C4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10002FA24(uint64_t a1)
{
  NSObject *v1;
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v48;
  uint8_t buf[4];
  char v50;
  int v51;
  __int128 v52;
  __int128 v53;
  int32x4_t v54;
  __int128 v55;
  uint64_t v56;
  _QWORD v57[16];
  _QWORD v58[16];
  uint8_t v59[4];
  void *v60;
  _QWORD v61[16];
  _QWORD v62[16];

  if (qword_1003873C0 != -1)
    dispatch_once(&qword_1003873C0, &stru_10034B268);
  v1 = qword_1003873C8;
  if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "updatePersistedUserInfo", buf, 2u);
  }
  v50 = 0;
  *(_DWORD *)buf = 0;
  v51 = -1;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("CSKappaCoreAnalyticsDailyInfo")));

  if (v48)
  {
    if (qword_1003873C0 != -1)
      dispatch_once(&qword_1003873C0, &stru_10034B268);
    v3 = qword_1003873C8;
    if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Valid persisted UserInfo found", v59, 2u);
    }
    objc_msgSend(v48, "getBytes:length:", buf, 84);
  }
  v61[0] = CFSTR("numKappaSessions");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD2(v52)));
  v62[0] = v44;
  v61[1] = CFSTR("numKappaEvents");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v53));
  v62[1] = v42;
  v61[2] = CFSTR("numTriggersAllSessions");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD2(v53)));
  v62[2] = v40;
  v61[3] = CFSTR("numUISurfaced");
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54.u32[0]));
  v62[3] = v38;
  v61[4] = CFSTR("numCancelledUI");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54.u32[2]));
  v62[4] = v36;
  v61[5] = CFSTR("numUserRequestedSOS");
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v55));
  v62[5] = v34;
  v61[6] = CFSTR("numAutoRequestedSOS");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD2(v55)));
  v62[6] = v32;
  v61[7] = CFSTR("numPlacedCalls");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v56));
  v62[7] = v4;
  v61[8] = CFSTR("numKappaSessions_companion");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v52)));
  v62[8] = v5;
  v61[9] = CFSTR("numKappaEvents_companion");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD1(v53)));
  v62[9] = v6;
  v61[10] = CFSTR("numTriggersAllSessions_companion");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v53)));
  v62[10] = v7;
  v61[11] = CFSTR("numUISurfaced_companion");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54.u32[1]));
  v62[11] = v8;
  v61[12] = CFSTR("numCancelledUI_companion");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54.u32[3]));
  v62[12] = v9;
  v61[13] = CFSTR("numUserRequestedSOS_companion");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD1(v55)));
  v62[13] = v10;
  v61[14] = CFSTR("numAutoRequestedSOS_companion");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v55)));
  v62[14] = v11;
  v61[15] = CFSTR("numPlacedCalls_companion");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v56)));
  v62[15] = v12;
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v62, v61, 16));

  if (qword_1003873C0 != -1)
    dispatch_once(&qword_1003873C0, &stru_10034B268);
  v13 = qword_1003873C8;
  if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v59 = 138412290;
    v60 = v46;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Persisted UserInfo:%@", v59, 0xCu);
  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = v53 + *(_DWORD *)(v14 + 44);
  DWORD2(v52) += *(_DWORD *)(v14 + 36);
  LODWORD(v53) = v15;
  DWORD2(v53) += *(_DWORD *)(v14 + 52);
  v16 = *(_DWORD *)(v14 + 80);
  v17 = *(_DWORD *)(v14 + 88);
  v18 = DWORD2(v55) + *(_DWORD *)(v14 + 84);
  LODWORD(v55) = v55 + *(_DWORD *)(v14 + 76);
  DWORD2(v55) = v18;
  v19 = *(_DWORD *)(v14 + 96);
  LODWORD(v56) = v56 + *(_DWORD *)(v14 + 92);
  v54 = vaddq_s32(v54, *(int32x4_t *)(v14 + 60));
  DWORD1(v55) += v16;
  HIDWORD(v55) += v17;
  HIDWORD(v56) += v19;
  v57[0] = CFSTR("numKappaSessions");
  v58[0] = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:"));
  v57[1] = CFSTR("numKappaEvents");
  v45 = (void *)v58[0];
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v53));
  v58[1] = v43;
  v57[2] = CFSTR("numTriggersAllSessions");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD2(v53)));
  v58[2] = v41;
  v57[3] = CFSTR("numUISurfaced");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54.u32[0]));
  v58[3] = v39;
  v57[4] = CFSTR("numCancelledUI");
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54.u32[2]));
  v58[4] = v37;
  v57[5] = CFSTR("numUserRequestedSOS");
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v55));
  v58[5] = v35;
  v57[6] = CFSTR("numAutoRequestedSOS");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD2(v55)));
  v58[6] = v33;
  v57[7] = CFSTR("numPlacedCalls");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v56));
  v58[7] = v20;
  v57[8] = CFSTR("numKappaSessions_companion");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v52)));
  v58[8] = v21;
  v57[9] = CFSTR("numKappaEvents_companion");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD1(v53)));
  v58[9] = v22;
  v57[10] = CFSTR("numTriggersAllSessions_companion");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v53)));
  v58[10] = v23;
  v57[11] = CFSTR("numUISurfaced_companion");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54.u32[1]));
  v58[11] = v24;
  v57[12] = CFSTR("numCancelledUI_companion");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v54.u32[3]));
  v58[12] = v25;
  v57[13] = CFSTR("numUserRequestedSOS_companion");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD1(v55)));
  v58[13] = v26;
  v57[14] = CFSTR("numAutoRequestedSOS_companion");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v55)));
  v58[14] = v27;
  v57[15] = CFSTR("numPlacedCalls_companion");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v56)));
  v58[15] = v28;
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v58, v57, 16));

  if (qword_1003873C0 != -1)
    dispatch_once(&qword_1003873C0, &stru_10034B268);
  v30 = qword_1003873C8;
  if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v59 = 138412290;
    v60 = v29;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Updated - UserInfo:%@", v59, 0xCu);
  }
  v31 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", buf, 84);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 216), "setObject:forKey:", v31, CFSTR("CSKappaCoreAnalyticsDailyInfo"));
  objc_msgSend(*(id *)(a1 + 32), "clearUserInfo");

}

void sub_100030328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_object, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1000306D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100030934(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100030E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100031358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000313D0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  id v5;
  uint8_t v6;
  unsigned __int8 v7;
  __int16 v8;
  unsigned __int8 v9;
  int v10;
  uint8_t buf[4];
  int v12;
  _BYTE v13[20];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  objc_msgSend(*(id *)(a1 + 32), "getBytes:length:", &v6, 12);
  if (qword_1003873C0 != -1)
    dispatch_once(&qword_1003873C0, &stru_10034B268);
  v2 = qword_1003873C8;
  if (os_log_type_enabled((os_log_t)qword_1003873C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110400;
    v12 = v6;
    *(_WORD *)v13 = 1024;
    *(_DWORD *)&v13[2] = v7;
    *(_WORD *)&v13[6] = 1024;
    *(_DWORD *)&v13[8] = v8;
    *(_WORD *)&v13[12] = 1024;
    *(_DWORD *)&v13[14] = HIBYTE(v8);
    *(_WORD *)&v13[18] = 1024;
    LODWORD(v14) = v9;
    WORD2(v14) = 1024;
    *(_DWORD *)((char *)&v14 + 6) = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "receiveLocalKappaSessionInfo didEnableKappaDetection:%d isImproveSafetyEnabled:%d firstPartyEnabled:%d thirdPartyEnabled:%d didDetectKappaEvent:%d numTriggers:%d", buf, 0x26u);
  }
  LOBYTE(v12) = 0;
  *(_DWORD *)buf = 0;
  *(_DWORD *)v13 = -1;
  *(_OWORD *)&v13[4] = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("CSKappaCoreAnalyticsDailyInfo")));

  objc_msgSend(v4, "getBytes:length:", buf, 84);
  buf[2] = v6;
  LOBYTE(v12) = v7;
  *(_WORD *)&v13[6] = v8;
  ++*(_DWORD *)&v13[16];
  HIDWORD(v14) += v10;
  if (v9)
    ++DWORD1(v14);
  v5 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", buf, 84);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 216), "setObject:forKey:", v5, CFSTR("CSKappaCoreAnalyticsDailyInfo"));

}

void sub_1000315D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000316BC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "CoreAnalytics");
  v2 = (void *)qword_1003873C8;
  qword_1003873C8 = (uint64_t)v1;

}

void CLKappaDeescalatorAutocorrelation::CLKappaDeescalatorAutocorrelation(CLKappaDeescalatorAutocorrelation *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = off_10034B298;
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_QWORD *)this + 10) = 0x1100000000;
  *((_QWORD *)this + 45) = 0x1100000000;
  *((_QWORD *)this + 49) = 0x1100000000;
  *((_QWORD *)this + 492) = 0x1100000000;
  *((_DWORD *)this + 991) = 0;
  *((_WORD *)this + 1984) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 5;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 5;
  }
  strcpy(v2, "de-AC");
}

unint64_t CLKappaDeescalatorAutocorrelation::setupForceControls(CLKappaDeescalatorAutocorrelation *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceAutoCorr");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceAutoCorr");
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CLKappaDeescalatorAutocorrelation::assertReady(CLKappaDeescalatorAutocorrelation *this, uint64_t a2, const char *a3)
{
  return CLKappaDeescalator::raiseUnless(*((unsigned __int8 *)this + 76), (BOOL)"[SC] autocorrelation missing threshold", a3);
}

uint64_t CLKappaDeescalatorAutocorrelation::prepareForNextEpoch(uint64_t this)
{
  *(_DWORD *)(this + 3964) = 0;
  *(_WORD *)(this + 3968) = 0;
  return this;
}

uint64_t CLKappaDeescalatorAutocorrelation::setConfig(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 72) = *a2;
  *(_BYTE *)(result + 76) = 1;
  return result;
}

uint64_t CLKappaDeescalatorAutocorrelation::updateWithAnyCrashDetected(uint64_t this, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int16 *)(this + 362);
  v3 = *(unsigned int *)(this + 364);
  v4 = *(unsigned __int16 *)(this + 360);
  if (v4 + v2 >= v3)
    v5 = *(unsigned int *)(this + 364);
  else
    v5 = 0;
  *(_BYTE *)(this + 360 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *(_WORD *)(this + 360) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 362) = v2 + 1;
  }
  return this;
}

unsigned __int16 *CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(uint64_t a1, _OWORD *a2)
{
  return sub_100031884((unsigned __int16 *)(a1 + 80), a2);
}

unsigned __int16 *sub_100031884(unsigned __int16 *result, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  *(_OWORD *)&result[8 * (v3 - v2) + 4] = *a2;
  v4 = result[1];
  v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    v6 = *result + 1;
    if (v6 < v5)
      LOWORD(v5) = 0;
    *result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

unsigned __int16 *CLKappaDeescalatorAutocorrelation::updateWithBaroFeatures(uint64_t a1, _OWORD *a2)
{
  return sub_1000318EC((unsigned __int16 *)(a1 + 392), a2);
}

unsigned __int16 *sub_1000318EC(unsigned __int16 *result, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[104 * (v3 - v2)];
  *(_OWORD *)(v4 + 4) = *a2;
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[2];
  *(_OWORD *)(v4 + 12) = a2[1];
  *(_OWORD *)(v4 + 36) = v6;
  *(_OWORD *)(v4 + 28) = v5;
  *(_OWORD *)(v4 + 20) = v7;
  v8 = a2[7];
  v9 = a2[8];
  v10 = a2[6];
  *(_OWORD *)(v4 + 44) = a2[5];
  *(_OWORD *)(v4 + 68) = v9;
  *(_OWORD *)(v4 + 60) = v8;
  *(_OWORD *)(v4 + 52) = v10;
  v11 = a2[11];
  v12 = a2[12];
  v13 = a2[10];
  *(_OWORD *)(v4 + 76) = a2[9];
  *(_OWORD *)(v4 + 100) = v12;
  *(_OWORD *)(v4 + 92) = v11;
  *(_OWORD *)(v4 + 84) = v13;
  v14 = result[1];
  v15 = *((unsigned int *)result + 1);
  if (v15 <= v14)
  {
    v16 = *result + 1;
    if (v16 < v15)
      LOWORD(v15) = 0;
    *result = v16 - v15;
  }
  else
  {
    result[1] = v14 + 1;
  }
  return result;
}

uint64_t CLKappaDeescalatorAutocorrelation::updateWithHighSpeedCrash(uint64_t this, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int16 *)(this + 3938);
  v3 = *(unsigned int *)(this + 3940);
  v4 = *(unsigned __int16 *)(this + 3936);
  if (v4 + v2 >= v3)
    v5 = *(unsigned int *)(this + 3940);
  else
    v5 = 0;
  *(_BYTE *)(this + 3936 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *(_WORD *)(this + 3936) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 3938) = v2 + 1;
  }
  return this;
}

uint64_t CLKappaDeescalatorAutocorrelation::getAutocorrelationStats(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  uint64_t v5;

  if (!a1[1])
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    if (*(_BYTE *)(sub_100031A84(a1, v4) + 8)
      && (*(_BYTE *)(sub_100031A84(a1, v4) + 9) || !*(_BYTE *)sub_100027E40(a2, v4)))
    {
      v5 = (v5 + 1);
    }
    ++v4;
  }
  while (v4 < a1[1]);
  return v5;
}

uint64_t sub_100031A84(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  int v16;

  v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *((_DWORD *)a1 + 1);
      v9 = 134218754;
      v10 = Current;
      v11 = 2080;
      v12 = "const T &CMQueue<CLKappaFeaturesAlgGravityAutoCorrelationOutput>::operator[](const size_t) const [T = CLKapp"
            "aFeaturesAlgGravityAutoCorrelationOutput]";
      v13 = 2048;
      v14 = a2;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  v5 = *a1 + a2;
  if (v5 < v4)
    v4 = 0;
  return (uint64_t)&a1[8 * (v5 - v4) + 4];
}

uint64_t CLKappaDeescalatorAutocorrelation::getAirbagDetectedStats(unsigned __int16 *a1)
{
  unint64_t v2;
  char v3;

  if (!a1[1])
    return 0;
  v2 = 0;
  v3 = 0;
  do
  {
    if (*(_BYTE *)(sub_100031C10(a1, v2) + 52))
      v3 = 1;
    ++v2;
  }
  while (v2 < a1[1]);
  return v3 & 1;
}

uint64_t sub_100031C10(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  int v16;

  v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *((_DWORD *)a1 + 1);
      v9 = 134218754;
      v10 = Current;
      v11 = 2080;
      v12 = "const T &CMQueue<CLKappaFeaturesAlgBaroOutput>::operator[](const size_t) const [T = CLKappaFeaturesAlgBaroOutput]";
      v13 = 2048;
      v14 = a2;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  v5 = *a1 + a2;
  if (v5 < v4)
    v4 = 0;
  return (uint64_t)&a1[104 * (v5 - v4) + 4];
}

uint64_t CLKappaDeescalatorAutocorrelation::onEvaluateAtSecondDeescalationOpportunity(CLKappaDeescalatorAutocorrelation *this)
{
  int HighSpeedDetectedStats;
  int v3;

  *((_BYTE *)this + 3968) = CLKappaDeescalatorAutocorrelation::getAirbagDetectedStats((unsigned __int16 *)this + 196);
  *((_DWORD *)this + 991) = CLKappaDeescalatorAutocorrelation::getAutocorrelationStats((unsigned __int16 *)this + 40, (unsigned __int16 *)this + 180);
  HighSpeedDetectedStats = CLKappaDeescalator::getHighSpeedDetectedStats((unsigned __int16 *)this + 1968);
  *((_BYTE *)this + 3969) = HighSpeedDetectedStats;
  if (*((_BYTE *)this + 76) && *((_DWORD *)this + 991) < *((_DWORD *)this + 18))
    return 1;
  v3 = *((_BYTE *)this + 3968) ? 1 : HighSpeedDetectedStats;
  if (v3 == 1)
    return 1;
  else
    return 4;
}

_DWORD *CLKappaDeescalatorAutocorrelation::onPreviousEpochMadeDecision(_DWORD *this)
{
  this[20] = 0;
  this[90] = 0;
  this[98] = 0;
  this[984] = 0;
  return this;
}

void sub_100031DC8(void **this)
{
  *this = off_10034B298;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_100031DD8(void **a1)
{
  *a1 = off_10034B298;
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

double CLKappaInferencesAlgSevereCrashResult::reset(CLKappaInferencesAlgSevereCrashResult *this)
{
  char *v1;
  double result;

  *((_QWORD *)this + 17) = 0;
  v1 = (char *)this + 136;
  *(v1 - 128) = 0;
  *((_DWORD *)v1 - 31) = 0;
  *((_QWORD *)v1 - 3) = 0;
  *((_QWORD *)v1 - 2) = 0;
  *((_QWORD *)v1 - 4) = 0;
  *(_DWORD *)(v1 - 9) = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_DWORD *)(v1 + 15) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 20) = 0u;
  *(_OWORD *)(v1 + 36) = 0u;
  *(_OWORD *)(v1 + 52) = 0u;
  *(_OWORD *)(v1 + 68) = 0u;
  *(_OWORD *)(v1 + 84) = 0u;
  *(_OWORD *)(v1 + 100) = 0u;
  *(_QWORD *)(v1 + 113) = 0;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_WORD *)v1 + 80) = 0;
  v1[172] = 0;
  *(_QWORD *)(v1 + 164) = 0;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *(_QWORD *)(v1 + 206) = 0;
  *((_QWORD *)v1 + 27) = 0;
  v1[224] = 0;
  *(_QWORD *)(v1 + 228) = 0;
  *((_QWORD *)v1 + 31) = 0;
  *((_QWORD *)v1 + 32) = 0;
  *((_QWORD *)v1 + 30) = 0;
  v1[264] = 0;
  *(_QWORD *)(v1 + 268) = 0;
  *(_QWORD *)(v1 + 273) = 0;
  return result;
}

void CLKappaInferencesAlgSevereCrashResult::log(CLKappaInferencesAlgSevereCrashResult *this)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  int v16;
  double v17;
  double v18;
  int v19;
  double v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  double v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  double v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  int v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  double v168;
  __int16 v169;
  int v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  int v174;
  __int16 v175;
  int v176;
  __int16 v177;
  double v178;
  __int16 v179;
  double v180;
  __int16 v181;
  double v182;
  __int16 v183;
  double v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;
  __int16 v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  int v196;
  __int16 v197;
  int v198;
  __int16 v199;
  int v200;
  __int16 v201;
  int v202;
  __int16 v203;
  int v204;
  __int16 v205;
  int v206;
  __int16 v207;
  int v208;
  __int16 v209;
  int v210;
  __int16 v211;
  int v212;
  __int16 v213;
  uint64_t v214;
  __int16 v215;
  uint64_t v216;
  __int16 v217;
  uint64_t v218;
  __int16 v219;
  uint64_t v220;
  __int16 v221;
  uint64_t v222;
  __int16 v223;
  int v224;
  __int16 v225;
  double v226;
  __int16 v227;
  int v228;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034BED8);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_QWORD *)this + 14);
    v46 = *((_QWORD *)this + 13);
    v4 = *((unsigned __int8 *)this + 120);
    v48 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 121);
    v50 = v4;
    v5 = *((unsigned __int8 *)this + 122);
    v52 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 123);
    v54 = v5;
    v6 = *((unsigned __int8 *)this + 124);
    v56 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 125);
    v58 = v6;
    v7 = *((unsigned __int8 *)this + 126);
    v60 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 127);
    v62 = v7;
    v8 = *((unsigned __int8 *)this + 128);
    v64 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 129);
    v66 = v8;
    v9 = *((unsigned __int8 *)this + 130);
    v68 = v3;
    v70 = v9;
    LODWORD(v3) = *((_DWORD *)this + 7);
    v76 = *((_DWORD *)this + 6);
    v10 = *((unsigned __int8 *)this + 60);
    v11 = *((float *)this + 9);
    v12 = *((float *)this + 10);
    v13 = *((float *)this + 11);
    v78 = v3;
    LODWORD(v3) = *((_DWORD *)this + 12);
    v80 = v10;
    v14 = *((unsigned __int8 *)this + 61);
    v15 = *((float *)this + 16);
    v90 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 68);
    v92 = v14;
    v16 = *((unsigned __int8 *)this + 69);
    v17 = *((float *)this + 18);
    v18 = *((float *)this + 19);
    v96 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 80);
    v98 = v16;
    v19 = *((unsigned __int8 *)this + 81);
    v20 = *((float *)this + 21);
    v104 = v3;
    v106 = v19;
    v21 = *((_DWORD *)this + 22);
    v112 = *((_DWORD *)this + 23);
    LODWORD(v3) = *((unsigned __int8 *)this + 136);
    v84 = v11;
    v86 = v12;
    v88 = v13;
    v94 = v15;
    v100 = v17;
    v102 = v18;
    v108 = v20;
    v22 = *((unsigned __int8 *)this + 137);
    v110 = v21;
    v23 = *((unsigned __int8 *)this + 138);
    v114 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 142);
    v116 = v22;
    v24 = *((unsigned __int8 *)this + 143);
    v118 = v23;
    v25 = *((unsigned __int8 *)this + 144);
    v120 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 145);
    v122 = v24;
    v26 = *((unsigned __int8 *)this + 146);
    v124 = v25;
    v27 = *((unsigned __int8 *)this + 150);
    v126 = v3;
    LODWORD(v3) = *((_DWORD *)this + 59);
    v128 = v26;
    v28 = *((unsigned __int8 *)this + 147);
    v130 = v27;
    v29 = *((_QWORD *)this + 30);
    v132 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 360);
    v134 = v28;
    v30 = *((unsigned __int8 *)this + 151);
    v136 = v29;
    LODWORD(v29) = *((unsigned __int8 *)this + 152);
    v138 = v3;
    LODWORD(v3) = *((unsigned __int8 *)this + 153);
    v140 = v30;
    v31 = *((unsigned __int8 *)this + 154);
    v142 = v29;
    v144 = v3;
    LODWORD(v29) = *((_DWORD *)this + 54);
    LODWORD(v3) = *((_DWORD *)this + 55);
    v146 = v31;
    v148 = v29;
    v32 = *((_DWORD *)this + 56);
    LODWORD(v29) = *((_DWORD *)this + 57);
    v150 = v3;
    LODWORD(v3) = *((_DWORD *)this + 70);
    v152 = v32;
    v33 = *((_DWORD *)this + 73);
    v154 = v29;
    LODWORD(v29) = *((unsigned __int8 *)this + 297);
    v156 = v3;
    LODWORD(v3) = *((_DWORD *)this + 75);
    v162 = v33;
    v34 = *((unsigned __int8 *)this + 308);
    v164 = v29;
    v35 = *((_QWORD *)this + 39);
    v166 = v3;
    LODWORD(v3) = *((_DWORD *)this + 80);
    v170 = v34;
    v36 = *((_DWORD *)this + 81);
    v172 = v35;
    LODWORD(v35) = *((unsigned __int8 *)this + 349);
    v174 = v3;
    LODWORD(v3) = *((_DWORD *)this + 88);
    v176 = v36;
    v37 = *((unsigned __int8 *)this + 148);
    v188 = v35;
    LODWORD(v35) = *((_DWORD *)this + 92);
    v192 = v3;
    v38 = *((_QWORD *)this + 34);
    v196 = v37;
    v216 = v38;
    v39 = *((_QWORD *)this + 47);
    v40 = *((_QWORD *)this + 48);
    v200 = v35;
    v218 = v39;
    LODWORD(v35) = *((_DWORD *)this + 63);
    v204 = *((_DWORD *)this + 62);
    v208 = *((unsigned __int8 *)this + 416);
    v212 = *((unsigned __int8 *)this + 256);
    v220 = v40;
    v224 = *((unsigned __int8 *)this + 400);
    v228 = *((_DWORD *)this + 106);
    v41 = *((float *)this + 76);
    v42 = *((float *)this + 82);
    v43 = *((float *)this + 83);
    v44 = *((float *)this + 85);
    v160 = *((float *)this + 72);
    v168 = v41;
    v178 = v42;
    v180 = v43;
    v184 = v44;
    v186 = *((_DWORD *)this + 86);
    v190 = *((unsigned __int8 *)this + 348);
    v194 = *((_DWORD *)this + 89);
    v198 = *((_DWORD *)this + 91);
    v202 = *((_DWORD *)this + 47);
    v206 = v35;
    v210 = *((_DWORD *)this + 51);
    v214 = *((_QWORD *)this + 33);
    LODWORD(v11) = *((_DWORD *)this + 8);
    LODWORD(v41) = *((_DWORD *)this + 4);
    LODWORD(v42) = *((_DWORD *)this + 5);
    LODWORD(v43) = *((_DWORD *)this + 71);
    LODWORD(v44) = *((_DWORD *)this + 84);
    LODWORD(v18) = *((_DWORD *)this + 101);
    v222 = *((_QWORD *)this + 49);
    v47 = 2050;
    v71 = 2050;
    v73 = 2050;
    v81 = 2050;
    v83 = 2050;
    v85 = 2050;
    v87 = 2050;
    v93 = 2050;
    v99 = 2050;
    v101 = 2050;
    v107 = 2050;
    v135 = 2050;
    v157 = 2050;
    v159 = 2050;
    v167 = 2050;
    v171 = 2050;
    v177 = 2050;
    v179 = 2050;
    v181 = 2050;
    v183 = 2050;
    v213 = 2050;
    v215 = 2050;
    v217 = 2050;
    v219 = 2050;
    v221 = 2050;
    v225 = 2050;
    v49 = 1026;
    v51 = 1026;
    v53 = 1026;
    v55 = 1026;
    v57 = 1026;
    v59 = 1026;
    v61 = 1026;
    v63 = 1026;
    v65 = 1026;
    v67 = 1026;
    v69 = 1026;
    v75 = 1026;
    v77 = 1026;
    v79 = 1026;
    v89 = 1026;
    v91 = 1026;
    v95 = 1026;
    v97 = 1026;
    v103 = 1026;
    v105 = 1026;
    v109 = 1026;
    v111 = 1026;
    v113 = 1026;
    v115 = 1026;
    v117 = 1026;
    v119 = 1026;
    v121 = 1026;
    v123 = 1026;
    v125 = 1026;
    v127 = 1026;
    v129 = 1026;
    v131 = 1026;
    v133 = 1026;
    v137 = 1026;
    v139 = 1026;
    v141 = 1026;
    v143 = 1026;
    v145 = 1026;
    v147 = 1026;
    v149 = 1026;
    v151 = 1026;
    v153 = 1026;
    v155 = 1026;
    v161 = 1026;
    v163 = 1026;
    v165 = 1026;
    v169 = 1026;
    v173 = 1026;
    v175 = 1026;
    v185 = 1026;
    v187 = 1026;
    v189 = 1026;
    v191 = 1026;
    v193 = 1026;
    v195 = 1026;
    v197 = 1026;
    v199 = 1026;
    v201 = 1026;
    v203 = 1026;
    v205 = 1026;
    v207 = 1026;
    v209 = 1026;
    v211 = 1026;
    v223 = 1026;
    v227 = 1026;
    v45 = 134372352;
    v72 = *(float *)&v41;
    v74 = *(float *)&v42;
    v82 = *(float *)&v11;
    v158 = *(float *)&v43;
    v182 = *(float *)&v44;
    v226 = *(float *)&v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[SC] AlgBlock summary,A,%{public}llu,B,%{public}llu,C,%{public}d,D,%{public}d,E,%{public}d,F,%{public}d,G,%{public}d,H,%{public}d,I,%{public}d,J,%{public}d,K,%{public}d,L,%{public}d,M,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}d,config-4,%{public}d,config-5,%{public}d,config-6,%{public}f,config-7,%{public}f,config-8,%{public}f,config-9,%{public}f,config-10,%{public}d,config-11,%{public}d,config-12,%{public}f,config-13,%{public}d,config-14,%{public}d,config-15,%{public}f,config-16,%{public}f,config-17,%{public}d,config-18,%{public}d,config-19,%{public}f,config-20,%{public}d,config-21,%{public}d,debug-1a,%{public}d,debug-1b,%{public}d,debug-1c,%{public}d,debug-1d,%{public}d,debug-1e,%{public}d,debug-1f,%{public}d,debug-1g,%{public}d,debug-1h,%{public}d,debug-1i,%{public}d,debug-1j,%{public}d,debug-1k,%{public}d,debug-1l,%{public}llu,debug-1m,%{public}d,debug-1n,%{public}d,debug-1o,%{public}d,debug-1p,%{public}d,debug-1q,%{public}d,debug-2a,%{public}d,debug-2b,%{public}d,debug-2c,%{public}d,debug-2d,%{public}d,debug-3a,%{public}d,debug-3b,%{public}f,debug-3c,%{public}f,debug-3d,%{public}d,debug-4a,%{public}d,debug-4b,%{public}d,debug-4c,%{public}f,debug-4d,%{public}d,debug-4e,%{public}llu,debug-5a,%{public}d,debug-5b,%{public}d,debug-6a,%{public}f,debug-6b,%{public}f,debug-6c,%{public}f,debug-6d,%{public}f,debug-7a,%{public}d,debug-7b,%{public}d,debug-7c,%{public}d,debug-8a,%{public}d,debug-8b,%{public}d,debug-9a,%{public}d,debug-9b,%{public}d,debug-9c,%{public}d,debug-10a,%{public}d,debug-10b,%{public}d,debug-10c,%{public}d,debug-11a,%{public}d,debug-12a,%{public}d,debug-12b,%{public}d,debug-12c,%{public}llu,debug-12d,%{public}llu,debug-13a,%{public}llu,debug-13b,%{public}llu,debug-13c,%{public}llu,debug-13d,%{public}u,debug-13e,%{public}f,debug-13f,%{public}d\n",
      (uint8_t *)&v45,
      0x296u);
  }
}

void CLKappaInferencesAlgSevereCrash::CLKappaInferencesAlgSevereCrash(CLKappaInferencesAlgSevereCrash *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_DWORD *)(v5 + 28) = 0;
  CLKappaDeescalatorAOI::CLKappaDeescalatorAOI((CLKappaDeescalatorAOI *)(v5 + 32));
  CLKappaDeescalatorAutocorrelation::CLKappaDeescalatorAutocorrelation((CLKappaInferencesAlgSevereCrash *)((char *)this + 128));
  CLKappaDeescalatorMovingGps::CLKappaDeescalatorMovingGps((CLKappaInferencesAlgSevereCrash *)((char *)this + 4104));
  CLKappaDeescalatorQuiescence::CLKappaDeescalatorQuiescence((CLKappaInferencesAlgSevereCrash *)((char *)this + 4200));
  CLKappaDeescalatorSkiing::CLKappaDeescalatorSkiing((CLKappaInferencesAlgSevereCrash *)((char *)this + 4392));
  CLKappaDeescalatorSkiLift::CLKappaDeescalatorSkiLift((CLKappaInferencesAlgSevereCrash *)((char *)this + 4552));
  CLKappaDeescalatorStaticGps::CLKappaDeescalatorStaticGps((CLKappaInferencesAlgSevereCrash *)((char *)this + 4632));
  CLKappaDeescalatorSteps::CLKappaDeescalatorSteps((CLKappaInferencesAlgSevereCrash *)((char *)this + 4744));
  CLKappaDeescalatorTriggerClusters::CLKappaDeescalatorTriggerClusters((CLKappaInferencesAlgSevereCrash *)((char *)this + 7896));
  sub_1000062D0((char *)this + 7992);
  CLKappaDeescalatorUsha::CLKappaDeescalatorUsha((CLKappaInferencesAlgSevereCrash *)((char *)this + 8152));
  CLKappaDeescalatorWaterProxy::CLKappaDeescalatorWaterProxy((CLKappaInferencesAlgSevereCrash *)((char *)this + 8384));
  CLKappaDeescalatorMAP::CLKappaDeescalatorMAP((CLKappaInferencesAlgSevereCrash *)((char *)this + 8488));
  CLSafetyDeescalatorJointDetection::CLSafetyDeescalatorJointDetection((CLKappaInferencesAlgSevereCrash *)((char *)this + 8728));
  *((_BYTE *)this + 8928) = 0;
  *(_OWORD *)((char *)this + 8904) = 0u;
  *((_BYTE *)this + 8920) = 0;
  *((_DWORD *)this + 2234) = 0;
  *((_WORD *)this + 4470) = 0;
  *((_QWORD *)this + 1118) = 0x500000000;
  *((_QWORD *)this + 1120) = 0;
  *(_DWORD *)((char *)this + 8967) = 0;
  v6 = operator new(0x1C8uLL);
  v6[2] = 0;
  *v6 = off_10034BF08;
  v6[1] = 0;
  sub_1000356EC((uint64_t)(v6 + 3));
  *(_QWORD *)&v21 = v6 + 3;
  *((_QWORD *)&v21 + 1) = v6;
  sub_1000081AC((uint64_t)this + 8, &v21);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v19 = *((_QWORD *)this + 1);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_100032864((uint64_t)&v19, &v21);
  sub_1000081AC((uint64_t)this + 8904, &v21);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v20;
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(CLKappaInferencesAlgSevereCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_1000326E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t *a18)
{
  _QWORD *v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  uint64_t v25;

  sub_10000A718(v25);
  CLKappaDeescalator::~CLKappaDeescalator(v24);
  *v23 = off_10035BAA8;
  CLKappaDeescalator::~CLKappaDeescalator(v23);
  CLKappaDeescalator::~CLKappaDeescalator(v22);
  *v21 = off_10035E3B8;
  CLKappaDeescalator::~CLKappaDeescalator(v21);
  CLKappaDeescalator::~CLKappaDeescalator(v20);
  CLKappaDeescalator::~CLKappaDeescalator(v19);
  *a10 = off_10035B9F0;
  CLKappaDeescalator::~CLKappaDeescalator(a10);
  CLKappaDeescalator::~CLKappaDeescalator(a11);
  CLKappaDeescalator::~CLKappaDeescalator(a12);
  *a13 = off_10035D6F8;
  CLKappaDeescalator::~CLKappaDeescalator(a13);
  *a14 = off_10035C920;
  CLKappaDeescalator::~CLKappaDeescalator(a14);
  CLKappaDeescalator::~CLKappaDeescalator(a15);
  *a16 = off_10034B298;
  CLKappaDeescalator::~CLKappaDeescalator(a16);
  v18[4] = off_100347E80;
  CSKappaAOIBoost::~CSKappaAOIBoost((CSKappaAOIBoost *)(v18 + 15));
  CLKappaDeescalator::~CLKappaDeescalator(a17);
  CLKappaAlgBlock::~CLKappaAlgBlock((CLKappaAlgBlock *)v18, a18);
  _Unwind_Resume(a1);
}

void sub_10003280C()
{
  JUMPOUT(0x100032750);
}

void sub_100032814()
{
  JUMPOUT(0x100032758);
}

void sub_10003281C()
{
  JUMPOUT(0x100032760);
}

void sub_100032824()
{
  JUMPOUT(0x100032778);
}

void sub_10003282C()
{
  JUMPOUT(0x100032780);
}

void sub_100032834()
{
  JUMPOUT(0x100032788);
}

void sub_10003283C()
{
  JUMPOUT(0x1000327A0);
}

void sub_100032844()
{
  JUMPOUT(0x1000327B8);
}

void sub_10003284C()
{
  JUMPOUT(0x1000327C0);
}

void sub_100032854()
{
  JUMPOUT(0x1000327D8);
}

void sub_10003285C()
{
  JUMPOUT(0x1000327F8);
}

void *sub_100032864@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaInferencesAlgSevereCrash::CLKappaInferencesAlgSevereCrash(CLKappaInferencesAlgSevereCrash *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 1122) = off_100345DF8;
  *((_QWORD *)this + 1123) = off_100345EC0;
  *((_QWORD *)this + 1124) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10034B8D0);
  *(_QWORD *)v2 = off_10034B3D0;
  *(_QWORD *)(v2 + 8976) = off_10034B670;
  *(_QWORD *)(v2 + 8984) = off_10034B7A8;
  *(_QWORD *)(v2 + 8992) = off_10034B880;
  *(_DWORD *)(v2 + 28) = 0;
  CLKappaDeescalatorAOI::CLKappaDeescalatorAOI((CLKappaDeescalatorAOI *)(v2 + 32));
  CLKappaDeescalatorAutocorrelation::CLKappaDeescalatorAutocorrelation((CLKappaInferencesAlgSevereCrash *)((char *)this + 128));
  CLKappaDeescalatorMovingGps::CLKappaDeescalatorMovingGps((CLKappaInferencesAlgSevereCrash *)((char *)this + 4104));
  CLKappaDeescalatorQuiescence::CLKappaDeescalatorQuiescence((CLKappaInferencesAlgSevereCrash *)((char *)this + 4200));
  CLKappaDeescalatorSkiing::CLKappaDeescalatorSkiing((CLKappaInferencesAlgSevereCrash *)((char *)this + 4392));
  CLKappaDeescalatorSkiLift::CLKappaDeescalatorSkiLift((CLKappaInferencesAlgSevereCrash *)((char *)this + 4552));
  CLKappaDeescalatorStaticGps::CLKappaDeescalatorStaticGps((CLKappaInferencesAlgSevereCrash *)((char *)this + 4632));
  CLKappaDeescalatorSteps::CLKappaDeescalatorSteps((CLKappaInferencesAlgSevereCrash *)((char *)this + 4744));
  CLKappaDeescalatorTriggerClusters::CLKappaDeescalatorTriggerClusters((CLKappaInferencesAlgSevereCrash *)((char *)this + 7896));
  sub_1000062D0((char *)this + 7992);
  CLKappaDeescalatorUsha::CLKappaDeescalatorUsha((CLKappaInferencesAlgSevereCrash *)((char *)this + 8152));
  CLKappaDeescalatorWaterProxy::CLKappaDeescalatorWaterProxy((CLKappaInferencesAlgSevereCrash *)((char *)this + 8384));
  CLKappaDeescalatorMAP::CLKappaDeescalatorMAP((CLKappaInferencesAlgSevereCrash *)((char *)this + 8488));
  CLSafetyDeescalatorJointDetection::CLSafetyDeescalatorJointDetection((CLKappaInferencesAlgSevereCrash *)((char *)this + 8728));
  *((_BYTE *)this + 8928) = 0;
  *(_OWORD *)((char *)this + 8904) = 0u;
  *((_BYTE *)this + 8920) = 0;
  *((_DWORD *)this + 2234) = 0;
  *((_WORD *)this + 4470) = 0;
  *((_QWORD *)this + 1118) = 0x500000000;
  *((_QWORD *)this + 1120) = 0;
  *(_DWORD *)((char *)this + 8967) = 0;
  v3 = operator new(0x1C8uLL);
  v3[2] = 0;
  *v3 = off_10034BF08;
  v3[1] = 0;
  sub_1000356EC((uint64_t)(v3 + 3));
  *(_QWORD *)&v18 = v3 + 3;
  *((_QWORD *)&v18 + 1) = v3;
  sub_1000081AC((uint64_t)this + 8, &v18);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v16 = *((_QWORD *)this + 1);
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_100032864((uint64_t)&v16, &v18);
  sub_1000081AC((uint64_t)this + 8904, &v18);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(CLKappaInferencesAlgSevereCrash *))(*(_QWORD *)this + 304))(this);
}

void sub_100032BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16)
{
  _QWORD *v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  uint64_t v22;
  void **v23;

  sub_10000A718(v22);
  CLKappaDeescalator::~CLKappaDeescalator(v21);
  *v20 = off_10035BAA8;
  CLKappaDeescalator::~CLKappaDeescalator(v20);
  CLKappaDeescalator::~CLKappaDeescalator(v19);
  *v18 = off_10035E3B8;
  CLKappaDeescalator::~CLKappaDeescalator(v18);
  CLKappaDeescalator::~CLKappaDeescalator(v17);
  CLKappaDeescalator::~CLKappaDeescalator(v23);
  *a9 = off_10035B9F0;
  CLKappaDeescalator::~CLKappaDeescalator(a9);
  CLKappaDeescalator::~CLKappaDeescalator(a10);
  CLKappaDeescalator::~CLKappaDeescalator(a11);
  *a12 = off_10035D6F8;
  CLKappaDeescalator::~CLKappaDeescalator(a12);
  *a13 = off_10035C920;
  CLKappaDeescalator::~CLKappaDeescalator(a13);
  CLKappaDeescalator::~CLKappaDeescalator(a14);
  *a15 = off_10034B298;
  CLKappaDeescalator::~CLKappaDeescalator(a15);
  v16[4] = off_100347E80;
  CSKappaAOIBoost::~CSKappaAOIBoost((CSKappaAOIBoost *)(v16 + 15));
  CLKappaDeescalator::~CLKappaDeescalator(a16);
  CLKappaAlgBlock::~CLKappaAlgBlock((CLKappaAlgBlock *)v16, (uint64_t *)off_10034B8D0);
  _Unwind_Resume(a1);
}

void sub_100032D20()
{
  JUMPOUT(0x100032C60);
}

void sub_100032D28()
{
  JUMPOUT(0x100032C68);
}

void sub_100032D30()
{
  JUMPOUT(0x100032C70);
}

void sub_100032D38()
{
  JUMPOUT(0x100032C88);
}

void sub_100032D40()
{
  JUMPOUT(0x100032C90);
}

void sub_100032D48()
{
  JUMPOUT(0x100032C98);
}

void sub_100032D50()
{
  JUMPOUT(0x100032CB0);
}

void sub_100032D58()
{
  JUMPOUT(0x100032CC8);
}

void sub_100032D60()
{
  JUMPOUT(0x100032CD0);
}

void sub_100032D68()
{
  JUMPOUT(0x100032CE8);
}

void sub_100032D70()
{
  JUMPOUT(0x100032D08);
}

void CLKappaInferencesAlgSevereCrash::resetConfiguration(CLKappaInferencesAlgSevereCrash *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  int v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  int v23;
  void *v24;
  double v25;
  double v26;
  int v27;
  void *v28;
  double v29;
  double v30;
  double v31;
  int v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  float v37;
  void *v38;
  double v39;
  double v40;
  double v41;
  float v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  int v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  int v57;
  void *v58;
  double v59;
  double v60;
  double v61;
  int v62;
  void *v63;
  void *v64;
  void *v65;
  double v66;
  double v67;
  double v68;
  int v69;
  void *v70;
  double v71;
  double v72;
  double v73;
  float v74;
  void *v75;
  double v76;
  double v77;
  double v78;
  float v79;
  void *v80;
  void *v81;
  double v82;
  double v83;
  double v84;
  int v85;
  id v86;
  _DWORD v87[11];
  unsigned __int8 v88;
  unsigned __int8 v89;
  float v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  int v93;
  int v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned __int8 v100;
  int v101;

  v86 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "InferencesAlgSCConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1114636288;
  LODWORD(v4) = 3.0;
  LODWORD(v5) = 15.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v86, v4, v3, v5);
  v87[0] = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1114636288;
  LODWORD(v9) = 1110704128;
  LODWORD(v10) = 3.0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v86, v10, v8, v9);
  v87[1] = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v87[2] = objc_msgSend(v12, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v86, 1, 60, 5);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v87[3] = objc_msgSend(v13, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v86, 1, 60, 10);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v15) = 10.0;
  LODWORD(v16) = 15.0;
  LODWORD(v17) = 20.0;
  objc_msgSend(v14, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 4, v86, v15, v16, v17);
  v87[4] = v18;

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v20) = 1119092736;
  LODWORD(v21) = 1119092736;
  LODWORD(v22) = 1119092736;
  objc_msgSend(v19, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v86, v20, v21, v22);
  v87[5] = v23;

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v25) = 1.0;
  LODWORD(v26) = 2.5;
  objc_msgSend(v24, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v86, v25, 8589936700.0, v26);
  v87[6] = v27;

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v29) = 1128792064;
  LODWORD(v30) = 1176256512;
  LODWORD(v31) = 1137180672;
  objc_msgSend(v28, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 7, v86, v29, v30, v31);
  v87[7] = v32;

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v34) = 0;
  LODWORD(v35) = 12.0;
  LODWORD(v36) = 2.0;
  objc_msgSend(v33, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 8, v86, v34, v35, v36);
  v87[8] = (int)v37;

  v38 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v39) = 0;
  LODWORD(v40) = 30.0;
  LODWORD(v41) = 7.0;
  objc_msgSend(v38, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 9, v86, v39, v40, v41);
  v87[9] = (int)v42;

  v43 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v44) = 1114636288;
  LODWORD(v45) = 0;
  LODWORD(v46) = 10.0;
  objc_msgSend(v43, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 10, v86, v45, v44, v46);
  v87[10] = v47;

  v48 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v88 = objc_msgSend(v48, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 11, v86, 1, 60, 25);

  v49 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v89 = objc_msgSend(v49, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 12, v86, 1, 60, 5);

  v50 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v90 = (float)(int)objc_msgSend(v50, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 13, v86, 1, 100000, 10);

  v51 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v91 = objc_msgSend(v51, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 14, v86, 1, 11, 6);

  v52 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v92 = objc_msgSend(v52, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 15, v86, 1, 11, 6);

  v53 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v54) = 1137180672;
  LODWORD(v55) = 1125515264;
  LODWORD(v56) = 0;
  objc_msgSend(v53, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 16, v86, v56, v54, v55);
  v93 = v57;

  v58 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v59) = 1148846080;
  LODWORD(v60) = 1128792064;
  LODWORD(v61) = 0;
  objc_msgSend(v58, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 17, v86, v61, v59, v60);
  v94 = v62;

  v63 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v95 = objc_msgSend(v63, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 18, v86, 0, 30, 5);

  v64 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v96 = objc_msgSend(v64, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 19, v86, 0, 30, 1);

  v65 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v66) = 1114636288;
  LODWORD(v67) = 3.0;
  LODWORD(v68) = 25.0;
  objc_msgSend(v65, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 20, v86, v67, v66, v68);
  v97 = v69;

  v70 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v71) = 1112014848;
  LODWORD(v72) = 0;
  LODWORD(v73) = 30.0;
  objc_msgSend(v70, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 21, v86, v72, v71, v73);
  v98 = v74;

  v75 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v76) = 0;
  LODWORD(v77) = 20.0;
  LODWORD(v78) = 8.0;
  objc_msgSend(v75, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 22, v86, v76, v77, v78);
  v99 = v79;

  v80 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v100 = objc_msgSend(v80, "algorithmBoolNumber:inArrayForKey:defaultValue:", 23, v86, 0);

  v81 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v82) = 1114636288;
  LODWORD(v83) = 0;
  LODWORD(v84) = 10.0;
  objc_msgSend(v81, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 24, v86, v83, v82, v84);
  v101 = v85;

  CLKappaInferencesAlgSevereCrash::setConfig((uint64_t)this, (uint64_t)v87);
  CLKappaDeescalatorAOI::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 32));
  CLKappaDeescalatorAutocorrelation::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 128));
  CLKappaDeescalatorMovingGps::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 4104));
  CLKappaDeescalatorQuiescence::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 4200));
  CLKappaDeescalatorSkiing::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 4392));
  CLKappaDeescalatorSkiLift::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 4552));
  CLKappaDeescalatorStaticGps::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 4632));
  CLKappaDeescalatorSteps::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 4744));
  CLKappaDeescalatorTriggerClusters::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 7896));
  sub_1000061CC((uint64_t)this + 7992);
  CLKappaDeescalatorUsha::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 8152));
  CLKappaDeescalatorWaterProxy::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 8384));
  CLKappaDeescalatorMAP::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 8488));
  CLSafetyDeescalatorJointDetection::setupForceControls((CLKappaInferencesAlgSevereCrash *)((char *)this + 8728));

}

void sub_1000333E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void CLKappaInferencesAlgSevereCrash::setConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  uint64_t v10;
  double v11;
  double v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  int v23;
  double v24;
  int v25;
  int v26;
  double v27;
  double v28;
  int v29;
  int v30;
  double v31;
  int v32;
  int v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int32x2_t v41;
  unsigned __int8 v42;
  int v43;
  _BYTE buf[22];
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  double v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  double v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  double v88;

  v4 = *(_QWORD *)(a1 + 8904);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 64) = v7;
  *(_OWORD *)(v4 + 80) = v8;
  *(_OWORD *)(v4 + 48) = v6;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034BED8);
  v9 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a1 + 8904);
    v11 = *(float *)(v10 + 16);
    v12 = *(float *)(v10 + 20);
    v13 = *(_DWORD *)(v10 + 24);
    v14 = *(_DWORD *)(v10 + 28);
    v15 = *(unsigned __int8 *)(v10 + 60);
    v16 = *(float *)(v10 + 56);
    v17 = *(float *)(v10 + 40);
    v18 = *(float *)(v10 + 44);
    v19 = *(float *)(v10 + 32);
    v20 = *(float *)(v10 + 36);
    v22 = *(_DWORD *)(v10 + 48);
    v21 = *(_DWORD *)(v10 + 52);
    v23 = *(unsigned __int8 *)(v10 + 61);
    v24 = *(float *)(v10 + 64);
    v25 = *(unsigned __int8 *)(v10 + 68);
    v26 = *(unsigned __int8 *)(v10 + 69);
    v27 = *(float *)(v10 + 72);
    v28 = *(float *)(v10 + 76);
    v29 = *(unsigned __int8 *)(v10 + 80);
    v30 = *(unsigned __int8 *)(v10 + 81);
    v31 = *(float *)(v10 + 84);
    v32 = *(_DWORD *)(v10 + 88);
    v33 = *(_DWORD *)(v10 + 92);
    v34 = *(float *)(v10 + 100);
    *(_DWORD *)buf = 134223872;
    *(double *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v12;
    v45 = 1024;
    v46 = v13;
    v47 = 1024;
    v48 = v14;
    v49 = 1024;
    v50 = v15;
    v51 = 1024;
    v52 = v21;
    v53 = 2048;
    v54 = v16;
    v55 = 2048;
    v56 = v17;
    v57 = 2048;
    v58 = v18;
    v59 = 2048;
    v60 = v19;
    v61 = 2048;
    v62 = v20;
    v63 = 1024;
    v64 = v22;
    v65 = 1024;
    v66 = v23;
    v67 = 2048;
    v68 = v24;
    v69 = 1024;
    v70 = v25;
    v71 = 1024;
    v72 = v26;
    v73 = 2048;
    v74 = v27;
    v75 = 2048;
    v76 = v28;
    v77 = 1024;
    v78 = v29;
    v79 = 1024;
    v80 = v30;
    v81 = 2048;
    v82 = v31;
    v83 = 1024;
    v84 = v32;
    v85 = 1024;
    v86 = v33;
    v87 = 2048;
    v88 = v34;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[SC] config, %f, %f, %u, %u, %u, %u, %f, %f, %f, %f, %f, %u, %u, %f, %u, %u, %f, %f, %u, %u, %f, %d, %d, %f", buf, 0xC2u);
  }
  v43 = *(_DWORD *)(a2 + 32);
  CLKappaDeescalatorAutocorrelation::setConfig(a1 + 128, &v43);
  v42 = *(_BYTE *)(a2 + 45);
  CLKappaDeescalatorMovingGps::setConfig(a1 + 4104, &v42);
  v41 = vrev64_s32(*(int32x2_t *)(a2 + 24));
  CLKappaDeescalatorQuiescence::setConfig(a1 + 4200, (uint64_t)&v41);
  v40 = 0;
  LOBYTE(v40) = *(_BYTE *)(a2 + 53);
  BYTE1(v40) = *(_BYTE *)(a2 + 52);
  HIDWORD(v40) = *(_DWORD *)(a2 + 48);
  CLKappaDeescalatorSkiing::setConfig(a1 + 4392, (float *)&v40);
  v39 = 0;
  LODWORD(v39) = *(_DWORD *)(a2 + 36);
  BYTE4(v39) = *(_BYTE *)(a2 + 44);
  CLKappaDeescalatorStaticGps::setConfig(a1 + 4632, (uint64_t)&v39);
  v35 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)buf = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&buf[8] = v35;
  CLKappaDeescalatorSteps::setConfig(a1 + 4744, (uint64_t)buf);
  sub_100005D24(a1 + 7992);
  v38 = 0;
  v37 = *(_QWORD *)(a2 + 56);
  LOWORD(v38) = *(_WORD *)(a2 + 64);
  CLKappaDeescalatorUsha::setConfig(a1 + 8152, (uint64_t)&v37);
  CLKappaDeescalatorWaterProxy::setConfig((CLKappaDeescalatorWaterProxy *)(a1 + 8384));
  v36 = 0;
  LOBYTE(v36) = *(_BYTE *)(a2 + 80);
  HIDWORD(v36) = *(_DWORD *)(a2 + 84);
  CLSafetyDeescalatorJointDetection::setConfig(a1 + 8728, (unsigned __int8 *)&v36);
}

_DWORD *CLKappaInferencesAlgSevereCrash::reset(CLKappaInferencesAlgSevereCrash *this)
{
  char *v2;
  _DWORD *result;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1113) + 24))(*((_QWORD *)this + 1113));
  if (*((_BYTE *)this + 8928))
    *((_BYTE *)this + 8928) = 0;
  *((_DWORD *)this + 7) = 0;
  v2 = (char *)this + 28;
  *((_DWORD *)v2 + 2227) = 0;
  *((_WORD *)v2 + 4456) = 0;
  result = CLKappaDeescalationDecision::reset(v2);
  *((_DWORD *)v2 + 2229) = 0;
  return result;
}

void CLKappaInferencesAlgSevereCrash::epochFinalize(CLKappaInferencesAlgSevereCrash *this, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char v8;
  int *v9;
  uint64_t i;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  NSObject *v26;
  unint64_t v27;
  int v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  char v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  float v37;
  float *v38;
  uint64_t j;
  int v40;
  uint64_t k;
  int v42;
  NSObject *v43;
  char v44;
  NSObject *v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  char v49;
  NSObject *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t m;
  int v55;
  uint64_t n;
  int v57;
  int v58;
  _BOOL4 v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  int v67;
  int v68;
  __int16 v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  char v76;
  char v77;
  uint64_t v78;
  int v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  int v88;
  uint64_t ii;
  _DWORD *v90;
  int v91;
  int v92;
  _BOOL4 shouldDeescalateForOption;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  CLKappaDeescalatorStaticGps *v103;
  char *v104;
  CLSafetyDeescalatorJointDetection *v105;
  char *v106;
  BOOL v107;
  int isDecidedForOption;
  char *v109;
  void *v110;
  _BYTE *v111;
  _QWORD v112[14];
  uint8_t buf[4];
  _BOOL4 v114;
  __int16 v115;
  _BYTE v116[10];
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  _BOOL4 v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;

  v4 = 0;
  v5 = (char *)this + 8701;
  v6 = (char *)this + 128;
  v112[0] = (char *)this + 32;
  v112[1] = (char *)this + 128;
  v7 = (char *)this + 4104;
  v112[2] = (char *)this + 4104;
  v112[3] = (char *)this + 4200;
  v112[4] = (char *)this + 4392;
  v112[5] = (char *)this + 4552;
  v103 = (CLKappaInferencesAlgSevereCrash *)((char *)this + 4632);
  v112[6] = (char *)this + 4632;
  v112[7] = (char *)this + 4744;
  v112[8] = (char *)this + 7896;
  v112[9] = (char *)this + 8728;
  v105 = (CLKappaInferencesAlgSevereCrash *)((char *)this + 8728);
  v111 = (char *)this + 7992;
  v112[10] = (char *)this + 7992;
  v112[11] = (char *)this + 8152;
  v112[12] = (char *)this + 8384;
  v112[13] = (char *)this + 8488;
  v104 = (char *)this + 4096;
  v8 = *((_BYTE *)this + 24);
  do
    *(_BYTE *)(v112[v4++] + 32) = v8;
  while (v4 != 14);
  v9 = (int *)((char *)this + 28);
  isDecidedForOption = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7));
  if (isDecidedForOption)
  {
    for (i = 0; i != 14; ++i)
      CLKappaDeescalator::previousEpochMadeDecision((CLKappaDeescalator *)v112[i]);
    if (v5[227])
      v5[227] = 0;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034BED8);
  v11 = (id)qword_100387318;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    v106 = v6;
    v109 = v7;
    v94 = v5[268];
    v95 = v5[264];
    v96 = v5[265];
    v98 = v5[266];
    v99 = v5[267];
    v100 = v5[236];
    v101 = v5[237];
    v102 = v5[238];
    v97 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 7));
    shouldDeescalateForOption = CLKappaDeescalator::shouldDeescalateForOption(*v9);
    v92 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 1192));
    v91 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 1056));
    v12 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 38));
    v13 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 1980));
    v14 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 2044));
    v15 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 2102));
    v16 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 2128));
    v17 = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 2188));
    v18 = v5[269];
    *(_DWORD *)buf = 67113728;
    v114 = v94;
    v115 = 1024;
    *(_DWORD *)v116 = v95;
    *(_WORD *)&v116[4] = 1024;
    *(_DWORD *)&v116[6] = v96;
    v117 = 1024;
    v118 = v98;
    v119 = 1024;
    v120 = v99;
    v121 = 1024;
    v122 = v100;
    v123 = 1024;
    v124 = v101;
    v125 = 1024;
    v126 = v102;
    v127 = 1024;
    v128 = v97;
    v129 = 1024;
    v130 = shouldDeescalateForOption;
    v131 = 1024;
    v132 = v92;
    v133 = 1024;
    v134 = v91;
    v135 = 1024;
    v136 = v12;
    v137 = 1024;
    v138 = v13;
    v139 = 1024;
    v140 = v14;
    v141 = 1024;
    v142 = v15;
    v143 = 1024;
    v144 = v16;
    v145 = 1024;
    v146 = v17;
    v147 = 1024;
    v148 = v18;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[SC] force %d %d %d %d %d is %d %d %d %d %d %d %d %d %d %d %d %d %d %d", buf, 0x74u);
    v7 = v109;
    v6 = v106;
  }

  CLKappaDeescalationDecision::reset((_DWORD *)this + 7);
  if (v5[236])
    v19 = 1;
  else
    v19 = v5[237] != 0;
  if (v5[239])
    v20 = 1;
  else
    v20 = v5[240] != 0;
  v21 = *(unsigned __int16 *)(v5 + 245);
  v22 = *((unsigned int *)this + 2237);
  v23 = *(unsigned __int16 *)(v5 + 243);
  if (v23 + v21 >= v22)
    v24 = *((unsigned int *)this + 2237);
  else
    v24 = 0;
  *((_BYTE *)this + v23 + v21 - v24 + 8952) = v20;
  if (v22 <= v21)
  {
    if (v23 + 1 < v22)
      LOWORD(v22) = 0;
    *(_WORD *)(v5 + 243) = v23 + 1 - v22;
  }
  else
  {
    *(_WORD *)(v5 + 245) = v21 + 1;
  }
  v110 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  v25 = (unsigned __int16)objc_msgSend(v110, "getBooleanDefault:", CFSTR("KappaForceEarlyCrashInSevereBlock"));
  if (v25 >= 0x100u && (_BYTE)v25 && !v5[227])
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034BED8);
    v26 = (id)qword_100387318;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[SC] forcing early crash decision", buf, 2u);
    }

    *((_QWORD *)this + 1115) = a2;
    v5[227] = 1;
    v5[263] = 1;
  }
  else if (!v19)
  {
    v107 = 0;
    goto LABEL_62;
  }
  *((_DWORD *)this + 2240) = 0;
  if (*(_WORD *)(v5 + 245))
  {
    v27 = 0;
    while (!*(_BYTE *)sub_100027E40((unsigned __int16 *)(v5 + 243), v27))
    {
      if (++v27 >= *(unsigned __int16 *)(v5 + 245))
        goto LABEL_40;
    }
    v28 = 1;
  }
  else
  {
LABEL_40:
    v28 = 0;
  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "objectForKey:", CFSTR("ForceLowSenseDetected")));
  if (v29)
  {
    if (objc_msgSend(v110, "BOOLForKey:", CFSTR("ForceLowSenseDetected")))
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10034BED8);
      v30 = (id)qword_100387318;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "[SC] force low sense high", buf, 2u);
      }
      v28 = 1;
    }
    else
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10034BED8);
      v30 = (id)qword_100387318;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "[SC] force low sense low", buf, 2u);
      }
      v28 = 0;
    }

  }
  v107 = v28 != 0;
  sub_1000062D4((uint64_t)v111, v28);
  v31 = 0;
  *((_QWORD *)this + 1115) = a2;
  v5[227] = 1;
  do
    CLKappaDeescalator::earlyCrashDetected((CLKappaDeescalator *)v112[v31++], a2);
  while (v31 != 14);
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034BED8);
  v32 = (id)qword_100387318;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v114 = v19;
    v115 = 2048;
    *(_QWORD *)v116 = a2;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[SC] anyCrashDetectorDecision:%d, crashTimestamp:%llu", buf, 0x12u);
  }

LABEL_62:
  CLKappaDeescalatorAutocorrelation::updateWithAnyCrashDetected((uint64_t)v6, v19);
  if (isDecidedForOption)
  {
    *((_WORD *)v5 + 118) = 0;
    if (v5[227])
      v5[227] = 0;
    v33 = 0;
    v34 = 0;
    v35 = (uint64_t *)((char *)this + 8920);
    goto LABEL_120;
  }
  v33 = v5[227];
  v35 = (uint64_t *)((char *)this + 8920);
  if (!v33)
    goto LABEL_119;
  v36 = *v35;
  CLKappaDeescalatorStaticGps::updateCountTotal((uint64_t)v103);
  v37 = (double)(a2 - v36) * 0.000001;
  v38 = (float *)*((_QWORD *)this + 1113);
  if (v38[14] < v37)
  {
    CLKappaDeescalatorMovingGps::updateCountTotal((uint64_t)v7);
    v38 = (float *)*((_QWORD *)this + 1113);
  }
  if (v38[4] >= v37)
  {
    v34 = 0;
    v33 = 1;
    goto LABEL_120;
  }
  if (v38[5] <= v37)
  {
    v46 = 0;
    while (1)
    {
      v47 = CLKappaDeescalator::evaluateAtBoundary((CLKappaDeescalator *)v112[v46]);
      CLKappaDeescalationDecision::update((_DWORD *)this + 7, v47);
      if (v47 == 3)
        break;
      if (v47 == 2)
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_10034BED8);
        v48 = (id)qword_100387318;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "two-level feed is escalation candidate", buf, 2u);
        }

        v49 = 1;
        *(_BYTE *)(*((_QWORD *)this + 1113) + 416) = 1;
LABEL_105:
        sub_1000062DC((uint64_t)v111, v49);
      }
      if (++v46 == 14)
      {
        if (v5[263] && (CLKappaDeescalator::isDecidedForOption(*v9) & 1) == 0)
          CLKappaDeescalationDecision::update((_DWORD *)this + 7, 5);
        v51 = CLKappaDeescalator::isDecidedForOption(*v9);
        CLKappaDeescalator::raiseUnless(v51, (BOOL)"[SC] Reached boundary condition but made no decision", v52);
        v34 = 1;
        goto LABEL_120;
      }
    }
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034BED8);
    v50 = (id)qword_100387318;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "two-level feed is no longer escalation candidate", buf, 2u);
    }

    v49 = 0;
    goto LABEL_105;
  }
  if (!*((_DWORD *)this + 2240))
  {
    for (j = 0; j != 14; ++j)
    {
      v40 = CLKappaDeescalator::evaluateAtMinHoldDuration((CLKappaDeescalator *)v112[j]);
      CLKappaDeescalationDecision::update((_DWORD *)this + 7, v40);
    }
    *((_DWORD *)this + 2240) = 1;
  }
  for (k = 0; k != 14; ++k)
  {
    v42 = CLKappaDeescalator::evaluateBetweenMinAndMaxHoldDuration((CLKappaDeescalator *)v112[k]);
    CLKappaDeescalationDecision::update((_DWORD *)this + 7, v42);
    if (v42 == 3)
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10034BED8);
      v45 = (id)qword_100387318;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "two-level feed is no longer escalation candidate", buf, 2u);
      }

      v44 = 0;
    }
    else
    {
      if (v42 != 2)
        continue;
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10034BED8);
      v43 = (id)qword_100387318;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "two-level feed is escalation candidate", buf, 2u);
      }

      v44 = 1;
      *(_BYTE *)(*((_QWORD *)this + 1113) + 416) = 1;
    }
    sub_1000062DC((uint64_t)v111, v44);
  }
  v53 = *((_QWORD *)this + 1113);
  if ((*(float *)(v53 + 84) < v37 || *(_BYTE *)(v53 + 416)) && *((_DWORD *)this + 2240) == 1)
  {
    for (m = 0; m != 14; ++m)
    {
      v55 = CLKappaDeescalator::evaluateAtSecondDeescalationOpportunity((CLKappaDeescalator *)v112[m]);
      CLKappaDeescalationDecision::update((_DWORD *)this + 7, v55);
    }
    *((_DWORD *)this + 2240) = 2;
  }
  if (v5[267])
  {
    CLKappaDeescalationDecision::update((_DWORD *)this + 7, 4);
    v34 = 0;
    v5[267] = 0;
    goto LABEL_120;
  }
LABEL_119:
  v34 = 0;
LABEL_120:
  if (CLKappaDeescalator::isDecidedForOption(*v9))
  {
    if (v5[268])
    {
      CLKappaDeescalationDecision::update((_DWORD *)this + 7, 5);
      v5[268] = 0;
    }
    if (sub_100034A1C((unsigned int *)this + 7))
    {
      for (n = 0; n != 14; ++n)
      {
        v57 = CLKappaDeescalator::evaluateFollowingEscalation((CLKappaDeescalator *)v112[n]);
        CLKappaDeescalationDecision::update((_DWORD *)this + 7, v57);
      }
    }
    v58 = sub_100034A1C((unsigned int *)this + 7);
    v59 = (v58 & 1) == 0 && *(_BYTE *)(*((_QWORD *)this + 1113) + 416) != 0;
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034BED8);
    v60 = (id)qword_100387318;
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240448;
      v114 = v58;
      v115 = 1026;
      *(_DWORD *)v116 = v59;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "[SC] de %{public}d suppress %{public}d", buf, 0xEu);
    }

  }
  else
  {
    LOBYTE(v58) = 0;
    LOBYTE(v59) = 0;
  }
  v61 = *((_QWORD *)this + 1113);
  *(_QWORD *)(v61 + 104) = a2;
  *(_BYTE *)(v61 + 120) = v58;
  if (v5[227])
    v62 = *v35;
  else
    v62 = 0;
  *(_QWORD *)(v61 + 112) = v62;
  *(_BYTE *)(v61 + 121) = v33;
  *(_BYTE *)(*((_QWORD *)this + 1113) + 122) = CLKappaDeescalator::isDecidedForOption(*v9);
  v63 = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 7));
  v64 = *((_QWORD *)this + 1113);
  *(_BYTE *)(v64 + 123) = v63;
  *(_DWORD *)(v64 + 408) = CLKappaDeescalator::fFaultCounter;
  *(_BYTE *)(v64 + 150) = v34;
  *(_BYTE *)(v64 + 129) = v59;
  *(_DWORD *)(v64 + 136) = *((_DWORD *)v5 + 59);
  *(_BYTE *)(v64 + 140) = v5[240];
  *(_BYTE *)(v64 + 141) = v107;
  *(_DWORD *)(*((_QWORD *)this + 1113) + 412) = sub_1000062EC(v111);
  *(_BYTE *)(*((_QWORD *)this + 1113) + 126) = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 38));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 125) = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 1056));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 124) = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 1192));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 128) = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 2044));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 130) = CLKappaDeescalator::isDecidedForOption(*((_DWORD *)this + 2128));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 146) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 38));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 143) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 1032));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 145) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 1056));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 360) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 1104));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 148) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 1144));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 142) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 1164));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 144) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 1192));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 149) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 2004));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 151) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 2044));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 152) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 2128));
  *(_BYTE *)(*((_QWORD *)this + 1113) + 153) = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 2188));
  v65 = CLKappaDeescalator::shouldDeescalateForOption(*((_DWORD *)this + 2102));
  v66 = *((_QWORD *)this + 1113);
  *(_BYTE *)(v66 + 154) = v65;
  *(_DWORD *)(v66 + 172) = *((_DWORD *)this + 39) != 0;
  *(_DWORD *)(v66 + 160) = *((_DWORD *)this + 1033) != 0;
  *(_DWORD *)(v66 + 168) = *((_DWORD *)this + 1057) != 0;
  *(_DWORD *)(v66 + 180) = *((_DWORD *)this + 1105) != 0;
  *(_DWORD *)(v66 + 184) = *((_DWORD *)this + 1145) != 0;
  *(_DWORD *)(v66 + 156) = *((_DWORD *)this + 1165) != 0;
  *(_DWORD *)(v66 + 164) = *((_DWORD *)this + 1193) != 0;
  *(_DWORD *)(v66 + 176) = *((_DWORD *)this + 1981) != 0;
  *(_DWORD *)(v66 + 188) = *((_DWORD *)this + 2045) != 0;
  *(_DWORD *)(v66 + 192) = *((_DWORD *)this + 15) != 0;
  *(_DWORD *)(v66 + 204) = *((_DWORD *)this + 2129) != 0;
  *(_DWORD *)(v66 + 208) = *((_DWORD *)this + 2189) != 0;
  *(_DWORD *)(v66 + 212) = *((_DWORD *)this + 2103) != 0;
  v67 = *((_DWORD *)this + 2005);
  *(_DWORD *)(v66 + 196) = 0;
  *(_DWORD *)(v66 + 200) = 0;
  if (v67)
  {
    v68 = sub_100006744((uint64_t)v111);
    if (v68 == 1)
    {
      v66 = *((_QWORD *)this + 1113);
      *(_DWORD *)(v66 + 196) = 1;
    }
    else
    {
      v66 = *((_QWORD *)this + 1113);
      if (v68 == 2)
        *(_DWORD *)(v66 + 200) = 1;
    }
  }
  v69 = *(_WORD *)v104;
  *(_DWORD *)(v66 + 344) = *((_DWORD *)this + 1023);
  *(_WORD *)(v66 + 348) = v69;
  v70 = *((_DWORD *)this + 1047);
  *(_DWORD *)(v66 + 224) = *((_DWORD *)this + 1045);
  *(_DWORD *)(v66 + 228) = v70;
  *(int32x4_t *)(v66 + 328) = vzip2q_s32(*((int32x4_t *)this + 273), (int32x4_t)vextq_s8(*((int8x16_t *)this + 273), *((int8x16_t *)this + 273), 8uLL));
  *(_QWORD *)(v66 + 320) = *((_QWORD *)this + 548);
  v71 = v104[449];
  *(_DWORD *)(v66 + 352) = v104[448];
  *(_DWORD *)(v66 + 356) = v71;
  *(_QWORD *)(v66 + 364) = *((_QWORD *)this + 578);
  v72 = *((_DWORD *)this + 1181);
  v73 = *((_DWORD *)this + 1183);
  *(_QWORD *)(v66 + 232) = *(_QWORD *)(v104 + 620);
  *(_DWORD *)(v66 + 216) = v72;
  *(_DWORD *)(v66 + 220) = v73;
  v74 = v104[3776];
  if (v104[3776])
  {
    v75 = *((_DWORD *)this + 1963);
    v74 = *((float *)this + 1962);
    v76 = v104[3744];
    v77 = v104[3760];
    v78 = *((_QWORD *)this + 983);
  }
  else
  {
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v75 = 0;
  }
  v79 = *((unsigned __int16 *)this + 3693);
  v80 = *((_DWORD *)this + 1972);
  v81 = v104[3796];
  *(_DWORD *)(v66 + 304) = v75;
  *(_DWORD *)(v66 + 300) = v74;
  *(_BYTE *)(v66 + 297) = v76;
  *(_BYTE *)(v66 + 308) = v77;
  *(_QWORD *)(v66 + 312) = v78;
  *(_DWORD *)(v66 + 280) = v79;
  *(int32x2_t *)(v66 + 284) = vrev64_s32(*(int32x2_t *)((char *)this + 7880));
  *(_DWORD *)(v66 + 292) = v80;
  *(_BYTE *)(v66 + 296) = v81;
  v82 = v104[3872];
  if (v104[3888])
    v83 = *((_QWORD *)this + 997);
  else
    v83 = 0;
  *(_BYTE *)(v66 + 127) = v82;
  *(_BYTE *)(v66 + 147) = v82;
  *(_QWORD *)(v66 + 240) = v83;
  *(_QWORD *)(v66 + 248) = *((_QWORD *)this + 1047);
  *(_BYTE *)(v66 + 256) = *v5;
  *(_OWORD *)(v66 + 264) = *((_OWORD *)this + 544);
  if (v5[187])
    v84 = *((_QWORD *)this + 1110);
  else
    v84 = 0;
  if (v5[163])
  {
    v85 = *((_QWORD *)this + 1106);
    v86 = *((_QWORD *)this + 1105);
  }
  else
  {
    v85 = 0;
    v86 = 0;
  }
  v87 = v5[111];
  if (v5[199])
    v88 = *((_DWORD *)this + 2224);
  else
    v88 = 0;
  *(_QWORD *)(v66 + 376) = v84;
  *(_QWORD *)(v66 + 384) = v85;
  *(_QWORD *)(v66 + 392) = v86;
  *(_BYTE *)(v66 + 400) = v87;
  *(_DWORD *)(v66 + 404) = v88;
  CLSafetyDeescalatorJointDetection::log(v105, a2);
  for (ii = 0; ii != 14; ++ii)
    (*(void (**)(_QWORD))(*(_QWORD *)v112[ii] + 32))(v112[ii]);
  v90 = (_DWORD *)*((_QWORD *)this + 1113);
  if (v90[39])
    v90[106] |= 1u;
  if (v90[40])
    v90[106] |= 2u;
  if (v90[41])
    v90[106] |= 4u;
  if (v90[42])
    v90[106] |= 8u;
  if (v90[43])
    v90[106] |= 0x10u;
  if (v90[44])
    v90[106] |= 0x20u;
  if (v90[45])
    v90[106] |= 0x40u;
  if (v90[46])
    v90[106] |= 0x80u;
  if (v90[47])
    v90[106] |= 0x100u;
  if (v90[48])
    v90[106] |= 0x200u;
  if (v90[51])
    v90[106] |= 0x1000u;
  if (v90[50])
    v90[106] |= 0x800u;
  if (v90[49])
    v90[106] |= 0x400u;
  if (v90[52])
    v90[106] |= 0x2000u;
  if (v90[53])
    v90[106] |= 0x4000u;

}

void sub_1000349AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t sub_100034A1C(unsigned int *a1)
{
  uint64_t result;

  result = CLKappaDeescalator::isDecidedForOption(*a1);
  if ((_DWORD)result)
    return !CLKappaDeescalator::shouldDeescalateForOption(*a1);
  return result;
}

void `virtual thunk to'CLKappaInferencesAlgSevereCrash::epochFinalize(CLKappaInferencesAlgSevereCrash *this, unint64_t a2)
{
  CLKappaInferencesAlgSevereCrash::epochFinalize((CLKappaInferencesAlgSevereCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

void CLKappaInferencesAlgSevereCrash::feedTrigger(CLKappaInferencesAlgSevereCrash *this, TriggerSample *a2)
{
  CLKappaDeescalatorAOI::updateWithTrigger((CLKappaInferencesAlgSevereCrash *)((char *)this + 32), a2);
  CLKappaDeescalatorSkiLift::updateWithTrigger((CLKappaInferencesAlgSevereCrash *)((char *)this + 4552), a2);
  sub_100006AA0((uint64_t)this + 7992, (float16x4_t *)a2);
  CLKappaDeescalatorWaterProxy::updateWithTrigger((CLKappaInferencesAlgSevereCrash *)((char *)this + 8384), a2);
}

void `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedTrigger(CLKappaInferencesAlgSevereCrash *this, TriggerSample *a2)
{
  CLKappaInferencesAlgSevereCrash::feedTrigger((CLKappaInferencesAlgSevereCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void CLKappaInferencesAlgSevereCrash::feedGPS(CLKappaInferencesAlgSevereCrash *this, const CSSPUGps_Struct *a2)
{
  NSObject *v4;
  double latitude;
  double longitude;
  int v7;
  double v8;
  __int16 v9;
  double v10;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034BED8);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    latitude = a2->latitude;
    longitude = a2->longitude;
    v7 = 134218240;
    v8 = latitude;
    v9 = 2048;
    v10 = longitude;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[SC] lat %f long %f", (uint8_t *)&v7, 0x16u);
  }
  CLKappaDeescalatorAOI::updateWithCurrentLocation((CLKappaInferencesAlgSevereCrash *)((char *)this + 32), a2);
  CLKappaDeescalatorWaterProxy::updateWithCurrentLocation((CLKappaInferencesAlgSevereCrash *)((char *)this + 8384), a2);
}

void `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedGPS(CLKappaInferencesAlgSevereCrash *this, const CSSPUGps_Struct *a2)
{
  CLKappaInferencesAlgSevereCrash::feedGPS((CLKappaInferencesAlgSevereCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2);
}

void CLKappaInferencesAlgSevereCrash::feedRoads(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034BED8);
  v4 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 8);
    v6 = 134217984;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[SC] feedRoads distanceToNearestRoad:%f", (uint8_t *)&v6, 0xCu);
  }
  sub_100006DA4(a1 + 7992, a2);
  CLKappaDeescalatorWaterProxy::updateWithRoadInfo(a1 + 8384, a2);
}

void `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedRoads(_QWORD *a1, uint64_t a2)
{
  CLKappaInferencesAlgSevereCrash::feedRoads((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2);
}

void CLKappaInferencesAlgSevereCrash::feedRemoteSample(CLKappaInferencesAlgSevereCrash *this, const CSRemoteSample_Struct *a2)
{
  CLSafetyDeescalatorJointDetection::updateWithRemoteSample((CLKappaInferencesAlgSevereCrash *)((char *)this + 8728), a2);
}

void `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedRemoteSample(CLKappaInferencesAlgSevereCrash *this, const CSRemoteSample_Struct *a2)
{
  CLSafetyDeescalatorJointDetection::updateWithRemoteSample((CLKappaInferencesAlgSevereCrash *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136) + 8728), a2);
}

uint64_t CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  CLKappaDeescalatorStaticGps::updateWithFeatures(a1 + 4632, a2);
  return CLKappaDeescalatorMovingGps::updateWithFeatures(a1 + 4104, a2);
}

uint64_t `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  char *v3;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 48);
  CLKappaDeescalatorStaticGps::updateWithFeatures((uint64_t)(v3 + 4632), a2);
  return CLKappaDeescalatorMovingGps::updateWithFeatures((uint64_t)(v3 + 4104), a2);
}

unsigned __int16 *CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  return CLKappaDeescalatorSteps::updateWithStepsFeatures((unsigned __int16 *)(a1 + 4744), a2);
}

{
  CLKappaDeescalatorQuiescence::updateWithSpinFeatures(a1 + 4200, a2);
  return CLKappaDeescalatorUsha::updateWithCumulativeRotation(a1 + 8152, a2);
}

{
  char v4;
  NSObject *v5;
  uint8_t v7[16];

  v4 = *(_BYTE *)(a2 + 29) != 0;
  if (*(_BYTE *)(a1 + 8970))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034BED8);
    v5 = qword_100387318;
    v4 = 1;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[SC] forcing au", v7, 2u);
    }
  }
  CLKappaDeescalatorSkiing::updateWithAudioTPQ(a1 + 4392, v4);
  return CLKappaDeescalatorUsha::updateWithIsAudioRollover(a1 + 8152, a2);
}

{
  return CLKappaDeescalatorMAP::updateWithIsMAP(a1 + 8488, a2);
}

{
  return CLKappaDeescalatorMAP::updateWithFreeFall(a1 + 8488, a2);
}

unsigned __int16 *`virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  return CLKappaDeescalatorSteps::updateWithStepsFeatures((unsigned __int16 *)((char *)a1 + *(_QWORD *)(*a1 - 96) + 4744), a2);
}

{
  char *v3;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 88);
  CLKappaDeescalatorQuiescence::updateWithSpinFeatures((uint64_t)(v3 + 4200), a2);
  return CLKappaDeescalatorUsha::updateWithCumulativeRotation((uint64_t)(v3 + 8152), a2);
}

{
  return CLKappaInferencesAlgSevereCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 80), a2);
}

{
  return CLKappaDeescalatorMAP::updateWithIsMAP((uint64_t)a1 + *(_QWORD *)(*a1 - 128) + 8488, a2);
}

{
  return CLKappaDeescalatorMAP::updateWithFreeFall((uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8488, a2);
}

float CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  return CLKappaDeescalatorQuiescence::updateWithPulseFeatures(a1 + 4200, a2);
}

{
  return CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures(a1 + 7896, a2);
}

{
  CLKappaDeescalatorAutocorrelation::updateWithBaroFeatures(a1 + 128, (_OWORD *)a2);
  CLKappaDeescalatorSteps::updateWithBaroFeatures(a1 + 4744, (_OWORD *)a2);
  CLKappaDeescalatorSkiing::updateWithPressureMedian(a1 + 4392, *(float *)(a2 + 200));
  return CLKappaDeescalatorUsha::updateWithPeakPressure(a1 + 8152, a2);
}

float `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  return CLKappaDeescalatorQuiescence::updateWithPulseFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 32) + 4200, a2);
}

{
  return CLKappaDeescalatorTriggerClusters::updateWithTriggerClustersFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 120) + 7896, a2);
}

{
  return CLKappaInferencesAlgSevereCrash::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2);
}

unsigned __int16 *CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, _OWORD *a2)
{
  return CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures(a1 + 128, a2);
}

unsigned __int16 *`virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, _OWORD *a2)
{
  return CLKappaDeescalatorAutocorrelation::updateWithAutocorrelationFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 72) + 128, a2);
}

void CLKappaInferencesAlgSevereCrash::feedFeatures(uint64_t a1, uint64_t a2)
{
  CLSafetyDeescalatorJointDetection::updateWithJointDetectionOutput(a1 + 8728, a2);
}

void `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedFeatures(_QWORD *a1, uint64_t a2)
{
  CLSafetyDeescalatorJointDetection::updateWithJointDetectionOutput((uint64_t)a1 + *(_QWORD *)(*a1 - 144) + 8728, a2);
}

void CLKappaInferencesAlgSevereCrash::feedEstimates(_BYTE *a1, _BYTE *a2)
{
  _BYTE *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a1 + 8937;
  a1[8937] = *a2;
  a1[8940] = a2[1];
  if (a1[8965])
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034BED8);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[SC] forcing c", v4, 2u);
    }
    *v2 = 1;
    v2[28] = 0;
  }
}

void `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedEstimates(_QWORD *a1, _BYTE *a2)
{
  CLKappaInferencesAlgSevereCrash::feedEstimates((_BYTE *)a1 + *(_QWORD *)(*a1 - 40), a2);
}

{
  CLKappaInferencesAlgSevereCrash::feedEstimates((uint64_t)a1 + *(_QWORD *)(*a1 - 48), a2);
}

void CLKappaInferencesAlgSevereCrash::feedEstimates(uint64_t a1, _BYTE *a2)
{
  _BYTE *v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = (_BYTE *)(a1 + 8938);
  *(_BYTE *)(a1 + 8938) = *a2;
  if (*(_BYTE *)(a1 + 8966))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034BED8);
    v4 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[SC] forcing ro", v5, 2u);
    }
    *v3 = 1;
    v3[28] = 0;
  }
  v3[3] = a2[1];
}

uint64_t CLKappaInferencesAlgSevereCrash::feedEstimates(uint64_t a1, unsigned __int8 *a2)
{
  char *v3;
  int v4;
  NSObject *v5;
  uint8_t v7[16];

  v3 = (char *)(a1 + 8939);
  v4 = *a2;
  *(_BYTE *)(a1 + 8939) = v4;
  if (*(_BYTE *)(a1 + 8967))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034BED8);
    v5 = qword_100387318;
    v4 = 1;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "[SC] forcing hsc", v7, 2u);
    }
    *v3 = 1;
    v3[28] = 0;
  }
  CLKappaDeescalatorAutocorrelation::updateWithHighSpeedCrash(a1 + 128, v4 != 0);
  return CLKappaDeescalatorSteps::updateWithHighSpeedCrash(a1 + 4744, *v3);
}

uint64_t `virtual thunk to'CLKappaInferencesAlgSevereCrash::feedEstimates(_QWORD *a1, unsigned __int8 *a2)
{
  return CLKappaInferencesAlgSevereCrash::feedEstimates((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2);
}

double CLKappaInferencesAlgSevereCrash::epochReset(CLKappaInferencesAlgSevereCrash *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 1113);
  *(_QWORD *)(v1 + 136) = 0;
  v1 += 136;
  *(_QWORD *)(v1 - 32) = 0;
  *(_QWORD *)(v1 - 24) = 0;
  *(_DWORD *)(v1 - 9) = 0;
  *(_QWORD *)(v1 - 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 15) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 20) = 0u;
  *(_OWORD *)(v1 + 36) = 0u;
  *(_OWORD *)(v1 + 52) = 0u;
  *(_OWORD *)(v1 + 68) = 0u;
  *(_OWORD *)(v1 + 84) = 0u;
  *(_OWORD *)(v1 + 100) = 0u;
  *(_QWORD *)(v1 + 113) = 0;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_WORD *)(v1 + 160) = 0;
  *(_BYTE *)(v1 + 172) = 0;
  *(_QWORD *)(v1 + 164) = 0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_QWORD *)(v1 + 206) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 228) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  *(_QWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 240) = 0;
  *(_BYTE *)(v1 + 264) = 0;
  v1 += 268;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 5) = 0;
  return result;
}

double `virtual thunk to'CLKappaInferencesAlgSevereCrash::epochReset(CLKappaInferencesAlgSevereCrash *this)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56) + 8904);
  *(_QWORD *)(v1 + 136) = 0;
  v1 += 136;
  *(_QWORD *)(v1 - 32) = 0;
  *(_QWORD *)(v1 - 24) = 0;
  *(_DWORD *)(v1 - 9) = 0;
  *(_QWORD *)(v1 - 16) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 15) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 20) = 0u;
  *(_OWORD *)(v1 + 36) = 0u;
  *(_OWORD *)(v1 + 52) = 0u;
  *(_OWORD *)(v1 + 68) = 0u;
  *(_OWORD *)(v1 + 84) = 0u;
  *(_OWORD *)(v1 + 100) = 0u;
  *(_QWORD *)(v1 + 113) = 0;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_WORD *)(v1 + 160) = 0;
  *(_BYTE *)(v1 + 172) = 0;
  *(_QWORD *)(v1 + 164) = 0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_QWORD *)(v1 + 206) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 228) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  *(_QWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 240) = 0;
  *(_BYTE *)(v1 + 264) = 0;
  v1 += 268;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 5) = 0;
  return result;
}

void sub_1000353B4(void **a1)
{
}

void sub_1000353C0(void **a1)
{
  operator delete();
}

uint64_t sub_1000353EC(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  _BYTE *v4;
  uint64_t result;

  v3 = (unint64_t *)(a1 + 8920);
  v4 = (_BYTE *)(a1 + 8928);
  if (!*(_BYTE *)(a1 + 8928))
    v3 = (unint64_t *)&unk_1002E5E98;
  result = CLKappaAlgBlock::isActiveInferences((CLKappaAlgBlock *)a1, a2, *v3);
  if ((_DWORD)result)
  {
    if (*v4)
      return CLKappaDeescalator::isDecidedForOption(*(_DWORD *)(a1 + 28)) ^ 1;
    else
      return 0;
  }
  return result;
}

void sub_100035464(_QWORD *a1)
{
}

void sub_10003547C(_QWORD *a1)
{
  operator delete();
}

void sub_1000354C8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_1000354F8(void **a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)*a2;
  *a1 = (void *)*a2;
  *(void **)((char *)a1 + *(v4 - 19)) = (void *)a2[6];
  *(void **)((char *)a1 + *((_QWORD *)*a1 - 20)) = (void *)a2[7];
  *(void **)((char *)a1 + *((_QWORD *)*a1 - 21)) = (void *)a2[8];
  *(void **)((char *)a1 + *((_QWORD *)*a1 - 22)) = (void *)a2[9];
  sub_10000A718((uint64_t)(a1 + 1113));
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 1091);
  a1[1061] = off_10035BAA8;
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 1061);
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 1048);
  a1[1019] = off_10035E3B8;
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 1019);
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 999);
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 987);
  a1[593] = off_10035B9F0;
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 593);
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 579);
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 569);
  a1[549] = off_10035D6F8;
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 549);
  a1[525] = off_10035C920;
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 525);
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 513);
  a1[16] = off_10034B298;
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 16);
  a1[4] = off_100347E80;
  CSKappaAOIBoost::~CSKappaAOIBoost((CSKappaAOIBoost *)(a1 + 15));
  CLKappaDeescalator::~CLKappaDeescalator(a1 + 4);
  CLKappaAlgBlock::~CLKappaAlgBlock((CLKappaAlgBlock *)a1, a2 + 1);
}

void sub_100035694(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034BF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1000356A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034BF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1000356DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double sub_1000356EC(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 424) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)a1 = &off_10034D438;
  *(_QWORD *)(a1 + 16) = 0x4234000041700000;
  *(_QWORD *)(a1 + 24) = 0xA00000005;
  *(_OWORD *)(a1 + 32) = xmmword_1002E5DF0;
  *(_QWORD *)(a1 + 48) = 0x700000002;
  *(_DWORD *)(a1 + 56) = 1092616192;
  *(_WORD *)(a1 + 60) = 1305;
  *(_DWORD *)(a1 + 64) = 1092616192;
  *(_WORD *)(a1 + 68) = 1542;
  *(_QWORD *)(a1 + 72) = 0x4348000043160000;
  *(_WORD *)(a1 + 80) = 261;
  *(_DWORD *)(a1 + 84) = 1103626240;
  *(_QWORD *)(a1 + 88) = 0x80000001ELL;
  *(_DWORD *)(a1 + 100) = 1092616192;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 127) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 412) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 151) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_QWORD *)(a1 + 249) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_WORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 308) = 0;
  *(_QWORD *)(a1 + 342) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  return result;
}

void CLSafetyDeescalatorProjectilePhone::CLSafetyDeescalatorProjectilePhone(CLSafetyDeescalatorProjectilePhone *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = off_10034BF58;
  *(_OWORD *)((char *)this + 72) = xmmword_1002E5F00;
  *((_QWORD *)this + 11) = 0xB00000000;
  *(_QWORD *)((char *)this + 140) = 0xB00000000;
  *((_QWORD *)this + 24) = 0xB00000000;
  *(_QWORD *)((char *)this + 244) = 0xB00000000;
  *((_QWORD *)this + 37) = 0xB00000000;
  *(_QWORD *)((char *)this + 316) = 0xB00000000;
  *((_DWORD *)this + 89) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_WORD *)this + 176) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 5;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 5;
  }
  strcpy(v2, "de-PP");
}

void CLSafetyDeescalatorProjectilePhone::resetConfiguration(CLSafetyDeescalatorProjectilePhone *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  int v21;
  id v22;
  __int128 v23;

  v22 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "DeescalatorPPConfig", *((unsigned __int8 *)this + 32)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 0;
  LODWORD(v4) = 10.0;
  LODWORD(v5) = 8.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v22, v3, v4, v5);
  LODWORD(v23) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1232348160;
  LODWORD(v9) = 1143111680;
  LODWORD(v10) = 0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v22, v10, v8, v9);
  DWORD1(v23) = v11;

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v13) = 1193033728;
  LODWORD(v14) = 1193033472;
  LODWORD(v15) = 0;
  objc_msgSend(v12, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v22, v15, v13, v14);
  DWORD2(v23) = v16;

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v18) = 1176256512;
  LODWORD(v19) = 0;
  LODWORD(v20) = 19.0;
  objc_msgSend(v17, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 3, v22, v19, v18, v20);
  HIDWORD(v23) = v21;

  CLSafetyDeescalatorProjectilePhone::setConfig((uint64_t)this, &v23);
}

void sub_100035A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double CLSafetyDeescalatorProjectilePhone::setConfig(uint64_t a1, _OWORD *a2)
{
  NSObject *v3;
  double result;
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  __int16 v11;
  double v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;

  *(_OWORD *)(a1 + 72) = *a2;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034BFE0);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(float *)(a1 + 72);
    v6 = *(float *)(a1 + 76);
    v7 = *(float *)(a1 + 80);
    v8 = *(float *)(a1 + 84);
    v9 = 134218752;
    v10 = v5;
    v11 = 2048;
    v12 = v6;
    v13 = 2048;
    v14 = v7;
    v15 = 2048;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[de-PP] config-1,%f,config-2,%f,config-3,%f,config-4,%f", (uint8_t *)&v9, 0x2Au);
  }
  return result;
}

unint64_t CLSafetyDeescalatorProjectilePhone::setupForceControls(CLSafetyDeescalatorProjectilePhone *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceProjectilePhone");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceProjectilePhone");
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CLSafetyDeescalatorProjectilePhone::assertReady(CLSafetyDeescalatorProjectilePhone *this, uint64_t a2, const char *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((unsigned __int16 *)this + 45);
  v4 = *((unsigned __int16 *)this + 71);
  v16 = v3;
  v17 = v4;
  v5 = *((unsigned __int16 *)this + 123);
  v6 = *((unsigned __int16 *)this + 97);
  v18 = v5;
  v19 = v6;
  v7 = 8;
  v8 = v3;
  v9 = (uint64_t *)&v16;
  do
  {
    if (*(unint64_t *)((char *)&v16 + v7) < v8)
    {
      v8 = *(unint64_t *)((char *)&v16 + v7);
      v9 = (uint64_t *)((char *)&v16 + v7);
    }
    v7 += 8;
  }
  while (v7 != 32);
  v10 = *v9;
  v16 = v3;
  v17 = v4;
  v11 = 8;
  v12 = (uint64_t *)&v16;
  v18 = v5;
  v19 = v6;
  do
  {
    v13 = *(unint64_t *)((char *)&v16 + v11);
    v14 = v3 >= v13;
    if (v3 <= v13)
      v3 = *(unint64_t *)((char *)&v16 + v11);
    if (!v14)
      v12 = (uint64_t *)((char *)&v16 + v11);
    v11 += 8;
  }
  while (v11 != 32);
  return CLKappaDeescalator::raiseUnless(v10 == *v12, (BOOL)"[de-PP] Buffer sizes are not the same", a3);
}

void CLSafetyDeescalatorProjectilePhone::log(CLSafetyDeescalatorProjectilePhone *this, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;

  v4 = *((float *)this + 84);
  v5 = *((float *)this + 85);
  v6 = *((float *)this + 86);
  v7 = *((float *)this + 87);
  v8 = *((unsigned __int8 *)this + 352);
  v9 = *((unsigned __int8 *)this + 353);
  v10 = *((_DWORD *)this + 89);
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034BFE0);
  v11 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *((float *)this + 18);
    v13 = *((float *)this + 19);
    v14 = *((float *)this + 20);
    v15 = *((float *)this + 21);
    v16 = 134351872;
    v17 = a2;
    v18 = 1026;
    v19 = v10;
    v20 = 2050;
    v21 = v12;
    v22 = 2050;
    v23 = v13;
    v24 = 2050;
    v25 = v14;
    v26 = 2050;
    v27 = v15;
    v28 = 2050;
    v29 = v4;
    v30 = 2050;
    v31 = v5;
    v32 = 2050;
    v33 = v6;
    v34 = 2050;
    v35 = v7;
    v36 = 1026;
    v37 = v8;
    v38 = 1026;
    v39 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[de-PP] AlgBlock summary,A,%{public}llu,B,%{public}d,config-1,%{public}f,config-2,%{public}f,config-3,%{public}f,config-4,%{public}f,debug-1a,%{public}f,debug-1b,%{public}f,debug-1c,%{public}f,debug-1d,%{public}f,debug-2a,%{public}d,debug-2b,%{public}d\n", (uint8_t *)&v16, 0x6Eu);
  }
}

uint64_t CLSafetyDeescalatorProjectilePhone::onEvaluateAtMinHoldDuration(CLSafetyDeescalatorProjectilePhone *this)
{
  unint64_t v2;
  char v3;
  BOOL ProjectileInEpoch;
  BOOL v5;
  BOOL v6;
  uint64_t result;

  if (*((_WORD *)this + 45))
  {
    v2 = 0;
    v3 = 0;
    while (1)
    {
      while (!*(_BYTE *)sub_100027E40((unsigned __int16 *)this + 148, v2)
           && !*(_BYTE *)sub_100027E40((unsigned __int16 *)this + 158, v2))
      {
        if (++v2 >= *((unsigned __int16 *)this + 45))
        {
          if ((v3 & 1) == 0)
            goto LABEL_14;
LABEL_13:
          result = 4;
          goto LABEL_15;
        }
      }
      ProjectileInEpoch = CLSafetyDeescalatorProjectilePhone::getProjectileInEpoch(this, v2 - 1);
      v5 = CLSafetyDeescalatorProjectilePhone::getProjectileInEpoch(this, v2++);
      v6 = CLSafetyDeescalatorProjectilePhone::getProjectileInEpoch(this, v2);
      if (!ProjectileInEpoch && !v5 && !v6)
        break;
      v3 = 1;
      if (v2 >= *((unsigned __int16 *)this + 45))
        goto LABEL_13;
    }
    result = 1;
  }
  else
  {
LABEL_14:
    result = 0;
  }
LABEL_15:
  *((_DWORD *)this + 89) = result;
  return result;
}

BOOL CLSafetyDeescalatorProjectilePhone::getProjectileInEpoch(CLSafetyDeescalatorProjectilePhone *this, unsigned int a2)
{
  float v4;
  float v5;
  float v6;

  if ((a2 & 0x80000000) != 0)
    return 0;
  if (*((unsigned __int16 *)this + 45) > a2)
  {
    v4 = 0.0;
    v5 = 0.0;
    if (a2)
      v5 = *(float *)sub_1000361EC((unsigned __int16 *)this + 122, a2 - 1);
    if ((unint64_t)*((unsigned __int16 *)this + 123) - 1 > a2)
      v4 = *(float *)sub_1000361EC((unsigned __int16 *)this + 122, a2 + 1);
    v6 = *(float *)sub_1000361EC((unsigned __int16 *)this + 122, a2);
    if (v5 >= v6)
      v6 = v5;
    if (v6 >= v4)
      v4 = v6;
    if (*(float *)sub_1000361EC((unsigned __int16 *)this + 44, a2) >= *((float *)this + 18)
      && *(float *)sub_1000361EC((unsigned __int16 *)this + 70, a2) >= *((float *)this + 19)
      && *(float *)sub_1000361EC((unsigned __int16 *)this + 96, a2) >= *((float *)this + 20))
    {
      return v4 <= *((float *)this + 21);
    }
  }
  return 0;
}

float CLSafetyDeescalatorProjectilePhone::updateWithSpinFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  sub_10003606C((unsigned __int16 *)(a1 + 140), (_DWORD *)(a2 + 12));
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 340) = result;
  return result;
}

unsigned __int16 *sub_10003606C(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[1];
  v3 = *((unsigned int *)result + 1);
  v4 = *result;
  if (v4 + v2 >= v3)
    v5 = *((unsigned int *)result + 1);
  else
    v5 = 0;
  *(_DWORD *)&result[2 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

float CLSafetyDeescalatorProjectilePhone::updateWithPulseFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  sub_10003606C((unsigned __int16 *)(a1 + 192), (_DWORD *)(a2 + 248));
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 248);
  sub_10003606C((unsigned __int16 *)(a1 + 244), (_DWORD *)(a2 + 16));
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 348) = result;
  return result;
}

float CLSafetyDeescalatorProjectilePhone::updateWithFreeFallFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  sub_10003606C((unsigned __int16 *)(a1 + 88), (_DWORD *)(a2 + 28));
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 336) = result;
  return result;
}

uint64_t CLSafetyDeescalatorProjectilePhone::updateWithCoupledCrash(uint64_t this, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int16 *)(this + 298);
  v3 = *(unsigned int *)(this + 300);
  v4 = *(unsigned __int16 *)(this + 296);
  if (v4 + v2 >= v3)
    v5 = *(unsigned int *)(this + 300);
  else
    v5 = 0;
  *(_BYTE *)(this + 296 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *(_WORD *)(this + 296) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 298) = v2 + 1;
  }
  *(_BYTE *)(this + 352) = a2;
  return this;
}

uint64_t CLSafetyDeescalatorProjectilePhone::updateWithUncoupledCrash(uint64_t this, char a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int16 *)(this + 318);
  v3 = *(unsigned int *)(this + 320);
  v4 = *(unsigned __int16 *)(this + 316);
  if (v4 + v2 >= v3)
    v5 = *(unsigned int *)(this + 320);
  else
    v5 = 0;
  *(_BYTE *)(this + 316 + v4 + v2 - v5 + 8) = a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *(_WORD *)(this + 316) = v4 + 1 - v3;
  }
  else
  {
    *(_WORD *)(this + 318) = v2 + 1;
  }
  *(_BYTE *)(this + 353) = a2;
  return this;
}

uint64_t sub_1000361EC(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  CFAbsoluteTime Current;
  int v8;
  int v9;
  CFAbsoluteTime v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  int v16;

  v4 = *((unsigned int *)a1 + 1);
  if (v4 <= a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *((_DWORD *)a1 + 1);
      v9 = 134218754;
      v10 = Current;
      v11 = 2080;
      v12 = "const T &CMQueue<float>::operator[](const size_t) const [T = float]";
      v13 = 2048;
      v14 = a2;
      v15 = 1024;
      v16 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "ERROR,Die,Time,%.3f,Function,\"%s\",i,%zu,capacity,%u\n", (uint8_t *)&v9, 0x26u);
    }
    __assert_rtn("operator[]", "CMQueue.h", 244, "false");
  }
  v5 = *a1 + a2;
  if (v5 < v4)
    v4 = 0;
  return (uint64_t)&a1[2 * (v5 - v4) + 4];
}

uint64_t CLSafetyDeescalatorProjectilePhone::onPreviousEpochMadeDecision(uint64_t this)
{
  *(_DWORD *)(this + 356) = 0;
  return this;
}

void sub_100036318(void **this)
{
  *this = off_10034BF58;
  CLKappaDeescalator::~CLKappaDeescalator(this);
}

void sub_100036328(void **a1)
{
  *a1 = off_10034BF58;
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_100036358(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

double CLKappaEstimatesAlgAirbagResult::reset(CLKappaEstimatesAlgAirbagResult *this)
{
  double result;

  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *((double *)this + 5) = result;
  *((_DWORD *)this + 12) = -1082130432;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0x7FFFFFFF;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = -1082130432;
  return result;
}

double CLKappaEstimatesAlgAirbagResult::log(CLKappaEstimatesAlgAirbagResult *this)
{
  NSObject *v2;
  double result;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  double v36;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034CBB8);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *((unsigned __int8 *)this + 36);
    v6 = *((float *)this + 10);
    v7 = *((float *)this + 11);
    v8 = *((float *)this + 12);
    v9 = *((_QWORD *)this + 7);
    v10 = *((_DWORD *)this + 16);
    v11 = *((_DWORD *)this + 8);
    v12 = *((_QWORD *)this + 9);
    v13 = *((_QWORD *)this + 10);
    v14 = *((float *)this + 22);
    v15 = 134351616;
    v16 = v4;
    v17 = 1026;
    v18 = v5;
    v19 = 2050;
    v20 = v6;
    v21 = 2050;
    v22 = v7;
    v23 = 2050;
    v24 = v8;
    v25 = 2050;
    v26 = v9;
    v27 = 1026;
    v28 = v10;
    v29 = 1026;
    v30 = v11;
    v31 = 2050;
    v32 = v12;
    v33 = 2050;
    v34 = v13;
    v35 = 2050;
    v36 = v14;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[AB] summary,A,%{public}llu,B,%{public}d,C,%{public}f,D,%{public}f,E,%{public}f,F,%{public}llu,G,%{public}d,H,%{public}d,I,%{public}llu,J,%{public}llu,K,%{public}f\n", (uint8_t *)&v15, 0x64u);
  }
  return result;
}

void CLKappaEstimatesAlgAirbag::CLKappaEstimatesAlgAirbag(CLKappaEstimatesAlgAirbag *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *v5 = *a2;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 160)) = a2[7];
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 168)) = a2[8];
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 176)) = a2[9];
  v5[4] = 0;
  v5[5] = 0;
  v6 = (uint64_t)(v5 + 4);
  v7 = operator new(0x80uLL);
  v7[2] = 0;
  *v7 = off_10034CBE8;
  v7[1] = 0;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  v7[3] = &off_10034D198;
  __asm { FMOV            V0.2S, #-1.0 }
  v7[8] = _D0;
  *((_DWORD *)v7 + 18) = -1082130432;
  *((_DWORD *)v7 + 22) = 0x7FFFFFFF;
  v7[12] = 0;
  v7[13] = 0;
  *((_DWORD *)v7 + 28) = -1082130432;
  *(_QWORD *)&v27 = v7 + 3;
  *((_QWORD *)&v27 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v27);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v25 = *((_QWORD *)this + 1);
  v26 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  sub_10003671C((uint64_t)&v25, &v27);
  sub_1000081AC(v6, &v27);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v26;
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1000366FC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;
  uint64_t *v3;

  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v3);
  _Unwind_Resume(a1);
}

void *sub_10003671C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void CLKappaEstimatesAlgAirbag::CLKappaEstimatesAlgAirbag(CLKappaEstimatesAlgAirbag *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;

  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 6) = off_100345DF8;
  *((_QWORD *)this + 7) = off_100345EC0;
  *((_QWORD *)this + 8) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10034C5B0);
  *v2 = off_10034C0B0;
  v2[7] = off_10034C488;
  v2[8] = off_10034C560;
  v2[4] = 0;
  v3 = (uint64_t)(v2 + 4);
  v2[5] = 0;
  v2[6] = off_10034C350;
  v4 = operator new(0x80uLL);
  v4[2] = 0;
  *v4 = off_10034CBE8;
  v4[1] = 0;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[3] = &off_10034D198;
  __asm { FMOV            V0.2S, #-1.0 }
  v4[8] = _D0;
  *((_DWORD *)v4 + 18) = -1082130432;
  *((_DWORD *)v4 + 22) = 0x7FFFFFFF;
  v4[12] = 0;
  v4[13] = 0;
  *((_DWORD *)v4 + 28) = -1082130432;
  *(_QWORD *)&v24 = v4 + 3;
  *((_QWORD *)&v24 + 1) = v4;
  sub_1000081AC((uint64_t)this + 8, &v24);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v22 = *((_QWORD *)this + 1);
  v23 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  sub_10003671C((uint64_t)&v22, &v24);
  sub_1000081AC(v3, &v24);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_10003697C(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10034C5B0);
  _Unwind_Resume(a1);
}

uint64_t CLKappaEstimatesAlgAirbag::reset(CLKappaEstimatesAlgAirbag *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t CLKappaEstimatesAlgAirbag::setConfig(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 16) = *a2;
  return result;
}

uint64_t CLKappaEstimatesAlgAirbag::epochFinalize(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 32) + 24) = a2;
  return this;
}

_QWORD *`virtual thunk to'CLKappaEstimatesAlgAirbag::epochFinalize(_QWORD *this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*this - 48) + 32) + 24) = a2;
  return this;
}

__n128 CLKappaEstimatesAlgAirbag::feedFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(v2 + 36) = *(_BYTE *)(a2 + 52) != 0;
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(v2 + 88) = *(_DWORD *)(a2 + 64);
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v2 + 72) = result;
  return result;
}

double `virtual thunk to'CLKappaEstimatesAlgAirbag::feedFeatures(_QWORD *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = CLKappaEstimatesAlgAirbag::feedFeatures((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2).n128_u64[0];
  return result;
}

void sub_100036A44(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10034C0B0;
  *((_QWORD *)a1 + 6) = off_10034C350;
  *((_QWORD *)a1 + 7) = off_10034C488;
  *((_QWORD *)a1 + 8) = off_10034C560;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10034C5B0);
}

void sub_100036A94(CLKappaAlgBlock *a1)
{
  *(_QWORD *)a1 = off_10034C0B0;
  *((_QWORD *)a1 + 6) = off_10034C350;
  *((_QWORD *)a1 + 7) = off_10034C488;
  *((_QWORD *)a1 + 8) = off_10034C560;
  sub_10000A718((uint64_t)a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(a1, (uint64_t *)off_10034C5B0);
  operator delete();
}

void sub_100036B34(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10034C0B0;
  *((_QWORD *)v1 + 6) = off_10034C350;
  *((_QWORD *)v1 + 7) = off_10034C488;
  *((_QWORD *)v1 + 8) = off_10034C560;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10034C5B0);
}

void sub_100036B8C(_QWORD *a1)
{
  CLKappaAlgBlock *v1;

  v1 = (CLKappaAlgBlock *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *(_QWORD *)v1 = off_10034C0B0;
  *((_QWORD *)v1 + 6) = off_10034C350;
  *((_QWORD *)v1 + 7) = off_10034C488;
  *((_QWORD *)v1 + 8) = off_10034C560;
  sub_10000A718((uint64_t)v1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10034C5B0);
  operator delete();
}

void sub_100036C2C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_100036C5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034CBE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100036C70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034CBE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100036CA4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

float sunElevationDeg(double a1, float a2, float a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  double v26;
  __double2 v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  __float2 v34;
  float v35;
  double v36;
  __float2 v37;
  __float2 v38;
  float v39;
  double v41;
  float v42;
  float v43;
  float v44;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar calendarWithIdentifier:](NSCalendar, "calendarWithIdentifier:", NSCalendarIdentifierGregorian));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneForSecondsFromGMT:](NSTimeZone, "timeZoneForSecondsFromGMT:", 0));
  objc_msgSend(v6, "setTimeZone:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "components:fromDate:", 252, v8));
  v10 = (uint64_t)objc_msgSend(v9, "month");
  v11 = objc_msgSend(v9, "day");
  v12 = (char *)objc_msgSend(v9, "year");
  v13 = objc_msgSend(v9, "hour");
  v14 = objc_msgSend(v9, "minute");
  v15 = (uint64_t)objc_msgSend(v9, "second");
  v16 = v10 + 12;
  if (v10 >= 3)
    v16 = v10;
  v17 = (uint64_t)&v12[-(v10 < 3)];
  v18 = (double)((int)((double)(v17 + 4716) * 365.25)
               + (int)((double)(v16 + 1) * 30.6001)
               + (int)((double)((uint64_t)v13 + ((uint64_t)v14 + v15 / 60) / 60) / 24.0 + (double)(uint64_t)v11))
      + -1524.5;
  v44 = a2;
  if (v18 > 2299200.0)
    v18 = (float)((float)(v18 + 2.0) - (float)((uint64_t)&v12[-(v10 < 3)] / 100)) + (float)(v17 / 400);
  v19 = (float)((float)(v18 + -2451500.0) / 36525.0);
  v20 = ((double)(uint64_t)v14 / 60.0 + (double)(uint64_t)v13 + (double)v15 / 3600.0) / 24.0;
  v43 = v20;
  v21 = v19 * (v19 * -0.0001537 + 35999.0503) + 357.52911;
  v22 = 0.016708634 - v19 * (v19 * 0.0000001267 + 0.000042037);
  v42 = v22;
  v23 = sinf(v21 * 0.017453);
  v41 = sinf(v21 * 0.034907);
  v24 = (v19 * -0.000101 + 0.019993) * v41
      + v23 * (1.914602 - v19 * (v19 * 0.000014 + 0.004817))
      + sinf(v21 * 0.05236) * 0.000289;
  v25 = (float)((int)(v19 * (v19 * 0.0003032 + 36000.7698) + 280.46646) % 360);
  v26 = (float)(v25 + v24) + -0.00569;
  v27 = __sincos_stret((v19 * -1934.136 + 125.04) * 0.0174532924);
  *(float *)&v26 = v26 + v27.__sinval * -0.00478;
  v28 = ((21.448 - v19 * (v19 * (v19 * -0.001813 + 0.00059) + 46.815)) / 60.0 + 26.0) / 60.0 + 23.0;
  v29 = v28 + v27.__cosval * 0.00256;
  *(float *)&v19 = v29 * 0.017453;
  v30 = sinf(v29 * 0.017453);
  v31 = sinf(*(float *)&v26 * 0.017453);
  v32 = asinf(v30 * v31);
  v33 = tanf(*(float *)&v19 * 0.5);
  *(float *)&v26 = v33 * v33;
  v34 = __sincosf_stret(v25 * 0.034907);
  v35 = ((float)((float)((float)((float)(v42 * -2.0) * v23) + (float)(*(float *)&v26 * v34.__sinval))
               + (float)((float)((float)(*(float *)&v26 * (float)(v42 * 4.0)) * v23) * v34.__cosval))
       + *(float *)&v26 * -0.5 * *(float *)&v26 * sinf(v25 * 0.069813)
       + v42 * -1.25 * v42 * v41)
      * 229.183121;
  v36 = (float)((int)(float)((float)(v35 + (float)(v43 * 1440.0)) + (float)(a3 * 4.0)) % 1440) * 0.25;
  *(float *)&v19 = v36 + dbl_1002E6100[v36 < 0.0];
  v37 = __sincosf_stret(v44 * 0.017453);
  v38 = __sincosf_stret((float)(v32 * 57.296) * 0.017453);
  v39 = cosf(*(float *)&v19 * 0.017453);
  *(float *)&v26 = asinf((float)((float)(v37.__cosval * v38.__cosval) * v39) + (float)(v37.__sinval * v38.__sinval))
                 * 57.296;

  return *(float *)&v26;
}

void sub_100037268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t CLKappaAlgFlowController::CLKappaAlgFlowController(uint64_t a1, void *a2, char a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t i;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t j;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t k;
  __int128 *v162;
  __int128 *v163;
  __int128 *v164;
  __int128 *v165;
  __int128 *v166;
  __int128 *v167;
  int v168;
  NSObject *v169;
  uint64_t v170;
  NSObject *v171;
  NSObject *v172;
  int v173;
  uint64_t *v174;
  uint64_t *v175;
  char v176;
  uint64_t *v177;
  uint64_t v178;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  uint8_t buf[16];
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212[16];
  uint64_t v213;

  v5 = a2;
  *(_OWORD *)(a1 + 48) = 0u;
  v196 = a1 + 48;
  *(_OWORD *)(a1 + 64) = 0u;
  v195 = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  v194 = a1 + 80;
  *(_OWORD *)(a1 + 96) = 0u;
  v193 = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  v192 = a1 + 112;
  *(_OWORD *)(a1 + 128) = 0u;
  v6 = a1 + 128;
  *(_OWORD *)(a1 + 144) = 0u;
  v189 = a1 + 144;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v7 = a1 + 176;
  *(_OWORD *)(a1 + 192) = 0u;
  v8 = a1 + 192;
  *(_OWORD *)(a1 + 208) = 0u;
  v9 = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  v10 = a1 + 224;
  *(_OWORD *)(a1 + 240) = 0u;
  v11 = a1 + 240;
  *(_QWORD *)a1 = off_10034CC38;
  v190 = a1 + 272;
  v191 = a1 + 256;
  v187 = a1 + 288;
  v188 = a1 + 160;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  v185 = a1 + 320;
  v186 = a1 + 304;
  v183 = a1 + 352;
  v184 = a1 + 336;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  v181 = a1 + 384;
  v182 = a1 + 368;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_BYTE *)(a1 + 544) = a3;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  v180 = v5;
  *(_QWORD *)(a1 + 552) = v180;
  v198 = 4000000;
  v197 = 2000000;
  sub_10003C958(&v198, &v197, buf);
  sub_1000081AC(a1 + 528, (__int128 *)buf);
  v12 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 120;
  *(_DWORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  sub_10003CAF0(buf);
  sub_1000081AC(v196, (__int128 *)buf);
  v15 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  sub_10003CBDC(buf);
  sub_1000081AC(v195, (__int128 *)buf);
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  sub_10003CCC8(buf);
  sub_1000081AC(v194, (__int128 *)buf);
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_10003CDB4(buf);
  sub_1000081AC(v193, (__int128 *)buf);
  v24 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_10003CEA0(buf);
  sub_1000081AC(v192, (__int128 *)buf);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_10003CF8C(buf);
  sub_1000081AC(a1 + 128, (__int128 *)buf);
  v30 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v31 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  sub_10003D078(buf);
  sub_1000081AC(v189, (__int128 *)buf);
  v33 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_10003D164(buf);
  sub_1000081AC(v188, (__int128 *)buf);
  v36 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v37 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  sub_10003D250(buf);
  sub_1000081AC(a1 + 176, (__int128 *)buf);
  v39 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v40 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  sub_10003D33C(buf);
  sub_1000081AC(a1 + 192, (__int128 *)buf);
  v42 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  sub_10003D428(buf);
  sub_1000081AC(a1 + 208, (__int128 *)buf);
  v45 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v46 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  sub_10003D514(buf);
  sub_1000081AC(a1 + 224, (__int128 *)buf);
  v48 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v49 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  sub_10003D600(buf);
  sub_1000081AC(a1 + 240, (__int128 *)buf);
  v51 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v52 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  sub_10003D6EC(buf);
  sub_1000081AC(v191, (__int128 *)buf);
  v54 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  sub_10003D7D8(buf);
  sub_1000081AC(v190, (__int128 *)buf);
  v57 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  sub_10003D8C4(buf);
  sub_1000081AC(v187, (__int128 *)buf);
  v60 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  sub_10003D9B0(buf);
  sub_1000081AC(v186, (__int128 *)buf);
  v63 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v64 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_10003DA9C(buf);
  sub_1000081AC(v185, (__int128 *)buf);
  v66 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v67 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  sub_10003DB88(buf);
  sub_1000081AC(v184, (__int128 *)buf);
  v69 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v70 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  sub_10003DC74(buf);
  sub_1000081AC(v183, (__int128 *)buf);
  v72 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v73 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  sub_10003DD60(buf);
  sub_1000081AC(v182, (__int128 *)buf);
  v75 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v76 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  sub_10003DE4C(buf);
  sub_1000081AC(v181, (__int128 *)buf);
  v78 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v79 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  sub_10003DF38(buf);
  sub_1000081AC(a1 + 400, (__int128 *)buf);
  v81 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v82 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  sub_10003E024(buf);
  sub_1000081AC(a1 + 416, (__int128 *)buf);
  v84 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v85 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)buf = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&buf[8] = v87;
  if (v87)
  {
    v88 = (unint64_t *)(v87 + 8);
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
  }
  v90 = *(_QWORD *)(a1 + 72);
  v200 = *(_QWORD *)(a1 + 64);
  v201 = v90;
  if (v90)
  {
    v91 = (unint64_t *)(v90 + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  v93 = *(_QWORD *)(a1 + 88);
  v202 = *(_QWORD *)(a1 + 80);
  v203 = v93;
  if (v93)
  {
    v94 = (unint64_t *)(v93 + 8);
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  v96 = *(_QWORD *)(a1 + 104);
  v204 = *(_QWORD *)(a1 + 96);
  v205 = v96;
  if (v96)
  {
    v97 = (unint64_t *)(v96 + 8);
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v99 = *(_QWORD *)(a1 + 120);
  v206 = *(_QWORD *)(a1 + 112);
  v207 = v99;
  if (v99)
  {
    v100 = (unint64_t *)(v99 + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = *(_QWORD *)(a1 + 136);
  v208 = *(_QWORD *)(a1 + 128);
  v209 = v102;
  if (v102)
  {
    v103 = (unint64_t *)(v102 + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  v105 = *(_QWORD *)(a1 + 152);
  v210 = *(_QWORD *)(a1 + 144);
  v211 = v105;
  if (v105)
  {
    v106 = (unint64_t *)(v105 + 8);
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  v108 = *(_QWORD *)(a1 + 168);
  v212[0] = *(_QWORD *)(a1 + 160);
  v212[1] = v108;
  if (v108)
  {
    v109 = (unint64_t *)(v108 + 8);
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  v111 = *(_QWORD *)(a1 + 184);
  v212[2] = *(_QWORD *)(a1 + 176);
  v212[3] = v111;
  if (v111)
  {
    v112 = (unint64_t *)(v111 + 8);
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  v114 = *(_QWORD *)(a1 + 200);
  v212[4] = *(_QWORD *)(a1 + 192);
  v212[5] = v114;
  if (v114)
  {
    v115 = (unint64_t *)(v114 + 8);
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  v117 = *(_QWORD *)(a1 + 216);
  v212[6] = *(_QWORD *)(a1 + 208);
  v212[7] = v117;
  if (v117)
  {
    v118 = (unint64_t *)(v117 + 8);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  v120 = *(_QWORD *)(a1 + 232);
  v212[8] = *(_QWORD *)(a1 + 224);
  v212[9] = v120;
  if (v120)
  {
    v121 = (unint64_t *)(v120 + 8);
    do
      v122 = __ldxr(v121);
    while (__stxr(v122 + 1, v121));
  }
  v123 = *(_QWORD *)(a1 + 248);
  v212[10] = *(_QWORD *)(a1 + 240);
  v212[11] = v123;
  if (v123)
  {
    v124 = (unint64_t *)(v123 + 8);
    do
      v125 = __ldxr(v124);
    while (__stxr(v125 + 1, v124));
  }
  v126 = *(_QWORD *)(a1 + 264);
  v212[12] = *(_QWORD *)(a1 + 256);
  v212[13] = v126;
  if (v126)
  {
    v127 = (unint64_t *)(v126 + 8);
    do
      v128 = __ldxr(v127);
    while (__stxr(v128 + 1, v127));
  }
  v129 = *(_QWORD *)(a1 + 280);
  v212[14] = *(_QWORD *)(a1 + 272);
  v212[15] = v129;
  if (v129)
  {
    v130 = (unint64_t *)(v129 + 8);
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  sub_10003C47C(a1 + 432, (uint64_t *)buf, &v213, 0xFuLL);
  for (i = 224; i != -16; i -= 16)
    sub_10000A718((uint64_t)&buf[i]);
  v133 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)buf = *(_QWORD *)(a1 + 288);
  *(_QWORD *)&buf[8] = v133;
  if (v133)
  {
    v134 = (unint64_t *)(v133 + 8);
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  v136 = *(_QWORD *)(a1 + 312);
  v200 = *(_QWORD *)(a1 + 304);
  v201 = v136;
  if (v136)
  {
    v137 = (unint64_t *)(v136 + 8);
    do
      v138 = __ldxr(v137);
    while (__stxr(v138 + 1, v137));
  }
  v139 = *(_QWORD *)(a1 + 328);
  v202 = *(_QWORD *)(a1 + 320);
  v203 = v139;
  if (v139)
  {
    v140 = (unint64_t *)(v139 + 8);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  v142 = *(_QWORD *)(a1 + 344);
  v204 = *(_QWORD *)(a1 + 336);
  v205 = v142;
  if (v142)
  {
    v143 = (unint64_t *)(v142 + 8);
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
  }
  v145 = *(_QWORD *)(a1 + 360);
  v206 = *(_QWORD *)(a1 + 352);
  v207 = v145;
  if (v145)
  {
    v146 = (unint64_t *)(v145 + 8);
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
  v148 = *(_QWORD *)(a1 + 376);
  v208 = *(_QWORD *)(a1 + 368);
  v209 = v148;
  if (v148)
  {
    v149 = (unint64_t *)(v148 + 8);
    do
      v150 = __ldxr(v149);
    while (__stxr(v150 + 1, v149));
  }
  v151 = *(_QWORD *)(a1 + 392);
  v210 = *(_QWORD *)(a1 + 384);
  v211 = v151;
  if (v151)
  {
    v152 = (unint64_t *)(v151 + 8);
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
  }
  sub_10003C47C(a1 + 456, (uint64_t *)buf, v212, 7uLL);
  for (j = 96; j != -16; j -= 16)
    sub_10000A718((uint64_t)&buf[j]);
  v155 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)buf = *(_QWORD *)(a1 + 400);
  *(_QWORD *)&buf[8] = v155;
  if (v155)
  {
    v156 = (unint64_t *)(v155 + 8);
    do
      v157 = __ldxr(v156);
    while (__stxr(v157 + 1, v156));
  }
  v158 = *(_QWORD *)(a1 + 424);
  v200 = *(_QWORD *)(a1 + 416);
  v201 = v158;
  if (v158)
  {
    v159 = (unint64_t *)(v158 + 8);
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 1, v159));
  }
  sub_10003C47C(a1 + 480, (uint64_t *)buf, &v202, 2uLL);
  for (k = 16; k != -16; k -= 16)
    sub_10000A718((uint64_t)&buf[k]);
  v162 = *(__int128 **)(a1 + 432);
  v163 = *(__int128 **)(a1 + 440);
  while (v162 != v163)
    sub_10003C6FC((char **)(a1 + 504), v162++);
  v164 = *(__int128 **)(a1 + 456);
  v165 = *(__int128 **)(a1 + 464);
  while (v164 != v165)
    sub_10003C6FC((char **)(a1 + 504), v164++);
  v166 = *(__int128 **)(a1 + 480);
  v167 = *(__int128 **)(a1 + 488);
  while (v166 != v167)
    sub_10003C6FC((char **)(a1 + 504), v166++);
  v168 = *(unsigned __int8 *)(a1 + 544);
  if (v168 == 2)
  {
    if (qword_100387300 != -1)
      dispatch_once(&qword_100387300, &stru_10034D4F8);
    v171 = (id)qword_100387308;
    if (os_log_type_enabled(v171, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_INFO, "FC mode M", buf, 2u);
    }

    *(_BYTE *)(*(_QWORD *)v196 + 25) = 0;
    *(_BYTE *)(*(_QWORD *)v195 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v194 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v193 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v192 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v6 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v7 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v8 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v9 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v10 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v11 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v191 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v190 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v183 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v182 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v181 + 25) = 1;
    v170 = a1 + 416;
    goto LABEL_225;
  }
  if (v168 == 1)
  {
    if (qword_100387300 != -1)
      dispatch_once(&qword_100387300, &stru_10034D4F8);
    v169 = (id)qword_100387308;
    if (os_log_type_enabled(v169, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_INFO, "FC mode K", buf, 2u);
    }

    *(_BYTE *)(*(_QWORD *)v196 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v195 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v194 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v193 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v192 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v6 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v189 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v188 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v7 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v8 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v9 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v10 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v11 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v191 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v190 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v187 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v186 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v185 + 25) = 1;
    *(_BYTE *)(*(_QWORD *)v184 + 25) = 1;
    v170 = a1 + 400;
LABEL_225:
    *(_BYTE *)(*(_QWORD *)v170 + 25) = 1;
    goto LABEL_231;
  }
  if (qword_100387300 != -1)
    dispatch_once(&qword_100387300, &stru_10034D4F8);
  v172 = (id)qword_100387308;
  if (os_log_type_enabled(v172, OS_LOG_TYPE_FAULT))
  {
    v173 = *(unsigned __int8 *)(a1 + 544);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v173;
    _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_FAULT, "Unexpected mode %u - all algorithms will be disabled", buf, 8u);
  }

LABEL_231:
  v174 = *(uint64_t **)(a1 + 504);
  v175 = *(uint64_t **)(a1 + 512);
  if (v174 != v175)
  {
    v176 = *(_BYTE *)(a1 + 544);
    v177 = *(uint64_t **)(a1 + 504);
    do
    {
      v178 = *v177;
      v177 += 2;
      *(_BYTE *)(v178 + 24) = v176;
    }
    while (v177 != v175);
    do
    {
      if (*(_BYTE *)(*v174 + 25))
        (*(void (**)(uint64_t))(*(_QWORD *)*v174 + 304))(*v174);
      v174 += 2;
    }
    while (v174 != v175);
  }

  return a1;
}

void sub_1000383A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;

  for (i = 16; i != -16; i -= 16)
    sub_10000A718(v37 + i);

  sub_10000A718(a10);
  sub_10003C8B8((void ***)&a35);
  a35 = a12;
  sub_10003C8B8((void ***)&a35);
  a35 = a13;
  sub_10003C8B8((void ***)&a35);
  a35 = a14;
  sub_10003C8B8((void ***)&a35);
  sub_10000A718(a15);
  sub_10000A718(a16);
  sub_10000A718(a17);
  sub_10000A718(a18);
  sub_10000A718(a19);
  sub_10000A718(a20);
  sub_10000A718(a21);
  sub_10000A718(a22);
  sub_10000A718(a23);
  sub_10000A718(a26);
  sub_10000A718(a27);
  sub_10000A718(v35);
  sub_10000A718(v40);
  sub_10000A718(v39);
  sub_10000A718(v42);
  sub_10000A718(v41);
  sub_10000A718(a24);
  sub_10000A718(a25);
  sub_10000A718(v38);
  sub_10000A718(a28);
  sub_10000A718(a29);
  sub_10000A718(a30);
  sub_10000A718(a31);
  sub_10000A718(a32);

  _Unwind_Resume(a1);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::resetAlgConfigurations(CLKappaAlgFlowController *this)
{
  CLKappaAlgFlowController **v1;
  CLKappaAlgFlowController **v2;

  v1 = (CLKappaAlgFlowController **)*((_QWORD *)this + 63);
  v2 = (CLKappaAlgFlowController **)*((_QWORD *)this + 64);
  while (v1 != v2)
  {
    this = *v1;
    if (*((_BYTE *)*v1 + 25))
      this = (CLKappaAlgFlowController *)(*(uint64_t (**)(CLKappaAlgFlowController *))(*(_QWORD *)this + 304))(this);
    v1 += 2;
  }
  return this;
}

CLKappaAlgFlowController *CLKappaAlgFlowController::setMaxTriggerSessionTime(CLKappaAlgFlowController *this, uint64_t a2)
{
  if (!*((_BYTE *)this + 8))
    *((_QWORD *)this + 4) = a2;
  return this;
}

void CLKappaAlgFlowController::feedFastAccel(CLKappaAlgFlowController *this, CSSPUAccel800 *a2)
{
  CSSPUAccel800 *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSSPUAccel800 *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *(_QWORD *)-[CSSPUTriad c_struct](v3, "c_struct") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUTriad timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, CSSPUTriad_Struct *))(*(_QWORD *)*v8 + 16))(*v8, -[CSSPUTriad c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSSPUTriad timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedFastAccel(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_100038734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t CLKappaAlgFlowController::closeEpoch(CLKappaAlgFlowController *this, unint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  id NextSample;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  NSObject *v63;
  unint64_t v64;
  uint64_t v65;
  NSObject *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  char v96[8];
  std::__shared_weak_count *v97;
  _BYTE *v98;
  std::__shared_weak_count *v99;
  _BYTE buf[18];
  __int16 v101;
  uint64_t v102;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 67);
  v94 = *((_QWORD *)this + 66);
  v95 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7.n128_f64[0] = CSKappaEpochBufferIterator::CSKappaEpochBufferIterator((uint64_t)v96, &v94);
  v8 = v95;
  if (v95)
  {
    v9 = (unint64_t *)&v95->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = 0;
  while (1)
  {
    NextSample = CSKappaEpochBufferIterator::getNextSample((CSKappaEpochBufferIterator *)v96);
    v13 = (void *)objc_claimAutoreleasedReturnValue(NextSample);

    if (!v13)
      break;
    v11 = v13;
    CLKappaAlgFlowController::feedEpochFunctions((uint64_t)this, v13);
  }
  v14 = (_QWORD *)*((_QWORD *)this + 54);
  v15 = (_QWORD *)*((_QWORD *)this + 55);
  while (v14 != v15)
  {
    v16 = *v14;
    if (*(_BYTE *)(*v14 + 25))
    {
      v17 = *((_QWORD *)this + 67);
      *(_QWORD *)buf = *((_QWORD *)this + 66);
      *(_QWORD *)&buf[8] = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 144))(v16, buf);
      v20 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v14 + 160))(*v14, a2);
      (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)*v14 + 152))(&v98);
      v23 = *((_QWORD *)this + 57);
      v24 = *((_QWORD *)this + 58);
      while (v23 != v24)
      {
        if (*(_BYTE *)(*(_QWORD *)v23 + 25))
          (*(void (**)(_BYTE *))(*(_QWORD *)v98 + 16))(v98);
        v23 += 16;
      }
      v25 = *((_QWORD *)this + 60);
      v26 = *((_QWORD *)this + 61);
      while (v25 != v26)
      {
        if (*(_BYTE *)(*(_QWORD *)v25 + 25))
          (*(void (**)(_BYTE *))(*(_QWORD *)v98 + 16))(v98);
        v25 += 16;
      }
      (*(void (**)(_BYTE *))(*(_QWORD *)v98 + 32))(v98);
      v27 = v99;
      if (v99)
      {
        v28 = (unint64_t *)&v99->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    v14 += 2;
  }
  v30 = (_QWORD *)*((_QWORD *)this + 57);
  v31 = (_QWORD *)*((_QWORD *)this + 58);
  while (v30 != v31)
  {
    v32 = *v30;
    if (*(_BYTE *)(*v30 + 25))
    {
      v33 = *((_QWORD *)this + 67);
      *(_QWORD *)buf = *((_QWORD *)this + 66);
      *(_QWORD *)&buf[8] = v33;
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v32 + 144))(v32, buf);
      v36 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v37 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v30 + 160))(*v30, a2);
      (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)*v30 + 152))(&v98);
      v39 = *((_QWORD *)this + 60);
      v40 = *((_QWORD *)this + 61);
      while (v39 != v40)
      {
        if (*(_BYTE *)(*(_QWORD *)v39 + 25))
          (*(void (**)(_BYTE *))(*(_QWORD *)v98 + 16))(v98);
        v39 += 16;
      }
      (*(void (**)(_BYTE *))(*(_QWORD *)v98 + 32))(v98);
      v41 = v99;
      if (v99)
      {
        v42 = (unint64_t *)&v99->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
    v30 += 2;
  }
  v44 = (_QWORD *)*((_QWORD *)this + 60);
  v45 = (_QWORD *)*((_QWORD *)this + 61);
  while (v44 != v45)
  {
    v46 = *v44;
    if (*(_BYTE *)(*v44 + 25))
    {
      v47 = *((_QWORD *)this + 67);
      *(_QWORD *)buf = *((_QWORD *)this + 66);
      *(_QWORD *)&buf[8] = v47;
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v46 + 144))(v46, buf);
      v50 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v51 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v44 + 160))(*v44, a2);
      (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)*v44 + 152))(&v98);
      (*(void (**)(_BYTE *))(*(_QWORD *)v98 + 32))(v98);
      v53 = v99;
      if (v99)
      {
        v54 = (unint64_t *)&v99->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }
    v44 += 2;
  }
  if (!*((_BYTE *)this + 40) && *(_BYTE *)(*((_QWORD *)this + 42) + 25))
  {
    if (qword_100387300 != -1)
      dispatch_once(&qword_100387300, &stru_10034D4F8);
    v66 = (id)qword_100387308;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "overriding SC de", buf, 2u);
    }

    v68 = *((_QWORD *)this + 50);
    v67 = (std::__shared_weak_count *)*((_QWORD *)this + 51);
    if (v67)
    {
      v69 = (unint64_t *)&v67->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v92 = v68;
    v93 = v67;
    sub_10003B4AC((uint64_t)&v92, buf);
    v71 = v93;
    if (v93)
    {
      v72 = (unint64_t *)&v93->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)buf + 152))(&v90);
    sub_100032864((uint64_t)&v90, &v98);
    v74 = v91;
    if (v91)
    {
      v75 = (unint64_t *)&v91->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = v99;
    v98[120] = 0;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v81 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  if (qword_100387300 != -1)
    dispatch_once(&qword_100387300, &stru_10034D4F8);
  v56 = (id)qword_100387308;
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    v57 = *((_DWORD *)this + 3);
    v58 = *((_QWORD *)this + 2);
    if (v58)
      v59 = a2 - v58;
    else
      v59 = 0;
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v57;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = a2;
    v101 = 2050;
    v102 = v59;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "close epoch cnt %{public}d, ts %{public}llu, delta microseconds %{public}llu", buf, 0x1Cu);
  }

  objc_msgSend(*((id *)this + 69), "onCloseEpoch:epochNumber:", a2, (*((_DWORD *)this + 3))++);
  v60 = *((_QWORD *)this + 2);
  if (v60)
  {
    v61 = (_QWORD *)*((_QWORD *)this + 63);
    v62 = (_QWORD *)*((_QWORD *)this + 64);
    while (1)
    {
      if (v61 == v62)
      {
        if (qword_100387300 != -1)
          dispatch_once(&qword_100387300, &stru_10034D4F8);
        v63 = (id)qword_100387308;
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          v64 = a2 - *((_QWORD *)this + 2);
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v64;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "stopping %{public}llu microseconds after trigger", buf, 0xCu);
        }
        goto LABEL_95;
      }
      if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*v61 + 136))(*v61, a2, v60) & 1) != 0)
        break;
      v61 += 2;
    }
    if (*((_QWORD *)this + 2) + 1000000 * *((_QWORD *)this + 4) < a2)
    {
      if (qword_100387300 != -1)
        dispatch_once(&qword_100387300, &stru_10034D4F8);
      v63 = (id)qword_100387308;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_FAULT))
      {
        v83 = a2 - *((_QWORD *)this + 2);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v83;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "forcing stop %llu microseconds after trigger", buf, 0xCu);
      }
LABEL_95:

      CLKappaAlgFlowController::stop(this, a2);
      v65 = 0;
      goto LABEL_136;
    }
  }
  v84 = (_QWORD *)*((_QWORD *)this + 63);
  v85 = (_QWORD *)*((_QWORD *)this + 64);
  while (v84 != v85)
  {
    if (*(_BYTE *)(*v84 + 25))
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v84 + 168))(*v84, a2);
    v84 += 2;
  }
  CSKappaEpochBuffer::advanceEpoch(*((CSKappaEpochBuffer **)this + 66));
  v65 = 1;
LABEL_136:
  v86 = v97;
  if (v97)
  {
    v87 = (unint64_t *)&v97->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  return v65;
}

void sub_100039044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_10000A718(v8 - 128);
  sub_10000A718((uint64_t)va);
  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedAccel(CLKappaAlgFlowController *this, CSSPUAccel *a2)
{
  CSSPUAccel *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSSPUAccel *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *(_QWORD *)-[CSSPUTriad c_struct](v3, "c_struct") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUTriad timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, CSSPUTriad_Struct *))(*(_QWORD *)*v8 + 24))(*v8, -[CSSPUTriad c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSSPUTriad timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedAccel(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_1000392C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedHgAccel(CLKappaAlgFlowController *this, CSSPUHgAccel *a2)
{
  CSSPUHgAccel *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSSPUHgAccel *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *(_QWORD *)-[CSSPUTriad c_struct](v3, "c_struct") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUTriad timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, CSSPUTriad_Struct *))(*(_QWORD *)*v8 + 32))(*v8, -[CSSPUTriad c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSSPUTriad timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedHgAccel(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_100039424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedPressure(CLKappaAlgFlowController *this, CSSPUPressure *a2)
{
  CSSPUPressure *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSSPUPressure *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *(_QWORD *)-[CSSPUPressure c_struct](v3, "c_struct") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUPressure timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, FastUncompPressure *))(*(_QWORD *)*v8 + 40))(*v8, -[CSSPUPressure c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSSPUPressure timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedPressure(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_100039580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedDM(CLKappaAlgFlowController *this, CSSPUDM *a2)
{
  CSSPUDM *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSSPUDM *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *(_QWORD *)((char *)-[CSSPUDM c_struct](v3, "c_struct") + 42) + 3000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUDM timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, DMSample *))(*(_QWORD *)*v8 + 48))(*v8, -[CSSPUDM c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSSPUDM timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedDM(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_1000396D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedAudioRms(CLKappaAlgFlowController *this, CSSPUSpl *a2)
{
  CSSPUSpl *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSSPUSpl *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *(_QWORD *)-[CSSPUSpl c_struct](v3, "c_struct") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUSpl timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, CSSPUSpl_Struct *))(*(_QWORD *)*v8 + 56))(*v8, -[CSSPUSpl c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSSPUSpl timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedAudioRms(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_100039834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedTrustedAudioResult(CLKappaAlgFlowController *this, CSSPUTrustedAudioResult *a2)
{
  CSSPUTrustedAudioResult *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSSPUTrustedAudioResult *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *(_QWORD *)-[CSSPUTrustedAudioResult c_struct](v3, "c_struct") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUTrustedAudioResult timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, CSSPUTrustedAudioResult_Struct *))(*(_QWORD *)*v8 + 64))(*v8, -[CSSPUTrustedAudioResult c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSSPUTrustedAudioResult timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedTrustedAudioResult(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_100039990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedTrigger(CLKappaAlgFlowController *this, CSSPUKappaTrigger *a2)
{
  CSSPUKappaTrigger *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  TriggerSample *v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD v26[2];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  if (v4 > *((_QWORD *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 1) + 30000000)
    goto LABEL_44;
  v5 = *((_QWORD *)this + 66);
  v6 = -[CSSPUKappaTrigger timestamp](v3, "timestamp");
  v7 = *(_QWORD *)(v5 + 16);
  if (v7 != -1 && *(_QWORD *)(v5 + 8) * v7 > v6)
    goto LABEL_44;
  v8 = -[CSSPUKappaTrigger c_struct](v3, "c_struct");
  v9 = *((unsigned __int8 *)this + 544);
  if (v9 == 2)
  {
    if ((v8[1].rmsSN & 0xD0000) != 0)
    {
      v11 = (*((_BYTE *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 46) & 0x10) == 0;
      v12 = *((unsigned __int8 *)this + 544);
      if (v12 == 2)
      {
        if ((*((_BYTE *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 46) & 0x10) != 0)
          v10 = (*((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 93) >> 1) & 1;
        else
          v10 = 0;
        v12 = *((unsigned __int8 *)this + 544);
      }
      else
      {
        v10 = 0;
      }
      if (v12 != 1)
        goto LABEL_24;
      goto LABEL_21;
    }
LABEL_12:
    if (qword_100387300 != -1)
      dispatch_once(&qword_100387300, &stru_10034D4F8);
    v13 = (id)qword_100387308;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v14 = *((unsigned __int8 *)this + 544);
      v15 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 1);
      v16 = *((unsigned __int8 *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 46);
      v26[0] = 67109632;
      v26[1] = v14;
      v27 = 1024;
      v28 = v15;
      v29 = 1024;
      v30 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Ignoring at FC feedTrigger: [%u %u %u]", (uint8_t *)v26, 0x14u);
    }

    goto LABEL_44;
  }
  if (v9 != 1 || (v8->path & 0xF) == 0)
    goto LABEL_12;
  v10 = 0;
  v11 = 0;
LABEL_21:
  if ((*((_BYTE *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 1) & 0x10) == 0)
  {
    *((_QWORD *)this + 2) = *((_QWORD *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 1);
    if ((*((_BYTE *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 1) & 3) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_24:
  if (!v11 && !v10)
    goto LABEL_28;
  *((_QWORD *)this + 2) = *((_QWORD *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 1);
  if ((*((_BYTE *)-[CSSPUKappaTrigger c_struct](v3, "c_struct") + 46) & 1) == 0)
    goto LABEL_28;
LABEL_27:
  *((_BYTE *)this + 40) = 1;
LABEL_28:
  v17 = (_QWORD *)*((_QWORD *)this + 63);
  v18 = (_QWORD *)*((_QWORD *)this + 64);
  while (v17 != v18)
  {
    if (*(_BYTE *)(*v17 + 25))
    {
      if (*((_BYTE *)this + 8))
        (*(void (**)(_QWORD, TriggerSample *))(*(_QWORD *)*v17 + 72))(*v17, -[CSSPUKappaTrigger c_struct](v3, "c_struct"));
    }
    v17 += 2;
  }
  if (*((_BYTE *)this + 8))
  {
    while (1)
    {
      v19 = (_QWORD *)*((_QWORD *)this + 66);
      v20 = -[CSSPUKappaTrigger timestamp](v3, "timestamp");
      v21 = v19[1];
      v22 = v19[2];
      if (v22 == -1)
        break;
      if (*v19 + v21 * v22 > v20)
        goto LABEL_43;
      v23 = (_QWORD *)*((_QWORD *)this + 66);
      v24 = v23[2];
      if (v24 == -1)
        v25 = 0;
      else
        v25 = *v23 + v23[1] * v24;
      if (!CLKappaAlgFlowController::closeEpoch(this, v25 - 1))
        goto LABEL_44;
    }
    v19[2] = v20 / v21;
LABEL_43:
    CSKappaEpochBuffer::feedTrigger(*((id **)this + 66), v3);
  }
LABEL_44:

}

void sub_100039CD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CLKappaAlgFlowController::isTriggerFor(uint64_t a1, int a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  if (a2 == 2)
  {
    v2 = *(unsigned __int8 *)(a1 + 46);
    v3 = (v2 & 5) == 0;
  }
  else
  {
    if (a2 != 1)
      return 0;
    v2 = *(unsigned __int8 *)(a1 + 1);
    v3 = (v2 & 7) == 0;
  }
  v4 = (v2 >> 3) & 1;
  if (v3)
    return v4;
  else
    return 1;
}

void CLKappaAlgFlowController::feedGPS(CLKappaAlgFlowController *this, CSSPUGps *a2)
{
  CSSPUGps *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSSPUGps *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *((_QWORD *)-[CSSPUGps c_struct](v3, "c_struct") + 5) + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUGps timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, CSSPUGps_Struct *))(*(_QWORD *)*v8 + 80))(*v8, -[CSSPUGps c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSSPUGps timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedGPS(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_100039E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedSteps(CLKappaAlgFlowController *this, CSSPUSteps *a2)
{
  CSSPUSteps *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  CSSPUSteps *v16;

  v3 = a2;
  v4 = *((_QWORD *)this + 66);
  v16 = v3;
  v5 = -[CSSPUSteps timestamp](v3, "timestamp");
  v6 = *(_QWORD *)(v4 + 16);
  if (v6 == -1 || *(_QWORD *)(v4 + 8) * v6 <= v5)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 63);
    v8 = (_QWORD *)*((_QWORD *)this + 64);
    while (v7 != v8)
    {
      if (*(_BYTE *)(*v7 + 25))
      {
        if (*((_BYTE *)this + 8))
          (*(void (**)(_QWORD, $E8645A448CE2A7E0C8EDB8E2381A0972 *))(*(_QWORD *)*v7 + 88))(*v7, -[CSSPUSteps c_struct](v16, "c_struct"));
      }
      v7 += 2;
    }
    if (*((_BYTE *)this + 8))
    {
      while (1)
      {
        v9 = (_QWORD *)*((_QWORD *)this + 66);
        v10 = -[CSSPUSteps timestamp](v16, "timestamp");
        v11 = v9[1];
        v12 = v9[2];
        if (v12 == -1)
          break;
        if (*v9 + v11 * v12 > v10)
          goto LABEL_18;
        v13 = (_QWORD *)*((_QWORD *)this + 66);
        v14 = v13[2];
        if (v14 == -1)
          v15 = 0;
        else
          v15 = *v13 + v13[1] * v14;
        if (!CLKappaAlgFlowController::closeEpoch(this, v15 - 1))
          goto LABEL_19;
      }
      v9[2] = v10 / v11;
LABEL_18:
      CSKappaEpochBuffer::feedSteps(*((id **)this + 66), v16);
    }
  }
LABEL_19:

}

void sub_100039FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedRoads(CLKappaAlgFlowController *this, CSSPURoadInfo *a2)
{
  CSSPURoadInfo *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  $91562161B5B5ED3166D19FE68F9021FF *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unsigned __int8 *var5;
  __int16 v33;
  uint64_t v34;

  v3 = a2;
  v4 = *((_QWORD *)this + 66);
  v5 = -[CSSPURoadInfo timestamp](v3, "timestamp");
  v6 = *(_QWORD *)(v4 + 16);
  if (v6 == -1 || *(_QWORD *)(v4 + 8) * v6 <= v5)
  {
    if (qword_100387300 != -1)
      dispatch_once(&qword_100387300, &stru_10034D4F8);
    v7 = (id)qword_100387308;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_QWORD *)-[CSSPURoadInfo c_struct](v3, "c_struct");
      v9 = *((_QWORD *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 1);
      v10 = *((float *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 5);
      v11 = *((unsigned __int16 *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 12);
      v12 = -[CSSPURoadInfo c_struct](v3, "c_struct");
      v13 = *((_QWORD *)-[CSSPURoadInfo c_struct](v3, "c_struct") + 12);
      v23 = 134219266;
      v24 = v8;
      v25 = 2048;
      v26 = v9;
      v27 = 2048;
      v28 = v10;
      v29 = 1024;
      v30 = v11;
      v31 = 2080;
      var5 = v12->var5;
      v33 = 2048;
      v34 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%llu feedRoads [%f %f %d %s %ld]", (uint8_t *)&v23, 0x3Au);
    }

    v14 = (_QWORD *)*((_QWORD *)this + 63);
    v15 = (_QWORD *)*((_QWORD *)this + 64);
    while (v14 != v15)
    {
      if (*(_BYTE *)(*v14 + 25))
      {
        if (*((_BYTE *)this + 8))
          (*(void (**)(_QWORD, $91562161B5B5ED3166D19FE68F9021FF *))(*(_QWORD *)*v14 + 96))(*v14, -[CSSPURoadInfo c_struct](v3, "c_struct"));
      }
      v14 += 2;
    }
    if (*((_BYTE *)this + 8))
    {
      while (1)
      {
        v16 = (_QWORD *)*((_QWORD *)this + 66);
        v17 = -[CSSPURoadInfo timestamp](v3, "timestamp");
        v18 = v16[1];
        v19 = v16[2];
        if (v19 == -1)
          break;
        if (*v16 + v18 * v19 > v17)
          goto LABEL_22;
        v20 = (_QWORD *)*((_QWORD *)this + 66);
        v21 = v20[2];
        if (v21 == -1)
          v22 = 0;
        else
          v22 = *v20 + v20[1] * v21;
        if (!CLKappaAlgFlowController::closeEpoch(this, v22 - 1))
          goto LABEL_23;
      }
      v16[2] = v17 / v18;
LABEL_22:
      CSKappaEpochBuffer::feedRoads(*((id **)this + 66), v3);
    }
  }
LABEL_23:

}

void sub_10003A248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedHertzSample(CLKappaAlgFlowController *this, CSSPUHertzSample *a2)
{
  CSSPUHertzSample *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  if (v4 <= -[CSSPUHertzSample timestamp](v3, "timestamp") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSSPUHertzSample timestamp](v3, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      if (qword_100387300 != -1)
        dispatch_once(&qword_100387300, &stru_10034D4F8);
      v8 = (id)qword_100387308;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_QWORD *)-[CSSPUHertzSample c_struct](v3, "c_struct");
        v10 = *((unsigned __int16 *)-[CSSPUHertzSample c_struct](v3, "c_struct") + 4);
        v11 = *((unsigned __int8 *)-[CSSPUHertzSample c_struct](v3, "c_struct") + 10);
        v21 = 134218496;
        v22 = v9;
        v23 = 1024;
        v24 = v10;
        v25 = 1024;
        v26 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%llu feedHertzSample [%d %d]", (uint8_t *)&v21, 0x18u);
      }

      v12 = (_QWORD *)*((_QWORD *)this + 63);
      v13 = (_QWORD *)*((_QWORD *)this + 64);
      while (v12 != v13)
      {
        if (*(_BYTE *)(*v12 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, $E272AD5D86549EDF00629498E6BE4065 *))(*(_QWORD *)*v12 + 104))(*v12, -[CSSPUHertzSample c_struct](v3, "c_struct"));
        }
        v12 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = -[CSSPUHertzSample timestamp](v3, "timestamp");
          v16 = v14[1];
          v17 = v14[2];
          if (v17 == -1)
            break;
          if (*v14 + v16 * v17 > v15)
            goto LABEL_23;
          v18 = (_QWORD *)*((_QWORD *)this + 66);
          v19 = v18[2];
          if (v19 == -1)
            v20 = 0;
          else
            v20 = *v18 + v18[1] * v19;
          if (!CLKappaAlgFlowController::closeEpoch(this, v20 - 1))
            goto LABEL_24;
        }
        v14[2] = v15 / v16;
LABEL_23:
        CSKappaEpochBuffer::feedHertzSample(*((id **)this + 66), v3);
      }
    }
  }
LABEL_24:

}

void sub_10003A498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedMag(CLKappaAlgFlowController *this, CSSPUMag *a2)
{
  CSSPUMag *v3;
  unint64_t v4;
  CSSPUMag *v5;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v5 = v3;
  if (v4 <= *((_QWORD *)-[CSSPUMag c_struct](v3, "c_struct") + 2) + 30000000)
    -[CSSPUMag timestamp](v5, "timestamp");

}

void sub_10003A520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedCompanionStatus(CLKappaAlgFlowController *this, CSCompanionStatus *a2)
{
  CSCompanionStatus *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSCompanionStatus *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= *(_QWORD *)-[CSCompanionStatus c_struct](v3, "c_struct") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSCompanionStatus timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, $2889772B1FD9C78F31F69BD8F09C608A *))(*(_QWORD *)*v8 + 112))(*v8, -[CSCompanionStatus c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSCompanionStatus timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedCompanionStatus(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_10003A670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void CLKappaAlgFlowController::feedRemoteSample(CLKappaAlgFlowController *this, CSRemoteSample *a2)
{
  CSRemoteSample *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  CSRemoteSample *v17;

  v3 = a2;
  v4 = *((_QWORD *)this + 3);
  v17 = v3;
  if (v4 <= -[CSRemoteSample timestamp](v3, "timestamp") + 30000000)
  {
    v5 = *((_QWORD *)this + 66);
    v6 = -[CSRemoteSample timestamp](v17, "timestamp");
    v7 = *(_QWORD *)(v5 + 16);
    if (v7 == -1 || *(_QWORD *)(v5 + 8) * v7 <= v6)
    {
      v8 = (_QWORD *)*((_QWORD *)this + 63);
      v9 = (_QWORD *)*((_QWORD *)this + 64);
      while (v8 != v9)
      {
        if (*(_BYTE *)(*v8 + 25))
        {
          if (*((_BYTE *)this + 8))
            (*(void (**)(_QWORD, CSRemoteSample_Struct *))(*(_QWORD *)*v8 + 120))(*v8, -[CSRemoteSample c_struct](v17, "c_struct"));
        }
        v8 += 2;
      }
      if (*((_BYTE *)this + 8))
      {
        while (1)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 66);
          v11 = -[CSRemoteSample timestamp](v17, "timestamp");
          v12 = v10[1];
          v13 = v10[2];
          if (v13 == -1)
            break;
          if (*v10 + v12 * v13 > v11)
            goto LABEL_19;
          v14 = (_QWORD *)*((_QWORD *)this + 66);
          v15 = v14[2];
          if (v15 == -1)
            v16 = 0;
          else
            v16 = *v14 + v14[1] * v15;
          if (!CLKappaAlgFlowController::closeEpoch(this, v16 - 1))
            goto LABEL_20;
        }
        v10[2] = v11 / v12;
LABEL_19:
        CSKappaEpochBuffer::feedRemoteSample(*((id **)this + 66), v17);
      }
    }
  }
LABEL_20:

}

void sub_10003A7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::finalizeAlgBlocks(CLKappaAlgFlowController *this)
{
  CLKappaAlgFlowController **v1;
  CLKappaAlgFlowController **v2;

  v1 = (CLKappaAlgFlowController **)*((_QWORD *)this + 63);
  v2 = (CLKappaAlgFlowController **)*((_QWORD *)this + 64);
  while (v1 != v2)
  {
    this = *v1;
    if (*((_BYTE *)*v1 + 25))
      this = (CLKappaAlgFlowController *)(*(uint64_t (**)(CLKappaAlgFlowController *))(*(_QWORD *)this + 128))(this);
    v1 += 2;
  }
  return this;
}

void CLKappaAlgFlowController::logAlgBlockResults(CLKappaAlgFlowController *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v1 = *((_QWORD *)this + 63);
  v2 = *((_QWORD *)this + 64);
  while (v1 != v2)
  {
    if (*(_BYTE *)(*(_QWORD *)v1 + 25))
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v1 + 152))(&v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v3 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    v1 += 16;
  }
}

void sub_10003A8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_10003E268(a10);
  _Unwind_Resume(exception_object);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::resetAlgBlocks(CLKappaAlgFlowController *this)
{
  CLKappaAlgFlowController **v1;
  CLKappaAlgFlowController **v2;

  v1 = (CLKappaAlgFlowController **)*((_QWORD *)this + 63);
  v2 = (CLKappaAlgFlowController **)*((_QWORD *)this + 64);
  while (v1 != v2)
  {
    this = *v1;
    if (*((_BYTE *)*v1 + 25))
      this = (CLKappaAlgFlowController *)(*(uint64_t (**)(CLKappaAlgFlowController *))(*(_QWORD *)this + 296))(this);
    v1 += 2;
  }
  return this;
}

CLKappaAlgFlowController *CLKappaAlgFlowController::epochResetAlgBlocks(CLKappaAlgFlowController *this, uint64_t a2)
{
  CLKappaAlgFlowController **v2;
  CLKappaAlgFlowController **i;

  v2 = (CLKappaAlgFlowController **)*((_QWORD *)this + 63);
  for (i = (CLKappaAlgFlowController **)*((_QWORD *)this + 64); v2 != i; v2 += 2)
  {
    this = *v2;
    if (*((_BYTE *)*v2 + 25))
      this = (CLKappaAlgFlowController *)(*(uint64_t (**)(CLKappaAlgFlowController *, uint64_t))(*(_QWORD *)this + 168))(this, a2);
  }
  return this;
}

id CLKappaAlgFlowController::resetEpochBuffer(CLKappaAlgFlowController *this)
{
  id result;

  result = CSKappaEpochBuffer::reset(*((id **)this + 66));
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return result;
}

void CLKappaAlgFlowController::feedEpochFunctions(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  _BYTE v33[24];

  v3 = a2;
  v4 = objc_opt_class(CSSPUAccel800);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    v6 = *(_QWORD **)(a1 + 504);
    v7 = *(_QWORD **)(a1 + 512);
    while (v6 != v7)
    {
      if (*(_BYTE *)(*v6 + 25))
      {
        if (*(_BYTE *)(a1 + 8))
          (*(void (**)(_QWORD, id))(*(_QWORD *)*v6 + 176))(*v6, objc_msgSend(v5, "c_struct"));
      }
      v6 += 2;
    }
    goto LABEL_43;
  }
  v8 = objc_opt_class(CSSPUAccel);
  if ((objc_opt_isKindOfClass(v3, v8) & 1) != 0)
  {
    v5 = v3;
    v9 = *(_QWORD **)(a1 + 504);
    v10 = *(_QWORD **)(a1 + 512);
    while (v9 != v10)
    {
      if (*(_BYTE *)(*v9 + 25) && *(_BYTE *)(a1 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v9 + 192))(*v9, objc_msgSend(v5, "c_struct"));
      v9 += 2;
    }
    goto LABEL_43;
  }
  v11 = objc_opt_class(CSSPUHgAccel);
  if ((objc_opt_isKindOfClass(v3, v11) & 1) != 0)
  {
    v5 = v3;
    v12 = *(_QWORD **)(a1 + 504);
    v13 = *(_QWORD **)(a1 + 512);
    while (v12 != v13)
    {
      if (*(_BYTE *)(*v12 + 25) && *(_BYTE *)(a1 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v12 + 184))(*v12, objc_msgSend(v5, "c_struct"));
      v12 += 2;
    }
    goto LABEL_43;
  }
  v14 = objc_opt_class(CSSPUKappaTrigger);
  if ((objc_opt_isKindOfClass(v3, v14) & 1) != 0)
  {
    v5 = v3;
    v15 = objc_msgSend(v5, "c_struct");
    v16 = *(unsigned __int8 *)(a1 + 544);
    if (v16 == 2)
    {
      if ((v15[46] & 0xD) == 0)
      {
LABEL_43:

        goto LABEL_44;
      }
    }
    else if (v16 != 1 || (v15[1] & 0xF) == 0)
    {
      goto LABEL_43;
    }
    v21 = *(_QWORD **)(a1 + 504);
    v22 = *(_QWORD **)(a1 + 512);
    while (v21 != v22)
    {
      if (*(_BYTE *)(*v21 + 25) && *(_BYTE *)(a1 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v21 + 232))(*v21, objc_msgSend(v5, "c_struct"));
      v21 += 2;
    }
    goto LABEL_43;
  }
  v17 = objc_opt_class(CSSPUDM);
  if ((objc_opt_isKindOfClass(v3, v17) & 1) != 0)
  {
    v5 = v3;
    v18 = *(_QWORD **)(a1 + 504);
    v19 = *(_QWORD **)(a1 + 512);
    while (v18 != v19)
    {
      if (*(_BYTE *)(*v18 + 25) && *(_BYTE *)(a1 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v18 + 208))(*v18, objc_msgSend(v5, "c_struct"));
      v18 += 2;
    }
    goto LABEL_43;
  }
  v20 = objc_opt_class(CSSPUGps);
  if ((objc_opt_isKindOfClass(v3, v20) & 1) != 0)
  {
    *(_QWORD *)v33 = v3;
    sub_10003AFC8(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

  }
  else
  {
    v23 = objc_opt_class(CSSPUSpl);
    if ((objc_opt_isKindOfClass(v3, v23) & 1) != 0)
    {
      *(_QWORD *)v33 = v3;
      sub_10003B04C(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

    }
    else
    {
      v24 = objc_opt_class(CSSPUPressure);
      if ((objc_opt_isKindOfClass(v3, v24) & 1) != 0)
      {
        *(_QWORD *)v33 = v3;
        sub_10003B0D0(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

      }
      else
      {
        v25 = objc_opt_class(CSSPUSteps);
        if ((objc_opt_isKindOfClass(v3, v25) & 1) != 0)
        {
          *(_QWORD *)v33 = v3;
          sub_10003B154(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

        }
        else
        {
          v26 = objc_opt_class(CSSPURoadInfo);
          if ((objc_opt_isKindOfClass(v3, v26) & 1) != 0)
          {
            *(_QWORD *)v33 = v3;
            sub_10003B1D8(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

          }
          else
          {
            v27 = objc_opt_class(CSSPUTrustedAudioResult);
            if ((objc_opt_isKindOfClass(v3, v27) & 1) != 0)
            {
              *(_QWORD *)v33 = v3;
              sub_10003B25C(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

            }
            else
            {
              v28 = objc_opt_class(CSSPUHertzSample);
              if ((objc_opt_isKindOfClass(v3, v28) & 1) != 0)
              {
                *(_QWORD *)v33 = v3;
                sub_10003B2E0(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

              }
              else
              {
                v29 = objc_opt_class(CSCompanionStatus);
                if ((objc_opt_isKindOfClass(v3, v29) & 1) != 0)
                {
                  *(_QWORD *)v33 = v3;
                  sub_10003B364(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

                }
                else
                {
                  v30 = objc_opt_class(CSRemoteSample);
                  if ((objc_opt_isKindOfClass(v3, v30) & 1) != 0)
                  {
                    *(_QWORD *)v33 = v3;
                    sub_10003B3E8(*(_QWORD **)(a1 + 504), *(_QWORD **)(a1 + 512), a1, (id *)v33);

                  }
                  else
                  {
                    v31 = sub_10003B46C();
                    v32 = objc_claimAutoreleasedReturnValue(v31);
                    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v33 = 138412290;
                      *(_QWORD *)&v33[4] = objc_opt_class(v3);
                      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "problem! unknown / missing epochFeed for %@", v33, 0xCu);
                    }

                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_44:

}

void sub_10003AEFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10003AFC8(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 240))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10003B04C(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 216))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10003B0D0(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 200))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10003B154(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 248))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10003B1D8(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 256))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10003B25C(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 264))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10003B2E0(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 272))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10003B364(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 280))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10003B3E8(_QWORD *a1, _QWORD *a2, uint64_t a3, id *a4)
{
  _QWORD *v7;

  if (a1 != a2)
  {
    v7 = a1;
    do
    {
      if (*(_BYTE *)(*v7 + 25) && *(_BYTE *)(a3 + 8))
        (*(void (**)(_QWORD, id))(*(_QWORD *)*v7 + 288))(*v7, objc_msgSend(*a4, "c_struct"));
      v7 += 2;
    }
    while (v7 != a2);
  }
  return a3;
}

id sub_10003B46C()
{
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034D518);
  return (id)qword_100387318;
}

void *sub_10003B4AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t CLKappaAlgFlowController::isActive(CLKappaAlgFlowController *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t result;
  BOOL v9;

  v3 = *((_QWORD *)this + 63);
  v4 = *((_QWORD *)this + 64);
  if (v3 == v4)
    return 0;
  v7 = v3 + 16;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 - 16) + 136))(*(_QWORD *)(v7 - 16), a2, a3);
    if ((result & 1) != 0)
      break;
    v9 = v7 == v4;
    v7 += 16;
  }
  while (!v9);
  return result;
}

void CLKappaAlgFlowController::stop(CLKappaAlgFlowController *this, uint64_t a2)
{
  NSObject *v4;
  uint8_t v5[16];

  if (qword_100387300 != -1)
    dispatch_once(&qword_100387300, &stru_10034D4F8);
  v4 = qword_100387308;
  if (os_log_type_enabled((os_log_t)qword_100387308, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "stop", v5, 2u);
  }
  if (*((_BYTE *)this + 8))
    objc_msgSend(*((id *)this + 69), "stop:", a2);
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 3) = 0;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgBaroConfig(uint64_t a1, __int128 *a2)
{
  return sub_10000BAF4(*(_QWORD *)(a1 + 48), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgBaroConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgGPSConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaFeaturesAlgGPS::setConfig(*(_QWORD *)(a1 + 64), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgGPSConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 88) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgGravityAutoCorrelationConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaFeaturesAlgGravityAutoCorrelation::setConfig(*(_QWORD *)(a1 + 80), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgGravityAutoCorrelationConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 10) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgLackOfMotionConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaFeaturesAlgLackOfMotion::setConfig(*(_QWORD *)(a1 + 96), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgLackOfMotionConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 12) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgLocalAudioConfig(uint64_t a1, __int128 *a2)
{
  return CLKappaFeaturesAlgLocalAudio::setConfig(*(_QWORD *)(a1 + 112), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgLocalAudioConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 14) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgPulseConfig(uint64_t a1, float *a2)
{
  return sub_10001E4D0(*(_QWORD *)(a1 + 128), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgPulseConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 16) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgRemoteAudioConfig(uint64_t a1, uint64_t *a2)
{
  return CLKappaFeaturesAlgRemoteAudio::setConfig(*(_QWORD *)(a1 + 144), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgRemoteAudioConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 18) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::setKappaFeaturesAlgShortAudioConfig(uint64_t a1, _BYTE *a2)
{
  return CLKappaFeaturesAlgShortAudio::setConfig(*(_QWORD *)(a1 + 160), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgShortAudioConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 20) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgSpinConfig(uint64_t a1, _QWORD *a2)
{
  return CLKappaFeaturesAlgSpin::setConfig(*(_QWORD *)(a1 + 176), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgSpinConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 22) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::setKappaFeaturesAlgStepsConfig(uint64_t a1, _BYTE *a2)
{
  return CLKappaFeaturesAlgSteps::setConfig(*(_QWORD *)(a1 + 192), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgStepsConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 24) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgZgConfig(uint64_t a1, int *a2)
{
  return sub_1000087C8(*(_QWORD *)(a1 + 208), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgZgConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 26) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgDataIntegrityConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 28) + 32) + 336;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgTriggerClustersConfig(uint64_t a1, uint64_t *a2)
{
  return CLKappaFeaturesAlgTriggerClusters::setConfig(*(_QWORD *)(a1 + 240), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgTriggerClustersConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 30) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaFeaturesAlgPeakDetectorMAPConfig(uint64_t a1, __int128 *a2)
{
  return CLKappaFeaturesAlgPeakDetectorMAP::setConfig(*(_QWORD *)(a1 + 256), a2);
}

uint64_t CLKappaAlgFlowController::getKappaFeaturesAlgPeakDetectorMAPConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 32) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::setSafetyFeaturesAlgJointDetectionConfig(uint64_t a1)
{
  return CLSafetyFeaturesAlgJointDetection::setConfig(*(_QWORD *)(a1 + 272));
}

uint64_t CLKappaAlgFlowController::getSafetyFeaturesAlgJointDetectionConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 34) + 32) + 16;
}

uint64_t CLKappaAlgFlowController::setKappaEstimatesAlgAirbagConfig(uint64_t a1, _BYTE *a2)
{
  return CLKappaEstimatesAlgAirbag::setConfig(*(_QWORD *)(a1 + 288), a2);
}

uint64_t CLKappaAlgFlowController::getKappaEstimatesAlgAirbagConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 36) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaEstimatesAlgCrashConfig(uint64_t a1, _OWORD *a2)
{
  return CLKappaEstimatesAlgCrash::setConfig(*(_QWORD *)(a1 + 304), a2);
}

uint64_t CLKappaAlgFlowController::getKappaEstimatesAlgCrashConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 38) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaEstimatesAlgRolloverCrashConfig(uint64_t a1, __int128 *a2)
{
  return CLKappaEstimatesAlgRolloverCrash::setConfig(*(_QWORD *)(a1 + 320), a2);
}

uint64_t CLKappaAlgFlowController::getKappaEstimatesAlgRolloverCrashConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 40) + 32) + 16;
}

double CLKappaAlgFlowController::setKappaEstimatesAlgHighSpeedCrashConfig(uint64_t a1, uint64_t *a2)
{
  return CLKappaEstimatesAlgHighSpeedCrash::setConfig(*(_QWORD *)(a1 + 336), a2);
}

uint64_t CLKappaAlgFlowController::getKappaEstimatesAlgHighSpeedCrashConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 42) + 32) + 16;
}

double CLKappaAlgFlowController::setMartyEstimatesAlgCoupledCrashConfig(uint64_t a1, __int128 *a2)
{
  return CLMartyEstimatesAlgCoupledCrash::setConfig(*(_QWORD *)(a1 + 352), a2);
}

uint64_t CLKappaAlgFlowController::getMartyEstimatesAlgCoupledCrashConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 44) + 32) + 16;
}

double CLKappaAlgFlowController::setMartyEstimatesAlgUncoupledCrashConfig(uint64_t a1, __int128 *a2)
{
  return CLMartyEstimatesAlgUncoupledCrash::setConfig(*(_QWORD *)(a1 + 368), a2);
}

uint64_t CLKappaAlgFlowController::getMartyEstimatesAlgUncoupledCrashConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 46) + 32) + 16;
}

double CLKappaAlgFlowController::setMartyEstimatesAlgHighSpeedCrashConfig(uint64_t a1, uint64_t *a2)
{
  return CLMartyEstimatesAlgHighSpeedCrash::setConfig(*(_QWORD *)(a1 + 384), a2);
}

uint64_t CLKappaAlgFlowController::getMartyEstimatesAlgHighSpeedCrashConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 48) + 32) + 16;
}

void CLKappaAlgFlowController::setKappaInferencesAlgSevereCrashConfig(uint64_t a1, uint64_t a2)
{
  CLKappaInferencesAlgSevereCrash::setConfig(*(_QWORD *)(a1 + 400), a2);
}

uint64_t CLKappaAlgFlowController::getKappaInferencesAlgSevereCrashConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 50) + 8904) + 16;
}

void CLKappaAlgFlowController::setMartyInferencesAlgSevereCrashConfig(uint64_t a1, __int128 *a2)
{
  CLMartyInferencesAlgSevereCrash::setConfig(*(_QWORD *)(a1 + 416), a2);
}

uint64_t CLKappaAlgFlowController::getMartyInferencesAlgSevereCrashConfig(CLKappaAlgFlowController *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 52) + 472) + 16;
}

CLKappaAlgFlowController *CLKappaAlgFlowController::disableAllAlgBlocks(CLKappaAlgFlowController *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = (uint64_t *)*((_QWORD *)this + 63);
  v2 = (uint64_t *)*((_QWORD *)this + 64);
  while (v1 != v2)
  {
    v3 = *v1;
    v1 += 2;
    *(_BYTE *)(v3 + 25) = 0;
  }
  return this;
}

void CLKappaAlgFlowController::start(CLKappaAlgFlowController *this, uint64_t a2)
{
  NSObject *v3;
  uint8_t v4[16];

  if (!*((_BYTE *)this + 8))
  {
    *((_DWORD *)this + 3) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = a2;
  }
  if (qword_100387300 != -1)
    dispatch_once(&qword_100387300, &stru_10034D4F8);
  v3 = qword_100387308;
  if (os_log_type_enabled((os_log_t)qword_100387308, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "trigger", v4, 2u);
  }
  *((_BYTE *)this + 8) = 1;
}

void CLKappaAlgFlowController::createRemoteSample(CLKappaAlgFlowController *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[2];

  if (*((_BYTE *)this + 8) && (v4 = (_BYTE *)*((_QWORD *)this + 34), v4[25]))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 152))(&v13);
    sub_10003BA48((uint64_t)&v13, v15);
    v5 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *(_BYTE *)(a2 + 3) = 0;
    *(_WORD *)(a2 + 1) = 0;
    v8 = *((_DWORD *)this + 3);
    *(_BYTE *)a2 = *((_BYTE *)this + 544);
    v9 = (std::__shared_weak_count *)v15[1];
    v10 = *(_QWORD *)(v15[0] + 32);
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 20) = 0;
    *(_QWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 28) = 0;
    *(_QWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = 1;
    if (v9)
    {
      v11 = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
}

void *sub_10003BA48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgBaro(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 6) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgBaroEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 6) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgGPS(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 8) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgGPSEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 8) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgGravityAutoCorrelation(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 10) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgGravityAutoCorrelationEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 10) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgLackOfMotion(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 12) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgLackOfMotionEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 12) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgLocalAudio(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 14) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgLocalAudioEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 14) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgPulse(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 16) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgPulseEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 16) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgRemoteAudio(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 18) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgRemoteAudioEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 18) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgShortAudio(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 20) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgShortAudioEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 20) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgSpin(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 22) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgSpinEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 22) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgSteps(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 24) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgStepsEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 24) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgZg(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 26) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgZgEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 26) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgDataIntegrity(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 28) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgDataIntegrityEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 28) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgTriggerClusters(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 30) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgTriggerClustersEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 30) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaFeaturesAlgPeakDetectorMAP(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 32) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaFeaturesAlgPeakDetectorMAPEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 32) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableSafetyFeaturesAlgJointDetection(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 34) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isSafetyFeaturesAlgJointDetectionEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 34) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaEstimatesAlgAirbag(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 36) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaEstimatesAlgAirbagEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 36) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaEstimatesAlgCrash(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 38) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaEstimatesAlgCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 38) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaEstimatesAlgRolloverCrash(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 40) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaEstimatesAlgRolloverCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 40) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaEstimatesAlgHighSpeedCrash(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 42) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaEstimatesAlgHighSpeedCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 42) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableMartyEstimatesAlgCoupledCrash(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 44) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isMartyEstimatesAlgCoupledCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 44) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableMartyEstimatesAlgUncoupledCrash(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 46) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isMartyEstimatesAlgUncoupledCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 46) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableMartyEstimatesAlgHighSpeedCrash(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 48) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isMartyEstimatesAlgHighSpeedCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 48) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableKappaInferencesAlgSevereCrash(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 50) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isKappaInferencesAlgSevereCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 50) + 25);
}

CLKappaAlgFlowController *CLKappaAlgFlowController::enableMartyInferencesAlgSevereCrash(CLKappaAlgFlowController *this, char a2)
{
  *(_BYTE *)(*((_QWORD *)this + 52) + 25) = a2;
  return this;
}

uint64_t CLKappaAlgFlowController::isMartyInferencesAlgSevereCrashEnabled(CLKappaAlgFlowController *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 52) + 25);
}

uint64_t CLKappaFeaturesAlgBaroResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 344))(a2, a1 + 48);
}

uint64_t CLKappaFeaturesAlgGPSResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 352))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgGravityAutoCorrelationResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 360))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgLackOfMotionResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 336))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgLocalAudioResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(a2, a1 + 72);
}

uint64_t CLKappaFeaturesAlgPulseResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 320))(a2, a1 + 80);
}

uint64_t CLKappaFeaturesAlgRemoteAudioResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 368))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgShortAudioResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 424))(a2, a1 + 20);
}

uint64_t CLKappaFeaturesAlgSpinResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 376))(a2, a1 + 24);
}

uint64_t CLKappaFeaturesAlgStepsResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 384))(a2, a1 + 24);
}

uint64_t CLKappaFeaturesAlgZgResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 392))(a2, a1 + 24);
}

uint64_t CLKappaFeaturesAlgDataIntegrityResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 400))(a2, a1 + 16);
}

uint64_t CLKappaFeaturesAlgTriggerClustersResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 408))(a2, a1 + 32);
}

uint64_t CLKappaFeaturesAlgPeakDetectorMAPResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 416))(a2, a1 + 80);
}

uint64_t CLSafetyFeaturesAlgJointDetectionResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 432))(a2, a1 + 24);
}

uint64_t CLKappaEstimatesAlgAirbagResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 440))(a2, a1 + 24);
}

uint64_t CLKappaEstimatesAlgCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 448))(a2, a1 + 176);
}

uint64_t CLKappaEstimatesAlgRolloverCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 456))(a2, a1 + 272);
}

uint64_t CLKappaEstimatesAlgHighSpeedCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 464))(a2, a1 + 32);
}

uint64_t CLMartyEstimatesAlgCoupledCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 472))(a2, a1 + 48);
}

uint64_t CLMartyEstimatesAlgUncoupledCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 480))(a2, a1 + 48);
}

uint64_t CLMartyEstimatesAlgHighSpeedCrashResult::visit(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 488))(a2, a1 + 32);
}

void sub_10003BF10(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

uint64_t sub_10003BF34(uint64_t result)
{
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_10003BF44(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003BF6C(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003BF94(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003BFBC(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003BFE4(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C008(id *a1)
{

  CLKappaAlgBlockResult::~CLKappaAlgBlockResult((CLKappaAlgBlockResult *)a1);
}

void sub_10003C030(id *a1)
{

  CLKappaAlgBlockResult::~CLKappaAlgBlockResult((CLKappaAlgBlockResult *)a1);
  operator delete();
}

void sub_10003C070(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C094(CLKappaAlgBlockResult *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_10034CF58;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);
}

void sub_10003C110(CLKappaAlgBlockResult *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_10034CF58;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);
  operator delete();
}

void sub_10003C1A4(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C1CC(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C1F4(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C218(CLKappaAlgBlockResult *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_10034D0D8;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);
}

void sub_10003C264(CLKappaAlgBlockResult *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_10034D0D8;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(this);
  operator delete();
}

void sub_10003C2C8(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C2F0(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C318(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C340(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C368(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C390(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C3B8(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C3E0(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C408(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C430(CLKappaAlgBlockResult *a1)
{
  CLKappaAlgBlockResult::~CLKappaAlgBlockResult(a1);
  operator delete();
}

void sub_10003C458(uint64_t a1)
{
  sub_10003E110(a1);
  operator delete();
}

uint64_t sub_10003C47C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_10003C62C((void **)a1);
    if (a4 >> 60)
      sub_10000D5F8();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)sub_10003C688((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)sub_10000A6A0(v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      sub_10000A6A0(v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = sub_10000A718(result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void sub_10003C62C(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_10000A718(v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10003C688(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_10000D5F8();
  result = (char *)sub_10003C6C8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_10003C6C8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_10000A128();
  return operator new(16 * a2);
}

uint64_t sub_10003C6FC(char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_10000D5F8();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)sub_10003C6C8(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = sub_10003C83C((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t sub_10003C83C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_10000A718(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10003C888(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Flow");
  v2 = (void *)qword_100387308;
  qword_100387308 = (uint64_t)v1;

}

void sub_10003C8B8(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_10000A718(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10003C928(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

_QWORD *sub_10003C958@<X0>(int *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xA0uLL);
  result = sub_10003C9B8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10003C9A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003C9B8(_QWORD *a1, int *a2, int *a3)
{
  a1[2] = 0;
  *a1 = off_10034D548;
  a1[1] = 0;
  CSKappaEpochBuffer::CSKappaEpochBuffer((CSKappaEpochBuffer *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_10003C9F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CA0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CA20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id *sub_10003CA54(uint64_t a1)
{
  return sub_10003CA60((id *)(a1 + 24));
}

id *sub_10003CA60(id *a1)
{

  return a1;
}

_QWORD *sub_10003CAF0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x200uLL);
  result = sub_10003CB38(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CB24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003CB38(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D598;
  a1[1] = 0;
  sub_10000B83C((CLKappaAlgBlock *)(a1 + 3));
  return a1;
}

void sub_10003CB70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CB84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CB98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003CBCC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003CBDC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xA8uLL);
  result = sub_10003CC24(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CC10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003CC24(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D5E8;
  a1[1] = 0;
  CLKappaFeaturesAlgGPS::CLKappaFeaturesAlgGPS((CLKappaFeaturesAlgGPS *)(a1 + 3));
  return a1;
}

void sub_10003CC5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CC70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CC84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003CCB8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003CCC8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = sub_10003CD10(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CCFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003CD10(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D638;
  a1[1] = 0;
  CLKappaFeaturesAlgGravityAutoCorrelation::CLKappaFeaturesAlgGravityAutoCorrelation((CLKappaFeaturesAlgGravityAutoCorrelation *)(a1 + 3));
  return a1;
}

void sub_10003CD48(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CD5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CD70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003CDA4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003CDB4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xE0uLL);
  result = sub_10003CDFC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CDE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003CDFC(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D688;
  a1[1] = 0;
  CLKappaFeaturesAlgLackOfMotion::CLKappaFeaturesAlgLackOfMotion((CLKappaFeaturesAlgLackOfMotion *)(a1 + 3));
  return a1;
}

void sub_10003CE34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CE48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CE5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003CE90(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003CEA0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x198uLL);
  result = sub_10003CEE8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CED4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003CEE8(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D6D8;
  a1[1] = 0;
  CLKappaFeaturesAlgLocalAudio::CLKappaFeaturesAlgLocalAudio((CLKappaFeaturesAlgLocalAudio *)(a1 + 3));
  return a1;
}

void sub_10003CF20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003CF34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003CF48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003CF7C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003CF8C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x320uLL);
  result = sub_10003CFD4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003CFC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003CFD4(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D728;
  a1[1] = 0;
  sub_10001DE48((CLKappaAlgBlock *)(a1 + 3));
  return a1;
}

void sub_10003D00C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D020(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D034(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D068(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D078@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x90uLL);
  result = sub_10003D0C0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D0AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D0C0(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D778;
  a1[1] = 0;
  CLKappaFeaturesAlgRemoteAudio::CLKappaFeaturesAlgRemoteAudio((CLKappaFeaturesAlgRemoteAudio *)(a1 + 3));
  return a1;
}

void sub_10003D0F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D10C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D120(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D154(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D164@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = sub_10003D1AC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D198(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D1AC(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D7C8;
  a1[1] = 0;
  CLKappaFeaturesAlgShortAudio::CLKappaFeaturesAlgShortAudio((CLKappaFeaturesAlgShortAudio *)(a1 + 3));
  return a1;
}

void sub_10003D1E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D1F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D7C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D20C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D7C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D240(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D250@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x1228uLL);
  result = sub_10003D298(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D284(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D298(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D818;
  a1[1] = 0;
  CLKappaFeaturesAlgSpin::CLKappaFeaturesAlgSpin((CLKappaFeaturesAlgSpin *)(a1 + 3));
  return a1;
}

void sub_10003D2D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D2E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D2F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D32C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D33C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = sub_10003D384(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D370(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D384(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D868;
  a1[1] = 0;
  CLKappaFeaturesAlgSteps::CLKappaFeaturesAlgSteps((CLKappaFeaturesAlgSteps *)(a1 + 3));
  return a1;
}

void sub_10003D3BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D3D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D3E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D418(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D428@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xAFC8uLL);
  result = sub_10003D470(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D45C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D470(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D8B8;
  a1[1] = 0;
  sub_100008384((uint64_t)(a1 + 3));
  return a1;
}

void sub_10003D4A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D4BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D8B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D4D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D8B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D504(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D514@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = sub_10003D55C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D548(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D55C(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D908;
  a1[1] = 0;
  CLKappaFeaturesAlgDataIntegrity::CLKappaFeaturesAlgDataIntegrity((CLKappaFeaturesAlgDataIntegrity *)(a1 + 3));
  return a1;
}

void sub_10003D594(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D5A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D5BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D5F0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D600@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xC8uLL);
  result = sub_10003D648(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D634(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D648(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D958;
  a1[1] = 0;
  CLKappaFeaturesAlgTriggerClusters::CLKappaFeaturesAlgTriggerClusters((CLKappaFeaturesAlgTriggerClusters *)(a1 + 3));
  return a1;
}

void sub_10003D680(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D694(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D6A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D6DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D6EC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xB8uLL);
  result = sub_10003D734(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D720(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D734(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D9A8;
  a1[1] = 0;
  CLKappaFeaturesAlgPeakDetectorMAP::CLKappaFeaturesAlgPeakDetectorMAP((CLKappaFeaturesAlgPeakDetectorMAP *)(a1 + 3));
  return a1;
}

void sub_10003D76C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D780(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D9A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D794(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D9A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D7C8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D7D8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = sub_10003D820(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D80C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D820(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034D9F8;
  a1[1] = 0;
  CLSafetyFeaturesAlgJointDetection::CLSafetyFeaturesAlgJointDetection((CLSafetyFeaturesAlgJointDetection *)(a1 + 3));
  return a1;
}

void sub_10003D858(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D86C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034D9F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D880(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034D9F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D8B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003D8C4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = sub_10003D90C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003D8F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003D90C(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034DA48;
  a1[1] = 0;
  CLKappaEstimatesAlgAirbag::CLKappaEstimatesAlgAirbag((CLKappaEstimatesAlgAirbag *)(a1 + 3));
  return a1;
}

void sub_10003D944(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003D958(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DA48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003D96C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DA48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003D9A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10003D9B0@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0xA8uLL);
  result = sub_10003D9F8((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_10003D9E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10003D9F8(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10034DA98;
  *(_QWORD *)(a1 + 8) = 0;
  CLKappaEstimatesAlgCrash::CLKappaEstimatesAlgCrash((CLKappaEstimatesAlgCrash *)(a1 + 24));
  return a1;
}

void sub_10003DA30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003DA44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003DA58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003DA8C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003DA9C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xA8uLL);
  result = sub_10003DAE4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003DAD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003DAE4(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034DAE8;
  a1[1] = 0;
  CLKappaEstimatesAlgRolloverCrash::CLKappaEstimatesAlgRolloverCrash((CLKappaEstimatesAlgRolloverCrash *)(a1 + 3));
  return a1;
}

void sub_10003DB1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003DB30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DAE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003DB44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DAE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003DB78(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003DB88@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x88uLL);
  result = sub_10003DBD0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003DBBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003DBD0(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034DB38;
  a1[1] = 0;
  CLKappaEstimatesAlgHighSpeedCrash::CLKappaEstimatesAlgHighSpeedCrash((CLKappaEstimatesAlgHighSpeedCrash *)(a1 + 3));
  return a1;
}

void sub_10003DC08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003DC1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DB38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003DC30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DB38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003DC64(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003DC74@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x98uLL);
  result = sub_10003DCBC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003DCA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003DCBC(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034DB88;
  a1[1] = 0;
  CLMartyEstimatesAlgCoupledCrash::CLMartyEstimatesAlgCoupledCrash((CLMartyEstimatesAlgCoupledCrash *)(a1 + 3));
  return a1;
}

void sub_10003DCF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003DD08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003DD1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DB88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003DD50(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003DD60@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x98uLL);
  result = sub_10003DDA8(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003DD94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003DDA8(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034DBD8;
  a1[1] = 0;
  CLMartyEstimatesAlgUncoupledCrash::CLMartyEstimatesAlgUncoupledCrash((CLMartyEstimatesAlgUncoupledCrash *)(a1 + 3));
  return a1;
}

void sub_10003DDE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003DDF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003DE08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003DE3C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003DE4C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x78uLL);
  result = sub_10003DE94(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003DE80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003DE94(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034DC28;
  a1[1] = 0;
  CLMartyEstimatesAlgHighSpeedCrash::CLMartyEstimatesAlgHighSpeedCrash((CLMartyEstimatesAlgHighSpeedCrash *)(a1 + 3));
  return a1;
}

void sub_10003DECC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003DEE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003DEF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003DF28(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003DF38@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x2340uLL);
  result = sub_10003DF80(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003DF6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003DF80(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034DC78;
  a1[1] = 0;
  CLKappaInferencesAlgSevereCrash::CLKappaInferencesAlgSevereCrash((CLKappaInferencesAlgSevereCrash *)(a1 + 3));
  return a1;
}

void sub_10003DFB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003DFCC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003DFE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003E014(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_10003E024@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x238uLL);
  result = sub_10003E06C(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10003E058(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003E06C(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = off_10034DCC8;
  a1[1] = 0;
  CLMartyInferencesAlgSevereCrash::CLMartyInferencesAlgSevereCrash((CLMartyInferencesAlgSevereCrash *)(a1 + 3));
  return a1;
}

void sub_10003E0A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10003E0B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034DCC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10003E0CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034DCC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10003E100(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10003E110(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_10034CC38;

  sub_10000A718(a1 + 528);
  v3 = (void **)(a1 + 504);
  sub_10003C8B8(&v3);
  v3 = (void **)(a1 + 480);
  sub_10003C8B8(&v3);
  v3 = (void **)(a1 + 456);
  sub_10003C8B8(&v3);
  v3 = (void **)(a1 + 432);
  sub_10003C8B8(&v3);
  sub_10000A718(a1 + 416);
  sub_10000A718(a1 + 400);
  sub_10000A718(a1 + 384);
  sub_10000A718(a1 + 368);
  sub_10000A718(a1 + 352);
  sub_10000A718(a1 + 336);
  sub_10000A718(a1 + 320);
  sub_10000A718(a1 + 304);
  sub_10000A718(a1 + 288);
  sub_10000A718(a1 + 272);
  sub_10000A718(a1 + 256);
  sub_10000A718(a1 + 240);
  sub_10000A718(a1 + 224);
  sub_10000A718(a1 + 208);
  sub_10000A718(a1 + 192);
  sub_10000A718(a1 + 176);
  sub_10000A718(a1 + 160);
  sub_10000A718(a1 + 144);
  sub_10000A718(a1 + 128);
  sub_10000A718(a1 + 112);
  sub_10000A718(a1 + 96);
  sub_10000A718(a1 + 80);
  sub_10000A718(a1 + 64);
  sub_10000A718(a1 + 48);
  return a1;
}

uint64_t sub_10003E258()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_10003E268(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    sub_10003E258();
    std::__shared_weak_count::__release_weak(a1);
  }
}

void CSKappaAOIGeoServices::CSKappaAOIGeoServices(CSKappaAOIGeoServices *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
}

void CSKappaAOIGeoServices::addAOI(char **a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555)
      sub_10000D5F8();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_100020CA0(v4, v13);
    else
      v14 = 0;
    v15 = &v14[12 * v10];
    v16 = &v14[12 * v13];
    v17 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v15 = v17;
    v9 = v15 + 12;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *((_DWORD *)v18 + 2);
        *(_QWORD *)(v15 - 12) = v20;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v7 = v8;
    v9 = (char *)(v7 + 12);
  }
  a1[1] = v9;
}

BOOL CSKappaAOIGeoServices::isInAOI(float **this, float a2, float a3)
{
  float *v3;
  float *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  _BOOL8 result;

  v3 = *this;
  v4 = this[1];
  if (*this == v4)
    return 0;
  v5 = a2;
  v6 = a3;
  do
  {
    v7 = v3[2];
    v8 = fabs(GEOCalculateDistanceHighPrecision(v5, v6, *v3, v3[1]));
    result = v8 < v7;
    v3 += 3;
  }
  while (v8 >= v7 && v3 != v4);
  return result;
}

_QWORD *CSKappaAOIBoost::CSKappaAOIBoostImpl::CSKappaAOIBoostImpl(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x10000000000000;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x10000000000000;
  return this;
}

void CSKappaAOIBoost::CSKappaAOIBoostImpl::addAOI(uint64_t a1, float *a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12[3];
  _QWORD v13[15];

  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  v9 = a1 + 16;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v10 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v8 = operator new(0x2B8uLL);
    v10 = 0;
    v8[1] = 0;
    *(_DWORD *)v8 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)a1 = 0;
  }
  v12[0] = v5;
  v12[1] = v6;
  v12[2] = v7;
  v13[0] = v12;
  v13[5] = a1;
  v13[6] = a1;
  v13[7] = 0;
  v13[8] = v10;
  v13[9] = v9;
  v13[10] = a1 + 8;
  memset(&v13[11], 0, 24);
  v13[14] = a1;
  *(double *)&v13[1] = v5;
  *(double *)&v13[2] = v6;
  *(double *)&v13[3] = v5;
  *(double *)&v13[4] = v6;
  sub_10003F36C(v8, (uint64_t)v13, a3);
  ++*(_QWORD *)a1;
  v11 = a2[2];
  if (*(double *)(a1 + 24) >= v11)
    v11 = *(double *)(a1 + 24);
  *(double *)(a1 + 24) = v11;
}

void CSKappaAOIBoost::CSKappaAOIBoostImpl::isInAOI(CSKappaAOIBoost::CSKappaAOIBoostImpl *this, float a2, float a3)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  *(double *)&v6 = a3;
  *((double *)&v6 + 1) = a2;
  v3 = *(_QWORD *)this;
  v4 = v6;
  v5 = v3;
  sub_10003E6A8((uint64_t)this, (uint64_t)&v4);
}

void sub_10003E664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void sub_10003E68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  JUMPOUT(0x10003E670);
}

void sub_10003E6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_100043D94((uint64_t)&v2, a1, a2);
  }
  else
  {
    v2 = 0;
    v3 = *(_OWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = 0;
    v6 = 0;
    v7 = 0;
    __p = 0;
    v9 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
  }
  sub_100048894();
}

void sub_10003E738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043D54((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E74C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(void);

  v3 = *a2;
  if (*a1)
  {
    v4 = sub_100048C90(a1);
    v5 = v4;
    if (v3)
    {
      v6 = sub_100048CD0(a2);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v6);
    }
    v8 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 24);
    return v8();
  }
  if (v3)
  {
    v8 = *(uint64_t (**)(void))(*(_QWORD *)sub_100048C90(a2) + 24);
    return v8();
  }
  return 1;
}

void CSKappaAOIBoost::CSKappaAOIBoost(CSKappaAOIBoost *this)
{
  operator new();
}

{
  operator new();
}

void CSKappaAOIBoost::~CSKappaAOIBoost(CSKappaAOIBoost *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v1)
    sub_100048D10((uint64_t)this, v1);
}

{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v1)
    sub_100048D10((uint64_t)this, v1);
}

void CSKappaAOIBoost::addAOI(uint64_t *a1, float *a2, uint64_t a3)
{
  CSKappaAOIBoost::CSKappaAOIBoostImpl::addAOI(*a1, a2, a3);
}

void CSKappaAOIBoost::isInAOI(CSKappaAOIBoost::CSKappaAOIBoostImpl **this, float a2, float a3)
{
  CSKappaAOIBoost::CSKappaAOIBoostImpl::isInAOI(*this, a2, a3);
}

uint64_t *sub_10003E8F0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t sub_10003E930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_10003E9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

double sub_10003EA50(double *a1, double *a2, double *a3)
{
  double v4;
  unsigned __int8 v5;
  double *v6;
  double v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned __int8 v17;
  double v18;
  double v19;
  char v20;
  int v22;
  int v23;
  int v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double *v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43[5];
  double v44;
  double v45;
  double v46;
  double v47;

  v4 = *a2;
  v5 = atomic_load((unsigned __int8 *)&qword_100388830);
  v6 = (double *)&unk_100388000;
  if ((v5 & 1) == 0)
  {
    v31 = a2;
    v35 = a3;
    v39 = *a2;
    v22 = __cxa_guard_acquire(&qword_100388830);
    v4 = v39;
    v6 = (double *)&unk_100388000;
    a2 = v31;
    a3 = v35;
    if (v22)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v4 = v39;
      v6 = (double *)&unk_100388000;
      a2 = v31;
      a3 = v35;
    }
  }
  v7 = v6[261];
  v8 = a2[1];
  v9 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v9 & 1) == 0)
  {
    v36 = a3;
    v40 = v4;
    v28 = v6[261];
    v32 = a2[1];
    v23 = __cxa_guard_acquire(&qword_100388830);
    v7 = v28;
    v8 = v32;
    v4 = v40;
    v6 = (double *)&unk_100388000;
    a3 = v36;
    if (v23)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v7 = v28;
      v8 = v32;
      v4 = v40;
      v6 = (double *)&unk_100388000;
      a3 = v36;
    }
  }
  v10 = v6[261];
  v11 = *a3;
  v12 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v12 & 1) == 0)
  {
    v37 = a3;
    v41 = v4;
    v29 = v7;
    v33 = v8;
    v26 = *a3;
    v27 = v6[261];
    v24 = __cxa_guard_acquire(&qword_100388830);
    v11 = v26;
    v10 = v27;
    v7 = v29;
    v8 = v33;
    v4 = v41;
    v6 = (double *)&unk_100388000;
    a3 = v37;
    if (v24)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v11 = v26;
      v10 = v27;
      v7 = v29;
      v8 = v33;
      v4 = v41;
      v6 = (double *)&unk_100388000;
      a3 = v37;
    }
  }
  v13 = v4 * v7;
  v14 = v8 * v10;
  v15 = v11 * v6[261];
  v16 = a3[1];
  v17 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v17 & 1) == 0)
  {
    v34 = v14;
    v38 = v13;
    v42 = v11 * v6[261];
    v30 = a3[1];
    v25 = __cxa_guard_acquire(&qword_100388830);
    v16 = v30;
    v14 = v34;
    v6 = (double *)&unk_100388000;
    v13 = v38;
    v15 = v42;
    if (v25)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v16 = v30;
      v14 = v34;
      v6 = (double *)&unk_100388000;
      v13 = v38;
      v15 = v42;
    }
  }
  v18 = v16 * v6[261];
  v46 = v14;
  v47 = v13;
  v44 = v18;
  v45 = v15;
  sub_10003ECB4(a1, v13, v14, v15, v18);
  if ((v20 & 1) != 0)
    return v19;
  sub_10003EF10(&v47, &v46, &v45, &v44, a1, (uint64_t)v43);
  return v43[0];
}

double sub_10003ECB4(double *a1, double a2, double a3, double a4, double a5)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  double v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  BOOL v23;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v8 = vabdd_f64(a4, a2);
  v9 = 3.14159265;
  if (v8 == 3.14159265)
    goto LABEL_2;
  v10 = a4 - a2;
  if (COERCE__INT64(fabs(a4 - a2)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v19 = fabs(v8 + -3.14159265);
    v9 = 3.14159265;
    if (v8 < 3.14159265)
      v8 = 3.14159265;
    v20 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
    if (v19 <= v20)
      goto LABEL_2;
  }
  v9 = 3.14159265;
  if (v10 <= 3.14159265)
  {
    if (v10 >= -3.14159265)
      goto LABEL_3;
    v9 = fmod(v10 + -3.14159265, 6.28318531) + 3.14159265;
LABEL_2:
    v10 = v9;
    goto LABEL_3;
  }
  v21 = fmod(v10 + 3.14159265, 6.28318531);
  v10 = v21 + -3.14159265;
  if (v21 + -3.14159265 == -3.14159265)
    goto LABEL_2;
  v22 = COERCE__INT64(fabs(v21 + -3.14159265)) - 1;
  v23 = (unint64_t)(COERCE__INT64(fabs(v21 + -3.14159265)) - 0x10000000000000) >> 53 > 0x3FE
     && v22 > 0xFFFFFFFFFFFFELL;
  if (!v23 || *(_QWORD *)&v10 == 0)
  {
    v9 = 3.14159265;
    v25 = fabs(v10 + 3.14159265);
    v26 = fabs(v10);
    if (v26 < 3.14159265)
      v26 = 3.14159265;
    v27 = v26 >= 1.0 ? v26 * 2.22044605e-16 : 2.22044605e-16;
    if (v25 <= v27)
      goto LABEL_2;
  }
LABEL_3:
  if (a3 <= a5)
    v11 = a3;
  else
    v11 = a5;
  if (a3 > a5)
    a5 = a3;
  if (sub_10003F1B0(v11, a5, v10))
  {
    v12 = (*a1 - a1[1]) / *a1;
    v13 = v12 / (2.0 - v12);
    v14 = *a1 / (v13 + 1.0);
    v15 = v13 * 1.5;
    v16 = v14 * (a5 - sin(a5 + a5) * (v13 * 1.5));
    return vabdd_f64(v16, v14 * (v11 - sin(v11 + v11) * v15));
  }
  else
  {
    v18 = fabs(v10);
    if (v18 == 3.14159265)
      return sub_10003F2B4(a1, v11, a5);
    result = 0.0;
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v28 = fabs(v18 + -3.14159265);
      if (v18 < 3.14159265)
        v18 = 3.14159265;
      v29 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
      if (v28 <= v29)
        return sub_10003F2B4(a1, v11, a5);
    }
  }
  return result;
}

void sub_10003EF10(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;
  double v21;
  __double2 v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t v33;
  BOOL v34;
  double v36;
  double v37;
  unint64_t v38;
  BOOL v39;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;

  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_QWORD *)(a6 + 32) = 0x3FF0000000000000;
  v9 = *a1;
  v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    v43 = vabdd_f64(v9, v10);
    v44 = fabs(v9);
    v45 = fabs(v10);
    if (v44 < v45)
      v44 = v45;
    v46 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
    if (v43 > v46)
      goto LABEL_19;
  }
  v11 = *a2;
  v12 = *a4;
  if (*a2 != *a4)
  {
    v13 = (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
       && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v13)
      goto LABEL_19;
    v14 = vabdd_f64(v11, v12);
    v15 = fabs(v11);
    v16 = fabs(v12);
    if (v15 < v16)
      v15 = v16;
    v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      v19 = *a5;
      v20 = *a5 - a5[1];
      v21 = cos(v10 - v9);
      v22 = __sincos_stret(*a2);
      v23 = __sincos_stret(*a4);
      v24 = v21 * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 > 1.0)
        v25 = 1.0;
      else
        v25 = v21 * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 >= -1.0)
        v26 = v25;
      else
        v26 = -1.0;
      v27 = acos(v26);
      v28 = sin(v27) * 3.0;
      v29 = 1.0 - v26;
      v30 = v26 + 1.0;
      v31 = 0.0;
      v32 = 0.0;
      if (1.0 - v26 != 0.0)
      {
        v33 = COERCE__INT64(fabs(1.0 - v26)) - 1;
        v34 = (unint64_t)(COERCE__INT64(fabs(1.0 - v26)) - 0x10000000000000) >> 53 > 0x3FE
           && v33 > 0xFFFFFFFFFFFFELL;
        if (v34 && *(_QWORD *)&v29 != 0)
          goto LABEL_38;
        v36 = fabs(v29);
        v37 = 2.22044605e-16;
        if (v36 >= 1.0)
          v37 = v36 * 2.22044605e-16;
        v13 = v36 > v37;
        v32 = 0.0;
        if (v13)
LABEL_38:
          v32 = (v27 + v28) / v29;
      }
      if (v30 != 0.0)
      {
        v38 = COERCE__INT64(fabs(v26 + 1.0)) - 1;
        v39 = (unint64_t)(COERCE__INT64(fabs(v26 + 1.0)) - 0x10000000000000) >> 53 > 0x3FE
           && v38 > 0xFFFFFFFFFFFFELL;
        if (v39 && *(_QWORD *)&v30 != 0)
          goto LABEL_51;
        v41 = fabs(v30);
        v42 = 2.22044605e-16;
        if (v41 >= 1.0)
          v42 = v41 * 2.22044605e-16;
        if (v41 > v42)
LABEL_51:
          v31 = (v27 - v28) / v30;
      }
      *(long double *)a6 = v19
                         * (v27
                          + v20
                          / v19
                          * -0.25
                          * ((v22.__sinval + v23.__sinval) * (v22.__sinval + v23.__sinval) * v31
                           + v32 * ((v22.__sinval - v23.__sinval) * (v22.__sinval - v23.__sinval))));
    }
  }
}

BOOL sub_10003F1B0(double a1, double a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if (a3 == 0.0)
    return 1;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v4 = fabs(a3);
    v5 = 2.22044605e-16;
    if (v4 >= 1.0)
      v5 = v4 * 2.22044605e-16;
    if (v4 <= v5)
      return 1;
  }
  if (a2 != 1.57079633)
  {
    if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      return 0;
    v9 = fabs(a2 + -1.57079633);
    v10 = fabs(a2);
    if (v10 < 1.57079633)
      v10 = 1.57079633;
    v11 = v10 >= 1.0 ? v10 * 2.22044605e-16 : 2.22044605e-16;
    if (v9 > v11)
      return 0;
  }
  if (a1 == -1.57079633)
    return 1;
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v6 = fabs(a1 + 1.57079633);
  v7 = fabs(a1);
  if (v7 < 1.57079633)
    v7 = 1.57079633;
  if (v7 >= 1.0)
    v8 = v7 * 2.22044605e-16;
  else
    v8 = 2.22044605e-16;
  return v6 <= v8;
}

double sub_10003F2B4(double *a1, double a2, double a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  if (a2 + a3 >= 0.0)
    v5 = 2.0;
  else
    v5 = -2.0;
  v6 = (*a1 - a1[1]) / *a1;
  v7 = v6 / (2.0 - v6);
  v8 = *a1 / (v7 + 1.0);
  v9 = v7 * 1.5;
  v10 = v5 * (v8 * (v7 * 1.5 * -1.2246468e-16 + 1.57079633)) - v8 * (a2 - sin(a2 + a2) * (v7 * 1.5));
  return vabdd_f64(v10, v8 * (a3 - sin(a3 + a3) * v9));
}

void sub_10003F36C(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;

  v5 = a2;
  v3 = (uint64_t *)(a1 + 2);
  v4 = *a1;
  switch(v4 ^ (v4 >> 31))
  {
    case 0:
      if (v4 < 0)
        v3 = (uint64_t *)*v3;
      sub_10003F3FC(a2, v3, a3);
      break;
    case 1:
      if (v4 < 0)
        sub_10004170C(&v5, (uint64_t *)*v3);
      else
        sub_1000417E4(a2, v3, a3);
      break;
    default:
      sub_10003F8F0();
  }
}

void sub_10003F3FC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 104);
  if (v3 != **(_QWORD **)(a1 + 80))
    sub_100048DD4();
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 != v3 && v5 != -1)
    sub_100048DAC();
  sub_10003F4D4(a2, *(__n128 **)a1, a3);
  if (*(_QWORD *)(a1 + 88))
  {
    v10 = sub_10003F51C((unint64_t **)(a1 + 88), v8, v9);
    v11 = sub_10003F89C(*(_DWORD **)(v10 + 32));
    if (!v11)
      sub_10003F84C();
    if (v11 != a2)
      sub_100048D88((uint64_t)v11, v12, v13);
  }
  if (*a2 > 0x10uLL)
    sub_10003F558(a1, a2);
}

void sub_10003F4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

__n128 sub_10003F4D4(_QWORD *a1, __n128 *a2, uint64_t a3)
{
  _QWORD *v3;
  __n128 result;

  if ((unint64_t)(*a1 - 17) <= 0xFFFFFFFFFFFFFFEDLL)
    sub_100048DFC((uint64_t)a1, (uint64_t)a2, a3);
  v3 = &a1[3 * *a1];
  result = *a2;
  v3[3] = a2[1].n128_u64[0];
  *(__n128 *)(v3 + 1) = result;
  ++*a1;
  return result;
}

uint64_t sub_10003F51C(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v4;

  v3 = *a1;
  if (!*a1)
    sub_100048E20();
  v4 = (unint64_t)a1[1];
  if (*v3 <= v4)
    sub_100048E48((uint64_t)a1, a2, a3);
  return (uint64_t)&v3[5 * v4 + 1];
}

void sub_10003F558(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  int v21;
  const char *v22;
  const char *v23;
  _OWORD v24[2];
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[5];

  v32 = 0;
  sub_10003FD04(&v32, a2, &v30);
  if (v32 != 1)
    sub_100048E6C();
  v7 = (_QWORD **)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 112);
  v28 = v33[4];
  v29 = v8;
  if (v6)
  {
    v9 = (_OWORD *)sub_10003F51C((unint64_t **)(a1 + 88), v4, v5);
    v11 = v31;
    *v9 = v30;
    v9[1] = v11;
    if (*v7)
    {
      if (v32)
      {
        sub_10003FE7C(*v7, (uint64_t)v33, v10);
        return;
      }
      v20 = "(i < v.size())&&(\"index out of bounds\")";
      v21 = 94;
      v22 = "varray.hpp";
      v23 = "check_index";
    }
    else
    {
      v20 = "(parent)&&(\"null pointer\")";
      v21 = 253;
      v22 = "insert.hpp";
      v23 = "parent_elements";
    }
LABEL_17:
    __assert_rtn(v23, v22, v21, v20);
  }
  v12 = sub_10003F89C(**(_DWORD ***)(a1 + 72));
  if (!v12)
  {
    *(_QWORD *)&v24[0] = &off_10034DE60;
    sub_10003F84C();
  }
  if (v12 != a2)
  {
    v20 = "(&n == &rtree::get<Node>(*m_root_node))&&(\"node should be the root\")";
    v21 = 449;
    v22 = "insert.hpp";
    v23 = "split";
    goto LABEL_17;
  }
  v13 = operator new(0x2B8uLL);
  *((_QWORD *)v13 + 1) = 0;
  *v13 = 1;
  v14 = *(_QWORD *)(a1 + 112);
  v26 = v13;
  v27 = v14;
  v15 = sub_10004166C(v13);
  if (!v15)
  {
    *(_QWORD *)&v24[0] = &off_10034DE60;
    sub_10003F84C();
  }
  v17 = **(_QWORD **)(a1 + 72);
  v24[0] = v30;
  v24[1] = v31;
  v25 = v17;
  sub_10003FE7C(v15, (uint64_t)v24, v16);
  v18 = sub_10004166C(v13);
  if (!v18)
  {
    *(_QWORD *)&v24[0] = &off_10034DE60;
    sub_10003F84C();
  }
  if (!v32)
    __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
  sub_10003FE7C(v18, (uint64_t)v33, v19);
  **(_QWORD **)(a1 + 72) = v13;
  ++**(_QWORD **)(a1 + 80);
}

void sub_10003F7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, uint64_t a15, char a16)
{
  if (a2)
  {
    std::exception::~exception((std::exception *)&a9);
    __cxa_begin_catch(exception_object);
    *sub_10003FEC8(a14) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_10003F80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  __cxa_end_catch();
  sub_10003FF28((uint64_t)va);
  JUMPOUT(0x10003F83CLL);
}

void sub_10003F830()
{
  JUMPOUT(0x10003F844);
}

void sub_10003F84C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  *exception = &off_10034DDE8;
  exception[1] = off_10034DE18;
  exception[2] = off_10034DE40;
  exception[3] = 0;
}

_QWORD *sub_10003F89C(_DWORD *a1)
{
  _QWORD *v1;
  int v2;
  int v3;
  _QWORD *v4;

  v3 = *a1;
  v1 = a1 + 2;
  v2 = v3;
  v4 = 0;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      if (v2 < 0)
        v4 = (_QWORD *)*v1;
      else
        v4 = v1;
      break;
    case 1:
      return v4;
    default:
      sub_10003F8F0();
  }
  return v4;
}

void sub_10003F8F0()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

uint64_t sub_10003F918(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_10034DD68;
  sub_10003E8F0((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void sub_10003F958()
{
  operator new();
}

void sub_10003FA24()
{
  std::exception *v0;

  std::exception::~exception(v0);
  operator delete();
}

void sub_10003FA68(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  sub_10003FC50((uint64_t)exception, a1);
}

void sub_10003FAA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10003FAB8(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &off_10034DD68;
  sub_10003E8F0((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  operator delete();
}

void sub_10003FB08(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_10034DD68;
  sub_10003E8F0((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

void sub_10003FB40(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_10034DD68;
  sub_10003E8F0((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  operator delete();
}

const char *sub_10003FB94()
{
  return "boost::bad_get: failed value get using boost::get";
}

void sub_10003FBA0(_QWORD *a1)
{
  *a1 = &off_10034DD68;
  sub_10003E8F0(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

void sub_10003FBD8(_QWORD *a1)
{
  *a1 = &off_10034DD68;
  sub_10003E8F0(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  operator delete();
}

void sub_10003FC2C(std::exception *a1)
{
  std::exception::~exception(a1);
  operator delete();
}

uint64_t sub_10003FC50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_10034DD38;
  *(_QWORD *)(a1 + 8) = &off_10034DE60;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_10034DD68;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_10034DDE8;
  *(_QWORD *)(a1 + 8) = off_10034DE18;
  *(_QWORD *)(a1 + 16) = off_10034DE40;
  return a1;
}

void sub_10003FCF0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

double sub_10003FD04(_QWORD *a1, _QWORD *a2, __int128 *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  double result;
  const char *v10;
  int v11;
  _OWORD v12[2];
  _QWORD *v13;
  _OWORD v14[2];

  v6 = operator new(0x2B8uLL);
  v6[1] = 0;
  *(_DWORD *)v6 = 0;
  v7 = sub_10003F89C(v6);
  if (!v7)
  {
    *(_QWORD *)&v12[0] = &off_10034DE60;
    sub_10003F84C();
  }
  sub_10003FF54(a2, v7, a3, (double *)v14);
  if ((unint64_t)(*a2 - 17) < 0xFFFFFFFFFFFFFFF3)
  {
    v10 = "(parameters.get_min_elements() <= rtree::elements(n).size() && rtree::elements(n).size() <= parameters.get_max"
          "_elements())&&(\"unexpected number of elements\")";
    v11 = 193;
    goto LABEL_7;
  }
  if ((unint64_t)(*v7 - 17) <= 0xFFFFFFFFFFFFFFF2)
  {
    v10 = "(parameters.get_min_elements() <= rtree::elements(n2).size() && rtree::elements(n2).size() <= parameters.get_m"
          "ax_elements())&&(\"unexpected number of elements\")";
    v11 = 196;
LABEL_7:
    __assert_rtn("apply", "insert.hpp", v11, v10);
  }
  v12[0] = v14[0];
  v12[1] = v14[1];
  v13 = v6;
  *(_QWORD *)&result = sub_1000403F4(a1, (uint64_t)v12, v8).n128_u64[0];
  return result;
}

void sub_10003FE20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v9;
  _QWORD *v10;

  __cxa_begin_catch(a1);
  if (*v10 >= 0x11uLL)
    --*v10;
  sub_10004131C(v9, &a9);
  __cxa_rethrow();
}

void sub_10003FE68()
{
  __cxa_end_catch();
  JUMPOUT(0x10003FE70);
}

__n128 sub_10003FE7C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  __n128 result;
  __int128 v5;

  if ((unint64_t)(*a1 - 17) <= 0xFFFFFFFFFFFFFFEDLL)
    sub_100048DFC((uint64_t)a1, a2, a3);
  v3 = &a1[5 * *a1];
  result = *(__n128 *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  v3[5] = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 3) = v5;
  *(__n128 *)(v3 + 1) = result;
  ++*a1;
  return result;
}

_QWORD *sub_10003FEC8(_DWORD *a1)
{
  _QWORD *result;

  result = sub_10004166C(a1);
  if (!result)
    sub_10003F84C();
  return result;
}

void sub_10003FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003FF28(uint64_t a1)
{
  sub_1000416C0(a1, 0);
  return a1;
}

void sub_10003FF54(_QWORD *a1, _QWORD *a2, __int128 *a3, double *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 *v11;
  double v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  __n128 *v30;
  uint64_t v31;
  __n128 *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double v53[3];
  unint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;

  if (*a1 != 17)
    sub_100048EE4();
  v54 = 0;
  sub_100040440(&v54, (uint64_t)(a1 + 1), (uint64_t)(a1 + 52));
  if (v54 != 17)
    sub_100048EBC();
  v9 = 0;
  v10 = 0;
  v11 = (__n128 *)&v55;
  v12 = v55;
  v13 = (double *)&v57;
  v14 = 1;
  v15 = v55;
  do
  {
    v16 = *v13;
    v13 += 3;
    v17 = v16;
    if (v16 < v15)
    {
      v15 = v17;
      v10 = v14;
    }
    if (v12 < v17)
    {
      v12 = v17;
      v9 = v14;
    }
    ++v14;
  }
  while (v14 != 17);
  if (v10 == v9)
    v9 = (v10 + 1) % 0x11;
  v18 = 0;
  v19 = 0;
  v20 = v12 - v15;
  v21 = v56;
  v22 = (double *)&v58;
  v23 = 1;
  v24 = v56;
  do
  {
    v25 = *v22;
    v22 += 3;
    v26 = v25;
    if (v25 < v24)
    {
      v24 = v26;
      v19 = v23;
    }
    if (v21 < v26)
    {
      v21 = v26;
      v18 = v23;
    }
    ++v23;
  }
  while (v23 != 17);
  v27 = v21 - v24;
  if (v19 == v18)
    v18 = (v19 + 1) % 0x11;
  if (v20 >= v27)
    v28 = v10;
  else
    v28 = v19;
  if (v20 >= v27)
    v29 = v9;
  else
    v29 = v18;
  *a1 = 0;
  if (*a2)
    sub_100048E94();
  if (v28 > 0x10)
    goto LABEL_53;
  v30 = (__n128 *)(&v55 + 3 * v28);
  sub_10003F4D4(a1, v30, v8);
  if (v54 <= v29)
    goto LABEL_53;
  v32 = (__n128 *)(&v55 + 3 * v29);
  sub_10003F4D4(a2, v32, v31);
  v34 = v54;
  if (v54 <= v28
    || (v35 = v30->n128_u64[0],
        v36 = v30->n128_u64[1],
        *(_QWORD *)a3 = v30->n128_u64[0],
        *((_QWORD *)a3 + 1) = v36,
        *((_QWORD *)a3 + 2) = v35,
        *((_QWORD *)a3 + 3) = v36,
        v34 <= v29))
  {
LABEL_53:
    __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
  }
  v37 = 0;
  v38 = v32->n128_f64[0];
  v39 = v32->n128_f64[1];
  *a4 = v32->n128_f64[0];
  a4[1] = v39;
  a4[2] = v38;
  a4[3] = v39;
  v40 = (*((double *)a3 + 2) - *(double *)a3) * (*((double *)a3 + 3) - *((double *)a3 + 1));
  v41 = (v38 - v38) * (v39 - v39);
  v42 = 15;
  do
  {
    if (v28 != v37 && v29 != v37)
    {
      if (v54 <= v37)
        __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
      if ((unint64_t)(*a1 + v42) <= 4)
      {
        sub_10003F4D4(a1, v11, v33);
        sub_100040524((double *)a3, v11->n128_f64);
        v40 = (*((double *)a3 + 2) - *(double *)a3) * (*((double *)a3 + 3) - *((double *)a3 + 1));
        if (!v42)
          goto LABEL_52;
      }
      else if ((unint64_t)(*a2 + v42) <= 4)
      {
        sub_10003F4D4(a2, v11, v33);
        sub_100040524(a4, v11->n128_f64);
        v41 = (a4[2] - *a4) * (a4[3] - a4[1]);
        if (!v42)
          goto LABEL_52;
      }
      else
      {
        v43 = a3[1];
        v52 = *a3;
        *(_OWORD *)v53 = v43;
        v44 = *((_OWORD *)a4 + 1);
        v50 = *(_OWORD *)a4;
        v51 = v44;
        sub_100040524((double *)&v52, v11->n128_f64);
        sub_100040524((double *)&v50, v11->n128_f64);
        v46 = (v53[0] - *(double *)&v52) * (v53[1] - *((double *)&v52 + 1));
        v47 = (*(double *)&v51 - *(double *)&v50) * (*((double *)&v51 + 1) - *((double *)&v50 + 1));
        if (v46 - v40 < v47 - v41 || v46 - v40 == v47 - v41 && (v40 < v41 || v40 == v41 && *a1 <= *a2))
        {
          sub_10003F4D4(a1, v11, v45);
          v49 = *(_OWORD *)v53;
          *a3 = v52;
          a3[1] = v49;
          v40 = v46;
          if (!v42)
LABEL_52:
            __assert_rtn("apply", "redistribute_elements.hpp", 450, "(0 < remaining)&&(\"unexpected value\")");
        }
        else
        {
          sub_10003F4D4(a2, v11, v45);
          v48 = v51;
          *(_OWORD *)a4 = v50;
          *((_OWORD *)a4 + 1) = v48;
          v41 = v47;
          if (!v42)
            goto LABEL_52;
        }
      }
      --v42;
    }
    ++v37;
    v11 = (__n128 *)((char *)v11 + 24);
  }
  while (v37 != 17);
}

void sub_100040394(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *v3 = 0;
    *v2 = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1000403D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000403DC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1000403E4);
  sub_10000D5E8(a1);
}

__n128 sub_1000403F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  __n128 result;
  __int128 v5;

  if ((unint64_t)(*a1 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    sub_100048DFC((uint64_t)a1, a2, a3);
  v3 = &a1[5 * *a1];
  result = *(__n128 *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  v3[5] = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 3) = v5;
  *(__n128 *)(v3 + 1) = result;
  ++*a1;
  return result;
}

unint64_t *sub_100040440(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
  if (v3 >= 0x12)
    sub_100048DFC((uint64_t)result, a2, a3);
  v4 = *result;
  if (*result <= v3)
  {
    if (v4)
    {
      v6 = 0;
      v7 = a2 + 24 * v4;
      do
      {
        v8 = &result[v6 / 8];
        v9 = a2 + v6;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(a2 + v6);
        v8[3] = *(_QWORD *)(a2 + v6 + 16);
        v6 += 24;
      }
      while (v9 + 24 != v7);
      v4 = *result;
    }
    v10 = a2 + 24 * v4;
    if (v10 != a3)
    {
      v11 = (uint64_t)&result[3 * v4 + 1];
      do
      {
        v12 = *(_OWORD *)v10;
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
        *(_OWORD *)v11 = v12;
        v11 += 24;
        v10 += 24;
      }
      while (v10 != a3);
    }
  }
  else if (a2 != a3)
  {
    v5 = result + 1;
    do
    {
      *(_OWORD *)v5 = *(_OWORD *)a2;
      v5[2] = *(_QWORD *)(a2 + 16);
      a2 += 24;
      v5 += 3;
    }
    while (a2 != a3);
  }
  *result = v3;
  return result;
}

void sub_100040524(double *a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v12;
  _BOOL4 v13;
  unsigned __int8 v14;
  double *v15;
  double v16;
  unsigned __int8 v17;
  double *v18;
  unsigned __int8 v19;
  double v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  double v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  double v26;
  unsigned __int8 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  unint64_t v58;
  BOOL v59;
  BOOL v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  BOOL v68;
  BOOL v69;
  double v70;
  double v72;
  double v73;
  double v74;
  double v75;
  unint64_t v76;
  BOOL v77;
  double v79;
  double v80;
  double v81;
  double v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  double v91;
  double v92;
  double v93;
  double v94;

  v3 = *a2;
  v93 = a2[1];
  v94 = v3;
  sub_100040D78(&v94, &v93, 1);
  v5 = v93;
  v4 = v94;
  v6 = *a1;
  v7 = a1[2];
  v8 = a1[3];
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v7 == -1.79769313e308 && v8 == -1.79769313e308)
  {
    v14 = atomic_load((unsigned __int8 *)&qword_100388830);
    v15 = (double *)&unk_100388000;
    if ((v14 & 1) == 0)
    {
      v83 = __cxa_guard_acquire(&qword_100388830);
      v15 = (double *)&unk_100388000;
      if (v83)
      {
        qword_100388828 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_100388830);
        v15 = (double *)&unk_100388000;
      }
    }
    v16 = v4 * v15[261];
    v17 = atomic_load((unsigned __int8 *)&qword_100388840);
    v18 = (double *)&unk_100388000;
    if ((v17 & 1) == 0)
    {
      v84 = __cxa_guard_acquire(&qword_100388840);
      v18 = (double *)&unk_100388000;
      v15 = (double *)&unk_100388000;
      if (v84)
      {
        qword_100388838 = 0x404CA5DC1A63C1F8;
        __cxa_guard_release(&qword_100388840);
        v18 = (double *)&unk_100388000;
        v15 = (double *)&unk_100388000;
      }
    }
    *a1 = v16 * v18[263];
    v19 = atomic_load((unsigned __int8 *)&qword_100388830);
    if ((v19 & 1) == 0)
    {
      v85 = __cxa_guard_acquire(&qword_100388830);
      v18 = (double *)&unk_100388000;
      v15 = (double *)&unk_100388000;
      if (v85)
      {
        qword_100388828 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_100388830);
        v18 = (double *)&unk_100388000;
        v15 = (double *)&unk_100388000;
      }
    }
    v20 = v5 * v15[261];
    v21 = atomic_load((unsigned __int8 *)&qword_100388840);
    if ((v21 & 1) == 0)
    {
      v86 = __cxa_guard_acquire(&qword_100388840);
      v18 = (double *)&unk_100388000;
      v15 = (double *)&unk_100388000;
      if (v86)
      {
        qword_100388838 = 0x404CA5DC1A63C1F8;
        __cxa_guard_release(&qword_100388840);
        v18 = (double *)&unk_100388000;
        v15 = (double *)&unk_100388000;
      }
    }
    a1[1] = v20 * v18[263];
    v22 = atomic_load((unsigned __int8 *)&qword_100388830);
    if ((v22 & 1) == 0)
    {
      v87 = __cxa_guard_acquire(&qword_100388830);
      v18 = (double *)&unk_100388000;
      v15 = (double *)&unk_100388000;
      if (v87)
      {
        qword_100388828 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_100388830);
        v18 = (double *)&unk_100388000;
        v15 = (double *)&unk_100388000;
      }
    }
    v23 = v4 * v15[261];
    v24 = atomic_load((unsigned __int8 *)&qword_100388840);
    if ((v24 & 1) == 0)
    {
      v88 = __cxa_guard_acquire(&qword_100388840);
      v18 = (double *)&unk_100388000;
      v15 = (double *)&unk_100388000;
      if (v88)
      {
        qword_100388838 = 0x404CA5DC1A63C1F8;
        __cxa_guard_release(&qword_100388840);
        v18 = (double *)&unk_100388000;
        v15 = (double *)&unk_100388000;
      }
    }
    a1[2] = v23 * v18[263];
    v25 = atomic_load((unsigned __int8 *)&qword_100388830);
    if ((v25 & 1) == 0)
    {
      v89 = __cxa_guard_acquire(&qword_100388830);
      v18 = (double *)&unk_100388000;
      v15 = (double *)&unk_100388000;
      if (v89)
      {
        qword_100388828 = 0x3F91DF46A2529D39;
        __cxa_guard_release(&qword_100388830);
        v18 = (double *)&unk_100388000;
        v15 = (double *)&unk_100388000;
      }
    }
    v26 = v5 * v15[261];
    v27 = atomic_load((unsigned __int8 *)&qword_100388840);
    if ((v27 & 1) == 0)
    {
      v90 = __cxa_guard_acquire(&qword_100388840);
      v18 = (double *)&unk_100388000;
      if (v90)
      {
        qword_100388838 = 0x404CA5DC1A63C1F8;
        __cxa_guard_release(&qword_100388840);
        v18 = (double *)&unk_100388000;
      }
    }
    v28 = v26 * v18[263];
  }
  else
  {
    v93 = a1[1];
    v94 = v6;
    v91 = v8;
    v92 = v7;
    v12 = vabdd_f64(v6, v7);
    if (v12 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v6 - v7)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v13 = 0;
      }
      else
      {
        v29 = vabdd_f64(360.0, v12);
        v30 = fmax(v12, 360.0);
        if (v30 >= 1.0)
          v31 = v30 * 2.22044605e-16;
        else
          v31 = 2.22044605e-16;
        v13 = v29 <= v31;
      }
    }
    else
    {
      v13 = 1;
    }
    sub_100040FE4(&v94, &v93, &v92, &v91, v13);
    v33 = v93;
    v32 = v94;
    *a1 = v94;
    v28 = v91;
    v34 = v92;
    a1[2] = v92;
    v35 = fabs(v5);
    v36 = 90.0;
    if (v35 == 90.0)
      goto LABEL_29;
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_43;
    v38 = fabs(v35 + -90.0);
    if (v35 < 90.0)
      v35 = 90.0;
    v39 = v35 >= 1.0 ? v35 * 2.22044605e-16 : 2.22044605e-16;
    if (v38 <= v39)
    {
LABEL_29:
      if (v33 >= v5)
        v37 = v5;
      else
        v37 = v33;
      a1[1] = v37;
    }
    else
    {
LABEL_43:
      if (v33 == v28)
      {
        v40 = fabs(v33);
      }
      else
      {
        if ((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_66;
        }
        v42 = vabdd_f64(v33, v28);
        v40 = fabs(v33);
        v43 = fabs(v28);
        if (v40 >= v43)
          v43 = v40;
        v44 = v43 >= 1.0 ? v43 * 2.22044605e-16 : 2.22044605e-16;
        if (v42 > v44)
        {
LABEL_66:
          if (v5 < v33)
            v33 = v5;
          if (v28 < v5)
            v28 = v5;
          if (v4 >= v32)
            goto LABEL_79;
          if ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_91;
          }
          v53 = vabdd_f64(v32, v4);
          v54 = fabs(v32);
          v55 = fabs(v4);
          if (v54 < v55)
            v54 = v55;
          v56 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
          if (v53 <= v56)
          {
LABEL_79:
            if (v34 < v4)
            {
              if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || (*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              {
                goto LABEL_143;
              }
              v47 = vabdd_f64(v4, v34);
              v48 = fabs(v4);
              v49 = fabs(v34);
              if (v48 < v49)
                v48 = v49;
              v50 = v48 >= 1.0 ? v48 * 2.22044605e-16 : 2.22044605e-16;
              if (v47 > v50)
              {
LABEL_143:
                if (v32 < 0.0)
                {
                  v51 = v4 - v34;
                  v52 = 360.0 - v4 + v32;
                  if (v52 < v4 - v34)
                  {
                    if (COERCE_UNSIGNED_INT64(fabs(v4 - v34)) > 0x7FEFFFFFFFFFFFFFLL)
                      goto LABEL_144;
                    v76 = COERCE__INT64(fabs(360.0 - v4 + v32)) - 1;
                    v77 = (unint64_t)(COERCE__INT64(fabs(360.0 - v4 + v32)) - 0x10000000000000) >> 53 > 0x3FE
                       && v76 > 0xFFFFFFFFFFFFELL;
                    if (v77 && *(_QWORD *)&v52 != 0)
                      goto LABEL_144;
                    v79 = vabdd_f64(v51, v52);
                    v80 = fabs(v51);
                    v81 = fabs(v52);
                    if (v80 < v81)
                      v80 = v81;
                    v82 = v80 >= 1.0 ? v80 * 2.22044605e-16 : 2.22044605e-16;
                    if (v79 > v82)
                    {
LABEL_144:
                      v34 = v34 + 360.0;
                      goto LABEL_110;
                    }
                  }
                }
                v34 = v4;
              }
            }
          }
          else
          {
LABEL_91:
            v57 = v4 + 360.0;
            if (v34 < v4 + 360.0)
            {
              v58 = COERCE__INT64(fabs(v4 + 360.0)) - 1;
              v59 = (unint64_t)(COERCE__INT64(fabs(v4 + 360.0)) - 0x10000000000000) >> 53 > 0x3FE
                 && v58 > 0xFFFFFFFFFFFFELL;
              v60 = !v59 || *(_QWORD *)&v57 == 0;
              if (!v60 || (*(_QWORD *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                goto LABEL_107;
              v61 = vabdd_f64(v57, v34);
              v62 = fabs(v57);
              v63 = fabs(v34);
              if (v62 < v63)
                v62 = v63;
              v64 = v62 >= 1.0 ? v62 * 2.22044605e-16 : 2.22044605e-16;
              if (v61 > v64)
              {
LABEL_107:
                v65 = v32 - v4;
                v66 = v57 - v34;
                if (v32 - v4 < v57 - v34)
                {
                  v67 = COERCE__INT64(fabs(v57 - v34)) - 1;
                  v68 = (unint64_t)(COERCE__INT64(fabs(v57 - v34)) - 0x10000000000000) >> 53 > 0x3FE
                     && v67 > 0xFFFFFFFFFFFFELL;
                  v69 = !v68 || *(_QWORD *)&v66 == 0;
                  v70 = fabs(v32 - v4);
                  if (!v69 || *(_QWORD *)&v70 > 0x7FEFFFFFFFFFFFFFLL)
                    goto LABEL_110;
                  v72 = vabdd_f64(v66, v65);
                  v73 = fabs(v66);
                  v74 = fabs(v65);
                  if (v73 >= v74)
                    v74 = v73;
                  v75 = v74 >= 1.0 ? v74 * 2.22044605e-16 : 2.22044605e-16;
                  if (v72 > v75)
                    goto LABEL_110;
                }
                v34 = v4 + 360.0;
              }
            }
          }
          v4 = v32;
LABEL_110:
          *a1 = v4;
          a1[1] = v33;
          a1[2] = v34;
          goto LABEL_35;
        }
      }
      if (v40 != 90.0)
      {
        if ((*(_QWORD *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_66;
        v45 = fabs(v40 + -90.0);
        if (v40 >= 90.0)
          v36 = v40;
        v46 = v36 >= 1.0 ? v36 * 2.22044605e-16 : 2.22044605e-16;
        if (v45 > v46)
          goto LABEL_66;
      }
      if (v33 >= v5)
        v41 = v5;
      else
        v41 = v33;
      *a1 = v4;
      a1[1] = v41;
      a1[2] = v4;
    }
    if (v5 >= v28)
      v28 = v5;
  }
LABEL_35:
  a1[3] = v28;
}

void sub_100040D78(double *a1, double *a2, int a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v6 = *a1;
  v7 = fabs(*a1);
  v8 = 180.0;
  if (v7 == 180.0)
    goto LABEL_2;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v10 = fabs(v7 + -180.0);
    v8 = 180.0;
    if (v7 < 180.0)
      v7 = 180.0;
    v11 = v7 >= 1.0 ? v7 * 2.22044605e-16 : 2.22044605e-16;
    if (v10 <= v11)
      goto LABEL_2;
  }
  v8 = 180.0;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0)
      goto LABEL_3;
    v8 = fmod(v6 + -180.0, 360.0) + 180.0;
    goto LABEL_2;
  }
  v6 = fmod(v6 + 180.0, 360.0) + -180.0;
  *a1 = v6;
  if (v6 == -180.0)
    goto LABEL_2;
  v12 = ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v12 || *(_QWORD *)&v6 == 0)
  {
    v8 = 180.0;
    v14 = fabs(v6 + 180.0);
    v15 = fabs(v6);
    if (v15 < 180.0)
      v15 = 180.0;
    v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v16)
    {
LABEL_2:
      *a1 = v8;
      v6 = v8;
    }
  }
  if (!a3)
    goto LABEL_37;
LABEL_3:
  v9 = fabs(*a2);
  if (v9 == 90.0)
    goto LABEL_5;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_37;
  v17 = fabs(v9 + -90.0);
  if (v9 < 90.0)
    v9 = 90.0;
  v18 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
  if (v17 <= v18)
  {
LABEL_5:
    *a1 = 0.0;
    v6 = 0.0;
  }
  else
  {
LABEL_37:
    if (v6 <= -180.0)
      goto LABEL_52;
    if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v6 <= 180.0)
        return;
LABEL_49:
      sub_100048F0C();
    }
  }
  v19 = fabs(v6 + 180.0);
  v20 = fabs(v6);
  if (v20 < 180.0)
    v20 = 180.0;
  if (v20 >= 1.0)
    v21 = v20 * 2.22044605e-16;
  else
    v21 = 2.22044605e-16;
  if (v19 <= v21)
LABEL_52:
    sub_100048F34();
  if (v6 > 180.0 && fabs(v6 + -180.0) > v21)
    goto LABEL_49;
}

double sub_100040FE4(double *a1, double *a2, double *a3, double *a4, int a5)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double result;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  sub_100040D78(a1, a2, 0);
  sub_100040D78(a3, a4, 0);
  v10 = *a2;
  if (*a2 == -90.0)
    goto LABEL_9;
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v15 = 90.0;
    v16 = fabs(v10 + 90.0);
    v17 = fabs(v10);
    if (v17 >= 90.0)
      v15 = v17;
    v18 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 <= v18)
    {
LABEL_9:
      v11 = *a4;
      if (*a4 == -90.0)
        goto LABEL_20;
      if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v12 = fabs(v11 + 90.0);
        v13 = fabs(v11);
        if (v13 < 90.0)
          v13 = 90.0;
        v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
        if (v12 <= v14)
          goto LABEL_20;
      }
    }
  }
  if (v10 != 90.0)
  {
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_60;
    v33 = fabs(v10 + -90.0);
    v34 = fabs(v10);
    if (v34 < 90.0)
      v34 = 90.0;
    v35 = v34 >= 1.0 ? v34 * 2.22044605e-16 : 2.22044605e-16;
    if (v33 > v35)
      goto LABEL_60;
  }
  v19 = *a4;
  if (*a4 == 90.0)
    goto LABEL_20;
  if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_60;
  v36 = fabs(v19 + -90.0);
  v37 = fabs(v19);
  if (v37 < 90.0)
    v37 = 90.0;
  v38 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
  if (v36 <= v38)
  {
LABEL_20:
    *a3 = 0.0;
    *a1 = 0.0;
    v20 = 0.0;
  }
  else
  {
LABEL_60:
    if (a5)
    {
      *a1 = -180.0;
      v39 = 180.0;
LABEL_64:
      *a3 = v39;
      v20 = *a1;
      goto LABEL_21;
    }
    v20 = *a1;
    if (*a1 > *a3)
    {
      v39 = *a3 + 360.0;
      goto LABEL_64;
    }
  }
LABEL_21:
  v21 = *a3;
  if (*a3 < v20)
  {
    if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }
    v22 = vabdd_f64(v20, v21);
    v23 = fabs(v20);
    v24 = fabs(v21);
    if (v23 < v24)
      v23 = v24;
    v25 = v23 >= 1.0 ? v23 * 2.22044605e-16 : 2.22044605e-16;
    if (v22 > v25)
LABEL_65:
      sub_100048FAC();
  }
  if (v20 < -180.0)
  {
    if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((v26 = vabdd_f64(-180.0, v20), v27 = fmax(fabs(v20), 180.0), v27 >= 1.0)
        ? (v28 = v27 * 2.22044605e-16)
        : (v28 = 2.22044605e-16),
          v26 > v28))
    {
      sub_100048F84();
    }
  }
  v29 = v21 - v20;
  result = 360.0;
  if (v29 > 360.0)
  {
    if ((*(_QWORD *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_67;
    v31 = fabs(v29 + -360.0);
    v32 = fabs(v29);
    if (v32 >= 360.0)
      result = v32;
    result = result >= 1.0 ? result * 2.22044605e-16 : 2.22044605e-16;
    if (v31 > result)
LABEL_67:
      sub_100048F5C();
  }
  return result;
}

void sub_10004131C(_DWORD *a1, uint64_t *a2)
{
  _QWORD **v2;
  int v3;
  uint64_t *v4;

  v4 = a2;
  v2 = (_QWORD **)(a1 + 2);
  v3 = *a1;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      if (v3 < 0)
        v2 = (_QWORD **)*v2;
      sub_1000413AC(&v4, v2);
      break;
    case 1:
      if (v3 < 0)
        sub_1000414A4((void ***)&v4, *v2);
      else
        sub_100041588((_DWORD **)a2, v2);
      break;
    default:
      sub_10003F8F0();
  }
}

void sub_1000413AC(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  void *v5;

  v3 = *a1;
  v4 = sub_10003F89C((_DWORD *)**a1);
  if (!v4)
    sub_10003F84C();
  if (v4 != a2)
    sub_100048FD4();
  v5 = (void *)*v3;
  sub_100041438(*v3);
  operator delete(v5);
}

void sub_100041420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100041438(uint64_t result)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)result;
  v2 = v1 ^ (v1 >> 31);
  if (v2 == 1)
  {
    if (v1 < 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
        goto LABEL_9;
    }
  }
  else
  {
    if (v2)
      sub_10003F8F0();
    if (v1 < 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
LABEL_9:
        operator delete();
    }
  }
  return result;
}

void sub_1000414A4(void ***a1, _QWORD *a2)
{
  void **v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  BOOL v9;

  v3 = *a1;
  v4 = sub_10004166C(**a1);
  if (!v4)
    sub_10003F84C();
  if (v4 != a2)
    sub_100048FFC();
  v5 = *v3;
  if (*a2)
  {
    v6 = a2 + 5;
    v7 = a2 + 5;
    do
    {
      v8 = (void *)*v7;
      v7 += 5;
      *v3 = v8;
      sub_10004131C();
      *v6 = 0;
      v9 = v6 + 1 == &a2[5 * *a2 + 1];
      v6 = v7;
    }
    while (!v9);
  }
  sub_100041438((uint64_t)v5);
  operator delete(v5);
}

void sub_100041570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

void sub_100041588(_DWORD **a1, _QWORD *a2)
{
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  BOOL v9;

  v4 = sub_10004166C(*a1);
  if (!v4)
    sub_10003F84C();
  if (v4 != a2)
    sub_100048FFC();
  v5 = *a1;
  if (*a2)
  {
    v6 = a2 + 5;
    v7 = a2 + 5;
    do
    {
      v8 = (_DWORD *)*v7;
      v7 += 5;
      *a1 = v8;
      sub_10004131C();
      *v6 = 0;
      v9 = v6 + 1 == &a2[5 * *a2 + 1];
      v6 = v7;
    }
    while (!v9);
  }
  sub_100041438((uint64_t)v5);
  operator delete(v5);
}

void sub_100041654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10004166C(_DWORD *a1)
{
  _QWORD *v1;
  int v2;
  int v3;
  _QWORD *v4;

  v3 = *a1;
  v1 = a1 + 2;
  v2 = v3;
  v4 = 0;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      return v4;
    case 1:
      if (v2 < 0)
        v4 = (_QWORD *)*v1;
      else
        v4 = v1;
      break;
    default:
      sub_10003F8F0();
  }
  return v4;
}

void sub_1000416C0(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7[2];

  v4 = *(_DWORD **)a1;
  if (v4)
    v5 = v4 == a2;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7[0] = (uint64_t)v4;
    v7[1] = v6;
    sub_10004131C(v4, v7);
  }
  *(_QWORD *)a1 = a2;
}

void sub_10004170C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 104);
  if (v3 >= **(_QWORD **)(*a1 + 80))
    sub_10004904C();
  if (v3 >= *(_QWORD *)(v2 + 64))
    sub_100049024();
  sub_1000419F0(*a1, v2, a2);
  if (*(_QWORD *)(v2 + 88))
  {
    v7 = sub_10003F51C((unint64_t **)(v2 + 88), v5, v6);
    v8 = sub_10004166C(*(_DWORD **)(v7 + 32));
    if (!v8)
      sub_10003F84C();
    if (v8 != a2)
      sub_100048D88((uint64_t)v8, v9, v10);
  }
  if ((unint64_t)*a2 > 0x10)
    sub_100043218(v2, a2);
}

void sub_1000417CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

void sub_1000417E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  _QWORD *v10;
  _QWORD *v11;
  double v12;
  double v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v3 = *(_QWORD *)(a1 + 104);
  if (v3 >= **(_QWORD **)(a1 + 80))
    sub_10004904C();
  if (v3 >= *(_QWORD *)(a1 + 64))
    sub_100049024();
  v6 = *a2;
  if (!*a2)
    sub_100049074();
  v7 = 0;
  v8 = 0;
  v9 = *(double **)a1;
  v10 = a2 + 1;
  v11 = a2 + 2;
  v12 = 1.79769313e308;
  v13 = 1.79769313e308;
  do
  {
    if (*a2 <= v7)
      sub_100048E48(a1, (uint64_t)a2, a3);
    v14 = *(_OWORD *)(v11 + 1);
    v29 = *(_OWORD *)(v11 - 1);
    v30 = v14;
    sub_100040524((double *)&v29, v9);
    v15 = (*(double *)&v30 - *(double *)&v29) * (*((double *)&v30 + 1) - *((double *)&v29 + 1));
    v16 = *((double *)v11 + 2) - *(double *)v11;
    v17 = v15 - (*((double *)v11 + 1) - *((double *)v11 - 1)) * v16;
    if (v17 < v13 || (v17 == v13 ? (v18 = v15 < v12) : (v18 = 0), v18))
    {
      v8 = v7;
      v13 = v15 - (*((double *)v11 + 1) - *((double *)v11 - 1)) * v16;
      v12 = (*(double *)&v30 - *(double *)&v29) * (*((double *)&v30 + 1) - *((double *)&v29 + 1));
    }
    ++v7;
    v11 += 5;
  }
  while (v6 != v7);
  if (*a2 <= v8)
    sub_100048E48(a1, (uint64_t)a2, a3);
  sub_100041B64((double *)&v10[5 * v8], (double *)(a1 + 8));
  v29 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)&v30 = *(_QWORD *)(a1 + 104);
  v22 = v30;
  *(_QWORD *)(a1 + 88) = a2;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = v22 + 1;
  if (*a2 <= v8)
    sub_100048E48(v19, v20, v21);
  sub_10003F36C(v10[5 * v8 + 4], a1);
  *(_OWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 104) = v30;
  if (*(_QWORD *)(a1 + 88))
  {
    v25 = sub_10003F51C((unint64_t **)(a1 + 88), v23, v24);
    v26 = sub_10004166C(*(_DWORD **)(v25 + 32));
    if (!v26)
    {
      *(_QWORD *)&v29 = &off_10034DE60;
      sub_10003F84C();
    }
    if (v26 != a2)
      sub_100048D88((uint64_t)v26, v27, v28);
  }
  if ((unint64_t)*a2 > 0x10)
    sub_100043218(a1, a2);
}

void sub_1000419D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

double sub_1000419F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v7;
  unint64_t v8;
  double *v9;
  _QWORD *v10;
  _QWORD *v11;
  double v12;
  double v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  __int128 v24;
  __int128 v25;

  v3 = *a3;
  if (!*a3)
    sub_100049074();
  v7 = 0;
  v8 = 0;
  v9 = *(double **)a1;
  v10 = a3 + 1;
  v11 = a3 + 2;
  v12 = 1.79769313e308;
  v13 = 1.79769313e308;
  do
  {
    if (*a3 <= v7)
      sub_100048E48(a1, a2, (uint64_t)a3);
    v14 = *(_OWORD *)(v11 + 1);
    v24 = *(_OWORD *)(v11 - 1);
    v25 = v14;
    sub_100040524((double *)&v24, v9);
    v15 = (*(double *)&v25 - *(double *)&v24) * (*((double *)&v25 + 1) - *((double *)&v24 + 1));
    v16 = *((double *)v11 + 2) - *(double *)v11;
    v17 = v15 - (*((double *)v11 + 1) - *((double *)v11 - 1)) * v16;
    if (v17 < v13 || (v17 == v13 ? (v18 = v15 < v12) : (v18 = 0), v18))
    {
      v8 = v7;
      v13 = v15 - (*((double *)v11 + 1) - *((double *)v11 - 1)) * v16;
      v12 = (*(double *)&v25 - *(double *)&v24) * (*((double *)&v25 + 1) - *((double *)&v24 + 1));
    }
    ++v7;
    v11 += 5;
  }
  while (v3 != v7);
  if (*a3 <= v8)
    sub_100048E48(a1, a2, (uint64_t)a3);
  sub_100041B64((double *)&v10[5 * v8], (double *)(a1 + 8));
  v24 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)&v25 = *(_QWORD *)(a1 + 104);
  v22 = v25;
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = v22 + 1;
  if (*a3 <= v8)
    sub_100048E48(v19, v20, v21);
  sub_10003F36C(v10[5 * v8 + 4], a2);
  result = *(double *)&v24;
  *(_OWORD *)(a1 + 88) = v24;
  *(_QWORD *)(a1 + 104) = v25;
  return result;
}

void sub_100041B64(double *a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v10;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v25;
  _BOOL4 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37[8];

  v3 = *a2;
  v4 = a2[2];
  v5 = a2[3];
  v6 = 1.79769313e308;
  if (*a2 == 1.79769313e308 && a2[1] == 1.79769313e308 && v4 == -1.79769313e308 && v5 == -1.79769313e308)
  {
    v12 = -1.79769313e308;
    v13 = -1.79769313e308;
    v14 = 1.79769313e308;
  }
  else
  {
    v36 = a2[1];
    v37[0] = v3;
    v34 = v5;
    v35 = v4;
    v10 = vabdd_f64(v3, v4);
    if (v10 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v3 - v4)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v11 = 0;
      }
      else
      {
        v15 = vabdd_f64(360.0, v10);
        v16 = fmax(v10, 360.0);
        if (v16 >= 1.0)
          v17 = v16 * 2.22044605e-16;
        else
          v17 = 2.22044605e-16;
        v11 = v15 <= v17;
      }
    }
    else
    {
      v11 = 1;
    }
    sub_100040FE4(v37, &v36, &v35, &v34, v11);
    v6 = v36;
    v14 = v37[0];
    v12 = v34;
    v13 = v35;
  }
  v37[0] = v14;
  v37[1] = v6;
  v37[2] = v13;
  v37[3] = v12;
  v18 = *a1;
  v19 = a1[2];
  v20 = a1[3];
  v21 = 1.79769313e308;
  if (*a1 == 1.79769313e308 && a1[1] == 1.79769313e308 && v19 == -1.79769313e308 && v20 == -1.79769313e308)
  {
    v27 = -1.79769313e308;
    v28 = -1.79769313e308;
    v29 = 1.79769313e308;
  }
  else
  {
    v35 = a1[1];
    v36 = v18;
    v33 = v20;
    v34 = v19;
    v25 = vabdd_f64(v18, v19);
    if (v25 < 360.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(v18 - v19)) > 0x7FEFFFFFFFFFFFFFLL)
      {
        v26 = 0;
      }
      else
      {
        v30 = vabdd_f64(360.0, v25);
        v31 = fmax(v25, 360.0);
        if (v31 >= 1.0)
          v32 = v31 * 2.22044605e-16;
        else
          v32 = 2.22044605e-16;
        v26 = v30 <= v32;
      }
    }
    else
    {
      v26 = 1;
    }
    sub_100040FE4(&v36, &v35, &v34, &v33, v26);
    v21 = v35;
    v29 = v36;
    v27 = v33;
    v28 = v34;
  }
  v37[4] = v29;
  v37[5] = v21;
  v37[6] = v28;
  v37[7] = v27;
  sub_100041D5C((uint64_t)v37, a1);
}

void sub_100041D5C(uint64_t a1, _QWORD *a2)
{
  double v4;
  double v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  uint64_t v51;
  uint64_t v52;
  void *__p;
  char *v54;
  _QWORD v55[2];

  v46 = sub_100042728(a1, a1 + 64);
  v4 = *(double *)(a1 + 24);
  v5 = *(double *)(a1 + 56);
  v6 = a1;
  if (v4 < v5)
  {
    if ((*(_QWORD *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_6;
    }
    v42 = vabdd_f64(v5, v4);
    v43 = fabs(v5);
    v44 = fabs(v4);
    if (v43 >= v44)
      v44 = v43;
    v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
    v6 = a1;
    if (v42 > v45)
LABEL_6:
      v6 = a1 + 32;
  }
  v8 = 0;
  v9 = 0;
  __p = 0;
  v54 = 0;
  v55[0] = 0;
  v49 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v48 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  do
  {
    v10 = (float64x2_t *)(a1 + 32 * v9);
    v11 = *v10;
    v50 = v10[1];
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v10, v48), (int32x4_t)vceqq_f64(v50, v49))))) & 1) != 0)
    {
      v47 = *v10;
      if (v11.f64[1] != 90.0)
      {
        if ((*(_QWORD *)&v11.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_17;
        v11.f64[0] = fabs(v11.f64[1] + -90.0);
        v12 = fabs(v11.f64[1]);
        if (v12 < 90.0)
          v12 = 90.0;
        v13 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
        if (v11.f64[0] > v13)
        {
LABEL_17:
          if (v50.f64[1] != -90.0)
          {
            if ((*(_QWORD *)&v50.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              goto LABEL_34;
            v14 = fabs(v50.f64[1] + 90.0);
            v15 = fabs(v50.f64[1]);
            if (v15 < 90.0)
              v15 = 90.0;
            v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
            if (v14 > v16)
            {
LABEL_34:
              if (v50.f64[0] <= 180.0)
                goto LABEL_26;
              if ((*(_QWORD *)&v50.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
                goto LABEL_35;
              v17 = fabs(v50.f64[0] + -180.0);
              v18 = fabs(v50.f64[0]);
              if (v18 < 180.0)
                v18 = 180.0;
              v19 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
              if (v17 <= v19)
              {
LABEL_26:
                if ((unint64_t)v8 < v55[0])
                {
                  *v8 = *(_QWORD *)&v47.f64[0];
                  v8[1] = *(_QWORD *)&v50.f64[0];
                  v8 += 2;
LABEL_79:
                  v54 = (char *)v8;
                  goto LABEL_80;
                }
                v21 = ((char *)v8 - (_BYTE *)__p) >> 4;
                if ((unint64_t)(v21 + 1) >> 60)
                  sub_10000D5F8();
                v22 = (uint64_t)(v55[0] - (_QWORD)__p) >> 3;
                if (v22 <= v21 + 1)
                  v22 = v21 + 1;
                if (v55[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
                  v23 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v23 = v22;
                if (v23)
                  v24 = (char *)sub_10003C6C8((uint64_t)v55, v23);
                else
                  v24 = 0;
                v29 = &v24[16 * v21];
                *(float64_t *)v29 = v47.f64[0];
                *((_QWORD *)v29 + 1) = *(_QWORD *)&v50.f64[0];
                v31 = (char *)__p;
                v30 = v54;
                v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v31);
LABEL_76:
                  v30 = (char *)__p;
                }
              }
              else
              {
LABEL_35:
                if ((unint64_t)v8 >= v55[0])
                {
                  v25 = ((char *)v8 - (_BYTE *)__p) >> 4;
                  if ((unint64_t)(v25 + 1) >> 60)
                    sub_10000D5F8();
                  v26 = (uint64_t)(v55[0] - (_QWORD)__p) >> 3;
                  if (v26 <= v25 + 1)
                    v26 = v25 + 1;
                  if (v55[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
                    v27 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v27 = v26;
                  if (v27)
                    v28 = (char *)sub_10003C6C8((uint64_t)v55, v27);
                  else
                    v28 = 0;
                  v33 = &v28[16 * v25];
                  *(float64_t *)v33 = v47.f64[0];
                  *((_QWORD *)v33 + 1) = 0x4066800000000000;
                  v35 = (char *)__p;
                  v34 = v54;
                  v36 = v33;
                  if (v54 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v36 - 1) = *((_OWORD *)v34 - 1);
                      v36 -= 16;
                      v34 -= 16;
                    }
                    while (v34 != v35);
                    v34 = (char *)__p;
                  }
                  v20 = v33 + 16;
                  __p = v36;
                  v54 = v33 + 16;
                  v55[0] = &v28[16 * v27];
                  if (v34)
                    operator delete(v34);
                }
                else
                {
                  *v8 = *(_QWORD *)&v47.f64[0];
                  v8[1] = 0x4066800000000000;
                  v20 = v8 + 2;
                }
                v54 = (char *)v20;
                v37 = v50.f64[0] + -360.0;
                if ((unint64_t)v20 < v55[0])
                {
                  *v20 = 0xC066800000000000;
                  *((double *)v20 + 1) = v37;
                  v8 = v20 + 2;
                  goto LABEL_79;
                }
                v38 = ((char *)v20 - (_BYTE *)__p) >> 4;
                if ((unint64_t)(v38 + 1) >> 60)
                  sub_10000D5F8();
                v39 = (uint64_t)(v55[0] - (_QWORD)__p) >> 3;
                if (v39 <= v38 + 1)
                  v39 = v38 + 1;
                if (v55[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
                  v23 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v23 = v39;
                if (v23)
                  v24 = (char *)sub_10003C6C8((uint64_t)v55, v23);
                else
                  v24 = 0;
                v29 = &v24[16 * v38];
                *(_QWORD *)v29 = 0xC066800000000000;
                *((double *)v29 + 1) = v37;
                v40 = (char *)__p;
                v30 = v54;
                v32 = v29;
                if (v54 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v40);
                  goto LABEL_76;
                }
              }
              v8 = v29 + 16;
              __p = v32;
              v54 = v29 + 16;
              v55[0] = &v24[16 * v23];
              if (v30)
                operator delete(v30);
              goto LABEL_79;
            }
          }
        }
      }
    }
LABEL_80:
    ++v9;
  }
  while (v9 != 2);
  v51 = 0;
  v52 = 0;
  sub_1000422B0((uint64_t *)&__p, (double *)&v52, (double *)&v51);
  v41 = v51;
  *a2 = v52;
  a2[1] = *(_QWORD *)(v46 + 8);
  a2[2] = v41;
  a2[3] = *(_QWORD *)(v6 + 24);
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
}

void sub_10004227C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000422B0(uint64_t *a1, double *a2, double *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;

  *a3 = 0.0;
  *a2 = 0.0;
  v5 = (_QWORD *)*a1;
  v6 = (_QWORD *)a1[1];
  if (v5 != v6)
  {
    *a2 = *(double *)sub_100042900(v5, v6);
    v8 = *a1;
    v9 = a1[1];
    v10 = *a1 + 16;
    if (*a1 != v9 && v10 != v9)
    {
      do
      {
        v49 = *(double *)(v8 + 8);
        v50 = *(double *)(v10 + 8);
        if (v49 < v50)
        {
          if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_87;
          }
          v52 = vabdd_f64(v50, v49);
          v53 = fabs(v50);
          v54 = fabs(v49);
          if (v53 >= v54)
            v54 = v53;
          v55 = v54 >= 1.0 ? v54 * 2.22044605e-16 : 2.22044605e-16;
          if (v52 > v55)
LABEL_87:
            v8 = v10;
        }
        v10 += 16;
      }
      while (v10 != v9);
    }
    v12 = *(double *)(v8 + 8);
    *a3 = v12;
    v13 = v12 - *a2;
    if (v13 > 180.0)
    {
      if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_61;
      v14 = fabs(v13 + -180.0);
      v15 = fabs(v13);
      if (v15 < 180.0)
        v15 = 180.0;
      v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
      if (v14 > v16)
      {
LABEL_61:
        v56 = 0.0;
        v57 = 0.0;
        v17 = sub_1000427BC(a1, &v57, &v56);
        v18 = *a3;
        v19 = *a2;
        if (*a3 < *a2)
        {
          if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_100;
          }
          v20 = vabdd_f64(v19, v18);
          v21 = fabs(v19);
          v22 = fabs(v18);
          if (v21 < v22)
            v21 = v22;
          v23 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v20 > v23)
LABEL_100:
            sub_100049164();
        }
        if (v18 > 180.0)
        {
          if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_102;
          v24 = fabs(v18 + -180.0);
          v25 = fabs(v18);
          if (v25 < 180.0)
            v25 = 180.0;
          v26 = v25 >= 1.0 ? v25 * 2.22044605e-16 : 2.22044605e-16;
          if (v24 > v26)
LABEL_102:
            sub_10004913C();
        }
        if (v19 < -180.0)
        {
          if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((v27 = vabdd_f64(-180.0, v19), v28 = fmax(fabs(v19), 180.0), v28 >= 1.0)
              ? (v29 = v28 * 2.22044605e-16)
              : (v29 = 2.22044605e-16),
                v27 > v29))
          {
            sub_100049114();
          }
        }
        v30 = v57;
        if (v56 < v57)
        {
          if ((*(_QWORD *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(_QWORD *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_101;
          }
          v31 = vabdd_f64(v57, v56);
          v32 = fabs(v57);
          v33 = fabs(v56);
          if (v32 < v33)
            v32 = v33;
          v34 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
          if (v31 > v34)
LABEL_101:
            sub_1000490EC();
        }
        if (v56 > 180.0)
        {
          if ((*(_QWORD *)&v56 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_104;
          v35 = fabs(v56 + -180.0);
          v36 = fabs(v56);
          if (v36 < 180.0)
            v36 = 180.0;
          v37 = v36 >= 1.0 ? v36 * 2.22044605e-16 : 2.22044605e-16;
          if (v35 > v37)
LABEL_104:
            sub_1000490C4();
        }
        if (v57 < -180.0)
        {
          if ((*(_QWORD *)&v57 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((v38 = vabdd_f64(-180.0, v57), v39 = fmax(fabs(v57), 180.0), v39 >= 1.0)
              ? (v40 = v39 * 2.22044605e-16)
              : (v40 = 2.22044605e-16),
                v38 > v40))
          {
            sub_10004909C();
          }
        }
        if (v17 > 0.0)
        {
          if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            if (v19 + 360.0 - v18 >= v17)
              return;
          }
          else
          {
            v41 = fabs(v17);
            v42 = 2.22044605e-16;
            if (v41 >= 1.0)
              v42 = v41 * 2.22044605e-16;
            if (v41 <= v42)
              return;
            v43 = v19 + 360.0 - v18;
            if (v43 >= v17)
              return;
            v44 = ((*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(_QWORD *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (!v44 || *(_QWORD *)&v43 == 0)
            {
              v46 = vabdd_f64(v17, v43);
              v47 = fabs(v43);
              if (v41 >= v47)
                v47 = v41;
              v48 = v47 >= 1.0 ? v47 * 2.22044605e-16 : 2.22044605e-16;
              if (v46 <= v48)
                return;
            }
          }
          *a2 = v56;
          *a3 = v30 + 360.0;
        }
      }
    }
  }
}

uint64_t sub_100042728(uint64_t result, uint64_t a2)
{
  uint64_t i;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;

  if (result != a2)
  {
    for (i = result + 32; i != a2; i += 32)
    {
      v3 = *(double *)(i + 8);
      v4 = *(double *)(result + 8);
      if (v3 < v4)
      {
        if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }
        v6 = vabdd_f64(v4, v3);
        v7 = fabs(v4);
        v8 = fabs(v3);
        if (v7 >= v8)
          v8 = v7;
        v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9)
LABEL_8:
          result = i;
      }
    }
  }
  return result;
}

double sub_1000427BC(uint64_t *a1, double *a2, double *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  __int128 v21;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v13 = 0;
  v14 = 0.0;
  v15 = 0.0;
  sub_100042994(a1, (uint64_t *)&v16);
  while (1)
  {
    v5 = v16;
    v6 = v17;
    if (v16 == v17)
      break;
    v19 = *(_OWORD *)v16;
    if ((char *)v17 - (char *)v16 >= 17)
    {
      v21 = *(_OWORD *)v16;
      v7 = sub_100042F80(v16, (uint64_t)&v20, (unint64_t)((char *)v17 - (char *)v16) >> 4);
      v8 = v6 - 2;
      if (v6 - 2 == v7)
      {
        *v7 = v21;
        *((_BYTE *)v7 + 8) = BYTE8(v21);
      }
      else
      {
        v9 = *v8;
        *((_BYTE *)v7 + 8) = *((_BYTE *)v6 - 8);
        *v7 = v9;
        *v8 = v21;
        *((_BYTE *)v6 - 8) = BYTE8(v21);
        sub_100043088((uint64_t)v5, (uint64_t)(v7 + 2), (uint64_t)&v20, ((char *)(v7 + 2) - (char *)v5) >> 4);
      }
      v6 = v17;
    }
    v17 = v6 - 2;
    sub_100042A80((uint64_t)&v13, &v19, (uint64_t *)&v16);
  }
  v10 = v14;
  v11 = v15;
  *a2 = v14;
  *a3 = v11;
  if (v5)
  {
    v17 = v5;
    operator delete(v5);
  }
  return v11 - v10;
}

void sub_1000428E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100042900(_QWORD *result, _QWORD *a2)
{
  _QWORD *i;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;

  if (result != a2)
  {
    for (i = result + 2; i != a2; i += 2)
    {
      v3 = *(double *)i;
      v4 = *(double *)result;
      if (*(double *)i < *(double *)result)
      {
        if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_8;
        }
        v6 = vabdd_f64(v4, v3);
        v7 = fabs(v4);
        v8 = fabs(v3);
        if (v7 >= v8)
          v8 = v7;
        v9 = v8 >= 1.0 ? v8 * 2.22044605e-16 : 2.22044605e-16;
        if (v6 > v9)
LABEL_8:
          result = i;
      }
    }
  }
  return result;
}

void sub_100042994(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  char v19;

  if (*a2 != a2[1])
    sub_10004918C();
  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  sub_100042BF0((char *)&v16, v3, v4, v5);
  v7 = (uint64_t)v16;
  v6 = v17;
  v8 = v17 - v16;
  if (v17 - v16 >= 17)
  {
    v9 = v8 >> 4;
    v10 = (unint64_t)((v8 >> 4) - 2) >> 1;
    v11 = v10 + 1;
    v12 = (uint64_t *)&v16[16 * v10];
    do
    {
      sub_100042C70(v7, (uint64_t)&v19, v9, v12);
      v12 -= 2;
      --v11;
    }
    while (v11);
    v7 = (uint64_t)v16;
    v6 = v17;
  }
  v13 = (_BYTE *)*a2;
  *a2 = v7;
  a2[1] = (uint64_t)v6;
  v14 = v18;
  v15 = a2[2];
  v16 = v13;
  v18 = v15;
  a2[2] = v14;
  if (v13)
  {
    v17 = v13;
    operator delete(v13);
  }
}

void sub_100042A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100042A80(uint64_t result, _BYTE *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)result;
  if (a2[8])
  {
    *(_QWORD *)result = v4 + 1;
    v5 = *(_QWORD *)a2;
    v6 = a3[2];
    v7 = a3[1];
    if (v7 >= v6)
    {
      v13 = (uint64_t)(v7 - *a3) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        sub_10000D5F8();
      v15 = v6 - *a3;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)sub_10003C6C8((uint64_t)(a3 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[16 * v13];
      v19 = &v17[16 * v16];
      *(_QWORD *)v18 = v5;
      v18[8] = 0;
      v8 = (uint64_t)(v18 + 16);
      v21 = (_BYTE *)*a3;
      v20 = (_BYTE *)a3[1];
      if (v20 != (_BYTE *)*a3)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 2);
          v20 -= 16;
          v23 = v20[8];
          *((_QWORD *)v18 - 2) = v22;
          v18 -= 16;
          v18[8] = v23;
        }
        while (v20 != v21);
        v20 = (_BYTE *)*a3;
      }
      *a3 = (uint64_t)v18;
      a3[1] = v8;
      a3[2] = (uint64_t)v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v8 = v7 + 16;
    }
    a3[1] = v8;
    return sub_100043088(*a3, v8, (uint64_t)&v24, (v8 - *a3) >> 4);
  }
  else
  {
    v9 = v4 - 1;
    *(_QWORD *)result = v9;
    if (!v9)
    {
      v10 = *a3;
      if (*a3 != a3[1])
      {
        if (!*(_BYTE *)(v10 + 8))
          sub_1000491B4();
        v11 = **(double **)v10;
        v12 = *(double *)(*(_QWORD *)a2 + 8);
        if (v11 - v12 > *(double *)(result + 16) - *(double *)(result + 8))
        {
          *(double *)(result + 8) = v12;
          *(double *)(result + 16) = v11;
        }
      }
    }
  }
  return result;
}

char *sub_100042BF0(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t i;

  if (a4)
  {
    v6 = result;
    result = sub_10003C688(result, a4);
    for (i = *((_QWORD *)v6 + 1); a2 != a3; i += 16)
    {
      *(_QWORD *)i = a2;
      *(_BYTE *)(i + 8) = 1;
      a2 += 16;
    }
    *((_QWORD *)v6 + 1) = i;
  }
  return result;
}

void sub_100042C54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100042C70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  uint64_t v30;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;

  if (a3 < 2)
    return result;
  v4 = (uint64_t)a4 - result;
  v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 4)
    return result;
  v6 = v4 >> 3;
  v7 = (v4 >> 3) | 1;
  v8 = (uint64_t *)(result + 16 * v7);
  v9 = v6 + 2;
  if (v9 >= a3)
    goto LABEL_11;
  v10 = *(double *)(v8[2] + 8 * (*((_BYTE *)v8 + 24) == 0));
  v11 = *(double *)(*v8 + 8 * (*((_BYTE *)v8 + 8) == 0));
  if (v10 != v11)
  {
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_65;
    }
    v45 = vabdd_f64(v10, v11);
    v46 = fabs(v10);
    v47 = fabs(v11);
    if (v46 < v47)
      v46 = v47;
    v48 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
    if (v45 > v48)
    {
LABEL_65:
      if (v10 >= v11)
        goto LABEL_11;
LABEL_10:
      v8 += 2;
      v7 = v9;
      goto LABEL_11;
    }
  }
  if (*((_BYTE *)v8 + 24))
    v12 = *((_BYTE *)v8 + 8) == 0;
  else
    v12 = 0;
  if (v12)
    goto LABEL_10;
LABEL_11:
  v13 = *((unsigned __int8 *)a4 + 8);
  v14 = *((_BYTE *)a4 + 8) == 0;
  v15 = *a4;
  v16 = *(double *)(*a4 + 8 * (*((_BYTE *)a4 + 8) == 0));
  v17 = *(double *)(*v8 + 8 * (*((_BYTE *)v8 + 8) == 0));
  if (v16 == v17)
    goto LABEL_85;
  if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    goto LABEL_19;
  }
  v41 = vabdd_f64(v16, v17);
  v42 = fabs(v16);
  v43 = fabs(v17);
  if (v42 < v43)
    v42 = v43;
  v44 = v42 >= 1.0 ? v42 * 2.22044605e-16 : 2.22044605e-16;
  if (v41 <= v44)
  {
LABEL_85:
    if (*((_BYTE *)a4 + 8) && !*((_BYTE *)v8 + 8))
      return result;
  }
  else
  {
LABEL_19:
    if (v16 < v17)
      return result;
  }
  v19 = *v8;
  *((_BYTE *)a4 + 8) = *((_BYTE *)v8 + 8);
  *a4 = v19;
  if (v5 < v7)
    goto LABEL_68;
  v20 = 8 * v14;
  while (1)
  {
    v21 = v8;
    v22 = 2 * v7;
    v7 = (2 * v7) | 1;
    v8 = (uint64_t *)(result + 16 * v7);
    v23 = v22 + 2;
    if (v23 < a3)
    {
      v24 = *(double *)(v8[2] + 8 * (*((_BYTE *)v8 + 24) == 0));
      v25 = *(double *)(*v8 + 8 * (*((_BYTE *)v8 + 8) == 0));
      if (v24 == v25)
        goto LABEL_86;
      if ((*(_QWORD *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(_QWORD *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_45;
      }
      v36 = vabdd_f64(v24, v25);
      v37 = fabs(v24);
      v38 = fabs(v25);
      if (v37 < v38)
        v37 = v38;
      v39 = v37 >= 1.0 ? v37 * 2.22044605e-16 : 2.22044605e-16;
      if (v36 <= v39)
      {
LABEL_86:
        if (*((_BYTE *)v8 + 24))
          v26 = *((_BYTE *)v8 + 8) == 0;
        else
          v26 = 0;
        if (!v26)
          goto LABEL_30;
      }
      else
      {
LABEL_45:
        if (v24 >= v25)
          goto LABEL_30;
      }
      v8 += 2;
      v7 = v23;
    }
LABEL_30:
    v27 = *(double *)(v15 + v20);
    v28 = *(double *)(*v8 + 8 * (*((_BYTE *)v8 + 8) == 0));
    if (v27 == v28)
      break;
    if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v32 = vabdd_f64(v27, v28);
      v33 = fabs(v27);
      v34 = fabs(v28);
      if (v33 < v34)
        v33 = v34;
      v35 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
      if (v32 <= v35)
        break;
    }
    if (v27 < v28)
      goto LABEL_67;
LABEL_39:
    v30 = *v8;
    *((_BYTE *)v21 + 8) = *((_BYTE *)v8 + 8);
    *v21 = v30;
    if (v5 < v7)
      goto LABEL_68;
  }
  if (!v13 || *((_BYTE *)v8 + 8))
    goto LABEL_39;
LABEL_67:
  v8 = v21;
LABEL_68:
  *v8 = v15;
  *((_BYTE *)v8 + 8) = v13;
  return result;
}

uint64_t *sub_100042F80(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  BOOL v11;
  uint64_t v12;
  double v14;
  double v15;
  double v16;
  double v17;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    result += 2 * v3 + 2;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 >= a3)
      goto LABEL_12;
    v9 = *(double *)(result[2] + 8 * (*((_BYTE *)result + 24) == 0));
    v10 = *(double *)(*result + 8 * (*((_BYTE *)result + 8) == 0));
    if (v9 == v10)
      goto LABEL_29;
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_18;
    }
    v14 = vabdd_f64(v9, v10);
    v15 = fabs(v9);
    v16 = fabs(v10);
    if (v15 < v16)
      v15 = v16;
    v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v17)
    {
LABEL_29:
      if (*((_BYTE *)result + 24))
        v11 = *((_BYTE *)result + 8) == 0;
      else
        v11 = 0;
      if (v11)
      {
LABEL_11:
        result += 2;
        v3 = v8;
      }
    }
    else
    {
LABEL_18:
      if (v9 < v10)
        goto LABEL_11;
    }
LABEL_12:
    v12 = *result;
    *((_BYTE *)v6 + 8) = *((_BYTE *)result + 8);
    *v6 = v12;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_100043088(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  double v12;
  double v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (uint64_t *)(result + 16 * (v4 >> 1));
    v9 = *(_QWORD *)(a2 - 16);
    v7 = a2 - 16;
    v8 = v9;
    v10 = *(unsigned __int8 *)(v7 + 8);
    v11 = *(_BYTE *)(v7 + 8) == 0;
    v12 = *(double *)(v9 + 8 * (*(_BYTE *)(v7 + 8) == 0));
    v13 = *(double *)(*v6 + 8 * (*((_BYTE *)v6 + 8) == 0));
    if (v12 == v13)
      goto LABEL_42;
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_10;
    }
    v27 = vabdd_f64(v12, v13);
    v28 = fabs(v12);
    v29 = fabs(v13);
    if (v28 < v29)
      v28 = v29;
    v30 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
    if (v27 <= v30)
    {
LABEL_42:
      if (!*(_BYTE *)(v7 + 8) || *((_BYTE *)v6 + 8))
        return result;
    }
    else
    {
LABEL_10:
      if (v12 >= v13)
        return result;
    }
    v15 = *v6;
    *(_BYTE *)(v7 + 8) = *((_BYTE *)v6 + 8);
    *(_QWORD *)v7 = v15;
    if (v4 >= 2)
    {
      v17 = 8 * v11;
      while (1)
      {
        v18 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v16 = (uint64_t *)(result + 16 * v5);
        v19 = *(double *)(v8 + v17);
        v20 = *(double *)(*v16 + 8 * (*((_BYTE *)v16 + 8) == 0));
        if (v19 == v20)
          goto LABEL_43;
        if ((*(_QWORD *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
          goto LABEL_23;
        }
        v23 = vabdd_f64(v19, v20);
        v24 = fabs(v19);
        v25 = fabs(v20);
        if (v24 < v25)
          v24 = v25;
        v26 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
        if (v23 <= v26)
        {
LABEL_43:
          if (!v10 || *((_BYTE *)v16 + 8))
            break;
        }
        else
        {
LABEL_23:
          if (v19 >= v20)
            break;
        }
        v22 = *v16;
        *((_BYTE *)v6 + 8) = *((_BYTE *)v16 + 8);
        *v6 = v22;
        v6 = (uint64_t *)(result + 16 * v5);
        if (v18 <= 1)
          goto LABEL_13;
      }
    }
    v16 = v6;
LABEL_13:
    *v16 = v8;
    *((_BYTE *)v16 + 8) = v10;
  }
  return result;
}

void sub_100043218(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  int v21;
  const char *v22;
  const char *v23;
  _OWORD v24[2];
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[5];

  v32 = 0;
  sub_10004350C(&v32, a2, (double *)&v30, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (v32 != 1)
    sub_100048E6C();
  v7 = (_QWORD **)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 112);
  v28 = v33[4];
  v29 = v8;
  if (v6)
  {
    v9 = (_OWORD *)sub_10003F51C((unint64_t **)(a1 + 88), v4, v5);
    v11 = v31;
    *v9 = v30;
    v9[1] = v11;
    if (*v7)
    {
      if (v32)
      {
        sub_10003FE7C(*v7, (uint64_t)v33, v10);
        return;
      }
      v20 = "(i < v.size())&&(\"index out of bounds\")";
      v21 = 94;
      v22 = "varray.hpp";
      v23 = "check_index";
    }
    else
    {
      v20 = "(parent)&&(\"null pointer\")";
      v21 = 253;
      v22 = "insert.hpp";
      v23 = "parent_elements";
    }
LABEL_17:
    __assert_rtn(v23, v22, v21, v20);
  }
  v12 = sub_10004166C(**(_DWORD ***)(a1 + 72));
  if (!v12)
  {
    *(_QWORD *)&v24[0] = &off_10034DE60;
    sub_10003F84C();
  }
  if (v12 != a2)
  {
    v20 = "(&n == &rtree::get<Node>(*m_root_node))&&(\"node should be the root\")";
    v21 = 449;
    v22 = "insert.hpp";
    v23 = "split";
    goto LABEL_17;
  }
  v13 = operator new(0x2B8uLL);
  *((_QWORD *)v13 + 1) = 0;
  *v13 = 1;
  v14 = *(_QWORD *)(a1 + 112);
  v26 = v13;
  v27 = v14;
  v15 = sub_10004166C(v13);
  if (!v15)
  {
    *(_QWORD *)&v24[0] = &off_10034DE60;
    sub_10003F84C();
  }
  v17 = **(_QWORD **)(a1 + 72);
  v24[0] = v30;
  v24[1] = v31;
  v25 = v17;
  sub_10003FE7C(v15, (uint64_t)v24, v16);
  v18 = sub_10004166C(v13);
  if (!v18)
  {
    *(_QWORD *)&v24[0] = &off_10034DE60;
    sub_10003F84C();
  }
  if (!v32)
    __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
  sub_10003FE7C(v18, (uint64_t)v33, v19);
  **(_QWORD **)(a1 + 72) = v13;
  ++**(_QWORD **)(a1 + 80);
}

void sub_10004346C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14, uint64_t a15, char a16)
{
  if (a2)
  {
    std::exception::~exception((std::exception *)&a9);
    __cxa_begin_catch(exception_object);
    *sub_10003FEC8(a14) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1000434CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  __cxa_end_catch();
  sub_10003FF28((uint64_t)va);
  JUMPOUT(0x1000434FCLL);
}

void sub_1000434F0()
{
  JUMPOUT(0x100043504);
}

double sub_10004350C(_QWORD *a1, _QWORD *a2, double *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  double result;
  const char *v14;
  int v15;
  _OWORD v16[2];
  _QWORD *v17;
  _OWORD v18[2];

  v10 = operator new(0x2B8uLL);
  v10[1] = 0;
  *(_DWORD *)v10 = 1;
  v11 = sub_10004166C(v10);
  if (!v11)
  {
    *(_QWORD *)&v16[0] = &off_10034DE60;
    sub_10003F84C();
  }
  sub_1000436C8((uint64_t)a2, v11, a3, (double *)v18, a4, a5);
  if ((unint64_t)(*a2 - 17) < 0xFFFFFFFFFFFFFFF3)
  {
    v14 = "(parameters.get_min_elements() <= rtree::elements(n).size() && rtree::elements(n).size() <= parameters.get_max"
          "_elements())&&(\"unexpected number of elements\")";
    v15 = 193;
    goto LABEL_7;
  }
  if ((unint64_t)(*v11 - 17) <= 0xFFFFFFFFFFFFFFF2)
  {
    v14 = "(parameters.get_min_elements() <= rtree::elements(n2).size() && rtree::elements(n2).size() <= parameters.get_m"
          "ax_elements())&&(\"unexpected number of elements\")";
    v15 = 196;
LABEL_7:
    __assert_rtn("apply", "insert.hpp", v15, v14);
  }
  v16[0] = v18[0];
  v16[1] = v18[1];
  v17 = v10;
  *(_QWORD *)&result = sub_1000403F4(a1, (uint64_t)v16, v12).n128_u64[0];
  return result;
}

void sub_10004362C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  _DWORD *v9;
  _QWORD *v10;

  __cxa_begin_catch(a1);
  if (*v10 >= 0x11uLL)
  {
    a9 = (_DWORD *)v10[85];
    sub_10004131C(a9, (uint64_t *)&a9);
    v10[85] = 0;
    if (!*v10)
      __assert_rtn("check_not_empty", "varray.hpp", 101, "(!v.empty())&&(\"the container is empty\")");
    --*v10;
  }
  sub_10004131C(v9, (uint64_t *)&a9);
  __cxa_rethrow();
}

void sub_1000436B4()
{
  __cxa_end_catch();
  JUMPOUT(0x1000436BCLL);
}

void sub_1000436C8(uint64_t a1, _QWORD *a2, double *a3, double *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  double v22;
  double v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double v29;
  double v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double v36[3];
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[85];

  if (*(_QWORD *)a1 != 17)
    sub_100048EE4();
  v39 = 0;
  sub_100043B18(&v39, (char *)(a1 + 8), a1 + 688);
  v37 = 0;
  v38 = 0;
  *(_QWORD *)&v35 = 0;
  sub_100043BAC((uint64_t)&v39, a5, a6, (double *)&v35, &v38, (uint64_t *)&v37);
  *(_QWORD *)a1 = 0;
  if (*a2)
    sub_100048E94();
  if (v39 <= v38)
    goto LABEL_32;
  v13 = (double *)v40;
  sub_10003FE7C((_QWORD *)a1, (uint64_t)&v40[5 * v38], v12);
  if (v39 <= v37
    || (sub_10003FE7C(a2, (uint64_t)&v40[5 * v37], v14), v16 = v39, v39 <= v38)
    || (v17 = &v40[5 * v38], v18 = v17[1], *(_OWORD *)a3 = *v17, *((_OWORD *)a3 + 1) = v18, v16 <= v37))
  {
LABEL_32:
    __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
  }
  v19 = 0;
  v20 = &v40[5 * v37];
  v21 = v20[1];
  *(_OWORD *)a4 = *v20;
  *((_OWORD *)a4 + 1) = v21;
  v22 = (a3[2] - *a3) * (a3[3] - a3[1]);
  v23 = (a4[2] - *a4) * (a4[3] - a4[1]);
  v24 = 15;
  do
  {
    if (v19 != v38 && v19 != v37)
    {
      if (v39 <= v19)
        __assert_rtn("check_index", "varray.hpp", 94, "(i < v.size())&&(\"index out of bounds\")");
      if ((unint64_t)(*(_QWORD *)a1 + v24) <= 4)
      {
        sub_10003FE7C((_QWORD *)a1, (uint64_t)v13, v15);
        sub_100041B64(a3, v13);
        v22 = (a3[2] - *a3) * (a3[3] - a3[1]);
        if (!v24)
          goto LABEL_31;
      }
      else if ((unint64_t)(*a2 + v24) <= 4)
      {
        sub_10003FE7C(a2, (uint64_t)v13, v15);
        sub_100041B64(a4, v13);
        v23 = (a4[2] - *a4) * (a4[3] - a4[1]);
        if (!v24)
          goto LABEL_31;
      }
      else
      {
        v26 = *((_OWORD *)a3 + 1);
        v35 = *(_OWORD *)a3;
        *(_OWORD *)v36 = v26;
        v27 = *((_OWORD *)a4 + 1);
        v33 = *(_OWORD *)a4;
        v34 = v27;
        sub_100041B64((double *)&v35, v13);
        sub_100041B64((double *)&v33, v13);
        v29 = (v36[0] - *(double *)&v35) * (v36[1] - *((double *)&v35 + 1));
        v30 = (*(double *)&v34 - *(double *)&v33) * (*((double *)&v34 + 1) - *((double *)&v33 + 1));
        if (v29 - v22 < v30 - v23 || v29 - v22 == v30 - v23 && (v22 < v23 || v22 == v23 && *(_QWORD *)a1 <= *a2))
        {
          sub_10003FE7C((_QWORD *)a1, (uint64_t)v13, v28);
          v32 = *(_OWORD *)v36;
          *(_OWORD *)a3 = v35;
          *((_OWORD *)a3 + 1) = v32;
          v22 = v29;
          if (!v24)
LABEL_31:
            __assert_rtn("apply", "redistribute_elements.hpp", 450, "(0 < remaining)&&(\"unexpected value\")");
        }
        else
        {
          sub_10003FE7C(a2, (uint64_t)v13, v28);
          v31 = v34;
          *(_OWORD *)a4 = v33;
          *((_OWORD *)a4 + 1) = v31;
          v23 = v30;
          if (!v24)
            goto LABEL_31;
        }
      }
      --v24;
    }
    ++v19;
    v13 += 5;
  }
  while (v19 != 17);
}

void sub_100043A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _DWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *v22 = 0;
    *v21 = 0;
    sub_100043ABC(&a20, v20);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_100043A98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100043AA4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x100043AACLL);
  sub_10000D5E8(a1);
}

void sub_100043ABC(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5[2];

  if (*a1)
  {
    v3 = 40 * *a1;
    v4 = (_DWORD **)(a1 + 5);
    do
    {
      v5[0] = *v4;
      v5[1] = a2;
      sub_10004131C(v5[0], (uint64_t *)v5);
      *v4 = 0;
      v4 += 5;
      v3 -= 40;
    }
    while (v3);
  }
}

void *sub_100043B18(unint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  void *result;
  uint64_t v9;
  char *v10;

  v4 = a3 - (_QWORD)a2;
  v5 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
  if (v5 >= 0x12)
    sub_100048DFC((uint64_t)a1, (uint64_t)a2, v4);
  v7 = *a1;
  if (*a1 <= v5)
  {
    v9 = 5 * v7;
    v10 = &a2[40 * v7];
    memmove(a1 + 1, a2, 40 * v7);
    result = memcpy(&a1[v9 + 1], v10, a3 - (_QWORD)v10);
  }
  else
  {
    result = memmove(a1 + 1, a2, v4);
  }
  *a1 = v5;
  return result;
}

uint64_t sub_100043BAC(uint64_t result, uint64_t a2, uint64_t a3, double *a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double *v36;
  uint64_t v37;
  double v38;
  double v39;
  double v41;
  double v42;

  if (*(_QWORD *)result != 17)
    sub_1000491DC();
  v6 = 0;
  v7 = result + 8;
  v8 = *(double *)(result + 8);
  v9 = *(double *)(result + 24);
  v10 = (double *)(result + 64);
  v11 = 1;
  v12 = v9;
  do
  {
    v13 = *(v10 - 2);
    v14 = *v10;
    v10 += 5;
    v15 = v14;
    if (v14 < v12)
    {
      v12 = v15;
      v6 = v11;
    }
    if (v13 < v8)
      v8 = v13;
    if (v9 < v15)
      v9 = v15;
    ++v11;
  }
  while (v11 != 17);
  v16 = v6 == 0;
  v17 = (8 * v16) | (32 * v16);
  v18 = *(double *)(v7 + v17);
  v19 = v17 + 8;
  v20 = v16;
  do
  {
    if (v18 < *(double *)(result + v19) && v6 != v16)
    {
      v18 = *(double *)(result + v19);
      v20 = v16;
    }
    ++v16;
    v19 += 40;
  }
  while (v16 != 17);
  v22 = v9 - v8;
  if (v22 <= 2.22044605e-16)
    v22 = 1.0;
  v23 = (v18 - v12) / v22;
  *a4 = v23;
  *a5 = v20;
  *a6 = v6;
  if (*(_QWORD *)result != 17)
    sub_1000491DC();
  v24 = 0;
  v25 = *(double *)(result + 16);
  v26 = *(double *)(result + 32);
  v27 = (double *)(result + 72);
  v28 = 1;
  v29 = v26;
  do
  {
    v30 = *(v27 - 2);
    v31 = *v27;
    v27 += 5;
    v32 = v31;
    if (v31 < v29)
    {
      v29 = v32;
      v24 = v28;
    }
    if (v30 < v25)
      v25 = v30;
    if (v26 < v32)
      v26 = v32;
    ++v28;
  }
  while (v28 != 17);
  v33 = v24 == 0;
  v34 = (8 * v33) | (32 * v33);
  v35 = *(double *)(v7 + v34 + 8);
  v36 = (double *)(v34 + result + 16);
  v37 = v33;
  do
  {
    v38 = *v36;
    v36 += 5;
    v39 = v38;
    if (v35 < v38 && v24 != v33)
    {
      v35 = v39;
      v37 = v33;
    }
    ++v33;
  }
  while (v33 != 17);
  v41 = v26 - v25;
  if (v41 <= 2.22044605e-16)
    v41 = 1.0;
  v42 = (v35 - v29) / v41;
  if (v23 < v42)
  {
    *a4 = v42;
    *a5 = v37;
    *a6 = v24;
  }
  return result;
}

_QWORD *sub_100043D54(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_100043D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = a2;
  v4 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_100043DF0((_QWORD *)a1, a2);
  return a1;
}

void sub_100043DDC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100043D54(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100043DF0(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (result[4])
  {
    v2 = result;
    sub_100043E30((uint64_t)result, *(_DWORD **)(a2 + 16), *(_QWORD *)(a2 + 8));
    return sub_100044138(v2);
  }
  return result;
}

uint64_t sub_100043E30(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  __int128 v30;

  if (a3)
  {
    result = (uint64_t)sub_10004166C(a2);
    if (!result)
    {
      *(_QWORD *)&v30 = &off_10034DE60;
      sub_10003F84C();
    }
    v6 = result + 8;
    if (*(_QWORD *)result)
    {
      v7 = v6 + 40 * *(_QWORD *)result;
      v8 = (char **)(a1 + 40);
      v9 = a3 - 1;
      do
      {
        *(_QWORD *)&v30 = 0;
        sub_1000444E4((double *)(a1 + 16), (double *)v6, 6378137.0, 6356752.31);
        *(_QWORD *)&v30 = v10;
        result = sub_1000442E4((_QWORD *)a1, (double *)&v30);
        if ((result & 1) == 0)
        {
          v11 = v30;
          v12 = *(_QWORD *)(v6 + 32);
          v14 = *(char **)(a1 + 48);
          v13 = *(_QWORD *)(a1 + 56);
          if ((unint64_t)v14 >= v13)
          {
            v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *v8) >> 3);
            v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_10000D5F8();
            v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)*v8) >> 3);
            if (2 * v18 > v17)
              v17 = 2 * v18;
            if (v18 >= 0x555555555555555)
              v19 = 0xAAAAAAAAAAAAAAALL;
            else
              v19 = v17;
            if (v19)
              v20 = (char *)sub_1000480EC(a1 + 56, v19);
            else
              v20 = 0;
            v21 = &v20[24 * v16];
            *(_QWORD *)v21 = v11;
            *((_QWORD *)v21 + 1) = v9;
            *((_QWORD *)v21 + 2) = v12;
            v23 = *(char **)(a1 + 40);
            v22 = *(char **)(a1 + 48);
            v24 = v21;
            if (v22 != v23)
            {
              do
              {
                v25 = *(_OWORD *)(v22 - 24);
                *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
                *(_OWORD *)(v24 - 24) = v25;
                v24 -= 24;
                v22 -= 24;
              }
              while (v22 != v23);
              v22 = *v8;
            }
            v15 = (uint64_t)(v21 + 24);
            *(_QWORD *)(a1 + 40) = v24;
            *(_QWORD *)(a1 + 48) = v21 + 24;
            *(_QWORD *)(a1 + 56) = &v20[24 * v19];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v14 = v30;
            v15 = (uint64_t)(v14 + 24);
            *((_QWORD *)v14 + 1) = v9;
            *((_QWORD *)v14 + 2) = v12;
          }
          *(_QWORD *)(a1 + 48) = v15;
          result = sub_100048130(*(_QWORD *)(a1 + 40), v15, (uint64_t)&v29, 0xAAAAAAAAAAAAAAABLL * ((v15 - *(_QWORD *)(a1 + 40)) >> 3));
        }
        v6 += 40;
      }
      while (v6 != v7);
    }
  }
  else
  {
    result = (uint64_t)sub_10003F89C(a2);
    if (!result)
    {
      *(_QWORD *)&v30 = &off_10034DE60;
      sub_10003F84C();
    }
    v26 = (double *)(result + 8);
    if (*(_QWORD *)result)
    {
      v27 = 24 * *(_QWORD *)result;
      v28 = result + 8;
      do
      {
        v29 = 0.0;
        v30 = xmmword_1002E6CB0;
        v29 = sub_10003EA50((double *)&v30, (double *)(a1 + 16), v26);
        result = sub_1000442E4((_QWORD *)a1, &v29);
        if ((result & 1) == 0)
        {
          *(double *)&v30 = v29;
          *((_QWORD *)&v30 + 1) = v28;
          result = sub_100044350((uint64_t *)(a1 + 72), &v30);
          if ((unint64_t)(*(_QWORD *)(a1 + 104) + ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4)) > *(_QWORD *)(a1 + 32))
            result = sub_100044444((uint64_t *)(a1 + 72));
        }
        v26 += 3;
        v28 += 24;
        v27 -= 24;
      }
      while (v27);
    }
  }
  return result;
}

void sub_100044118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13)
{
  std::exception::~exception(&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_100044138(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  __n128 *v10;
  __n128 *v11;
  __n128 v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  unint64_t v19;

  v2 = a1[5];
  if (v2 == a1[6])
  {
LABEL_14:
    v14 = a1[9];
    result = a1 + 9;
    if (v14 == a1[10])
    {
      a1[13] = a1[4];
      a1[14] = 0;
      return result;
    }
    v15 = *(_QWORD *)(v14 + 8);
    ++a1[13];
    a1[14] = v15;
  }
  else
  {
    while (1)
    {
      v3 = a1[9];
      v4 = a1[10];
      if (v3 != v4 && *(double *)v3 <= *(double *)v2)
        break;
      if ((unint64_t)(a1[13] + ((v4 - v3) >> 4)) > a1[4])
        sub_100049204();
      if (sub_1000442E4(a1, (double *)v2))
      {
        a1[6] = a1[5];
        goto LABEL_14;
      }
      v7 = v2 + 8;
      v6 = *(_QWORD *)(v2 + 8);
      v5 = *(_DWORD **)(v7 + 8);
      v8 = (__n128 *)a1[5];
      v9 = a1[6];
      if (v9 - (uint64_t)v8 >= 25)
      {
        v18 = *v8;
        v19 = v8[1].n128_u64[0];
        sub_100048804(v8, (uint64_t)&v17, (v9 - (uint64_t)v8) / 0x18uLL);
        v11 = (__n128 *)(v9 - 24);
        if ((__n128 *)(v9 - 24) == v10)
        {
          *v10 = v18;
          v10[1].n128_u64[0] = v19;
        }
        else
        {
          v12 = *v11;
          v10[1].n128_u64[0] = *(_QWORD *)(v9 - 8);
          *v10 = v12;
          *v11 = v18;
          *(_QWORD *)(v9 - 8) = v19;
          sub_100048130((uint64_t)v8, (uint64_t)&v10[1].n128_i64[1], (uint64_t)&v17, 0xAAAAAAAAAAAAAAABLL * ((&v10[1].n128_i8[8] - (__int8 *)v8) >> 3));
        }
        v9 = a1[6];
      }
      a1[6] = v9 - 24;
      sub_100043E30((uint64_t)a1, v5, v6);
      v2 = a1[5];
      if (v2 == a1[6])
        goto LABEL_14;
    }
    v16 = *(_QWORD *)(v3 + 8);
    ++a1[13];
    a1[14] = v16;
    result = a1 + 9;
  }
  return sub_1000487A4((uint64_t)result);
}

BOOL sub_1000442E4(_QWORD *a1, double *a2)
{
  double *v2;
  double *v3;
  uint64_t v4;
  BOOL v5;
  double *v6;
  double v7;

  v2 = (double *)a1[9];
  v3 = (double *)a1[10];
  v4 = (char *)v3 - (char *)v2;
  if (a1[13] + (((char *)v3 - (char *)v2) >> 4) != a1[4])
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v4 == 32;
  if (v4 >= 32)
  {
    v6 = v2 + 2;
    if (v5 || (v7 = v2[4], v2 += 4, v7 <= *(v2 - 2)))
      v2 = v6;
  }
  return *v2 <= *a2;
}

uint64_t sub_100044350(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *a1) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_10000D5F8();
    v11 = v5 - *a1;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)sub_10003C6C8(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = (uint64_t)(v14 + 16);
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != (char *)*a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = v8;
    a1[2] = (uint64_t)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = (uint64_t)(v7 + 1);
  }
  a1[1] = v8;
  return sub_1000481F8(*a1, v8);
}

uint64_t sub_100044444(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;

  result = *a1;
  v3 = a1[1];
  if (v3 - result >= 32)
  {
    if (v3 - result == 32 || (v4 = (_QWORD *)(result + 32), *(double *)(result + 32) <= *(double *)(result + 16)))
      v4 = (_QWORD *)(result + 16);
    v5 = *(_QWORD *)(v3 - 16);
    v6 = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(v3 - 16) = *v4;
    *(_QWORD *)(v3 - 8) = v4[1];
    v7 = ((unint64_t)(v3 - result) >> 4) - 1;
    v8 = ((uint64_t)v4 - result) >> 4;
    if (((1 - __clz(v8 + 1)) & 1) != 0)
      result = sub_100048598(result, v8, v7, v5, v6);
    else
      result = sub_10004838C(result, v8, v7, v5, v6);
  }
  a1[1] -= 16;
  return result;
}

void sub_1000444E4(double *a1, double *a2, double a3, double a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double *v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  unsigned __int8 v12;
  double v13;
  double v14;
  unsigned __int8 v15;
  double v16;
  double v17;
  unsigned __int8 v18;
  double v19;
  unsigned __int8 v20;
  double v21;
  double v22;
  double v23;
  unsigned __int8 v24;
  BOOL v25;
  double v26;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  int v47;
  double v48;
  double v49;
  double v50;
  int v51;
  double v52;
  double v53;
  double v54;
  int v55;
  double v56;
  double v57;
  int v58;
  double v59;
  int v60;
  double v61;
  double v62;
  int v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double *v80;
  double *v81;
  double *v82;
  double *v83;
  double *v84;
  double v85;
  double v86;
  _QWORD v87[2];
  _QWORD v88[2];
  double v89;
  double v90;
  double v91;
  double v92;

  v4 = a1;
  v91 = a3;
  v92 = a4;
  v5 = a2[1];
  v89 = *a2;
  v90 = v5;
  v6 = a2[3];
  *(double *)v88 = a2[2];
  *(double *)&v88[1] = v5;
  *(double *)v87 = v89;
  *(double *)&v87[1] = v6;
  v85 = *(double *)v88;
  v86 = v6;
  v7 = *a1;
  v8 = (double *)&unk_100388000;
  v9 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v9 & 1) == 0)
  {
    v46 = *a1;
    v47 = __cxa_guard_acquire(&qword_100388830);
    v7 = v46;
    v8 = (double *)&unk_100388000;
    v4 = a1;
    if (v47)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v7 = v46;
      v8 = (double *)&unk_100388000;
      v4 = a1;
    }
  }
  v10 = v8[261];
  v11 = v4[1];
  v12 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v12 & 1) == 0)
  {
    v80 = v4;
    v48 = v4[1];
    v49 = v7;
    v50 = v8[261];
    v51 = __cxa_guard_acquire(&qword_100388830);
    v10 = v50;
    v7 = v49;
    v11 = v48;
    v8 = (double *)&unk_100388000;
    v4 = v80;
    if (v51)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v10 = v50;
      v7 = v49;
      v11 = v48;
      v8 = (double *)&unk_100388000;
      v4 = v80;
    }
  }
  v13 = v8[261];
  v14 = v89;
  v15 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v15 & 1) == 0)
  {
    v81 = v4;
    v52 = v11;
    v53 = v7;
    v54 = v8[261];
    v72 = v10;
    v55 = __cxa_guard_acquire(&qword_100388830);
    v10 = v72;
    v14 = v89;
    v13 = v54;
    v7 = v53;
    v11 = v52;
    v8 = (double *)&unk_100388000;
    v4 = v81;
    if (v55)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v10 = v72;
      v14 = v89;
      v13 = v54;
      v7 = v53;
      v11 = v52;
      v8 = (double *)&unk_100388000;
      v4 = v81;
    }
  }
  v16 = v8[261];
  v17 = v90;
  v18 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v18 & 1) == 0)
  {
    v82 = v4;
    v56 = v11;
    v65 = v7;
    v57 = v13;
    v73 = v10;
    v76 = v14;
    v58 = __cxa_guard_acquire(&qword_100388830);
    v10 = v73;
    v14 = v76;
    v17 = v90;
    v13 = v57;
    v7 = v65;
    v11 = v56;
    v8 = (double *)&unk_100388000;
    v4 = v82;
    if (v58)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v10 = v73;
      v14 = v76;
      v17 = v90;
      v13 = v57;
      v7 = v65;
      v11 = v56;
      v8 = (double *)&unk_100388000;
      v4 = v82;
    }
  }
  v19 = v8[261];
  v20 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v20 & 1) == 0)
  {
    v83 = v4;
    v64 = v11;
    v66 = v7;
    v59 = v13;
    v70 = v17;
    v74 = v10;
    v77 = v14;
    v68 = v8[261];
    v60 = __cxa_guard_acquire(&qword_100388830);
    v19 = v68;
    v17 = v70;
    v10 = v74;
    v14 = v77;
    v13 = v59;
    v11 = v64;
    v7 = v66;
    v8 = (double *)&unk_100388000;
    v4 = v83;
    if (v60)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v19 = v68;
      v17 = v70;
      v10 = v74;
      v14 = v77;
      v13 = v59;
      v11 = v64;
      v7 = v66;
      v8 = (double *)&unk_100388000;
      v4 = v83;
    }
  }
  v21 = v7 * v10;
  v22 = v14 * v16;
  v23 = v85 * v8[261];
  v24 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v24 & 1) == 0)
  {
    v84 = v4;
    v67 = v21;
    v69 = v19;
    v61 = v11;
    v75 = v13;
    v78 = v85 * v8[261];
    v62 = v22;
    v71 = v17;
    v63 = __cxa_guard_acquire(&qword_100388830);
    v19 = v69;
    v17 = v71;
    v13 = v75;
    v23 = v78;
    v22 = v62;
    v11 = v61;
    v21 = v67;
    v8 = (double *)&unk_100388000;
    v4 = v84;
    if (v63)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v19 = v69;
      v17 = v71;
      v13 = v75;
      v23 = v78;
      v22 = v62;
      v11 = v61;
      v21 = v67;
      v8 = (double *)&unk_100388000;
      v4 = v84;
    }
  }
  v25 = v21 > v23 || v21 < v22;
  v26 = 6.28318531;
  if (v25 && v21 + 6.28318531 > v23)
  {
    if (v23 > 3.14159265)
    {
      v34 = (v22 - v23) * 0.5 + 3.14159265;
      if (v34 < -3.14159265 || v34 > 3.14159265)
        sub_10004922C();
      if (v21 <= v34)
        goto LABEL_44;
LABEL_25:
      v41 = &v89;
      v42 = (double *)v87;
LABEL_45:
      sub_100044AE0(&v91, v4, v41, v42);
      return;
    }
    v40 = v22 + v23;
    if (v22 + v23 == 0.0)
      goto LABEL_24;
    if (COERCE_UNSIGNED_INT64(fabs(v22 + v23)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v43 = fabs(v40);
      v44 = 2.22044605e-16;
      if (v43 >= 1.0)
        v44 = v43 * 2.22044605e-16;
      if (v43 <= v44)
      {
LABEL_24:
        if (v21 < v22)
          goto LABEL_25;
LABEL_44:
        v41 = (double *)v88;
        v42 = &v85;
        goto LABEL_45;
      }
    }
    v45 = v40 * 0.5 + -3.14159265;
    if (v45 <= 3.14159265)
    {
      if (v45 >= -3.14159265)
      {
LABEL_36:
        if (v45 < -3.14159265 || v45 > 3.14159265)
          sub_100049254();
        if (v40 <= 0.0)
        {
          if (v21 <= v23 || v21 > v45)
            goto LABEL_25;
        }
        else if (v21 < v22 && v21 >= v45)
        {
          goto LABEL_25;
        }
        goto LABEL_44;
      }
    }
    else
    {
      v26 = -6.28318531;
    }
    v45 = v45 + v26;
    goto LABEL_36;
  }
  v28 = v11 * v13;
  v29 = v86 * v8[261];
  if (v11 * v13 <= v29)
  {
    v35 = v17 * v19;
    if (v28 >= v17 * v19)
    {
      if (v28 > v29)
        sub_10004927C();
    }
    else
    {
      v36 = (v91 - v92) / v91 / (2.0 - (v91 - v92) / v91);
      v37 = v91 / (v36 + 1.0);
      v38 = v36 * 1.5;
      v39 = v37 * (v28 - sin(v28 + v28) * (v36 * 1.5));
      vabdd_f64(v39, v37 * (v35 - sin(v35 + v35) * v38));
    }
  }
  else
  {
    v30 = (v91 - v92) / v91 / (2.0 - (v91 - v92) / v91);
    v31 = v91 / (v30 + 1.0);
    v32 = v30 * 1.5;
    v33 = v31 * (v29 - sin(v29 + v29) * (v30 * 1.5));
    vabdd_f64(v33, v31 * (v28 - sin(v28 + v28) * v32));
  }
}

double sub_100044AE0(double *a1, double *a2, double *a3, double *a4)
{
  double *v4;
  double v5;
  unsigned __int8 v6;
  double *v7;
  double v8;
  unsigned __int8 v9;
  double v10;
  unsigned __int8 v11;
  double v12;
  unsigned __int8 v13;
  double v14;
  unsigned __int8 v15;
  double v16;
  unsigned __int8 v17;
  double result;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  double v39;
  double *v41;
  double *v42;
  double *v43;
  double *v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  v4 = a1;
  v5 = *a3;
  v6 = atomic_load((unsigned __int8 *)&qword_100388830);
  v7 = (double *)&unk_100388000;
  if ((v6 & 1) == 0)
  {
    v34 = a2;
    v29 = a4;
    v25 = a3;
    v26 = *a3;
    v19 = __cxa_guard_acquire(&qword_100388830);
    v5 = v26;
    v7 = (double *)&unk_100388000;
    a3 = v25;
    a4 = v29;
    a2 = v34;
    v4 = a1;
    if (v19)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v5 = v26;
      v7 = (double *)&unk_100388000;
      a3 = v25;
      a4 = v29;
      a2 = v34;
      v4 = a1;
    }
  }
  v51 = v5 * v7[261];
  v8 = a3[1];
  v9 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v9 & 1) == 0)
  {
    v35 = a2;
    v41 = v4;
    v30 = a4;
    v27 = a3[1];
    v20 = __cxa_guard_acquire(&qword_100388830);
    v8 = v27;
    v7 = (double *)&unk_100388000;
    a4 = v30;
    a2 = v35;
    v4 = v41;
    if (v20)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v8 = v27;
      v7 = (double *)&unk_100388000;
      a4 = v30;
      a2 = v35;
      v4 = v41;
    }
  }
  v50 = v8 * v7[261];
  v10 = *a4;
  v11 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v11 & 1) == 0)
  {
    v36 = a2;
    v42 = v4;
    v31 = a4;
    v28 = *a4;
    v21 = __cxa_guard_acquire(&qword_100388830);
    v10 = v28;
    v7 = (double *)&unk_100388000;
    a4 = v31;
    a2 = v36;
    v4 = v42;
    if (v21)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v10 = v28;
      v7 = (double *)&unk_100388000;
      a4 = v31;
      a2 = v36;
      v4 = v42;
    }
  }
  v49 = v10 * v7[261];
  v12 = a4[1];
  v13 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v13 & 1) == 0)
  {
    v37 = a2;
    v43 = v4;
    v32 = a4[1];
    v22 = __cxa_guard_acquire(&qword_100388830);
    v12 = v32;
    v7 = (double *)&unk_100388000;
    a2 = v37;
    v4 = v43;
    if (v22)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v12 = v32;
      v7 = (double *)&unk_100388000;
      a2 = v37;
      v4 = v43;
    }
  }
  v48 = v12 * v7[261];
  v14 = *a2;
  v15 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v15 & 1) == 0)
  {
    v38 = a2;
    v44 = v4;
    v33 = *a2;
    v23 = __cxa_guard_acquire(&qword_100388830);
    v14 = v33;
    v7 = (double *)&unk_100388000;
    a2 = v38;
    v4 = v44;
    if (v23)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v14 = v33;
      v7 = (double *)&unk_100388000;
      a2 = v38;
      v4 = v44;
    }
  }
  v47 = v14 * v7[261];
  v16 = a2[1];
  v17 = atomic_load((unsigned __int8 *)&qword_100388830);
  if ((v17 & 1) == 0)
  {
    v45 = v4;
    v39 = a2[1];
    v24 = __cxa_guard_acquire(&qword_100388830);
    v16 = v39;
    v7 = (double *)&unk_100388000;
    v4 = v45;
    if (v24)
    {
      qword_100388828 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_100388830);
      v16 = v39;
      v7 = (double *)&unk_100388000;
      v4 = v45;
    }
  }
  v46 = v16 * v7[261];
  sub_100044E2C(&v51, &v50, &v49, &v48, &v47, &v46, v4);
  return result;
}

void sub_100044E2C(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _BOOL4 v21;
  _BOOL4 v22;
  double v23;
  _BOOL4 v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  BOOL v29;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _BOOL4 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  char v47;
  double *v48;
  double *v49;
  double *v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  long double v56;
  char v57;
  long double v58;
  char v59;
  double v60;
  double v61;
  long double v62;
  long double v63;
  double v64;
  long double v65;
  double v66;
  long double v67;
  long double v68;
  double v69;
  long double v70;
  long double v71;
  long double v72;
  double v73;
  long double v74;
  double v75;
  __double2 v76;
  __double2 v77;
  __double2 v78;
  double v79;
  __double2 v80;
  double v81;
  double v82;
  __double2 v83;
  __double2 v84;
  __double2 v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  char v91;
  double v92;
  double v93;
  double v94;
  long double v95;
  double v96;
  double v97;
  double v98;
  double v99[2];
  double v100;
  double v101;
  double v102[5];
  double v103;
  double v104;
  double v105;
  double v106[4];
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113[3];
  double v114[5];
  double v115;
  double v116;
  double v117;
  double v118;

  v8 = *a7;
  v9 = a7[1];
  memset(v113, 0, sizeof(v113));
  v10 = *a1;
  v11 = *a2;
  v111 = *a2;
  v112 = v10;
  v110 = *a3;
  v12 = v110;
  v13 = *a4;
  v14 = *a5;
  v108 = *a5;
  v109 = v13;
  v15 = *a6;
  v107 = *a6;
  v92 = v9;
  v94 = v8;
  if (v10 <= v110)
  {
    v16 = v13;
    v13 = v11;
    v17 = v10;
    v10 = v110;
  }
  else
  {
    v111 = v13;
    v112 = v110;
    v110 = v10;
    v16 = v11;
    v17 = v12;
    v109 = v11;
  }
  v18 = vabdd_f64(v10, v17);
  v19 = 3.14159265;
  if (v18 == 3.14159265)
    goto LABEL_5;
  v20 = v10 - v17;
  if (COERCE__INT64(fabs(v10 - v17)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v25 = fabs(v18 + -3.14159265);
    v19 = 3.14159265;
    if (v18 < 3.14159265)
      v18 = 3.14159265;
    v26 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v25 <= v26)
      goto LABEL_5;
  }
  v19 = 3.14159265;
  if (v20 <= 3.14159265)
  {
    if (v20 >= -3.14159265)
      goto LABEL_6;
    v19 = fmod(v20 + -3.14159265, 6.28318531) + 3.14159265;
LABEL_5:
    v20 = v19;
    goto LABEL_6;
  }
  v27 = fmod(v20 + 3.14159265, 6.28318531);
  v20 = v27 + -3.14159265;
  if (v27 + -3.14159265 == -3.14159265)
    goto LABEL_5;
  v28 = COERCE__INT64(fabs(v27 + -3.14159265)) - 1;
  v29 = (unint64_t)(COERCE__INT64(fabs(v27 + -3.14159265)) - 0x10000000000000) >> 53 > 0x3FE
     && v28 > 0xFFFFFFFFFFFFELL;
  if (!v29 || *(_QWORD *)&v20 == 0)
  {
    v19 = 3.14159265;
    v31 = fabs(v20 + 3.14159265);
    v32 = fabs(v20);
    if (v32 < 3.14159265)
      v32 = 3.14159265;
    v33 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 <= v33)
      goto LABEL_5;
  }
LABEL_6:
  v21 = sub_10003F1B0(v13, v16, v20);
  v22 = v21;
  v23 = fabs(v20);
  if (v23 == 3.14159265)
  {
    v24 = 1;
  }
  else if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v24 = 0;
  }
  else
  {
    v34 = fabs(v23 + -3.14159265);
    if (v23 < 3.14159265)
      v23 = 3.14159265;
    if (v23 >= 1.0)
      v35 = v23 * 2.22044605e-16;
    else
      v35 = 2.22044605e-16;
    v24 = v34 <= v35;
  }
  if (v13 != 0.0)
  {
    if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_53;
    v37 = fabs(v13);
    v38 = 2.22044605e-16;
    if (v37 >= 1.0)
      v38 = v37 * 2.22044605e-16;
    if (v37 > v38)
    {
LABEL_53:
      if ((v21 || v24) && fabs(v13) > fabs(v16))
      {
        v111 = v16;
        v109 = v13;
      }
      if (v24)
      {
        v114[0] = dbl_1002E6CC0[v15 >= 0.0];
        v41 = v114[0];
        sub_100045730(&v112, &v111, &v112, v114, &v108, &v107, a7);
        v114[0] = v41;
        sub_100045730(&v110, &v109, &v110, v114, &v108, &v107, a7);
        return;
      }
      sub_100046034(&v112, &v111, &v110, &v109, a7, (uint64_t)&v105);
      sub_1000465EC(&v112, &v111, &v108, &v107, a7, (uint64_t)&v103);
      v42 = v105;
      if (v105 == 0.0)
        goto LABEL_59;
      if ((*(_QWORD *)&v105 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v45 = fabs(v105);
        v46 = 2.22044605e-16;
        if (v45 >= 1.0)
          v46 = v45 * 2.22044605e-16;
        if (v45 <= v46)
        {
LABEL_59:
          sub_10003ECB4(a7, v112, v111, v108, v107);
          return;
        }
      }
      if (v104 - v106[0] == 0.0)
        goto LABEL_88;
      if (COERCE_UNSIGNED_INT64(fabs(v104 - v106[0])) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v52 = fabs(v104 - v106[0]);
        v53 = 2.22044605e-16;
        if (v52 >= 1.0)
          v53 = v52 * 2.22044605e-16;
        if (v52 <= v53)
        {
LABEL_88:
          if (v22)
          {
            v54 = v111;
            if (v109 >= v111)
              v55 = v111;
            else
              v55 = v109;
            if (v109 >= v111)
              v54 = v109;
            if (v107 >= v55 && v107 <= v54)
              return;
          }
        }
      }
      v56 = cos(v104 - v106[0]);
      if (v56 * v103 / v42 < 0.0)
      {
        v102[0] = v112;
        v100 = v111;
        v99[0] = v108;
        v97 = v107;
        sub_10003ECB4(a7, v112, v111, v108, v107);
        if ((v57 & 1) == 0)
        {
          v48 = v102;
          v49 = &v100;
          v50 = v99;
          v51 = &v97;
          goto LABEL_76;
        }
        return;
      }
      sub_1000465EC(&v110, &v109, &v108, &v107, a7, (uint64_t)v102);
      v58 = cos(v102[1] - v106[1] + 3.14159265);
      if (v102[0] * v58 / v105 < 0.0)
      {
        v100 = v110;
        v99[0] = v109;
        v97 = v108;
        v118 = v107;
        sub_10003ECB4(a7, v110, v109, v108, v107);
        if ((v59 & 1) == 0)
        {
          v48 = &v100;
          v49 = v99;
          v50 = &v97;
          v51 = &v118;
          goto LABEL_76;
        }
        return;
      }
      v60 = (v92 + v94 * 2.0) / 3.0;
      v100 = v112;
      v101 = v111;
      v99[0] = v110;
      v99[1] = v109;
      v97 = v108;
      v98 = v107;
      v114[0] = v60;
      v61 = sub_100046D34((uint64_t)v114, &v97, &v100, v99);
      v62 = asin(sqrt(v61));
      v95 = v60 * (v62 + v62);
      v64 = v100;
      v63 = v101;
      v66 = v97;
      v65 = v98;
      v67 = sin((v98 - v101) * 0.5);
      v68 = v67 * v67;
      v69 = cos(v63);
      v70 = v69 * cos(v65);
      v71 = sin((v66 - v64) * 0.5);
      v72 = asin(sqrt(v68 + v70 * (v71 * v71)));
      v73 = cos(v60 * (v72 + v72) / v60);
      v74 = v73 / cos(v95 / v60);
      v75 = 0.0;
      if (v74 < 1.0)
      {
        if (v74 <= -1.0)
          v75 = v60 * 3.14159265;
        else
          v75 = v60 * acos(v74);
      }
      v93 = v112;
      v76 = __sincos_stret(v110 - v112);
      v96 = v111;
      v77 = __sincos_stret(v111);
      v78 = __sincos_stret(v109);
      v79 = atan2(v76.__sinval * v78.__cosval, v76.__cosval * -(v77.__sinval * v78.__cosval) + v77.__cosval * v78.__sinval);
      v80 = __sincos_stret(v79);
      v81 = atan2(v77.__cosval * v80.__sinval, sqrt(v77.__sinval * (v77.__sinval * (v80.__sinval * v80.__sinval)) + v80.__cosval * v80.__cosval));
      v82 = atan2(v77.__sinval, v77.__cosval * v80.__cosval);
      v83 = __sincos_stret(v75 / v60 + v82);
      v84 = __sincos_stret(v81);
      v85 = __sincos_stret(v82);
      v86 = atan2(v84.__cosval * v83.__sinval, sqrt(v84.__sinval * v84.__sinval + v84.__cosval * v84.__cosval * v83.__cosval * v83.__cosval));
      v87 = atan2(v84.__sinval * v85.__sinval, v85.__cosval);
      v88 = v93 + atan2(v84.__sinval * v83.__sinval, v83.__cosval) - v87;
      if (v88 <= 3.14159265)
      {
        if (v88 > -3.14159265)
        {
LABEL_105:
          v117 = v96;
          v118 = v93;
          v115 = v86;
          v116 = v88;
          sub_10003ECB4(a7, v93, v96, v88, v86);
          if ((v91 & 1) == 0)
          {
            sub_10003EF10(&v118, &v117, &v116, &v115, a7, (uint64_t)v114);
            v90 = v114[0];
          }
          v114[0] = v90;
          sub_100046B04(&v112, &v111, &v110, &v109, &v108, &v107, a7, v114, v106, v113);
          return;
        }
        v89 = 6.28318531;
      }
      else
      {
        v89 = -6.28318531;
      }
      v88 = v88 + v89;
      goto LABEL_105;
    }
  }
  if (v16 == 0.0)
  {
    v36 = 1;
  }
  else
  {
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_53;
    v39 = fabs(v16);
    v40 = 2.22044605e-16;
    if (v39 >= 1.0)
      v40 = v39 * 2.22044605e-16;
    v36 = v39 <= v40;
  }
  if (v24 || !v36)
    goto LABEL_53;
  if (v14 <= v17)
  {
    v105 = v17;
    v103 = v13;
    v102[0] = v14;
    v100 = v15;
    v43 = v17;
    goto LABEL_64;
  }
  if (v14 < v10)
  {
    v105 = v14;
    v103 = v13;
    v102[0] = v14;
    v100 = v15;
    v43 = v14;
LABEL_64:
    v44 = v13;
    goto LABEL_74;
  }
  v105 = v10;
  v103 = v16;
  v102[0] = v14;
  v100 = v15;
  v43 = v10;
  v44 = v16;
LABEL_74:
  sub_10003ECB4(a7, v43, v44, v14, v15);
  if ((v47 & 1) == 0)
  {
    v48 = &v105;
    v49 = &v103;
    v50 = v102;
    v51 = &v100;
LABEL_76:
    sub_10003EF10(v48, v49, v50, v51, a7, (uint64_t)v114);
  }
}

void sub_100045730(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  _BOOL4 v21;
  _BOOL4 v22;
  double v23;
  _BOOL4 v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  BOOL v29;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  _BOOL4 v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  char v47;
  double *v48;
  double *v49;
  double *v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  long double v56;
  char v57;
  long double v58;
  char v59;
  double v60;
  double v61;
  long double v62;
  long double v63;
  double v64;
  long double v65;
  double v66;
  long double v67;
  long double v68;
  double v69;
  long double v70;
  long double v71;
  long double v72;
  double v73;
  long double v74;
  double v75;
  __double2 v76;
  __double2 v77;
  __double2 v78;
  double v79;
  __double2 v80;
  double v81;
  double v82;
  __double2 v83;
  __double2 v84;
  __double2 v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  char v91;
  double v92;
  double v93;
  double v94;
  long double v95;
  double v96;
  double v97;
  double v98;
  double v99[2];
  double v100;
  double v101;
  double v102[5];
  double v103;
  double v104;
  double v105;
  double v106[4];
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113[3];
  double v114[5];
  double v115;
  double v116;
  double v117;
  double v118;

  v8 = *a7;
  v9 = a7[1];
  memset(v113, 0, sizeof(v113));
  v10 = *a1;
  v11 = *a2;
  v111 = *a2;
  v112 = v10;
  v110 = *a3;
  v12 = v110;
  v13 = *a4;
  v14 = *a5;
  v108 = *a5;
  v109 = v13;
  v15 = *a6;
  v107 = *a6;
  v92 = v9;
  v94 = v8;
  if (v10 <= v110)
  {
    v16 = v13;
    v13 = v11;
    v17 = v10;
    v10 = v110;
  }
  else
  {
    v111 = v13;
    v112 = v110;
    v110 = v10;
    v16 = v11;
    v17 = v12;
    v109 = v11;
  }
  v18 = vabdd_f64(v10, v17);
  v19 = 3.14159265;
  if (v18 == 3.14159265)
    goto LABEL_5;
  v20 = v10 - v17;
  if (COERCE__INT64(fabs(v10 - v17)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v25 = fabs(v18 + -3.14159265);
    v19 = 3.14159265;
    if (v18 < 3.14159265)
      v18 = 3.14159265;
    v26 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v25 <= v26)
      goto LABEL_5;
  }
  v19 = 3.14159265;
  if (v20 <= 3.14159265)
  {
    if (v20 >= -3.14159265)
      goto LABEL_6;
    v19 = fmod(v20 + -3.14159265, 6.28318531) + 3.14159265;
LABEL_5:
    v20 = v19;
    goto LABEL_6;
  }
  v27 = fmod(v20 + 3.14159265, 6.28318531);
  v20 = v27 + -3.14159265;
  if (v27 + -3.14159265 == -3.14159265)
    goto LABEL_5;
  v28 = COERCE__INT64(fabs(v27 + -3.14159265)) - 1;
  v29 = (unint64_t)(COERCE__INT64(fabs(v27 + -3.14159265)) - 0x10000000000000) >> 53 > 0x3FE
     && v28 > 0xFFFFFFFFFFFFELL;
  if (!v29 || *(_QWORD *)&v20 == 0)
  {
    v19 = 3.14159265;
    v31 = fabs(v20 + 3.14159265);
    v32 = fabs(v20);
    if (v32 < 3.14159265)
      v32 = 3.14159265;
    v33 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
    if (v31 <= v33)
      goto LABEL_5;
  }
LABEL_6:
  v21 = sub_10003F1B0(v13, v16, v20);
  v22 = v21;
  v23 = fabs(v20);
  if (v23 == 3.14159265)
  {
    v24 = 1;
  }
  else if ((*(_QWORD *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v24 = 0;
  }
  else
  {
    v34 = fabs(v23 + -3.14159265);
    if (v23 < 3.14159265)
      v23 = 3.14159265;
    if (v23 >= 1.0)
      v35 = v23 * 2.22044605e-16;
    else
      v35 = 2.22044605e-16;
    v24 = v34 <= v35;
  }
  if (v13 != 0.0)
  {
    if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_53;
    v37 = fabs(v13);
    v38 = 2.22044605e-16;
    if (v37 >= 1.0)
      v38 = v37 * 2.22044605e-16;
    if (v37 > v38)
    {
LABEL_53:
      if ((v21 || v24) && fabs(v13) > fabs(v16))
      {
        v111 = v16;
        v109 = v13;
      }
      if (v24)
      {
        v114[0] = dbl_1002E6CC0[v15 >= 0.0];
        v41 = v114[0];
        sub_100045730(&v112, &v111, &v112, v114, &v108, &v107, a7);
        v114[0] = v41;
        sub_100045730(&v110, &v109, &v110, v114, &v108, &v107, a7);
        return;
      }
      sub_100046034(&v112, &v111, &v110, &v109, a7, (uint64_t)&v105);
      sub_1000465EC(&v112, &v111, &v108, &v107, a7, (uint64_t)&v103);
      v42 = v105;
      if (v105 == 0.0)
        goto LABEL_59;
      if ((*(_QWORD *)&v105 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v45 = fabs(v105);
        v46 = 2.22044605e-16;
        if (v45 >= 1.0)
          v46 = v45 * 2.22044605e-16;
        if (v45 <= v46)
        {
LABEL_59:
          sub_10003ECB4(a7, v112, v111, v108, v107);
          return;
        }
      }
      if (v104 - v106[0] == 0.0)
        goto LABEL_88;
      if (COERCE_UNSIGNED_INT64(fabs(v104 - v106[0])) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v52 = fabs(v104 - v106[0]);
        v53 = 2.22044605e-16;
        if (v52 >= 1.0)
          v53 = v52 * 2.22044605e-16;
        if (v52 <= v53)
        {
LABEL_88:
          if (v22)
          {
            v54 = v111;
            if (v109 >= v111)
              v55 = v111;
            else
              v55 = v109;
            if (v109 >= v111)
              v54 = v109;
            if (v107 >= v55 && v107 <= v54)
              return;
          }
        }
      }
      v56 = cos(v104 - v106[0]);
      if (v56 * v103 / v42 < 0.0)
      {
        v102[0] = v112;
        v100 = v111;
        v99[0] = v108;
        v97 = v107;
        sub_10003ECB4(a7, v112, v111, v108, v107);
        if ((v57 & 1) == 0)
        {
          v48 = v102;
          v49 = &v100;
          v50 = v99;
          v51 = &v97;
          goto LABEL_76;
        }
        return;
      }
      sub_1000465EC(&v110, &v109, &v108, &v107, a7, (uint64_t)v102);
      v58 = cos(v102[1] - v106[1] + 3.14159265);
      if (v102[0] * v58 / v105 < 0.0)
      {
        v100 = v110;
        v99[0] = v109;
        v97 = v108;
        v118 = v107;
        sub_10003ECB4(a7, v110, v109, v108, v107);
        if ((v59 & 1) == 0)
        {
          v48 = &v100;
          v49 = v99;
          v50 = &v97;
          v51 = &v118;
          goto LABEL_76;
        }
        return;
      }
      v60 = (v92 + v94 * 2.0) / 3.0;
      v100 = v112;
      v101 = v111;
      v99[0] = v110;
      v99[1] = v109;
      v97 = v108;
      v98 = v107;
      v114[0] = v60;
      v61 = sub_100046D34((uint64_t)v114, &v97, &v100, v99);
      v62 = asin(sqrt(v61));
      v95 = v60 * (v62 + v62);
      v64 = v100;
      v63 = v101;
      v66 = v97;
      v65 = v98;
      v67 = sin((v98 - v101) * 0.5);
      v68 = v67 * v67;
      v69 = cos(v63);
      v70 = v69 * cos(v65);
      v71 = sin((v66 - v64) * 0.5);
      v72 = asin(sqrt(v68 + v70 * (v71 * v71)));
      v73 = cos(v60 * (v72 + v72) / v60);
      v74 = v73 / cos(v95 / v60);
      v75 = 0.0;
      if (v74 < 1.0)
      {
        if (v74 <= -1.0)
          v75 = v60 * 3.14159265;
        else
          v75 = v60 * acos(v74);
      }
      v93 = v112;
      v76 = __sincos_stret(v110 - v112);
      v96 = v111;
      v77 = __sincos_stret(v111);
      v78 = __sincos_stret(v109);
      v79 = atan2(v76.__sinval * v78.__cosval, v76.__cosval * -(v77.__sinval * v78.__cosval) + v77.__cosval * v78.__sinval);
      v80 = __sincos_stret(v79);
      v81 = atan2(v77.__cosval * v80.__sinval, sqrt(v77.__sinval * (v77.__sinval * (v80.__sinval * v80.__sinval)) + v80.__cosval * v80.__cosval));
      v82 = atan2(v77.__sinval, v77.__cosval * v80.__cosval);
      v83 = __sincos_stret(v75 / v60 + v82);
      v84 = __sincos_stret(v81);
      v85 = __sincos_stret(v82);
      v86 = atan2(v84.__cosval * v83.__sinval, sqrt(v84.__sinval * v84.__sinval + v84.__cosval * v84.__cosval * v83.__cosval * v83.__cosval));
      v87 = atan2(v84.__sinval * v85.__sinval, v85.__cosval);
      v88 = v93 + atan2(v84.__sinval * v83.__sinval, v83.__cosval) - v87;
      if (v88 <= 3.14159265)
      {
        if (v88 > -3.14159265)
        {
LABEL_105:
          v117 = v96;
          v118 = v93;
          v115 = v86;
          v116 = v88;
          sub_10003ECB4(a7, v93, v96, v88, v86);
          if ((v91 & 1) == 0)
          {
            sub_10003EF10(&v118, &v117, &v116, &v115, a7, (uint64_t)v114);
            v90 = v114[0];
          }
          v114[0] = v90;
          sub_100046B04(&v112, &v111, &v110, &v109, &v108, &v107, a7, v114, v106, v113);
          return;
        }
        v89 = 6.28318531;
      }
      else
      {
        v89 = -6.28318531;
      }
      v88 = v88 + v89;
      goto LABEL_105;
    }
  }
  if (v16 == 0.0)
  {
    v36 = 1;
  }
  else
  {
    if ((*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_53;
    v39 = fabs(v16);
    v40 = 2.22044605e-16;
    if (v39 >= 1.0)
      v40 = v39 * 2.22044605e-16;
    v36 = v39 <= v40;
  }
  if (v24 || !v36)
    goto LABEL_53;
  if (v14 <= v17)
  {
    v105 = v17;
    v103 = v13;
    v102[0] = v14;
    v100 = v15;
    v43 = v17;
    goto LABEL_64;
  }
  if (v14 < v10)
  {
    v105 = v14;
    v103 = v13;
    v102[0] = v14;
    v100 = v15;
    v43 = v14;
LABEL_64:
    v44 = v13;
    goto LABEL_74;
  }
  v105 = v10;
  v103 = v16;
  v102[0] = v14;
  v100 = v15;
  v43 = v10;
  v44 = v16;
LABEL_74:
  sub_10003ECB4(a7, v43, v44, v14, v15);
  if ((v47 & 1) == 0)
  {
    v48 = &v105;
    v49 = &v103;
    v50 = v102;
    v51 = &v100;
LABEL_76:
    sub_10003EF10(v48, v49, v50, v51, a7, (uint64_t)v114);
  }
}

void sub_100046034(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;
  __double2 v21;
  __double2 v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  BOOL v35;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  BOOL v41;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  long double v58;
  double cosval;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  unint64_t v66;
  double v67;
  unint64_t v68;
  double v69;
  double v70;

  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_QWORD *)(a6 + 32) = 0x3FF0000000000000;
  v9 = *a1;
  v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    v49 = vabdd_f64(v9, v10);
    v50 = fabs(v9);
    v51 = fabs(v10);
    if (v50 < v51)
      v50 = v51;
    v52 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
    if (v49 > v52)
      goto LABEL_19;
  }
  v11 = *a2;
  v12 = *a4;
  if (*a2 != *a4)
  {
    v13 = (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
       && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v13)
      goto LABEL_19;
    v14 = vabdd_f64(v11, v12);
    v15 = fabs(v11);
    v16 = fabs(v12);
    if (v15 < v16)
      v15 = v16;
    v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      v19 = *a5;
      v20 = *a5 - a5[1];
      v21 = __sincos_stret(v10 - v9);
      v22 = __sincos_stret(*a2);
      v23 = __sincos_stret(*a4);
      v24 = v21.__cosval * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 > 1.0)
        v25 = 1.0;
      else
        v25 = v21.__cosval * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 >= -1.0)
        v26 = v25;
      else
        v26 = -1.0;
      v27 = acos(v26);
      v28 = sin(v27);
      v29 = v28 * 3.0;
      v30 = 1.0 - v26;
      v31 = v26 + 1.0;
      v32 = 0.0;
      v33 = 0.0;
      if (1.0 - v26 != 0.0)
      {
        v34 = COERCE__INT64(fabs(1.0 - v26)) - 1;
        v35 = (unint64_t)(COERCE__INT64(fabs(1.0 - v26)) - 0x10000000000000) >> 53 > 0x3FE
           && v34 > 0xFFFFFFFFFFFFELL;
        if (v35 && *(_QWORD *)&v30 != 0)
          goto LABEL_38;
        v37 = fabs(v30);
        v38 = 2.22044605e-16;
        if (v37 >= 1.0)
          v38 = v37 * 2.22044605e-16;
        v13 = v37 > v38;
        v33 = 0.0;
        if (v13)
LABEL_38:
          v33 = (v27 + v29) / v30;
      }
      v39 = v20 / v19;
      if (v31 != 0.0)
      {
        v40 = COERCE__INT64(fabs(v26 + 1.0)) - 1;
        v41 = (unint64_t)(COERCE__INT64(fabs(v26 + 1.0)) - 0x10000000000000) >> 53 > 0x3FE
           && v40 > 0xFFFFFFFFFFFFELL;
        if (v41 && *(_QWORD *)&v31 != 0)
          goto LABEL_51;
        v43 = fabs(v31);
        v44 = 2.22044605e-16;
        if (v43 >= 1.0)
          v44 = v43 * 2.22044605e-16;
        if (v43 > v44)
LABEL_51:
          v32 = (v27 - v29) / v31;
      }
      *(long double *)a6 = v19
                         * (v27
                          + v39
                          * -0.25
                          * ((v22.__sinval + v23.__sinval) * (v22.__sinval + v23.__sinval) * v32
                           + v33 * ((v22.__sinval - v23.__sinval) * (v22.__sinval - v23.__sinval))));
      if (v28 == 0.0)
        goto LABEL_53;
      if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v45 = fabs(v28);
        v46 = 2.22044605e-16;
        if (v45 >= 1.0)
          v46 = v45 * 2.22044605e-16;
        if (v45 <= v46)
        {
LABEL_53:
          if (v26 >= 0.0)
          {
            *(_QWORD *)(a6 + 8) = 0;
            *(_QWORD *)(a6 + 16) = 0;
          }
          else if (v22.__sinval == 1.0
                 || (*(_QWORD *)&v22.__sinval & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                 && ((v53 = fabs(v22.__sinval + -1.0), v54 = fabs(v22.__sinval), v54 >= 1.0)
                   ? (v55 = v54 * 2.22044605e-16)
                   : (v55 = 2.22044605e-16),
                     v53 <= v55))
          {
            *(_QWORD *)(a6 + 8) = 0x400921FB54442D18;
          }
          else
          {
            *(_QWORD *)(a6 + 16) = 0x400921FB54442D18;
          }
          return;
        }
      }
      if (v23.__cosval == 0.0)
        goto LABEL_61;
      if ((*(_QWORD *)&v23.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_81;
      v56 = fabs(v23.__cosval);
      v57 = 2.22044605e-16;
      if (v56 >= 1.0)
        v57 = v56 * 2.22044605e-16;
      if (v56 <= v57)
      {
LABEL_61:
        v47 = 0.0;
        if (v23.__sinval >= 0.0)
          v48 = 0.0;
        else
          v48 = 3.14159265;
        cosval = v22.__cosval;
      }
      else
      {
LABEL_81:
        v48 = atan2(v21.__sinval, v22.__cosval * (v23.__sinval / v23.__cosval) - v22.__sinval * v21.__cosval);
        v58 = sin(v48 + v48);
        cosval = v22.__cosval;
        v47 = v39 * 0.5 * (cosval * cosval) * v58;
      }
      if (cosval == 0.0)
        goto LABEL_85;
      if ((*(_QWORD *)&cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_91;
      v62 = fabs(cosval);
      v63 = 2.22044605e-16;
      if (v62 >= 1.0)
        v63 = v62 * 2.22044605e-16;
      if (v62 <= v63)
      {
LABEL_85:
        v60 = 0.0;
        if (v22.__sinval >= 0.0)
          v61 = 0.0;
        else
          v61 = 3.14159265;
      }
      else
      {
LABEL_91:
        v61 = atan2(v21.__sinval, v23.__cosval * (v22.__sinval / cosval) - v23.__sinval * v21.__cosval);
        v60 = v39 * 0.5 * (v23.__cosval * v23.__cosval) * sin(v61 + v61);
      }
      v64 = -(v47 - v60 * (v27 / v28));
      v65 = v48 - v64;
      *(double *)(a6 + 8) = v48 - v64;
      if (v48 >= 0.0)
      {
        if (v64 >= 0.0)
        {
          v66 = 0;
          if (v65 >= 0.0)
            goto LABEL_104;
          goto LABEL_103;
        }
        v66 = 0x400921FB54442D18;
        if (v65 > 3.14159265)
LABEL_103:
          *(_QWORD *)(a6 + 8) = v66;
      }
      else
      {
        if (v64 > 0.0)
        {
          v66 = 0xC00921FB54442D18;
          if (v65 >= -3.14159265)
            goto LABEL_104;
          goto LABEL_103;
        }
        v66 = 0;
        if (v65 > 0.0)
          goto LABEL_103;
      }
LABEL_104:
      v67 = v60 + -v47 * (v27 / v28);
      if (v61 >= 0.0)
      {
        v68 = 0x400921FB54442D18;
        v70 = 3.14159265 - v61 - v67;
        *(double *)(a6 + 16) = v70;
        if (v67 >= 0.0)
        {
          v68 = 0;
          if (v70 >= 0.0)
            return;
        }
        else if (v70 <= 3.14159265)
        {
          return;
        }
      }
      else
      {
        v68 = 0xC00921FB54442D18;
        v69 = -3.14159265 - v61 - v67;
        *(double *)(a6 + 16) = v69;
        if (v67 <= 0.0)
        {
          v68 = 0;
          if (v69 <= 0.0)
            return;
        }
        else if (v69 >= -3.14159265)
        {
          return;
        }
      }
      *(_QWORD *)(a6 + 16) = v68;
    }
  }
}

void sub_1000465EC(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;
  __double2 v21;
  __double2 v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  BOOL v35;
  double v37;
  double v38;
  double v39;
  unint64_t v40;
  BOOL v41;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double cosval;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  long double v59;
  double v60;
  double v61;
  double v62;
  long double v63;
  double v64;
  double v65;
  unint64_t v66;

  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_QWORD *)(a6 + 32) = 0x3FF0000000000000;
  v9 = *a1;
  v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    v50 = vabdd_f64(v9, v10);
    v51 = fabs(v9);
    v52 = fabs(v10);
    if (v51 < v52)
      v51 = v52;
    v53 = v51 >= 1.0 ? v51 * 2.22044605e-16 : 2.22044605e-16;
    if (v50 > v53)
      goto LABEL_19;
  }
  v11 = *a2;
  v12 = *a4;
  if (*a2 != *a4)
  {
    v13 = (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
       && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v13)
      goto LABEL_19;
    v14 = vabdd_f64(v11, v12);
    v15 = fabs(v11);
    v16 = fabs(v12);
    if (v15 < v16)
      v15 = v16;
    v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      v19 = *a5;
      v20 = *a5 - a5[1];
      v21 = __sincos_stret(v10 - v9);
      v22 = __sincos_stret(*a2);
      v23 = __sincos_stret(*a4);
      v24 = v21.__cosval * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 > 1.0)
        v25 = 1.0;
      else
        v25 = v21.__cosval * (v22.__cosval * v23.__cosval) + v22.__sinval * v23.__sinval;
      if (v24 >= -1.0)
        v26 = v25;
      else
        v26 = -1.0;
      v27 = acos(v26);
      v28 = sin(v27);
      v29 = v28 * 3.0;
      v30 = 1.0 - v26;
      v31 = v26 + 1.0;
      v32 = 0.0;
      v33 = 0.0;
      if (1.0 - v26 != 0.0)
      {
        v34 = COERCE__INT64(fabs(1.0 - v26)) - 1;
        v35 = (unint64_t)(COERCE__INT64(fabs(1.0 - v26)) - 0x10000000000000) >> 53 > 0x3FE
           && v34 > 0xFFFFFFFFFFFFELL;
        if (v35 && *(_QWORD *)&v30 != 0)
          goto LABEL_38;
        v37 = fabs(v30);
        v38 = 2.22044605e-16;
        if (v37 >= 1.0)
          v38 = v37 * 2.22044605e-16;
        v13 = v37 > v38;
        v33 = 0.0;
        if (v13)
LABEL_38:
          v33 = (v27 + v29) / v30;
      }
      v39 = v20 / v19;
      if (v31 != 0.0)
      {
        v40 = COERCE__INT64(fabs(v26 + 1.0)) - 1;
        v41 = (unint64_t)(COERCE__INT64(fabs(v26 + 1.0)) - 0x10000000000000) >> 53 > 0x3FE
           && v40 > 0xFFFFFFFFFFFFELL;
        if (v41 && *(_QWORD *)&v31 != 0)
          goto LABEL_51;
        v43 = fabs(v31);
        v44 = 2.22044605e-16;
        if (v43 >= 1.0)
          v44 = v43 * 2.22044605e-16;
        if (v43 > v44)
LABEL_51:
          v32 = (v27 - v29) / v31;
      }
      *(long double *)a6 = v19
                         * (v27
                          + v39
                          * -0.25
                          * ((v22.__sinval + v23.__sinval) * (v22.__sinval + v23.__sinval) * v32
                           + v33 * ((v22.__sinval - v23.__sinval) * (v22.__sinval - v23.__sinval))));
      if (v28 != 0.0)
      {
        if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_80;
        v45 = fabs(v28);
        v46 = 2.22044605e-16;
        if (v45 >= 1.0)
          v46 = v45 * 2.22044605e-16;
        if (v45 > v46)
        {
LABEL_80:
          if (v23.__cosval == 0.0)
            goto LABEL_61;
          if ((*(_QWORD *)&v23.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_81;
          v57 = fabs(v23.__cosval);
          v58 = 2.22044605e-16;
          if (v57 >= 1.0)
            v58 = v57 * 2.22044605e-16;
          if (v57 <= v58)
          {
LABEL_61:
            v47 = 0.0;
            cosval = v22.__cosval;
            if (v23.__sinval >= 0.0)
              v49 = 0.0;
            else
              v49 = 3.14159265;
          }
          else
          {
LABEL_81:
            v49 = atan2(v21.__sinval, v22.__cosval * (v23.__sinval / v23.__cosval) - v22.__sinval * v21.__cosval);
            v59 = sin(v49 + v49);
            cosval = v22.__cosval;
            v47 = v39 * 0.5 * (cosval * cosval) * v59;
          }
          v60 = 0.0;
          if (cosval != 0.0)
          {
            if ((*(_QWORD *)&cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              goto LABEL_88;
            v61 = fabs(cosval);
            v62 = 2.22044605e-16;
            if (v61 >= 1.0)
              v62 = v61 * 2.22044605e-16;
            if (v61 > v62)
            {
LABEL_88:
              v63 = atan2(v21.__sinval, v23.__cosval * (v22.__sinval / cosval) - v23.__sinval * v21.__cosval);
              v60 = v39 * 0.5 * (v23.__cosval * v23.__cosval) * sin(v63 + v63);
            }
          }
          v64 = -(v47 - v60 * (v27 / v28));
          v65 = v49 - v64;
          *(double *)(a6 + 8) = v49 - v64;
          if (v49 >= 0.0)
          {
            if (v64 >= 0.0)
            {
              v66 = 0;
              if (v65 >= 0.0)
                return;
            }
            else
            {
              v66 = 0x400921FB54442D18;
              if (v65 <= 3.14159265)
                return;
            }
          }
          else if (v64 <= 0.0)
          {
            v66 = 0;
            if (v65 <= 0.0)
              return;
          }
          else
          {
            v66 = 0xC00921FB54442D18;
            if (v65 >= -3.14159265)
              return;
          }
          *(_QWORD *)(a6 + 8) = v66;
          return;
        }
      }
      if (v26 >= 0.0)
      {
        *(_QWORD *)(a6 + 8) = 0;
        *(_QWORD *)(a6 + 16) = 0;
      }
      else if (v22.__sinval == 1.0
             || (*(_QWORD *)&v22.__sinval & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
             && ((v54 = fabs(v22.__sinval + -1.0), v55 = fabs(v22.__sinval), v55 >= 1.0)
               ? (v56 = v55 * 2.22044605e-16)
               : (v56 = 2.22044605e-16),
                 v54 <= v56))
      {
        *(_QWORD *)(a6 + 8) = 0x400921FB54442D18;
      }
      else
      {
        *(_QWORD *)(a6 + 16) = 0x400921FB54442D18;
      }
    }
  }
}

void sub_100046B04(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _BOOL4 v26;
  double v27;
  BOOL v28;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v16 = 0;
  v35 = 0u;
  v36 = 0u;
  v37 = 0x3FF0000000000000;
  v34 = *a8;
  v17 = -1.0;
  v18 = 0.0;
  do
  {
    sub_100046FF8(a1, a2, &v34, a9, a7, (uint64_t)&v31);
    v35 = v31;
    v36 = v32;
    v37 = *(_QWORD *)&v33;
    sub_100047404((double *)&v35, (double *)&v35 + 1, a3, a4, a7, (uint64_t)&v31);
    v19 = *((double *)&v31 + 1);
    sub_100047818((double *)&v35, (double *)&v35 + 1, a5, a6, a7, (uint64_t)&v31);
    v20 = *(double *)&v31;
    v21 = *((double *)&v31 + 1) - v19;
    if (*((double *)&v32 + 1) != 0.0)
    {
      v22 = v33 / *((double *)&v32 + 1);
      v23 = sin(v21) * v22;
      if (v21 >= -3.92699082)
      {
        if (v21 <= 3.92699082)
        {
          if (v21 >= 0.0 || v21 <= -2.35619449)
          {
            v18 = v21 + -1.57079633;
          }
          else
          {
            v23 = -v23;
            v18 = -1.57079633 - v21;
          }
        }
        else
        {
          v23 = -v23;
          v18 = 4.71238898 - v21;
        }
      }
      else
      {
        v18 = v21 + 4.71238898;
      }
      v24 = v18 / v23;
      v28 = v23 == 0.0;
      v25 = 0.0;
      if (!v28)
        v25 = v24;
      v34 = v34 - v25;
    }
    v26 = v17 == -1.0;
    if (v17 > v20)
      v26 = 1;
    if (v26)
      v27 = v20;
    else
      v27 = v17;
    *a10 = v27;
    v28 = v21 == 1.57079633 || !v26;
    if (v28)
      break;
    if (v18 == 0.0)
      break;
    v17 = v20;
  }
  while (v16++ < 0x64);
}

long double sub_100046D34(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v5;
  long double v6;
  double v7;
  long double v8;
  long double v9;
  long double v10;
  double v11;
  long double v12;
  double v13;
  long double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v23;
  double v24;
  long double v25;
  long double v26;
  long double v27;
  __double2 v28;
  double v29;
  double v30;
  __double2 v31;
  double v32;
  double v33;
  double v34;
  long double v35;
  __double2 v36;
  long double v37;
  long double v38;
  double v39;
  long double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  v5 = *a3;
  v6 = a3[1];
  v7 = *a2;
  v8 = a2[1];
  v9 = sin((v8 - v6) * 0.5);
  v10 = v9 * v9;
  v11 = cos(v6);
  v47 = v8;
  v46 = cos(v8);
  v49 = v7;
  v45 = v7 - v5;
  v12 = sin((v7 - v5) * 0.5);
  v51 = v10 + v11 * v46 * (v12 * v12);
  v13 = *a4;
  v14 = a4[1];
  v15 = sin((v14 - v6) * 0.5);
  v16 = v15 * v15;
  v17 = cos(v14);
  v18 = v13 - v5;
  v19 = sin(v18 * 0.5);
  v20 = v16 + v11 * v17 * (v19 * v19);
  if (v20 == 0.0)
    return v51;
  v43 = v11;
  if (COERCE_UNSIGNED_INT64(fabs(v16 + v11 * v17 * (v19 * v19))) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_8;
  v23 = fabs(v20);
  v24 = 2.22044605e-16;
  if (v23 >= 1.0)
    v24 = v23 * 2.22044605e-16;
  if (v23 <= v24)
    return v51;
LABEL_8:
  v41 = v20;
  v25 = sin((v8 - v14) * 0.5);
  v26 = v25 * v25;
  v44 = v17;
  v42 = v49 - v13;
  v27 = sin((v49 - v13) * 0.5);
  v50 = v26 + v46 * v17 * (v27 * v27);
  v28 = __sincos_stret(v45);
  v29 = sin(v6);
  v30 = sin(v47);
  v48 = atan2(v28.__sinval * v46, v28.__cosval * -(v29 * v46) + v43 * v30);
  v31 = __sincos_stret(v18);
  v32 = sin(v14);
  v33 = -(v29 * v17);
  v34 = atan2(v31.__sinval * v44, v31.__cosval * v33 + v43 * v32);
  v35 = atan2(v43 * v31.__sinval, v33 + v43 * v32 * v31.__cosval) + -3.14159265;
  v36 = __sincos_stret(v42);
  v37 = atan2(v46 * v36.__sinval, v36.__cosval * -(v32 * v46) + v44 * v30) - v35;
  v21 = v51;
  v38 = v51 * cos(v48 - v34) / v41;
  v39 = cos(v37);
  if (v38 <= 0.0 || v50 * v39 / v41 <= 0.0)
  {
    if (v50 < v51)
      return v50;
  }
  else
  {
    v40 = sin(v48 - v34);
    return v51 * v40 * (v40 - v51 * v40) / (sqrt(0.25 - v51 * v40 * (v40 - v51 * v40)) + 0.5);
  }
  return v21;
}

void sub_100046FF8(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  long double v17;
  __double2 v18;
  __double2 v19;
  double v20;
  long double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  long double v31;
  double v32;
  double v33;
  __double2 v34;
  __double2 v35;
  double v36;
  __double2 v37;
  double v38;
  double v39;
  double v40;
  double v41;
  __double2 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;

  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_QWORD *)(a6 + 32) = 0x3FF0000000000000;
  v7 = *a4;
  if (*a4 < -3.14159265 || (v8 = 3.14159265, v7 > 3.14159265))
    sub_1000492A4();
  v10 = *a2;
  v11 = *a5;
  v12 = (*a5 - a5[1]) / *a5;
  v13 = 1.57079633;
  v48 = *a4;
  if (v7 <= 1.57079633 && (v8 = -3.14159265, v7 >= -1.57079633))
  {
    v14 = 0;
  }
  else
  {
    v7 = v8 - v7;
    v10 = -v10;
    v14 = 1;
  }
  v51 = *a1;
  if (v10 != 1.57079633)
  {
    if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v15 = fabs(v10);
      if (v15 < 1.57079633)
        v15 = 1.57079633;
      if (v15 >= 1.0)
        v16 = v15 * 2.22044605e-16;
      else
        v16 = 2.22044605e-16;
      if (v10 == -1.57079633 || fabs(v10 + -1.57079633) <= v16 || fabs(v10 + 1.57079633) <= v16)
        goto LABEL_20;
      goto LABEL_19;
    }
    v13 = -1.57079633;
    if (v10 != -1.57079633)
    {
LABEL_19:
      v17 = tan(v10);
      v10 = atan((1.0 - v12) * v17);
LABEL_20:
      v13 = v10;
    }
  }
  v52 = 1.0 - v12;
  v18 = __sincos_stret(v13);
  v19 = __sincos_stret(v7);
  v20 = v19.__sinval * v18.__cosval;
  v21 = acos(v19.__sinval * v18.__cosval);
  v22 = sin(v21);
  v23 = v12 * (1.0 - v20 * v20) * 0.25;
  v50 = v12 * (v19.__sinval * v18.__cosval);
  v24 = v23 * -2.0 + 1.0 - v12 * v20 * v20;
  v25 = v23 / v24;
  v26 = 1.0;
  if (v22 != 0.0)
  {
    if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_26;
    v27 = fabs(v22);
    v28 = 2.22044605e-16;
    if (v27 >= 1.0)
      v28 = v27 * 2.22044605e-16;
    if (v27 > v28)
    {
LABEL_26:
      v29 = v18.__sinval / v22;
      v30 = -1.0;
      if (v29 >= -1.0)
        v30 = v29;
      if (v29 <= 1.0)
        v26 = v30;
    }
  }
  v31 = acos(v26);
  v32 = *a3 / (v11 * v24);
  v49 = v31;
  v33 = v31 - v32 + v31 - v32;
  v34 = __sincos_stret(v32);
  v35 = __sincos_stret(v33);
  v36 = v32
      - v34.__sinval
      * ((1.0 - (v25 + v25) * v35.__cosval)
       * ((v25 + v25)
        * (v35.__cosval * v34.__cosval - v35.__sinval * v34.__sinval)));
  v37 = __sincos_stret(v36);
  v38 = atan2(v20, v19.__cosval * v18.__cosval * v37.__cosval - v18.__sinval * v37.__sinval);
  v39 = v38;
  *(double *)(a6 + 16) = v38;
  if (v14)
  {
    if (v38 == 0.0)
    {
      v39 = dbl_1002E6CD0[v48 >= 0.0];
    }
    else
    {
      if (v38 <= 0.0)
        v40 = -3.14159265;
      else
        v40 = 3.14159265;
      v39 = v40 - v39;
    }
    *(double *)(a6 + 16) = v39;
  }
  v41 = v51
      + atan2(v19.__sinval * v37.__sinval, v19.__cosval * -(v18.__sinval * v37.__sinval) + v18.__cosval * v37.__cosval)
      - v50 * v36;
  *(double *)a6 = v41;
  if (v20 == 0.0)
    goto LABEL_39;
  if (COERCE_UNSIGNED_INT64(fabs(v19.__sinval * v18.__cosval)) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_44;
  v44 = fabs(v20);
  v45 = 2.22044605e-16;
  if (v44 >= 1.0)
    v45 = v44 * 2.22044605e-16;
  if (v44 <= v45)
  {
LABEL_39:
    v42 = __sincos_stret(-(v36 - v49 * 2.0) - v49);
    v43 = v42.__cosval / fabs(v42.__sinval);
  }
  else
  {
LABEL_44:
    v43 = (v19.__cosval * v18.__cosval * v37.__sinval + v18.__sinval * v37.__cosval) * sin(v39) / v20;
  }
  v46 = atan(v43 / v52);
  if (v14)
    v46 = -v46;
  *(double *)(a6 + 8) = v46;
  if (v41 <= 3.14159265)
  {
    if (v41 > -3.14159265)
      return;
    v47 = 6.28318531;
  }
  else
  {
    v47 = -6.28318531;
  }
  *(double *)a6 = v41 + v47;
}

void sub_100047404(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  __double2 v20;
  __double2 v21;
  __double2 v22;
  double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  long double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  double v48;
  double v49;
  unint64_t v50;
  double v51;

  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_QWORD *)(a6 + 32) = 0x3FF0000000000000;
  v9 = *a1;
  v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    v33 = vabdd_f64(v9, v10);
    v34 = fabs(v9);
    v35 = fabs(v10);
    if (v34 < v35)
      v34 = v35;
    v36 = v34 >= 1.0 ? v34 * 2.22044605e-16 : 2.22044605e-16;
    if (v33 > v36)
      goto LABEL_19;
  }
  v11 = *a2;
  v12 = *a4;
  if (*a2 != *a4)
  {
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    v14 = vabdd_f64(v11, v12);
    v15 = fabs(v11);
    v16 = fabs(v12);
    if (v15 < v16)
      v15 = v16;
    v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      v19 = *a5;
      v51 = a5[1];
      v20 = __sincos_stret(v10 - v9);
      v21 = __sincos_stret(*a2);
      v22 = __sincos_stret(*a4);
      v23 = v20.__cosval * (v21.__cosval * v22.__cosval) + v21.__sinval * v22.__sinval;
      v24 = -1.0;
      if (v23 >= -1.0)
      {
        v24 = v20.__cosval * (v21.__cosval * v22.__cosval) + v21.__sinval * v22.__sinval;
        if (v23 > 1.0)
          v24 = 1.0;
      }
      v25 = acos(v24);
      v26 = sin(v25);
      if (v26 != 0.0)
      {
        v27 = v26;
        if ((*(_QWORD *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_30;
        v28 = fabs(v26);
        v29 = 2.22044605e-16;
        if (v28 >= 1.0)
          v29 = v28 * 2.22044605e-16;
        if (v28 > v29)
        {
LABEL_30:
          v30 = (v19 - v51) / v19;
          if (v22.__cosval == 0.0)
            goto LABEL_31;
          if ((*(_QWORD *)&v22.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            goto LABEL_51;
          v40 = fabs(v22.__cosval);
          v41 = 2.22044605e-16;
          if (v40 >= 1.0)
            v41 = v40 * 2.22044605e-16;
          if (v40 <= v41)
          {
LABEL_31:
            v31 = 0.0;
            if (v22.__sinval >= 0.0)
              v32 = 0.0;
            else
              v32 = 3.14159265;
          }
          else
          {
LABEL_51:
            v32 = atan2(v20.__sinval, v21.__cosval * (v22.__sinval / v22.__cosval) - v21.__sinval * v20.__cosval);
            v42 = sin(v32 + v32);
            v30 = (v19 - v51) / v19;
            v31 = v30 * 0.5 * (v21.__cosval * v21.__cosval) * v42;
          }
          v43 = 0.0;
          if (v21.__cosval != 0.0)
          {
            if ((*(_QWORD *)&v21.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
              goto LABEL_58;
            v44 = fabs(v21.__cosval);
            v45 = 2.22044605e-16;
            if (v44 >= 1.0)
              v45 = v44 * 2.22044605e-16;
            if (v44 > v45)
            {
LABEL_58:
              v46 = v30;
              v47 = atan2(v20.__sinval, v22.__cosval * (v21.__sinval / v21.__cosval) - v22.__sinval * v20.__cosval);
              v43 = v46 * 0.5 * (v22.__cosval * v22.__cosval) * sin(v47 + v47);
            }
          }
          v48 = -(v31 - v43 * (v25 / v27));
          v49 = v32 - v48;
          *(double *)(a6 + 8) = v32 - v48;
          if (v32 >= 0.0)
          {
            if (v48 >= 0.0)
            {
              v50 = 0;
              if (v49 >= 0.0)
                return;
            }
            else
            {
              v50 = 0x400921FB54442D18;
              if (v49 <= 3.14159265)
                return;
            }
          }
          else if (v48 <= 0.0)
          {
            v50 = 0;
            if (v49 <= 0.0)
              return;
          }
          else
          {
            v50 = 0xC00921FB54442D18;
            if (v49 >= -3.14159265)
              return;
          }
          *(_QWORD *)(a6 + 8) = v50;
          return;
        }
      }
      if (v24 >= 0.0)
      {
        *(_QWORD *)(a6 + 8) = 0;
        *(_QWORD *)(a6 + 16) = 0;
      }
      else if (v21.__sinval == 1.0
             || (*(_QWORD *)&v21.__sinval & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
             && ((v37 = fabs(v21.__sinval + -1.0), v38 = fabs(v21.__sinval), v38 >= 1.0)
               ? (v39 = v38 * 2.22044605e-16)
               : (v39 = 2.22044605e-16),
                 v37 <= v39))
      {
        *(_QWORD *)(a6 + 8) = 0x400921FB54442D18;
      }
      else
      {
        *(_QWORD *)(a6 + 16) = 0x400921FB54442D18;
      }
    }
  }
}

void sub_100047818(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  __double2 v20;
  __double2 v21;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t v33;
  BOOL v34;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  BOOL v41;
  double v42;
  double v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  long double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  unint64_t v67;
  double v68;
  unint64_t v69;
  double v70;
  BOOL v71;
  double v72;
  BOOL v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double cosval;
  double sinval;
  double v80;
  double v81;

  *(_QWORD *)(a6 + 32) = 0x3FF0000000000000;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  v9 = *a1;
  v10 = *a3;
  if (*a1 != *a3)
  {
    if ((*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      goto LABEL_19;
    }
    v49 = vabdd_f64(v9, v10);
    v50 = fabs(v9);
    v51 = fabs(v10);
    if (v50 < v51)
      v50 = v51;
    v52 = v50 >= 1.0 ? v50 * 2.22044605e-16 : 2.22044605e-16;
    if (v49 > v52)
      goto LABEL_19;
  }
  v11 = *a2;
  v12 = *a4;
  if (*a2 != *a4)
  {
    v13 = (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
       && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v13)
      goto LABEL_19;
    v14 = vabdd_f64(v11, v12);
    v15 = fabs(v11);
    v16 = fabs(v12);
    if (v15 < v16)
      v15 = v16;
    v17 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 > v17)
    {
LABEL_19:
      v19 = *a5;
      v74 = a5[1];
      v81 = (v19 - v74) / v19;
      v80 = v10 - v9;
      v20 = __sincos_stret(v10 - v9);
      v21 = __sincos_stret(*a2);
      cosval = v21.__cosval;
      sinval = v21.__sinval;
      v22 = __sincos_stret(*a4);
      v76 = v22.__cosval;
      v77 = v22.__sinval;
      v23 = v20.__cosval * (v21.__cosval * v22.__cosval) + v21.__sinval * v22.__sinval;
      if (v23 > 1.0)
        v24 = 1.0;
      else
        v24 = v20.__cosval * (v21.__cosval * v22.__cosval) + v21.__sinval * v22.__sinval;
      if (v23 >= -1.0)
        v25 = v24;
      else
        v25 = -1.0;
      v26 = acos(v25);
      v27 = sin(v26);
      v28 = v27 * 3.0;
      v29 = 1.0 - v25;
      v30 = v25 + 1.0;
      v31 = 0.0;
      v32 = 0.0;
      if (1.0 - v25 != 0.0)
      {
        v33 = COERCE__INT64(fabs(1.0 - v25)) - 1;
        v34 = (unint64_t)(COERCE__INT64(fabs(1.0 - v25)) - 0x10000000000000) >> 53 > 0x3FE
           && v33 > 0xFFFFFFFFFFFFELL;
        if (v34 && *(_QWORD *)&v29 != 0)
          goto LABEL_38;
        v36 = fabs(v29);
        v37 = 2.22044605e-16;
        if (v36 >= 1.0)
          v37 = v36 * 2.22044605e-16;
        v13 = v36 > v37;
        v32 = 0.0;
        if (v13)
LABEL_38:
          v32 = (v26 + v28) / v29;
      }
      if (v30 == 0.0)
      {
        v38 = (v19 - v74) / v19;
      }
      else
      {
        v39 = COERCE__INT64(fabs(v25 + 1.0)) - 1;
        v41 = (unint64_t)(COERCE__INT64(fabs(v25 + 1.0)) - 0x10000000000000) >> 53 <= 0x3FE
           || v39 <= 0xFFFFFFFFFFFFELL
           || *(_QWORD *)&v30 == 0;
        v38 = (v19 - v74) / v19;
        if (!v41)
          goto LABEL_52;
        v42 = fabs(v30);
        v43 = 2.22044605e-16;
        if (v42 >= 1.0)
          v43 = v42 * 2.22044605e-16;
        if (v42 > v43)
LABEL_52:
          v31 = (v26 - v28) / v30;
      }
      *(long double *)a6 = v19
                         * (v26
                          + v38
                          * -0.25
                          * ((v21.__sinval + v22.__sinval) * (v21.__sinval + v22.__sinval) * v31
                           + v32 * ((v21.__sinval - v22.__sinval) * (v21.__sinval - v22.__sinval))));
      if (v27 == 0.0)
        goto LABEL_54;
      if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v45 = fabs(v27);
        v46 = 2.22044605e-16;
        if (v45 >= 1.0)
          v46 = v45 * 2.22044605e-16;
        if (v45 <= v46)
        {
LABEL_54:
          if (v25 >= 0.0)
          {
            *(_QWORD *)(a6 + 8) = 0;
            *(_QWORD *)(a6 + 16) = 0;
          }
          else
          {
            if (v21.__sinval == 1.0
              || (*(_QWORD *)&v21.__sinval & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && ((v53 = fabs(v21.__sinval + -1.0), v54 = fabs(v21.__sinval), v54 >= 1.0)
                ? (v55 = v54 * 2.22044605e-16)
                : (v55 = 2.22044605e-16),
                  v53 <= v55))
            {
              v44 = xmmword_1002E6CF0;
            }
            else
            {
              v44 = xmmword_1002E6CE0;
            }
            *(_OWORD *)(a6 + 8) = v44;
          }
          v56 = v74;
          goto LABEL_80;
        }
      }
      if (v22.__cosval == 0.0)
        goto LABEL_62;
      if ((*(_QWORD *)&v22.__cosval & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_86;
      v57 = fabs(v22.__cosval);
      v58 = 2.22044605e-16;
      if (v57 >= 1.0)
        v58 = v57 * 2.22044605e-16;
      if (v57 <= v58)
      {
LABEL_62:
        v47 = 0.0;
        if (v22.__sinval >= 0.0)
          v48 = 0.0;
        else
          v48 = 3.14159265;
        v60 = v21.__cosval;
      }
      else
      {
LABEL_86:
        v48 = atan2(v20.__sinval, v21.__cosval * (v22.__sinval / v22.__cosval) - v21.__sinval * v20.__cosval);
        v59 = sin(v48 + v48);
        v60 = v21.__cosval;
        v47 = v38 * 0.5 * (v60 * v60) * v59;
      }
      if (v60 == 0.0)
        goto LABEL_90;
      if ((*(_QWORD *)&v60 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        goto LABEL_96;
      v63 = fabs(v60);
      v64 = 2.22044605e-16;
      if (v63 >= 1.0)
        v64 = v63 * 2.22044605e-16;
      if (v63 <= v64)
      {
LABEL_90:
        v61 = 0.0;
        if (v21.__sinval >= 0.0)
          v62 = 0.0;
        else
          v62 = 3.14159265;
      }
      else
      {
LABEL_96:
        v62 = atan2(v20.__sinval, v22.__cosval * (v21.__sinval / v60) - v22.__sinval * v20.__cosval);
        v61 = v38 * 0.5 * (v22.__cosval * v22.__cosval) * sin(v62 + v62);
      }
      v65 = -(v47 - v61 * (v26 / v27));
      v66 = v48 - v65;
      *(double *)(a6 + 8) = v48 - v65;
      if (v48 >= 0.0)
      {
        if (v65 >= 0.0)
        {
          v67 = 0;
          if (v66 >= 0.0)
            goto LABEL_109;
          goto LABEL_108;
        }
        v67 = 0x400921FB54442D18;
        if (v66 > 3.14159265)
LABEL_108:
          *(_QWORD *)(a6 + 8) = v67;
      }
      else
      {
        if (v65 > 0.0)
        {
          v67 = 0xC00921FB54442D18;
          if (v66 >= -3.14159265)
            goto LABEL_109;
          goto LABEL_108;
        }
        v67 = 0;
        if (v66 > 0.0)
          goto LABEL_108;
      }
LABEL_109:
      v68 = v61 + -v47 * (v26 / v27);
      if (v62 >= 0.0)
      {
        v69 = 0x400921FB54442D18;
        v72 = 3.14159265 - v62 - v68;
        *(double *)(a6 + 16) = v72;
        if (v68 >= 0.0)
        {
          v69 = 0;
          v71 = v72 < 0.0;
LABEL_118:
          v56 = v74;
          if (!v71)
            goto LABEL_80;
          goto LABEL_120;
        }
        v73 = v72 <= 3.14159265;
      }
      else
      {
        v69 = 0xC00921FB54442D18;
        v70 = -3.14159265 - v62 - v68;
        *(double *)(a6 + 16) = v70;
        if (v68 > 0.0)
        {
          v71 = v70 < -3.14159265;
          goto LABEL_118;
        }
        v69 = 0;
        v73 = v70 <= 0.0;
      }
      v56 = v74;
      if (v73)
      {
LABEL_80:
        v75 = v56;
        sub_100047E20(&v80, &sinval, &cosval, &v77, &v76, (double *)(a6 + 8), (long double *)(a6 + 16), &v75, &v81, (double *)(a6 + 24), (double *)(a6 + 32));
        return;
      }
LABEL_120:
      *(_QWORD *)(a6 + 16) = v69;
      goto LABEL_80;
    }
  }
}

void sub_100047E20(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, long double *a7, double *a8, double *a9, double *a10, double *a11)
{
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double sinval;
  double cosval;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __double2 v27;
  long double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  long double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  long double v42;
  long double v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  double v48;

  v15 = *a9;
  v16 = 1.0 - *a9;
  v17 = v16 * *a2;
  v18 = v16 * *a4;
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(v16 * *a2)) > 0x7FEFFFFFFFFFFFFFLL)
      goto LABEL_17;
    v23 = fabs(v17);
    v24 = 2.22044605e-16;
    if (v23 >= 1.0)
      v24 = v23 * 2.22044605e-16;
    if (v23 > v24)
      goto LABEL_17;
  }
  if (v18 == 0.0)
    goto LABEL_3;
  if (COERCE_UNSIGNED_INT64(fabs(v16 * *a4)) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_17;
  v25 = fabs(v18);
  v26 = 2.22044605e-16;
  if (v25 >= 1.0)
    v26 = v25 * 2.22044605e-16;
  if (v25 <= v26)
  {
LABEL_3:
    v19 = *a6;
    if (*a6 < -3.14159265 || v19 > 3.14159265)
      sub_1000492CC();
    v22 = __sincos_stret(*a1 / v16);
    cosval = v22.__cosval;
    sinval = v22.__sinval;
    if (v19 < 0.0)
      sinval = -v22.__sinval;
    *a10 = *a8 * sinval;
  }
  else
  {
LABEL_17:
    v48 = v15 * (2.0 - v15) / (v16 * v16);
    v27 = __sincos_stret(*a6);
    v28 = cos(*a7);
    v29 = sqrt(v17 * v17 + *a3 * *a3);
    v30 = v17 / v29;
    v31 = *a3 / v29;
    v32 = sqrt(v18 * v18 + *a5 * *a5);
    v33 = v18 / v32;
    v34 = *a5 / v32;
    v35 = v28 * v34;
    v36 = sqrt(v30 * v30 + v27.__cosval * v31 * (v27.__cosval * v31));
    v37 = v30 / v36;
    v38 = v27.__cosval * v31 / v36;
    v39 = v33 * v33;
    v40 = sqrt(v33 * v33 + v35 * v35);
    v41 = v33 / v40;
    v42 = v35 / v40;
    v46 = v30 * v30;
    v47 = v30 / v36 * (v33 / v40) + v38 * (v35 / v40);
    v43 = v15
        * (1.0 - v27.__sinval * v31 * (v27.__sinval * v31))
        * (atan2(v38 * (v33 / v40) - v30 / v36 * (v35 / v40), v47)
         + (v33 / v40 * (v42 + v42) - v30 / v36 * (v38 + v38)) * -0.5);
    v44 = sqrt(v48 * v46 + 1.0);
    v45 = sqrt(v48 * v39 + 1.0);
    *a10 = *a8 * (v45 * (v38 * v41) - v44 * (v37 * v42) + -(v38 * v42) * v43);
    cosval = v47 + v37 * ((v31 + v34) * (v48 * (v31 - v34)) / (v44 + v45) * v41 - v42 * v43) / v44;
  }
  *a11 = cosval;
}

void *sub_1000480EC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_10000A128();
  return operator new(24 * a2);
}

uint64_t sub_100048130(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (__int128 *)(result + 24 * (v4 >> 1));
    v7 = *(double *)(a2 - 24);
    if (*(double *)v6 <= v7)
    {
      if (*(double *)v6 != v7)
        return result;
      v8 = *(_QWORD *)(a2 - 16);
      if (*(_QWORD *)(result + 24 * v5 + 8) <= v8)
        return result;
    }
    else
    {
      v8 = *(_QWORD *)(a2 - 16);
    }
    v9 = *(_QWORD *)(a2 - 8);
    v10 = *v6;
    *(_QWORD *)(a2 - 8) = *((_QWORD *)v6 + 2);
    *(_OWORD *)(a2 - 24) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = (__int128 *)(result + 24 * v5);
        if (*(double *)v11 <= v7 && (*(double *)v11 != v7 || *(_QWORD *)(result + 24 * v5 + 8) <= v8))
          break;
        v13 = *v11;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v11 + 2);
        *v6 = v13;
        v6 = (__int128 *)(result + 24 * v5);
        if (v12 <= 1)
          goto LABEL_12;
      }
    }
    v11 = v6;
LABEL_12:
    *(double *)v11 = v7;
    *((_QWORD *)v11 + 1) = v8;
    *((_QWORD *)v11 + 2) = v9;
  }
  return result;
}

uint64_t sub_1000481F8(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  char v8;
  double v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  double *v25;

  v2 = a2 - result;
  if (a2 - result >= 32)
  {
    v3 = v2 >> 4;
    v4 = (v2 >> 4) - 1;
    v5 = (double *)(result + 16 * v4);
    v6 = *v5;
    v7 = *((_QWORD *)v5 + 1);
    v8 = __clz(v3);
    v9 = *v5;
    v10 = (v3 - 2) >> 1;
    v11 = *(double *)(result + 16 * v10);
    if ((v8 & 1) != 0)
    {
      if (v11 < *v5)
      {
        *v5 = v11;
        *(_QWORD *)(result + 16 * v4 + 8) = *(_QWORD *)(result + 16 * v10 + 8);
        if (v4 >= 7)
        {
          while (1)
          {
            v16 = v10 - 3;
            v13 = (v10 - 3) >> 2;
            v17 = *(double *)(result + 16 * v13);
            if (v17 >= v9)
              break;
            v18 = result + 16 * v10;
            *(double *)v18 = v17;
            *(_QWORD *)(v18 + 8) = *(_QWORD *)(result + 16 * v13 + 8);
            v10 = v13;
            if (v16 <= 0xB)
              goto LABEL_23;
          }
        }
        goto LABEL_13;
      }
      if (v4 >= 3)
      {
        while (1)
        {
          v22 = v4 - 3;
          v13 = (v4 - 3) >> 2;
          v23 = *(double *)(result + 16 * v13);
          if (v23 <= v9)
            break;
          v24 = result + 16 * v4;
          *(double *)v24 = v23;
          *(_QWORD *)(v24 + 8) = *(_QWORD *)(result + 16 * v13 + 8);
          v4 = v13;
          if (v22 <= 0xB)
            goto LABEL_23;
        }
      }
    }
    else
    {
      if (v11 > *v5)
      {
        *v5 = v11;
        *(_QWORD *)(result + 16 * v4 + 8) = *(_QWORD *)(result + 16 * v10 + 8);
        if (v4 >= 7)
        {
          while (1)
          {
            v12 = v10 - 3;
            v13 = (v10 - 3) >> 2;
            v14 = *(double *)(result + 16 * v13);
            if (v14 <= v9)
              break;
            v15 = result + 16 * v10;
            *(double *)v15 = v14;
            *(_QWORD *)(v15 + 8) = *(_QWORD *)(result + 16 * v13 + 8);
            v10 = v13;
            if (v12 <= 0xB)
              goto LABEL_23;
          }
        }
LABEL_13:
        v13 = v10;
LABEL_23:
        v25 = (double *)(result + 16 * v13);
        *v25 = v6;
        *((_QWORD *)v25 + 1) = v7;
        return result;
      }
      if (v4 >= 3)
      {
        while (1)
        {
          v19 = v4 - 3;
          v13 = (v4 - 3) >> 2;
          v20 = *(double *)(result + 16 * v13);
          if (v20 >= v9)
            break;
          v21 = result + 16 * v4;
          *(double *)v21 = v20;
          *(_QWORD *)(v21 + 8) = *(_QWORD *)(result + 16 * v13 + 8);
          v4 = v13;
          if (v19 <= 0xB)
            goto LABEL_23;
        }
      }
    }
    v13 = v4;
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_10004838C(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  uint64_t v28;

  if (a3 >= 7)
  {
    v6 = (unint64_t)(a3 - 3) >> 2;
    if (v6 <= a2)
    {
LABEL_19:
      if (a2 > (uint64_t)((unint64_t)(a3 - 2) >> 1))
        goto LABEL_34;
      v11 = (2 * a2) | 1;
      if ((unint64_t)a3 >= 3 && a2 <= (uint64_t)((unint64_t)(a3 - 3) >> 1))
      {
        v17 = 2 * a2 + 2;
        if ((unint64_t)a3 >= 4 && a2 <= (uint64_t)((unint64_t)(a3 - 4) >> 2))
        {
          v18 = (2 * v11) | 1;
          if ((unint64_t)a3 >= 5 && a2 <= (uint64_t)((unint64_t)(a3 - 5) >> 2))
          {
            v24 = 2 * v11;
            v25 = (double *)(result + 16 * v18);
            v26 = v25[2];
            v27 = *v25;
            v11 = v24 + 2;
            if (v26 > v27)
              v11 = v18;
            if ((unint64_t)a3 >= 6)
            {
              v28 = v24 + 3;
              if (a2 <= (uint64_t)((unint64_t)(a3 - 6) >> 2))
                v17 = v28;
            }
          }
          else
          {
            v11 = (2 * v11) | 1;
          }
        }
        if (*(double *)(result + 16 * v17) <= *(double *)(result + 16 * v11))
          v11 = v17;
      }
      v19 = *(double *)(result + 16 * v11);
      if (*(double *)&a4 <= v19)
      {
LABEL_34:
        v15 = *(double *)&a4;
        v11 = a2;
      }
      else
      {
        v20 = result + 16 * a2;
        *(double *)v20 = v19;
        *(_QWORD *)(v20 + 8) = *(_QWORD *)(result + 16 * v11 + 8);
        if (v11 < 3
          || a2 > (uint64_t)((unint64_t)(v11 - 3) >> 2)
          || (v21 = result + 16 * ((unint64_t)(v11 - 1) >> 1),
              v15 = *(double *)v21,
              *(double *)&a4 <= *(double *)v21))
        {
          v15 = *(double *)&a4;
        }
        else
        {
          *(double *)v21 = *(double *)&a4;
          v22 = *(_QWORD *)(v21 + 8);
          *(_QWORD *)(v21 + 8) = a5;
          a5 = v22;
        }
      }
      goto LABEL_36;
    }
    while (1)
    {
      v7 = (4 * a2) | 3;
      v8 = (double *)(result + 16 * v7);
      if (v8[2] > *v8)
        v9 = (4 * a2) | 3;
      else
        v9 = v7 + 1;
      if (v8[6] <= v8[4])
        v10 = 3;
      else
        v10 = 2;
      v11 = v10 + v7;
      if (*(double *)(result + 16 * v11) > *(double *)(result + 16 * v9))
        v11 = v9;
      v12 = *(double *)(result + 16 * v11);
      if (*(double *)&a4 <= v12)
        break;
      v13 = result + 16 * a2;
      *(double *)v13 = v12;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(result + 16 * v11 + 8);
      v14 = (double *)(result + 16 * ((v11 - 1) >> 1));
      v15 = *v14;
      if (*(double *)&a4 <= *v14)
      {
        v15 = *(double *)&a4;
      }
      else
      {
        *v14 = *(double *)&a4;
        v16 = *((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = a5;
        a5 = v16;
        *(double *)&a4 = v15;
      }
      a2 = v11;
      if (v11 >= v6)
        goto LABEL_18;
    }
  }
  v15 = *(double *)&a4;
  v11 = a2;
LABEL_18:
  a2 = v11;
  *(double *)&a4 = v15;
  if (a3 >= 2)
    goto LABEL_19;
LABEL_36:
  v23 = (double *)(result + 16 * v11);
  *v23 = v15;
  *((_QWORD *)v23 + 1) = a5;
  return result;
}

uint64_t sub_100048598(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  uint64_t v28;

  if (a3 >= 7)
  {
    v6 = (unint64_t)(a3 - 3) >> 2;
    if (v6 <= a2)
    {
LABEL_19:
      if (a2 > (uint64_t)((unint64_t)(a3 - 2) >> 1))
        goto LABEL_34;
      v11 = (2 * a2) | 1;
      if ((unint64_t)a3 >= 3 && a2 <= (uint64_t)((unint64_t)(a3 - 3) >> 1))
      {
        v17 = 2 * a2 + 2;
        if ((unint64_t)a3 >= 4 && a2 <= (uint64_t)((unint64_t)(a3 - 4) >> 2))
        {
          v18 = (2 * v11) | 1;
          if ((unint64_t)a3 >= 5 && a2 <= (uint64_t)((unint64_t)(a3 - 5) >> 2))
          {
            v24 = 2 * v11;
            v25 = (double *)(result + 16 * v18);
            v26 = *v25;
            v27 = v25[2];
            v11 = v24 + 2;
            if (v26 > v27)
              v11 = v18;
            if ((unint64_t)a3 >= 6)
            {
              v28 = v24 + 3;
              if (a2 <= (uint64_t)((unint64_t)(a3 - 6) >> 2))
                v17 = v28;
            }
          }
          else
          {
            v11 = (2 * v11) | 1;
          }
        }
        if (*(double *)(result + 16 * v11) <= *(double *)(result + 16 * v17))
          v11 = v17;
      }
      v19 = *(double *)(result + 16 * v11);
      if (v19 <= *(double *)&a4)
      {
LABEL_34:
        v15 = *(double *)&a4;
        v11 = a2;
      }
      else
      {
        v20 = result + 16 * a2;
        *(double *)v20 = v19;
        *(_QWORD *)(v20 + 8) = *(_QWORD *)(result + 16 * v11 + 8);
        if (v11 < 3
          || a2 > (uint64_t)((unint64_t)(v11 - 3) >> 2)
          || (v21 = result + 16 * ((unint64_t)(v11 - 1) >> 1),
              v15 = *(double *)v21,
              *(double *)v21 <= *(double *)&a4))
        {
          v15 = *(double *)&a4;
        }
        else
        {
          *(double *)v21 = *(double *)&a4;
          v22 = *(_QWORD *)(v21 + 8);
          *(_QWORD *)(v21 + 8) = a5;
          a5 = v22;
        }
      }
      goto LABEL_36;
    }
    while (1)
    {
      v7 = (4 * a2) | 3;
      v8 = (double *)(result + 16 * v7);
      if (*v8 > v8[2])
        v9 = (4 * a2) | 3;
      else
        v9 = v7 + 1;
      if (v8[4] <= v8[6])
        v10 = 3;
      else
        v10 = 2;
      v11 = v10 + v7;
      if (*(double *)(result + 16 * v9) > *(double *)(result + 16 * v11))
        v11 = v9;
      v12 = *(double *)(result + 16 * v11);
      if (v12 <= *(double *)&a4)
        break;
      v13 = result + 16 * a2;
      *(double *)v13 = v12;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(result + 16 * v11 + 8);
      v14 = (double *)(result + 16 * ((v11 - 1) >> 1));
      v15 = *v14;
      if (*v14 <= *(double *)&a4)
      {
        v15 = *(double *)&a4;
      }
      else
      {
        *v14 = *(double *)&a4;
        v16 = *((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = a5;
        a5 = v16;
        *(double *)&a4 = v15;
      }
      a2 = v11;
      if (v11 >= v6)
        goto LABEL_18;
    }
  }
  v15 = *(double *)&a4;
  v11 = a2;
LABEL_18:
  a2 = v11;
  *(double *)&a4 = v15;
  if (a3 >= 2)
    goto LABEL_19;
LABEL_36:
  v23 = (double *)(result + 16 * v11);
  *v23 = v15;
  *((_QWORD *)v23 + 1) = a5;
  return result;
}

_QWORD *sub_1000487A4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 - (uint64_t)result >= 32)
  {
    v4 = *(_QWORD *)(v3 - 16);
    v5 = *(_QWORD *)(v3 - 8);
    *(_QWORD *)(v3 - 16) = *result;
    *(_QWORD *)(v3 - 8) = result[1];
    result = (_QWORD *)sub_10004838C((uint64_t)result, 0, ((unint64_t)(v3 - (_QWORD)result) >> 4) - 1, v4, v5);
    v3 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v3 - 16;
  return result;
}

__n128 sub_100048804(__n128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  __n128 result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 = (__n128 *)((char *)a1 + 24 * v3 + 24);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = a1[1].n128_f64[1];
      if (a1->n128_f64[0] > v10 || a1->n128_f64[0] == v10 && v6->n128_u64[3 * v7 + 1] > a1[2].n128_u64[0])
      {
        a1 = (__n128 *)((char *)a1 + 24);
        v3 = v9;
      }
    }
    result = *a1;
    v6[1].n128_u64[0] = a1[1].n128_u64[0];
    *v6 = result;
  }
  while (v3 <= v5);
  return result;
}

void sub_100048894()
{
  operator new();
}

void sub_1000488E8()
{
  operator delete();
}

uint64_t sub_10004890C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = off_10034DE88;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 4);
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_100048B58((_QWORD *)(a1 + 48), *((const void **)a2 + 5), *((_QWORD *)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_100048C20((char *)(a1 + 80), *((__int128 **)a2 + 9), *((__int128 **)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 4);
  *(_OWORD *)(a1 + 112) = *(__int128 *)((char *)a2 + 104);
  return a1;
}

void sub_1000489B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000489CC(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10034DE88;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100048A1C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_10034DE88;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[6];
  if (v3)
  {
    a1[7] = v3;
    operator delete(v3);
  }
  operator delete();
}

void sub_100048A7C()
{
  operator new();
}

void sub_100048AC0()
{
  operator delete();
}

BOOL sub_100048AE4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) == 0;
}

uint64_t sub_100048AF4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

_QWORD *sub_100048AFC(uint64_t a1)
{
  return sub_100044138((_QWORD *)(a1 + 8));
}

BOOL sub_100048B04(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;

  if (!v3)
    sub_1000492F4();
  return *(_QWORD *)(a1 + 112) == v3[14];
}

_QWORD *sub_100048B58(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100048BD0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100048BB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100048BD0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_10000D5F8();
  result = (char *)sub_1000480EC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_100048C20(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_10003C688(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_100048C74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100048C90(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "scoped_ptr.hpp", 105, "px != 0");
  return result;
}

uint64_t sub_100048CD0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator*", "scoped_ptr.hpp", 99, "px != 0");
  return result;
}

void sub_100048D10(uint64_t a1, _QWORD *a2)
{
  _DWORD *v3;
  uint64_t v4[2];

  if (a2)
  {
    v3 = (_DWORD *)a2[2];
    if (v3)
    {
      v4[0] = a2[2];
      v4[1] = (uint64_t)a2;
      sub_10004131C(v3, v4);
      a2[2] = 0;
    }
    *a2 = 0;
    a2[1] = 0;
    operator delete();
  }
}

void sub_100048D70(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 94, a4);
}

void sub_100048D78(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 79, a4);
}

void sub_100048D80(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 367, a4);
}

void sub_100048D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100048D80("post_traverse", "insert.hpp", a3, "(m_traverse_data.current_is_root() || &n == &rtree::get<Node>(*m_traverse_data.current_element().second))&&(\"if node isn't the root current_child_index should be valid\")");
}

void sub_100048DAC()
{
  __assert_rtn("operator()", "insert.hpp", 622, "(base::m_level == base::m_traverse_data.current_level || base::m_level == (std::numeric_limits<size_t>::max)())&&(\"unexpected level\")");
}

void sub_100048DD4()
{
  __assert_rtn("operator()", "insert.hpp", 620, "(base::m_traverse_data.current_level == base::m_leafs_level)&&(\"unexpected level\")");
}

void sub_100048DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100048D78("check_capacity", "varray.hpp", a3, "(s <= v.capacity())&&(\"size too big\")");
}

void sub_100048E20()
{
  __assert_rtn("current_element", "insert.hpp", 259, "(parent)&&(\"null pointer\")");
}

void sub_100048E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100048D70("check_index", "varray.hpp", a3, "(i < v.size())&&(\"index out of bounds\")");
}

void sub_100048E6C()
{
  __assert_rtn("split", "insert.hpp", 407, "(additional_nodes.size() == 1)&&(\"unexpected number of additional nodes\")");
}

void sub_100048E94()
{
  __assert_rtn("apply", "redistribute_elements.hpp", 375, "(elements2.empty())&&(\"unexpected container state\")");
}

void sub_100048EBC()
{
  __assert_rtn("apply", "redistribute_elements.hpp", 201, "(elements.size() == elements_count)&&(\"unexpected number of elements\")");
}

void sub_100048EE4()
{
  __assert_rtn("apply", "redistribute_elements.hpp", 360, "(elements1.size() == elements1_count)&&(\"unexpected number of elements\")");
}

void sub_100048F0C()
{
  __assert_rtn("apply", "normalize_spheroidal_coordinates.hpp", 312, "! math::larger(longitude, constants::max_longitude())");
}

void sub_100048F34()
{
  __assert_rtn("apply", "normalize_spheroidal_coordinates.hpp", 311, "math::smaller(constants::min_longitude(), longitude)");
}

void sub_100048F5C()
{
  __assert_rtn("apply", "normalize_spheroidal_box_coordinates.hpp", 95, "! math::larger(longitude2 - longitude1, constants::period())");
}

void sub_100048F84()
{
  __assert_rtn("apply", "normalize_spheroidal_box_coordinates.hpp", 93, "! math::smaller(longitude1, constants::min_longitude())");
}

void sub_100048FAC()
{
  __assert_rtn("apply", "normalize_spheroidal_box_coordinates.hpp", 92, "! math::larger(longitude1, longitude2)");
}

void sub_100048FD4()
{
  __assert_rtn("operator()", "destroy.hpp", 62, "(&l == &rtree::get<leaf>(*m_current_node))&&(\"invalid pointers\")");
}

void sub_100048FFC()
{
  __assert_rtn("operator()", "destroy.hpp", 41, "(&n == &rtree::get<internal_node>(*m_current_node))&&(\"invalid pointers\")");
}

void sub_100049024()
{
  __assert_rtn("operator()", "insert.hpp", 610, "(base::m_traverse_data.current_level < base::m_level)&&(\"unexpected level\")");
}

void sub_10004904C()
{
  __assert_rtn("operator()", "insert.hpp", 609, "(base::m_traverse_data.current_level < base::m_leafs_level)&&(\"unexpected level\")");
}

void sub_100049074()
{
  __assert_rtn("apply", "insert.hpp", 68, "(!children.empty())&&(\"can't choose the next node if children are empty\")");
}

void sub_10004909C()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 140, "! math::smaller(max_gap_left, constants::min_longitude())");
}

void sub_1000490C4()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 138, "! math::larger(max_gap_right, constants::max_longitude())");
}

void sub_1000490EC()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 136, "! math::larger(max_gap_left, max_gap_right)");
}

void sub_100049114()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 133, "! math::smaller(lon_min, constants::min_longitude())");
}

void sub_10004913C()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 131, "! math::larger(lon_max, constants::max_longitude())");
}

void sub_100049164()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 129, "! math::larger(lon_min, lon_max)");
}

void sub_10004918C()
{
  __assert_rtn("apply", "max_interval_gap.hpp", 106, "queue.empty()");
}

void sub_1000491B4()
{
  __assert_rtn("apply", "max_interval_gap.hpp", 143, "queue.top().is_start_event()");
}

void sub_1000491DC()
{
  __assert_rtn("apply", "redistribute_elements.hpp", 114, "(elements.size() == elements_count)&&(\"unexpected number of elements\")");
}

void sub_100049204()
{
  __assert_rtn("increment", "distance_query.hpp", 454, "(m_neighbors_count + m_neighbors.size() <= max_count())&&(\"unexpected neighbors count\")");
}

void sub_10004922C()
{
  __assert_rtn("apply", "distance_cross_track_point_box.hpp", 138, "lon_midway >= -pi && lon_midway <= pi");
}

void sub_100049254()
{
  __assert_rtn("apply", "distance_cross_track_point_box.hpp", 168, "lon_midway >= -pi && lon_midway <= pi");
}

void sub_10004927C()
{
  __assert_rtn("apply", "distance_cross_track_point_box.hpp", 117, "plat >= lat_min && plat <= lat_max");
}

void sub_1000492A4()
{
  __assert_rtn("apply", "thomas_direct.hpp", 85, "-pi <= azimuth12 && azimuth12 <= pi");
}

void sub_1000492CC()
{
  __assert_rtn("apply", "differential_quantities.hpp", 77, "(-math::pi<CT>() <= azimuth && azimuth <= math::pi<CT>())");
}

void sub_1000492F4()
{
  __assert_rtn("equals", "query_iterators.hpp", 251, "(p)&&(\"iterators can't be compared\")");
}

void CLKappaDeescalatorWaterProxy::CLKappaDeescalatorWaterProxy(CLKappaDeescalatorWaterProxy *this)
{
  char *v2;

  *(_QWORD *)this = off_100347FF0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 9) = 0;
  *((_BYTE *)this + 40) = 0;
  v2 = (char *)sub_100007088((_QWORD *)this + 6, "none");
  *(_QWORD *)this = &off_10034DEF8;
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  if (*((char *)this + 71) < 0)
  {
    *((_QWORD *)this + 7) = 5;
    v2 = (char *)*((_QWORD *)this + 6);
  }
  else
  {
    *((_BYTE *)this + 71) = 5;
  }
  strcpy(v2, "de-WP");
}

unint64_t CLKappaDeescalatorWaterProxy::setupForceControls(CLKappaDeescalatorWaterProxy *this)
{
  unint64_t result;

  *((_BYTE *)this + 40) = CLKappaDeescalator::shouldForceNoop(this, "ForceWaterProxy");
  result = CLKappaDeescalator::shouldForceDeescalate(this, "ForceWaterProxy");
  *((_DWORD *)this + 9) = result;
  return result;
}

void CLKappaDeescalatorWaterProxy::setConfig(CLKappaDeescalatorWaterProxy *this)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  NSObject *v16;
  int v17;
  double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  double v23;
  _DWORD v24[2];
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "WaterProxyConfig", *((unsigned __int8 *)this + 32)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  *((_BYTE *)this + 80) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 0, v2, 0);
  LODWORD(v4) = 1148846080;
  LODWORD(v5) = 0;
  LODWORD(v6) = 25.0;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v2, v5, v4, v6);
  *((_DWORD *)this + 21) = v7;
  LODWORD(v8) = 1203982336;
  LODWORD(v9) = 1120403456;
  LODWORD(v10) = 0;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 2, v2, v10, v8, v9);
  *((_DWORD *)this + 22) = v11;
  *((_BYTE *)this + 92) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 3, v2, 1);
  *((_BYTE *)this + 93) = objc_msgSend(v3, "algorithmBoolNumber:inArrayForKey:defaultValue:", 4, v2, 0);
  *((_DWORD *)this + 24) = objc_msgSend(v3, "algorithmIntegerNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 5, v2, 0, 1600, 500);
  LODWORD(v12) = 1058642330;
  LODWORD(v13) = 0;
  LODWORD(v14) = 1.0;
  objc_msgSend(v3, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 6, v2, v13, v14, v12);
  *((_DWORD *)this + 25) = v15;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034DF80);
  v16 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *((unsigned __int8 *)this + 80);
    v18 = *((float *)this + 21);
    v19 = *((float *)this + 22);
    v20 = *((unsigned __int8 *)this + 92);
    v21 = *((unsigned __int8 *)this + 93);
    v22 = *((_DWORD *)this + 24);
    v23 = *((float *)this + 25);
    v24[0] = 67241728;
    v24[1] = v17;
    v25 = 2050;
    v26 = v18;
    v27 = 2050;
    v28 = v19;
    v29 = 1026;
    v30 = v20;
    v31 = 1026;
    v32 = v21;
    v33 = 1026;
    v34 = v22;
    v35 = 2050;
    v36 = v23;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[WP] config-1,%{public}d,config-2,%{public}f,config-3,%{public}f,config-4,%{public}d,config-5,%{public}d,config-6,%{public}d,config-7,%{public}f", (uint8_t *)v24, 0x38u);
  }

}

void sub_10004963C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100049660()
{
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034DF80);
  return (id)qword_100387318;
}

void CLKappaDeescalatorWaterProxy::updateWithCurrentLocation(CLKappaDeescalatorWaterProxy *this, const CSSPUGps_Struct *a2)
{
  int demNumContiguousFlatPoints;
  __int16 v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  double v11;
  double demConfidence;
  double v13;
  double horizontalAccuracy;
  int v15;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;

  demNumContiguousFlatPoints = a2->demNumContiguousFlatPoints;
  if (demNumContiguousFlatPoints < 0)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034DF80);
    v6 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      v7 = a2->demNumContiguousFlatPoints;
      v16 = 67109120;
      LODWORD(v17) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[WP] rejecting DEM error = %d", (uint8_t *)&v16, 8u);
    }
  }
  else if (!*((_BYTE *)this + 77) && a2->horizontalAccuracy < *((float *)this + 21))
  {
    if (demNumContiguousFlatPoints <= *((_DWORD *)this + 24) || a2->demConfidence <= *((float *)this + 25))
      v5 = 256;
    else
      v5 = 257;
    *((_WORD *)this + 38) = v5;
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034DF80);
    v8 = (id)qword_100387318;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if (!*((_BYTE *)this + 77))
        sub_100049F7C();
      v9 = *((_DWORD *)this + 24);
      v10 = a2->demNumContiguousFlatPoints;
      v11 = *((float *)this + 25);
      demConfidence = a2->demConfidence;
      v13 = *((float *)this + 21);
      horizontalAccuracy = a2->horizontalAccuracy;
      v15 = *((unsigned __int8 *)this + 76);
      v16 = 134219520;
      v17 = horizontalAccuracy;
      v18 = 2048;
      v19 = v13;
      v20 = 1024;
      v21 = v10;
      v22 = 1024;
      v23 = v9;
      v24 = 2048;
      v25 = demConfidence;
      v26 = 2048;
      v27 = v11;
      v28 = 1024;
      v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[WP] gps %f/%f flat %d/%d conf %f/%f %df", (uint8_t *)&v16, 0x3Cu);
    }

  }
}

void sub_1000498B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CLKappaDeescalatorWaterProxy::updateWithRoadInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  __int16 v12;
  NSObject *v13;
  int v14;
  uint64_t v15;

  if (!*(_QWORD *)(a2 + 96))
  {
    if (*(_BYTE *)(a1 + 73))
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10034DF80);
      v9 = qword_100387318;
      if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
        return;
      LOWORD(v14) = 0;
      v5 = "[WP] road info determined, exiting";
      goto LABEL_11;
    }
    if (*(_WORD *)(a2 + 24))
    {
      if (*(double *)(a2 + 8) <= *(float *)(a1 + 88))
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_10034DF80);
        v13 = qword_100387318;
        if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[WP] roads nearby", (uint8_t *)&v14, 2u);
        }
        v12 = 257;
        goto LABEL_31;
      }
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10034DF80);
      v10 = qword_100387318;
      if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
      {
LABEL_25:
        v12 = 256;
LABEL_31:
        *(_WORD *)(a1 + 72) = v12;
        return;
      }
      LOWORD(v14) = 0;
      v11 = "[WP] no roads nearby";
    }
    else
    {
      if (!*(_BYTE *)(a1 + 93))
      {
        if (qword_100387310 != -1)
          dispatch_once(&qword_100387310, &stru_10034DF80);
        v9 = qword_100387318;
        if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
          return;
        LOWORD(v14) = 0;
        v5 = "[WP] no road info, ambiguous";
LABEL_11:
        v6 = v9;
        v7 = 2;
        goto LABEL_12;
      }
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10034DF80);
      v10 = qword_100387318;
      if (!os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
        goto LABEL_25;
      LOWORD(v14) = 0;
      v11 = "[WP] empty road list, not near road";
    }
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v14, 2u);
    goto LABEL_25;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034DF80);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a2 + 96);
    v14 = 134217984;
    v15 = v4;
    v5 = "[WP] rejecting road info with error = %ld";
    v6 = v3;
    v7 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v14, v7);
  }
}

void CLKappaDeescalatorWaterProxy::updateWithTrigger(CLKappaDeescalatorWaterProxy *this, const TriggerSample *a2)
{
  NSObject *v3;
  uint8_t v4[16];

  if (a2->btHint == 1)
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034DF80);
    v3 = qword_100387318;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[WP] btHint is set", v4, 2u);
    }
    *((_WORD *)this + 37) = 257;
  }
}

uint64_t CLKappaDeescalatorWaterProxy::onEvaluateFollowingEscalation(CLKappaDeescalatorWaterProxy *this)
{
  NSObject *v1;
  uint64_t v2;
  const char *v3;
  uint8_t *v4;
  id v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  id v10;
  __int16 v11;
  __int16 v12;
  uint8_t v13[2];
  __int16 v14;
  uint8_t buf[2];
  __int16 v16;
  __int16 v17;

  if (!*((_BYTE *)this + 80))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034DF80);
    v1 = qword_100387318;
    v2 = 1;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      v17 = 0;
      v3 = "[WP] water proxy disabled";
      v4 = (uint8_t *)&v17;
      goto LABEL_24;
    }
    return v2;
  }
  if (*((_BYTE *)this + 75) && *((_BYTE *)this + 74))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034DF80);
    v1 = qword_100387318;
    v2 = 1;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      v16 = 0;
      v3 = "[WP] bt hint set, nothing to do";
      v4 = (uint8_t *)&v16;
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, v3, v4, 2u);
      return v2;
    }
    return v2;
  }
  if (!*((_BYTE *)this + 77) || !*((_BYTE *)this + 76))
  {
    if (qword_100387310 != -1)
      dispatch_once(&qword_100387310, &stru_10034DF80);
    v1 = qword_100387318;
    v2 = 1;
    if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v3 = "[WP] dem condition not met";
      v4 = buf;
      goto LABEL_24;
    }
    return v2;
  }
  if (!*((_BYTE *)this + 73))
  {
    if (*((_BYTE *)this + 92))
    {
      if (qword_100387310 != -1)
        dispatch_once(&qword_100387310, &stru_10034DF80);
      v1 = qword_100387318;
      v2 = 1;
      if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
      {
        v14 = 0;
        v3 = "[WP] no road information available, confirmation required";
        v4 = (uint8_t *)&v14;
        goto LABEL_24;
      }
      return v2;
    }
    v10 = sub_100049660();
    v7 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      v8 = "[WP] no road information available, de-escalating";
      v9 = v13;
      goto LABEL_35;
    }
LABEL_36:

    return 4;
  }
  if (!*((_BYTE *)this + 72))
  {
    v6 = sub_100049660();
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v11 = 0;
      v8 = "[WP] no roads nearby, deescalate";
      v9 = (uint8_t *)&v11;
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v8, v9, 2u);
      goto LABEL_36;
    }
    goto LABEL_36;
  }
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034DF80);
  v1 = qword_100387318;
  v2 = 1;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_INFO))
  {
    v12 = 0;
    v3 = "[WP] roads nearby, done";
    v4 = (uint8_t *)&v12;
    goto LABEL_24;
  }
  return v2;
}

void sub_100049F28(void **a1)
{
  CLKappaDeescalator::~CLKappaDeescalator(a1);
  operator delete();
}

void sub_100049F4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_100049F7C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void sub_10004A298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10004A2D0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "CoreAnalytics");
  v2 = (void *)qword_1003873C8;
  qword_1003873C8 = (uint64_t)v1;

}

void KappaCompanionDeviceInfo::KappaCompanionDeviceInfo(KappaCompanionDeviceInfo *this)
{
  *(_QWORD *)this = off_10034DFD8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
}

{
  *(_QWORD *)this = off_10034DFD8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
}

void KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo(KappaCompanionDeviceInfo *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_10034DFD8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo(this);
  operator delete();
}

void KappaCompanionDeviceInfo::KappaCompanionDeviceInfo(KappaCompanionDeviceInfo *this, const KappaCompanionDeviceInfo *a2)
{
  int v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  *(_QWORD *)this = off_10034DFD8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 48) = 1;
    *((_DWORD *)this + 4) = v2;
  }
  if (*((_QWORD *)a2 + 1))
    operator new();
  v3 = *((_BYTE *)a2 + 48);
  if ((v3 & 8) != 0)
  {
    v5 = *((_DWORD *)a2 + 7);
    *((_BYTE *)this + 48) |= 8u;
    *((_DWORD *)this + 7) = v5;
    v3 = *((_BYTE *)a2 + 48);
    if ((v3 & 0x40) == 0)
    {
LABEL_7:
      if ((v3 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)a2 + 48) & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v6 = *((_DWORD *)a2 + 10);
  *((_BYTE *)this + 48) |= 0x40u;
  *((_DWORD *)this + 10) = v6;
  v3 = *((_BYTE *)a2 + 48);
  if ((v3 & 0x10) == 0)
  {
LABEL_8:
    if ((v3 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v7 = *((_DWORD *)a2 + 8);
  *((_BYTE *)this + 48) |= 0x10u;
  *((_DWORD *)this + 8) = v7;
  v3 = *((_BYTE *)a2 + 48);
  if ((v3 & 0x80) == 0)
  {
LABEL_9:
    if ((v3 & 4) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_DWORD *)a2 + 11);
  *((_BYTE *)this + 48) |= 0x80u;
  *((_DWORD *)this + 11) = v8;
  v3 = *((_BYTE *)a2 + 48);
  if ((v3 & 4) == 0)
  {
LABEL_10:
    if ((v3 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 48) |= 4u;
  *((_DWORD *)this + 6) = v9;
  v3 = *((_BYTE *)a2 + 48);
  if ((v3 & 0x20) == 0)
  {
LABEL_11:
    if ((v3 & 2) == 0)
      return;
    goto LABEL_12;
  }
LABEL_19:
  v10 = *((_DWORD *)a2 + 9);
  *((_BYTE *)this + 48) |= 0x20u;
  *((_DWORD *)this + 9) = v10;
  if ((*((_BYTE *)a2 + 48) & 2) == 0)
    return;
LABEL_12:
  v4 = *((_DWORD *)a2 + 5);
  *((_BYTE *)this + 48) |= 2u;
  *((_DWORD *)this + 5) = v4;
}

uint64_t KappaCompanionDeviceInfo::operator=(uint64_t a1, const KappaCompanionDeviceInfo *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if ((const KappaCompanionDeviceInfo *)a1 != a2)
  {
    KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v9, a2);
    v3 = v12;
    v5 = *(_OWORD *)(a1 + 16);
    v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v3;
    v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v12 = v4;
    v11 = v5;
    KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v9);
  }
  return a1;
}

uint64_t swap(uint64_t result, KappaCompanionDeviceInfo *a2)
{
  int v2;
  int v3;
  uint64_t v4;

  v2 = *(_DWORD *)(result + 48);
  *(_DWORD *)(result + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 32);
  *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 44);
  *(_DWORD *)(result + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  return result;
}

uint64_t KappaCompanionDeviceInfo::KappaCompanionDeviceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_10034DFD8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *v4;
  *v4 = v5;
  if (v6)
    sub_100011294((uint64_t)v4, v6);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t KappaCompanionDeviceInfo::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;

  if (a1 != a2)
  {
    KappaCompanionDeviceInfo::KappaCompanionDeviceInfo((uint64_t)v9, a2);
    v3 = v12;
    v5 = *(_OWORD *)(a1 + 16);
    v4 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = v3;
    v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v10;
    v10 = v7;
    v12 = v4;
    v11 = v5;
    KappaCompanionDeviceInfo::~KappaCompanionDeviceInfo((KappaCompanionDeviceInfo *)v9);
  }
  return a1;
}

uint64_t KappaCompanionDeviceInfo::formatText(KappaCompanionDeviceInfo *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 48) & 1) != 0)
    PB::TextFormatter::format(a2, "deviceHardware", *((_DWORD *)this + 4));
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "deviceModel");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "enableMode", *((_DWORD *)this + 5));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
  }
  else if ((*((_BYTE *)this + 48) & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "kappaArmedSeconds", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "kappaDeviceType", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "kappaTokenCount", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_18:
    PB::TextFormatter::format(a2, "martyDeviceType", *((_DWORD *)this + 10));
    if ((*((_BYTE *)this + 48) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
LABEL_19:
    PB::TextFormatter::format(a2, "martyTokenCount", *((_DWORD *)this + 11));
    return PB::TextFormatter::endObject(a2);
  }
LABEL_17:
  PB::TextFormatter::format(a2, "martyArmedSeconds", *((_DWORD *)this + 9));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x40) != 0)
    goto LABEL_18;
LABEL_11:
  if (v5 < 0)
    goto LABEL_19;
  return PB::TextFormatter::endObject(a2);
}

uint64_t KappaCompanionDeviceInfo::readFrom(KappaCompanionDeviceInfo *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 48) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_140;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_87:
            LODWORD(v25) = 0;
            goto LABEL_140;
          }
          v85 = 0;
          v86 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v87 = v20 + 1;
              v88 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v87;
              v25 |= (unint64_t)(v88 & 0x7F) << v85;
              if (v88 < 0)
              {
                v85 += 7;
                v20 = v87;
                v14 = v86++ > 8;
                if (v14)
                  goto LABEL_87;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_140:
          *((_DWORD *)this + 4) = v25;
          goto LABEL_169;
        case 2u:
          operator new();
        case 3u:
          *((_BYTE *)this + 48) |= 8u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_144;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_94:
            LODWORD(v34) = 0;
            goto LABEL_144;
          }
          v89 = 0;
          v90 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v91 = v29 + 1;
              v92 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v91;
              v34 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                v29 = v91;
                v14 = v90++ > 8;
                if (v14)
                  goto LABEL_94;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_144:
          *((_DWORD *)this + 7) = v34;
          goto LABEL_169;
        case 4u:
          *((_BYTE *)this + 48) |= 0x40u;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_148;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_101:
            LODWORD(v42) = 0;
            goto LABEL_148;
          }
          v93 = 0;
          v94 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v95 = v37 + 1;
              v96 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)a2 + 1) = v95;
              v42 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                v37 = v95;
                v14 = v94++ > 8;
                if (v14)
                  goto LABEL_101;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_148:
          *((_DWORD *)this + 10) = v42;
          goto LABEL_169;
        case 5u:
          *((_BYTE *)this + 48) |= 0x10u;
          v45 = *((_QWORD *)a2 + 1);
          v46 = *((_QWORD *)a2 + 2);
          v47 = *(_QWORD *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_152;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_108:
            LODWORD(v50) = 0;
            goto LABEL_152;
          }
          v97 = 0;
          v98 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v99 = v45 + 1;
              v100 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)a2 + 1) = v99;
              v50 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v45 = v99;
                v14 = v98++ > 8;
                if (v14)
                  goto LABEL_108;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_152:
          *((_DWORD *)this + 8) = v50;
          goto LABEL_169;
        case 6u:
          *((_BYTE *)this + 48) |= 0x80u;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          v55 = *(_QWORD *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)a2 + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_156;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_115:
            LODWORD(v58) = 0;
            goto LABEL_156;
          }
          v101 = 0;
          v102 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v103 = v53 + 1;
              v104 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)a2 + 1) = v103;
              v58 |= (unint64_t)(v104 & 0x7F) << v101;
              if (v104 < 0)
              {
                v101 += 7;
                v53 = v103;
                v14 = v102++ > 8;
                if (v14)
                  goto LABEL_115;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_156:
          *((_DWORD *)this + 11) = v58;
          goto LABEL_169;
        case 7u:
          *((_BYTE *)this + 48) |= 4u;
          v61 = *((_QWORD *)a2 + 1);
          v62 = *((_QWORD *)a2 + 2);
          v63 = *(_QWORD *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)a2 + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_160;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_122:
            LODWORD(v66) = 0;
            goto LABEL_160;
          }
          v105 = 0;
          v106 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v107 = v61 + 1;
              v108 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)a2 + 1) = v107;
              v66 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                v61 = v107;
                v14 = v106++ > 8;
                if (v14)
                  goto LABEL_122;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_160:
          *((_DWORD *)this + 6) = v66;
          goto LABEL_169;
        case 8u:
          *((_BYTE *)this + 48) |= 0x20u;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_164;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_129:
            LODWORD(v74) = 0;
            goto LABEL_164;
          }
          v109 = 0;
          v110 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v111 = v69 + 1;
              v112 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v111;
              v74 |= (unint64_t)(v112 & 0x7F) << v109;
              if (v112 < 0)
              {
                v109 += 7;
                v69 = v111;
                v14 = v110++ > 8;
                if (v14)
                  goto LABEL_129;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_164:
          *((_DWORD *)this + 9) = v74;
          goto LABEL_169;
        case 9u:
          *((_BYTE *)this + 48) |= 2u;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_168;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_136:
            LODWORD(v82) = 0;
            goto LABEL_168;
          }
          v113 = 0;
          v114 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_169;
      }
      while (1)
      {
        if (v78 == v77)
        {
          LODWORD(v82) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_168;
        }
        v115 = v77 + 1;
        v116 = *(_BYTE *)(v79 + v77);
        *((_QWORD *)a2 + 1) = v115;
        v82 |= (unint64_t)(v116 & 0x7F) << v113;
        if ((v116 & 0x80) == 0)
          break;
        v113 += 7;
        v77 = v115;
        v14 = v114++ > 8;
        if (v14)
          goto LABEL_136;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v82) = 0;
LABEL_168:
      *((_DWORD *)this + 5) = v82;
LABEL_169:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t KappaCompanionDeviceInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = this;
  if ((*(_BYTE *)(this + 48) & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 16), 1u);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    this = PB::Writer::write(a2, v4, 2);
  v5 = *(_BYTE *)(v3 + 48);
  if ((v5 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
    v5 = *(_BYTE *)(v3 + 48);
    if ((v5 & 0x40) == 0)
    {
LABEL_7:
      if ((v5 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
  }
  else if ((*(_BYTE *)(v3 + 48) & 0x40) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
  v5 = *(_BYTE *)(v3 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  v5 = *(_BYTE *)(v3 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 6u);
  v5 = *(_BYTE *)(v3 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 7u);
  v5 = *(_BYTE *)(v3 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 9u);
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 8u);
  if ((*(_BYTE *)(v3 + 48) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 9u);
  return this;
}

BOOL KappaCompanionDeviceInfo::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL8 result;

  v4 = *(unsigned __int8 *)(a1 + 48);
  v5 = *(unsigned __int8 *)(a2 + 48);
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 8);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v4 & v5 & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if (((v4 | v5) & 0x80) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  result = (v5 & 2) == 0;
  if ((v4 & 2) == 0)
    return result;
  return (v5 & 2) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

unint64_t KappaCompanionDeviceInfo::hash_value(KappaCompanionDeviceInfo *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v2 = *((_BYTE *)this + 48);
  if ((v2 & 1) != 0)
    v3 = *((int *)this + 4);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = sub_1000112DC((uint64_t)&v14, v4);
    v2 = *((_BYTE *)this + 48);
    if ((v2 & 8) == 0)
      goto LABEL_6;
  }
  else
  {
    v5 = 0;
    if ((v2 & 8) == 0)
    {
LABEL_6:
      v6 = 0;
      if ((v2 & 0x40) != 0)
        goto LABEL_7;
      goto LABEL_15;
    }
  }
  v6 = *((int *)this + 7);
  if ((v2 & 0x40) != 0)
  {
LABEL_7:
    v7 = *((int *)this + 10);
    if ((v2 & 0x10) != 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  v7 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_8:
    v8 = *((int *)this + 8);
    if (v2 < 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v8 = 0;
  if (v2 < 0)
  {
LABEL_9:
    v9 = *((int *)this + 11);
    if ((v2 & 4) != 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v9 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_10:
    v10 = *((int *)this + 6);
    if ((v2 & 0x20) != 0)
      goto LABEL_11;
LABEL_19:
    v11 = 0;
    if ((v2 & 2) != 0)
      goto LABEL_12;
LABEL_20:
    v12 = 0;
    return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12;
  }
LABEL_18:
  v10 = 0;
  if ((v2 & 0x20) == 0)
    goto LABEL_19;
LABEL_11:
  v11 = *((int *)this + 9);
  if ((v2 & 2) == 0)
    goto LABEL_20;
LABEL_12:
  v12 = *((int *)this + 5);
  return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12;
}

void sub_10004B5F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004B644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10004B8D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10004BA30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10004BAC8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "AOP");
  v2 = (void *)qword_100387328;
  qword_100387328 = (uint64_t)v1;

}

void CLKappaAlgBlock::CLKappaAlgBlock(CLKappaAlgBlock *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 152)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 168)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)) = a2[4];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_WORD *)this + 12) = 1;
}

void CLKappaAlgBlock::~CLKappaAlgBlock(CLKappaAlgBlock *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 152)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 168)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)) = a2[4];
  sub_10000A718((uint64_t)this + 8);
}

BOOL CLKappaAlgBlock::isActiveFeatures(CLKappaAlgBlock *this, unint64_t a2, unint64_t a3)
{
  return (float)((float)a3 + 15000000.0) > (float)a2 || a3 == 0;
}

BOOL CLKappaAlgBlock::isActiveEstimates(CLKappaAlgBlock *this, unint64_t a2, unint64_t a3)
{
  return (float)((float)a3 + 15000000.0) > (float)a2 || a3 == 0;
}

BOOL CLKappaAlgBlock::isActiveInferences(CLKappaAlgBlock *this, unint64_t a2, unint64_t a3)
{
  return (float)((float)a3 + 45000000.0) > (float)a2 && a3 != 0;
}

void CLKappaFeaturesAlgSpinResult::reset(CLKappaFeaturesAlgSpinResult *this)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (_QWORD *)((char *)this + 104);
  v2 = (void *)*((_QWORD *)this + 13);
  *((_BYTE *)v3 - 96) = 0;
  *((_DWORD *)v3 - 23) = 0;
  *(v3 - 10) = 0;
  *((_BYTE *)v3 - 72) = 0;
  *((_DWORD *)v3 - 17) = 2143289344;
  *((_BYTE *)v3 - 64) = 0;
  *(v3 - 7) = 0;
  *(v3 - 6) = 0;
  *(v3 - 5) = 2143289344;
  *((_DWORD *)v3 - 8) = 0;
  *(v3 - 3) = 0;
  *(v3 - 2) = 0;
  *(v3 - 1) = 0x7FC0000000000000;
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  if (v5)
  {
    *((_QWORD *)this + 20) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  if (v6)
  {
    *((_QWORD *)this + 23) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  if (v7)
  {
    *((_QWORD *)this + 26) = v7;
    operator delete(v7);
  }
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
}

double CLKappaFeaturesAlgSpinResult::log(CLKappaFeaturesAlgSpinResult *this)
{
  NSObject *v2;
  double result;
  int v4;
  uint64_t v5;
  double v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  double v18;
  _DWORD v19[2];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  double v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;

  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034F278);
  v2 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((unsigned __int8 *)this + 32);
    v5 = *((_QWORD *)this + 3);
    v6 = *((float *)this + 9);
    v7 = *((unsigned __int8 *)this + 40);
    v8 = *((_QWORD *)this + 6);
    v9 = *((_QWORD *)this + 7);
    v10 = *((float *)this + 16);
    v11 = *((float *)this + 17);
    v12 = *((float *)this + 18);
    v13 = *((_QWORD *)this + 10);
    v14 = *((_QWORD *)this + 11);
    v15 = *((_DWORD *)this + 24);
    v16 = *((float *)this + 25);
    v17 = *((float *)this + 4);
    v18 = *((float *)this + 5);
    v19[0] = 67243776;
    v19[1] = v4;
    v20 = 2050;
    v21 = v5;
    v22 = 2050;
    v23 = v6;
    v24 = 1026;
    v25 = v7;
    v26 = 2050;
    v27 = v8;
    v28 = 2050;
    v29 = v9;
    v30 = 2050;
    v31 = v10;
    v32 = 2050;
    v33 = v11;
    v34 = 2050;
    v35 = v12;
    v36 = 2050;
    v37 = v13;
    v38 = 2050;
    v39 = v14;
    v40 = 1026;
    v41 = v15;
    v42 = 2050;
    v43 = v16;
    v44 = 2050;
    v45 = v17;
    v46 = 2050;
    v47 = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[Spin] summary,%{public}d,A,%{public}llu,B,%{public}f,C,%{public}d,D,%{public}llu,E,%{public}llu,F,%{public}f,G,%{public}f,H,%{public}f,debug-1,%{public}llu,debug-2,%{public}llu,debug-3,%{public}d,debug-4,%{public}f,config-1,%{public}f,config-2,%{public}f\n", (uint8_t *)v19, 0x8Cu);
  }
  return result;
}

void CLKappaFeaturesAlgSpin::CLKappaFeaturesAlgSpin(CLKappaFeaturesAlgSpin *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  CLKappaAlgBlock::CLKappaAlgBlock(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 152)) = a2[6];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 160)) = a2[7];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 168)) = a2[8];
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 176)) = a2[9];
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_DWORD *)(v5 + 72) = 200;
  *(_BYTE *)(v5 + 76) = 1;
  *(_QWORD *)(v5 + 92) = 0xA00000000;
  *(_DWORD *)(v5 + 88) = 1031798784;
  *(_BYTE *)(v5 + 140) = 1;
  *(_QWORD *)(v5 + 156) = 0xA00000000;
  *(_DWORD *)(v5 + 152) = 1031798784;
  *(_BYTE *)(v5 + 204) = 1;
  *(_QWORD *)(v5 + 220) = 0xA00000000;
  *(_DWORD *)(v5 + 216) = 1031798784;
  *(_QWORD *)(v5 + 272) = 0;
  *(_DWORD *)(v5 + 280) = 200;
  *(_BYTE *)(v5 + 284) = 1;
  *(_DWORD *)(v5 + 304) = 200;
  *(_QWORD *)(v5 + 296) = 1031798784;
  *(_BYTE *)(v5 + 1108) = 1;
  *(_DWORD *)(v5 + 1128) = 200;
  *(_QWORD *)(v5 + 1120) = 1031798784;
  *(_BYTE *)(v5 + 1932) = 1;
  *(_DWORD *)(v5 + 1952) = 200;
  *(_QWORD *)(v5 + 1944) = 1031798784;
  *(_BYTE *)(v5 + 2760) = 0;
  *(_QWORD *)(v5 + 2800) = 0;
  *(_OWORD *)(v5 + 2764) = 0u;
  *(_OWORD *)(v5 + 2780) = 0u;
  *(_DWORD *)(v5 + 2808) = 200;
  *(_BYTE *)(v5 + 2812) = 1;
  *(_DWORD *)(v5 + 2832) = 20;
  *(_QWORD *)(v5 + 2824) = 1031798784;
  *(_BYTE *)(v5 + 2916) = 1;
  *(_DWORD *)(v5 + 2936) = 20;
  *(_QWORD *)(v5 + 2928) = 1031798784;
  *(_BYTE *)(v5 + 3020) = 1;
  *(_DWORD *)(v5 + 3040) = 20;
  *(_QWORD *)(v5 + 3032) = 1031798784;
  *(_QWORD *)(v5 + 3128) = 0;
  *(_DWORD *)(v5 + 3136) = 200;
  *(_BYTE *)(v5 + 3140) = 1;
  *(_DWORD *)(v5 + 3160) = 100;
  *(_QWORD *)(v5 + 3152) = 1031798784;
  *(_BYTE *)(v5 + 3564) = 1;
  *(_DWORD *)(v5 + 3584) = 100;
  *(_QWORD *)(v5 + 3576) = 1031798784;
  *(_BYTE *)(v5 + 3988) = 1;
  *(_DWORD *)(v5 + 4008) = 100;
  *(_QWORD *)(v5 + 4000) = 1031798784;
  *(_QWORD *)(v5 + 4416) = off_10034F2A8;
  *(_DWORD *)(v5 + 4424) = 99;
  *(_OWORD *)(v5 + 4464) = 0u;
  *(_OWORD *)(v5 + 4448) = 0u;
  *(_OWORD *)(v5 + 4432) = 0u;
  *(_QWORD *)(v5 + 4496) = 0;
  *(_QWORD *)(v5 + 4488) = 0;
  *(_QWORD *)(v5 + 4480) = v5 + 4488;
  *(_BYTE *)(v5 + 4516) = 0;
  *(_BYTE *)(v5 + 4528) = 0;
  *(_BYTE *)(v5 + 4532) = 0;
  *(_OWORD *)(v5 + 4568) = 0u;
  *(_OWORD *)(v5 + 4584) = 0u;
  *(_OWORD *)(v5 + 4536) = 0u;
  *(_OWORD *)(v5 + 4552) = 0u;
  v7 = operator new(0xF8uLL);
  v7[2] = 0;
  *v7 = off_10034F2E8;
  v7[1] = 0;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  v7[3] = off_10034CF58;
  v7[5] = 0x4396000041200000;
  *((_DWORD *)v7 + 15) = 2143289344;
  v7[9] = 0;
  v7[10] = 0;
  *((_DWORD *)v7 + 22) = 2143289344;
  v7[12] = 0;
  v7[13] = 0;
  v7[14] = 0;
  v7[15] = 0x7FC0000000000000;
  v7[30] = 0;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *(_QWORD *)&v22 = v7 + 3;
  *((_QWORD *)&v22 + 1) = v7;
  sub_1000081AC((uint64_t)this + 8, &v22);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)this + 1);
  v21 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_10004C290((uint64_t)&v20, &v22);
  sub_1000081AC(v6, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgSpin *))(*(_QWORD *)this + 304))(this);
}

void sub_10004C244(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_10004E7DC((_QWORD *)v1 + 569);
  sub_10004C2FC(v3 + 4384);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v3);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, v2);
  _Unwind_Resume(a1);
}

void *sub_10004C290@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t sub_10004C2FC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10034F2A8;
  sub_10004E79C(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_10000F218((_QWORD *)(a1 + 16));
  return a1;
}

void CLKappaFeaturesAlgSpin::CLKappaFeaturesAlgSpin(CLKappaFeaturesAlgSpin *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  v2 = (char *)this + 4516;
  *(_QWORD *)this = off_100345D50;
  *((_QWORD *)this + 575) = off_100345DF8;
  *((_QWORD *)this + 576) = off_100345EC0;
  *((_QWORD *)this + 577) = off_100345F68;
  CLKappaAlgBlock::CLKappaAlgBlock(this, (uint64_t *)off_10034EC70);
  *(_QWORD *)v3 = off_10034E770;
  *(_QWORD *)(v3 + 4600) = off_10034EA10;
  *(_QWORD *)(v3 + 4608) = off_10034EB48;
  *(_QWORD *)(v3 + 4616) = off_10034EC20;
  *(_OWORD *)(v3 + 32) = 0u;
  v4 = v3 + 32;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 72) = 200;
  *(_BYTE *)(v3 + 76) = 1;
  *(_QWORD *)(v3 + 92) = 0xA00000000;
  *(_DWORD *)(v3 + 88) = 1031798784;
  *(_BYTE *)(v3 + 140) = 1;
  *(_QWORD *)(v3 + 156) = 0xA00000000;
  *(_DWORD *)(v3 + 152) = 1031798784;
  *(_BYTE *)(v3 + 204) = 1;
  *(_QWORD *)(v3 + 220) = 0xA00000000;
  *(_DWORD *)(v3 + 216) = 1031798784;
  *(_QWORD *)(v3 + 272) = 0;
  *(_DWORD *)(v3 + 280) = 200;
  *(_BYTE *)(v3 + 284) = 1;
  *(_DWORD *)(v3 + 304) = 200;
  *(_QWORD *)(v3 + 296) = 1031798784;
  *(_BYTE *)(v3 + 1108) = 1;
  *(_DWORD *)(v3 + 1128) = 200;
  *(_QWORD *)(v3 + 1120) = 1031798784;
  *(_BYTE *)(v3 + 1932) = 1;
  *(_DWORD *)(v3 + 1952) = 200;
  *(_QWORD *)(v3 + 1944) = 1031798784;
  *(_BYTE *)(v3 + 2760) = 0;
  *(_QWORD *)(v3 + 2800) = 0;
  *(_OWORD *)(v3 + 2764) = 0u;
  *(_OWORD *)(v3 + 2780) = 0u;
  *(_DWORD *)(v3 + 2808) = 200;
  *(_BYTE *)(v3 + 2812) = 1;
  *(_DWORD *)(v3 + 2832) = 20;
  *(_QWORD *)(v3 + 2824) = 1031798784;
  *(_BYTE *)(v3 + 2916) = 1;
  *(_QWORD *)(v3 + 2932) = 0x1400000000;
  *(_DWORD *)(v3 + 2928) = 1031798784;
  *(_BYTE *)(v3 + 3020) = 1;
  *(_DWORD *)(v3 + 3040) = 20;
  *(_QWORD *)(v3 + 3032) = 1031798784;
  *(_QWORD *)(v3 + 3128) = 0;
  *(_DWORD *)(v3 + 3136) = 200;
  *(_BYTE *)(v3 + 3140) = 1;
  *(_DWORD *)(v3 + 3160) = 100;
  *(_QWORD *)(v3 + 3152) = 1031798784;
  *(_BYTE *)(v3 + 3564) = 1;
  *(_DWORD *)(v3 + 3584) = 100;
  *(_QWORD *)(v3 + 3576) = 1031798784;
  *(_BYTE *)(v3 + 3988) = 1;
  *(_DWORD *)(v3 + 4008) = 100;
  *(_QWORD *)(v3 + 4000) = 1031798784;
  *(_QWORD *)(v3 + 4416) = off_10034F2A8;
  *(_DWORD *)(v3 + 4424) = 99;
  *(_OWORD *)(v3 + 4432) = 0u;
  *(_OWORD *)(v3 + 4448) = 0u;
  *(_OWORD *)(v3 + 4464) = 0u;
  *(_QWORD *)(v3 + 4488) = 0;
  *(_QWORD *)(v3 + 4496) = 0;
  *(_QWORD *)(v3 + 4480) = v3 + 4488;
  *v2 = 0;
  v2[12] = 0;
  v2[16] = 0;
  *(_OWORD *)(v3 + 4568) = 0u;
  *(_OWORD *)(v3 + 4584) = 0u;
  *(_OWORD *)(v3 + 4536) = 0u;
  *(_OWORD *)(v3 + 4552) = 0u;
  v5 = operator new(0xF8uLL);
  v5[2] = 0;
  *v5 = off_10034F2E8;
  v5[1] = 0;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  v5[3] = off_10034CF58;
  v5[5] = 0x4396000041200000;
  *((_DWORD *)v5 + 15) = 2143289344;
  v5[9] = 0;
  v5[10] = 0;
  *((_DWORD *)v5 + 22) = 2143289344;
  v5[12] = 0;
  v5[13] = 0;
  v5[14] = 0;
  v5[15] = 0x7FC0000000000000;
  v5[30] = 0;
  *((_OWORD *)v5 + 13) = 0u;
  *((_OWORD *)v5 + 14) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *(_QWORD *)&v20 = v5 + 3;
  *((_QWORD *)&v20 + 1) = v5;
  sub_1000081AC((uint64_t)this + 8, &v20);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v18 = *((_QWORD *)this + 1);
  v19 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_10004C290((uint64_t)&v18, &v20);
  sub_1000081AC(v4, &v20);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(CLKappaFeaturesAlgSpin *))(*(_QWORD *)this + 304))(this);
}

void sub_10004C6AC(_Unwind_Exception *a1)
{
  CLKappaAlgBlock *v1;
  uint64_t v2;

  sub_10004E7DC((_QWORD *)v1 + 569);
  sub_10004C2FC((uint64_t)v1 + 4416);
  sub_10000A718((uint64_t)v1 + 48);
  sub_10000A718(v2);
  CLKappaAlgBlock::~CLKappaAlgBlock(v1, (uint64_t *)off_10034EC70);
  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgSpin::resetConfiguration(CLKappaFeaturesAlgSpin *this)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  int v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  id v12;

  v12 = (id)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration configBaseKey:forFeatureMode:](CSPersistentConfiguration, "configBaseKey:forFeatureMode:", "FeaturesAlgSpinConfig", *((unsigned __int8 *)this + 24)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v3) = 1138819072;
  LODWORD(v4) = 1.0;
  LODWORD(v5) = 10.0;
  objc_msgSend(v2, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 0, v12, v4, v3, v5);
  *(_DWORD *)(*((_QWORD *)this + 4) + 16) = v6;

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CSPersistentConfiguration sharedConfiguration](CSPersistentConfiguration, "sharedConfiguration"));
  LODWORD(v8) = 1167867904;
  LODWORD(v9) = 1133903872;
  LODWORD(v10) = 25.0;
  objc_msgSend(v7, "algorithmThresholdNumber:inArrayForKey:withMinValue:maxValue:defaultValue:", 1, v12, v10, v8, v9);
  *(_DWORD *)(*((_QWORD *)this + 4) + 20) = v11;

}

void sub_10004C7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t CLKappaFeaturesAlgSpin::reset(CLKappaFeaturesAlgSpin *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

double CLKappaFeaturesAlgSpin::setConfig(uint64_t a1, _QWORD *a2)
{
  NSObject *v3;
  double result;
  uint64_t v5;
  double v6;
  double v7;
  int v8;
  double v9;
  __int16 v10;
  double v11;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = *a2;
  if (qword_100387310 != -1)
    dispatch_once(&qword_100387310, &stru_10034F278);
  v3 = qword_100387318;
  if (os_log_type_enabled((os_log_t)qword_100387318, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(float *)(v5 + 16);
    v7 = *(float *)(v5 + 20);
    v8 = 134218240;
    v9 = v6;
    v10 = 2048;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[Spin] config, %f, %f", (uint8_t *)&v8, 0x16u);
  }
  return result;
}

void CLKappaFeaturesAlgSpin::epochFinalize(CLKappaFeaturesAlgSpin *this, unint64_t a2)
{
  uint64_t v4;
  id v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  char *v17;
  id v18;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  double v41;
  uint64_t v42;
  void *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;

  v4 = *((_QWORD *)this + 4);
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 36) = 2143289344;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 2143289344;
  *(_DWORD *)(v4 + 72) = 0;
  *(_QWORD *)(*((_QWORD *)this + 4) + 24) = a2;
  v5 = *(id *)(*((_QWORD *)this + 6) + 72);
  v6 = (char *)objc_msgSend(v5, "count");
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", 0));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", v6 - 1));
    *(_QWORD *)(*((_QWORD *)this + 4) + 80) = objc_msgSend(v7, "timestamp");
    *(_QWORD *)(*((_QWORD *)this + 4) + 88) = objc_msgSend(v8, "timestamp");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", 0));
    v10 = *(_DWORD *)objc_msgSend(v9, "c_struct");
    v11 = *((_DWORD *)objc_msgSend(v9, "c_struct") + 1);
    v12 = *((_DWORD *)objc_msgSend(v9, "c_struct") + 2);
    v13.i32[0] = *((_DWORD *)objc_msgSend(v9, "c_struct") + 3);
    v49.i64[0] = __PAIR64__(v11, v10);
    v49.i64[1] = __PAIR64__(v13.u32[0], v12);
    CMOQuaternion::normalize(&v49, v13);
    v14 = CMOQuaternion::gravity((CMOQuaternion *)&v49);
    v46 = v15;
    v47 = v14;
    v45 = v16;
    objc_msgSend(v9, "timestamp");
    v17 = "index6detail5rtree9iterators19query_iterator_baseINSt3__14pairINS0_5model5pointIdLm2ENS0_2cs10geographicINS0_6degreeEEEEEdEENS3_10allocatorsINS_9container13new_allocatorISF_EESF_NS1_6linearILm16ELm4EEENS8_3boxISE_EENS3_23node_variant_static_tagEEEEE";
    if ((unint64_t)v6 < 2)
    {
      v19 = 0;
      v18 = 0;
      v39 = 0.0;
      v40 = 0.0;
    }
    else
    {
      v43 = v7;
      v18 = 0;
      v19 = 0;
      v44 = 0.0;
      v20 = 1;
      v21 = 0.0;
      v23 = v46;
      v22 = v47;
      v24 = v45;
      do
      {
        v25 = v18;
        v18 = v9;

        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", v20));
        v26 = *(_DWORD *)objc_msgSend(v9, "c_struct");
        v27 = *((_DWORD *)objc_msgSend(v9, "c_struct") + 1);
        v28 = *((_DWORD *)objc_msgSend(v9, "c_struct") + 2);
        v29.i32[0] = *((_DWORD *)objc_msgSend(v9, "c_struct") + 3);
        v48.i64[0] = __PAIR64__(v27, v26);
        v48.i64[1] = __PAIR64__(v29.u32[0], v28);
        CMOQuaternion::normalize(&v48, v29);
        v49 = v48;
        v30 = CMOQuaternion::gravity((CMOQuaternion *)&v49);
        v32 = v31;
        v34 = v33;
        v35 = (float)((float)(v24 * v33) + (float)(v31 * v23)) + (float)(v30 * v22);
        if (v35 < -1.0)
          v35 = -1.0;
        if (v35 > 1.0)
          v35 = 1.0;
        v36 = acosf(v35);
        v37 = (float)((float)(v45 * v34) + (float)(v32 * v46)) + (float)(v30 * v47);
        if (v37 < -1.0)
          v37 = -1.0;
        if (v37 > 1.0)
          v37 = 1.0;
        v38 = acosf(v37);
        if (v38 * 57.2957795 > *(float *)(*((_QWORD *)this + 4) + 16))
        {
          objc_msgSend(v9, "timestamp");
          ++v19;
          v44 = v44 + v38;
          v46 = v32;
          v47 = v30;
          v45 = v34;
        }
        ++v20;
        v21 = v21 + v36;
        v22 = v30;
        v23 = v32;
        v24 = v34;
      }
      while (v6 != (char *)v20);
      v39 = v21 * 57.2957795;
      v7 = v43;
      v17 = "N5boost8geometry5index6detail5rtree9iterators19query_iterator_baseINSt3__14pairINS0_5model5pointIdLm2ENS0_2c"
            "s10geographicINS0_6degreeEEEEEdEENS3_10allocatorsINS_9container13new_allocatorISF_EESF_NS1_6linearILm16ELm4E"
            "EENS8_3boxISE_EENS3_23node_variant_static_tagEEEEE"
          + 17;
      v40 = v44;
    }
    v41 = v40 * *((double *)v17 + 59);
    v42 = *((_QWORD *)this + 4);
    *(_BYTE *)(v42 + 32) = v41 > *(float *)(v42 + 20);
    *(float *)&v41 = v41;
    *(_DWORD *)(v42 + 36) = LODWORD(v41);
    *(_DWORD *)(v42 + 96) = v19;
    *(float *)(v42 + 100) = v39;
    *(_QWORD *)(v42 + 68) = *(_QWORD *)((char *)this + 2788);
    *(_QWORD *)((char *)this + 2788) = 0;
    CLKappaFeaturesAlgSpin::calculateSlowRoll(this, a2);

  }
}

void sub_10004CC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void CLKappaFeaturesAlgSpin::calculateSlowRoll(CLKappaFeaturesAlgSpin *this, unint64_t a2)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  float32x4_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int64x2_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char **v56;
  unint64_t v57;
  char *v58;
  unint64_t i;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  float v67;
  float v68;
  void *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  float32x4_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  float32x4_t v82;
  float v83;
  float v84;
  uint64_t v85;
  float v86;
  float v87;
  uint64_t v88;
  float v89;
  id v90;
  int v91;
  float v92;
  _DWORD v93[3];
  float32x4_t v94;
  float32x4_t v95;
  uint64_t (**v96)();
  int v97;
  _OWORD v98[3];
  _QWORD **v99;
  _QWORD *v100[3];

  v4 = *((_QWORD *)this + 4);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(v4 + 136) = *(_QWORD *)(v4 + 128);
  *(_BYTE *)(v4 + 40) = 0;
  v5 = *(id *)(*((_QWORD *)this + 6) + 72);
  v6 = objc_msgSend(v5, "count");
  if (!v6)
    goto LABEL_84;
  v96 = off_10034F2A8;
  v97 = 100;
  memset(v98, 0, sizeof(v98));
  v100[0] = 0;
  v100[1] = 0;
  v99 = v100;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", 0));
  v8 = *(_DWORD *)objc_msgSend(v7, "c_struct");
  v9 = *((_DWORD *)objc_msgSend(v7, "c_struct") + 1);
  v10 = *((_DWORD *)objc_msgSend(v7, "c_struct") + 2);
  v11.i32[0] = *((_DWORD *)objc_msgSend(v7, "c_struct") + 3);
  v95.i64[0] = __PAIR64__(v9, v8);
  v95.i64[1] = __PAIR64__(v11.u32[0], v10);
  CMOQuaternion::normalize(&v95, v11);
  CMOQuaternion::gravity((CMOQuaternion *)&v95);
  v12 = CMOQuaternion::gravity((CMOQuaternion *)&v95);
  v14 = v13;
  v16 = v15;
  CMOQuaternion::gravity((CMOQuaternion *)&v95);
  if (*((_QWORD *)this + 567) - 1 >= a2 || *((_QWORD *)this + 568))
  {
    v91 = 0;
  }
  else
  {
    v94.i64[0] = *((_QWORD *)this + 567);
    v94.i64[1] = a2;
    sub_10004E354((_QWORD *)this + 569, (__n128 *)&v94);
    v91 = 1;
  }
  v17 = (int64x2_t *)((char *)this + 4584);
  while (1)
  {
    if (!*((_QWORD *)this + 574))
      goto LABEL_59;
    v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 570) + ((*((_QWORD *)this + 573) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * *((_QWORD *)this + 573)
                    + 8);
    if (v18 >= (unint64_t)objc_msgSend(v7, "timestamp"))
      break;
    *v17 = vaddq_s64(*v17, (int64x2_t)xmmword_1002E56B0);
    sub_10004F76C((uint64_t)this + 4552, 1);
  }
  v19 = *((_QWORD *)this + 574);
  if (!v19)
  {
LABEL_59:
    byte_100388848 ^= 1u;
    if (v91)
    {
      *((_QWORD *)this + 574) = -1;
      sub_10004F7C8((_QWORD *)this + 569, 1);
    }
    goto LABEL_83;
  }
  v20 = *((_QWORD *)this + 570);
  if (*((_QWORD *)this + 571) != v20)
  {
    v21 = (_QWORD *)(v20 + 8 * ((unint64_t)v17->i64[0] >> 8));
    v22 = (_QWORD *)(*v21 + 16 * v17->i64[0]);
    v23 = *(_QWORD *)(v20 + (((v17->i64[0] + v19) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (v17->i8[0] + v19);
    if (v22 != (_QWORD *)v23)
    {
      do
      {
        v24 = (_QWORD *)*((_QWORD *)this + 4);
        v25 = (char *)v24[14];
        v26 = v24[15];
        if ((unint64_t)v25 >= v26)
        {
          v28 = (char *)v24[13];
          v29 = (v25 - v28) >> 3;
          if ((unint64_t)(v29 + 1) >> 61)
            goto LABEL_85;
          v30 = v26 - (_QWORD)v28;
          v31 = (uint64_t)(v26 - (_QWORD)v28) >> 2;
          if (v31 <= v29 + 1)
            v31 = v29 + 1;
          if (v30 >= 0x7FFFFFFFFFFFFFF8)
            v32 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32)
          {
            v33 = (char *)sub_10000D60C((uint64_t)(v24 + 15), v32);
            v28 = (char *)v24[13];
            v25 = (char *)v24[14];
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[8 * v29];
          *(_QWORD *)v34 = *v22;
          v27 = v34 + 8;
          while (v25 != v28)
          {
            v35 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *((_QWORD *)v34 - 1) = v35;
            v34 -= 8;
          }
          v24[13] = v34;
          v24[14] = v27;
          v24[15] = &v33[8 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_QWORD *)v25 = *v22;
          v27 = v25 + 8;
        }
        v24[14] = v27;
        v36 = (_QWORD *)*((_QWORD *)this + 4);
        v37 = (char *)v36[17];
        v38 = v36[18];
        if ((unint64_t)v37 >= v38)
        {
          v40 = (char *)v36[16];
          v41 = (v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61)
LABEL_85:
            sub_10000D5F8();
          v42 = v38 - (_QWORD)v40;
          v43 = (uint64_t)(v38 - (_QWORD)v40) >> 2;
          if (v43 <= v41 + 1)
            v43 = v41 + 1;
          if (v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
          {
            v45 = (char *)sub_10000D60C((uint64_t)(v36 + 18), v44);
            v40 = (char *)v36[16];
            v37 = (char *)v36[17];
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[8 * v41];
          *(_QWORD *)v46 = v22[1];
          v39 = v46 + 8;
          while (v37 != v40)
          {
            v47 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *((_QWORD *)v46 - 1) = v47;
            v46 -= 8;
          }
          v36[16] = v46;
          v36[17] = v39;
          v36[18] = &v45[8 * v44];
          if (v40)
            operator delete(v40);
        }
        else
        {
          *(_QWORD *)v37 = v22[1];
          v39 = v37 + 8;
        }
        v36[17] = v39;
        v22 += 2;
        if ((_QWORD *)((char *)v22 - *v21) == (_QWORD *)4096)
        {
          v48 = (_QWORD *)v21[1];
          ++v21;
          v22 = v48;
        }
      }
      while (v22 != (_QWORD *)v23);
      v19 = *((_QWORD *)this + 574);
      if (!v19)
        goto LABEL_81;
    }
  }
  v49 = 0;
  v50 = 0;
  LODWORD(v53) = -1;
  do
  {
    v51 = *((_QWORD *)this + 573);
    v52 = *((_QWORD *)this + 570);
    if (*(_QWORD *)(*(_QWORD *)(v52 + (((unint64_t)(v51 + v49) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v51 + v49)
                   + 8)
       - *(_QWORD *)(*(_QWORD *)(v52 + (((unint64_t)(v51 + v49) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (v51 + v49)) <= v50)
    {
      v53 = v53;
    }
    else
    {
      v50 = *(_QWORD *)(*(_QWORD *)(v52 + (((unint64_t)(v51 + v49) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v51 + v49)
                      + 8)
          - *(_QWORD *)(*(_QWORD *)(v52 + (((unint64_t)(v51 + v49) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v51 + v49));
      v53 = v49;
    }
    ++v49;
  }
  while (v19 != v49);
  if ((v53 & 0x80000000) != 0)
    goto LABEL_81;
  v54 = *((_QWORD *)this + 573);
  v55 = *((_QWORD *)this + 570);
  v56 = (char **)(*(_QWORD *)(v55 + (((v54 + (unint64_t)v53) >> 5) & 0x7FFFFFFFFFFFFF8))
                + 16 * (v54 + v53));
  v58 = *v56;
  v57 = (unint64_t)v56[1];
  if (v57 - (unint64_t)*v56 < 0x30D41)
    goto LABEL_81;
  for (i = (v53 + 1); v19 > i; ++i)
  {
    v60 = *(_QWORD *)(v55 + (((v54 + i) >> 5) & 0x7FFFFFFFFFFFFF8));
    v61 = (v54 + i);
    if (*(_QWORD *)(v60 + 16 * v61) - v57 >= 0x493E0)
      break;
    v57 = *(_QWORD *)(v60 + 16 * v61 + 8);
  }
  if ((int)v53 >= 1)
  {
    v62 = v53 + 1;
    do
    {
      v63 = v54 + (v62 - 2);
      v64 = *(_QWORD *)(v55 + ((v63 >> 5) & 0x7FFFFFFFFFFFFF8));
      if ((unint64_t)&v58[-*(_QWORD *)(v64 + 16 * v63 + 8)] >= 0x493E0)
        break;
      v58 = *(char **)(v64 + 16 * (v54 + v62-- - 2));
    }
    while (v62 > 1);
  }
  if (v58 < objc_msgSend(v7, "timestamp"))
    v58 = (char *)objc_msgSend(v7, "timestamp");
  v93[0] = 0;
  if ((unint64_t)v6 < 2)
  {
    v89 = NAN;
    goto LABEL_80;
  }
  v65 = v6;
  v92 = 0.0;
  v89 = NAN;
  v66 = 1;
  v67 = 0.0;
  v68 = 0.0;
  v90 = v5;
  while (1)
  {
    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", v66));
    if (objc_msgSend(v69, "timestamp") >= v58)
      break;
    v70 = *(_DWORD *)objc_msgSend(v69, "c_struct");
    v71 = *((_DWORD *)objc_msgSend(v69, "c_struct") + 1);
    v72 = *((_DWORD *)objc_msgSend(v69, "c_struct") + 2);
    v73.i32[0] = *((_DWORD *)objc_msgSend(v69, "c_struct") + 3);
    v94.i64[0] = __PAIR64__(v71, v70);
    v94.i64[1] = __PAIR64__(v73.u32[0], v72);
    CMOQuaternion::normalize(&v94, v73);
    v95 = v94;
    v74 = CMOQuaternion::gravity((CMOQuaternion *)&v95);
    v76 = v75;
    v78 = v77;
LABEL_76:

    ++v66;
    v16 = v78;
    v14 = v76;
    v12 = v74;
    v5 = v90;
    if ((id)v66 == v65)
      goto LABEL_80;
  }
  if ((unint64_t)objc_msgSend(v69, "timestamp") <= v57)
  {
    v79 = *(_DWORD *)objc_msgSend(v69, "c_struct");
    v80 = *((_DWORD *)objc_msgSend(v69, "c_struct") + 1);
    v81 = *((_DWORD *)objc_msgSend(v69, "c_struct") + 2);
    v82.i32[0] = *((_DWORD *)objc_msgSend(v69, "c_struct") + 3);
    v94.i64[0] = __PAIR64__(v80, v79);
    v94.i64[1] = __PAIR64__(v82.u32[0], v81);
    CMOQuaternion::normalize(&v94, v82);
    v95 = v94;
    v74 = CMOQuaternion::gravity((CMOQuaternion *)&v95);
    v76 = v83;
    v78 = v84;
    v85 = 0;
    v68 = (float)((float)(v14 * v84) - (float)(v16 * v83)) + v68;
    v67 = (float)((float)(v16 * v74) - (float)(v12 * v84)) + v67;
    *(float *)v93 = v68;
    *(float *)&v93[1] = v67;
    v92 = (float)((float)(v12 * v83) - (float)(v14 * v74)) + v92;
    *(float *)&v93[2] = v92;
    v86 = 0.0;
    do
    {
      v86 = v86 + (float)(*(float *)&v93[v85] * *(float *)&v93[v85]);
      ++v85;
    }
    while (v85 != 3);
    v87 = sqrtf(v86) * 57.2957795;
    v89 = v87;
    goto LABEL_76;
  }

  v5 = v90;
LABEL_80:
  v88 = *((_QWORD *)this + 4);
  *(_BYTE *)(v88 + 40) = 1;
  *(_QWORD *)(v88 + 48) = v58;
  *(_QWORD *)(v88 + 56) = v57;
  *(float *)(v88 + 64) = v89;
LABEL_81:
  byte_100388848 ^= 1u;
  if (v91)
  {
    --*((_QWORD *)this + 574);
    sub_10004F7C8((_QWORD *)this + 569, 1);
  }
LABEL_83:

  v96 = off_10034F2A8;
  sub_10004E79C((uint64_t)&v99, v100[0]);
  sub_10000F218(v98);
LABEL_84:

}

void sub_10004D478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a15);

  sub_10004C2FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'CLKappaFeaturesAlgSpin::epochFinalize(CLKappaFeaturesAlgSpin *this, unint64_t a2)
{
  CLKappaFeaturesAlgSpin::epochFinalize((CLKappaFeaturesAlgSpin *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), a2);
}

void CLKappaFeaturesAlgSpin::feedDM(CLKappaFeaturesAlgSpin *this, const DMSample *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  char *v14;
  char *v15;
  float32x2_t v16;
  int32x2_t v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int16 v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  float v62;
  float v63;
  uint64_t v64;
  int v65;
  float v66;
  int v67;
  float v68;
  unint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  float v73;
  float v74;
  double v75;
  BOOL v76;
  BOOL v77;
  BOOL *v78;
  BOOL v79;
  float v80;
  float v81;
  float v82;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  _BYTE v90[12];
  unint64_t v91;
  float v92;
  float32x4_t v93;
  _DWORD v94[3];
  float v95[3];
  unint64_t v96;
  float v97;
  int v98;
  uint64_t v99;
  _DWORD v100[100];

  v93 = *(float32x4_t *)a2->quaternion;
  CMOQuaternion::normalize(&v93, v93);
  v3 = CMOQuaternion::gravity((CMOQuaternion *)&v93);
  v91 = __PAIR64__(LODWORD(v4), LODWORD(v3));
  v92 = v5;
  if (*((_BYTE *)this + 2760))
  {
    v6 = *((float *)this + 1127);
    v7 = *((float *)this + 1128);
    v8 = *((float *)this + 1126);
  }
  else
  {
    *((float *)this + 1126) = v3;
    *((float *)this + 1127) = v4;
    *((float *)this + 1128) = v5;
    *((_BYTE *)this + 2760) = 1;
    v8 = v3;
    v7 = v5;
    v6 = v4;
  }
  *(float *)v90 = (float)(v6 * v5) - (float)(v7 * v4);
  *(float *)&v90[4] = (float)(v7 * v3) - (float)(v8 * v5);
  *(float *)&v90[8] = (float)(v8 * v4) - (float)(v6 * v3);
  if (*((_WORD *)this + 47) == 10)
  {
    *((float *)this + 691) = *((float *)this + 691) - sub_10004DC08((unsigned __int16 *)this + 32);
    *((float *)this + 692) = *((float *)this + 692) - v9;
    *((float *)this + 693) = *((float *)this + 693) - v10;
  }
  if (*((_WORD *)this + 151) == 200)
  {
    *((float *)this + 694) = *((float *)this + 694) - sub_10004DC8C((unsigned __int16 *)this + 136);
    *((float *)this + 695) = *((float *)this + 695) - v11;
    *((float *)this + 696) = *((float *)this + 696) - v12;
  }
  sub_10004DD10((uint64_t)this + 64, v90);
  sub_10004DE28((uint64_t)this + 272, v90);
  v13 = 0;
  v14 = (char *)this + 2764;
  v15 = (char *)this + 2776;
  v16 = *(float32x2_t *)&v90[4];
  v17 = vzip1_s32(*(int32x2_t *)v90, *(int32x2_t *)&v90[4]);
  *(int32x2_t *)v18.f32 = v17;
  v18.i64[1] = __PAIR64__(v17.u32[0], vdup_lane_s32(*(int32x2_t *)&v90[4], 1).u32[0]);
  *(float32x4_t *)((char *)this + 2764) = vaddq_f32(v18, *(float32x4_t *)((char *)this + 2764));
  *(float32x2_t *)((char *)this + 2780) = vadd_f32(v16, *(float32x2_t *)((char *)this + 2780));
  v19 = 0.0;
  do
  {
    v19 = v19 + (float)(*(float *)&v14[v13] * *(float *)&v14[v13]);
    v13 += 4;
  }
  while (v13 != 12);
  if (sqrtf(v19) * 57.2957795 > *((float *)this + 697))
  {
    v20 = 0;
    v21 = 0.0;
    do
    {
      v21 = v21 + (float)(*(float *)&v14[v20] * *(float *)&v14[v20]);
      v20 += 4;
    }
    while (v20 != 12);
    v22 = sqrtf(v21) * 57.2957795;
    *((float *)this + 697) = v22;
  }
  v23 = 0;
  v24 = 0.0;
  do
  {
    v24 = v24 + (float)(*(float *)&v15[v23] * *(float *)&v15[v23]);
    v23 += 4;
  }
  while (v23 != 12);
  if (sqrtf(v24) * 57.2957795 > *((float *)this + 698))
  {
    v25 = 0;
    v26 = 0.0;
    do
    {
      v26 = v26 + (float)(*(float *)&v15[v25] * *(float *)&v15[v25]);
      v25 += 4;
    }
    while (v25 != 12);
    v27 = sqrtf(v26) * 57.2957795;
    *((float *)this + 698) = v27;
  }
  sub_10004DF40((uint64_t)this + 2800, &v91);
  v28 = sub_10004E058((uint64_t)this + 2800);
  v85 = v29;
  v86 = v28;
  v84 = v30;
  if (*((_BYTE *)this + 4528))
  {
    v31 = *((float *)this + 1130);
    v32 = *((float *)this + 1131);
    v33 = *((float *)this + 1129);
    v35 = v85;
    v34 = v28;
    v36 = v84;
  }
  else
  {
    v35 = v29;
    v34 = v28;
    *((float *)this + 1129) = v28;
    *((float *)this + 1130) = v29;
    v36 = v30;
    *((float *)this + 1131) = v30;
    *((_BYTE *)this + 4528) = 1;
    v33 = v28;
    v32 = v84;
    v31 = v85;
  }
  v37 = 0;
  v38 = (float)(v31 * v36) - (float)(v32 * v35);
  v39 = (float)(v32 * v34) - (float)(v33 * v36);
  v40 = (float)(v33 * v35) - (float)(v31 * v34);
  v87 = v38;
  v88 = v39;
  v89 = v40;
  v41 = 0.0;
  do
  {
    v41 = v41 + (float)(*(float *)((char *)&v87 + v37) * *(float *)((char *)&v87 + v37));
    v37 += 4;
  }
  while (v37 != 12);
  v42 = 0;
  if (sqrtf(v41) < 0.0000001)
  {
    v40 = v40 + 0.000001;
    v39 = v39 + 0.000001;
    v38 = v38 + 0.000001;
  }
  v96 = __PAIR64__(LODWORD(v39), LODWORD(v38));
  v97 = v40;
  v43 = 0.0;
  do
  {
    v43 = v43 + (float)(*(float *)((char *)&v96 + v42) * *(float *)((char *)&v96 + v42));
    v42 += 4;
  }
  while (v42 != 12);
  v44 = sqrtf(v43);
  v87 = v38 / v44;
  v88 = v39 / v44;
  v89 = v40 / v44;
  sub_10004E0BC((uint64_t)this + 3128, &v87);
  v45 = sub_10004E994((uint64_t)this + 3128);
  v47 = v46;
  v49 = v48;
  v50 = 0;
  v95[0] = v45;
  v95[1] = v46;
  v51 = 0.0;
  v95[2] = v48;
  do
  {
    v51 = v51 + (float)(v95[v50] * v95[v50]);
    ++v50;
  }
  while (v50 != 3);
  if (sqrtf(v51) >= 0.0000001)
  {
    v99 = 0x6400000000;
    v98 = 1031798784;
    if (*((_WORD *)this + 1579))
    {
      v53 = 0;
      v54 = 0;
      v55 = 0;
      do
      {
        v56 = sub_10004E9F8((unsigned __int16 *)this + 1564, v53);
        sub_10004E9F8((unsigned __int16 *)this + 1564, v53);
        v58 = v57;
        sub_10004E9F8((unsigned __int16 *)this + 1564, v53);
        v60 = v59;
        v61 = 0;
        v62 = 0.0;
        do
        {
          v62 = v62 + (float)(v95[v61] * v95[v61]);
          ++v61;
        }
        while (v61 != 3);
        v63 = sub_10004E9F8((unsigned __int16 *)this + 1564, v53);
        v64 = 0;
        *(float *)v94 = v63;
        v94[1] = v65;
        v66 = 0.0;
        v94[2] = v67;
        do
        {
          v66 = v66 + (float)(*(float *)&v94[v64] * *(float *)&v94[v64]);
          ++v64;
        }
        while (v64 != 3);
        v68 = acosf((float)((float)((float)(v47 * v58) + (float)(v45 * v56)) + (float)(v49 * v60))/ (float)(sqrtf(v62) * sqrtf(v66)));
        v69 = v54 + v55;
        if (v69 >= 0x64)
          v70 = -100;
        else
          v70 = 0;
        *(float *)&v100[v70 + v69] = v68;
        if (v54 > 0x63)
        {
          if (v55 >= 0x63u)
            v71 = -100;
          else
            v71 = 0;
          v55 += v71 + 1;
        }
        else
        {
          ++v54;
        }
        ++v53;
      }
      while (v53 < *((unsigned __int16 *)this + 1579));
      WORD1(v99) = v54;
    }
    else
    {
      v55 = 0;
    }
    LOWORD(v99) = v55;
    LOBYTE(v96) = 1;
    sub_10004E8C8((uint64_t)&v96);
    v52 = *((float *)&v96 + 1) * 57.2957795;
  }
  else
  {
    v52 = 20626.0;
  }
  v72 = 0;
  v73 = a2->rotation[2];
  v96 = *(_QWORD *)a2->rotation;
  v97 = v73;
  v74 = 0.0;
  do
  {
    v74 = v74 + (float)(*(float *)((char *)&v96 + v72) * *(float *)((char *)&v96 + v72));
    v72 += 4;
  }
  while (v72 != 12);
  v95[0] = sqrtf(v74);
  sub_10004E1D4((uint64_t)this + 4416, v95);
  v95[0] = 0.0;
  sub_10004E280((_QWORD *)this + 552, 2, v95);
  if (v52 >= 30.0 || (v75 = v95[0] * 57.2957795, v75 <= 90.0))
  {
    v77 = 0;
    v78 = (BOOL *)this + 4532;
    v76 = *((_BYTE *)this + 4532) == 0;
    v80 = v86;
  }
  else
  {
    v76 = *((_BYTE *)this + 4532) == 0;
    v77 = v75 < 800.0;
    v78 = (BOOL *)this + 4532;
    v79 = v75 < 800.0 && *((_BYTE *)this + 4532) == 0;
    v80 = v86;
    if (v79)
    {
      *((_QWORD *)this + 567) = *(_QWORD *)(&a2->status + 1);
      v77 = 1;
LABEL_66:
      v82 = v84;
      v81 = v85;
      goto LABEL_67;
    }
  }
  v82 = v84;
  v81 = v85;
  if (!v77 && !v76)
  {
    *((_QWORD *)this + 568) = *(_QWORD *)(&a2->status + 1);
    sub_10004E354((_QWORD *)this + 569, (__n128 *)((char *)this + 4536));
    *((_QWORD *)this + 567) = 0;
    *((_QWORD *)this + 568) = 0;
    v80 = v86;
    goto LABEL_66;
  }
LABEL_67:
  if (!*((_BYTE *)this + 4528))
    *((_BYTE *)this + 4528) = 1;
  *((float *)this + 1129) = v80;
  *((float *)this + 1130) = v81;
  *((float *)this + 1131) = v82;
  *v78 = v77;
  *((_QWORD *)this + 563) = v91;
  *((float *)this + 1128) = v92;
}

float sub_10004DC08(unsigned __int16 *a1)
{
  float v2;

  v2 = 0.0;
  if (a1[15])
    v2 = *(float *)sub_1000361EC(a1 + 14, 0);
  if (a1[47])
    sub_1000361EC(a1 + 46, 0);
  if (a1[79])
    sub_1000361EC(a1 + 78, 0);
  return v2;
}

float sub_10004DC8C(unsigned __int16 *a1)
{
  float v2;

  v2 = 0.0;
  if (a1[15])
    v2 = *(float *)sub_1000361EC(a1 + 14, 0);
  if (a1[427])
    sub_1000361EC(a1 + 426, 0);
  if (a1[839])
    sub_1000361EC(a1 + 838, 0);
  return v2;
}

uint64_t sub_10004DD10(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = *(unsigned __int16 *)(result + 28);
  v3 = *(unsigned __int16 *)(result + 30);
  v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4)
    v5 = *(unsigned int *)(result + 32);
  else
    v5 = 0;
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    v6 = v2 + 1;
    if (v6 < v4)
      LOWORD(v4) = 0;
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  v7 = *(unsigned __int16 *)(result + 92);
  *(_BYTE *)(result + 12) = 1;
  v8 = *(unsigned __int16 *)(result + 94);
  v9 = *(unsigned int *)(result + 96);
  if (v7 + v8 >= v9)
    v10 = *(unsigned int *)(result + 96);
  else
    v10 = 0;
  *(_DWORD *)(result + 92 + 4 * (v7 + v8 - v10) + 8) = a2[1];
  if (v9 <= v8)
  {
    v11 = v7 + 1;
    if (v11 < v9)
      LOWORD(v9) = 0;
    *(_WORD *)(result + 92) = v11 - v9;
  }
  else
  {
    *(_WORD *)(result + 94) = v8 + 1;
  }
  v12 = *(unsigned __int16 *)(result + 156);
  *(_BYTE *)(result + 76) = 1;
  v13 = *(unsigned __int16 *)(result + 158);
  v14 = *(unsigned int *)(result + 160);
  if (v12 + v13 >= v14)
    v15 = *(unsigned int *)(result + 160);
  else
    v15 = 0;
  *(_DWORD *)(result + 156 + 4 * (v12 + v13 - v15) + 8) = a2[2];
  if (v14 <= v13)
  {
    v16 = v12 + 1;
    if (v16 < v14)
      LOWORD(v14) = 0;
    *(_WORD *)(result + 156) = v16 - v14;
  }
  else
  {
    *(_WORD *)(result + 158) = v13 + 1;
  }
  *(_BYTE *)(result + 140) = 1;
  return result;
}

uint64_t sub_10004DE28(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned __int16 *)(result + 28);
  v3 = *(unsigned __int16 *)(result + 30);
  v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4)
    v5 = *(unsigned int *)(result + 32);
  else
    v5 = 0;
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    v6 = v2 + 1;
    if (v6 < v4)
      LOWORD(v4) = 0;
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  *(_BYTE *)(result + 12) = 1;
  v7 = *(unsigned __int16 *)(result + 854);
  v8 = *(unsigned int *)(result + 856);
  v9 = *(unsigned __int16 *)(result + 852);
  if (v9 + v7 >= v8)
    v10 = *(unsigned int *)(result + 856);
  else
    v10 = 0;
  *(_DWORD *)(result + 852 + 4 * (v9 + v7 - v10) + 8) = a2[1];
  if (v8 <= v7)
  {
    if (v9 + 1 < v8)
      LOWORD(v8) = 0;
    *(_WORD *)(result + 852) = v9 + 1 - v8;
  }
  else
  {
    *(_WORD *)(result + 854) = v7 + 1;
  }
  *(_BYTE *)(result + 836) = 1;
  v11 = *(unsigned __int16 *)(result + 1678);
  v12 = *(unsigned int *)(result + 1680);
  v13 = *(unsigned __int16 *)(result + 1676);
  if (v13 + v11 >= v12)
    v14 = *(unsigned int *)(result + 1680);
  else
    v14 = 0;
  *(_DWORD *)(result + 1676 + 4 * (v13 + v11 - v14) + 8) = a2[2];
  if (v12 <= v11)
  {
    if (v13 + 1 < v12)
      LOWORD(v12) = 0;
    *(_WORD *)(result + 1676) = v13 + 1 - v12;
  }
  else
  {
    *(_WORD *)(result + 1678) = v11 + 1;
  }
  *(_BYTE *)(result + 1660) = 1;
  return result;
}

uint64_t sub_10004DF40(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = *(unsigned __int16 *)(result + 28);
  v3 = *(unsigned __int16 *)(result + 30);
  v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4)
    v5 = *(unsigned int *)(result + 32);
  else
    v5 = 0;
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    v6 = v2 + 1;
    if (v6 < v4)
      LOWORD(v4) = 0;
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  v7 = *(unsigned __int16 *)(result + 132);
  *(_BYTE *)(result + 12) = 1;
  v8 = *(unsigned __int16 *)(result + 134);
  v9 = *(unsigned int *)(result + 136);
  if (v7 + v8 >= v9)
    v10 = *(unsigned int *)(result + 136);
  else
    v10 = 0;
  *(_DWORD *)(result + 132 + 4 * (v7 + v8 - v10) + 8) = a2[1];
  if (v9 <= v8)
  {
    v11 = v7 + 1;
    if (v11 < v9)
      LOWORD(v9) = 0;
    *(_WORD *)(result + 132) = v11 - v9;
  }
  else
  {
    *(_WORD *)(result + 134) = v8 + 1;
  }
  v12 = *(unsigned __int16 *)(result + 236);
  *(_BYTE *)(result + 116) = 1;
  v13 = *(unsigned __int16 *)(result + 238);
  v14 = *(unsigned int *)(result + 240);
  if (v12 + v13 >= v14)
    v15 = *(unsigned int *)(result + 240);
  else
    v15 = 0;
  *(_DWORD *)(result + 236 + 4 * (v12 + v13 - v15) + 8) = a2[2];
  if (v14 <= v13)
  {
    v16 = v12 + 1;
    if (v16 < v14)
      LOWORD(v14) = 0;
    *(_WORD *)(result + 236) = v16 - v14;
  }
  else
  {
    *(_WORD *)(result + 238) = v13 + 1;
  }
  *(_BYTE *)(result + 220) = 1;
  return result;
}

float sub_10004E058(uint64_t a1)
{
  uint64_t v2;
  int v3;
  float v4;

  v3 = *(unsigned __int8 *)(a1 + 12);
  v2 = a1 + 12;
  if (v3)
    sub_10004E8C8(v2);
  v4 = *(float *)(a1 + 16);
  if (*(_BYTE *)(a1 + 116))
    sub_10004E8C8(a1 + 116);
  if (*(_BYTE *)(a1 + 220))
    sub_10004E8C8(a1 + 220);
  return v4;
}

uint64_t sub_10004E0BC(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned __int16 *)(result + 28);
  v3 = *(unsigned __int16 *)(result + 30);
  v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4)
    v5 = *(unsigned int *)(result + 32);
  else
    v5 = 0;
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    v6 = v2 + 1;
    if (v6 < v4)
      LOWORD(v4) = 0;
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  *(_BYTE *)(result + 12) = 1;
  v7 = *(unsigned __int16 *)(result + 454);
  v8 = *(unsigned int *)(result + 456);
  v9 = *(unsigned __int16 *)(result + 452);
  if (v9 + v7 >= v8)
    v10 = *(unsigned int *)(result + 456);
  else
    v10 = 0;
  *(_DWORD *)(result + 452 + 4 * (v9 + v7 - v10) + 8) = a2[1];
  if (v8 <= v7)
  {
    if (v9 + 1 < v8)
      LOWORD(v8) = 0;
    *(_WORD *)(result + 452) = v9 + 1 - v8;
  }
  else
  {
    *(_WORD *)(result + 454) = v7 + 1;
  }
  *(_BYTE *)(result + 436) = 1;
  v11 = *(unsigned __int16 *)(result + 878);
  v12 = *(unsigned int *)(result + 880);
  v13 = *(unsigned __int16 *)(result + 876);
  if (v13 + v11 >= v12)
    v14 = *(unsigned int *)(result + 880);
  else
    v14 = 0;
  *(_DWORD *)(result + 876 + 4 * (v13 + v11 - v14) + 8) = a2[2];
  if (v12 <= v11)
  {
    if (v13 + 1 < v12)
      LOWORD(v12) = 0;
    *(_WORD *)(result + 876) = v13 + 1 - v12;
  }
  else
  {
    *(_WORD *)(result + 878) = v11 + 1;
  }
  *(_BYTE *)(result + 860) = 1;
  return result;
}

void sub_10004E1D4(uint64_t a1, float *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  float *v6;

  v3 = (_QWORD *)(a1 + 16);
  v4 = (uint64_t **)(a1 + 64);
  v6 = sub_10004EDEC((uint64_t **)(a1 + 64), a2);
  sub_10004EA54(v3, &v6);
  if (*(_QWORD *)(a1 + 56) > (unint64_t)*(unsigned int *)(a1 + 8))
  {
    v5 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((*(_QWORD *)(a1 + 48) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(_QWORD *)(a1 + 48) & 0x1FFLL));
    sub_10004F064(v4, v5);
    operator delete(v5);
    *(int64x2_t *)(a1 + 48) = vaddq_s64(*(int64x2_t *)(a1 + 48), (int64x2_t)xmmword_1002E56B0);
    sub_100010A8C((uint64_t)v3, 1);
  }
}

uint64_t sub_10004E280(_QWORD *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  float v10;
  int v11;
  _QWORD *v12;
  int i;
  _QWORD *v14;

  v3 = a1[10];
  if (!v3)
    return 0;
  if (a2 == 2)
  {
    v10 = (double)v3 * 0.5;
    v11 = vcvtms_s32_f32(v10);
    v12 = (_QWORD *)a1[8];
    if (v11 < 1)
    {
      v7 = (_QWORD *)a1[8];
    }
    else
    {
      for (i = 0; i != v11; ++i)
      {
        v14 = (_QWORD *)v12[1];
        if (v14)
        {
          do
          {
            v7 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v12[2];
            v8 = *v7 == (_QWORD)v12;
            v12 = v7;
          }
          while (!v8);
        }
        v12 = v7;
      }
    }
    goto LABEL_22;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      v6 = (_QWORD *)a1[9];
      v4 = a1 + 9;
      v5 = v6;
      if (v6)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)v5[1];
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (v8);
      }
      goto LABEL_22;
    }
    return 0;
  }
  v7 = (_QWORD *)a1[8];
LABEL_22:
  *a3 = *((_DWORD *)v7 + 7);
  return 1;
}

__n128 sub_10004E354(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10004F458(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void `virtual thunk to'CLKappaFeaturesAlgSpin::feedDM(CLKappaFeaturesAlgSpin *this, const DMSample *a2)
{
  CLKappaFeaturesAlgSpin::feedDM((CLKappaFeaturesAlgSpin *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)), a2);
}

void sub_10004E3EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10034E770;
  *(_QWORD *)(a1 + 4600) = off_10034EA10;
  *(_QWORD *)(a1 + 4608) = off_10034EB48;
  *(_QWORD *)(a1 + 4616) = off_10034EC20;
  sub_10004E7DC((_QWORD *)(a1 + 4552));
  *(_QWORD *)(a1 + 4416) = off_10034F2A8;
  sub_10004E79C(a1 + 4480, *(_QWORD **)(a1 + 4488));
  sub_10000F218((_QWORD *)(a1 + 4432));
  sub_10000A718(a1 + 48);
  sub_10000A718(a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock((CLKappaAlgBlock *)a1, (uint64_t *)off_10034EC70);
}

void sub_10004E480(uint64_t a1)
{
  *(_QWORD *)a1 = off_10034E770;
  *(_QWORD *)(a1 + 4600) = off_10034EA10;
  *(_QWORD *)(a1 + 4608) = off_10034EB48;
  *(_QWORD *)(a1 + 4616) = off_10034EC20;
  sub_10004E7DC((_QWORD *)(a1 + 4552));
  *(_QWORD *)(a1 + 4416) = off_10034F2A8;
  sub_10004E79C(a1 + 4480, *(_QWORD **)(a1 + 4488));
  sub_10000F218((_QWORD *)(a1 + 4432));
  sub_10000A718(a1 + 48);
  sub_10000A718(a1 + 32);
  CLKappaAlgBlock::~CLKappaAlgBlock((CLKappaAlgBlock *)a1, (uint64_t *)off_10034EC70);
  operator delete();
}

_QWORD *sub_10004E52C(uint64_t a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)(a1 + 48), a2);
}

void sub_10004E534(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_10034E770;
  *((_QWORD *)v1 + 575) = off_10034EA10;
  *((_QWORD *)v1 + 576) = off_10034EB48;
  *((_QWORD *)v1 + 577) = off_10034EC20;
  sub_10004E7DC((_QWORD *)v1 + 569);
  *((_QWORD *)v1 + 552) = off_10034F2A8;
  sub_10004E79C((uint64_t)(v1 + 4480), *((_QWORD **)v1 + 561));
  sub_10000F218((_QWORD *)v1 + 554);
  sub_10000A718((uint64_t)(v1 + 48));
  sub_10000A718((uint64_t)(v1 + 32));
  CLKappaAlgBlock::~CLKappaAlgBlock((CLKappaAlgBlock *)v1, (uint64_t *)off_10034EC70);
}

void sub_10004E5D0(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = off_10034E770;
  *((_QWORD *)v1 + 575) = off_10034EA10;
  *((_QWORD *)v1 + 576) = off_10034EB48;
  *((_QWORD *)v1 + 577) = off_10034EC20;
  sub_10004E7DC((_QWORD *)v1 + 569);
  *((_QWORD *)v1 + 552) = off_10034F2A8;
  sub_10004E79C((uint64_t)(v1 + 4480), *((_QWORD **)v1 + 561));
  sub_10000F218((_QWORD *)v1 + 554);
  sub_10000A718((uint64_t)(v1 + 48));
  sub_10000A718((uint64_t)(v1 + 32));
  CLKappaAlgBlock::~CLKappaAlgBlock((CLKappaAlgBlock *)v1, (uint64_t *)off_10034EC70);
  operator delete();
}

_QWORD *sub_10004E680(_QWORD *a1, uint64_t *a2)
{
  return sub_10000A6A0((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 32) + 48), a2);
}

void sub_10004E694(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.anomalydetectiond", "Alg");
  v2 = (void *)qword_100387318;
  qword_100387318 = (uint64_t)v1;

}

void sub_10004E6C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_10034F2A8;
  sub_10004E79C(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_10000F218((_QWORD *)(a1 + 16));
  operator delete();
}

void sub_10004E714(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = (void **)a1[3];
  v3 = a1[4];
  a1[7] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[4];
      v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 512;
LABEL_7:
    a1[6] = v6;
  }
  v8 = (_QWORD *)a1[9];
  v7 = a1 + 9;
  sub_10004E79C((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *v7 = 0;
  v7[1] = 0;
}

void sub_10004E79C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10004E79C(a1, *a2);
    sub_10004E79C(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_10004E7DC(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10000F1CC((uint64_t)a1);
}

void sub_10004E870(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10034F2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10004E884(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10034F2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10004E8B8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_10004E8C8(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  unint64_t v8;

  v1 = result;
  if (*(_WORD *)(result + 18))
  {
    v2 = 0;
    v3 = 0.0;
    do
    {
      result = sub_1000361EC((unsigned __int16 *)(v1 + 16), v2);
      v3 = v3 + *(float *)result;
      ++v2;
      v4 = *(unsigned __int16 *)(v1 + 18);
    }
    while (v2 < v4);
    *(float *)(v1 + 4) = v3 / (float)v4;
    v5 = 0.0;
    if (v4 >= 3)
    {
      v6 = 0;
      v7 = 0.0;
      do
      {
        result = sub_1000361EC((unsigned __int16 *)(v1 + 16), v6);
        v7 = v7
           + (float)((float)(*(float *)result - *(float *)(v1 + 4)) * (float)(*(float *)result - *(float *)(v1 + 4)));
        ++v6;
        v8 = *(unsigned __int16 *)(v1 + 18);
      }
      while (v6 < v8);
      v5 = v7 / (float)v8;
    }
  }
  else
  {
    *(_DWORD *)(result + 4) = 0;
    v5 = 0.0;
  }
  *(float *)(v1 + 8) = v5;
  *(_BYTE *)v1 = 0;
  return result;
}

float sub_10004E994(uint64_t a1)
{
  uint64_t v2;
  int v3;
  float v4;

  v3 = *(unsigned __int8 *)(a1 + 12);
  v2 = a1 + 12;
  if (v3)
    sub_10004E8C8(v2);
  v4 = *(float *)(a1 + 16);
  if (*(_BYTE *)(a1 + 436))
    sub_10004E8C8(a1 + 436);
  if (*(_BYTE *)(a1 + 860))
    sub_10004E8C8(a1 + 860);
  return v4;
}

float sub_10004E9F8(unsigned __int16 *a1, unint64_t a2)
{
  float v4;

  v4 = *(float *)sub_1000361EC(a1 + 14, a2);
  sub_1000361EC(a1 + 226, a2);
  sub_1000361EC(a1 + 438, a2);
  return v4;
}

void sub_10004EA54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_10004EAD8(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_10004EAD8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10000D60C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_10000FB28(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_10000FC3C((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10000D60C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10000D60C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10000FD58(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_10000FE6C((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10004EDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float *sub_10004EDEC(uint64_t **a1, float *a2)
{
  float *v4;
  float v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (float *)operator new(0x20uLL);
  v5 = *a2;
  v4[7] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((float *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_10004EE78(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

uint64_t *sub_10004EE78(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_10004EECC(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_10004EECC(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_10004F064(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10004F0D4(v6, a2);
  return v3;
}

uint64_t *sub_10004F0D4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_10004F458(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10000D60C(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_10000FB28(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_10000FC3C((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10000D60C((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10000D60C((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10000FD58(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_10000FE6C((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10004F720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F76C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t sub_10004F7C8(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 32 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100)
    a2 = 1;
  if (v5 < 0x200)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t CMMsl::ALSData::ALSData(uint64_t this)
{
  *(_QWORD *)this = off_10034F338;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F338;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::ALSData::~ALSData(CMMsl::ALSData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::ALSData::ALSData(CMMsl::ALSData *this, const CMMsl::ALSData *a2)
{
  float result;

  *(_QWORD *)this = off_10034F338;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)this = off_10034F338;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::ALSData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  void (**v7)(CMMsl::ALSData *__hidden);
  int v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_10034F338;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::ALSData *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8 = off_10034F338;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ALSData *a2, CMMsl::ALSData *a3)
{
  int v3;
  float result;

  v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::ALSData::ALSData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034F338;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034F338;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::ALSData::formatText(CMMsl::ALSData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "alsTrustedLux", *((float *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ALSData::readFrom(CMMsl::ALSData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::ALSData::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

float CMMsl::ALSData::hash_value(CMMsl::ALSData *this)
{
  float result;

  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((float *)this + 2);
  return result;
}

uint64_t CMMsl::ALSPhone::ALSPhone(uint64_t this)
{
  *(_QWORD *)this = off_10034F370;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F370;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::ALSPhone::~ALSPhone(CMMsl::ALSPhone *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::ALSPhone::ALSPhone(CMMsl::ALSPhone *this, const CMMsl::ALSPhone *a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)this = off_10034F370;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 20) = 1;
    *((_QWORD *)this + 1) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)this = off_10034F370;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 20) = 1;
    *((_QWORD *)this + 1) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t CMMsl::ALSPhone::operator=(uint64_t a1, uint64_t a2, float a3)
{
  void (**v4)(CMMsl::ALSPhone *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v4 = off_10034F370;
    v11[0] = off_10034F370;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::ALSPhone *__hidden))(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ALSPhone *a2, CMMsl::ALSPhone *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::ALSPhone::ALSPhone(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034F370;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034F370;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::ALSPhone::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD v10[2];
  int v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v12 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = off_10034F370;
    v10[1] = v7;
    v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::ALSPhone::formatText(CMMsl::ALSPhone *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "lux", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ALSPhone::readFrom(CMMsl::ALSPhone *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ALSPhone::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::ALSPhone::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::ALSPhone::hash_value(CMMsl::ALSPhone *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

_QWORD *CMMsl::APSleep::APSleep(_QWORD *this)
{
  *this = off_10034F3A8;
  return this;
}

{
  *this = off_10034F3A8;
  return this;
}

void CMMsl::APSleep::~APSleep(CMMsl::APSleep *this)
{
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::APSleep::APSleep(_QWORD *this, const CMMsl::APSleep *a2)
{
  *this = off_10034F3A8;
  return this;
}

{
  *this = off_10034F3A8;
  return this;
}

uint64_t CMMsl::APSleep::operator=(uint64_t a1, uint64_t a2)
{
  void (**v4)(CMMsl::APSleep *__hidden);

  if (a1 != a2)
  {
    v4 = off_10034F3A8;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

{
  void (**v4)(CMMsl::APSleep *__hidden);

  if (a1 != a2)
  {
    v4 = off_10034F3A8;
    PB::Base::~Base((PB::Base *)&v4);
  }
  return a1;
}

_QWORD *CMMsl::APSleep::APSleep(_QWORD *result)
{
  *result = off_10034F3A8;
  return result;
}

{
  *result = off_10034F3A8;
  return result;
}

uint64_t CMMsl::APSleep::formatText(CMMsl::APSleep *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::APSleep::readFrom(CMMsl::APSleep *this, PB::Reader *a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  unint64_t v14;
  unint64_t v15;
  char v16;

  while (1)
  {
    v3 = *((_QWORD *)a2 + 1);
    v4 = *((_QWORD *)a2 + 2);
    v5 = *((unsigned __int8 *)a2 + 24);
    if (v3 >= v4 || v5 != 0)
      return v5 == 0;
    v7 = *(_QWORD *)a2;
    v8 = 0;
    v9 = 0;
    v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      v14 = 0;
      if (v3 > v4)
        v4 = *((_QWORD *)a2 + 1);
      while (v4 != v3)
      {
        v11 = v3 + 1;
        v12 = *(_BYTE *)(v7 + v3);
        *((_QWORD *)a2 + 1) = v11;
        v14 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          goto LABEL_22;
        v8 += 7;
        v3 = v11;
        if (v9++ >= 9)
        {
LABEL_21:
          v14 = 0;
          goto LABEL_22;
        }
      }
      v5 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v5 == 0;
    }
    v14 = 0;
    while (1)
    {
      v15 = v3 + 1;
      *((_QWORD *)a2 + 1) = v3 + 1;
      v16 = *(_BYTE *)(v7 + v3);
      v14 |= (unint64_t)(v16 & 0x7F) << v8;
      if ((v16 & 0x80) == 0)
        break;
      v8 += 7;
      v3 = v15;
      v10 = v9++ > 8;
      if (v10)
        goto LABEL_21;
    }
LABEL_22:
    if ((v14 & 7) == 4)
    {
      v5 = 0;
      return v5 == 0;
    }
    if ((PB::Reader::skip(a2, v14 >> 3, v14 & 7, 0) & 1) == 0)
      return 0;
  }
}

uint64_t CMMsl::APSleep::operator==()
{
  return 1;
}

uint64_t CMMsl::APSleep::hash_value(CMMsl::APSleep *this)
{
  return 0;
}

_QWORD *CMMsl::APWake::APWake(_QWORD *this)
{
  *this = off_10034F3E0;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F3E0;
  this[1] = 0;
  return this;
}

void CMMsl::APWake::~APWake(CMMsl::APWake *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_10034F3E0;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  CMMsl::APWake::~APWake(this);
  operator delete();
}

_QWORD *CMMsl::APWake::APWake(_QWORD *this, const CMMsl::APWake *a2)
{
  *this = off_10034F3E0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::APWake *CMMsl::APWake::operator=(const CMMsl::APWake *a1, const CMMsl::APWake *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::APWake::APWake(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    CMMsl::APWake::~APWake((CMMsl::APWake *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::APWake *a2, CMMsl::APWake *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::APWake::APWake(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10034F3E0;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10034F3E0;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

uint64_t CMMsl::APWake::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034F3E0;
    v6[1] = v4;
    CMMsl::APWake::~APWake((CMMsl::APWake *)v6);
  }
  return a1;
}

uint64_t CMMsl::APWake::formatText(CMMsl::APWake *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "wakeReason");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::APWake::readFrom(CMMsl::APWake *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::APWake::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
    return PB::Writer::write(a2, v2, 1);
  return this;
}

uint64_t CMMsl::APWake::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL sub_100050A84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

unint64_t CMMsl::APWake::hash_value(CMMsl::APWake *this)
{
  uint64_t v1;
  char v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return sub_1000112DC((uint64_t)&v3, v1);
  else
    return 0;
}

uint64_t CMMsl::ARKitWorldPose::ARKitWorldPose(uint64_t this)
{
  *(_QWORD *)this = off_10034F418;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F418;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::ARKitWorldPose::~ARKitWorldPose(CMMsl::ARKitWorldPose *this)
{
  void *v2;

  *(_QWORD *)this = off_10034F418;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::ARKitWorldPose::~ARKitWorldPose(this);
  operator delete();
}

CMMsl::ARKitWorldPose *CMMsl::ARKitWorldPose::ARKitWorldPose(CMMsl::ARKitWorldPose *this, const CMMsl::ARKitWorldPose *a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v12;

  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *(_QWORD *)this = off_10034F418;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  v5 = *((_BYTE *)a2 + 56);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 4);
    v6 = 1;
    *((_BYTE *)this + 56) = 1;
    *((_QWORD *)this + 4) = v7;
    v5 = *((_BYTE *)a2 + 56);
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 56) & 4) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 11);
    v6 |= 4u;
    *((_BYTE *)this + 56) = v6;
    *((_DWORD *)this + 11) = v8;
    v5 = *((_BYTE *)a2 + 56);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = *((_DWORD *)a2 + 12);
  v6 |= 8u;
  *((_BYTE *)this + 56) = v6;
  *((_DWORD *)this + 12) = v12;
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 13);
    *((_BYTE *)this + 56) = v6 | 0x10;
    *((_DWORD *)this + 13) = v9;
  }
LABEL_9:
  if (this != a2)
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  if ((*((_BYTE *)a2 + 56) & 2) != 0)
  {
    v10 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 56) |= 2u;
    *((_DWORD *)this + 10) = v10;
  }
  return this;
}

uint64_t CMMsl::ARKitWorldPose::operator=(uint64_t a1, const CMMsl::ARKitWorldPose *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if ((const CMMsl::ARKitWorldPose *)a1 != a2)
  {
    CMMsl::ARKitWorldPose::ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 44);
    *(_QWORD *)(a1 + 44) = v14;
    v14 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v4;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    CMMsl::ARKitWorldPose::~ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ARKitWorldPose *a2, CMMsl::ARKitWorldPose *a3)
{
  int v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

uint64_t CMMsl::ARKitWorldPose::ARKitWorldPose(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_10034F418;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::ARKitWorldPose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a1 != a2)
  {
    CMMsl::ARKitWorldPose::ARKitWorldPose((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 44);
    *(_QWORD *)(a1 + 44) = v14;
    v14 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v4;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v7;
    LODWORD(v7) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    CMMsl::ARKitWorldPose::~ARKitWorldPose((CMMsl::ARKitWorldPose *)&v9);
  }
  return a1;
}

uint64_t CMMsl::ARKitWorldPose::formatText(CMMsl::ARKitWorldPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  v8 = *((_BYTE *)this + 56);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 10));
    v8 = *((_BYTE *)this + 56);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 56) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  v8 = *((_BYTE *)this + 56);
  if ((v8 & 4) == 0)
  {
LABEL_6:
    if ((v8 & 8) == 0)
      goto LABEL_7;
LABEL_13:
    PB::TextFormatter::format(a2, "y", *((float *)this + 12));
    if ((*((_BYTE *)this + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 11));
  v8 = *((_BYTE *)this + 56);
  if ((v8 & 8) != 0)
    goto LABEL_13;
LABEL_7:
  if ((v8 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "z", *((float *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ARKitWorldPose::readFrom(CMMsl::ARKitWorldPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE v68[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 56) |= 1u;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_102;
        case 2u:
          *((_BYTE *)this + 56) |= 4u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 56) |= 8u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 56) |= 0x10u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_100;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v26);
LABEL_37:
          v27 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_103;
        case 5u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v68) & 1) != 0)
              return 0;
            v28 = *((_QWORD *)a2 + 1);
            v29 = *((_QWORD *)a2 + 2);
            while (v28 < v29 && !*((_BYTE *)a2 + 24))
            {
              v31 = (char *)*((_QWORD *)this + 2);
              v30 = *((_QWORD *)this + 3);
              if ((unint64_t)v31 >= v30)
              {
                v33 = (char *)*v8;
                v34 = (v31 - (_BYTE *)*v8) >> 3;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 61)
                  goto LABEL_114;
                v36 = v30 - (_QWORD)v33;
                if (v36 >> 2 > v35)
                  v35 = v36 >> 2;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                  v37 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v37 = v35;
                if (v37)
                {
                  v38 = (char *)sub_10000D60C((uint64_t)v9, v37);
                  v33 = (char *)*((_QWORD *)this + 1);
                  v31 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v38 = 0;
                }
                v39 = &v38[8 * v34];
                *(_QWORD *)v39 = 0;
                v32 = v39 + 8;
                while (v31 != v33)
                {
                  v40 = *((_QWORD *)v31 - 1);
                  v31 -= 8;
                  *((_QWORD *)v39 - 1) = v40;
                  v39 -= 8;
                }
                *((_QWORD *)this + 1) = v39;
                *((_QWORD *)this + 2) = v32;
                *((_QWORD *)this + 3) = &v38[8 * v37];
                if (v33)
                  operator delete(v33);
              }
              else
              {
                *(_QWORD *)v31 = 0;
                v32 = v31 + 8;
              }
              *((_QWORD *)this + 2) = v32;
              v41 = *((_QWORD *)a2 + 1);
              if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v41);
              v29 = *((_QWORD *)a2 + 2);
              v28 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v28;
            }
            PB::Reader::recallMark(a2, v68);
          }
          else
          {
            v51 = (char *)*((_QWORD *)this + 2);
            v50 = *((_QWORD *)this + 3);
            if ((unint64_t)v51 >= v50)
            {
              v57 = (char *)*v8;
              v58 = (v51 - (_BYTE *)*v8) >> 3;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61)
LABEL_114:
                sub_10000D5F8();
              v60 = v50 - (_QWORD)v57;
              if (v60 >> 2 > v59)
                v59 = v60 >> 2;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
                v61 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_10000D60C((uint64_t)v9, v61);
                v57 = (char *)*((_QWORD *)this + 1);
                v51 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[8 * v58];
              *(_QWORD *)v63 = 0;
              v52 = v63 + 8;
              while (v51 != v57)
              {
                v64 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *((_QWORD *)v63 - 1) = v64;
                v63 -= 8;
              }
              *((_QWORD *)this + 1) = v63;
              *((_QWORD *)this + 2) = v52;
              *((_QWORD *)this + 3) = &v62[8 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_QWORD *)v51 = 0;
              v52 = v51 + 8;
            }
            *((_QWORD *)this + 2) = v52;
            v65 = *((_QWORD *)a2 + 1);
            if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v65);
LABEL_102:
              v27 = *((_QWORD *)a2 + 1) + 8;
LABEL_103:
              *((_QWORD *)a2 + 1) = v27;
            }
            else
            {
LABEL_100:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_104:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          *((_BYTE *)this + 56) |= 2u;
          v42 = *((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          v44 = *(_QWORD *)a2;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v48 = v42 + 1;
              *((_QWORD *)a2 + 1) = v42 + 1;
              v49 = *(_BYTE *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0)
                goto LABEL_89;
              v45 += 7;
              v42 = v48;
              v16 = v46++ > 8;
            }
            while (!v16);
LABEL_77:
            LODWORD(v47) = 0;
            goto LABEL_89;
          }
          v53 = 0;
          v54 = 0;
          v47 = 0;
          if (v43 <= v42)
            v43 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v55 = v42 + 1;
              v56 = *(_BYTE *)(v44 + v42);
              *((_QWORD *)a2 + 1) = v55;
              v47 |= (unint64_t)(v56 & 0x7F) << v53;
              if (v56 < 0)
              {
                v53 += 7;
                v42 = v55;
                v16 = v54++ > 8;
                if (v16)
                  goto LABEL_77;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v47) = 0;
            }
            break;
          }
LABEL_89:
          *((_DWORD *)this + 10) = v47;
          goto LABEL_104;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_104;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ARKitWorldPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_13:
      this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
      if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 2u);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 8) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v4 & 0x10) != 0)
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 4u);
LABEL_6:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 5u);
  }
  if ((*(_BYTE *)(v3 + 56) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 6u);
  return this;
}

BOOL CMMsl::ARKitWorldPose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  _BOOL8 v5;

  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 4) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v5 = (*(_BYTE *)(a2 + 56) & 2) == 0;
  if ((*(_BYTE *)(a1 + 56) & 2) != 0)
    return (*(_BYTE *)(a2 + 56) & 2) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v5;
}

uint64_t CMMsl::ARKitWorldPose::hash_value(CMMsl::ARKitWorldPose *this)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 56) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 56) & 4) != 0)
      goto LABEL_3;
LABEL_18:
    v4 = 0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
      goto LABEL_7;
    goto LABEL_19;
  }
  if (*((double *)this + 4) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 4);
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_18;
LABEL_3:
  v3 = *((float *)this + 11);
  if (v3 == 0.0)
    v4 = 0;
  else
    v4 = LODWORD(v3);
  if ((*((_BYTE *)this + 56) & 8) != 0)
  {
LABEL_7:
    v5 = *((float *)this + 12);
    if (v5 == 0.0)
      v6 = 0;
    else
      v6 = LODWORD(v5);
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v6 = 0;
  if ((*((_BYTE *)this + 56) & 0x10) != 0)
  {
LABEL_11:
    v7 = *((float *)this + 13);
    if (v7 == 0.0)
      v8 = 0;
    else
      v8 = LODWORD(v7);
    goto LABEL_21;
  }
LABEL_20:
  v8 = 0;
LABEL_21:
  v9 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 56) & 2) != 0)
    v10 = *((int *)this + 10);
  else
    v10 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v9;
}

_QWORD *CMMsl::ARSessionState::ARSessionState(_QWORD *this)
{
  *this = off_10034F450;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F450;
  this[1] = 0;
  return this;
}

void CMMsl::ARSessionState::~ARSessionState(CMMsl::ARSessionState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ARSessionState::ARSessionState(uint64_t this, const CMMsl::ARSessionState *a2)
{
  int v2;

  *(_QWORD *)this = off_10034F450;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = off_10034F450;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::ARSessionState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_10034F450;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_10034F450;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ARSessionState *a2, CMMsl::ARSessionState *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::ARSessionState::ARSessionState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_10034F450;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_10034F450;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::ARSessionState::formatText(CMMsl::ARSessionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ARSessionState::readFrom(CMMsl::ARSessionState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ARSessionState::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::ARSessionState::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::ARSessionState::hash_value(CMMsl::ARSessionState *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

uint64_t CMMsl::Accel::Accel(uint64_t this)
{
  *(_QWORD *)this = off_10034F488;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F488;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::Accel::~Accel(CMMsl::Accel *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Accel::Accel(uint64_t this, const CMMsl::Accel *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_10034F488;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 28) = v7;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::Accel::operator=(uint64_t a1, const CMMsl::Accel *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::Accel *)a1 != a2)
  {
    CMMsl::Accel::Accel((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 20);
    *(_QWORD *)(a1 + 20) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v4;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Accel *a2, CMMsl::Accel *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::Accel::Accel(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034F488;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034F488;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Accel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a1 != a2)
  {
    v12[0] = off_10034F488;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v16 = *(_DWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v12[1] = v7;
    v8 = *(_QWORD *)(a1 + 20);
    v9 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 20) = v9;
    v14 = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    v15 = v8;
    v10 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::Accel::formatText(CMMsl::Accel *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "y", *((float *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Accel::readFrom(CMMsl::Accel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_52;
            case 2u:
              *((_BYTE *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((_BYTE *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((_BYTE *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_51:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_52:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_58;
            case 5u:
              *((_BYTE *)this + 32) |= 2u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_57;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_56;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_57;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *((_DWORD *)this + 4) = v25;
LABEL_58:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_58;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Accel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  return this;
}

BOOL CMMsl::Accel::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::Accel::hash_value(CMMsl::Accel *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v4 = *((float *)this + 6);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) != 0)
  {
LABEL_9:
    v6 = *((float *)this + 7);
    v7 = LODWORD(v6);
    if (v6 == 0.0)
      v7 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_12;
LABEL_19:
    v8 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8;
  }
LABEL_18:
  v7 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_19;
LABEL_12:
  v8 = *((int *)this + 4);
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8;
}

_QWORD *CMMsl::Accel800::Accel800(_QWORD *this)
{
  *this = off_10034F4C0;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F4C0;
  this[1] = 0;
  return this;
}

void CMMsl::Accel800::~Accel800(CMMsl::Accel800 *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F4C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F4C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F4C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::Accel800::Accel800(_QWORD *this, const CMMsl::Accel800 *a2)
{
  *this = off_10034F4C0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::Accel800 *CMMsl::Accel800::operator=(const CMMsl::Accel800 *a1, const CMMsl::Accel800 *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::Accel800 *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::Accel800::Accel800(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_10034F4C0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::Accel800 *a2, CMMsl::Accel800 *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::Accel800::Accel800(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F4C0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F4C0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::Accel800::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034F4C0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::Accel800::formatText(CMMsl::Accel800 *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Accel800::readFrom(CMMsl::Accel800 *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Accel800::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::Accel800::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

CMMsl::Accel *CMMsl::Accel800::hash_value(CMMsl::Accel800 *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

uint64_t CMMsl::Accel800::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::AccelBatch::AccelBatch(uint64_t this)
{
  *(_QWORD *)this = off_10034F4F8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F4F8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccelBatch::~AccelBatch(CMMsl::AccelBatch *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccelBatch::AccelBatch(uint64_t this, const CMMsl::AccelBatch *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_10034F4F8;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 28) = v7;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::AccelBatch::operator=(uint64_t a1, const CMMsl::AccelBatch *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::AccelBatch *)a1 != a2)
  {
    CMMsl::AccelBatch::AccelBatch((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 20);
    *(_QWORD *)(a1 + 20) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v4;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccelBatch *a2, CMMsl::AccelBatch *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::AccelBatch::AccelBatch(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034F4F8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034F4F8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::AccelBatch::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a1 != a2)
  {
    v12[0] = off_10034F4F8;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v16 = *(_DWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v12[1] = v7;
    v8 = *(_QWORD *)(a1 + 20);
    v9 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 32) = v3;
    *(_QWORD *)(a1 + 20) = v9;
    v14 = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    v15 = v8;
    v10 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccelBatch::formatText(CMMsl::AccelBatch *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "batch", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "y", *((float *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelBatch::readFrom(CMMsl::AccelBatch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_52;
            case 2u:
              *((_BYTE *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((_BYTE *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((_BYTE *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_51:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_52:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_58;
            case 5u:
              *((_BYTE *)this + 32) |= 2u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_57;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_56;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_57;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *((_DWORD *)this + 4) = v25;
LABEL_58:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_58;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelBatch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  return this;
}

BOOL CMMsl::AccelBatch::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::AccelBatch::hash_value(CMMsl::AccelBatch *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v4 = *((float *)this + 6);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) != 0)
  {
LABEL_9:
    v6 = *((float *)this + 7);
    v7 = LODWORD(v6);
    if (v6 == 0.0)
      v7 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_12;
LABEL_19:
    v8 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8;
  }
LABEL_18:
  v7 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_19;
LABEL_12:
  v8 = *((unsigned int *)this + 4);
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8;
}

_QWORD *CMMsl::AccelGesture::AccelGesture(_QWORD *this)
{
  *this = off_10034F530;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F530;
  this[1] = 0;
  return this;
}

void CMMsl::AccelGesture::~AccelGesture(CMMsl::AccelGesture *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F530;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F530;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F530;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::AccelGesture::AccelGesture(_QWORD *this, const CMMsl::AccelGesture *a2)
{
  *this = off_10034F530;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::AccelGesture *CMMsl::AccelGesture::operator=(const CMMsl::AccelGesture *a1, const CMMsl::AccelGesture *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AccelGesture *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AccelGesture::AccelGesture(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_10034F530;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccelGesture *a2, CMMsl::AccelGesture *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccelGesture::AccelGesture(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F530;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F530;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AccelGesture::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034F530;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccelGesture::formatText(CMMsl::AccelGesture *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelGesture::readFrom(CMMsl::AccelGesture *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelGesture::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::AccelGesture::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

CMMsl::Accel *CMMsl::AccelGesture::hash_value(CMMsl::AccelGesture *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

uint64_t CMMsl::AccelGesture::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::AccelGps::AccelGps(uint64_t this)
{
  *(_QWORD *)this = off_10034F568;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F568;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccelGps::~AccelGps(CMMsl::AccelGps *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::AccelGps::AccelGps(CMMsl::AccelGps *this, const CMMsl::AccelGps *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_10034F568;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((_BYTE *)a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::AccelGps::operator=(uint64_t a1, const CMMsl::AccelGps *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::AccelGps *)a1 != a2)
  {
    CMMsl::AccelGps::AccelGps((CMMsl::AccelGps *)&v9, a2);
    v3 = v11;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    v10 = v4;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccelGps *a2, CMMsl::AccelGps *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::AccelGps::AccelGps(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034F568;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034F568;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::AccelGps::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = off_10034F568;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccelGps::formatText(CMMsl::AccelGps *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 5));
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelGps::readFrom(CMMsl::AccelGps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 28) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 28) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 28) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 28) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_38:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelGps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  return this;
}

BOOL CMMsl::AccelGps::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::AccelGps::hash_value(CMMsl::AccelGps *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

_QWORD *CMMsl::AccelOscarEmu::AccelOscarEmu(_QWORD *this)
{
  *this = off_10034F5A0;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F5A0;
  this[1] = 0;
  return this;
}

void CMMsl::AccelOscarEmu::~AccelOscarEmu(CMMsl::AccelOscarEmu *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F5A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F5A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F5A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::AccelOscarEmu::AccelOscarEmu(_QWORD *this, const CMMsl::AccelOscarEmu *a2)
{
  *this = off_10034F5A0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::AccelOscarEmu *CMMsl::AccelOscarEmu::operator=(const CMMsl::AccelOscarEmu *a1, const CMMsl::AccelOscarEmu *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AccelOscarEmu *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AccelOscarEmu::AccelOscarEmu(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_10034F5A0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccelOscarEmu *a2, CMMsl::AccelOscarEmu *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccelOscarEmu::AccelOscarEmu(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F5A0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F5A0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AccelOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034F5A0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccelOscarEmu::formatText(CMMsl::AccelOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelOscarEmu::readFrom(CMMsl::AccelOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::AccelOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

CMMsl::Accel *CMMsl::AccelOscarEmu::hash_value(CMMsl::AccelOscarEmu *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

uint64_t CMMsl::AccelOscarEmu::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

double CMMsl::AccelTNBFrame::AccelTNBFrame(CMMsl::AccelTNBFrame *this)
{
  double result;

  *(_QWORD *)this = off_10034F5D8;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_10034F5D8;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void CMMsl::AccelTNBFrame::~AccelTNBFrame(CMMsl::AccelTNBFrame *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_10034F5D8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccelTNBFrame::~AccelTNBFrame(this);
  operator delete();
}

CMMsl::AccelTNBFrame *CMMsl::AccelTNBFrame::AccelTNBFrame(CMMsl::AccelTNBFrame *this, const CMMsl::AccelTNBFrame *a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  *(_QWORD *)this = off_10034F5D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (this != a2)
  {
    sub_100020CE4((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  v5 = *((_BYTE *)a2 + 116);
  if ((v5 & 2) != 0)
  {
    v8 = *((_QWORD *)a2 + 11);
    *((_BYTE *)this + 116) |= 2u;
    *((_QWORD *)this + 11) = v8;
    v5 = *((_BYTE *)a2 + 116);
    if ((v5 & 1) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)a2 + 116) & 1) == 0)
  {
    goto LABEL_5;
  }
  v9 = *((_QWORD *)a2 + 10);
  *((_BYTE *)this + 116) |= 1u;
  *((_QWORD *)this + 10) = v9;
  v5 = *((_BYTE *)a2 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
LABEL_13:
    v11 = *((_BYTE *)a2 + 112);
    *((_BYTE *)this + 116) |= 0x10u;
    *((_BYTE *)this + 112) = v11;
    if ((*((_BYTE *)a2 + 116) & 4) == 0)
      return this;
    goto LABEL_8;
  }
LABEL_12:
  v10 = *((_QWORD *)a2 + 13);
  *((_BYTE *)this + 116) |= 8u;
  *((_QWORD *)this + 13) = v10;
  v5 = *((_BYTE *)a2 + 116);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_7:
  if ((v5 & 4) != 0)
  {
LABEL_8:
    v6 = *((_QWORD *)a2 + 12);
    *((_BYTE *)this + 116) |= 4u;
    *((_QWORD *)this + 12) = v6;
  }
  return this;
}

CMMsl *CMMsl::AccelTNBFrame::operator=(CMMsl *a1, const CMMsl::AccelTNBFrame *a2)
{
  CMMsl::AccelTNBFrame *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::AccelTNBFrame::AccelTNBFrame((CMMsl::AccelTNBFrame *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccelTNBFrame *)v5, v3);
    CMMsl::AccelTNBFrame::~AccelTNBFrame((CMMsl::AccelTNBFrame *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccelTNBFrame *a2, CMMsl::AccelTNBFrame *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v12;
  v13 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v14;
  v15 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v15;
  LOBYTE(v12) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v12;
  result = *((double *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((double *)a2 + 12) = result;
  return result;
}

uint64_t CMMsl::AccelTNBFrame::AccelTNBFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034F5D8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v5, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

CMMsl *CMMsl::AccelTNBFrame::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AccelTNBFrame *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccelTNBFrame::AccelTNBFrame((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccelTNBFrame *)v5, v3);
    CMMsl::AccelTNBFrame::~AccelTNBFrame((CMMsl::AccelTNBFrame *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccelTNBFrame::formatText(CMMsl::AccelTNBFrame *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "B", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "N", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "T", v13);
  }
  v14 = *((_BYTE *)this + 116);
  if ((v14 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "curvature", *((double *)this + 10));
    v14 = *((_BYTE *)this + 116);
    if ((v14 & 0x10) == 0)
    {
LABEL_9:
      if ((v14 & 2) == 0)
        goto LABEL_10;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)this + 116) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "isValid", *((_BYTE *)this + 112));
  v14 = *((_BYTE *)this + 116);
  if ((v14 & 2) == 0)
  {
LABEL_10:
    if ((v14 & 4) == 0)
      goto LABEL_11;
LABEL_17:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 12));
    if ((*((_BYTE *)this + 116) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "jerkNorm", *((double *)this + 11));
  v14 = *((_BYTE *)this + 116);
  if ((v14 & 4) != 0)
    goto LABEL_17;
LABEL_11:
  if ((v14 & 8) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "torsion", *((double *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccelTNBFrame::readFrom(CMMsl::AccelTNBFrame *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  _DWORD *v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  int v101;
  char *v102;
  int v103;
  char *v104;
  int v105;
  unint64_t v106;
  char *v108;
  char *v109;
  char *v110;
  _BYTE v111[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (void **)((char *)this + 32);
    v109 = (char *)this + 48;
    v110 = (char *)this + 24;
    v10 = (void **)((char *)this + 56);
    v108 = (char *)this + 72;
    while (1)
    {
      v11 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        if (v13++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v14 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          if (v23 != 2)
          {
            v76 = (char *)*((_QWORD *)this + 8);
            v75 = *((_QWORD *)this + 9);
            if ((unint64_t)v76 >= v75)
            {
              v82 = (char *)*v10;
              v83 = (v76 - (_BYTE *)*v10) >> 2;
              v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 62)
LABEL_180:
                sub_10000D5F8();
              v85 = v75 - (_QWORD)v82;
              if (v85 >> 1 > v84)
                v84 = v85 >> 1;
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
                v86 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v86 = v84;
              if (v86)
              {
                v87 = (char *)sub_100020E2C((uint64_t)v108, v86);
                v82 = (char *)*((_QWORD *)this + 7);
                v76 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v87 = 0;
              }
              v100 = &v87[4 * v83];
              *(_DWORD *)v100 = 0;
              v77 = v100 + 4;
              while (v76 != v82)
              {
                v101 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v100 - 1) = v101;
                v100 -= 4;
              }
              *((_QWORD *)this + 7) = v100;
              *((_QWORD *)this + 8) = v77;
              *((_QWORD *)this + 9) = &v87[4 * v86];
              if (v82)
                operator delete(v82);
            }
            else
            {
              *(_DWORD *)v76 = 0;
              v77 = v76 + 4;
            }
            *((_QWORD *)this + 8) = v77;
            goto LABEL_167;
          }
          if ((PB::Reader::placeMark(a2, v111) & 1) != 0)
            return 0;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          while (v24 < v25 && !*((_BYTE *)a2 + 24))
          {
            v27 = (char *)*((_QWORD *)this + 8);
            v26 = *((_QWORD *)this + 9);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*v10;
              v30 = (v27 - (_BYTE *)*v10) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_180;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)sub_100020E2C((uint64_t)v108, v33);
                v29 = (char *)*((_QWORD *)this + 7);
                v27 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[4 * v30];
              *(_DWORD *)v35 = 0;
              v28 = v35 + 4;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *((_QWORD *)this + 7) = v35;
              *((_QWORD *)this + 8) = v28;
              *((_QWORD *)this + 9) = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = 0;
              v28 = v27 + 4;
            }
            *((_QWORD *)this + 8) = v28;
            v37 = *((_QWORD *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_120;
            *(v28 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v37);
            v25 = *((_QWORD *)a2 + 2);
            v24 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v24;
          }
          goto LABEL_121;
        case 2u:
          if (v23 != 2)
          {
            v79 = (char *)*((_QWORD *)this + 5);
            v78 = *((_QWORD *)this + 6);
            if ((unint64_t)v79 >= v78)
            {
              v88 = (char *)*v9;
              v89 = (v79 - (_BYTE *)*v9) >> 2;
              v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62)
LABEL_181:
                sub_10000D5F8();
              v91 = v78 - (_QWORD)v88;
              if (v91 >> 1 > v90)
                v90 = v91 >> 1;
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                v92 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v92 = v90;
              if (v92)
              {
                v93 = (char *)sub_100020E2C((uint64_t)v109, v92);
                v88 = (char *)*((_QWORD *)this + 4);
                v79 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v93 = 0;
              }
              v102 = &v93[4 * v89];
              *(_DWORD *)v102 = 0;
              v77 = v102 + 4;
              while (v79 != v88)
              {
                v103 = *((_DWORD *)v79 - 1);
                v79 -= 4;
                *((_DWORD *)v102 - 1) = v103;
                v102 -= 4;
              }
              *((_QWORD *)this + 4) = v102;
              *((_QWORD *)this + 5) = v77;
              *((_QWORD *)this + 6) = &v93[4 * v92];
              if (v88)
                operator delete(v88);
            }
            else
            {
              *(_DWORD *)v79 = 0;
              v77 = v79 + 4;
            }
            *((_QWORD *)this + 5) = v77;
            goto LABEL_167;
          }
          if ((PB::Reader::placeMark(a2, v111) & 1) != 0)
            return 0;
          v38 = *((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 2);
          while (v38 < v39 && !*((_BYTE *)a2 + 24))
          {
            v41 = (char *)*((_QWORD *)this + 5);
            v40 = *((_QWORD *)this + 6);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v9;
              v44 = (v41 - (_BYTE *)*v9) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                goto LABEL_181;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_100020E2C((uint64_t)v109, v47);
                v43 = (char *)*((_QWORD *)this + 4);
                v41 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = 0;
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *((_QWORD *)this + 4) = v49;
              *((_QWORD *)this + 5) = v42;
              *((_QWORD *)this + 6) = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v41 = 0;
              v42 = v41 + 4;
            }
            *((_QWORD *)this + 5) = v42;
            v51 = *((_QWORD *)a2 + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_120;
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v51);
            v39 = *((_QWORD *)a2 + 2);
            v38 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v38;
          }
          goto LABEL_121;
        case 3u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v111) & 1) != 0)
              return 0;
            v52 = *((_QWORD *)a2 + 1);
            v53 = *((_QWORD *)a2 + 2);
            while (v52 < v53 && !*((_BYTE *)a2 + 24))
            {
              v55 = (char *)*((_QWORD *)this + 2);
              v54 = *((_QWORD *)this + 3);
              if ((unint64_t)v55 >= v54)
              {
                v57 = (char *)*v8;
                v58 = (v55 - (_BYTE *)*v8) >> 2;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62)
                  goto LABEL_182;
                v60 = v54 - (_QWORD)v57;
                if (v60 >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v62 = (char *)sub_100020E2C((uint64_t)v110, v61);
                  v57 = (char *)*((_QWORD *)this + 1);
                  v55 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v62 = 0;
                }
                v63 = &v62[4 * v58];
                *(_DWORD *)v63 = 0;
                v56 = v63 + 4;
                while (v55 != v57)
                {
                  v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *((_DWORD *)v63 - 1) = v64;
                  v63 -= 4;
                }
                *((_QWORD *)this + 1) = v63;
                *((_QWORD *)this + 2) = v56;
                *((_QWORD *)this + 3) = &v62[4 * v61];
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_DWORD *)v55 = 0;
                v56 = v55 + 4;
              }
              *((_QWORD *)this + 2) = v56;
              v65 = *((_QWORD *)a2 + 1);
              if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_120:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v65);
              v53 = *((_QWORD *)a2 + 2);
              v52 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v52;
            }
LABEL_121:
            PB::Reader::recallMark(a2, v111);
          }
          else
          {
            v81 = (char *)*((_QWORD *)this + 2);
            v80 = *((_QWORD *)this + 3);
            if ((unint64_t)v81 >= v80)
            {
              v94 = (char *)*v8;
              v95 = (v81 - (_BYTE *)*v8) >> 2;
              v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 62)
LABEL_182:
                sub_10000D5F8();
              v97 = v80 - (_QWORD)v94;
              if (v97 >> 1 > v96)
                v96 = v97 >> 1;
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
                v98 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v98 = v96;
              if (v98)
              {
                v99 = (char *)sub_100020E2C((uint64_t)v110, v98);
                v94 = (char *)*((_QWORD *)this + 1);
                v81 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v99 = 0;
              }
              v104 = &v99[4 * v95];
              *(_DWORD *)v104 = 0;
              v77 = v104 + 4;
              while (v81 != v94)
              {
                v105 = *((_DWORD *)v81 - 1);
                v81 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              *((_QWORD *)this + 1) = v104;
              *((_QWORD *)this + 2) = v77;
              *((_QWORD *)this + 3) = &v99[4 * v98];
              if (v94)
                operator delete(v94);
            }
            else
            {
              *(_DWORD *)v81 = 0;
              v77 = v81 + 4;
            }
            *((_QWORD *)this + 2) = v77;
LABEL_167:
            v106 = *((_QWORD *)a2 + 1);
            if (v106 <= 0xFFFFFFFFFFFFFFFBLL && v106 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v77 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v106);
              v74 = *((_QWORD *)a2 + 1) + 4;
LABEL_171:
              *((_QWORD *)a2 + 1) = v74;
            }
            else
            {
LABEL_169:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_172:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 116) |= 2u;
          v66 = *((_QWORD *)a2 + 1);
          if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v66);
          goto LABEL_111;
        case 5u:
          *((_BYTE *)this + 116) |= 1u;
          v67 = *((_QWORD *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v67);
          goto LABEL_111;
        case 6u:
          *((_BYTE *)this + 116) |= 8u;
          v68 = *((_QWORD *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v68);
          goto LABEL_111;
        case 7u:
          *((_BYTE *)this + 116) |= 0x10u;
          v69 = *((_QWORD *)a2 + 1);
          if (v69 >= *((_QWORD *)a2 + 2))
          {
            v72 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v70 = v69 + 1;
            v71 = *(unsigned __int8 *)(*(_QWORD *)a2 + v69);
            *((_QWORD *)a2 + 1) = v70;
            v72 = v71 != 0;
          }
          *((_BYTE *)this + 112) = v72;
          goto LABEL_172;
        case 8u:
          *((_BYTE *)this + 116) |= 4u;
          v73 = *((_QWORD *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFF7 || v73 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_169;
          *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v73);
LABEL_111:
          v74 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_171;
        default:
          if ((PB::Reader::skip(a2, v14 >> 3, v23, 0) & 1) == 0)
            return 0;
          goto LABEL_172;
      }
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v14 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelTNBFrame::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  char v13;

  v3 = this;
  v4 = *(float **)(this + 56);
  v5 = *(float **)(this + 64);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  v10 = *(float **)(v3 + 8);
  v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 3u);
  }
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 88), 4u);
    v13 = *(_BYTE *)(v3 + 116);
    if ((v13 & 1) == 0)
    {
LABEL_12:
      if ((v13 & 8) == 0)
        goto LABEL_13;
      goto LABEL_18;
    }
  }
  else if ((*(_BYTE *)(v3 + 116) & 1) == 0)
  {
    goto LABEL_12;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 5u);
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 8) == 0)
  {
LABEL_13:
    if ((v13 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 6u);
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 0x10) == 0)
  {
LABEL_14:
    if ((v13 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 96), 8u);
  }
LABEL_19:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 112), 7u);
  if ((*(_BYTE *)(v3 + 116) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 96), 8u);
  return this;
}

BOOL CMMsl::AccelTNBFrame::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  _BOOL8 v11;

  v3 = *(float **)(a1 + 56);
  v2 = *(float **)(a1 + 64);
  v4 = *(float **)(a2 + 56);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 64) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 32);
  v5 = *(float **)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 8);
  v8 = *(float **)(a1 + 16);
  v10 = *(float **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 16) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  if ((*(_BYTE *)(a1 + 116) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 2) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 8) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 0x10) != 0)
  {
    return 0;
  }
  v11 = (*(_BYTE *)(a2 + 116) & 4) == 0;
  if ((*(_BYTE *)(a1 + 116) & 4) != 0)
    return (*(_BYTE *)(a2 + 116) & 4) != 0 && *(double *)(a1 + 96) == *(double *)(a2 + 96);
  return v11;
}

uint64_t CMMsl::AccelTNBFrame::hash_value(CMMsl::AccelTNBFrame *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;

  v2 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 116) & 2) == 0)
  {
    v5 = 0.0;
    if ((*((_BYTE *)this + 116) & 1) != 0)
      goto LABEL_3;
LABEL_16:
    v6 = 0.0;
    if ((*((_BYTE *)this + 116) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v7 = 0.0;
    if ((*((_BYTE *)this + 116) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v5 = *((double *)this + 11);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((*((_BYTE *)this + 116) & 1) == 0)
    goto LABEL_16;
LABEL_3:
  v6 = *((double *)this + 10);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((*((_BYTE *)this + 116) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v7 = *((double *)this + 13);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_BYTE *)this + 116) & 0x10) != 0)
  {
LABEL_9:
    v8 = *((unsigned __int8 *)this + 112);
    if ((*((_BYTE *)this + 116) & 4) != 0)
      goto LABEL_10;
LABEL_19:
    v9 = 0.0;
    return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ *(_QWORD *)&v9;
  }
LABEL_18:
  v8 = 0;
  if ((*((_BYTE *)this + 116) & 4) == 0)
    goto LABEL_19;
LABEL_10:
  v9 = *((double *)this + 12);
  if (v9 == 0.0)
    v9 = 0.0;
  return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ v8 ^ *(_QWORD *)&v9;
}

uint64_t CMMsl::AccelerometerPace::AccelerometerPace(uint64_t this)
{
  *(_QWORD *)this = off_10034F610;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F610;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccelerometerPace::~AccelerometerPace(CMMsl::AccelerometerPace *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::AccelerometerPace::AccelerometerPace(CMMsl::AccelerometerPace *this, const CMMsl::AccelerometerPace *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_10034F610;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 32) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    *((_BYTE *)this + 32) = v3 | 4;
    *((double *)this + 3) = result;
  }
  return result;
}

uint64_t CMMsl::AccelerometerPace::operator=(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  char v6;
  char v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::AccelerometerPace *__hidden);
  __int128 v13;
  uint64_t v14;
  int v15;

  if (a1 != a2)
  {
    v12 = off_10034F610;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 32);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      LOBYTE(v15) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v15) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 32) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(double *)(a2 + 24);
      LOBYTE(v15) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v15;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a4;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(double *)(a1 + 24) = a5;
    v14 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccelerometerPace *a2, CMMsl::AccelerometerPace *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::AccelerometerPace::AccelerometerPace(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034F610;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034F610;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::AccelerometerPace::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::AccelerometerPace *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_10034F610;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::AccelerometerPace::formatText(CMMsl::AccelerometerPace *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "lowerBound", *((double *)this + 2));
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "calibrated", *((double *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "upperBound", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccelerometerPace::readFrom(CMMsl::AccelerometerPace *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_37;
        }
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_32:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::AccelerometerPace::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  return this;
}

BOOL CMMsl::AccelerometerPace::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 4) == 0;
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    return (*(_BYTE *)(a2 + 32) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::AccelerometerPace::hash_value(CMMsl::AccelerometerPace *this)
{
  double v1;
  double v2;
  double v3;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3;
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t this)
{
  *(_QWORD *)this = off_10034F648;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F648;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryAccel::~AccessoryAccel(CMMsl::AccessoryAccel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F648;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F648;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F648;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t this, const CMMsl::AccessoryAccel *a2)
{
  char v2;
  uint64_t v3;
  int v4;
  int v5;

  *(_QWORD *)this = off_10034F648;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0)
        return this;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)a2 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  v5 = *((_DWORD *)a2 + 7);
  *(_BYTE *)(this + 32) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  if ((*((_BYTE *)a2 + 32) & 1) == 0)
    return this;
LABEL_6:
  v3 = *((_QWORD *)a2 + 2);
  *(_BYTE *)(this + 32) |= 1u;
  *(_QWORD *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryAccel::operator=(uint64_t a1, const CMMsl::AccessoryAccel *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::AccessoryAccel *__hidden);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((const CMMsl::AccessoryAccel *)a1 != a2)
  {
    CMMsl::AccessoryAccel::AccessoryAccel((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v11;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v7;
    v10 = 0;
    v11 = v6;
    v9 = off_10034F648;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryAccel *a2, CMMsl::AccessoryAccel *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  v6 = *(_QWORD *)(this + 8);
  v7 = *(_QWORD *)(this + 16);
  v8 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v8;
  *((_DWORD *)a2 + 7) = v5;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = v7;
  return this;
}

uint64_t CMMsl::AccessoryAccel::AccessoryAccel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034F648;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryAccel::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v11[3] = v9;
    *(_QWORD *)(a1 + 16) = v5;
    v11[1] = 0;
    v11[2] = v7;
    v11[0] = off_10034F648;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccel::formatText(CMMsl::AccessoryAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "accel");
  v6 = *((_BYTE *)this + 32);
  if ((v6 & 2) == 0)
  {
    if ((*((_BYTE *)this + 32) & 1) == 0)
      goto LABEL_5;
LABEL_9:
    PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 2));
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
  v6 = *((_BYTE *)this + 32);
  if ((v6 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v6 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryAccel::readFrom(CMMsl::AccessoryAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *((_BYTE *)this + 32) |= 2u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_72;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v26) = 0;
            goto LABEL_72;
          }
          v45 = 0;
          v46 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v47 = v21 + 1;
              v48 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v47;
              v26 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                v21 = v47;
                v14 = v46++ > 8;
                if (v14)
                  goto LABEL_52;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_72:
          *((_DWORD *)this + 6) = v26;
          goto LABEL_79;
        case 3u:
          *((_BYTE *)this + 32) |= 4u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_75;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_59:
            LODWORD(v34) = 0;
            goto LABEL_75;
          }
          v49 = 0;
          v50 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v51 = v29 + 1;
              v52 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v51;
              v34 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v29 = v51;
                v14 = v50++ > 8;
                if (v14)
                  goto LABEL_59;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_75:
          *((_DWORD *)this + 7) = v34;
          goto LABEL_79;
        case 4u:
          *((_BYTE *)this + 32) |= 1u;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_78;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_66:
            v42 = 0;
            goto LABEL_78;
          }
          v53 = 0;
          v54 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_79;
      }
      while (1)
      {
        if (v38 == v37)
        {
          v42 = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_78;
        }
        v55 = v37 + 1;
        v56 = *(_BYTE *)(v39 + v37);
        *((_QWORD *)a2 + 1) = v55;
        v42 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0)
          break;
        v53 += 7;
        v37 = v55;
        v14 = v54++ > 8;
        if (v14)
          goto LABEL_66;
      }
      if (*((_BYTE *)a2 + 24))
        v42 = 0;
LABEL_78:
      *((_QWORD *)this + 2) = v42;
LABEL_79:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
    v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 4u);
    }
  }
  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 4u);
  return this;
}

BOOL CMMsl::AccessoryAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Accel::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

unint64_t CMMsl::AccessoryAccel::hash_value(CMMsl::AccessoryAccel *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::Accel::hash_value((CMMsl::Accel *)v2);
  if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_8:
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  v3 = *((unsigned int *)this + 6);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_8;
LABEL_5:
  v4 = *((unsigned int *)this + 7);
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_9;
LABEL_6:
  v5 = *((_QWORD *)this + 2);
  return v3 ^ v2 ^ v4 ^ v5;
}

uint64_t CMMsl::AccessoryAccel::makeAccel(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

_QWORD *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(_QWORD *this)
{
  *this = off_10034F680;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_10034F680;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig(CMMsl::AccessoryAccelConfig *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_10034F680;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    sub_100011294((uint64_t)this + 16, v3);
  sub_1002395C4((void ***)this + 1, 0);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig(this);
  operator delete();
}

_QWORD *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(_QWORD *this, const CMMsl::AccessoryAccelConfig *a2)
{
  this[1] = 0;
  *this = off_10034F680;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 3))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::operator=(uint64_t a1, const CMMsl::AccessoryAccelConfig *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::AccessoryAccelConfig *)a1 != a2)
  {
    CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::AccessoryAccelConfig *a2, CMMsl::AccessoryAccelConfig *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v3;
  v4 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  return this;
}

_QWORD *CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(_QWORD *a1, _QWORD *a2)
{
  void ***v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;

  a1[1] = 0;
  v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  v5 = a1 + 2;
  *a1 = off_10034F680;
  a1[3] = 0;
  v6 = a2[3];
  a2[3] = 0;
  v7 = a1[3];
  a1[3] = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (void **)a2[1];
  a2[1] = 0;
  sub_1002395C4(v4, v8);
  v9 = a2[2];
  a2[2] = 0;
  v10 = *v5;
  *v5 = v9;
  if (v10)
    sub_100011294((uint64_t)v5, v10);
  return a1;
}

uint64_t CMMsl::AccessoryAccelConfig::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    CMMsl::AccessoryAccelConfig::AccessoryAccelConfig(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::AccessoryAccelConfig::~AccessoryAccelConfig((CMMsl::AccessoryAccelConfig *)&v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryAccelConfig::formatText(CMMsl::AccessoryAccelConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "arsc");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format(a2, "arscString");
  v5 = *((_QWORD *)this + 3);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryAccelConfig::readFrom(CMMsl::AccessoryAccelConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
        operator new();
      if ((_DWORD)v19 == 2)
        operator new();
      if ((_DWORD)v19 == 1)
        operator new();
      result = PB::Reader::skip(a2, v19, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t this)
{
  *(_QWORD *)this = off_10034F728;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F728;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = *(const PB::Base **)(this + 24);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
    this = PB::Writer::write(a2, v5, 2);
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
    return PB::Writer::write(a2, v6, 3);
  return this;
}

uint64_t CMMsl::AccessoryAccelConfig::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;

  v4 = a1[3];
  v5 = a2[3];
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a2[1];
  if (a1[1])
  {
    if (!v6 || (PB::Data::operator==() & 1) == 0 && a1[1] | a2[1])
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  v7 = (unsigned __int8 *)a1[2];
  v8 = (unsigned __int8 **)a2[2];
  result = v8 == 0;
  if (!v7)
    return result;
  if (!v8)
    return 0;
  v10 = v7[23];
  if ((v10 & 0x80u) == 0)
    v11 = (unsigned __int8 *)v7[23];
  else
    v11 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
  v12 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
  v13 = (char)v12;
  if ((char)v12 < 0)
    v12 = v8[1];
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)a2[2];
  else
    v14 = *v8;
  if ((v10 & 0x80) != 0)
    return !memcmp(*(const void **)v7, v14, *((_QWORD *)v7 + 1));
  if (!v7[23])
    return 1;
  v15 = v10 - 1;
  do
  {
    v17 = *v7++;
    v16 = v17;
    v19 = *v14++;
    v18 = v19;
    v21 = v15-- != 0;
    result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

BOOL CMMsl::AccessoryConfig::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_BYTE *)(a2 + 32);
  if ((v4 & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 16);
  v7 = *(unsigned __int8 ***)(a2 + 16);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 16);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  v13 = *(unsigned __int8 **)(a1 + 8);
  v14 = *(unsigned __int8 ***)(a2 + 8);
  if (v13)
  {
    if (!v14)
      return 0;
    v15 = v13[23];
    if ((v15 & 0x80u) == 0)
      v16 = (unsigned __int8 *)v13[23];
    else
      v16 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v14[1];
    if (v16 != v17)
      return 0;
    if (v18 >= 0)
      v19 = *(unsigned __int8 **)(a2 + 8);
    else
      v19 = *v14;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v13, v19, *((_QWORD *)v13 + 1)))
        return 0;
    }
    else if (v13[23])
    {
      while (*v13 == *v19)
      {
        ++v13;
        ++v19;
        if (!--v15)
          goto LABEL_40;
      }
      return 0;
    }
  }
  else if (v14)
  {
    return 0;
  }
LABEL_40:
  result = (v5 & 1) == 0;
  if ((v4 & 1) == 0)
    return result;
  return (v5 & 1) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

unint64_t CMMsl::AccessoryAccelConfig::hash_value(CMMsl::AccessoryAccelConfig *this)
{
  CMMsl::AccessoryConfig *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v9;

  v2 = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 3);
  if (v2)
    v3 = CMMsl::AccessoryConfig::hash_value(v2);
  else
    v3 = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4)
    v5 = PBHashBytes(*v4, v4[1]);
  else
    v5 = 0;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    v7 = sub_1000112DC((uint64_t)&v9, v6);
  else
    v7 = 0;
  return v5 ^ v3 ^ v7;
}

uint64_t CMMsl::AccessoryAccelConfig::makeConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 24))
    operator new();
  return this;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t this)
{
  *(_QWORD *)this = off_10034F6B8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F6B8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryActivityAlseepConfidenceEpoch::~AccessoryActivityAlseepConfidenceEpoch(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t this, const CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)this = off_10034F6B8;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(this + 32) = v3;
    *(_BYTE *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_14:
    v9 = *((_BYTE *)a2 + 29);
    *(_BYTE *)(this + 32) = v3 | 0x20;
    *(_BYTE *)(this + 29) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((_BYTE *)a2 + 32) & 0x20) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator=(uint64_t a1, const CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  _BYTE v7[8];
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;

  if ((const CMMsl::AccessoryActivityAlseepConfidenceEpoch *)a1 != a2)
  {
    CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v12;
    v12 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    v10 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a1 + 29) = v13;
    v13 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryActivityAlseepConfidenceEpoch *a2, CMMsl::AccessoryActivityAlseepConfidenceEpoch *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 29);
  *((_BYTE *)this + 29) = *((_BYTE *)a2 + 29);
  *((_BYTE *)a2 + 29) = v4;
  return result;
}

float CMMsl::AccessoryActivityAlseepConfidenceEpoch::AccessoryActivityAlseepConfidenceEpoch(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034F6B8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034F6B8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return result;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD v16[2];
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;
  int v22;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v8 = *(_DWORD *)(a2 + 24);
    v9 = *(_BYTE *)(a2 + 29);
    v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    v22 = v10;
    v11 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v16[0] = off_10034F6B8;
    v16[1] = v11;
    LOBYTE(v3) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v5;
    v20 = v3;
    v12 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v17 = v12;
    v13 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v7;
    v18 = v13;
    v14 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v19 = v14;
    LOBYTE(v14) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a1 + 29) = v9;
    v21 = v14;
    PB::Base::~Base((PB::Base *)v16);
  }
  return a1;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::formatText(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asleep", *((_BYTE *)this + 28));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageConfidence", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "initialized", *((_BYTE *)this + 29));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 1));
    if ((*((_BYTE *)this + 32) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "rawConfidence", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::readFrom(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_82;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_81:
                v2 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_82;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_82:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_93;
            case 2u:
              *((_BYTE *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 28) = v28;
              goto LABEL_93;
            case 3u:
              *((_BYTE *)this + 32) |= 2u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_87;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_86;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_87;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *((_DWORD *)this + 4) = v33;
              goto LABEL_93;
            case 4u:
              *((_BYTE *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_93;
            case 5u:
              *((_BYTE *)this + 32) |= 8u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_92;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_91;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_92;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *((_DWORD *)this + 6) = v39;
LABEL_93:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *((_BYTE *)this + 32) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v42 = v41 != 0;
              }
              *((_BYTE *)this + 29) = v42;
              goto LABEL_93;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 29), 6u);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 29), 6u);
  return this;
}

BOOL CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 32) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  return v2;
}

uint64_t CMMsl::AccessoryActivityAlseepConfidenceEpoch::hash_value(CMMsl::AccessoryActivityAlseepConfidenceEpoch *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 28);
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_13:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_8;
LABEL_14:
    v6 = 0;
    if ((*((_BYTE *)this + 32) & 0x20) != 0)
      goto LABEL_9;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_13;
LABEL_5:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_14;
LABEL_8:
  v6 = *((unsigned int *)this + 6);
  if ((*((_BYTE *)this + 32) & 0x20) == 0)
    goto LABEL_15;
LABEL_9:
  v7 = *((unsigned __int8 *)this + 29);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t this)
{
  *(_QWORD *)this = off_10034F6F0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F6F0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccessoryActivityStateUpdate::~AccessoryActivityStateUpdate(CMMsl::AccessoryActivityStateUpdate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t this, const CMMsl::AccessoryActivityStateUpdate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)this = off_10034F6F0;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = v3 | 8;
    *(_DWORD *)(this + 24) = v7;
    return this;
  }
  v6 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v6;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::operator=(uint64_t a1, const CMMsl::AccessoryActivityStateUpdate *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if ((const CMMsl::AccessoryActivityStateUpdate *)a1 != a2)
  {
    CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate((uint64_t)&v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryActivityStateUpdate *a2, CMMsl::AccessoryActivityStateUpdate *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return this;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::AccessoryActivityStateUpdate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_10034F6F0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(_QWORD *)result = off_10034F6F0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[2];
  __int128 v9;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = off_10034F6F0;
    v8[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::formatText(CMMsl::AccessoryActivityStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "activity", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 1));
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidenceLevel", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryActivityStateUpdate::readFrom(CMMsl::AccessoryActivityStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)a2 + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 28) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_87:
                v3 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 28) |= 2u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 4) = v31;
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 28) |= 4u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v37;
              goto LABEL_104;
            case 4u:
              *((_BYTE *)this + 28) |= 8u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 6) = v43;
LABEL_104:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  }
LABEL_8:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  return this;
}

BOOL CMMsl::AccessoryActivityStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::AccessoryActivityStateUpdate::hash_value(CMMsl::AccessoryActivityStateUpdate *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 4);
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_4;
LABEL_8:
      v3 = 0;
      if ((*((_BYTE *)this + 28) & 8) != 0)
        goto LABEL_5;
LABEL_9:
      v4 = 0;
      return v2 ^ v1 ^ v3 ^ v4;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v4;
}

void CMMsl::AccessoryConfig::~AccessoryConfig(CMMsl::AccessoryConfig *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_10034F728;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_100011294((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryConfig::~AccessoryConfig(this);
  operator delete();
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t this, const CMMsl::AccessoryConfig *a2)
{
  int v2;
  int v3;

  *(_QWORD *)this = off_10034F728;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
    v2 = *((_DWORD *)a2 + 7);
    *(_BYTE *)(this + 32) = 2;
    *(_DWORD *)(this + 28) = v2;
  }
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 32) |= 1u;
    *(_DWORD *)(this + 24) = v3;
  }
  return this;
}

uint64_t CMMsl::AccessoryConfig::operator=(uint64_t a1, const CMMsl::AccessoryConfig *a2)
{
  int v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  uint64_t v8;
  int v9;

  if ((const CMMsl::AccessoryConfig *)a1 != a2)
  {
    CMMsl::AccessoryConfig::AccessoryConfig((uint64_t)v6, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    CMMsl::AccessoryConfig::~AccessoryConfig((CMMsl::AccessoryConfig *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryConfig *a2, CMMsl::AccessoryConfig *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)a2 + 3);
  v7 = *((_QWORD *)this + 3);
  *((double *)this + 3) = result;
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::AccessoryConfig::AccessoryConfig(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_10034F728;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *v5;
  *v5 = v6;
  if (v7)
    sub_100011294((uint64_t)v5, v7);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *v4;
  *v4 = v8;
  if (v9)
    sub_100011294((uint64_t)v4, v9);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t CMMsl::AccessoryConfig::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  uint64_t v8;
  int v9;

  if (a1 != a2)
  {
    CMMsl::AccessoryConfig::AccessoryConfig((uint64_t)v6, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    CMMsl::AccessoryConfig::~AccessoryConfig((CMMsl::AccessoryConfig *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryConfig::formatText(CMMsl::AccessoryConfig *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "deviceConfiguration");
  if ((*((_BYTE *)this + 32) & 1) != 0)
    PB::TextFormatter::format(a2, "hardwareModel", *((_DWORD *)this + 6));
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format(a2, "serialNumber");
  if ((*((_BYTE *)this + 32) & 2) != 0)
    PB::TextFormatter::format(a2, "side", *((_DWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryConfig::readFrom(CMMsl::AccessoryConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 2u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_57;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_46:
            LODWORD(v25) = 0;
            goto LABEL_57;
          }
          v37 = 0;
          v38 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = v20 + 1;
              v40 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v39;
              v25 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                v20 = v39;
                v14 = v38++ > 8;
                if (v14)
                  goto LABEL_46;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_57:
          *((_DWORD *)this + 7) = v25;
          goto LABEL_62;
        case 2u:
          operator new();
        case 3u:
          operator new();
        case 4u:
          *((_BYTE *)this + 32) |= 1u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_61;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_53:
            LODWORD(v34) = 0;
            goto LABEL_61;
          }
          v41 = 0;
          v42 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_62;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_61;
        }
        v43 = v29 + 1;
        v44 = *(_BYTE *)(v31 + v29);
        *((_QWORD *)a2 + 1) = v43;
        v34 |= (unint64_t)(v44 & 0x7F) << v41;
        if ((v44 & 0x80) == 0)
          break;
        v41 += 7;
        v29 = v43;
        v14 = v42++ > 8;
        if (v14)
          goto LABEL_53;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v34) = 0;
LABEL_61:
      *((_DWORD *)this + 6) = v34;
LABEL_62:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  if ((*(_BYTE *)(this + 32) & 2) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 28), 1u);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
    this = PB::Writer::write(a2, v4, 2);
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
    this = PB::Writer::write(a2, v5, 3);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  return this;
}

unint64_t CMMsl::AccessoryConfig::hash_value(CMMsl::AccessoryConfig *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  if ((*((_BYTE *)this + 32) & 2) != 0)
    v2 = *((int *)this + 7);
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    v4 = sub_1000112DC((uint64_t)&v9, v3);
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v6 = sub_1000112DC((uint64_t)&v10, v5);
  else
    v6 = 0;
  if ((*((_BYTE *)this + 32) & 1) != 0)
    v7 = *((int *)this + 6);
  else
    v7 = 0;
  return v4 ^ v2 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t this)
{
  *(_QWORD *)this = off_10034F760;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F760;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AccessoryDeviceMotion::~AccessoryDeviceMotion(CMMsl::AccessoryDeviceMotion *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F760;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F760;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F760;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t this, const CMMsl::AccessoryDeviceMotion *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = off_10034F760;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 24) |= 1u;
    *(_DWORD *)(this + 16) = v3;
    v2 = *((_BYTE *)a2 + 24);
  }
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 5);
    *(_BYTE *)(this + 24) |= 2u;
    *(_DWORD *)(this + 20) = v4;
  }
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::operator=(uint64_t a1, const CMMsl::AccessoryDeviceMotion *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(CMMsl::AccessoryDeviceMotion *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::AccessoryDeviceMotion *)a1 != a2)
  {
    CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    v7 = off_10034F760;
    v8 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryDeviceMotion *a2, CMMsl::AccessoryDeviceMotion *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::AccessoryDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034F760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v6 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    v9[2] = v7;
    v9[0] = off_10034F760;
    v9[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotion::formatText(CMMsl::AccessoryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "dm");
  v6 = *((_BYTE *)this + 24);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 4));
    v6 = *((_BYTE *)this + 24);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryDeviceMotion::readFrom(CMMsl::AccessoryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  unint64_t v44;
  char v45;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v38 = 0;
          v39 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_59;
            }
            v40 = v21 + 1;
            v41 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v40;
            v26 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v21 = v40;
            v14 = v39++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v26) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_47;
          }
        }
LABEL_59:
        *((_DWORD *)this + 5) = v26;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v29 = *((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        v31 = *(_QWORD *)a2;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v30)
        {
          v42 = 0;
          v43 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_62;
            }
            v44 = v29 + 1;
            v45 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)a2 + 1) = v44;
            v34 |= (unint64_t)(v45 & 0x7F) << v42;
            if ((v45 & 0x80) == 0)
              break;
            v42 += 7;
            v29 = v44;
            v14 = v43++ > 8;
            if (v14)
            {
LABEL_54:
              LODWORD(v34) = 0;
              goto LABEL_62;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v34) = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = v29 + 1;
            *((_QWORD *)a2 + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              break;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
            if (v14)
              goto LABEL_54;
          }
        }
LABEL_62:
        *((_DWORD *)this + 4) = v34;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotion::DeviceMotion(uint64_t this)
{
  *(_QWORD *)this = off_100350838;
  *(_DWORD *)(this + 124) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350838;
  *(_DWORD *)(this + 124) = 0;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(_BYTE *)(v3 + 24);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
    v5 = *(_BYTE *)(v3 + 24);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  return this;
}

BOOL CMMsl::AccessoryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

BOOL CMMsl::DeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 124);
  v3 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x400000) == 0;
  if ((v2 & 0x400000) != 0)
    return (v3 & 0x400000) != 0 && *(float *)(a1 + 116) == *(float *)(a2 + 116);
  return v4;
}

unint64_t CMMsl::AccessoryDeviceMotion::hash_value(CMMsl::AccessoryDeviceMotion *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotion::hash_value((CMMsl::DeviceMotion *)v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_5;
LABEL_7:
    v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_7;
LABEL_5:
  v4 = *((unsigned int *)this + 5);
  return v3 ^ v2 ^ v4;
}

uint64_t CMMsl::AccessoryDeviceMotion::makeDm(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

double CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this)
{
  double result;

  *(_QWORD *)this = off_10034F798;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_10034F798;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_10034F798;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig(this);
  operator delete();
}

CMMsl::AccessoryDeviceMotionConfig *CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(CMMsl::AccessoryDeviceMotionConfig *this, const CMMsl::AccessoryDeviceMotionConfig *a2)
{
  char v3;

  *(_QWORD *)this = off_10034F798;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (*((_QWORD *)a2 + 4))
    operator new();
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v3 = *((_BYTE *)a2 + 40);
    *((_BYTE *)this + 44) |= 1u;
    *((_BYTE *)this + 40) = v3;
  }
  if (this != a2)
    sub_100020CE4((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::operator=(uint64_t a1, const CMMsl::AccessoryDeviceMotionConfig *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if ((const CMMsl::AccessoryDeviceMotionConfig *)a1 != a2)
  {
    CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryDeviceMotionConfig *a2, CMMsl::AccessoryDeviceMotionConfig *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 40);
  *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  return this;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_10034F798;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if (a1 != a2)
  {
    CMMsl::AccessoryDeviceMotionConfig::AccessoryDeviceMotionConfig((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v5;
    CMMsl::AccessoryDeviceMotionConfig::~AccessoryDeviceMotionConfig((CMMsl::AccessoryDeviceMotionConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::formatText(CMMsl::AccessoryDeviceMotionConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "headToHeadsetTransformation", v8);
  }
  if ((*((_BYTE *)this + 44) & 1) != 0)
    PB::TextFormatter::format(a2, "isH2HValid", *((_BYTE *)this + 40));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryDeviceMotionConfig::readFrom(CMMsl::AccessoryDeviceMotionConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  _BYTE v55[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v23 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        if (v22 == 2)
        {
          if ((PB::Reader::placeMark(a2, v55) & 1) != 0)
            return 0;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          while (v24 < v25 && !*((_BYTE *)a2 + 24))
          {
            v27 = (char *)*((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 3);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*v8;
              v30 = (v27 - (_BYTE *)*v8) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_86;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)sub_100020E2C((uint64_t)v9, v33);
                v29 = (char *)*((_QWORD *)this + 1);
                v27 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[4 * v30];
              *(_DWORD *)v35 = 0;
              v28 = v35 + 4;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *((_QWORD *)this + 1) = v35;
              *((_QWORD *)this + 2) = v28;
              *((_QWORD *)this + 3) = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = 0;
              v28 = v27 + 4;
            }
            *((_QWORD *)this + 2) = v28;
            v37 = *((_QWORD *)a2 + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)a2 + 2))
            {
              *((_BYTE *)a2 + 24) = 1;
              break;
            }
            *(v28 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v37);
            v25 = *((_QWORD *)a2 + 2);
            v24 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v24;
          }
          PB::Reader::recallMark(a2, v55);
        }
        else
        {
          v43 = (char *)*((_QWORD *)this + 2);
          v42 = *((_QWORD *)this + 3);
          if ((unint64_t)v43 >= v42)
          {
            v45 = (char *)*v8;
            v46 = (v43 - (_BYTE *)*v8) >> 2;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62)
LABEL_86:
              sub_10000D5F8();
            v48 = v42 - (_QWORD)v45;
            if (v48 >> 1 > v47)
              v47 = v48 >> 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
              v49 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              v50 = (char *)sub_100020E2C((uint64_t)v9, v49);
              v45 = (char *)*((_QWORD *)this + 1);
              v43 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v50 = 0;
            }
            v51 = &v50[4 * v46];
            *(_DWORD *)v51 = 0;
            v44 = v51 + 4;
            while (v43 != v45)
            {
              v52 = *((_DWORD *)v43 - 1);
              v43 -= 4;
              *((_DWORD *)v51 - 1) = v52;
              v51 -= 4;
            }
            *((_QWORD *)this + 1) = v51;
            *((_QWORD *)this + 2) = v44;
            *((_QWORD *)this + 3) = &v50[4 * v49];
            if (v45)
              operator delete(v45);
          }
          else
          {
            *(_DWORD *)v43 = 0;
            v44 = v43 + 4;
          }
          *((_QWORD *)this + 2) = v44;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *((_QWORD *)a2 + 2))
          {
            *(v44 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v53);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
        }
      }
      else if ((_DWORD)v23 == 2)
      {
        *((_BYTE *)this + 44) |= 1u;
        v38 = *((_QWORD *)a2 + 1);
        if (v38 >= *((_QWORD *)a2 + 2))
        {
          v41 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v39 = v38 + 1;
          v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v38);
          *((_QWORD *)a2 + 1) = v39;
          v41 = v40 != 0;
        }
        *((_BYTE *)this + 40) = v41;
      }
      else
      {
        if ((_DWORD)v23 == 1)
          operator new();
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0)
          return 0;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;

  v3 = this;
  v4 = *(const PB::Base **)(this + 32);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 2u);
  v6 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  return this;
}

BOOL CMMsl::AccessoryDeviceMotionConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  _BOOL8 result;
  BOOL v12;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if (v6 - v7 != *(_QWORD *)(a2 + 16) - (_QWORD)v8)
    return 0;
  if (v7 == v6)
    return 1;
  v9 = v7 + 4;
  do
  {
    v10 = *v8++;
    result = *(float *)(v9 - 4) == v10;
    v12 = *(float *)(v9 - 4) != v10 || v9 == v6;
    v9 += 4;
  }
  while (!v12);
  return result;
}

unint64_t CMMsl::AccessoryDeviceMotionConfig::hash_value(CMMsl::AccessoryDeviceMotionConfig *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v2 = CMMsl::AccessoryConfig::hash_value((CMMsl::AccessoryConfig *)v2);
  if ((*((_BYTE *)this + 44) & 1) != 0)
    v3 = *((unsigned __int8 *)this + 40);
  else
    v3 = 0;
  return v3 ^ v2 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
}

uint64_t CMMsl::AccessoryDeviceMotionConfig::makeConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 32))
    operator new();
  return this;
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t this)
{
  *(_QWORD *)this = off_10034F7D0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F7D0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::AccessoryGyro::~AccessoryGyro(CMMsl::AccessoryGyro *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F7D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F7D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F7D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t this, const CMMsl::AccessoryGyro *a2)
{
  char v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_10034F7D0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 36) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 8) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)a2 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  v5 = *((_DWORD *)a2 + 7);
  *(_BYTE *)(this + 36) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 8) == 0)
  {
LABEL_6:
    if ((v2 & 1) == 0)
      return this;
    goto LABEL_7;
  }
LABEL_11:
  v6 = *((_DWORD *)a2 + 8);
  *(_BYTE *)(this + 36) |= 8u;
  *(_DWORD *)(this + 32) = v6;
  if ((*((_BYTE *)a2 + 36) & 1) == 0)
    return this;
LABEL_7:
  v3 = *((_QWORD *)a2 + 2);
  *(_BYTE *)(this + 36) |= 1u;
  *(_QWORD *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryGyro::operator=(uint64_t a1, const CMMsl::AccessoryGyro *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (**v10)(CMMsl::AccessoryGyro *__hidden);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  if ((const CMMsl::AccessoryGyro *)a1 != a2)
  {
    CMMsl::AccessoryGyro::AccessoryGyro((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v15;
    v15 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v4;
    v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    v14 = v5;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v12;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v8;
    v11 = 0;
    v12 = v7;
    v10 = off_10034F7D0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryGyro *a2, CMMsl::AccessoryGyro *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = v8;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = v7;
  return result;
}

uint64_t CMMsl::AccessoryGyro::AccessoryGyro(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034F7D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryGyro::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  int v13;
  int v14;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_DWORD *)(a2 + 32);
    v14 = *(_DWORD *)(a1 + 36);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    v9 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) = v3;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v12[3] = v10;
    LODWORD(v9) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v6;
    v13 = v9;
    *(_QWORD *)(a1 + 16) = v5;
    v12[1] = 0;
    v12[2] = v8;
    v12[0] = off_10034F7D0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyro::formatText(CMMsl::AccessoryGyro *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "gyro");
  v6 = *((_BYTE *)this + 36);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
    v6 = *((_BYTE *)this + 36);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0)
        goto LABEL_6;
LABEL_11:
      PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 7));
      if ((*((_BYTE *)this + 36) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_7;
    }
  }
  else if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 2));
  v6 = *((_BYTE *)this + 36);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_6:
  if ((v6 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "temp", *((float *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyro::readFrom(CMMsl::AccessoryGyro *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *((_BYTE *)this + 36) |= 2u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_76;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_55:
            LODWORD(v26) = 0;
            goto LABEL_76;
          }
          v46 = 0;
          v47 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v48 = v21 + 1;
              v49 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v48;
              v26 |= (unint64_t)(v49 & 0x7F) << v46;
              if (v49 < 0)
              {
                v46 += 7;
                v21 = v48;
                v14 = v47++ > 8;
                if (v14)
                  goto LABEL_55;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_76:
          *((_DWORD *)this + 6) = v26;
          goto LABEL_83;
        case 3u:
          *((_BYTE *)this + 36) |= 4u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_79;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_62:
            LODWORD(v34) = 0;
            goto LABEL_79;
          }
          v50 = 0;
          v51 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v52 = v29 + 1;
              v53 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v52;
              v34 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                v29 = v52;
                v14 = v51++ > 8;
                if (v14)
                  goto LABEL_62;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_79:
          *((_DWORD *)this + 7) = v34;
          goto LABEL_83;
        case 4u:
          *((_BYTE *)this + 36) |= 8u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v37);
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_83;
        case 5u:
          *((_BYTE *)this + 36) |= 1u;
          v38 = *((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 2);
          v40 = *(_QWORD *)a2;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = v38 + 1;
              *((_QWORD *)a2 + 1) = v38 + 1;
              v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0)
                goto LABEL_82;
              v41 += 7;
              v38 = v44;
              v14 = v42++ > 8;
            }
            while (!v14);
LABEL_69:
            v43 = 0;
            goto LABEL_82;
          }
          v54 = 0;
          v55 = 0;
          v43 = 0;
          if (v39 <= v38)
            v39 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_83;
      }
      while (1)
      {
        if (v39 == v38)
        {
          v43 = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_82;
        }
        v56 = v38 + 1;
        v57 = *(_BYTE *)(v40 + v38);
        *((_QWORD *)a2 + 1) = v56;
        v43 |= (unint64_t)(v57 & 0x7F) << v54;
        if ((v57 & 0x80) == 0)
          break;
        v54 += 7;
        v38 = v56;
        v14 = v55++ > 8;
        if (v14)
          goto LABEL_69;
      }
      if (*((_BYTE *)a2 + 24))
        v43 = 0;
LABEL_82:
      *((_QWORD *)this + 2) = v43;
LABEL_83:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Gyro::Gyro(uint64_t this)
{
  *(_QWORD *)this = off_100351408;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351408;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::AccessoryGyro::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
    v5 = *(_BYTE *)(v3 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(v3 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 5u);
  return this;
}

BOOL CMMsl::AccessoryGyro::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Gyro::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 36) & 1) == 0;
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 36) & 1) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

BOOL CMMsl::Gyro::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 44);
  v3 = *(_WORD *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 44) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 44) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 44) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v4;
}

unint64_t CMMsl::AccessoryGyro::hash_value(CMMsl::AccessoryGyro *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::Gyro::hash_value((CMMsl::Gyro *)v2);
  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
    v3 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 36) & 4) != 0)
    {
LABEL_5:
      v4 = *((unsigned int *)this + 7);
      if ((*((_BYTE *)this + 36) & 8) != 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_5;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 36) & 8) != 0)
  {
LABEL_6:
    v5 = *((float *)this + 8);
    v6 = LODWORD(v5);
    if (v5 == 0.0)
      v6 = 0;
    if ((*((_BYTE *)this + 36) & 1) != 0)
      goto LABEL_9;
LABEL_13:
    v7 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v7;
  }
LABEL_12:
  v6 = 0;
  if ((*((_BYTE *)this + 36) & 1) == 0)
    goto LABEL_13;
LABEL_9:
  v7 = *((_QWORD *)this + 2);
  return v3 ^ v2 ^ v4 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessoryGyro::makeGyro(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

_QWORD *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(_QWORD *this)
{
  *this = off_10034F808;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F808;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias(CMMsl::AccessoryGyroCachedBias *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_10034F808;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias(this);
  operator delete();
}

_QWORD *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(_QWORD *this, const CMMsl::AccessoryGyroCachedBias *a2)
{
  *this = off_10034F808;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::AccessoryGyroCachedBias *CMMsl::AccessoryGyroCachedBias::operator=(const CMMsl::AccessoryGyroCachedBias *a1, const CMMsl::AccessoryGyroCachedBias *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroCachedBias *a2, CMMsl::AccessoryGyroCachedBias *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccessoryGyroCachedBias::AccessoryGyroCachedBias(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10034F808;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10034F808;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

uint64_t CMMsl::AccessoryGyroCachedBias::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034F808;
    v6[1] = v4;
    CMMsl::AccessoryGyroCachedBias::~AccessoryGyroCachedBias((CMMsl::AccessoryGyroCachedBias *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroCachedBias::formatText(CMMsl::AccessoryGyroCachedBias *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "gyroCachedBias");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroCachedBias::readFrom(CMMsl::AccessoryGyroCachedBias *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroCachedBias::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
    return PB::Writer::write(a2, v2, 1);
  return this;
}

uint64_t CMMsl::AccessoryGyroCachedBias::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t CMMsl::AccessoryGyroCachedBias::hash_value(CMMsl::AccessoryGyroCachedBias *this)
{
  uint64_t v1;
  char v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return sub_1000112DC((uint64_t)&v3, v1);
  else
    return 0;
}

_QWORD *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(_QWORD *this)
{
  *this = off_10034F840;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F840;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroConfig::~AccessoryGyroConfig(CMMsl::AccessoryGyroConfig *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F840;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F840;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F840;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(_QWORD *this, const CMMsl::AccessoryGyroConfig *a2)
{
  *this = off_10034F840;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::AccessoryGyroConfig *CMMsl::AccessoryGyroConfig::operator=(const CMMsl::AccessoryGyroConfig *a1, const CMMsl::AccessoryGyroConfig *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AccessoryGyroConfig *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_10034F840;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroConfig *a2, CMMsl::AccessoryGyroConfig *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccessoryGyroConfig::AccessoryGyroConfig(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F840;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F840;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AccessoryGyroConfig::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034F840;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroConfig::formatText(CMMsl::AccessoryGyroConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroConfig::readFrom(CMMsl::AccessoryGyroConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::AccessoryGyroConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::AccessoryConfig::operator==(v2, v3);
  return result;
}

CMMsl::AccessoryConfig *CMMsl::AccessoryGyroConfig::hash_value(CMMsl::AccessoryGyroConfig *this)
{
  CMMsl::AccessoryConfig *result;

  result = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::AccessoryConfig *)CMMsl::AccessoryConfig::hash_value(result);
  return result;
}

uint64_t CMMsl::AccessoryGyroConfig::makeConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

_QWORD *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(_QWORD *this)
{
  *this = off_10034F878;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F878;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT(CMMsl::AccessoryGyroGYTT *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_10034F878;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT(this);
  operator delete();
}

_QWORD *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(_QWORD *this, const CMMsl::AccessoryGyroGYTT *a2)
{
  *this = off_10034F878;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::AccessoryGyroGYTT *CMMsl::AccessoryGyroGYTT::operator=(const CMMsl::AccessoryGyroGYTT *a1, const CMMsl::AccessoryGyroGYTT *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v6 = v3;
    CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryGyroGYTT *a2, CMMsl::AccessoryGyroGYTT *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccessoryGyroGYTT::AccessoryGyroGYTT(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10034F878;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_10034F878;
  a1[1] = 0;
  v3 = a1 + 1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *v3;
  *v3 = v4;
  if (v5)
    sub_100011294((uint64_t)v3, v5);
  return a1;
}

uint64_t CMMsl::AccessoryGyroGYTT::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034F878;
    v6[1] = v4;
    CMMsl::AccessoryGyroGYTT::~AccessoryGyroGYTT((CMMsl::AccessoryGyroGYTT *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryGyroGYTT::formatText(CMMsl::AccessoryGyroGYTT *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "gyttString");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryGyroGYTT::readFrom(CMMsl::AccessoryGyroGYTT *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryGyroGYTT::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
    return PB::Writer::write(a2, v2, 1);
  return this;
}

uint64_t CMMsl::AccessoryGyroGYTT::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 **v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;

  v2 = *(unsigned __int8 **)(a1 + 8);
  v3 = *(unsigned __int8 ***)(a2 + 8);
  result = v3 == 0;
  if (!v2)
    return result;
  if (!v3)
    return 0;
  v5 = v2[23];
  if ((v5 & 0x80u) == 0)
    v6 = (unsigned __int8 *)v2[23];
  else
    v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
  v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v8 = (char)v7;
  if ((char)v7 < 0)
    v7 = v3[1];
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v9 = *(unsigned __int8 **)(a2 + 8);
  else
    v9 = *v3;
  if ((v5 & 0x80) != 0)
    return !memcmp(*(const void **)v2, v9, *((_QWORD *)v2 + 1));
  if (!v2[23])
    return 1;
  v10 = v5 - 1;
  do
  {
    v12 = *v2++;
    v11 = v12;
    v14 = *v9++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

unint64_t CMMsl::AccessoryGyroGYTT::hash_value(CMMsl::AccessoryGyroGYTT *this)
{
  uint64_t v1;
  char v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return sub_1000112DC((uint64_t)&v3, v1);
  else
    return 0;
}

uint64_t CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t this)
{
  *(_QWORD *)this = off_10034F8B0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F8B0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::AccessoryHeartRate::~AccessoryHeartRate(CMMsl::AccessoryHeartRate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t this, const CMMsl::AccessoryHeartRate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = off_10034F8B0;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 36) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 8);
      *(_BYTE *)(this + 36) = v3 | 0x10;
      *(_DWORD *)(this + 32) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 36) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 36) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::AccessoryHeartRate::operator=(uint64_t a1, const CMMsl::AccessoryHeartRate *a2)
{
  int v3;
  int v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((const CMMsl::AccessoryHeartRate *)a1 != a2)
  {
    CMMsl::AccessoryHeartRate::AccessoryHeartRate((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v11;
    v11 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryHeartRate *a2, CMMsl::AccessoryHeartRate *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;
  int v7;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::AccessoryHeartRate::AccessoryHeartRate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034F8B0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034F8B0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::AccessoryHeartRate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::AccessoryHeartRate *__hidden);
  __int128 v10;
  int v11;
  uint64_t v12;
  int v13;

  if (a1 != a2)
  {
    v9 = off_10034F8B0;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v13 = *(_DWORD *)(a1 + 36);
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v10 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 28);
    v7 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 36) = v3;
    *(_QWORD *)(a1 + 28) = v7;
    v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::AccessoryHeartRate::formatText(CMMsl::AccessoryHeartRate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((float *)this + 6));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "heartRate", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 8));
    if ((*((_BYTE *)this + 36) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "sensorTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 2) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryHeartRate::readFrom(CMMsl::AccessoryHeartRate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 36) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_62;
            case 2u:
              *((_BYTE *)this + 36) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_68;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_67:
                    v2 = v35 + 1;
                    goto LABEL_68;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_67;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_68;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_68:
              *((_DWORD *)this + 7) = v25;
              goto LABEL_74;
            case 3u:
              *((_BYTE *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_39;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 4;
              goto LABEL_63;
            case 4u:
              *((_BYTE *)this + 36) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_62:
                v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_63:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_74;
            case 5u:
              *((_BYTE *)this + 36) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_73;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_72:
                    v2 = v39 + 1;
                    goto LABEL_73;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_72;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_73;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_73:
              *((_DWORD *)this + 8) = v31;
LABEL_74:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_74;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryHeartRate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 36) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  return this;
}

BOOL CMMsl::AccessoryHeartRate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 36) & 0x10) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::AccessoryHeartRate::hash_value(CMMsl::AccessoryHeartRate *this)
{
  double v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 7);
      if ((*((_BYTE *)this + 36) & 4) != 0)
        goto LABEL_4;
LABEL_15:
      v4 = 0;
      if ((*((_BYTE *)this + 36) & 1) != 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 36) & 4) == 0)
    goto LABEL_15;
LABEL_4:
  v3 = *((float *)this + 6);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
LABEL_7:
    v5 = *((double *)this + 1);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_10;
LABEL_17:
    v6 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v4 ^ *(_QWORD *)&v5 ^ v6;
  }
LABEL_16:
  v5 = 0.0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_17;
LABEL_10:
  v6 = *((unsigned int *)this + 8);
  return v2 ^ *(_QWORD *)&v1 ^ v4 ^ *(_QWORD *)&v5 ^ v6;
}

uint64_t CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(uint64_t this)
{
  *(_QWORD *)this = off_10034F8E8;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F8E8;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::AccessoryInEarStatus::~AccessoryInEarStatus(CMMsl::AccessoryInEarStatus *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(CMMsl::AccessoryInEarStatus *this, const CMMsl::AccessoryInEarStatus *a2)
{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = off_10034F8E8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = off_10034F8E8;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

float *CMMsl::AccessoryInEarStatus::operator=(float *a1, uint64_t a2, float a3)
{
  char v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  void (**v11)(CMMsl::AccessoryInEarStatus *__hidden);
  int v12;
  int v13;
  int v14;

  if (a1 != (float *)a2)
  {
    v11 = off_10034F8E8;
    v14 = 0;
    v4 = *(_BYTE *)(a2 + 16);
    if ((v4 & 1) != 0)
    {
      v5 = *(_DWORD *)(a2 + 8);
      LOBYTE(v14) = 1;
      v6 = 3;
      if ((v4 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 12);
        LOBYTE(v14) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v14;
    v14 = v7;
    v8 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v5;
    v12 = v8;
    v9 = *((_DWORD *)a1 + 3);
    a1[3] = a3;
    v13 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryInEarStatus *a2, CMMsl::AccessoryInEarStatus *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::AccessoryInEarStatus::AccessoryInEarStatus(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034F8E8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034F8E8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *CMMsl::AccessoryInEarStatus::operator=(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(CMMsl::AccessoryInEarStatus *__hidden);
  int v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10 = off_10034F8E8;
    v3 = a2[4];
    a2[4] = 0;
    v4 = a2[2];
    v5 = a2[3];
    v6 = a1[4];
    a1[4] = v3;
    v13 = v6;
    v7 = a1[2];
    a1[2] = v4;
    v11 = v7;
    v8 = a1[3];
    a1[3] = v5;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryInEarStatus::formatText(CMMsl::AccessoryInEarStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryInEarStatus::readFrom(CMMsl::AccessoryInEarStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryInEarStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  return this;
}

BOOL CMMsl::AccessoryInEarStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::AccessoryInEarStatus::hash_value(CMMsl::AccessoryInEarStatus *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 16) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((int *)this + 2);
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t this)
{
  *(_QWORD *)this = off_10034F920;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F920;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessoryMagnetometer::~AccessoryMagnetometer(CMMsl::AccessoryMagnetometer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F920;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F920;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F920;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t this, const CMMsl::AccessoryMagnetometer *a2)
{
  char v2;
  uint64_t v3;
  int v4;
  int v5;

  *(_QWORD *)this = off_10034F920;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_5:
      if ((v2 & 1) == 0)
        return this;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)a2 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  v5 = *((_DWORD *)a2 + 7);
  *(_BYTE *)(this + 32) |= 4u;
  *(_DWORD *)(this + 28) = v5;
  if ((*((_BYTE *)a2 + 32) & 1) == 0)
    return this;
LABEL_6:
  v3 = *((_QWORD *)a2 + 2);
  *(_BYTE *)(this + 32) |= 1u;
  *(_QWORD *)(this + 16) = v3;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::operator=(uint64_t a1, const CMMsl::AccessoryMagnetometer *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v9)(CMMsl::AccessoryMagnetometer *__hidden);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((const CMMsl::AccessoryMagnetometer *)a1 != a2)
  {
    CMMsl::AccessoryMagnetometer::AccessoryMagnetometer((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v11;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v7;
    v10 = 0;
    v11 = v6;
    v9 = off_10034F920;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryMagnetometer *a2, CMMsl::AccessoryMagnetometer *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  v6 = *(_QWORD *)(this + 8);
  v7 = *(_QWORD *)(this + 16);
  v8 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(this + 16) = v8;
  *((_DWORD *)a2 + 7) = v5;
  *((_QWORD *)a2 + 1) = v6;
  *((_QWORD *)a2 + 2) = v7;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::AccessoryMagnetometer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034F920;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometer::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v11[3] = v9;
    *(_QWORD *)(a1 + 16) = v5;
    v11[1] = 0;
    v11[2] = v7;
    v11[0] = off_10034F920;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometer::formatText(CMMsl::AccessoryMagnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 32) & 2) != 0)
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "magnetometer");
  v6 = *((_BYTE *)this + 32);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 2));
    v6 = *((_BYTE *)this + 32);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryMagnetometer::readFrom(CMMsl::AccessoryMagnetometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *((_BYTE *)this + 32) |= 2u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_72;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v26) = 0;
            goto LABEL_72;
          }
          v45 = 0;
          v46 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v47 = v21 + 1;
              v48 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v47;
              v26 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                v21 = v47;
                v14 = v46++ > 8;
                if (v14)
                  goto LABEL_52;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_72:
          *((_DWORD *)this + 6) = v26;
          goto LABEL_79;
        case 3u:
          *((_BYTE *)this + 32) |= 4u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_75;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_59:
            LODWORD(v34) = 0;
            goto LABEL_75;
          }
          v49 = 0;
          v50 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v51 = v29 + 1;
              v52 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v51;
              v34 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v29 = v51;
                v14 = v50++ > 8;
                if (v14)
                  goto LABEL_59;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_75:
          *((_DWORD *)this + 7) = v34;
          goto LABEL_79;
        case 4u:
          *((_BYTE *)this + 32) |= 1u;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_78;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_66:
            v42 = 0;
            goto LABEL_78;
          }
          v53 = 0;
          v54 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_79;
      }
      while (1)
      {
        if (v38 == v37)
        {
          v42 = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_78;
        }
        v55 = v37 + 1;
        v56 = *(_BYTE *)(v39 + v37);
        *((_QWORD *)a2 + 1) = v55;
        v42 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0)
          break;
        v53 += 7;
        v37 = v55;
        v14 = v54++ > 8;
        if (v14)
          goto LABEL_66;
      }
      if (*((_BYTE *)a2 + 24))
        v42 = 0;
LABEL_78:
      *((_QWORD *)this + 2) = v42;
LABEL_79:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Magnetometer::Magnetometer(uint64_t this)
{
  *(_QWORD *)this = off_100352978;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352978;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CMMsl::AccessoryMagnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
    v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 4u);
    }
  }
  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 4u);
  return this;
}

BOOL CMMsl::AccessoryMagnetometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::Magnetometer::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

BOOL CMMsl::Magnetometer::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 2) == 0;
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
    return (*(_BYTE *)(a2 + 36) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

unint64_t CMMsl::AccessoryMagnetometer::hash_value(CMMsl::AccessoryMagnetometer *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::Magnetometer::hash_value((CMMsl::Magnetometer *)v2);
  if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_8:
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    return v3 ^ v2 ^ v4 ^ v5;
  }
  v3 = *((unsigned int *)this + 6);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_8;
LABEL_5:
  v4 = *((unsigned int *)this + 7);
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_9;
LABEL_6:
  v5 = *((_QWORD *)this + 2);
  return v3 ^ v2 ^ v4 ^ v5;
}

uint64_t CMMsl::AccessoryMagnetometer::makeMagnetometer(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

_QWORD *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(_QWORD *this)
{
  *this = off_10034F958;
  this[1] = 0;
  return this;
}

{
  *this = off_10034F958;
  this[1] = 0;
  return this;
}

void CMMsl::AccessoryMagnetometerConfig::~AccessoryMagnetometerConfig(CMMsl::AccessoryMagnetometerConfig *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F958;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F958;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034F958;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(_QWORD *this, const CMMsl::AccessoryMagnetometerConfig *a2)
{
  *this = off_10034F958;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::AccessoryMagnetometerConfig *CMMsl::AccessoryMagnetometerConfig::operator=(const CMMsl::AccessoryMagnetometerConfig *a1, const CMMsl::AccessoryMagnetometerConfig *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AccessoryMagnetometerConfig *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_10034F958;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryMagnetometerConfig *a2, CMMsl::AccessoryMagnetometerConfig *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AccessoryMagnetometerConfig::AccessoryMagnetometerConfig(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F958;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034F958;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034F958;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::formatText(CMMsl::AccessoryMagnetometerConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryMagnetometerConfig::readFrom(CMMsl::AccessoryMagnetometerConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::AccessoryMagnetometerConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::AccessoryConfig::operator==(v2, v3);
  return result;
}

CMMsl::AccessoryConfig *CMMsl::AccessoryMagnetometerConfig::hash_value(CMMsl::AccessoryMagnetometerConfig *this)
{
  CMMsl::AccessoryConfig *result;

  result = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::AccessoryConfig *)CMMsl::AccessoryConfig::hash_value(result);
  return result;
}

uint64_t CMMsl::AccessoryMagnetometerConfig::makeConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

double CMMsl::AccessoryPPG::AccessoryPPG(CMMsl::AccessoryPPG *this)
{
  double result;

  *(_QWORD *)this = off_10034F990;
  *((_DWORD *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_10034F990;
  *((_DWORD *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  return result;
}

void CMMsl::AccessoryPPG::~AccessoryPPG(CMMsl::AccessoryPPG *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = off_10034F990;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryPPG::~AccessoryPPG(this);
  operator delete();
}

CMMsl::AccessoryPPG *CMMsl::AccessoryPPG::AccessoryPPG(CMMsl::AccessoryPPG *this, const CMMsl::AccessoryPPG *a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;

  *(_QWORD *)this = off_10034F990;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  v5 = *((_BYTE *)a2 + 224);
  if ((v5 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 26);
    v6 = 2;
    *((_BYTE *)this + 224) = 2;
    *((_QWORD *)this + 26) = v7;
    v5 = *((_BYTE *)a2 + 224);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*((_BYTE *)a2 + 224) & 1) != 0)
  {
LABEL_5:
    v8 = *((_QWORD *)a2 + 25);
    v6 |= 1u;
    *((_BYTE *)this + 224) = v6;
    *((_QWORD *)this + 25) = v8;
    v5 = *((_BYTE *)a2 + 224);
  }
LABEL_6:
  if ((v5 & 8) == 0)
  {
    if ((v5 & 4) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *((_DWORD *)a2 + 55);
  v6 |= 8u;
  *((_BYTE *)this + 224) = v6;
  *((_DWORD *)this + 55) = v11;
  if ((*((_BYTE *)a2 + 224) & 4) != 0)
  {
LABEL_8:
    v9 = *((_DWORD *)a2 + 54);
    *((_BYTE *)this + 224) = v6 | 4;
    *((_DWORD *)this + 54) = v9;
  }
LABEL_9:
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4((char *)this + 128, *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
    sub_100020CE4((char *)this + 152, *((char **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
    sub_100020CE4((char *)this + 176, *((char **)a2 + 22), *((_QWORD *)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 2);
    sub_100020CE4((char *)this + 104, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::AccessoryPPG::operator=(CMMsl *a1, const CMMsl::AccessoryPPG *a2)
{
  CMMsl::AccessoryPPG *v3;
  _BYTE v5[232];

  if (a1 != a2)
  {
    CMMsl::AccessoryPPG::AccessoryPPG((CMMsl::AccessoryPPG *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryPPG *)v5, v3);
    CMMsl::AccessoryPPG::~AccessoryPPG((CMMsl::AccessoryPPG *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryPPG *a2, CMMsl::AccessoryPPG *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v3;
  v4 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v4;
  v5 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v12;
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v13;
  v14 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v16;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v18;
  v19 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v19;
  v20 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v20;
  v21 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v21;
  v22 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v22;
  v23 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v23;
  v24 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v24;
  v25 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v25;
  v27 = *((_QWORD *)this + 24);
  v26 = *((_QWORD *)this + 25);
  v28 = *((_QWORD *)a2 + 25);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)this + 25) = v28;
  result = *((double *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((double *)a2 + 26) = result;
  *((_QWORD *)a2 + 24) = v27;
  *((_QWORD *)a2 + 25) = v26;
  v30 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v30;
  v31 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v31;
  v32 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v32;
  return result;
}

uint64_t CMMsl::AccessoryPPG::AccessoryPPG(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_10034F990;
  v4 = a1 + 32;
  v5 = a1 + 80;
  v6 = a1 + 128;
  v7 = a1 + 176;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v8 = a1 + 104;
  *(_OWORD *)(a1 + 152) = 0u;
  v9 = a1 + 152;
  *(_OWORD *)(a1 + 56) = 0u;
  v10 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v10, (__n128 *)(a2 + 56));
  sub_100239458(v5, (__n128 *)(a2 + 80));
  sub_100239458(v6, (__n128 *)(a2 + 128));
  sub_100239458(v9, (__n128 *)(a2 + 152));
  sub_100239458(v7, (__n128 *)(a2 + 176));
  sub_100239458(v8, (__n128 *)(a2 + 104));
  return a1;
}

CMMsl *CMMsl::AccessoryPPG::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AccessoryPPG *v3;
  _BYTE v5[232];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccessoryPPG::AccessoryPPG((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryPPG *)v5, v3);
    CMMsl::AccessoryPPG::~AccessoryPPG((CMMsl::AccessoryPPG *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryPPG::formatText(CMMsl::AccessoryPPG *this, PB::TextFormatter *a2, const char *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  char v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  char v30;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "dark0", v7);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 4);
  v9 = (unsigned int *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "dark1", v10);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 7);
  v12 = (unsigned int *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "dark2", v13);
  }
  v14 = (unsigned int *)*((_QWORD *)this + 10);
  v15 = (unsigned int *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "dark3", v16);
  }
  v17 = *((_BYTE *)this + 224);
  if ((v17 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "error", *((_DWORD *)this + 54));
    v17 = *((_BYTE *)this + 224);
  }
  if ((v17 & 8) != 0)
    PB::TextFormatter::format(a2, "frameNum", *((_DWORD *)this + 55));
  v18 = (unsigned int *)*((_QWORD *)this + 13);
  v19 = (unsigned int *)*((_QWORD *)this + 14);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "ledCurrent", v20);
  }
  v21 = (unsigned int *)*((_QWORD *)this + 16);
  v22 = (unsigned int *)*((_QWORD *)this + 17);
  while (v21 != v22)
  {
    v23 = *v21++;
    PB::TextFormatter::format(a2, "light0", v23);
  }
  v24 = (unsigned int *)*((_QWORD *)this + 19);
  v25 = (unsigned int *)*((_QWORD *)this + 20);
  while (v24 != v25)
  {
    v26 = *v24++;
    PB::TextFormatter::format(a2, "light1", v26);
  }
  v27 = (unsigned int *)*((_QWORD *)this + 22);
  v28 = (unsigned int *)*((_QWORD *)this + 23);
  while (v27 != v28)
  {
    v29 = *v27++;
    PB::TextFormatter::format(a2, "rxGain", v29);
  }
  v30 = *((_BYTE *)this + 224);
  if ((v30 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 25));
    v30 = *((_BYTE *)this + 224);
  }
  if ((v30 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 26));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryPPG::readFrom(CMMsl::AccessoryPPG *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  char v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char v180;
  unsigned int v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  int v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  char v231;
  unsigned int v232;
  uint64_t v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  unint64_t v248;
  char *v249;
  _DWORD *v250;
  unint64_t v251;
  char *v252;
  unint64_t v253;
  char *v254;
  unint64_t v255;
  char *v256;
  unint64_t v257;
  char *v258;
  unint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  char *v312;
  char *v313;
  int v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  char v318;
  unsigned int v319;
  unint64_t v321;
  char v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  char *v326;
  int v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  char v331;
  unsigned int v332;
  unint64_t v334;
  char v335;
  unint64_t v336;
  char v337;
  char *v338;
  int v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  char v343;
  unsigned int v344;
  unint64_t v346;
  char v347;
  unint64_t v348;
  char v349;
  char *v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  char v355;
  unsigned int v356;
  unint64_t v358;
  char v359;
  unint64_t v360;
  char v361;
  char *v362;
  int v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  char v367;
  unsigned int v368;
  unint64_t v370;
  char v371;
  unint64_t v372;
  char v373;
  char *v374;
  int v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  char v379;
  unsigned int v380;
  unint64_t v382;
  char v383;
  unint64_t v384;
  char v385;
  char *v386;
  int v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  char v391;
  unsigned int v392;
  unint64_t v394;
  char v395;
  unint64_t v396;
  char v397;
  char *v398;
  int v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  char v403;
  unsigned int v404;
  unint64_t v406;
  char v407;
  unint64_t v408;
  char v409;
  void **v412;
  void **v413;
  void **v414;
  void **v415;
  void **v416;
  void **v417;
  void **v418;
  void **v419;
  _QWORD *v420;
  _QWORD *v421;
  _BYTE v422[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v421 = (_QWORD *)((char *)this + 120);
    v418 = (void **)((char *)this + 176);
    v419 = (void **)((char *)this + 104);
    v420 = (_QWORD *)((char *)this + 192);
    v8 = (_QWORD *)((char *)this + 168);
    v416 = (void **)((char *)this + 128);
    v417 = (void **)((char *)this + 152);
    v9 = (_QWORD *)((char *)this + 144);
    v10 = (_QWORD *)((char *)this + 96);
    v414 = (void **)((char *)this + 56);
    v415 = (void **)((char *)this + 80);
    v11 = (_QWORD *)((char *)this + 72);
    v12 = (_QWORD *)((char *)this + 48);
    v412 = (void **)((char *)this + 8);
    v413 = (void **)((char *)this + 32);
    v13 = (_QWORD *)((char *)this + 24);
    while (1)
    {
      v14 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v64 = v16++ > 8;
        if (v64)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v17 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 224) |= 2u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 26) = *(_QWORD *)(*(_QWORD *)a2 + v26);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_706;
        case 2u:
          *((_BYTE *)this + 224) |= 1u;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_518;
              v30 += 7;
              v27 = v33;
              v64 = v31++ > 8;
            }
            while (!v64);
LABEL_417:
            v32 = 0;
            goto LABEL_518;
          }
          v236 = 0;
          v237 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v28 == v27)
            {
              v32 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v238 = v27 + 1;
              v239 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)a2 + 1) = v238;
              v32 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v27 = v238;
                v64 = v237++ > 8;
                if (v64)
                  goto LABEL_417;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v32 = 0;
            }
            break;
          }
LABEL_518:
          *((_QWORD *)this + 25) = v32;
          goto LABEL_706;
        case 3u:
          *((_BYTE *)this + 224) |= 8u;
          v35 = *((_QWORD *)a2 + 1);
          v36 = *((_QWORD *)a2 + 2);
          v37 = *(_QWORD *)a2;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)a2 + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_521;
              v38 += 7;
              v35 = v41;
              v64 = v39++ > 8;
            }
            while (!v64);
LABEL_424:
            LODWORD(v40) = 0;
            goto LABEL_521;
          }
          v240 = 0;
          v241 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v242 = v35 + 1;
              v243 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)a2 + 1) = v242;
              v40 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v35 = v242;
                v64 = v241++ > 8;
                if (v64)
                  goto LABEL_424;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_521:
          *((_DWORD *)this + 55) = v40;
          goto LABEL_706;
        case 4u:
          *((_BYTE *)this + 224) |= 4u;
          v43 = *((_QWORD *)a2 + 1);
          v44 = *((_QWORD *)a2 + 2);
          v45 = *(_QWORD *)a2;
          if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
            do
            {
              v49 = v43 + 1;
              *((_QWORD *)a2 + 1) = v43 + 1;
              v50 = *(_BYTE *)(v45 + v43);
              v48 |= (unint64_t)(v50 & 0x7F) << v46;
              if ((v50 & 0x80) == 0)
                goto LABEL_524;
              v46 += 7;
              v43 = v49;
              v64 = v47++ > 8;
            }
            while (!v64);
LABEL_431:
            LODWORD(v48) = 0;
            goto LABEL_524;
          }
          v244 = 0;
          v245 = 0;
          v48 = 0;
          if (v44 <= v43)
            v44 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v44 == v43)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v246 = v43 + 1;
              v247 = *(_BYTE *)(v45 + v43);
              *((_QWORD *)a2 + 1) = v246;
              v48 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v43 = v246;
                v64 = v245++ > 8;
                if (v64)
                  goto LABEL_431;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v48) = 0;
            }
            break;
          }
LABEL_524:
          *((_DWORD *)this + 54) = v48;
          goto LABEL_706;
        case 5u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v422) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 2);
              do
              {
                if ((unint64_t)v51 >= *v13)
                {
                  v52 = (char *)*v412;
                  v53 = (v51 - (_BYTE *)*v412) >> 2;
                  v54 = v53 + 1;
                  if ((unint64_t)(v53 + 1) >> 62)
                    goto LABEL_716;
                  v55 = *v13 - (_QWORD)v52;
                  if (v55 >> 1 > v54)
                    v54 = v55 >> 1;
                  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                    v56 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v56 = v54;
                  if (v56)
                  {
                    v57 = (char *)sub_100020E2C((uint64_t)v13, v56);
                    v52 = (char *)*((_QWORD *)this + 1);
                    v51 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v57 = 0;
                  }
                  v58 = &v57[4 * v53];
                  *(_DWORD *)v58 = 0;
                  v59 = v58 + 4;
                  while (v51 != v52)
                  {
                    v60 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v58 - 1) = v60;
                    v58 -= 4;
                  }
                  *((_QWORD *)this + 1) = v58;
                  *((_QWORD *)this + 2) = v59;
                  *((_QWORD *)this + 3) = &v57[4 * v56];
                  if (v52)
                    operator delete(v52);
                  v51 = v59;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *((_QWORD *)this + 2) = v51;
                v62 = *((_QWORD *)a2 + 1);
                v61 = *((_QWORD *)a2 + 2);
                v63 = *(_QWORD *)a2;
                v64 = v62 > 0xFFFFFFFFFFFFFFF5 || v62 + 10 > v61;
                if (v64)
                {
                  v65 = 0;
                  v66 = 0;
                  v72 = 0;
                  if (v61 <= v62)
                    v67 = *((_QWORD *)a2 + 1);
                  else
                    v67 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v67 == v62)
                      goto LABEL_409;
                    v68 = v62++;
                    v69 = *(_BYTE *)(v63 + v68);
                    *((_QWORD *)a2 + 1) = v62;
                    v72 |= (unint64_t)(v69 & 0x7F) << v65;
                    if ((v69 & 0x80) == 0)
                      break;
                    v65 += 7;
                    v64 = v66++ > 8;
                    if (v64)
                    {
                      LODWORD(v72) = 0;
                      goto LABEL_90;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v72) = 0;
LABEL_90:
                  v73 = v68 + 1;
                }
                else
                {
                  v70 = 0;
                  v71 = 0;
                  v72 = 0;
                  while (1)
                  {
                    v73 = v62 + 1;
                    *((_QWORD *)a2 + 1) = v62 + 1;
                    v74 = *(_BYTE *)(v63 + v62);
                    v72 |= (unint64_t)(v74 & 0x7F) << v70;
                    if ((v74 & 0x80) == 0)
                      break;
                    v70 += 7;
                    v62 = v73;
                    v64 = v71++ > 8;
                    if (v64)
                    {
                      LODWORD(v72) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v72;
              }
              while (v73 < v61 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_410;
          }
          v249 = (char *)*((_QWORD *)this + 2);
          v248 = *((_QWORD *)this + 3);
          if ((unint64_t)v249 >= v248)
          {
            v265 = (char *)*v412;
            v266 = (v249 - (_BYTE *)*v412) >> 2;
            v267 = v266 + 1;
            if ((unint64_t)(v266 + 1) >> 62)
LABEL_716:
              sub_10000D5F8();
            v268 = v248 - (_QWORD)v265;
            if (v268 >> 1 > v267)
              v267 = v268 >> 1;
            if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL)
              v269 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v269 = v267;
            if (v269)
            {
              v270 = (char *)sub_100020E2C((uint64_t)v13, v269);
              v265 = (char *)*((_QWORD *)this + 1);
              v249 = (char *)*((_QWORD *)this + 2);
            }
            else
            {
              v270 = 0;
            }
            v313 = &v270[4 * v266];
            *(_DWORD *)v313 = 0;
            v250 = v313 + 4;
            while (v249 != v265)
            {
              v314 = *((_DWORD *)v249 - 1);
              v249 -= 4;
              *((_DWORD *)v313 - 1) = v314;
              v313 -= 4;
            }
            *((_QWORD *)this + 1) = v313;
            *((_QWORD *)this + 2) = v250;
            *((_QWORD *)this + 3) = &v270[4 * v269];
            if (v265)
              operator delete(v265);
          }
          else
          {
            *(_DWORD *)v249 = 0;
            v250 = v249 + 4;
          }
          *((_QWORD *)this + 2) = v250;
          v315 = *((_QWORD *)a2 + 1);
          v316 = *((_QWORD *)a2 + 2);
          v317 = *(_QWORD *)a2;
          v318 = 0;
          v319 = 0;
          if (v315 <= 0xFFFFFFFFFFFFFFF5 && v315 + 10 <= v316)
          {
            v323 = 0;
            while (1)
            {
              v324 = v315 + 1;
              *((_QWORD *)a2 + 1) = v315 + 1;
              v325 = *(_BYTE *)(v317 + v315);
              v323 |= (unint64_t)(v325 & 0x7F) << v318;
              if ((v325 & 0x80) == 0)
                goto LABEL_705;
              v318 += 7;
              v315 = v324;
              v64 = v319++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v316 <= v315)
            v316 = *((_QWORD *)a2 + 1);
          while (v316 != v315)
          {
            v321 = v315 + 1;
            v322 = *(_BYTE *)(v317 + v315);
            *((_QWORD *)a2 + 1) = v321;
            v323 |= (unint64_t)(v322 & 0x7F) << v318;
            if ((v322 & 0x80) == 0)
              goto LABEL_698;
            v318 += 7;
            v315 = v321;
            v64 = v319++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v422) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 5);
              do
              {
                if ((unint64_t)v51 >= *v12)
                {
                  v75 = (char *)*v413;
                  v76 = (v51 - (_BYTE *)*v413) >> 2;
                  v77 = v76 + 1;
                  if ((unint64_t)(v76 + 1) >> 62)
                    goto LABEL_717;
                  v78 = *v12 - (_QWORD)v75;
                  if (v78 >> 1 > v77)
                    v77 = v78 >> 1;
                  if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                    v79 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v79 = v77;
                  if (v79)
                  {
                    v80 = (char *)sub_100020E2C((uint64_t)v12, v79);
                    v75 = (char *)*((_QWORD *)this + 4);
                    v51 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v80 = 0;
                  }
                  v81 = &v80[4 * v76];
                  *(_DWORD *)v81 = 0;
                  v82 = v81 + 4;
                  while (v51 != v75)
                  {
                    v83 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v81 - 1) = v83;
                    v81 -= 4;
                  }
                  *((_QWORD *)this + 4) = v81;
                  *((_QWORD *)this + 5) = v82;
                  *((_QWORD *)this + 6) = &v80[4 * v79];
                  if (v75)
                    operator delete(v75);
                  v51 = v82;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *((_QWORD *)this + 5) = v51;
                v85 = *((_QWORD *)a2 + 1);
                v84 = *((_QWORD *)a2 + 2);
                v86 = *(_QWORD *)a2;
                if (v85 > 0xFFFFFFFFFFFFFFF5 || v85 + 10 > v84)
                {
                  v88 = 0;
                  v89 = 0;
                  v95 = 0;
                  if (v84 <= v85)
                    v90 = *((_QWORD *)a2 + 1);
                  else
                    v90 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v90 == v85)
                      goto LABEL_409;
                    v91 = v85++;
                    v92 = *(_BYTE *)(v86 + v91);
                    *((_QWORD *)a2 + 1) = v85;
                    v95 |= (unint64_t)(v92 & 0x7F) << v88;
                    if ((v92 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v64 = v89++ > 8;
                    if (v64)
                    {
                      LODWORD(v95) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v95) = 0;
LABEL_135:
                  v96 = v91 + 1;
                }
                else
                {
                  v93 = 0;
                  v94 = 0;
                  v95 = 0;
                  while (1)
                  {
                    v96 = v85 + 1;
                    *((_QWORD *)a2 + 1) = v85 + 1;
                    v97 = *(_BYTE *)(v86 + v85);
                    v95 |= (unint64_t)(v97 & 0x7F) << v93;
                    if ((v97 & 0x80) == 0)
                      break;
                    v93 += 7;
                    v85 = v96;
                    v64 = v94++ > 8;
                    if (v64)
                    {
                      LODWORD(v95) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v95;
              }
              while (v96 < v84 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_410;
          }
          v252 = (char *)*((_QWORD *)this + 5);
          v251 = *((_QWORD *)this + 6);
          if ((unint64_t)v252 >= v251)
          {
            v271 = (char *)*v413;
            v272 = (v252 - (_BYTE *)*v413) >> 2;
            v273 = v272 + 1;
            if ((unint64_t)(v272 + 1) >> 62)
LABEL_717:
              sub_10000D5F8();
            v274 = v251 - (_QWORD)v271;
            if (v274 >> 1 > v273)
              v273 = v274 >> 1;
            if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
              v275 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v275 = v273;
            if (v275)
            {
              v276 = (char *)sub_100020E2C((uint64_t)v12, v275);
              v271 = (char *)*((_QWORD *)this + 4);
              v252 = (char *)*((_QWORD *)this + 5);
            }
            else
            {
              v276 = 0;
            }
            v326 = &v276[4 * v272];
            *(_DWORD *)v326 = 0;
            v250 = v326 + 4;
            while (v252 != v271)
            {
              v327 = *((_DWORD *)v252 - 1);
              v252 -= 4;
              *((_DWORD *)v326 - 1) = v327;
              v326 -= 4;
            }
            *((_QWORD *)this + 4) = v326;
            *((_QWORD *)this + 5) = v250;
            *((_QWORD *)this + 6) = &v276[4 * v275];
            if (v271)
              operator delete(v271);
          }
          else
          {
            *(_DWORD *)v252 = 0;
            v250 = v252 + 4;
          }
          *((_QWORD *)this + 5) = v250;
          v328 = *((_QWORD *)a2 + 1);
          v329 = *((_QWORD *)a2 + 2);
          v330 = *(_QWORD *)a2;
          v331 = 0;
          v332 = 0;
          if (v328 <= 0xFFFFFFFFFFFFFFF5 && v328 + 10 <= v329)
          {
            v323 = 0;
            while (1)
            {
              v336 = v328 + 1;
              *((_QWORD *)a2 + 1) = v328 + 1;
              v337 = *(_BYTE *)(v330 + v328);
              v323 |= (unint64_t)(v337 & 0x7F) << v331;
              if ((v337 & 0x80) == 0)
                goto LABEL_705;
              v331 += 7;
              v328 = v336;
              v64 = v332++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v329 <= v328)
            v329 = *((_QWORD *)a2 + 1);
          while (v329 != v328)
          {
            v334 = v328 + 1;
            v335 = *(_BYTE *)(v330 + v328);
            *((_QWORD *)a2 + 1) = v334;
            v323 |= (unint64_t)(v335 & 0x7F) << v331;
            if ((v335 & 0x80) == 0)
              goto LABEL_698;
            v331 += 7;
            v328 = v334;
            v64 = v332++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 7u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v422) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 8);
              do
              {
                if ((unint64_t)v51 >= *v11)
                {
                  v98 = (char *)*v414;
                  v99 = (v51 - (_BYTE *)*v414) >> 2;
                  v100 = v99 + 1;
                  if ((unint64_t)(v99 + 1) >> 62)
                    goto LABEL_718;
                  v101 = *v11 - (_QWORD)v98;
                  if (v101 >> 1 > v100)
                    v100 = v101 >> 1;
                  if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                    v102 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v102 = v100;
                  if (v102)
                  {
                    v103 = (char *)sub_100020E2C((uint64_t)v11, v102);
                    v98 = (char *)*((_QWORD *)this + 7);
                    v51 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v104 = &v103[4 * v99];
                  *(_DWORD *)v104 = 0;
                  v105 = v104 + 4;
                  while (v51 != v98)
                  {
                    v106 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v104 - 1) = v106;
                    v104 -= 4;
                  }
                  *((_QWORD *)this + 7) = v104;
                  *((_QWORD *)this + 8) = v105;
                  *((_QWORD *)this + 9) = &v103[4 * v102];
                  if (v98)
                    operator delete(v98);
                  v51 = v105;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *((_QWORD *)this + 8) = v51;
                v108 = *((_QWORD *)a2 + 1);
                v107 = *((_QWORD *)a2 + 2);
                v109 = *(_QWORD *)a2;
                if (v108 > 0xFFFFFFFFFFFFFFF5 || v108 + 10 > v107)
                {
                  v111 = 0;
                  v112 = 0;
                  v118 = 0;
                  if (v107 <= v108)
                    v113 = *((_QWORD *)a2 + 1);
                  else
                    v113 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v113 == v108)
                      goto LABEL_409;
                    v114 = v108++;
                    v115 = *(_BYTE *)(v109 + v114);
                    *((_QWORD *)a2 + 1) = v108;
                    v118 |= (unint64_t)(v115 & 0x7F) << v111;
                    if ((v115 & 0x80) == 0)
                      break;
                    v111 += 7;
                    v64 = v112++ > 8;
                    if (v64)
                    {
                      LODWORD(v118) = 0;
                      goto LABEL_180;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v118) = 0;
LABEL_180:
                  v119 = v114 + 1;
                }
                else
                {
                  v116 = 0;
                  v117 = 0;
                  v118 = 0;
                  while (1)
                  {
                    v119 = v108 + 1;
                    *((_QWORD *)a2 + 1) = v108 + 1;
                    v120 = *(_BYTE *)(v109 + v108);
                    v118 |= (unint64_t)(v120 & 0x7F) << v116;
                    if ((v120 & 0x80) == 0)
                      break;
                    v116 += 7;
                    v108 = v119;
                    v64 = v117++ > 8;
                    if (v64)
                    {
                      LODWORD(v118) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v118;
              }
              while (v119 < v107 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_410;
          }
          v254 = (char *)*((_QWORD *)this + 8);
          v253 = *((_QWORD *)this + 9);
          if ((unint64_t)v254 >= v253)
          {
            v277 = (char *)*v414;
            v278 = (v254 - (_BYTE *)*v414) >> 2;
            v279 = v278 + 1;
            if ((unint64_t)(v278 + 1) >> 62)
LABEL_718:
              sub_10000D5F8();
            v280 = v253 - (_QWORD)v277;
            if (v280 >> 1 > v279)
              v279 = v280 >> 1;
            if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFFCLL)
              v281 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v281 = v279;
            if (v281)
            {
              v282 = (char *)sub_100020E2C((uint64_t)v11, v281);
              v277 = (char *)*((_QWORD *)this + 7);
              v254 = (char *)*((_QWORD *)this + 8);
            }
            else
            {
              v282 = 0;
            }
            v338 = &v282[4 * v278];
            *(_DWORD *)v338 = 0;
            v250 = v338 + 4;
            while (v254 != v277)
            {
              v339 = *((_DWORD *)v254 - 1);
              v254 -= 4;
              *((_DWORD *)v338 - 1) = v339;
              v338 -= 4;
            }
            *((_QWORD *)this + 7) = v338;
            *((_QWORD *)this + 8) = v250;
            *((_QWORD *)this + 9) = &v282[4 * v281];
            if (v277)
              operator delete(v277);
          }
          else
          {
            *(_DWORD *)v254 = 0;
            v250 = v254 + 4;
          }
          *((_QWORD *)this + 8) = v250;
          v340 = *((_QWORD *)a2 + 1);
          v341 = *((_QWORD *)a2 + 2);
          v342 = *(_QWORD *)a2;
          v343 = 0;
          v344 = 0;
          if (v340 <= 0xFFFFFFFFFFFFFFF5 && v340 + 10 <= v341)
          {
            v323 = 0;
            while (1)
            {
              v348 = v340 + 1;
              *((_QWORD *)a2 + 1) = v340 + 1;
              v349 = *(_BYTE *)(v342 + v340);
              v323 |= (unint64_t)(v349 & 0x7F) << v343;
              if ((v349 & 0x80) == 0)
                goto LABEL_705;
              v343 += 7;
              v340 = v348;
              v64 = v344++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v341 <= v340)
            v341 = *((_QWORD *)a2 + 1);
          while (v341 != v340)
          {
            v346 = v340 + 1;
            v347 = *(_BYTE *)(v342 + v340);
            *((_QWORD *)a2 + 1) = v346;
            v323 |= (unint64_t)(v347 & 0x7F) << v343;
            if ((v347 & 0x80) == 0)
              goto LABEL_698;
            v343 += 7;
            v340 = v346;
            v64 = v344++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 8u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v422) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 11);
              do
              {
                if ((unint64_t)v51 >= *v10)
                {
                  v121 = (char *)*v415;
                  v122 = (v51 - (_BYTE *)*v415) >> 2;
                  v123 = v122 + 1;
                  if ((unint64_t)(v122 + 1) >> 62)
                    goto LABEL_719;
                  v124 = *v10 - (_QWORD)v121;
                  if (v124 >> 1 > v123)
                    v123 = v124 >> 1;
                  if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL)
                    v125 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v125 = v123;
                  if (v125)
                  {
                    v126 = (char *)sub_100020E2C((uint64_t)v10, v125);
                    v121 = (char *)*((_QWORD *)this + 10);
                    v51 = (char *)*((_QWORD *)this + 11);
                  }
                  else
                  {
                    v126 = 0;
                  }
                  v127 = &v126[4 * v122];
                  *(_DWORD *)v127 = 0;
                  v128 = v127 + 4;
                  while (v51 != v121)
                  {
                    v129 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v127 - 1) = v129;
                    v127 -= 4;
                  }
                  *((_QWORD *)this + 10) = v127;
                  *((_QWORD *)this + 11) = v128;
                  *((_QWORD *)this + 12) = &v126[4 * v125];
                  if (v121)
                    operator delete(v121);
                  v51 = v128;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *((_QWORD *)this + 11) = v51;
                v131 = *((_QWORD *)a2 + 1);
                v130 = *((_QWORD *)a2 + 2);
                v132 = *(_QWORD *)a2;
                if (v131 > 0xFFFFFFFFFFFFFFF5 || v131 + 10 > v130)
                {
                  v134 = 0;
                  v135 = 0;
                  v141 = 0;
                  if (v130 <= v131)
                    v136 = *((_QWORD *)a2 + 1);
                  else
                    v136 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v136 == v131)
                      goto LABEL_409;
                    v137 = v131++;
                    v138 = *(_BYTE *)(v132 + v137);
                    *((_QWORD *)a2 + 1) = v131;
                    v141 |= (unint64_t)(v138 & 0x7F) << v134;
                    if ((v138 & 0x80) == 0)
                      break;
                    v134 += 7;
                    v64 = v135++ > 8;
                    if (v64)
                    {
                      LODWORD(v141) = 0;
                      goto LABEL_225;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v141) = 0;
LABEL_225:
                  v142 = v137 + 1;
                }
                else
                {
                  v139 = 0;
                  v140 = 0;
                  v141 = 0;
                  while (1)
                  {
                    v142 = v131 + 1;
                    *((_QWORD *)a2 + 1) = v131 + 1;
                    v143 = *(_BYTE *)(v132 + v131);
                    v141 |= (unint64_t)(v143 & 0x7F) << v139;
                    if ((v143 & 0x80) == 0)
                      break;
                    v139 += 7;
                    v131 = v142;
                    v64 = v140++ > 8;
                    if (v64)
                    {
                      LODWORD(v141) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v141;
              }
              while (v142 < v130 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_410;
          }
          v256 = (char *)*((_QWORD *)this + 11);
          v255 = *((_QWORD *)this + 12);
          if ((unint64_t)v256 >= v255)
          {
            v283 = (char *)*v415;
            v284 = (v256 - (_BYTE *)*v415) >> 2;
            v285 = v284 + 1;
            if ((unint64_t)(v284 + 1) >> 62)
LABEL_719:
              sub_10000D5F8();
            v286 = v255 - (_QWORD)v283;
            if (v286 >> 1 > v285)
              v285 = v286 >> 1;
            if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFFCLL)
              v287 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v287 = v285;
            if (v287)
            {
              v288 = (char *)sub_100020E2C((uint64_t)v10, v287);
              v283 = (char *)*((_QWORD *)this + 10);
              v256 = (char *)*((_QWORD *)this + 11);
            }
            else
            {
              v288 = 0;
            }
            v350 = &v288[4 * v284];
            *(_DWORD *)v350 = 0;
            v250 = v350 + 4;
            while (v256 != v283)
            {
              v351 = *((_DWORD *)v256 - 1);
              v256 -= 4;
              *((_DWORD *)v350 - 1) = v351;
              v350 -= 4;
            }
            *((_QWORD *)this + 10) = v350;
            *((_QWORD *)this + 11) = v250;
            *((_QWORD *)this + 12) = &v288[4 * v287];
            if (v283)
              operator delete(v283);
          }
          else
          {
            *(_DWORD *)v256 = 0;
            v250 = v256 + 4;
          }
          *((_QWORD *)this + 11) = v250;
          v352 = *((_QWORD *)a2 + 1);
          v353 = *((_QWORD *)a2 + 2);
          v354 = *(_QWORD *)a2;
          v355 = 0;
          v356 = 0;
          if (v352 <= 0xFFFFFFFFFFFFFFF5 && v352 + 10 <= v353)
          {
            v323 = 0;
            while (1)
            {
              v360 = v352 + 1;
              *((_QWORD *)a2 + 1) = v352 + 1;
              v361 = *(_BYTE *)(v354 + v352);
              v323 |= (unint64_t)(v361 & 0x7F) << v355;
              if ((v361 & 0x80) == 0)
                goto LABEL_705;
              v355 += 7;
              v352 = v360;
              v64 = v356++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v353 <= v352)
            v353 = *((_QWORD *)a2 + 1);
          while (v353 != v352)
          {
            v358 = v352 + 1;
            v359 = *(_BYTE *)(v354 + v352);
            *((_QWORD *)a2 + 1) = v358;
            v323 |= (unint64_t)(v359 & 0x7F) << v355;
            if ((v359 & 0x80) == 0)
              goto LABEL_698;
            v355 += 7;
            v352 = v358;
            v64 = v356++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 9u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v422) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 17);
              do
              {
                if ((unint64_t)v51 >= *v9)
                {
                  v144 = (char *)*v416;
                  v145 = (v51 - (_BYTE *)*v416) >> 2;
                  v146 = v145 + 1;
                  if ((unint64_t)(v145 + 1) >> 62)
                    goto LABEL_720;
                  v147 = *v9 - (_QWORD)v144;
                  if (v147 >> 1 > v146)
                    v146 = v147 >> 1;
                  if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL)
                    v148 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v148 = v146;
                  if (v148)
                  {
                    v149 = (char *)sub_100020E2C((uint64_t)v9, v148);
                    v144 = (char *)*((_QWORD *)this + 16);
                    v51 = (char *)*((_QWORD *)this + 17);
                  }
                  else
                  {
                    v149 = 0;
                  }
                  v150 = &v149[4 * v145];
                  *(_DWORD *)v150 = 0;
                  v151 = v150 + 4;
                  while (v51 != v144)
                  {
                    v152 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v150 - 1) = v152;
                    v150 -= 4;
                  }
                  *((_QWORD *)this + 16) = v150;
                  *((_QWORD *)this + 17) = v151;
                  *((_QWORD *)this + 18) = &v149[4 * v148];
                  if (v144)
                    operator delete(v144);
                  v51 = v151;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *((_QWORD *)this + 17) = v51;
                v154 = *((_QWORD *)a2 + 1);
                v153 = *((_QWORD *)a2 + 2);
                v155 = *(_QWORD *)a2;
                if (v154 > 0xFFFFFFFFFFFFFFF5 || v154 + 10 > v153)
                {
                  v157 = 0;
                  v158 = 0;
                  v164 = 0;
                  if (v153 <= v154)
                    v159 = *((_QWORD *)a2 + 1);
                  else
                    v159 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v159 == v154)
                      goto LABEL_409;
                    v160 = v154++;
                    v161 = *(_BYTE *)(v155 + v160);
                    *((_QWORD *)a2 + 1) = v154;
                    v164 |= (unint64_t)(v161 & 0x7F) << v157;
                    if ((v161 & 0x80) == 0)
                      break;
                    v157 += 7;
                    v64 = v158++ > 8;
                    if (v64)
                    {
                      LODWORD(v164) = 0;
                      goto LABEL_270;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v164) = 0;
LABEL_270:
                  v165 = v160 + 1;
                }
                else
                {
                  v162 = 0;
                  v163 = 0;
                  v164 = 0;
                  while (1)
                  {
                    v165 = v154 + 1;
                    *((_QWORD *)a2 + 1) = v154 + 1;
                    v166 = *(_BYTE *)(v155 + v154);
                    v164 |= (unint64_t)(v166 & 0x7F) << v162;
                    if ((v166 & 0x80) == 0)
                      break;
                    v162 += 7;
                    v154 = v165;
                    v64 = v163++ > 8;
                    if (v64)
                    {
                      LODWORD(v164) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v164;
              }
              while (v165 < v153 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_410;
          }
          v258 = (char *)*((_QWORD *)this + 17);
          v257 = *((_QWORD *)this + 18);
          if ((unint64_t)v258 >= v257)
          {
            v289 = (char *)*v416;
            v290 = (v258 - (_BYTE *)*v416) >> 2;
            v291 = v290 + 1;
            if ((unint64_t)(v290 + 1) >> 62)
LABEL_720:
              sub_10000D5F8();
            v292 = v257 - (_QWORD)v289;
            if (v292 >> 1 > v291)
              v291 = v292 >> 1;
            if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFFCLL)
              v293 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v293 = v291;
            if (v293)
            {
              v294 = (char *)sub_100020E2C((uint64_t)v9, v293);
              v289 = (char *)*((_QWORD *)this + 16);
              v258 = (char *)*((_QWORD *)this + 17);
            }
            else
            {
              v294 = 0;
            }
            v362 = &v294[4 * v290];
            *(_DWORD *)v362 = 0;
            v250 = v362 + 4;
            while (v258 != v289)
            {
              v363 = *((_DWORD *)v258 - 1);
              v258 -= 4;
              *((_DWORD *)v362 - 1) = v363;
              v362 -= 4;
            }
            *((_QWORD *)this + 16) = v362;
            *((_QWORD *)this + 17) = v250;
            *((_QWORD *)this + 18) = &v294[4 * v293];
            if (v289)
              operator delete(v289);
          }
          else
          {
            *(_DWORD *)v258 = 0;
            v250 = v258 + 4;
          }
          *((_QWORD *)this + 17) = v250;
          v364 = *((_QWORD *)a2 + 1);
          v365 = *((_QWORD *)a2 + 2);
          v366 = *(_QWORD *)a2;
          v367 = 0;
          v368 = 0;
          if (v364 <= 0xFFFFFFFFFFFFFFF5 && v364 + 10 <= v365)
          {
            v323 = 0;
            while (1)
            {
              v372 = v364 + 1;
              *((_QWORD *)a2 + 1) = v364 + 1;
              v373 = *(_BYTE *)(v366 + v364);
              v323 |= (unint64_t)(v373 & 0x7F) << v367;
              if ((v373 & 0x80) == 0)
                goto LABEL_705;
              v367 += 7;
              v364 = v372;
              v64 = v368++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v365 <= v364)
            v365 = *((_QWORD *)a2 + 1);
          while (v365 != v364)
          {
            v370 = v364 + 1;
            v371 = *(_BYTE *)(v366 + v364);
            *((_QWORD *)a2 + 1) = v370;
            v323 |= (unint64_t)(v371 & 0x7F) << v367;
            if ((v371 & 0x80) == 0)
              goto LABEL_698;
            v367 += 7;
            v364 = v370;
            v64 = v368++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xAu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v422) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 20);
              do
              {
                if ((unint64_t)v51 >= *v8)
                {
                  v167 = (char *)*v417;
                  v168 = (v51 - (_BYTE *)*v417) >> 2;
                  v169 = v168 + 1;
                  if ((unint64_t)(v168 + 1) >> 62)
                    goto LABEL_721;
                  v170 = *v8 - (_QWORD)v167;
                  if (v170 >> 1 > v169)
                    v169 = v170 >> 1;
                  if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL)
                    v171 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v171 = v169;
                  if (v171)
                  {
                    v172 = (char *)sub_100020E2C((uint64_t)v8, v171);
                    v167 = (char *)*((_QWORD *)this + 19);
                    v51 = (char *)*((_QWORD *)this + 20);
                  }
                  else
                  {
                    v172 = 0;
                  }
                  v173 = &v172[4 * v168];
                  *(_DWORD *)v173 = 0;
                  v174 = v173 + 4;
                  while (v51 != v167)
                  {
                    v175 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v173 - 1) = v175;
                    v173 -= 4;
                  }
                  *((_QWORD *)this + 19) = v173;
                  *((_QWORD *)this + 20) = v174;
                  *((_QWORD *)this + 21) = &v172[4 * v171];
                  if (v167)
                    operator delete(v167);
                  v51 = v174;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *((_QWORD *)this + 20) = v51;
                v177 = *((_QWORD *)a2 + 1);
                v176 = *((_QWORD *)a2 + 2);
                v178 = *(_QWORD *)a2;
                if (v177 > 0xFFFFFFFFFFFFFFF5 || v177 + 10 > v176)
                {
                  v180 = 0;
                  v181 = 0;
                  v187 = 0;
                  if (v176 <= v177)
                    v182 = *((_QWORD *)a2 + 1);
                  else
                    v182 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v182 == v177)
                      goto LABEL_409;
                    v183 = v177++;
                    v184 = *(_BYTE *)(v178 + v183);
                    *((_QWORD *)a2 + 1) = v177;
                    v187 |= (unint64_t)(v184 & 0x7F) << v180;
                    if ((v184 & 0x80) == 0)
                      break;
                    v180 += 7;
                    v64 = v181++ > 8;
                    if (v64)
                    {
                      LODWORD(v187) = 0;
                      goto LABEL_315;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v187) = 0;
LABEL_315:
                  v188 = v183 + 1;
                }
                else
                {
                  v185 = 0;
                  v186 = 0;
                  v187 = 0;
                  while (1)
                  {
                    v188 = v177 + 1;
                    *((_QWORD *)a2 + 1) = v177 + 1;
                    v189 = *(_BYTE *)(v178 + v177);
                    v187 |= (unint64_t)(v189 & 0x7F) << v185;
                    if ((v189 & 0x80) == 0)
                      break;
                    v185 += 7;
                    v177 = v188;
                    v64 = v186++ > 8;
                    if (v64)
                    {
                      LODWORD(v187) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v187;
              }
              while (v188 < v176 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_410;
          }
          v260 = (char *)*((_QWORD *)this + 20);
          v259 = *((_QWORD *)this + 21);
          if ((unint64_t)v260 >= v259)
          {
            v295 = (char *)*v417;
            v296 = (v260 - (_BYTE *)*v417) >> 2;
            v297 = v296 + 1;
            if ((unint64_t)(v296 + 1) >> 62)
LABEL_721:
              sub_10000D5F8();
            v298 = v259 - (_QWORD)v295;
            if (v298 >> 1 > v297)
              v297 = v298 >> 1;
            if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFFCLL)
              v299 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v299 = v297;
            if (v299)
            {
              v300 = (char *)sub_100020E2C((uint64_t)v8, v299);
              v295 = (char *)*((_QWORD *)this + 19);
              v260 = (char *)*((_QWORD *)this + 20);
            }
            else
            {
              v300 = 0;
            }
            v374 = &v300[4 * v296];
            *(_DWORD *)v374 = 0;
            v250 = v374 + 4;
            while (v260 != v295)
            {
              v375 = *((_DWORD *)v260 - 1);
              v260 -= 4;
              *((_DWORD *)v374 - 1) = v375;
              v374 -= 4;
            }
            *((_QWORD *)this + 19) = v374;
            *((_QWORD *)this + 20) = v250;
            *((_QWORD *)this + 21) = &v300[4 * v299];
            if (v295)
              operator delete(v295);
          }
          else
          {
            *(_DWORD *)v260 = 0;
            v250 = v260 + 4;
          }
          *((_QWORD *)this + 20) = v250;
          v376 = *((_QWORD *)a2 + 1);
          v377 = *((_QWORD *)a2 + 2);
          v378 = *(_QWORD *)a2;
          v379 = 0;
          v380 = 0;
          if (v376 <= 0xFFFFFFFFFFFFFFF5 && v376 + 10 <= v377)
          {
            v323 = 0;
            while (1)
            {
              v384 = v376 + 1;
              *((_QWORD *)a2 + 1) = v376 + 1;
              v385 = *(_BYTE *)(v378 + v376);
              v323 |= (unint64_t)(v385 & 0x7F) << v379;
              if ((v385 & 0x80) == 0)
                goto LABEL_705;
              v379 += 7;
              v376 = v384;
              v64 = v380++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v377 <= v376)
            v377 = *((_QWORD *)a2 + 1);
          while (v377 != v376)
          {
            v382 = v376 + 1;
            v383 = *(_BYTE *)(v378 + v376);
            *((_QWORD *)a2 + 1) = v382;
            v323 |= (unint64_t)(v383 & 0x7F) << v379;
            if ((v383 & 0x80) == 0)
              goto LABEL_698;
            v379 += 7;
            v376 = v382;
            v64 = v380++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xBu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v422) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 23);
              do
              {
                if ((unint64_t)v51 >= *v420)
                {
                  v190 = (char *)*v418;
                  v191 = (v51 - (_BYTE *)*v418) >> 2;
                  v192 = v191 + 1;
                  if ((unint64_t)(v191 + 1) >> 62)
                    goto LABEL_722;
                  v193 = *v420 - (_QWORD)v190;
                  if (v193 >> 1 > v192)
                    v192 = v193 >> 1;
                  if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                    v194 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v194 = v192;
                  if (v194)
                  {
                    v195 = (char *)sub_100020E2C((uint64_t)v420, v194);
                    v190 = (char *)*((_QWORD *)this + 22);
                    v51 = (char *)*((_QWORD *)this + 23);
                  }
                  else
                  {
                    v195 = 0;
                  }
                  v196 = &v195[4 * v191];
                  *(_DWORD *)v196 = 0;
                  v197 = v196 + 4;
                  while (v51 != v190)
                  {
                    v198 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v196 - 1) = v198;
                    v196 -= 4;
                  }
                  *((_QWORD *)this + 22) = v196;
                  *((_QWORD *)this + 23) = v197;
                  *((_QWORD *)this + 24) = &v195[4 * v194];
                  if (v190)
                    operator delete(v190);
                  v51 = v197;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *((_QWORD *)this + 23) = v51;
                v200 = *((_QWORD *)a2 + 1);
                v199 = *((_QWORD *)a2 + 2);
                v201 = *(_QWORD *)a2;
                if (v200 > 0xFFFFFFFFFFFFFFF5 || v200 + 10 > v199)
                {
                  v203 = 0;
                  v204 = 0;
                  v210 = 0;
                  if (v199 <= v200)
                    v205 = *((_QWORD *)a2 + 1);
                  else
                    v205 = *((_QWORD *)a2 + 2);
                  while (1)
                  {
                    if (v205 == v200)
                      goto LABEL_409;
                    v206 = v200++;
                    v207 = *(_BYTE *)(v201 + v206);
                    *((_QWORD *)a2 + 1) = v200;
                    v210 |= (unint64_t)(v207 & 0x7F) << v203;
                    if ((v207 & 0x80) == 0)
                      break;
                    v203 += 7;
                    v64 = v204++ > 8;
                    if (v64)
                    {
                      LODWORD(v210) = 0;
                      goto LABEL_360;
                    }
                  }
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v210) = 0;
LABEL_360:
                  v211 = v206 + 1;
                }
                else
                {
                  v208 = 0;
                  v209 = 0;
                  v210 = 0;
                  while (1)
                  {
                    v211 = v200 + 1;
                    *((_QWORD *)a2 + 1) = v200 + 1;
                    v212 = *(_BYTE *)(v201 + v200);
                    v210 |= (unint64_t)(v212 & 0x7F) << v208;
                    if ((v212 & 0x80) == 0)
                      break;
                    v208 += 7;
                    v200 = v211;
                    v64 = v209++ > 8;
                    if (v64)
                    {
                      LODWORD(v210) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v210;
              }
              while (v211 < v199 && !*((_BYTE *)a2 + 24));
            }
            goto LABEL_410;
          }
          v262 = (char *)*((_QWORD *)this + 23);
          v261 = *((_QWORD *)this + 24);
          if ((unint64_t)v262 >= v261)
          {
            v301 = (char *)*v418;
            v302 = (v262 - (_BYTE *)*v418) >> 2;
            v303 = v302 + 1;
            if ((unint64_t)(v302 + 1) >> 62)
LABEL_722:
              sub_10000D5F8();
            v304 = v261 - (_QWORD)v301;
            if (v304 >> 1 > v303)
              v303 = v304 >> 1;
            if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL)
              v305 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v305 = v303;
            if (v305)
            {
              v306 = (char *)sub_100020E2C((uint64_t)v420, v305);
              v301 = (char *)*((_QWORD *)this + 22);
              v262 = (char *)*((_QWORD *)this + 23);
            }
            else
            {
              v306 = 0;
            }
            v386 = &v306[4 * v302];
            *(_DWORD *)v386 = 0;
            v250 = v386 + 4;
            while (v262 != v301)
            {
              v387 = *((_DWORD *)v262 - 1);
              v262 -= 4;
              *((_DWORD *)v386 - 1) = v387;
              v386 -= 4;
            }
            *((_QWORD *)this + 22) = v386;
            *((_QWORD *)this + 23) = v250;
            *((_QWORD *)this + 24) = &v306[4 * v305];
            if (v301)
              operator delete(v301);
          }
          else
          {
            *(_DWORD *)v262 = 0;
            v250 = v262 + 4;
          }
          *((_QWORD *)this + 23) = v250;
          v388 = *((_QWORD *)a2 + 1);
          v389 = *((_QWORD *)a2 + 2);
          v390 = *(_QWORD *)a2;
          v391 = 0;
          v392 = 0;
          if (v388 <= 0xFFFFFFFFFFFFFFF5 && v388 + 10 <= v389)
          {
            v323 = 0;
            while (1)
            {
              v396 = v388 + 1;
              *((_QWORD *)a2 + 1) = v388 + 1;
              v397 = *(_BYTE *)(v390 + v388);
              v323 |= (unint64_t)(v397 & 0x7F) << v391;
              if ((v397 & 0x80) == 0)
                goto LABEL_705;
              v391 += 7;
              v388 = v396;
              v64 = v392++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v389 <= v388)
            v389 = *((_QWORD *)a2 + 1);
          while (v389 != v388)
          {
            v394 = v388 + 1;
            v395 = *(_BYTE *)(v390 + v388);
            *((_QWORD *)a2 + 1) = v394;
            v323 |= (unint64_t)(v395 & 0x7F) << v391;
            if ((v395 & 0x80) == 0)
              goto LABEL_698;
            v391 += 7;
            v388 = v394;
            v64 = v392++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xCu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v422) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v51 = (char *)*((_QWORD *)this + 14);
              do
              {
                if ((unint64_t)v51 >= *v421)
                {
                  v213 = (char *)*v419;
                  v214 = (v51 - (_BYTE *)*v419) >> 2;
                  v215 = v214 + 1;
                  if ((unint64_t)(v214 + 1) >> 62)
                    goto LABEL_723;
                  v216 = *v421 - (_QWORD)v213;
                  if (v216 >> 1 > v215)
                    v215 = v216 >> 1;
                  if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL)
                    v217 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v217 = v215;
                  if (v217)
                  {
                    v218 = (char *)sub_100020E2C((uint64_t)v421, v217);
                    v213 = (char *)*((_QWORD *)this + 13);
                    v51 = (char *)*((_QWORD *)this + 14);
                  }
                  else
                  {
                    v218 = 0;
                  }
                  v219 = &v218[4 * v214];
                  *(_DWORD *)v219 = 0;
                  v220 = v219 + 4;
                  while (v51 != v213)
                  {
                    v221 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v219 - 1) = v221;
                    v219 -= 4;
                  }
                  *((_QWORD *)this + 13) = v219;
                  *((_QWORD *)this + 14) = v220;
                  *((_QWORD *)this + 15) = &v218[4 * v217];
                  if (v213)
                    operator delete(v213);
                  v51 = v220;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *((_QWORD *)this + 14) = v51;
                v223 = *((_QWORD *)a2 + 1);
                v222 = *((_QWORD *)a2 + 2);
                v224 = *(_QWORD *)a2;
                if (v223 <= 0xFFFFFFFFFFFFFFF5 && v223 + 10 <= v222)
                {
                  v231 = 0;
                  v232 = 0;
                  v233 = 0;
                  while (1)
                  {
                    v234 = v223 + 1;
                    *((_QWORD *)a2 + 1) = v223 + 1;
                    v235 = *(_BYTE *)(v224 + v223);
                    v233 |= (unint64_t)(v235 & 0x7F) << v231;
                    if ((v235 & 0x80) == 0)
                      goto LABEL_406;
                    v231 += 7;
                    v223 = v234;
                    v64 = v232++ > 8;
                    if (v64)
                    {
                      LODWORD(v233) = 0;
                      goto LABEL_406;
                    }
                  }
                }
                v226 = 0;
                v227 = 0;
                v233 = 0;
                if (v222 <= v223)
                  v228 = *((_QWORD *)a2 + 1);
                else
                  v228 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v228 == v223)
                  {
LABEL_409:
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v51 - 1) = 0;
                    goto LABEL_410;
                  }
                  v229 = v223++;
                  v230 = *(_BYTE *)(v224 + v229);
                  *((_QWORD *)a2 + 1) = v223;
                  v233 |= (unint64_t)(v230 & 0x7F) << v226;
                  if ((v230 & 0x80) == 0)
                    break;
                  v226 += 7;
                  v64 = v227++ > 8;
                  if (v64)
                  {
                    LODWORD(v233) = 0;
                    goto LABEL_405;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v233) = 0;
LABEL_405:
                v234 = v229 + 1;
LABEL_406:
                *((_DWORD *)v51 - 1) = v233;
              }
              while (v234 < v222 && !*((_BYTE *)a2 + 24));
            }
LABEL_410:
            PB::Reader::recallMark(a2, v422);
          }
          else
          {
            v264 = (char *)*((_QWORD *)this + 14);
            v263 = *((_QWORD *)this + 15);
            if ((unint64_t)v264 >= v263)
            {
              v307 = (char *)*v419;
              v308 = (v264 - (_BYTE *)*v419) >> 2;
              v309 = v308 + 1;
              if ((unint64_t)(v308 + 1) >> 62)
LABEL_723:
                sub_10000D5F8();
              v310 = v263 - (_QWORD)v307;
              if (v310 >> 1 > v309)
                v309 = v310 >> 1;
              if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFFCLL)
                v311 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v311 = v309;
              if (v311)
              {
                v312 = (char *)sub_100020E2C((uint64_t)v421, v311);
                v307 = (char *)*((_QWORD *)this + 13);
                v264 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v312 = 0;
              }
              v398 = &v312[4 * v308];
              *(_DWORD *)v398 = 0;
              v250 = v398 + 4;
              while (v264 != v307)
              {
                v399 = *((_DWORD *)v264 - 1);
                v264 -= 4;
                *((_DWORD *)v398 - 1) = v399;
                v398 -= 4;
              }
              *((_QWORD *)this + 13) = v398;
              *((_QWORD *)this + 14) = v250;
              *((_QWORD *)this + 15) = &v312[4 * v311];
              if (v307)
                operator delete(v307);
            }
            else
            {
              *(_DWORD *)v264 = 0;
              v250 = v264 + 4;
            }
            *((_QWORD *)this + 14) = v250;
            v400 = *((_QWORD *)a2 + 1);
            v401 = *((_QWORD *)a2 + 2);
            v402 = *(_QWORD *)a2;
            v403 = 0;
            v404 = 0;
            if (v400 > 0xFFFFFFFFFFFFFFF5 || v400 + 10 > v401)
            {
              v323 = 0;
              if (v401 <= v400)
                v401 = *((_QWORD *)a2 + 1);
              while (v401 != v400)
              {
                v406 = v400 + 1;
                v407 = *(_BYTE *)(v402 + v400);
                *((_QWORD *)a2 + 1) = v406;
                v323 |= (unint64_t)(v407 & 0x7F) << v403;
                if ((v407 & 0x80) == 0)
                {
LABEL_698:
                  if (*((_BYTE *)a2 + 24))
                    LODWORD(v323) = 0;
                  goto LABEL_705;
                }
                v403 += 7;
                v400 = v406;
                v64 = v404++ > 8;
                if (v64)
                {
LABEL_704:
                  LODWORD(v323) = 0;
                  goto LABEL_705;
                }
              }
LABEL_697:
              LODWORD(v323) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v323 = 0;
              while (1)
              {
                v408 = v400 + 1;
                *((_QWORD *)a2 + 1) = v400 + 1;
                v409 = *(_BYTE *)(v402 + v400);
                v323 |= (unint64_t)(v409 & 0x7F) << v403;
                if ((v409 & 0x80) == 0)
                  break;
                v403 += 7;
                v400 = v408;
                v64 = v404++ > 8;
                if (v64)
                  goto LABEL_704;
              }
            }
LABEL_705:
            *(v250 - 1) = v323;
          }
LABEL_706:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v25, 0) & 1) == 0)
            return 0;
          goto LABEL_706;
      }
    }
    v20 = 0;
    v21 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryPPG::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;

  v3 = this;
  v4 = *(_BYTE *)(this + 224);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 208), 1u);
    v4 = *(_BYTE *)(v3 + 224);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_33:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 220), 3u);
      if ((*(_BYTE *)(v3 + 224) & 4) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 224) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 200), 2u);
  v4 = *(_BYTE *)(v3 + 224);
  if ((v4 & 8) != 0)
    goto LABEL_33;
LABEL_4:
  if ((v4 & 4) != 0)
LABEL_5:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 216), 4u);
LABEL_6:
  v5 = *(unsigned int **)(v3 + 8);
  v6 = *(unsigned int **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeVarInt(a2, v7, 5u);
  }
  v8 = *(unsigned int **)(v3 + 32);
  v9 = *(unsigned int **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::writeVarInt(a2, v10, 6u);
  }
  v11 = *(unsigned int **)(v3 + 56);
  v12 = *(unsigned int **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::writeVarInt(a2, v13, 7u);
  }
  v14 = *(unsigned int **)(v3 + 80);
  v15 = *(unsigned int **)(v3 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::writeVarInt(a2, v16, 8u);
  }
  v17 = *(unsigned int **)(v3 + 128);
  v18 = *(unsigned int **)(v3 + 136);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::writeVarInt(a2, v19, 9u);
  }
  v20 = *(unsigned int **)(v3 + 152);
  v21 = *(unsigned int **)(v3 + 160);
  while (v20 != v21)
  {
    v22 = *v20++;
    this = PB::Writer::writeVarInt(a2, v22, 0xAu);
  }
  v23 = *(unsigned int **)(v3 + 176);
  v24 = *(unsigned int **)(v3 + 184);
  while (v23 != v24)
  {
    v25 = *v23++;
    this = PB::Writer::writeVarInt(a2, v25, 0xBu);
  }
  v27 = *(unsigned int **)(v3 + 104);
  v26 = *(unsigned int **)(v3 + 112);
  while (v27 != v26)
  {
    v28 = *v27++;
    this = PB::Writer::writeVarInt(a2, v28, 0xCu);
  }
  return this;
}

BOOL CMMsl::AccessoryPPG::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 224) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 224) & 2) == 0 || *(double *)(a1 + 208) != *(double *)(a2 + 208))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 224) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 224) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 224) & 1) == 0 || *(_QWORD *)(a1 + 200) != *(_QWORD *)(a2 + 200))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 224) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 224) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 224) & 8) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 224) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 224) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 224) & 4) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 224) & 4) != 0)
  {
    return 0;
  }
  if (sub_1000615E4(a1 + 8, a2 + 8)
    && sub_1000615E4(a1 + 32, a2 + 32)
    && sub_1000615E4(a1 + 56, a2 + 56)
    && sub_1000615E4(a1 + 80, a2 + 80)
    && sub_1000615E4(a1 + 128, a2 + 128)
    && sub_1000615E4(a1 + 152, a2 + 152)
    && sub_1000615E4(a1 + 176, a2 + 176))
  {
    return sub_1000615E4(a1 + 104, a2 + 104);
  }
  return 0;
}

BOOL sub_1000615E4(uint64_t a1, uint64_t a2)
{
  const void *v2;
  size_t v4;
  const void *v5;

  v2 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8) - (_QWORD)v2;
  v5 = *(const void **)a2;
  return v4 == *(_QWORD *)(a2 + 8) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

uint64_t CMMsl::AccessoryPPG::hash_value(CMMsl::AccessoryPPG *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((*((_BYTE *)this + 224) & 2) != 0)
  {
    v2 = *((double *)this + 26);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((*((_BYTE *)this + 224) & 1) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 25);
      if ((*((_BYTE *)this + 224) & 8) != 0)
        goto LABEL_4;
LABEL_10:
      v4 = 0;
      if ((*((_BYTE *)this + 224) & 4) != 0)
        goto LABEL_5;
LABEL_11:
      v5 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v2 = 0.0;
    if ((*((_BYTE *)this + 224) & 1) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 224) & 8) == 0)
    goto LABEL_10;
LABEL_4:
  v4 = *((unsigned int *)this + 55);
  if ((*((_BYTE *)this + 224) & 4) == 0)
    goto LABEL_11;
LABEL_5:
  v5 = *((unsigned int *)this + 54);
LABEL_12:
  v6 = v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v7 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v8 = v6 ^ v7 ^ PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v9 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v10 = v9 ^ PBHashBytes(*((_QWORD *)this + 16), *((_QWORD *)this + 17) - *((_QWORD *)this + 16));
  v11 = v8 ^ v10 ^ PBHashBytes(*((_QWORD *)this + 19), *((_QWORD *)this + 20) - *((_QWORD *)this + 19));
  v12 = PBHashBytes(*((_QWORD *)this + 22), *((_QWORD *)this + 23) - *((_QWORD *)this + 22));
  return v11 ^ v12 ^ PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
}

uint64_t CMMsl::AccessoryProx::AccessoryProx(uint64_t this)
{
  *(_QWORD *)this = off_10034F9C8;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034F9C8;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void CMMsl::AccessoryProx::~AccessoryProx(CMMsl::AccessoryProx *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryProx::AccessoryProx(uint64_t this, const CMMsl::AccessoryProx *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  *(_QWORD *)this = off_10034F9C8;
  *(_DWORD *)(this + 56) = 0;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    v3 = 4;
    *(_WORD *)(this + 56) = 4;
    *(_DWORD *)(this + 24) = v4;
    v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *(_WORD *)(this + 56) = v3;
    *(_DWORD *)(this + 36) = v5;
    v2 = *((_WORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *(_WORD *)(this + 56) = v3;
    *(_DWORD *)(this + 52) = v6;
    v2 = *((_WORD *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 56) = v3;
  *(_QWORD *)(this + 16) = v8;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 48) = v9;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 44) = v10;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 56) = v3;
  *(_DWORD *)(this + 40) = v11;
  v2 = *((_WORD *)a2 + 28);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      return this;
LABEL_22:
    v13 = *((_DWORD *)a2 + 7);
    *(_WORD *)(this + 56) = v3 | 8;
    *(_DWORD *)(this + 28) = v13;
    return this;
  }
LABEL_21:
  v12 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 56) = v3;
  *(_QWORD *)(this + 8) = v12;
  if ((*((_WORD *)a2 + 28) & 8) != 0)
    goto LABEL_22;
  return this;
}

uint64_t CMMsl::AccessoryProx::operator=(uint64_t a1, const CMMsl::AccessoryProx *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  if ((const CMMsl::AccessoryProx *)a1 != a2)
  {
    CMMsl::AccessoryProx::AccessoryProx((uint64_t)&v13, a2);
    v3 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v22;
    v22 = v3;
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v16;
    v16 = v4;
    v5 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v18;
    v18 = v5;
    v6 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v21;
    v21 = v6;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v15;
    v15 = v7;
    v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    v20 = v8;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v19;
    v19 = v9;
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v14;
    v14 = v10;
    v11 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v17;
    v17 = v11;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryProx *a2, CMMsl::AccessoryProx *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  double result;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  v6 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  v10 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v10;
  v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  LODWORD(v12) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v12;
  return result;
}

double CMMsl::AccessoryProx::AccessoryProx(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034F9C8;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::AccessoryProx::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_DWORD *)(a2 + 36);
    v6 = *(_DWORD *)(a2 + 52);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a2 + 48);
    v9 = *(_QWORD *)(a2 + 8);
    v26 = *(_DWORD *)(a1 + 56);
    v24 = *(_DWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v11 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v20 = v11;
    v12 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v5;
    v22 = v12;
    v13 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v6;
    v25 = v13;
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    v19[2] = v14;
    v23 = *(_QWORD *)(a1 + 40);
    v19[0] = off_10034F9C8;
    v19[1] = v10;
    v15 = *(_QWORD *)(a1 + 28);
    v16 = *(_QWORD *)(a2 + 28);
    v17 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 56) = v3;
    *(_DWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 28) = v16;
    v21 = v15;
    PB::Base::~Base((PB::Base *)v19);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProx::formatText(CMMsl::AccessoryProx *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "base", *((float *)this + 6));
    v5 = *((_WORD *)this + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "broken", *((_DWORD *)this + 7));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 8));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "peak", *((float *)this + 9));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "sensor", *((_DWORD *)this + 10));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 11));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "temp", *((float *)this + 13));
    if ((*((_WORD *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 12));
  v5 = *((_WORD *)this + 28);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 2) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProx::readFrom(CMMsl::AccessoryProx *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 28) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_43;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_33;
            case 2u:
              *((_WORD *)this + 28) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_43;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_33;
            case 3u:
              *((_WORD *)this + 28) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_43;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
              v2 = *((_QWORD *)a2 + 1) + 4;
              goto LABEL_122;
            case 4u:
              *((_WORD *)this + 28) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_127;
                  }
                  v59 = v21++;
                  v60 = *(_BYTE *)(v22 + v59);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_126:
                    v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_126;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_127;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_127:
              *((_DWORD *)this + 7) = v25;
              goto LABEL_153;
            case 5u:
              *((_WORD *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
LABEL_122:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_153;
            case 6u:
              *((_WORD *)this + 28) |= 0x100u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_132;
                  }
                  v63 = v27++;
                  v64 = *(_BYTE *)(v28 + v63);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_131:
                    v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_131;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_132;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_132:
              *((_DWORD *)this + 12) = v31;
              goto LABEL_153;
            case 7u:
              *((_WORD *)this + 28) |= 0x80u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v33++;
                  v68 = *(_BYTE *)(v34 + v67);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_136:
                    v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_136;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_137;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_137:
              *((_DWORD *)this + 11) = v37;
              goto LABEL_153;
            case 8u:
              *((_WORD *)this + 28) |= 0x40u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_141:
                    v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_141;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_142;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_142:
              *((_DWORD *)this + 10) = v43;
              goto LABEL_153;
            case 9u:
              *((_WORD *)this + 28) |= 0x10u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_146:
                    v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_146;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_147;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_147:
              *((_DWORD *)this + 8) = v49;
              goto LABEL_153;
            case 0xAu:
              *((_WORD *)this + 28) |= 1u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_151:
                    v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v55 = 0;
                goto LABEL_151;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_152;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_152:
              *((_QWORD *)this + 1) = v55;
LABEL_153:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_153;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProx::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 56);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
    v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 2u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 3u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 5u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 8u);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xAu);
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 9u);
  if ((*(_WORD *)(v3 + 56) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xAu);
  return this;
}

BOOL CMMsl::AccessoryProx::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 56);
  v3 = *(_WORD *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x100) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 56) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return v4;
}

uint64_t CMMsl::AccessoryProx::hash_value(CMMsl::AccessoryProx *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;

  v1 = *((_WORD *)this + 28);
  if ((v1 & 4) == 0)
  {
    v2 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_21:
    v4 = 0;
    if ((*((_WORD *)this + 28) & 0x200) != 0)
      goto LABEL_6;
LABEL_22:
    v6 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_23;
  }
  v14 = *((float *)this + 6);
  v2 = LODWORD(v14);
  if (v14 == 0.0)
    v2 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_21;
LABEL_3:
  v3 = *((float *)this + 9);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 28) & 0x200) == 0)
    goto LABEL_22;
LABEL_6:
  v5 = *((float *)this + 13);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_9:
    v7 = *((unsigned int *)this + 8);
    if ((v1 & 2) != 0)
      goto LABEL_10;
LABEL_24:
    v8 = 0.0;
    if ((*((_WORD *)this + 28) & 0x100) != 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_23:
  v7 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_24;
LABEL_10:
  v8 = *((double *)this + 2);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 28) & 0x100) != 0)
  {
LABEL_13:
    v9 = *((unsigned int *)this + 12);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v10 = *((unsigned int *)this + 11);
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v10 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    v11 = *((unsigned int *)this + 10);
    if ((v1 & 1) != 0)
      goto LABEL_16;
LABEL_28:
    v12 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_17;
LABEL_29:
    v13 = 0;
    return v4 ^ v2 ^ v6 ^ v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_27:
  v11 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_28;
LABEL_16:
  v12 = *((_QWORD *)this + 1);
  if ((v1 & 8) == 0)
    goto LABEL_29;
LABEL_17:
  v13 = *((unsigned int *)this + 7);
  return v4 ^ v2 ^ v6 ^ v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

double CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this)
{
  double result;

  *(_QWORD *)this = off_10034FA00;
  *((_DWORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_10034FA00;
  *((_DWORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_10034FA00;
  v4 = (void **)((char *)this + 56);
  sub_1002394A8(&v4);
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop(this);
  operator delete();
}

CMMsl::AccessoryProxSensorDrop *CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(CMMsl::AccessoryProxSensorDrop *this, const CMMsl::AccessoryProxSensorDrop *a2)
{
  char v4;
  int v5;
  int v6;
  char v7;
  int v8;
  int v10;
  int v11;
  int v12;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = off_10034FA00;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 104) & 8) != 0)
  {
    v5 = *((_DWORD *)a2 + 23);
    *((_BYTE *)this + 104) = 8;
    *((_DWORD *)this + 23) = v5;
    v4 = 12;
    if ((*((_BYTE *)a2 + 104) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 4;
  if ((*((_BYTE *)a2 + 104) & 4) != 0)
  {
LABEL_5:
    v6 = *((_DWORD *)a2 + 22);
    *((_BYTE *)this + 104) = v4;
    *((_DWORD *)this + 22) = v6;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 7) != *((_QWORD *)a2 + 8))
    sub_100062ACC();
  if (this != a2)
  {
    sub_100020CE4((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v7 = *((_BYTE *)a2 + 104);
  if ((v7 & 1) != 0)
  {
    v10 = *((_DWORD *)a2 + 20);
    *((_BYTE *)this + 104) |= 1u;
    *((_DWORD *)this + 20) = v10;
    v7 = *((_BYTE *)a2 + 104);
    if ((v7 & 0x10) == 0)
    {
LABEL_12:
      if ((v7 & 2) == 0)
        goto LABEL_13;
LABEL_18:
      v12 = *((_DWORD *)a2 + 21);
      *((_BYTE *)this + 104) |= 2u;
      *((_DWORD *)this + 21) = v12;
      if ((*((_BYTE *)a2 + 104) & 0x20) == 0)
        return this;
      goto LABEL_14;
    }
  }
  else if ((*((_BYTE *)a2 + 104) & 0x10) == 0)
  {
    goto LABEL_12;
  }
  v11 = *((_DWORD *)a2 + 24);
  *((_BYTE *)this + 104) |= 0x10u;
  *((_DWORD *)this + 24) = v11;
  v7 = *((_BYTE *)a2 + 104);
  if ((v7 & 2) != 0)
    goto LABEL_18;
LABEL_13:
  if ((v7 & 0x20) != 0)
  {
LABEL_14:
    v8 = *((_DWORD *)a2 + 25);
    *((_BYTE *)this + 104) |= 0x20u;
    *((_DWORD *)this + 25) = v8;
  }
  return this;
}

void sub_100062ACC()
{
  operator new();
}

void sub_100062C40(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::AccessoryProxSensorDrop::operator=(uint64_t a1, const CMMsl::AccessoryProxSensorDrop *a2)
{
  CMMsl::AccessoryProxSensorDrop *v3;
  _BYTE v5[112];

  if ((const CMMsl::AccessoryProxSensorDrop *)a1 != a2)
  {
    CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryProxSensorDrop *)v5, v3);
    CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessoryProxSensorDrop *a2, CMMsl::AccessoryProxSensorDrop *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_DWORD *)(this + 104);
  *(_DWORD *)(this + 104) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  v4 = *(_DWORD *)(this + 92);
  *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  v5 = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  v6 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  v10 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v10;
  v11 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 80);
  *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 96);
  *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 84);
  *(_DWORD *)(this + 84) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  LODWORD(v14) = *(_DWORD *)(this + 100);
  *(_DWORD *)(this + 100) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v14;
  return this;
}

uint64_t CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;

  *(_QWORD *)a1 = off_10034FA00;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  v6 = (_OWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  sub_100239524((_QWORD *)(a1 + 56));
  *v6 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  sub_100239458(v5, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t CMMsl::AccessoryProxSensorDrop::operator=(uint64_t a1, uint64_t a2)
{
  CMMsl::AccessoryProxSensorDrop *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::AccessoryProxSensorDrop::AccessoryProxSensorDrop((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryProxSensorDrop *)v5, v3);
    CMMsl::AccessoryProxSensorDrop::~AccessoryProxSensorDrop((CMMsl::AccessoryProxSensorDrop *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProxSensorDrop::formatText(CMMsl::AccessoryProxSensorDrop *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  float *v13;
  float *v14;
  float v15;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 104);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "conchaDropped", *((_DWORD *)this + 20));
    v5 = *((_BYTE *)this + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*((_BYTE *)this + 104) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "conchaRecovered", *((_DWORD *)this + 21));
  v5 = *((_BYTE *)this + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "iedState", *((_DWORD *)this + 22));
  if ((*((_BYTE *)this + 104) & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 23));
LABEL_6:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "mean", v8);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  v10 = (uint64_t *)*((_QWORD *)this + 8);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "optical");
  }
  v12 = *((_BYTE *)this + 104);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "tragusDropped", *((_DWORD *)this + 24));
    v12 = *((_BYTE *)this + 104);
  }
  if ((v12 & 0x20) != 0)
    PB::TextFormatter::format(a2, "tragusRecovered", *((_DWORD *)this + 25));
  v13 = (float *)*((_QWORD *)this + 4);
  v14 = (float *)*((_QWORD *)this + 5);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "variance", v15);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryProxSensorDrop::readFrom(CMMsl::AccessoryProxSensorDrop *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  char *v110;
  _DWORD *v111;
  unint64_t v112;
  char *v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;
  char v118;
  unsigned int v119;
  unint64_t v120;
  char v121;
  char v122;
  unsigned int v123;
  unint64_t v124;
  char v125;
  char v126;
  unsigned int v127;
  unint64_t v128;
  char v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  int v143;
  char *v144;
  int v145;
  unint64_t v146;
  _BYTE v149[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 104) |= 8u;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          v27 = *(_QWORD *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)a2 + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_188;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_122:
            LODWORD(v30) = 0;
            goto LABEL_188;
          }
          v101 = 0;
          v102 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v103 = v25 + 1;
              v104 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)a2 + 1) = v103;
              v30 |= (unint64_t)(v104 & 0x7F) << v101;
              if (v104 < 0)
              {
                v101 += 7;
                v25 = v103;
                v18 = v102++ > 8;
                if (v18)
                  goto LABEL_122;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v30) = 0;
            }
            break;
          }
LABEL_188:
          *((_DWORD *)this + 23) = v30;
          goto LABEL_222;
        case 2u:
          *((_BYTE *)this + 104) |= 4u;
          v33 = *((_QWORD *)a2 + 1);
          v34 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_191;
              v36 += 7;
              v33 = v39;
              v18 = v37++ > 8;
            }
            while (!v18);
LABEL_129:
            LODWORD(v38) = 0;
            goto LABEL_191;
          }
          v105 = 0;
          v106 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v107 = v33 + 1;
              v108 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)a2 + 1) = v107;
              v38 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                v33 = v107;
                v18 = v106++ > 8;
                if (v18)
                  goto LABEL_129;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v38) = 0;
            }
            break;
          }
LABEL_191:
          *((_DWORD *)this + 22) = v38;
          goto LABEL_222;
        case 3u:
          sub_100063B60();
        case 4u:
          if (v24 != 2)
          {
            v110 = (char *)*((_QWORD *)this + 2);
            v109 = *((_QWORD *)this + 3);
            if ((unint64_t)v110 >= v109)
            {
              v130 = (char *)*v10;
              v131 = (v110 - (_BYTE *)*v10) >> 2;
              v132 = v131 + 1;
              if ((unint64_t)(v131 + 1) >> 62)
LABEL_232:
                sub_10000D5F8();
              v133 = v109 - (_QWORD)v130;
              if (v133 >> 1 > v132)
                v132 = v133 >> 1;
              if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
                v134 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v134 = v132;
              if (v134)
              {
                v135 = (char *)sub_100020E2C((uint64_t)v11, v134);
                v130 = (char *)*((_QWORD *)this + 1);
                v110 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v135 = 0;
              }
              v142 = &v135[4 * v131];
              *(_DWORD *)v142 = 0;
              v111 = v142 + 4;
              while (v110 != v130)
              {
                v143 = *((_DWORD *)v110 - 1);
                v110 -= 4;
                *((_DWORD *)v142 - 1) = v143;
                v142 -= 4;
              }
              *((_QWORD *)this + 1) = v142;
              *((_QWORD *)this + 2) = v111;
              *((_QWORD *)this + 3) = &v135[4 * v134];
              if (v130)
                operator delete(v130);
            }
            else
            {
              *(_DWORD *)v110 = 0;
              v111 = v110 + 4;
            }
            *((_QWORD *)this + 2) = v111;
            goto LABEL_218;
          }
          if ((PB::Reader::placeMark(a2, v149) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_232;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v11, v50);
                v46 = (char *)*((_QWORD *)this + 1);
                v44 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 1) = v52;
              *((_QWORD *)this + 2) = v45;
              *((_QWORD *)this + 3) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 2) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_162;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_163;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v149) & 1) != 0)
              return 0;
            v55 = *((_QWORD *)a2 + 1);
            v56 = *((_QWORD *)a2 + 2);
            while (v55 < v56 && !*((_BYTE *)a2 + 24))
            {
              v58 = (char *)*((_QWORD *)this + 5);
              v57 = *((_QWORD *)this + 6);
              if ((unint64_t)v58 >= v57)
              {
                v60 = (char *)*v8;
                v61 = (v58 - (_BYTE *)*v8) >> 2;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62)
                  goto LABEL_233;
                v63 = v57 - (_QWORD)v60;
                if (v63 >> 1 > v62)
                  v62 = v63 >> 1;
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                  v64 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v64 = v62;
                if (v64)
                {
                  v65 = (char *)sub_100020E2C((uint64_t)v9, v64);
                  v60 = (char *)*((_QWORD *)this + 4);
                  v58 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v65 = 0;
                }
                v66 = &v65[4 * v61];
                *(_DWORD *)v66 = 0;
                v59 = v66 + 4;
                while (v58 != v60)
                {
                  v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *((_QWORD *)this + 4) = v66;
                *((_QWORD *)this + 5) = v59;
                *((_QWORD *)this + 6) = &v65[4 * v64];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *(_DWORD *)v58 = 0;
                v59 = v58 + 4;
              }
              *((_QWORD *)this + 5) = v59;
              v68 = *((_QWORD *)a2 + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_162:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v68);
              v56 = *((_QWORD *)a2 + 2);
              v55 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v55;
            }
LABEL_163:
            PB::Reader::recallMark(a2, v149);
          }
          else
          {
            v113 = (char *)*((_QWORD *)this + 5);
            v112 = *((_QWORD *)this + 6);
            if ((unint64_t)v113 >= v112)
            {
              v136 = (char *)*v8;
              v137 = (v113 - (_BYTE *)*v8) >> 2;
              v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 62)
LABEL_233:
                sub_10000D5F8();
              v139 = v112 - (_QWORD)v136;
              if (v139 >> 1 > v138)
                v138 = v139 >> 1;
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
                v140 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v140 = v138;
              if (v140)
              {
                v141 = (char *)sub_100020E2C((uint64_t)v9, v140);
                v136 = (char *)*((_QWORD *)this + 4);
                v113 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v141 = 0;
              }
              v144 = &v141[4 * v137];
              *(_DWORD *)v144 = 0;
              v111 = v144 + 4;
              while (v113 != v136)
              {
                v145 = *((_DWORD *)v113 - 1);
                v113 -= 4;
                *((_DWORD *)v144 - 1) = v145;
                v144 -= 4;
              }
              *((_QWORD *)this + 4) = v144;
              *((_QWORD *)this + 5) = v111;
              *((_QWORD *)this + 6) = &v141[4 * v140];
              if (v136)
                operator delete(v136);
            }
            else
            {
              *(_DWORD *)v113 = 0;
              v111 = v113 + 4;
            }
            *((_QWORD *)this + 5) = v111;
LABEL_218:
            v146 = *((_QWORD *)a2 + 1);
            if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v111 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v146);
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_222:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          *((_BYTE *)this + 104) |= 1u;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_194;
              v72 += 7;
              v69 = v75;
              v18 = v73++ > 8;
            }
            while (!v18);
LABEL_140:
            LODWORD(v74) = 0;
            goto LABEL_194;
          }
          v114 = 0;
          v115 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v116 = v69 + 1;
              v117 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v116;
              v74 |= (unint64_t)(v117 & 0x7F) << v114;
              if (v117 < 0)
              {
                v114 += 7;
                v69 = v116;
                v18 = v115++ > 8;
                if (v18)
                  goto LABEL_140;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_194:
          *((_DWORD *)this + 20) = v74;
          goto LABEL_222;
        case 7u:
          *((_BYTE *)this + 104) |= 0x10u;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_197;
              v80 += 7;
              v77 = v83;
              v18 = v81++ > 8;
            }
            while (!v18);
LABEL_147:
            LODWORD(v82) = 0;
            goto LABEL_197;
          }
          v118 = 0;
          v119 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v120 = v77 + 1;
              v121 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)a2 + 1) = v120;
              v82 |= (unint64_t)(v121 & 0x7F) << v118;
              if (v121 < 0)
              {
                v118 += 7;
                v77 = v120;
                v18 = v119++ > 8;
                if (v18)
                  goto LABEL_147;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_197:
          *((_DWORD *)this + 24) = v82;
          goto LABEL_222;
        case 8u:
          *((_BYTE *)this + 104) |= 2u;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_200;
              v88 += 7;
              v85 = v91;
              v18 = v89++ > 8;
            }
            while (!v18);
LABEL_154:
            LODWORD(v90) = 0;
            goto LABEL_200;
          }
          v122 = 0;
          v123 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v124 = v85 + 1;
              v125 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v124;
              v90 |= (unint64_t)(v125 & 0x7F) << v122;
              if (v125 < 0)
              {
                v122 += 7;
                v85 = v124;
                v18 = v123++ > 8;
                if (v18)
                  goto LABEL_154;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_200:
          *((_DWORD *)this + 21) = v90;
          goto LABEL_222;
        case 9u:
          *((_BYTE *)this + 104) |= 0x20u;
          v93 = *((_QWORD *)a2 + 1);
          v94 = *((_QWORD *)a2 + 2);
          v95 = *(_QWORD *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)a2 + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_203;
              v96 += 7;
              v93 = v99;
              v18 = v97++ > 8;
            }
            while (!v18);
LABEL_161:
            LODWORD(v98) = 0;
            goto LABEL_203;
          }
          v126 = 0;
          v127 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v128 = v93 + 1;
              v129 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)a2 + 1) = v128;
              v98 |= (unint64_t)(v129 & 0x7F) << v126;
              if (v129 < 0)
              {
                v126 += 7;
                v93 = v128;
                v18 = v127++ > 8;
                if (v18)
                  goto LABEL_161;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_203:
          *((_DWORD *)this + 25) = v98;
          goto LABEL_222;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_222;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_100063B60()
{
  operator new();
}

void sub_100063C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::AccessoryProxSensorDrop::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  v3 = this;
  v4 = *(_BYTE *)(this + 104);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 92), 1u);
    v4 = *(_BYTE *)(v3 + 104);
  }
  if ((v4 & 4) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 2u);
  v5 = *(const PB::Base ***)(v3 + 56);
  v6 = *(const PB::Base ***)(v3 + 64);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7, 3u);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 4u);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 5u);
  }
  v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 6u);
    v14 = *(_BYTE *)(v3 + 104);
    if ((v14 & 0x10) == 0)
    {
LABEL_16:
      if ((v14 & 2) == 0)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else if ((*(_BYTE *)(v3 + 104) & 0x10) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 7u);
  v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 2) == 0)
  {
LABEL_17:
    if ((v14 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 9u);
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 8u);
  if ((*(_BYTE *)(v3 + 104) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 9u);
  return this;
}

BOOL CMMsl::AccessoryProxSensorDrop::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;

  if ((*(_BYTE *)(a1 + 104) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 104) & 8) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 104) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 104) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 104) & 4) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 104) & 4) != 0)
  {
    return 0;
  }
  result = sub_100063F68((uint64_t *)(a1 + 56), a2 + 56);
  if (!result)
    return result;
  v6 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 32);
  v8 = *(float **)(a1 + 40);
  v10 = *(float **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 40) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 104) & 1) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 104) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 104) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 104) & 0x10) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 104) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 104) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 104) & 2) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 104) & 2) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 104) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 104) & 0x20) == 0)
    return result;
  return (*(_BYTE *)(a2 + 104) & 0x20) != 0 && *(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100);
}

BOOL sub_100063F68(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::ClefMeasurement::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::AccessoryProxSensorDrop::hash_value(CMMsl::AccessoryProxSensorDrop *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  if ((*((_BYTE *)this + 104) & 8) != 0)
  {
    v2 = *((unsigned int *)this + 23);
    if ((*((_BYTE *)this + 104) & 4) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 104) & 4) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 22);
      goto LABEL_6;
    }
  }
  v3 = 0;
LABEL_6:
  v4 = sub_1000640C0((uint64_t)&v12, (uint64_t **)this + 7);
  v5 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v6 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  if ((*((_BYTE *)this + 104) & 1) != 0)
  {
    v7 = *((unsigned int *)this + 20);
    if ((*((_BYTE *)this + 104) & 0x10) != 0)
    {
LABEL_8:
      v8 = *((unsigned int *)this + 24);
      if ((*((_BYTE *)this + 104) & 2) != 0)
        goto LABEL_9;
LABEL_13:
      v9 = 0;
      if ((*((_BYTE *)this + 104) & 0x20) != 0)
        goto LABEL_10;
LABEL_14:
      v10 = 0;
      return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
    }
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 104) & 0x10) != 0)
      goto LABEL_8;
  }
  v8 = 0;
  if ((*((_BYTE *)this + 104) & 2) == 0)
    goto LABEL_13;
LABEL_9:
  v9 = *((unsigned int *)this + 21);
  if ((*((_BYTE *)this + 104) & 0x20) == 0)
    goto LABEL_14;
LABEL_10:
  v10 = *((unsigned int *)this + 25);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

uint64_t sub_1000640C0(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  char v9;
  int v11;
  BOOL v12;
  uint64_t v13;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  result = 0;
  do
  {
    v5 = *v2++;
    v6 = *(float *)(v5 + 8);
    v7 = *(float *)(v5 + 12);
    v8 = LODWORD(v6);
    v9 = *(_BYTE *)(v5 + 16);
    if (v6 == 0.0 || (v9 & 1) == 0)
      v8 = 0;
    v11 = v9 & 2;
    v12 = v7 == 0.0 || v11 == 0;
    v13 = LODWORD(v7);
    if (v12)
      v13 = 0;
    result ^= v8 ^ v13;
  }
  while (v2 != v3);
  return result;
}

uint64_t CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t this)
{
  *(_QWORD *)this = off_10034FA38;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FA38;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::AccessoryProxTempComp::~AccessoryProxTempComp(CMMsl::AccessoryProxTempComp *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t this, const CMMsl::AccessoryProxTempComp *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)this = off_10034FA38;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 44) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 44) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if (v2 < 0)
  {
    v6 = *((_BYTE *)a2 + 40);
    v3 |= 0x80u;
    *(_BYTE *)(this + 44) = v3;
    *(_BYTE *)(this + 40) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 24) = v8;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v9;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_18:
    v11 = *((_DWORD *)a2 + 8);
    *(_BYTE *)(this + 44) = v3 | 0x20;
    *(_DWORD *)(this + 32) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 44) = v3;
  *(_DWORD *)(this + 16) = v10;
  if ((*((_BYTE *)a2 + 44) & 0x20) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::AccessoryProxTempComp::operator=(uint64_t a1, const CMMsl::AccessoryProxTempComp *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  int v12;

  if ((const CMMsl::AccessoryProxTempComp *)a1 != a2)
  {
    CMMsl::AccessoryProxTempComp::AccessoryProxTempComp((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v11;
    v11 = v3;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryProxTempComp *a2, CMMsl::AccessoryProxTempComp *a3)
{
  int v3;
  double result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v8;
  v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  return result;
}

double CMMsl::AccessoryProxTempComp::AccessoryProxTempComp(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034FA38;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034FA38;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::AccessoryProxTempComp::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  int v16;

  if (a1 != a2)
  {
    v12[0] = off_10034FA38;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 40);
    v16 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v12[1] = v6;
    v7 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v5;
    v15 = v7;
    v8 = *(_OWORD *)(a2 + 16);
    v13 = *(_OWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 32) = v10;
    v14 = v9;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProxTempComp::formatText(CMMsl::AccessoryProxTempComp *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "conchaTemp", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "prescalar", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "pwrState", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "valid", *((_BYTE *)this + 40));
    if ((*((_BYTE *)this + 44) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "tragusTemp", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if (v5 < 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x40) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "wdtPeriod", *((_DWORD *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProxTempComp::readFrom(CMMsl::AccessoryProxTempComp *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_146;
            case 2u:
              *((_BYTE *)this + 44) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_120;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_119:
                    v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_119;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_120;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_120:
              *((_DWORD *)this + 5) = v25;
              goto LABEL_146;
            case 3u:
              *((_BYTE *)this + 44) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 40) = v28;
              goto LABEL_146;
            case 4u:
              *((_BYTE *)this + 44) |= 0x10u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_125;
                  }
                  v65 = v29++;
                  v66 = *(_BYTE *)(v30 + v65);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_124:
                    v2 = v65 + 1;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_124;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_125;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_125:
              *((_DWORD *)this + 7) = v33;
              goto LABEL_146;
            case 5u:
              *((_BYTE *)this + 44) |= 8u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_130;
                  }
                  v69 = v35++;
                  v70 = *(_BYTE *)(v36 + v69);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_129:
                    v2 = v69 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_129;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_130;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_130:
              *((_DWORD *)this + 6) = v39;
              goto LABEL_146;
            case 6u:
              *((_BYTE *)this + 44) |= 0x40u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_135;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_134:
                    v2 = v73 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_134;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_135;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_135:
              *((_DWORD *)this + 9) = v45;
              goto LABEL_146;
            case 7u:
              *((_BYTE *)this + 44) |= 2u;
              v47 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v48 = *(_QWORD *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_140;
                  }
                  v77 = v47++;
                  v78 = *(_BYTE *)(v48 + v77);
                  *((_QWORD *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_139:
                    v2 = v77 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v51) = 0;
                goto LABEL_139;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_140;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_140:
              *((_DWORD *)this + 4) = v51;
              goto LABEL_146;
            case 8u:
              *((_BYTE *)this + 44) |= 0x20u;
              v53 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v54 = *(_QWORD *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_144:
                    v2 = v81 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v57) = 0;
                goto LABEL_144;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)a2 + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_145;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_145:
              *((_DWORD *)this + 8) = v57;
LABEL_146:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_146;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProxTempComp::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 6u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 8u);
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 7u);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 8u);
  return this;
}

BOOL CMMsl::AccessoryProxTempComp::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(unsigned __int8 *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return v4;
}

uint64_t CMMsl::AccessoryProxTempComp::hash_value(CMMsl::AccessoryProxTempComp *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 5);
      if ((*((_BYTE *)this + 44) & 0x80) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 44) & 0x80) != 0)
  {
LABEL_4:
    v3 = *((unsigned __int8 *)this + 40);
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v3 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) != 0)
  {
LABEL_5:
    v4 = *((unsigned int *)this + 7);
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 8) != 0)
  {
LABEL_6:
    v5 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) != 0)
  {
LABEL_7:
    v6 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_8;
LABEL_18:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_9;
LABEL_19:
    v8 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_17:
  v6 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_18;
LABEL_8:
  v7 = *((int *)this + 4);
  if ((*((_BYTE *)this + 44) & 0x20) == 0)
    goto LABEL_19;
LABEL_9:
  v8 = *((int *)this + 8);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

double CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this)
{
  double result;

  *(_QWORD *)this = off_10034FA70;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_10034FA70;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

void CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig(CMMsl::AccessoryProximityConfig *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_10034FA70;
  v4 = *((_QWORD *)this + 5);
  v2 = (_QWORD *)((char *)this + 40);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  sub_1002395C4((void ***)this + 4, 0);
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
    sub_100011294((uint64_t)this + 24, v5);
  sub_1002395C4((void ***)this + 2, 0);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig(this);
  operator delete();
}

uint64_t CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(uint64_t this, const CMMsl::AccessoryProximityConfig *a2)
{
  *(_QWORD *)this = off_10034FA70;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_QWORD *)(this + 40) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 4))
    operator new();
  if (*((_QWORD *)a2 + 3))
    operator new();
  if (*((_QWORD *)a2 + 5))
    operator new();
  return this;
}

uint64_t CMMsl::AccessoryProximityConfig::operator=(uint64_t a1, const CMMsl::AccessoryProximityConfig *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((const CMMsl::AccessoryProximityConfig *)a1 != a2)
  {
    CMMsl::AccessoryProximityConfig::AccessoryProximityConfig((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::AccessoryProximityConfig *a2, CMMsl::AccessoryProximityConfig *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  return this;
}

uint64_t CMMsl::AccessoryProximityConfig::AccessoryProximityConfig(uint64_t a1, _QWORD *a2)
{
  void ***v4;
  uint64_t *v5;
  uint64_t *v6;
  void ***v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = off_10034FA70;
  v4 = (void ***)(a1 + 16);
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (uint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (uint64_t *)(a1 + 40);
  v7 = (void ***)(a1 + 32);
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = a2[1];
  a2[1] = 0;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (void **)a2[2];
  a2[2] = 0;
  sub_1002395C4(v4, v10);
  v11 = (void **)a2[4];
  a2[4] = 0;
  sub_1002395C4(v7, v11);
  v12 = a2[3];
  a2[3] = 0;
  v13 = *v5;
  *v5 = v12;
  if (v13)
    sub_100011294((uint64_t)v5, v13);
  v14 = a2[5];
  a2[5] = 0;
  v15 = *v6;
  *v6 = v14;
  if (v15)
    sub_100011294((uint64_t)v6, v15);
  return a1;
}

uint64_t CMMsl::AccessoryProximityConfig::operator=(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if ((_QWORD *)a1 != a2)
  {
    CMMsl::AccessoryProximityConfig::AccessoryProximityConfig((uint64_t)&v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    v10 = v5;
    CMMsl::AccessoryProximityConfig::~AccessoryProximityConfig((CMMsl::AccessoryProximityConfig *)&v7);
  }
  return a1;
}

uint64_t CMMsl::AccessoryProximityConfig::formatText(CMMsl::AccessoryProximityConfig *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "config");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format(a2, "oscl");
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format(a2, "osclString");
  if (*((_QWORD *)this + 4))
    PB::TextFormatter::format(a2, "pdtc");
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format(a2, "pdtcString");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryProximityConfig::readFrom(CMMsl::AccessoryProximityConfig *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v14 = 0;
        v15 = 0;
        v10 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v16 = v2 + 1;
          v17 = *(_BYTE *)(v7 + v2);
          *((_QWORD *)a2 + 1) = v16;
          v10 |= (unint64_t)(v17 & 0x7F) << v14;
          if ((v17 & 0x80) == 0)
            goto LABEL_20;
          v14 += 7;
          v2 = v16;
          if (v15++ >= 9)
          {
LABEL_19:
            v10 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v12 = *(_BYTE *)(v7 + v2);
          v10 |= (unint64_t)(v12 & 0x7F) << v8;
          if ((v12 & 0x80) == 0)
            break;
          v8 += 7;
          v2 = v11;
          if (v9++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v10 & 7) != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              operator new();
            case 2u:
              operator new();
            case 3u:
              operator new();
            case 4u:
              operator new();
            case 5u:
              operator new();
            default:
              result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryProximityConfig::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = v3[2];
  if (v5)
    this = PB::Writer::write(a2, v5, 2);
  v6 = v3[4];
  if (v6)
    this = PB::Writer::write(a2, v6, 3);
  v7 = v3[3];
  if (v7)
    this = PB::Writer::write(a2, v7, 4);
  v8 = v3[5];
  if (v8)
    return PB::Writer::write(a2, v8, 5);
  return this;
}

BOOL CMMsl::AccessoryProximityConfig::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v4 = a1[1];
  v5 = a2[1];
  if (v4)
  {
    if (!v5 || !CMMsl::AccessoryConfig::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = a2[2];
  if (a1[2])
  {
    if (!v6 || (PB::Data::operator==() & 1) == 0 && a1[2] | a2[2])
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  v7 = a2[4];
  if (a1[4])
  {
    if (!v7 || (PB::Data::operator==() & 1) == 0 && a1[4] | a2[4])
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = (unsigned __int8 *)a1[3];
  v9 = (unsigned __int8 *)a2[3];
  if (!v8)
  {
    if (!v9)
      goto LABEL_24;
    return 0;
  }
  if (!v9 || !sub_100050A84(v8, v9) && a1[3] | a2[3])
    return 0;
LABEL_24:
  v10 = (unsigned __int8 *)a1[5];
  if (v10)
  {
    v11 = (unsigned __int8 *)a2[5];
    if (!v11)
      return 0;
    if (sub_100050A84(v10, v11))
      return 1;
    if (a1[5])
      return 0;
  }
  return a2[5] == 0;
}

unint64_t CMMsl::AccessoryProximityConfig::hash_value(CMMsl::AccessoryProximityConfig *this)
{
  CMMsl::AccessoryConfig *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v13;
  char v14;

  v2 = (CMMsl::AccessoryConfig *)*((_QWORD *)this + 1);
  if (v2)
    v3 = CMMsl::AccessoryConfig::hash_value(v2);
  else
    v3 = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  if (v4)
    v5 = PBHashBytes(*v4, v4[1]);
  else
    v5 = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 4);
  if (v6)
    v7 = PBHashBytes(*v6, v6[1]);
  else
    v7 = 0;
  v8 = *((_QWORD *)this + 3);
  if (v8)
    v9 = sub_1000112DC((uint64_t)&v13, v8);
  else
    v9 = 0;
  v10 = *((_QWORD *)this + 5);
  if (v10)
    v11 = sub_1000112DC((uint64_t)&v14, v10);
  else
    v11 = 0;
  return v5 ^ v3 ^ v7 ^ v9 ^ v11;
}

uint64_t CMMsl::AccessoryProximityConfig::makeConfig(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t this)
{
  *(_QWORD *)this = off_10034FAA8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FAA8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::AccessorySleepStateConfidenceEpoch::~AccessorySleepStateConfidenceEpoch(CMMsl::AccessorySleepStateConfidenceEpoch *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t this, const CMMsl::AccessorySleepStateConfidenceEpoch *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)this = off_10034FAA8;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(this + 32) = v3;
    *(_BYTE *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_14:
    v9 = *((_BYTE *)a2 + 29);
    *(_BYTE *)(this + 32) = v3 | 0x20;
    *(_BYTE *)(this + 29) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v8;
  if ((*((_BYTE *)a2 + 32) & 0x20) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::operator=(uint64_t a1, const CMMsl::AccessorySleepStateConfidenceEpoch *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  _BYTE v7[8];
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;

  if ((const CMMsl::AccessorySleepStateConfidenceEpoch *)a1 != a2)
  {
    CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v12;
    v12 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    v10 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a1 + 29) = v13;
    v13 = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessorySleepStateConfidenceEpoch *a2, CMMsl::AccessorySleepStateConfidenceEpoch *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 29);
  *((_BYTE *)this + 29) = *((_BYTE *)a2 + 29);
  *((_BYTE *)a2 + 29) = v4;
  return result;
}

float CMMsl::AccessorySleepStateConfidenceEpoch::AccessorySleepStateConfidenceEpoch(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034FAA8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034FAA8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return result;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _QWORD v16[2];
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;
  int v22;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v8 = *(_DWORD *)(a2 + 24);
    v9 = *(_BYTE *)(a2 + 29);
    v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v3;
    v22 = v10;
    v11 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v16[0] = off_10034FAA8;
    v16[1] = v11;
    LOBYTE(v3) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v5;
    v20 = v3;
    v12 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v17 = v12;
    v13 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v7;
    v18 = v13;
    v14 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v19 = v14;
    LOBYTE(v14) = *(_BYTE *)(a1 + 29);
    *(_BYTE *)(a1 + 29) = v9;
    v21 = v14;
    PB::Base::~Base((PB::Base *)v16);
  }
  return a1;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::formatText(CMMsl::AccessorySleepStateConfidenceEpoch *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asleep", *((_BYTE *)this + 28));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageConfidence", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "initialized", *((_BYTE *)this + 29));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 1));
    if ((*((_BYTE *)this + 32) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "rawConfidence", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::readFrom(CMMsl::AccessorySleepStateConfidenceEpoch *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_82;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_81:
                v2 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_82;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_82:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_93;
            case 2u:
              *((_BYTE *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 28) = v28;
              goto LABEL_93;
            case 3u:
              *((_BYTE *)this + 32) |= 2u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_87;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_86;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_87;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *((_DWORD *)this + 4) = v33;
              goto LABEL_93;
            case 4u:
              *((_BYTE *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_93;
            case 5u:
              *((_BYTE *)this + 32) |= 8u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_92;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_91;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_92;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *((_DWORD *)this + 6) = v39;
LABEL_93:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *((_BYTE *)this + 32) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v42 = v41 != 0;
              }
              *((_BYTE *)this + 29) = v42;
              goto LABEL_93;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 29), 6u);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 29), 6u);
  return this;
}

BOOL CMMsl::AccessorySleepStateConfidenceEpoch::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 32) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29);
  return v2;
}

uint64_t CMMsl::AccessorySleepStateConfidenceEpoch::hash_value(CMMsl::AccessorySleepStateConfidenceEpoch *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 28);
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 4);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_13:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_8;
LABEL_14:
    v6 = 0;
    if ((*((_BYTE *)this + 32) & 0x20) != 0)
      goto LABEL_9;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_13;
LABEL_5:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_14;
LABEL_8:
  v6 = *((unsigned int *)this + 6);
  if ((*((_BYTE *)this + 32) & 0x20) == 0)
    goto LABEL_15;
LABEL_9:
  v7 = *((unsigned __int8 *)this + 29);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6 ^ v7;
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t this)
{
  *(_QWORD *)this = off_10034FAE0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FAE0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::AccessorySleepStateUpdate::~AccessorySleepStateUpdate(CMMsl::AccessorySleepStateUpdate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t this, const CMMsl::AccessorySleepStateUpdate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)this = off_10034FAE0;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = v3 | 8;
    *(_DWORD *)(this + 24) = v7;
    return this;
  }
  v6 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v6;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::AccessorySleepStateUpdate::operator=(uint64_t a1, const CMMsl::AccessorySleepStateUpdate *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if ((const CMMsl::AccessorySleepStateUpdate *)a1 != a2)
  {
    CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate((uint64_t)&v6, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v8;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AccessorySleepStateUpdate *a2, CMMsl::AccessorySleepStateUpdate *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return this;
}

uint64_t CMMsl::AccessorySleepStateUpdate::AccessorySleepStateUpdate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_10034FAE0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  *(_QWORD *)result = off_10034FAE0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::AccessorySleepStateUpdate::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _QWORD v8[2];
  __int128 v9;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 28) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = off_10034FAE0;
    v8[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::AccessorySleepStateUpdate::formatText(CMMsl::AccessorySleepStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "activity", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 1));
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidenceLevel", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessorySleepStateUpdate::readFrom(CMMsl::AccessorySleepStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)a2 + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 28) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_87:
                v3 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 28) |= 2u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 4) = v31;
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 28) |= 4u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v37;
              goto LABEL_104;
            case 4u:
              *((_BYTE *)this + 28) |= 8u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 6) = v43;
LABEL_104:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessorySleepStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  }
LABEL_8:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  return this;
}

BOOL CMMsl::AccessorySleepStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::AccessorySleepStateUpdate::hash_value(CMMsl::AccessorySleepStateUpdate *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 4);
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_4;
LABEL_8:
      v3 = 0;
      if ((*((_BYTE *)this + 28) & 8) != 0)
        goto LABEL_5;
LABEL_9:
      v4 = 0;
      return v2 ^ v1 ^ v3 ^ v4;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_8;
LABEL_4:
  v3 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v4;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t this)
{
  *(_QWORD *)this = off_10034FB18;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FB18;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug(CMMsl::AccessoryStepDetectorDebug *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_10034FB18;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug(this);
  operator delete();
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t this, const CMMsl::AccessoryStepDetectorDebug *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_10034FB18;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_BYTE *)a2 + 60);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 4;
    *(_BYTE *)(this + 60) = 4;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_BYTE *)a2 + 60);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 60) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x10u;
    *(_BYTE *)(this + 60) = v3;
    *(_DWORD *)(this + 52) = v5;
    v2 = *((_BYTE *)a2 + 60);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v7 = *((_DWORD *)a2 + 12);
    v3 |= 8u;
    *(_BYTE *)(this + 60) = v3;
    *(_DWORD *)(this + 48) = v7;
    v2 = *((_BYTE *)a2 + 60);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v8 = *((_QWORD *)a2 + 3);
  v3 |= 2u;
  *(_BYTE *)(this + 60) = v3;
  *(_QWORD *)(this + 24) = v8;
  v2 = *((_BYTE *)a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_18:
  v9 = *((_QWORD *)a2 + 2);
  v3 |= 1u;
  *(_BYTE *)(this + 60) = v3;
  *(_QWORD *)(this + 16) = v9;
  if ((*((_BYTE *)a2 + 60) & 0x20) != 0)
  {
LABEL_10:
    v6 = *((_BYTE *)a2 + 56);
    *(_BYTE *)(this + 60) = v3 | 0x20;
    *(_BYTE *)(this + 56) = v6;
  }
LABEL_11:
  if (*((_QWORD *)a2 + 5))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::operator=(uint64_t a1, const CMMsl::AccessoryStepDetectorDebug *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;

  if ((const CMMsl::AccessoryStepDetectorDebug *)a1 != a2)
  {
    CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v13;
    v13 = v4;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v15;
    v15 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v12;
    v12 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v16;
    v16 = v3;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    v11 = v8;
    CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryStepDetectorDebug *a2, CMMsl::AccessoryStepDetectorDebug *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v6) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v6;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  return result;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_10034FB18;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;

  if (a1 != a2)
  {
    CMMsl::AccessoryStepDetectorDebug::AccessoryStepDetectorDebug((uint64_t)&v10, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    v17 = v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v13;
    v13 = v4;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v15;
    v15 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v12;
    v12 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v16;
    v16 = v3;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    v11 = v8;
    CMMsl::AccessoryStepDetectorDebug::~AccessoryStepDetectorDebug((CMMsl::AccessoryStepDetectorDebug *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::formatText(CMMsl::AccessoryStepDetectorDebug *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 60) & 0x20) != 0)
    PB::TextFormatter::format(a2, "detectedSteps", *((_BYTE *)this + 56));
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "firstStepFeatures");
  v6 = *((_BYTE *)this + 60);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "fsmEndState", *((_DWORD *)this + 12));
    v6 = *((_BYTE *)this + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)this + 60) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "fsmStartState", *((_DWORD *)this + 13));
  v6 = *((_BYTE *)this + 60);
  if ((v6 & 1) == 0)
  {
LABEL_8:
    if ((v6 & 2) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "impulseEndTime", *((double *)this + 2));
  v6 = *((_BYTE *)this + 60);
  if ((v6 & 2) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "impulseStartTime", *((double *)this + 3));
  if ((*((_BYTE *)this + 60) & 4) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "imuTimestamp", *((double *)this + 4));
LABEL_11:
  v7 = *((_QWORD *)this + 5);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "stepLikelihoodFeatures");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AccessoryStepDetectorDebug::readFrom(CMMsl::AccessoryStepDetectorDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 60) |= 4u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_46;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_68;
        case 2u:
          *((_BYTE *)this + 60) |= 0x10u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_72;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_57:
            LODWORD(v27) = 0;
            goto LABEL_72;
          }
          v44 = 0;
          v45 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v46 = v22 + 1;
              v47 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v46;
              v27 |= (unint64_t)(v47 & 0x7F) << v44;
              if (v47 < 0)
              {
                v44 += 7;
                v22 = v46;
                v14 = v45++ > 8;
                if (v14)
                  goto LABEL_57;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_72:
          *((_DWORD *)this + 13) = v27;
          goto LABEL_77;
        case 3u:
          *((_BYTE *)this + 60) |= 8u;
          v30 = *((_QWORD *)a2 + 1);
          v31 = *((_QWORD *)a2 + 2);
          v32 = *(_QWORD *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)a2 + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_76;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_64:
            LODWORD(v35) = 0;
            goto LABEL_76;
          }
          v48 = 0;
          v49 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)a2 + 1);
          break;
        case 4u:
          *((_BYTE *)this + 60) |= 2u;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_46;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_68;
        case 5u:
          *((_BYTE *)this + 60) |= 1u;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v39);
LABEL_68:
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
LABEL_46:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_77;
        case 6u:
          *((_BYTE *)this + 60) |= 0x20u;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 >= *((_QWORD *)a2 + 2))
          {
            v43 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v41 = v40 + 1;
            v42 = *(unsigned __int8 *)(*(_QWORD *)a2 + v40);
            *((_QWORD *)a2 + 1) = v41;
            v43 = v42 != 0;
          }
          *((_BYTE *)this + 56) = v43;
          goto LABEL_77;
        case 7u:
          operator new();
        case 8u:
          operator new();
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_77;
      }
      while (1)
      {
        if (v31 == v30)
        {
          LODWORD(v35) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_76;
        }
        v50 = v30 + 1;
        v51 = *(_BYTE *)(v32 + v30);
        *((_QWORD *)a2 + 1) = v50;
        v35 |= (unint64_t)(v51 & 0x7F) << v48;
        if ((v51 & 0x80) == 0)
          break;
        v48 += 7;
        v30 = v50;
        v14 = v49++ > 8;
        if (v14)
          goto LABEL_64;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v35) = 0;
LABEL_76:
      *((_DWORD *)this + 12) = v35;
LABEL_77:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::StepLikelihoodFeatures::StepLikelihoodFeatures(uint64_t this)
{
  *(_QWORD *)this = off_100354AF0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354AF0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t this)
{
  *(_QWORD *)this = off_100351088;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351088;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(_BYTE *)(this + 60);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(this + 60) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 2u);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 3u);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 5u);
  if ((*(_BYTE *)(v3 + 60) & 0x20) != 0)
LABEL_7:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 6u);
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 40);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 7u);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(a2, v6, 8u);
  return this;
}

BOOL CMMsl::AccessoryStepDetectorDebug::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 4) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 0x10) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 2) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 0x20) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::StepLikelihoodFeatures::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a2 + 8);
  result = v6 == 0;
  if (!*(_QWORD *)(a1 + 8))
    return result;
  return v6 && CMMsl::FirstStepFeatures::operator==(*(_QWORD *)(a1 + 8), v6);
}

BOOL CMMsl::StepLikelihoodFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 96);
  v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v4;
}

BOOL CMMsl::FirstStepFeatures::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x10) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v2;
}

unint64_t CMMsl::AccessoryStepDetectorDebug::hash_value(CMMsl::AccessoryStepDetectorDebug *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CMMsl::StepLikelihoodFeatures *v8;
  uint64_t v9;
  unint64_t v10;

  if ((*((_BYTE *)this + 60) & 4) != 0)
  {
    if (*((double *)this + 4) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 4);
    if ((*((_BYTE *)this + 60) & 0x10) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 13);
      if ((*((_BYTE *)this + 60) & 8) != 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 60) & 0x10) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 60) & 8) != 0)
  {
LABEL_4:
    v4 = *((unsigned int *)this + 12);
    if ((*((_BYTE *)this + 60) & 2) != 0)
      goto LABEL_5;
LABEL_20:
    v5 = 0;
    if ((*((_BYTE *)this + 60) & 1) != 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_19:
  v4 = 0;
  if ((*((_BYTE *)this + 60) & 2) == 0)
    goto LABEL_20;
LABEL_5:
  if (*((double *)this + 3) == 0.0)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 60) & 1) != 0)
  {
LABEL_9:
    if (*((double *)this + 2) == 0.0)
      v6 = 0;
    else
      v6 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 60) & 0x20) != 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = 0;
  if ((*((_BYTE *)this + 60) & 0x20) != 0)
  {
LABEL_13:
    v7 = *((unsigned __int8 *)this + 56);
    goto LABEL_23;
  }
LABEL_22:
  v7 = 0;
LABEL_23:
  v8 = (CMMsl::StepLikelihoodFeatures *)*((_QWORD *)this + 5);
  if (v8)
    v9 = CMMsl::StepLikelihoodFeatures::hash_value(v8);
  else
    v9 = 0;
  v10 = *((_QWORD *)this + 1);
  if (v10)
    v10 = CMMsl::FirstStepFeatures::hash_value((CMMsl::FirstStepFeatures *)v10);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::makeStepLikelihoodFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 40))
    operator new();
  return this;
}

uint64_t CMMsl::AccessoryStepDetectorDebug::makeFirstStepFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::AccessoryWake::AccessoryWake(uint64_t this)
{
  *(_QWORD *)this = off_10034FB50;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FB50;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::AccessoryWake::~AccessoryWake(CMMsl::AccessoryWake *this)
{
  void *v2;

  *(_QWORD *)this = off_10034FB50;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryWake::~AccessoryWake(this);
  operator delete();
}

CMMsl::AccessoryWake *CMMsl::AccessoryWake::AccessoryWake(CMMsl::AccessoryWake *this, const CMMsl::AccessoryWake *a2)
{
  char *v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  int v8;
  int v10;

  *(_QWORD *)this = off_10034FB50;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  v4 = *((_BYTE *)a2 + 52);
  if ((v4 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 11);
    v5 = 4;
    *((_BYTE *)this + 52) = 4;
    *((_DWORD *)this + 11) = v6;
    v4 = *((_BYTE *)a2 + 52);
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((*((_BYTE *)a2 + 52) & 1) != 0)
  {
LABEL_5:
    v7 = *((_QWORD *)a2 + 4);
    v5 |= 1u;
    *((_BYTE *)this + 52) = v5;
    *((_QWORD *)this + 4) = v7;
    v4 = *((_BYTE *)a2 + 52);
  }
LABEL_6:
  if ((v4 & 8) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)a2 + 12);
  v5 |= 8u;
  *((_BYTE *)this + 52) = v5;
  *((_DWORD *)this + 12) = v10;
  if ((*((_BYTE *)a2 + 52) & 2) != 0)
  {
LABEL_8:
    v8 = *((_DWORD *)a2 + 10);
    *((_BYTE *)this + 52) = v5 | 2;
    *((_DWORD *)this + 10) = v8;
  }
LABEL_9:
  if (this != a2)
    sub_100020CE4(v3, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  return this;
}

uint64_t CMMsl::AccessoryWake::operator=(uint64_t a1, const CMMsl::AccessoryWake *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v8[8];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  if ((const CMMsl::AccessoryWake *)a1 != a2)
  {
    CMMsl::AccessoryWake::AccessoryWake((CMMsl::AccessoryWake *)v8, a2);
    v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v6;
    CMMsl::AccessoryWake::~AccessoryWake((CMMsl::AccessoryWake *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AccessoryWake *a2, CMMsl::AccessoryWake *a3)
{
  int v3;
  int v4;
  double result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  return result;
}

uint64_t CMMsl::AccessoryWake::AccessoryWake(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_10034FB50;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(_QWORD *)a1 = off_10034FB50;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::AccessoryWake::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(CMMsl::AccessoryWake *__hidden);
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  if (a1 != a2)
  {
    v12 = off_10034FB50;
    v3 = *(_QWORD *)(a2 + 32);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 52) = 0;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v3;
    v15 = v7;
    v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v6;
    v16 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v14 = v10;
    CMMsl::AccessoryWake::~AccessoryWake((CMMsl::AccessoryWake *)&v12);
  }
  return a1;
}

uint64_t CMMsl::AccessoryWake::formatText(CMMsl::AccessoryWake *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  int *v6;
  int *v7;
  int v8;
  char v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 52);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "hostState", *((_DWORD *)this + 10));
    v5 = *((_BYTE *)this + 52);
  }
  if ((v5 & 4) != 0)
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 11));
  v6 = (int *)*((_QWORD *)this + 1);
  v7 = (int *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "s7q8", v8);
  }
  v9 = *((_BYTE *)this + 52);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sensorState", *((_DWORD *)this + 12));
    v9 = *((_BYTE *)this + 52);
  }
  if ((v9 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryWake::readFrom(CMMsl::AccessoryWake *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char *v84;
  _DWORD *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  unint64_t v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  _BYTE v107[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (_QWORD *)((char *)this + 24);
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v60 = v12++ > 8;
        if (v60)
          goto LABEL_20;
      }
LABEL_21:
      v21 = v13 & 7;
      if (v21 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 52) |= 4u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_133;
              v25 += 7;
              v22 = v28;
              v60 = v26++ > 8;
            }
            while (!v60);
LABEL_100:
            LODWORD(v27) = 0;
            goto LABEL_133;
          }
          v71 = 0;
          v72 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v73 = v22 + 1;
              v74 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v73;
              v27 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                v22 = v73;
                v60 = v72++ > 8;
                if (v60)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_133:
          *((_DWORD *)this + 11) = v27;
          goto LABEL_166;
        case 2u:
          *((_BYTE *)this + 52) |= 1u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v30);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_166;
        case 3u:
          *((_BYTE *)this + 52) |= 8u;
          v31 = *((_QWORD *)a2 + 1);
          v32 = *((_QWORD *)a2 + 2);
          v33 = *(_QWORD *)a2;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = v31 + 1;
              *((_QWORD *)a2 + 1) = v31 + 1;
              v38 = *(_BYTE *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0)
                goto LABEL_136;
              v34 += 7;
              v31 = v37;
              v60 = v35++ > 8;
            }
            while (!v60);
LABEL_107:
            LODWORD(v36) = 0;
            goto LABEL_136;
          }
          v75 = 0;
          v76 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v77 = v31 + 1;
              v78 = *(_BYTE *)(v33 + v31);
              *((_QWORD *)a2 + 1) = v77;
              v36 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                v31 = v77;
                v60 = v76++ > 8;
                if (v60)
                  goto LABEL_107;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v36) = 0;
            }
            break;
          }
LABEL_136:
          *((_DWORD *)this + 12) = v36;
          goto LABEL_166;
        case 4u:
          *((_BYTE *)this + 52) |= 2u;
          v39 = *((_QWORD *)a2 + 1);
          v40 = *((_QWORD *)a2 + 2);
          v41 = *(_QWORD *)a2;
          if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
          {
            v42 = 0;
            v43 = 0;
            v44 = 0;
            do
            {
              v45 = v39 + 1;
              *((_QWORD *)a2 + 1) = v39 + 1;
              v46 = *(_BYTE *)(v41 + v39);
              v44 |= (unint64_t)(v46 & 0x7F) << v42;
              if ((v46 & 0x80) == 0)
                goto LABEL_139;
              v42 += 7;
              v39 = v45;
              v60 = v43++ > 8;
            }
            while (!v60);
LABEL_114:
            LODWORD(v44) = 0;
            goto LABEL_139;
          }
          v79 = 0;
          v80 = 0;
          v44 = 0;
          if (v40 <= v39)
            v40 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v40 == v39)
            {
              LODWORD(v44) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v81 = v39 + 1;
              v82 = *(_BYTE *)(v41 + v39);
              *((_QWORD *)a2 + 1) = v81;
              v44 |= (unint64_t)(v82 & 0x7F) << v79;
              if (v82 < 0)
              {
                v79 += 7;
                v39 = v81;
                v60 = v80++ > 8;
                if (v60)
                  goto LABEL_114;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v44) = 0;
            }
            break;
          }
LABEL_139:
          *((_DWORD *)this + 10) = v44;
          goto LABEL_166;
        case 5u:
          if (v21 == 2)
          {
            if ((PB::Reader::placeMark(a2, v107) & 1) != 0)
              return 0;
            if (*((_QWORD *)a2 + 1) < *((_QWORD *)a2 + 2) && !*((_BYTE *)a2 + 24))
            {
              v47 = (char *)*((_QWORD *)this + 2);
              do
              {
                if ((unint64_t)v47 >= *v9)
                {
                  v48 = (char *)*v8;
                  v49 = (v47 - (_BYTE *)*v8) >> 2;
                  v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 62)
                    goto LABEL_176;
                  v51 = *v9 - (_QWORD)v48;
                  if (v51 >> 1 > v50)
                    v50 = v51 >> 1;
                  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                    v52 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v52 = v50;
                  if (v52)
                  {
                    v53 = (char *)sub_100020E2C((uint64_t)v9, v52);
                    v48 = (char *)*((_QWORD *)this + 1);
                    v47 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v53 = 0;
                  }
                  v54 = &v53[4 * v49];
                  *(_DWORD *)v54 = 0;
                  v55 = v54 + 4;
                  while (v47 != v48)
                  {
                    v56 = *((_DWORD *)v47 - 1);
                    v47 -= 4;
                    *((_DWORD *)v54 - 1) = v56;
                    v54 -= 4;
                  }
                  *((_QWORD *)this + 1) = v54;
                  *((_QWORD *)this + 2) = v55;
                  *((_QWORD *)this + 3) = &v53[4 * v52];
                  if (v48)
                    operator delete(v48);
                  v47 = v55;
                }
                else
                {
                  *(_DWORD *)v47 = 0;
                  v47 += 4;
                }
                *((_QWORD *)this + 2) = v47;
                v58 = *((_QWORD *)a2 + 1);
                v57 = *((_QWORD *)a2 + 2);
                v59 = *(_QWORD *)a2;
                v60 = v58 > 0xFFFFFFFFFFFFFFF5 || v58 + 10 > v57;
                if (!v60)
                {
                  v66 = 0;
                  v67 = 0;
                  v68 = 0;
                  while (1)
                  {
                    v69 = v58 + 1;
                    *((_QWORD *)a2 + 1) = v58 + 1;
                    v70 = *(_BYTE *)(v59 + v58);
                    v68 |= (unint64_t)(v70 & 0x7F) << v66;
                    if ((v70 & 0x80) == 0)
                      goto LABEL_91;
                    v66 += 7;
                    v58 = v69;
                    v60 = v67++ > 8;
                    if (v60)
                    {
                      LODWORD(v68) = 0;
                      goto LABEL_91;
                    }
                  }
                }
                v61 = 0;
                v62 = 0;
                v68 = 0;
                if (v57 <= v58)
                  v63 = *((_QWORD *)a2 + 1);
                else
                  v63 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v63 == v58)
                  {
                    *((_BYTE *)a2 + 24) = 1;
                    *((_DWORD *)v47 - 1) = 0;
                    goto LABEL_127;
                  }
                  v64 = v58++;
                  v65 = *(_BYTE *)(v59 + v64);
                  *((_QWORD *)a2 + 1) = v58;
                  v68 |= (unint64_t)(v65 & 0x7F) << v61;
                  if ((v65 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v60 = v62++ > 8;
                  if (v60)
                  {
                    LODWORD(v68) = 0;
                    goto LABEL_90;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v68) = 0;
LABEL_90:
                v69 = v64 + 1;
LABEL_91:
                *((_DWORD *)v47 - 1) = v68;
              }
              while (v69 < v57 && !*((_BYTE *)a2 + 24));
            }
LABEL_127:
            PB::Reader::recallMark(a2, v107);
          }
          else
          {
            v84 = (char *)*((_QWORD *)this + 2);
            v83 = *((_QWORD *)this + 3);
            if ((unint64_t)v84 >= v83)
            {
              v86 = (char *)*v8;
              v87 = (v84 - (_BYTE *)*v8) >> 2;
              v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62)
LABEL_176:
                sub_10000D5F8();
              v89 = v83 - (_QWORD)v86;
              if (v89 >> 1 > v88)
                v88 = v89 >> 1;
              if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                v90 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v90 = v88;
              if (v90)
              {
                v91 = (char *)sub_100020E2C((uint64_t)v9, v90);
                v86 = (char *)*((_QWORD *)this + 1);
                v84 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v91 = 0;
              }
              v92 = &v91[4 * v87];
              *(_DWORD *)v92 = 0;
              v85 = v92 + 4;
              while (v84 != v86)
              {
                v93 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v92 - 1) = v93;
                v92 -= 4;
              }
              *((_QWORD *)this + 1) = v92;
              *((_QWORD *)this + 2) = v85;
              *((_QWORD *)this + 3) = &v91[4 * v90];
              if (v86)
                operator delete(v86);
            }
            else
            {
              *(_DWORD *)v84 = 0;
              v85 = v84 + 4;
            }
            *((_QWORD *)this + 2) = v85;
            v94 = *((_QWORD *)a2 + 1);
            v95 = *((_QWORD *)a2 + 2);
            v96 = *(_QWORD *)a2;
            v97 = 0;
            v98 = 0;
            if (v94 > 0xFFFFFFFFFFFFFFF5 || v94 + 10 > v95)
            {
              v102 = 0;
              if (v95 <= v94)
                v95 = *((_QWORD *)a2 + 1);
              while (1)
              {
                if (v95 == v94)
                {
                  LODWORD(v102) = 0;
                  *((_BYTE *)a2 + 24) = 1;
                  goto LABEL_165;
                }
                v100 = v94 + 1;
                v101 = *(_BYTE *)(v96 + v94);
                *((_QWORD *)a2 + 1) = v100;
                v102 |= (unint64_t)(v101 & 0x7F) << v97;
                if ((v101 & 0x80) == 0)
                  break;
                v97 += 7;
                v94 = v100;
                v60 = v98++ > 8;
                if (v60)
                {
LABEL_161:
                  LODWORD(v102) = 0;
                  goto LABEL_165;
                }
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v102) = 0;
            }
            else
            {
              v102 = 0;
              while (1)
              {
                v103 = v94 + 1;
                *((_QWORD *)a2 + 1) = v94 + 1;
                v104 = *(_BYTE *)(v96 + v94);
                v102 |= (unint64_t)(v104 & 0x7F) << v97;
                if ((v104 & 0x80) == 0)
                  break;
                v97 += 7;
                v94 = v103;
                v60 = v98++ > 8;
                if (v60)
                  goto LABEL_161;
              }
            }
LABEL_165:
            *(v85 - 1) = v102;
          }
LABEL_166:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v21, 0) & 1) == 0)
            return 0;
          goto LABEL_166;
      }
    }
    v16 = 0;
    v17 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryWake::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  int *v5;
  int *v6;
  int v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 52);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 44), 1u);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_12:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 3u);
      if ((*(_BYTE *)(v3 + 52) & 2) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(this + 52) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 2u);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) != 0)
    goto LABEL_12;
LABEL_4:
  if ((v4 & 2) != 0)
LABEL_5:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
LABEL_6:
  v6 = *(int **)(v3 + 8);
  v5 = *(int **)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::writeVarInt(a2, v7, 5u);
  }
  return this;
}

BOOL CMMsl::AccessoryWake::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
LABEL_6:
    if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 52) & 8) != 0)
    {
      if ((*(_BYTE *)(a2 + 52) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 52) & 8) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 52) & 2) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 52) & 2) != 0)
    {
      return 0;
    }
    return sub_1000615E4(a1 + 8, a2 + 8);
  }
  if ((*(_BYTE *)(a2 + 52) & 4) == 0)
    goto LABEL_6;
  return 0;
}

uint64_t CMMsl::AccessoryWake::hash_value(CMMsl::AccessoryWake *this)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 52) & 4) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 52) & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v2 = 0.0;
    if ((*((_BYTE *)this + 52) & 8) != 0)
      goto LABEL_6;
LABEL_10:
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) != 0)
      goto LABEL_7;
LABEL_11:
    v4 = 0;
    return *(_QWORD *)&v2 ^ v1 ^ v3 ^ v4 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  }
  v1 = *((unsigned int *)this + 11);
  if ((*((_BYTE *)this + 52) & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 52) & 8) == 0)
    goto LABEL_10;
LABEL_6:
  v3 = *((unsigned int *)this + 12);
  if ((*((_BYTE *)this + 52) & 2) == 0)
    goto LABEL_11;
LABEL_7:
  v4 = *((unsigned int *)this + 10);
  return *(_QWORD *)&v2 ^ v1 ^ v3 ^ v4 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
}

double CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this)
{
  double result;

  *(_QWORD *)this = off_10034FB88;
  *((_DWORD *)this + 48) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_10034FB88;
  *((_DWORD *)this + 48) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

void CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = off_10034FB88;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug(this);
  operator delete();
}

CMMsl::AccessoryWakeDebug *CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(CMMsl::AccessoryWakeDebug *this, const CMMsl::AccessoryWakeDebug *a2)
{
  char *v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = off_10034FB88;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 48) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if ((*((_WORD *)a2 + 96) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 19);
    *((_WORD *)this + 96) = 1;
    *((_QWORD *)this + 19) = v5;
  }
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x80) != 0)
  {
    v9 = *((_DWORD *)a2 + 46);
    *((_WORD *)this + 96) |= 0x80u;
    *((_DWORD *)this + 46) = v9;
    v6 = *((_WORD *)a2 + 96);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v10 = *((_DWORD *)a2 + 45);
  *((_WORD *)this + 96) |= 0x40u;
  *((_DWORD *)this + 45) = v10;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  v11 = *((_DWORD *)a2 + 47);
  *((_WORD *)this + 96) |= 0x100u;
  *((_DWORD *)this + 47) = v11;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_9:
    if ((v6 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v12 = *((_DWORD *)a2 + 41);
  *((_WORD *)this + 96) |= 4u;
  *((_DWORD *)this + 41) = v12;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_10:
    if ((v6 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v13 = *((_DWORD *)a2 + 42);
  *((_WORD *)this + 96) |= 8u;
  *((_DWORD *)this + 42) = v13;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_11:
    if ((v6 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v14 = *((_DWORD *)a2 + 44);
  *((_WORD *)this + 96) |= 0x20u;
  *((_DWORD *)this + 44) = v14;
  v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_12:
    if ((v6 & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_23:
  v15 = *((_DWORD *)a2 + 43);
  *((_WORD *)this + 96) |= 0x10u;
  *((_DWORD *)this + 43) = v15;
  if ((*((_WORD *)a2 + 96) & 2) != 0)
  {
LABEL_13:
    v7 = *((_DWORD *)a2 + 40);
    *((_WORD *)this + 96) |= 2u;
    *((_DWORD *)this + 40) = v7;
  }
LABEL_14:
  if (this != a2)
  {
    sub_100020CE4((char *)this + 104, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
    sub_100020CE4((char *)this + 128, *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::AccessoryWakeDebug::operator=(CMMsl *a1, const CMMsl::AccessoryWakeDebug *a2)
{
  CMMsl::AccessoryWakeDebug *v3;
  _BYTE v5[200];

  if (a1 != a2)
  {
    CMMsl::AccessoryWakeDebug::AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryWakeDebug *)v5, v3);
    CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AccessoryWakeDebug *a2, CMMsl::AccessoryWakeDebug *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v11;
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  LODWORD(v4) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v4;
  LODWORD(v16) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v16;
  LODWORD(v16) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v16;
  LODWORD(v4) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v4;
  LODWORD(v4) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v4;
  LODWORD(v16) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v16;
  LODWORD(v4) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v4;
  result = *((float *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((float *)a2 + 40) = result;
  v18 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v18;
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v19;
  v20 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v20;
  v21 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v21;
  v22 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v22;
  v23 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v23;
  return result;
}

uint64_t CMMsl::AccessoryWakeDebug::AccessoryWakeDebug(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_10034FB88;
  v4 = a1 + 32;
  v5 = a1 + 80;
  v6 = a1 + 128;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v7 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v5, (__n128 *)(a2 + 80));
  sub_100239458(v8, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  sub_100239458(v7, (__n128 *)(a2 + 104));
  sub_100239458(v6, (__n128 *)(a2 + 128));
  return a1;
}

CMMsl *CMMsl::AccessoryWakeDebug::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AccessoryWakeDebug *v3;
  _BYTE v5[200];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AccessoryWakeDebug::AccessoryWakeDebug((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AccessoryWakeDebug *)v5, v3);
    CMMsl::AccessoryWakeDebug::~AccessoryWakeDebug((CMMsl::AccessoryWakeDebug *)v5);
  }
  return a1;
}

uint64_t CMMsl::AccessoryWakeDebug::formatText(CMMsl::AccessoryWakeDebug *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;
  float *v15;
  float *v16;
  float v17;
  __int16 v18;
  float *v19;
  float *v20;
  float v21;
  __int16 v22;
  float *v23;
  float *v24;
  float v25;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accelDecimated", v7);
  }
  if ((*((_WORD *)this + 96) & 2) != 0)
    PB::TextFormatter::format(a2, "accelFrontVariance", *((float *)this + 40));
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "accelMean", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "accelNormAutocorr", v13);
  }
  v14 = *((_WORD *)this + 96);
  if ((v14 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "accelNormMean", *((float *)this + 41));
    v14 = *((_WORD *)this + 96);
  }
  if ((v14 & 8) != 0)
    PB::TextFormatter::format(a2, "accelNormVariance", *((float *)this + 42));
  v15 = (float *)*((_QWORD *)this + 10);
  v16 = (float *)*((_QWORD *)this + 11);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "accelVariance", v17);
  }
  v18 = *((_WORD *)this + 96);
  if ((v18 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "currentAngleDelta", *((float *)this + 43));
    v18 = *((_WORD *)this + 96);
    if ((v18 & 0x20) == 0)
    {
LABEL_17:
      if ((v18 & 0x40) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(a2, "currentMotionState", *((_DWORD *)this + 44));
  if ((*((_WORD *)this + 96) & 0x40) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "lagAtMaxAutocorr", *((_DWORD *)this + 45));
LABEL_19:
  v19 = (float *)*((_QWORD *)this + 13);
  v20 = (float *)*((_QWORD *)this + 14);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(a2, "lastBaseline", v21);
  }
  v22 = *((_WORD *)this + 96);
  if ((v22 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "maxAutocorr", *((float *)this + 46));
    v22 = *((_WORD *)this + 96);
  }
  if ((v22 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  v23 = (float *)*((_QWORD *)this + 16);
  v24 = (float *)*((_QWORD *)this + 17);
  while (v23 != v24)
  {
    v25 = *v23++;
    PB::TextFormatter::format(a2, "walkingBaseline", v25);
  }
  if ((*((_WORD *)this + 96) & 0x100) != 0)
    PB::TextFormatter::format(a2, "widthAtMaxAutocorr", *((_DWORD *)this + 47));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AccessoryWakeDebug::readFrom(CMMsl::AccessoryWakeDebug *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  _DWORD *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  _DWORD *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  _DWORD *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  char *v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  int v201;
  char *v202;
  int v203;
  char *v204;
  int v205;
  char *v206;
  int v207;
  char *v208;
  int v209;
  char *v210;
  int v211;
  unint64_t v212;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  void **v221;
  void **v222;
  void **v223;
  _BYTE v224[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v220 = (char *)this + 144;
    v222 = (void **)((char *)this + 104);
    v223 = (void **)((char *)this + 128);
    v221 = (void **)((char *)this + 56);
    v218 = (char *)this + 72;
    v219 = (char *)this + 120;
    v8 = (void **)((char *)this + 80);
    v9 = (void **)((char *)this + 32);
    v216 = (char *)this + 48;
    v217 = (char *)this + 96;
    v10 = (void **)((char *)this + 8);
    v215 = (char *)this + 24;
    while (1)
    {
      v11 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v14 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          *((_WORD *)this + 96) |= 1u;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_347;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v24);
          v25 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_350;
        case 2u:
          if (v23 != 2)
          {
            v140 = (char *)*((_QWORD *)this + 2);
            v139 = *((_QWORD *)this + 3);
            if ((unint64_t)v140 >= v139)
            {
              v164 = (char *)*v10;
              v165 = (v140 - (_BYTE *)*v10) >> 2;
              v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62)
LABEL_366:
                sub_10000D5F8();
              v167 = v139 - (_QWORD)v164;
              if (v167 >> 1 > v166)
                v166 = v167 >> 1;
              if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
                v168 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v168 = v166;
              if (v168)
              {
                v169 = (char *)sub_100020E2C((uint64_t)v215, v168);
                v164 = (char *)*((_QWORD *)this + 1);
                v140 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v169 = 0;
              }
              v200 = &v169[4 * v165];
              *(_DWORD *)v200 = 0;
              v141 = v200 + 4;
              while (v140 != v164)
              {
                v201 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *((_DWORD *)v200 - 1) = v201;
                v200 -= 4;
              }
              *((_QWORD *)this + 1) = v200;
              *((_QWORD *)this + 2) = v141;
              *((_QWORD *)this + 3) = &v169[4 * v168];
              if (v164)
                operator delete(v164);
            }
            else
            {
              *(_DWORD *)v140 = 0;
              v141 = v140 + 4;
            }
            *((_QWORD *)this + 2) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(a2, v224) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          while (v26 < v27 && !*((_BYTE *)a2 + 24))
          {
            v29 = (char *)*((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 3);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_366;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_100020E2C((uint64_t)v215, v35);
                v31 = (char *)*((_QWORD *)this + 1);
                v29 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[4 * v32];
              *(_DWORD *)v37 = 0;
              v30 = v37 + 4;
              while (v29 != v31)
              {
                v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *((_QWORD *)this + 1) = v37;
              *((_QWORD *)this + 2) = v30;
              *((_QWORD *)this + 3) = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = 0;
              v30 = v29 + 4;
            }
            *((_QWORD *)this + 2) = v30;
            v39 = *((_QWORD *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_208;
            *(v30 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v39);
            v27 = *((_QWORD *)a2 + 2);
            v26 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v26;
          }
          goto LABEL_209;
        case 3u:
          if (v23 != 2)
          {
            v143 = (char *)*((_QWORD *)this + 5);
            v142 = *((_QWORD *)this + 6);
            if ((unint64_t)v143 >= v142)
            {
              v170 = (char *)*v9;
              v171 = (v143 - (_BYTE *)*v9) >> 2;
              v172 = v171 + 1;
              if ((unint64_t)(v171 + 1) >> 62)
LABEL_361:
                sub_10000D5F8();
              v173 = v142 - (_QWORD)v170;
              if (v173 >> 1 > v172)
                v172 = v173 >> 1;
              if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL)
                v174 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v174 = v172;
              if (v174)
              {
                v175 = (char *)sub_100020E2C((uint64_t)v216, v174);
                v170 = (char *)*((_QWORD *)this + 4);
                v143 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v175 = 0;
              }
              v202 = &v175[4 * v171];
              *(_DWORD *)v202 = 0;
              v141 = v202 + 4;
              while (v143 != v170)
              {
                v203 = *((_DWORD *)v143 - 1);
                v143 -= 4;
                *((_DWORD *)v202 - 1) = v203;
                v202 -= 4;
              }
              *((_QWORD *)this + 4) = v202;
              *((_QWORD *)this + 5) = v141;
              *((_QWORD *)this + 6) = &v175[4 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_DWORD *)v143 = 0;
              v141 = v143 + 4;
            }
            *((_QWORD *)this + 5) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(a2, v224) & 1) != 0)
            return 0;
          v40 = *((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          while (v40 < v41 && !*((_BYTE *)a2 + 24))
          {
            v43 = (char *)*((_QWORD *)this + 5);
            v42 = *((_QWORD *)this + 6);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v9;
              v46 = (v43 - (_BYTE *)*v9) >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
                goto LABEL_361;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                v49 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_100020E2C((uint64_t)v216, v49);
                v45 = (char *)*((_QWORD *)this + 4);
                v43 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[4 * v46];
              *(_DWORD *)v51 = 0;
              v44 = v51 + 4;
              while (v43 != v45)
              {
                v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *((_QWORD *)this + 4) = v51;
              *((_QWORD *)this + 5) = v44;
              *((_QWORD *)this + 6) = &v50[4 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_DWORD *)v43 = 0;
              v44 = v43 + 4;
            }
            *((_QWORD *)this + 5) = v44;
            v53 = *((_QWORD *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_208;
            *(v44 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v53);
            v41 = *((_QWORD *)a2 + 2);
            v40 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v40;
          }
          goto LABEL_209;
        case 4u:
          if (v23 != 2)
          {
            v145 = (char *)*((_QWORD *)this + 11);
            v144 = *((_QWORD *)this + 12);
            if ((unint64_t)v145 >= v144)
            {
              v176 = (char *)*v8;
              v177 = (v145 - (_BYTE *)*v8) >> 2;
              v178 = v177 + 1;
              if ((unint64_t)(v177 + 1) >> 62)
LABEL_362:
                sub_10000D5F8();
              v179 = v144 - (_QWORD)v176;
              if (v179 >> 1 > v178)
                v178 = v179 >> 1;
              if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
                v180 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v180 = v178;
              if (v180)
              {
                v181 = (char *)sub_100020E2C((uint64_t)v217, v180);
                v176 = (char *)*((_QWORD *)this + 10);
                v145 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v181 = 0;
              }
              v204 = &v181[4 * v177];
              *(_DWORD *)v204 = 0;
              v141 = v204 + 4;
              while (v145 != v176)
              {
                v205 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *((_DWORD *)v204 - 1) = v205;
                v204 -= 4;
              }
              *((_QWORD *)this + 10) = v204;
              *((_QWORD *)this + 11) = v141;
              *((_QWORD *)this + 12) = &v181[4 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_DWORD *)v145 = 0;
              v141 = v145 + 4;
            }
            *((_QWORD *)this + 11) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(a2, v224) & 1) != 0)
            return 0;
          v54 = *((_QWORD *)a2 + 1);
          v55 = *((_QWORD *)a2 + 2);
          while (v54 < v55 && !*((_BYTE *)a2 + 24))
          {
            v57 = (char *)*((_QWORD *)this + 11);
            v56 = *((_QWORD *)this + 12);
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v8;
              v60 = (v57 - (_BYTE *)*v8) >> 2;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                goto LABEL_362;
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                v63 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_100020E2C((uint64_t)v217, v63);
                v59 = (char *)*((_QWORD *)this + 10);
                v57 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[4 * v60];
              *(_DWORD *)v65 = 0;
              v58 = v65 + 4;
              while (v57 != v59)
              {
                v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }
              *((_QWORD *)this + 10) = v65;
              *((_QWORD *)this + 11) = v58;
              *((_QWORD *)this + 12) = &v64[4 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_DWORD *)v57 = 0;
              v58 = v57 + 4;
            }
            *((_QWORD *)this + 11) = v58;
            v67 = *((_QWORD *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_208;
            *(v58 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v67);
            v55 = *((_QWORD *)a2 + 2);
            v54 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v54;
          }
          goto LABEL_209;
        case 5u:
          if (v23 != 2)
          {
            v147 = (char *)*((_QWORD *)this + 8);
            v146 = *((_QWORD *)this + 9);
            if ((unint64_t)v147 >= v146)
            {
              v182 = (char *)*v221;
              v183 = (v147 - (_BYTE *)*v221) >> 2;
              v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 62)
LABEL_363:
                sub_10000D5F8();
              v185 = v146 - (_QWORD)v182;
              if (v185 >> 1 > v184)
                v184 = v185 >> 1;
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
                v186 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v186 = v184;
              if (v186)
              {
                v187 = (char *)sub_100020E2C((uint64_t)v218, v186);
                v182 = (char *)*((_QWORD *)this + 7);
                v147 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v187 = 0;
              }
              v206 = &v187[4 * v183];
              *(_DWORD *)v206 = 0;
              v141 = v206 + 4;
              while (v147 != v182)
              {
                v207 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v206 - 1) = v207;
                v206 -= 4;
              }
              *((_QWORD *)this + 7) = v206;
              *((_QWORD *)this + 8) = v141;
              *((_QWORD *)this + 9) = &v187[4 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_DWORD *)v147 = 0;
              v141 = v147 + 4;
            }
            *((_QWORD *)this + 8) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(a2, v224) & 1) != 0)
            return 0;
          v68 = *((_QWORD *)a2 + 1);
          v69 = *((_QWORD *)a2 + 2);
          while (v68 < v69 && !*((_BYTE *)a2 + 24))
          {
            v71 = (char *)*((_QWORD *)this + 8);
            v70 = *((_QWORD *)this + 9);
            if ((unint64_t)v71 >= v70)
            {
              v73 = (char *)*v221;
              v74 = (v71 - (_BYTE *)*v221) >> 2;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62)
                goto LABEL_363;
              v76 = v70 - (_QWORD)v73;
              if (v76 >> 1 > v75)
                v75 = v76 >> 1;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                v77 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
              {
                v78 = (char *)sub_100020E2C((uint64_t)v218, v77);
                v73 = (char *)*((_QWORD *)this + 7);
                v71 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v78 = 0;
              }
              v79 = &v78[4 * v74];
              *(_DWORD *)v79 = 0;
              v72 = v79 + 4;
              while (v71 != v73)
              {
                v80 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *((_DWORD *)v79 - 1) = v80;
                v79 -= 4;
              }
              *((_QWORD *)this + 7) = v79;
              *((_QWORD *)this + 8) = v72;
              *((_QWORD *)this + 9) = &v78[4 * v77];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *(_DWORD *)v71 = 0;
              v72 = v71 + 4;
            }
            *((_QWORD *)this + 8) = v72;
            v81 = *((_QWORD *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_208;
            *(v72 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v81);
            v69 = *((_QWORD *)a2 + 2);
            v68 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v68;
          }
          goto LABEL_209;
        case 6u:
          *((_WORD *)this + 96) |= 0x80u;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_347;
          *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v82);
          goto LABEL_349;
        case 7u:
          *((_WORD *)this + 96) |= 0x40u;
          v83 = *((_QWORD *)a2 + 1);
          v84 = *((_QWORD *)a2 + 2);
          v85 = *(_QWORD *)a2;
          if (v83 <= 0xFFFFFFFFFFFFFFF5 && v83 + 10 <= v84)
          {
            v86 = 0;
            v87 = 0;
            v88 = 0;
            do
            {
              v89 = v83 + 1;
              *((_QWORD *)a2 + 1) = v83 + 1;
              v90 = *(_BYTE *)(v85 + v83);
              v88 |= (unint64_t)(v90 & 0x7F) << v86;
              if ((v90 & 0x80) == 0)
                goto LABEL_296;
              v86 += 7;
              v83 = v89;
              v17 = v87++ > 8;
            }
            while (!v17);
LABEL_224:
            LODWORD(v88) = 0;
            goto LABEL_296;
          }
          v148 = 0;
          v149 = 0;
          v88 = 0;
          if (v84 <= v83)
            v84 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v84 == v83)
            {
              LODWORD(v88) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v150 = v83 + 1;
              v151 = *(_BYTE *)(v85 + v83);
              *((_QWORD *)a2 + 1) = v150;
              v88 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                v83 = v150;
                v17 = v149++ > 8;
                if (v17)
                  goto LABEL_224;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v88) = 0;
            }
            break;
          }
LABEL_296:
          *((_DWORD *)this + 45) = v88;
          goto LABEL_351;
        case 8u:
          *((_WORD *)this + 96) |= 0x100u;
          v91 = *((_QWORD *)a2 + 1);
          v92 = *((_QWORD *)a2 + 2);
          v93 = *(_QWORD *)a2;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            do
            {
              v97 = v91 + 1;
              *((_QWORD *)a2 + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0)
                goto LABEL_299;
              v94 += 7;
              v91 = v97;
              v17 = v95++ > 8;
            }
            while (!v17);
LABEL_231:
            LODWORD(v96) = 0;
            goto LABEL_299;
          }
          v152 = 0;
          v153 = 0;
          v96 = 0;
          if (v92 <= v91)
            v92 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v92 == v91)
            {
              LODWORD(v96) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v154 = v91 + 1;
              v155 = *(_BYTE *)(v93 + v91);
              *((_QWORD *)a2 + 1) = v154;
              v96 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v91 = v154;
                v17 = v153++ > 8;
                if (v17)
                  goto LABEL_231;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v96) = 0;
            }
            break;
          }
LABEL_299:
          *((_DWORD *)this + 47) = v96;
          goto LABEL_351;
        case 9u:
          *((_WORD *)this + 96) |= 4u;
          v99 = *((_QWORD *)a2 + 1);
          if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_347;
          *((_DWORD *)this + 41) = *(_DWORD *)(*(_QWORD *)a2 + v99);
          goto LABEL_349;
        case 0xAu:
          *((_WORD *)this + 96) |= 8u;
          v100 = *((_QWORD *)a2 + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_347;
          *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v100);
          goto LABEL_349;
        case 0xBu:
          *((_WORD *)this + 96) |= 0x20u;
          v101 = *((_QWORD *)a2 + 1);
          v102 = *((_QWORD *)a2 + 2);
          v103 = *(_QWORD *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)a2 + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_302;
              v104 += 7;
              v101 = v107;
              v17 = v105++ > 8;
            }
            while (!v17);
LABEL_238:
            LODWORD(v106) = 0;
            goto LABEL_302;
          }
          v156 = 0;
          v157 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v158 = v101 + 1;
              v159 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)a2 + 1) = v158;
              v106 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                v101 = v158;
                v17 = v157++ > 8;
                if (v17)
                  goto LABEL_238;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_302:
          *((_DWORD *)this + 44) = v106;
          goto LABEL_351;
        case 0xCu:
          *((_WORD *)this + 96) |= 0x10u;
          v109 = *((_QWORD *)a2 + 1);
          if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_347;
          *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v109);
          goto LABEL_349;
        case 0xDu:
          *((_WORD *)this + 96) |= 2u;
          v110 = *((_QWORD *)a2 + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_347;
          *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v110);
          goto LABEL_349;
        case 0xEu:
          if (v23 != 2)
          {
            v161 = (char *)*((_QWORD *)this + 14);
            v160 = *((_QWORD *)this + 15);
            if ((unint64_t)v161 >= v160)
            {
              v188 = (char *)*v222;
              v189 = (v161 - (_BYTE *)*v222) >> 2;
              v190 = v189 + 1;
              if ((unint64_t)(v189 + 1) >> 62)
LABEL_364:
                sub_10000D5F8();
              v191 = v160 - (_QWORD)v188;
              if (v191 >> 1 > v190)
                v190 = v191 >> 1;
              if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
                v192 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v192 = v190;
              if (v192)
              {
                v193 = (char *)sub_100020E2C((uint64_t)v219, v192);
                v188 = (char *)*((_QWORD *)this + 13);
                v161 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v193 = 0;
              }
              v208 = &v193[4 * v189];
              *(_DWORD *)v208 = 0;
              v141 = v208 + 4;
              while (v161 != v188)
              {
                v209 = *((_DWORD *)v161 - 1);
                v161 -= 4;
                *((_DWORD *)v208 - 1) = v209;
                v208 -= 4;
              }
              *((_QWORD *)this + 13) = v208;
              *((_QWORD *)this + 14) = v141;
              *((_QWORD *)this + 15) = &v193[4 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_DWORD *)v161 = 0;
              v141 = v161 + 4;
            }
            *((_QWORD *)this + 14) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark(a2, v224) & 1) != 0)
            return 0;
          v111 = *((_QWORD *)a2 + 1);
          v112 = *((_QWORD *)a2 + 2);
          while (v111 < v112 && !*((_BYTE *)a2 + 24))
          {
            v114 = (char *)*((_QWORD *)this + 14);
            v113 = *((_QWORD *)this + 15);
            if ((unint64_t)v114 >= v113)
            {
              v116 = (char *)*v222;
              v117 = (v114 - (_BYTE *)*v222) >> 2;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 62)
                goto LABEL_364;
              v119 = v113 - (_QWORD)v116;
              if (v119 >> 1 > v118)
                v118 = v119 >> 1;
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
                v120 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v120 = v118;
              if (v120)
              {
                v121 = (char *)sub_100020E2C((uint64_t)v219, v120);
                v116 = (char *)*((_QWORD *)this + 13);
                v114 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v121 = 0;
              }
              v122 = &v121[4 * v117];
              *(_DWORD *)v122 = 0;
              v115 = v122 + 4;
              while (v114 != v116)
              {
                v123 = *((_DWORD *)v114 - 1);
                v114 -= 4;
                *((_DWORD *)v122 - 1) = v123;
                v122 -= 4;
              }
              *((_QWORD *)this + 13) = v122;
              *((_QWORD *)this + 14) = v115;
              *((_QWORD *)this + 15) = &v121[4 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_DWORD *)v114 = 0;
              v115 = v114 + 4;
            }
            *((_QWORD *)this + 14) = v115;
            v124 = *((_QWORD *)a2 + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_208;
            *(v115 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v124);
            v112 = *((_QWORD *)a2 + 2);
            v111 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v111;
          }
          goto LABEL_209;
        case 0xFu:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark(a2, v224) & 1) != 0)
              return 0;
            v125 = *((_QWORD *)a2 + 1);
            v126 = *((_QWORD *)a2 + 2);
            while (v125 < v126 && !*((_BYTE *)a2 + 24))
            {
              v128 = (char *)*((_QWORD *)this + 17);
              v127 = *((_QWORD *)this + 18);
              if ((unint64_t)v128 >= v127)
              {
                v130 = (char *)*v223;
                v131 = (v128 - (_BYTE *)*v223) >> 2;
                v132 = v131 + 1;
                if ((unint64_t)(v131 + 1) >> 62)
                  goto LABEL_365;
                v133 = v127 - (_QWORD)v130;
                if (v133 >> 1 > v132)
                  v132 = v133 >> 1;
                if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
                  v134 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v134 = v132;
                if (v134)
                {
                  v135 = (char *)sub_100020E2C((uint64_t)v220, v134);
                  v130 = (char *)*((_QWORD *)this + 16);
                  v128 = (char *)*((_QWORD *)this + 17);
                }
                else
                {
                  v135 = 0;
                }
                v136 = &v135[4 * v131];
                *(_DWORD *)v136 = 0;
                v129 = v136 + 4;
                while (v128 != v130)
                {
                  v137 = *((_DWORD *)v128 - 1);
                  v128 -= 4;
                  *((_DWORD *)v136 - 1) = v137;
                  v136 -= 4;
                }
                *((_QWORD *)this + 16) = v136;
                *((_QWORD *)this + 17) = v129;
                *((_QWORD *)this + 18) = &v135[4 * v134];
                if (v130)
                  operator delete(v130);
              }
              else
              {
                *(_DWORD *)v128 = 0;
                v129 = v128 + 4;
              }
              *((_QWORD *)this + 17) = v129;
              v138 = *((_QWORD *)a2 + 1);
              if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_208:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v129 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v138);
              v126 = *((_QWORD *)a2 + 2);
              v125 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v125;
            }
LABEL_209:
            PB::Reader::recallMark(a2, v224);
          }
          else
          {
            v163 = (char *)*((_QWORD *)this + 17);
            v162 = *((_QWORD *)this + 18);
            if ((unint64_t)v163 >= v162)
            {
              v194 = (char *)*v223;
              v195 = (v163 - (_BYTE *)*v223) >> 2;
              v196 = v195 + 1;
              if ((unint64_t)(v195 + 1) >> 62)
LABEL_365:
                sub_10000D5F8();
              v197 = v162 - (_QWORD)v194;
              if (v197 >> 1 > v196)
                v196 = v197 >> 1;
              if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
                v198 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v198 = v196;
              if (v198)
              {
                v199 = (char *)sub_100020E2C((uint64_t)v220, v198);
                v194 = (char *)*((_QWORD *)this + 16);
                v163 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v199 = 0;
              }
              v210 = &v199[4 * v195];
              *(_DWORD *)v210 = 0;
              v141 = v210 + 4;
              while (v163 != v194)
              {
                v211 = *((_DWORD *)v163 - 1);
                v163 -= 4;
                *((_DWORD *)v210 - 1) = v211;
                v210 -= 4;
              }
              *((_QWORD *)this + 16) = v210;
              *((_QWORD *)this + 17) = v141;
              *((_QWORD *)this + 18) = &v199[4 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *(_DWORD *)v163 = 0;
              v141 = v163 + 4;
            }
            *((_QWORD *)this + 17) = v141;
LABEL_345:
            v212 = *((_QWORD *)a2 + 1);
            if (v212 <= 0xFFFFFFFFFFFFFFFBLL && v212 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v141 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v212);
LABEL_349:
              v25 = *((_QWORD *)a2 + 1) + 4;
LABEL_350:
              *((_QWORD *)a2 + 1) = v25;
            }
            else
            {
LABEL_347:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_351:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v14 >> 3, v23, 0) & 1) == 0)
            return 0;
          goto LABEL_351;
      }
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v14 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AccessoryWakeDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;

  v3 = this;
  if ((*(_WORD *)(this + 192) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 152), 1u);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(float **)(v3 + 80);
  v11 = *(float **)(v3 + 88);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  v13 = *(float **)(v3 + 56);
  v14 = *(float **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 184), 6u);
    v16 = *(_WORD *)(v3 + 192);
    if ((v16 & 0x40) == 0)
    {
LABEL_17:
      if ((v16 & 0x100) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
  }
  else if ((v16 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 180), 7u);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x100) == 0)
  {
LABEL_18:
    if ((v16 & 4) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 8u);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 4) == 0)
  {
LABEL_19:
    if ((v16 & 8) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 9u);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 8) == 0)
  {
LABEL_20:
    if ((v16 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0xAu);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x20) == 0)
  {
LABEL_21:
    if ((v16 & 0x10) == 0)
      goto LABEL_22;
LABEL_37:
    this = PB::Writer::write(a2, *(float *)(v3 + 172), 0xCu);
    if ((*(_WORD *)(v3 + 192) & 2) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0xBu);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x10) != 0)
    goto LABEL_37;
LABEL_22:
  if ((v16 & 2) != 0)
LABEL_23:
    this = PB::Writer::write(a2, *(float *)(v3 + 160), 0xDu);
LABEL_24:
  v17 = *(float **)(v3 + 104);
  v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::write(a2, v19, 0xEu);
  }
  v21 = *(float **)(v3 + 128);
  v20 = *(float **)(v3 + 136);
  while (v21 != v20)
  {
    v22 = *v21++;
    this = PB::Writer::write(a2, v22, 0xFu);
  }
  return this;
}

BOOL CMMsl::AccessoryWakeDebug::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  _BOOL8 result;
  BOOL v25;

  v2 = *(_WORD *)(a1 + 192);
  v3 = *(_WORD *)(a2 + 192);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 40) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(float **)(a1 + 80);
  v10 = *(float **)(a1 + 88);
  v12 = *(float **)(a2 + 80);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 88) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  v14 = *(float **)(a1 + 56);
  v13 = *(float **)(a1 + 64);
  v15 = *(float **)(a2 + 56);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 64) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    if (*v14 != *v15)
      return 0;
    ++v14;
    ++v15;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x100) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v17 = *(float **)(a1 + 104);
  v16 = *(float **)(a1 + 112);
  v18 = *(float **)(a2 + 104);
  if ((char *)v16 - (char *)v17 != *(_QWORD *)(a2 + 112) - (_QWORD)v18)
    return 0;
  while (v17 != v16)
  {
    if (*v17 != *v18)
      return 0;
    ++v17;
    ++v18;
  }
  v20 = *(_QWORD *)(a1 + 128);
  v19 = *(_QWORD *)(a1 + 136);
  v21 = *(float **)(a2 + 128);
  if (v19 - v20 != *(_QWORD *)(a2 + 136) - (_QWORD)v21)
    return 0;
  if (v20 == v19)
    return 1;
  v22 = v20 + 4;
  do
  {
    v23 = *v21++;
    result = *(float *)(v22 - 4) == v23;
    v25 = *(float *)(v22 - 4) != v23 || v22 == v19;
    v22 += 4;
  }
  while (!v25);
  return result;
}

uint64_t CMMsl::AccessoryWakeDebug::hash_value(CMMsl::AccessoryWakeDebug *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;

  if ((*((_WORD *)this + 96) & 1) != 0)
  {
    if (*((double *)this + 19) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 19);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v4 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v5 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v6 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v7 = *((_WORD *)this + 96);
  if ((v7 & 0x80) != 0)
  {
    v20 = *((float *)this + 46);
    v8 = LODWORD(v20);
    if (v20 == 0.0)
      v8 = 0;
    if ((v7 & 0x40) != 0)
    {
LABEL_8:
      v9 = *((int *)this + 45);
      if ((*((_WORD *)this + 96) & 0x100) != 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else
  {
    v8 = 0;
    if ((v7 & 0x40) != 0)
      goto LABEL_8;
  }
  v9 = 0;
  if ((*((_WORD *)this + 96) & 0x100) != 0)
  {
LABEL_9:
    v10 = *((int *)this + 47);
    if ((v7 & 4) != 0)
      goto LABEL_10;
LABEL_28:
    v12 = 0;
    if ((v7 & 8) != 0)
      goto LABEL_13;
LABEL_29:
    v14 = 0;
    if ((v7 & 0x20) != 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_27:
  v10 = 0;
  if ((v7 & 4) == 0)
    goto LABEL_28;
LABEL_10:
  v11 = *((float *)this + 41);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v7 & 8) == 0)
    goto LABEL_29;
LABEL_13:
  v13 = *((float *)this + 42);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v7 & 0x20) != 0)
  {
LABEL_16:
    v15 = *((int *)this + 44);
    if ((v7 & 0x10) != 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = 0;
  if ((v7 & 0x10) != 0)
  {
LABEL_17:
    v16 = *((float *)this + 43);
    v17 = LODWORD(v16);
    if (v16 == 0.0)
      v17 = 0;
    if ((v7 & 2) != 0)
      goto LABEL_20;
LABEL_32:
    v19 = 0;
    goto LABEL_33;
  }
LABEL_31:
  v17 = 0;
  if ((v7 & 2) == 0)
    goto LABEL_32;
LABEL_20:
  v18 = *((float *)this + 40);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
LABEL_33:
  v21 = v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v9;
  v22 = v10 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  return v21 ^ v22 ^ PBHashBytes(*((_QWORD *)this + 16), *((_QWORD *)this + 17) - *((_QWORD *)this + 16));
}

uint64_t CMMsl::AirpodEvent::AirpodEvent(uint64_t this)
{
  *(_QWORD *)this = off_10034FBC0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FBC0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AirpodEvent::~AirpodEvent(CMMsl::AirpodEvent *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AirpodEvent::AirpodEvent(uint64_t this, const CMMsl::AirpodEvent *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_10034FBC0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::AirpodEvent::operator=(uint64_t a1, uint64_t a2, double a3)
{
  void (**v4)(CMMsl::AirpodEvent *__hidden);
  char v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v4 = off_10034FBC0;
    v12[0] = off_10034FBC0;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 24);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v6 = 1;
      LOBYTE(v13) = 1;
      if ((v5 & 4) != 0)
      {
LABEL_4:
        LODWORD(v4) = *(_DWORD *)(a2 + 20);
        v6 |= 4u;
        LOBYTE(v13) = v6;
        if ((v5 & 2) != 0)
        {
LABEL_5:
          v7 = *(_DWORD *)(a2 + 16);
          LOBYTE(v13) = v6 | 2;
LABEL_9:
          v8 = v13;
          v13 = *(_DWORD *)(a1 + 24);
          v9 = *(_QWORD *)(a1 + 8);
          v10 = *(_QWORD *)(a1 + 16);
          *(double *)(a1 + 8) = a3;
          *(_DWORD *)(a1 + 20) = (_DWORD)v4;
          *(_DWORD *)(a1 + 24) = v8;
          *(_DWORD *)(a1 + 16) = v7;
          v12[1] = v9;
          v12[2] = v10;
          PB::Base::~Base((PB::Base *)v12);
          return a1;
        }
LABEL_8:
        v7 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v6 = 0;
      if ((*(_BYTE *)(a2 + 24) & 4) != 0)
        goto LABEL_4;
    }
    if ((v5 & 2) != 0)
      goto LABEL_5;
    goto LABEL_8;
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AirpodEvent *a2, CMMsl::AirpodEvent *a3)
{
  int v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)a2 + 2);
  v6 = *((_QWORD *)this + 2);
  *((double *)this + 2) = result;
  *((_QWORD *)a2 + 2) = v6;
  return result;
}

double CMMsl::AirpodEvent::AirpodEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034FBC0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034FBC0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::AirpodEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7[0] = off_10034FBC0;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::AirpodEvent::formatText(CMMsl::AirpodEvent *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 5));
    if ((*((_BYTE *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "eventTag", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AirpodEvent::readFrom(CMMsl::AirpodEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 5) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AirpodEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  return this;
}

BOOL CMMsl::AirpodEvent::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::AirpodEvent::hash_value(CMMsl::AirpodEvent *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((int *)this + 4);
  return v2 ^ *(_QWORD *)&v1 ^ v3;
}

uint64_t CMMsl::Altimeter::Altimeter(uint64_t this)
{
  *(_QWORD *)this = off_10034FBF8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FBF8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void CMMsl::Altimeter::~Altimeter(CMMsl::Altimeter *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::Altimeter::Altimeter(CMMsl::Altimeter *this, const CMMsl::Altimeter *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_10034FBF8;
  *((_DWORD *)this + 10) = 0;
  v2 = *((_BYTE *)a2 + 40);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 40) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 40) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 40) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_BYTE *)this + 40) = v3;
  *((double *)this + 2) = result;
  if ((*((_BYTE *)a2 + 40) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::Altimeter::operator=(uint64_t a1, const CMMsl::Altimeter *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::Altimeter *)a1 != a2)
  {
    CMMsl::Altimeter::Altimeter((CMMsl::Altimeter *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Altimeter *a2, CMMsl::Altimeter *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::Altimeter::Altimeter(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034FBF8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034FBF8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::Altimeter::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::Altimeter *__hidden);
  __int128 v9;
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_10034FBF8;
    v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    v11 = *(_DWORD *)(a1 + 40);
    v10 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::Altimeter::formatText(CMMsl::Altimeter *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "machAbsTimestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "relativeAltitude", *((double *)this + 3));
      if ((*((_BYTE *)this + 40) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "pressure", *((double *)this + 2));
  v5 = *((_BYTE *)this + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Altimeter::readFrom(CMMsl::Altimeter *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 40) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((_BYTE *)this + 40) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 40) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 40) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Altimeter::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 40);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  return this;
}

BOOL CMMsl::Altimeter::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 40) & 1) == 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return (*(_BYTE *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::Altimeter::hash_value(CMMsl::Altimeter *this)
{
  double v1;
  double v2;
  double v3;
  double v4;

  if ((*((_BYTE *)this + 40) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 40) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v2 = 0.0;
    if ((*((_BYTE *)this + 40) & 2) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 40) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 40) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v4 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
  }
LABEL_16:
  v3 = 0.0;
  if ((*((_BYTE *)this + 40) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4;
}

uint64_t CMMsl::AltimeterKF::AltimeterKF(uint64_t this)
{
  *(_QWORD *)this = off_10034FC30;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FC30;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::AltimeterKF::~AltimeterKF(CMMsl::AltimeterKF *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AltimeterKF::AltimeterKF(uint64_t this, const CMMsl::AltimeterKF *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char v15;

  *(_QWORD *)this = off_10034FC30;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_DWORD *)a2 + 8);
    v3 = 16;
    *(_WORD *)(this + 64) = 16;
    *(_DWORD *)(this + 32) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 32) & 0x400) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 56) = v5;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 28) = v6;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 24) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 44) = v8;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 16) = v9;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(_QWORD *)(this + 8) = v10;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v12;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v13;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_26:
    v15 = *((_BYTE *)a2 + 60);
    *(_WORD *)(this + 64) = v3 | 0x800;
    *(_BYTE *)(this + 60) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 36) = v14;
  if ((*((_WORD *)a2 + 32) & 0x800) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::AltimeterKF::operator=(CMMsl *a1, const CMMsl::AltimeterKF *a2)
{
  CMMsl::AltimeterKF *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::AltimeterKF::AltimeterKF((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AltimeterKF *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AltimeterKF *a2, CMMsl::AltimeterKF *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  float result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  v12 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  v13 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v13;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  LOBYTE(v10) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v10;
  return result;
}

float CMMsl::AltimeterKF::AltimeterKF(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034FC30;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return result;
}

CMMsl *CMMsl::AltimeterKF::operator=(CMMsl *this, uint64_t a2, CMMsl::AltimeterKF *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::AltimeterKF *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if (this != (CMMsl *)a2)
  {
    v7 = off_10034FC30;
    v13 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v11 = *(_DWORD *)(a2 + 56);
    v4 = *(_OWORD *)(a2 + 8);
    v10 = *(_OWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v8 = v4;
    v9 = v5;
    v12 = *(_BYTE *)(a2 + 60);
    CMMsl::swap(this, (CMMsl::AltimeterKF *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::AltimeterKF::formatText(CMMsl::AltimeterKF *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "accelBiasZ", *((float *)this + 6));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x800) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelZ", *((float *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "compensate", *((_BYTE *)this + 60));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "height", *((float *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "inertialCompOffset", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inertialCompPressure", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "kfPressure", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rawPressure", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "rawPressureTemperature", *((float *)this + 13));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 2));
    if ((*((_WORD *)this + 32) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "rawPressureTimestamp", *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x400) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AltimeterKF::readFrom(CMMsl::AltimeterKF *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 2u:
              *((_WORD *)this + 32) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 3u:
              *((_WORD *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 4u:
              *((_WORD *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 5u:
              *((_WORD *)this + 32) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 6u:
              *((_WORD *)this + 32) |= 2u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_89;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_88:
                    v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_88;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_89;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_89:
              *((_QWORD *)this + 2) = v25;
              goto LABEL_95;
            case 7u:
              *((_WORD *)this + 32) |= 1u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_94;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_93:
                    v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_93;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_94;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_94:
              *((_QWORD *)this + 1) = v31;
LABEL_95:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *((_WORD *)this + 32) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 9u:
              *((_WORD *)this + 32) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_64;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_84;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_84:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *((_WORD *)this + 32) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 60) = v34;
              goto LABEL_95;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::AltimeterKF::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 32), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(this + 64) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 60), 0xCu);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xBu);
  if ((*(_WORD *)(v3 + 64) & 0x800) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 60), 0xCu);
  return this;
}

BOOL CMMsl::AltimeterKF::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
    return (*(_WORD *)(a2 + 64) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60);
  return v4;
}

uint64_t CMMsl::AltimeterKF::hash_value(CMMsl::AltimeterKF *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0;
    if ((*((_WORD *)this + 32) & 0x400) != 0)
      goto LABEL_3;
LABEL_33:
    v4 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
LABEL_34:
    v6 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_9;
LABEL_35:
    v8 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_12;
LABEL_36:
    v10 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_15;
    goto LABEL_37;
  }
  v22 = *((float *)this + 8);
  v2 = LODWORD(v22);
  if (v22 == 0.0)
    v2 = 0;
  if ((*((_WORD *)this + 32) & 0x400) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((float *)this + 14);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_34;
LABEL_6:
  v5 = *((float *)this + 7);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_35;
LABEL_9:
  v7 = *((float *)this + 6);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_36;
LABEL_12:
  v9 = *((float *)this + 11);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 2);
    if ((v1 & 1) != 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  v11 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_16:
    v12 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_17;
LABEL_39:
    v14 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_20;
LABEL_40:
    v16 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_23;
LABEL_41:
    v18 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_38:
  v12 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_39;
LABEL_17:
  v13 = *((float *)this + 12);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 32) & 0x200) == 0)
    goto LABEL_40;
LABEL_20:
  v15 = *((float *)this + 13);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_41;
LABEL_23:
  v17 = *((float *)this + 10);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_26:
    v19 = *((float *)this + 9);
    v20 = LODWORD(v19);
    if (v19 == 0.0)
      v20 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_29;
LABEL_43:
    v21 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21;
  }
LABEL_42:
  v20 = 0;
  if ((*((_WORD *)this + 32) & 0x800) == 0)
    goto LABEL_43;
LABEL_29:
  v21 = *((unsigned __int8 *)this + 60);
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21;
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t this)
{
  *(_QWORD *)this = off_10034FC68;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FC68;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::AnchorCorrection::~AnchorCorrection(CMMsl::AnchorCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FC68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FC68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FC68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t this, const CMMsl::AnchorCorrection *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_10034FC68;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 24) |= 1u;
    *(_QWORD *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::AnchorCorrection::operator=(uint64_t a1, const CMMsl::AnchorCorrection *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(CMMsl::AnchorCorrection *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::AnchorCorrection *)a1 != a2)
  {
    CMMsl::AnchorCorrection::AnchorCorrection((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    v7 = off_10034FC68;
    v8 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AnchorCorrection *a2, CMMsl::AnchorCorrection *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::AnchorCorrection::AnchorCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034FC68;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034FC68;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::AnchorCorrection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    v10[0] = off_10034FC68;
    v10[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::AnchorCorrection::formatText(CMMsl::AnchorCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "lastConvergenceTimestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AnchorCorrection::readFrom(CMMsl::AnchorCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this)
{
  double result;

  *(_QWORD *)this = off_1003508A8;
  *((_DWORD *)this + 40) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003508A8;
  *((_DWORD *)this + 40) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  return result;
}

uint64_t CMMsl::AnchorCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::AnchorCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL CMMsl::DeviceMotionCorrection::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float v21;
  _BOOL8 result;
  BOOL v23;

  if ((*(_BYTE *)(a1 + 160) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 160) & 1) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 160) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 56);
  v5 = *(float **)(a1 + 64);
  v7 = *(float **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 64) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 104);
  v8 = *(float **)(a1 + 112);
  v10 = *(float **)(a2 + 104);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 112) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(float **)(a1 + 8);
  v11 = *(float **)(a1 + 16);
  v13 = *(float **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  v15 = *(float **)(a1 + 80);
  v14 = *(float **)(a1 + 88);
  v16 = *(float **)(a2 + 80);
  if ((char *)v14 - (char *)v15 != *(_QWORD *)(a2 + 88) - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*v15 != *v16)
      return 0;
    ++v15;
    ++v16;
  }
  v18 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  v19 = *(float **)(a2 + 128);
  if (v17 - v18 != *(_QWORD *)(a2 + 136) - (_QWORD)v19)
    return 0;
  if (v18 == v17)
    return 1;
  v20 = v18 + 4;
  do
  {
    v21 = *v19++;
    result = *(float *)(v20 - 4) == v21;
    v23 = *(float *)(v20 - 4) != v21 || v20 == v17;
    v20 += 4;
  }
  while (!v23);
  return result;
}

unint64_t CMMsl::AnchorCorrection::hash_value(CMMsl::AnchorCorrection *this)
{
  unint64_t v2;
  double v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  return *(_QWORD *)&v3 ^ v2;
}

uint64_t CMMsl::AnchorCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(uint64_t this)
{
  *(_QWORD *)this = off_10034FCA0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FCA0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::AnchorMotionCorrespondence::~AnchorMotionCorrespondence(CMMsl::AnchorMotionCorrespondence *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(CMMsl::AnchorMotionCorrespondence *this, const CMMsl::AnchorMotionCorrespondence *a2)
{
  char v2;
  char v3;
  double result;
  char v5;

  *(_QWORD *)this = off_10034FCA0;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_BYTE *)this + 44) = 8;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 44) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 44) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 1);
      *((_BYTE *)this + 44) = v3 | 1;
      *((double *)this + 1) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v5 = *((_BYTE *)a2 + 40);
  v3 |= 0x10u;
  *((_BYTE *)this + 44) = v3;
  *((_BYTE *)this + 40) = v5;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::AnchorMotionCorrespondence::operator=(uint64_t a1, const CMMsl::AnchorMotionCorrespondence *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if ((const CMMsl::AnchorMotionCorrespondence *)a1 != a2)
  {
    CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence((CMMsl::AnchorMotionCorrespondence *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v11;
    v11 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v9 = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v10;
    v10 = v3;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AnchorMotionCorrespondence *a2, CMMsl::AnchorMotionCorrespondence *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LOBYTE(v3) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::AnchorMotionCorrespondence::AnchorMotionCorrespondence(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034FCA0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034FCA0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::AnchorMotionCorrespondence::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::AnchorMotionCorrespondence *__hidden);
  __int128 v11;
  __int128 v12;
  char v13;
  int v14;

  if (a1 != a2)
  {
    v10 = off_10034FCA0;
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_BYTE *)(a2 + 40);
    v14 = *(_DWORD *)(a1 + 44);
    v12 = *(_OWORD *)(a1 + 24);
    v5 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v4;
    v13 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 8) = v7;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::AnchorMotionCorrespondence::formatText(CMMsl::AnchorMotionCorrespondence *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "dThetaNorm", *((double *)this + 1));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "lastCorrespondenceTimestamp", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "state", *((_BYTE *)this + 40));
    if ((*((_BYTE *)this + 44) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "lastUpdateTimestamp", *((double *)this + 3));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AnchorMotionCorrespondence::readFrom(CMMsl::AnchorMotionCorrespondence *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 44) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_37;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_41;
        case 2u:
          *((_BYTE *)this + 44) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_37;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_41;
        case 3u:
          *((_BYTE *)this + 44) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_37;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_41;
        case 4u:
          *((_BYTE *)this + 44) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v22 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v22 = v21 != 0;
          }
          *((_BYTE *)this + 40) = v22;
          break;
        case 5u:
          *((_BYTE *)this + 44) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_41:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_37:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AnchorMotionCorrespondence::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 4u);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  return this;
}

BOOL CMMsl::AnchorMotionCorrespondence::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 1) == 0;
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    return (*(_BYTE *)(a2 + 44) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::AnchorMotionCorrespondence::hash_value(CMMsl::AnchorMotionCorrespondence *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 44) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v2 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
LABEL_17:
    v3 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_17;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) != 0)
  {
LABEL_9:
    v4 = *((unsigned __int8 *)this + 40);
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_10;
LABEL_19:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
  }
LABEL_18:
  v4 = 0;
  if ((*((_BYTE *)this + 44) & 1) == 0)
    goto LABEL_19;
LABEL_10:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4 ^ *(_QWORD *)&v5;
}

_QWORD *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(_QWORD *this)
{
  *this = off_10034FCD8;
  this[1] = 0;
  return this;
}

{
  *this = off_10034FCD8;
  this[1] = 0;
  return this;
}

void CMMsl::AppleCV3DSLAMState::~AppleCV3DSLAMState(CMMsl::AppleCV3DSLAMState *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FCD8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FCD8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FCD8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(_QWORD *this, const CMMsl::AppleCV3DSLAMState *a2)
{
  *this = off_10034FCD8;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::AppleCV3DSLAMState *CMMsl::AppleCV3DSLAMState::operator=(const CMMsl::AppleCV3DSLAMState *a1, const CMMsl::AppleCV3DSLAMState *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::AppleCV3DSLAMState *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_10034FCD8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::AppleCV3DSLAMState *a2, CMMsl::AppleCV3DSLAMState *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::AppleCV3DSLAMState::AppleCV3DSLAMState(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034FCD8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034FCD8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::AppleCV3DSLAMState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034FCD8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::AppleCV3DSLAMState::formatText(CMMsl::AppleCV3DSLAMState *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AppleCV3DSLAMState::readFrom(CMMsl::AppleCV3DSLAMState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::CV3DSLAMState::CV3DSLAMState(CMMsl::CV3DSLAMState *this)
{
  double result;

  *(_QWORD *)this = off_100350368;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100350368;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::AppleCV3DSLAMState::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::AppleCV3DSLAMState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::CV3DSLAMState::operator==(v2, v3);
  return result;
}

BOOL CMMsl::CV3DSLAMState::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double v12;
  _BOOL8 result;
  BOOL v14;

  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 88) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 32);
  v5 = *(double **)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v10 = *(double **)(a2 + 56);
  if (v8 - v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
    return 0;
  if (v9 == v8)
    return 1;
  v11 = v9 + 8;
  do
  {
    v12 = *v10++;
    result = *(double *)(v11 - 8) == v12;
    v14 = *(double *)(v11 - 8) != v12 || v11 == v8;
    v11 += 8;
  }
  while (!v14);
  return result;
}

CMMsl::CV3DSLAMState *CMMsl::AppleCV3DSLAMState::hash_value(CMMsl::AppleCV3DSLAMState *this)
{
  CMMsl::CV3DSLAMState *result;

  result = (CMMsl::CV3DSLAMState *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::CV3DSLAMState *)CMMsl::CV3DSLAMState::hash_value(result);
  return result;
}

uint64_t CMMsl::AppleCV3DSLAMState::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

double CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this)
{
  double result;

  *(_QWORD *)this = off_10034FD10;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_10034FD10;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_10034FD10;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion(this);
  operator delete();
}

CMMsl::AudioAccessoryDeviceMotion *CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(CMMsl::AudioAccessoryDeviceMotion *this, const CMMsl::AudioAccessoryDeviceMotion *a2)
{
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  char v8;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  *(_QWORD *)this = off_10034FD10;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((_QWORD *)a2 + 9))
    operator new();
  if (this != a2)
    sub_100020CE4((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x40) != 0)
  {
    v10 = *((_DWORD *)a2 + 24);
    *((_WORD *)this + 58) |= 0x40u;
    *((_DWORD *)this + 24) = v10;
    v4 = *((_WORD *)a2 + 58);
    if ((v4 & 0x20) == 0)
    {
LABEL_7:
      if ((v4 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_7;
  }
  v11 = *((_DWORD *)a2 + 23);
  *((_WORD *)this + 58) |= 0x20u;
  *((_DWORD *)this + 23) = v11;
  v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 58) |= 0x10u;
  *((_DWORD *)this + 22) = v12;
  v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_DWORD *)a2 + 26);
  *((_WORD *)this + 58) |= 0x100u;
  *((_DWORD *)this + 26) = v13;
  v4 = *((_WORD *)a2 + 58);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_QWORD *)a2 + 8);
  *((_WORD *)this + 58) |= 2u;
  *((_QWORD *)this + 8) = v14;
  v4 = *((_WORD *)a2 + 58);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v15 = *((_DWORD *)a2 + 27);
  *((_WORD *)this + 58) |= 0x200u;
  *((_DWORD *)this + 27) = v15;
  v4 = *((_WORD *)a2 + 58);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v16 = *((_QWORD *)a2 + 7);
  *((_WORD *)this + 58) |= 1u;
  *((_QWORD *)this + 7) = v16;
  v4 = *((_WORD *)a2 + 58);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_29:
  v17 = *((_DWORD *)a2 + 21);
  *((_WORD *)this + 58) |= 8u;
  *((_DWORD *)this + 21) = v17;
  if ((*((_WORD *)a2 + 58) & 0x80) != 0)
  {
LABEL_14:
    v5 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 58) |= 0x80u;
    *((_DWORD *)this + 25) = v5;
  }
LABEL_15:
  if (this != a2)
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  v6 = *((_WORD *)a2 + 58);
  if ((v6 & 4) != 0)
  {
    v7 = *((_DWORD *)a2 + 20);
    *((_WORD *)this + 58) |= 4u;
    *((_DWORD *)this + 20) = v7;
    v6 = *((_WORD *)a2 + 58);
  }
  if ((v6 & 0x400) != 0)
  {
    v8 = *((_BYTE *)a2 + 112);
    *((_WORD *)this + 58) |= 0x400u;
    *((_BYTE *)this + 112) = v8;
  }
  return this;
}

CMMsl *CMMsl::AudioAccessoryDeviceMotion::operator=(CMMsl *a1, const CMMsl::AudioAccessoryDeviceMotion *a2)
{
  CMMsl::AudioAccessoryDeviceMotion *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AudioAccessoryDeviceMotion *)v5, v3);
    CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AudioAccessoryDeviceMotion *a2, CMMsl::AudioAccessoryDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float result;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v8;
  LODWORD(v7) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v7;
  LODWORD(v7) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v7;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v14 = *((_QWORD *)this + 6);
  v13 = *((_QWORD *)this + 7);
  v15 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v15;
  LODWORD(v9) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v9;
  result = *((float *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((float *)a2 + 25) = result;
  *((_QWORD *)a2 + 6) = v14;
  *((_QWORD *)a2 + 7) = v13;
  LODWORD(v13) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v13;
  return result;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_QWORD *)a1 = off_10034FD10;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

CMMsl *CMMsl::AudioAccessoryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AudioAccessoryDeviceMotion *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AudioAccessoryDeviceMotion::AudioAccessoryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AudioAccessoryDeviceMotion *)v5, v3);
    CMMsl::AudioAccessoryDeviceMotion::~AudioAccessoryDeviceMotion((CMMsl::AudioAccessoryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::formatText(CMMsl::AudioAccessoryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 58);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "activity", *((_DWORD *)this + 20));
    v5 = *((_WORD *)this + 58);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "arrivalTimestamp", *((float *)this + 21));
  if ((*((_WORD *)this + 58) & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "btcTimestamp", *((_QWORD *)this + 7));
LABEL_5:
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "filteredAcceleration", v8);
  }
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "gyroBias", v11);
  }
  v12 = *((_WORD *)this + 58);
  if ((v12 & 0x400) != 0)
  {
    PB::TextFormatter::format(a2, "isInEar", *((_BYTE *)this + 112));
    v12 = *((_WORD *)this + 58);
    if ((v12 & 0x10) == 0)
    {
LABEL_11:
      if ((v12 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_27;
    }
  }
  else if ((v12 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 22));
  v12 = *((_WORD *)this + 58);
  if ((v12 & 0x20) == 0)
  {
LABEL_12:
    if ((v12 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "quiescentMode", *((_DWORD *)this + 23));
  v12 = *((_WORD *)this + 58);
  if ((v12 & 0x40) == 0)
  {
LABEL_13:
    if ((v12 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "quiescentNoise", *((float *)this + 24));
  v12 = *((_WORD *)this + 58);
  if ((v12 & 0x80) == 0)
  {
LABEL_14:
    if ((v12 & 2) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "sampleLatency", *((float *)this + 25));
  v12 = *((_WORD *)this + 58);
  if ((v12 & 2) == 0)
  {
LABEL_15:
    if ((v12 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "sensorTimeUponReceival", *((double *)this + 8));
  if ((*((_WORD *)this + 58) & 0x100) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "sequenceNumber", *((_DWORD *)this + 26));
LABEL_17:
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "super");
  if ((*((_WORD *)this + 58) & 0x200) != 0)
    PB::TextFormatter::format(a2, "timeSyncStatus", *((_DWORD *)this + 27));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AudioAccessoryDeviceMotion::readFrom(CMMsl::AudioAccessoryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  _DWORD *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  unint64_t v110;
  char *v111;
  _DWORD *v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char *v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  int v152;
  char *v153;
  int v154;
  unint64_t v155;
  _BYTE v158[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v24 != 2)
          {
            v111 = (char *)*((_QWORD *)this + 2);
            v110 = *((_QWORD *)this + 3);
            if ((unint64_t)v111 >= v110)
            {
              v139 = (char *)*v10;
              v140 = (v111 - (_BYTE *)*v10) >> 2;
              v141 = v140 + 1;
              if ((unint64_t)(v140 + 1) >> 62)
LABEL_251:
                sub_10000D5F8();
              v142 = v110 - (_QWORD)v139;
              if (v142 >> 1 > v141)
                v141 = v142 >> 1;
              if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
                v143 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v143 = v141;
              if (v143)
              {
                v144 = (char *)sub_100020E2C((uint64_t)v11, v143);
                v139 = (char *)*((_QWORD *)this + 1);
                v111 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v144 = 0;
              }
              v151 = &v144[4 * v140];
              *(_DWORD *)v151 = 0;
              v112 = v151 + 4;
              while (v111 != v139)
              {
                v152 = *((_DWORD *)v111 - 1);
                v111 -= 4;
                *((_DWORD *)v151 - 1) = v152;
                v151 -= 4;
              }
              *((_QWORD *)this + 1) = v151;
              *((_QWORD *)this + 2) = v112;
              *((_QWORD *)this + 3) = &v144[4 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_DWORD *)v111 = 0;
              v112 = v111 + 4;
            }
            *((_QWORD *)this + 2) = v112;
            goto LABEL_234;
          }
          if ((PB::Reader::placeMark(a2, v158) & 1) != 0)
            return 0;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          while (v25 < v26 && !*((_BYTE *)a2 + 24))
          {
            v28 = (char *)*((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 3);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*v10;
              v31 = (v28 - (_BYTE *)*v10) >> 2;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62)
                goto LABEL_251;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 1 > v32)
                v32 = v33 >> 1;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                v34 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)sub_100020E2C((uint64_t)v11, v34);
                v30 = (char *)*((_QWORD *)this + 1);
                v28 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[4 * v31];
              *(_DWORD *)v36 = 0;
              v29 = v36 + 4;
              while (v28 != v30)
              {
                v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v36 - 1) = v37;
                v36 -= 4;
              }
              *((_QWORD *)this + 1) = v36;
              *((_QWORD *)this + 2) = v29;
              *((_QWORD *)this + 3) = &v35[4 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_DWORD *)v28 = 0;
              v29 = v28 + 4;
            }
            *((_QWORD *)this + 2) = v29;
            v38 = *((_QWORD *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_178;
            *(v29 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v38);
            v26 = *((_QWORD *)a2 + 2);
            v25 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v25;
          }
          goto LABEL_179;
        case 3u:
          *((_WORD *)this + 58) |= 0x40u;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_236;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_238;
        case 4u:
          *((_WORD *)this + 58) |= 0x20u;
          v40 = *((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          v42 = *(_QWORD *)a2;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)a2 + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_204;
              v43 += 7;
              v40 = v46;
              v18 = v44++ > 8;
            }
            while (!v18);
LABEL_138:
            LODWORD(v45) = 0;
            goto LABEL_204;
          }
          v113 = 0;
          v114 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v115 = v40 + 1;
              v116 = *(_BYTE *)(v42 + v40);
              *((_QWORD *)a2 + 1) = v115;
              v45 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                v40 = v115;
                v18 = v114++ > 8;
                if (v18)
                  goto LABEL_138;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v45) = 0;
            }
            break;
          }
LABEL_204:
          *((_DWORD *)this + 23) = v45;
          goto LABEL_240;
        case 5u:
          *((_WORD *)this + 58) |= 0x10u;
          v48 = *((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
          v50 = *(_QWORD *)a2;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)a2 + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_207;
              v51 += 7;
              v48 = v54;
              v18 = v52++ > 8;
            }
            while (!v18);
LABEL_145:
            LODWORD(v53) = 0;
            goto LABEL_207;
          }
          v117 = 0;
          v118 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v119 = v48 + 1;
              v120 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)a2 + 1) = v119;
              v53 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                v48 = v119;
                v18 = v118++ > 8;
                if (v18)
                  goto LABEL_145;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_207:
          *((_DWORD *)this + 22) = v53;
          goto LABEL_240;
        case 6u:
          *((_WORD *)this + 58) |= 0x100u;
          v56 = *((_QWORD *)a2 + 1);
          v57 = *((_QWORD *)a2 + 2);
          v58 = *(_QWORD *)a2;
          if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
          {
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v62 = v56 + 1;
              *((_QWORD *)a2 + 1) = v56 + 1;
              v63 = *(_BYTE *)(v58 + v56);
              v61 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0)
                goto LABEL_210;
              v59 += 7;
              v56 = v62;
              v18 = v60++ > 8;
            }
            while (!v18);
LABEL_152:
            LODWORD(v61) = 0;
            goto LABEL_210;
          }
          v121 = 0;
          v122 = 0;
          v61 = 0;
          if (v57 <= v56)
            v57 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v57 == v56)
            {
              LODWORD(v61) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v123 = v56 + 1;
              v124 = *(_BYTE *)(v58 + v56);
              *((_QWORD *)a2 + 1) = v123;
              v61 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                v56 = v123;
                v18 = v122++ > 8;
                if (v18)
                  goto LABEL_152;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v61) = 0;
            }
            break;
          }
LABEL_210:
          *((_DWORD *)this + 26) = v61;
          goto LABEL_240;
        case 7u:
          *((_WORD *)this + 58) |= 2u;
          v64 = *((_QWORD *)a2 + 1);
          if (v64 > 0xFFFFFFFFFFFFFFF7 || v64 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_236;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v64);
          v65 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_239;
        case 8u:
          *((_WORD *)this + 58) |= 0x200u;
          v66 = *((_QWORD *)a2 + 1);
          v67 = *((_QWORD *)a2 + 2);
          v68 = *(_QWORD *)a2;
          if (v66 <= 0xFFFFFFFFFFFFFFF5 && v66 + 10 <= v67)
          {
            v69 = 0;
            v70 = 0;
            v71 = 0;
            do
            {
              v72 = v66 + 1;
              *((_QWORD *)a2 + 1) = v66 + 1;
              v73 = *(_BYTE *)(v68 + v66);
              v71 |= (unint64_t)(v73 & 0x7F) << v69;
              if ((v73 & 0x80) == 0)
                goto LABEL_213;
              v69 += 7;
              v66 = v72;
              v18 = v70++ > 8;
            }
            while (!v18);
LABEL_159:
            LODWORD(v71) = 0;
            goto LABEL_213;
          }
          v125 = 0;
          v126 = 0;
          v71 = 0;
          if (v67 <= v66)
            v67 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v67 == v66)
            {
              LODWORD(v71) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v127 = v66 + 1;
              v128 = *(_BYTE *)(v68 + v66);
              *((_QWORD *)a2 + 1) = v127;
              v71 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                v66 = v127;
                v18 = v126++ > 8;
                if (v18)
                  goto LABEL_159;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v71) = 0;
            }
            break;
          }
LABEL_213:
          *((_DWORD *)this + 27) = v71;
          goto LABEL_240;
        case 9u:
          *((_WORD *)this + 58) |= 1u;
          v74 = *((_QWORD *)a2 + 1);
          v75 = *((_QWORD *)a2 + 2);
          v76 = *(_QWORD *)a2;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v74 + 1;
              *((_QWORD *)a2 + 1) = v74 + 1;
              v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0)
                goto LABEL_216;
              v77 += 7;
              v74 = v80;
              v18 = v78++ > 8;
            }
            while (!v18);
LABEL_166:
            v79 = 0;
            goto LABEL_216;
          }
          v129 = 0;
          v130 = 0;
          v79 = 0;
          if (v75 <= v74)
            v75 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v75 == v74)
            {
              v79 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v131 = v74 + 1;
              v132 = *(_BYTE *)(v76 + v74);
              *((_QWORD *)a2 + 1) = v131;
              v79 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v74 = v131;
                v18 = v130++ > 8;
                if (v18)
                  goto LABEL_166;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v79 = 0;
            }
            break;
          }
LABEL_216:
          *((_QWORD *)this + 7) = v79;
          goto LABEL_240;
        case 0xAu:
          *((_WORD *)this + 58) |= 8u;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_236;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v82);
          goto LABEL_238;
        case 0xBu:
          *((_WORD *)this + 58) |= 0x80u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_236;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v83);
          goto LABEL_238;
        case 0xCu:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v158) & 1) != 0)
              return 0;
            v84 = *((_QWORD *)a2 + 1);
            v85 = *((_QWORD *)a2 + 2);
            while (v84 < v85 && !*((_BYTE *)a2 + 24))
            {
              v87 = (char *)*((_QWORD *)this + 5);
              v86 = *((_QWORD *)this + 6);
              if ((unint64_t)v87 >= v86)
              {
                v89 = (char *)*v8;
                v90 = (v87 - (_BYTE *)*v8) >> 2;
                v91 = v90 + 1;
                if ((unint64_t)(v90 + 1) >> 62)
                  goto LABEL_250;
                v92 = v86 - (_QWORD)v89;
                if (v92 >> 1 > v91)
                  v91 = v92 >> 1;
                if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
                  v93 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v93 = v91;
                if (v93)
                {
                  v94 = (char *)sub_100020E2C((uint64_t)v9, v93);
                  v89 = (char *)*((_QWORD *)this + 4);
                  v87 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v94[4 * v90];
                *(_DWORD *)v95 = 0;
                v88 = v95 + 4;
                while (v87 != v89)
                {
                  v96 = *((_DWORD *)v87 - 1);
                  v87 -= 4;
                  *((_DWORD *)v95 - 1) = v96;
                  v95 -= 4;
                }
                *((_QWORD *)this + 4) = v95;
                *((_QWORD *)this + 5) = v88;
                *((_QWORD *)this + 6) = &v94[4 * v93];
                if (v89)
                  operator delete(v89);
              }
              else
              {
                *(_DWORD *)v87 = 0;
                v88 = v87 + 4;
              }
              *((_QWORD *)this + 5) = v88;
              v97 = *((_QWORD *)a2 + 1);
              if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_178:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v88 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v97);
              v85 = *((_QWORD *)a2 + 2);
              v84 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v84;
            }
LABEL_179:
            PB::Reader::recallMark(a2, v158);
          }
          else
          {
            v134 = (char *)*((_QWORD *)this + 5);
            v133 = *((_QWORD *)this + 6);
            if ((unint64_t)v134 >= v133)
            {
              v145 = (char *)*v8;
              v146 = (v134 - (_BYTE *)*v8) >> 2;
              v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 62)
LABEL_250:
                sub_10000D5F8();
              v148 = v133 - (_QWORD)v145;
              if (v148 >> 1 > v147)
                v147 = v148 >> 1;
              if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL)
                v149 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v149 = v147;
              if (v149)
              {
                v150 = (char *)sub_100020E2C((uint64_t)v9, v149);
                v145 = (char *)*((_QWORD *)this + 4);
                v134 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v150 = 0;
              }
              v153 = &v150[4 * v146];
              *(_DWORD *)v153 = 0;
              v112 = v153 + 4;
              while (v134 != v145)
              {
                v154 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v153 - 1) = v154;
                v153 -= 4;
              }
              *((_QWORD *)this + 4) = v153;
              *((_QWORD *)this + 5) = v112;
              *((_QWORD *)this + 6) = &v150[4 * v149];
              if (v145)
                operator delete(v145);
            }
            else
            {
              *(_DWORD *)v134 = 0;
              v112 = v134 + 4;
            }
            *((_QWORD *)this + 5) = v112;
LABEL_234:
            v155 = *((_QWORD *)a2 + 1);
            if (v155 <= 0xFFFFFFFFFFFFFFFBLL && v155 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v112 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v155);
LABEL_238:
              v65 = *((_QWORD *)a2 + 1) + 4;
LABEL_239:
              *((_QWORD *)a2 + 1) = v65;
            }
            else
            {
LABEL_236:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_240:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0xDu:
          *((_WORD *)this + 58) |= 4u;
          v98 = *((_QWORD *)a2 + 1);
          v99 = *((_QWORD *)a2 + 2);
          v100 = *(_QWORD *)a2;
          if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
          {
            v101 = 0;
            v102 = 0;
            v103 = 0;
            do
            {
              v104 = v98 + 1;
              *((_QWORD *)a2 + 1) = v98 + 1;
              v105 = *(_BYTE *)(v100 + v98);
              v103 |= (unint64_t)(v105 & 0x7F) << v101;
              if ((v105 & 0x80) == 0)
                goto LABEL_219;
              v101 += 7;
              v98 = v104;
              v18 = v102++ > 8;
            }
            while (!v18);
LABEL_175:
            LODWORD(v103) = 0;
            goto LABEL_219;
          }
          v135 = 0;
          v136 = 0;
          v103 = 0;
          if (v99 <= v98)
            v99 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v99 == v98)
            {
              LODWORD(v103) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v137 = v98 + 1;
              v138 = *(_BYTE *)(v100 + v98);
              *((_QWORD *)a2 + 1) = v137;
              v103 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                v98 = v137;
                v18 = v136++ > 8;
                if (v18)
                  goto LABEL_175;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v103) = 0;
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 20) = v103;
          goto LABEL_240;
        case 0xEu:
          *((_WORD *)this + 58) |= 0x400u;
          v106 = *((_QWORD *)a2 + 1);
          if (v106 >= *((_QWORD *)a2 + 2))
          {
            v109 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(_QWORD *)a2 + v106);
            *((_QWORD *)a2 + 1) = v107;
            v109 = v108 != 0;
          }
          *((_BYTE *)this + 112) = v109;
          goto LABEL_240;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_240;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this)
{
  double result;

  *(_QWORD *)this = off_10034FD48;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_10034FD48;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;

  v3 = this;
  v4 = *(const PB::Base **)(this + 72);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 96), 3u);
    v8 = *(_WORD *)(v3 + 116);
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 4u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 5u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 6u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 1) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 8u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 1) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0)
      goto LABEL_14;
LABEL_30:
    this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xAu);
    if ((*(_WORD *)(v3 + 116) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 9u);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 8) != 0)
    goto LABEL_30;
LABEL_14:
  if ((v8 & 0x80) != 0)
LABEL_15:
    this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xBu);
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    this = PB::Writer::write(a2, v11, 0xCu);
  }
  v12 = *(_WORD *)(v3 + 116);
  if ((v12 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xDu);
    v12 = *(_WORD *)(v3 + 116);
  }
  if ((v12 & 0x400) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 112), 0xEu);
  return this;
}

BOOL CMMsl::AudioAccessoryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  __int16 v9;
  __int16 v10;
  float *v11;
  float *v12;
  float *v13;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    v9 = *(_WORD *)(a1 + 116);
    v10 = *(_WORD *)(a2 + 116);
    if ((v9 & 0x40) != 0)
    {
      if ((v10 & 0x40) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
        return 0;
    }
    else if ((v10 & 0x40) != 0)
    {
      return 0;
    }
    if ((v9 & 0x20) != 0)
    {
      if ((v10 & 0x20) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
        return 0;
    }
    else if ((v10 & 0x20) != 0)
    {
      return 0;
    }
    if ((v9 & 0x10) != 0)
    {
      if ((v10 & 0x10) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
        return 0;
    }
    else if ((v10 & 0x10) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 116) & 0x100) != 0)
    {
      if ((*(_WORD *)(a2 + 116) & 0x100) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
        return 0;
    }
    else if ((*(_WORD *)(a2 + 116) & 0x100) != 0)
    {
      return 0;
    }
    if ((v9 & 2) != 0)
    {
      if ((v10 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
        return 0;
    }
    else if ((v10 & 2) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 116) & 0x200) != 0)
    {
      if ((*(_WORD *)(a2 + 116) & 0x200) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
        return 0;
    }
    else if ((*(_WORD *)(a2 + 116) & 0x200) != 0)
    {
      return 0;
    }
    if ((v9 & 1) != 0)
    {
      if ((v10 & 1) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
        return 0;
    }
    else if ((v10 & 1) != 0)
    {
      return 0;
    }
    if ((v9 & 8) != 0)
    {
      if ((v10 & 8) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
        return 0;
    }
    else if ((v10 & 8) != 0)
    {
      return 0;
    }
    if ((v9 & 0x80) != 0)
    {
      if ((v10 & 0x80) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
        return 0;
    }
    else if ((v10 & 0x80) != 0)
    {
      return 0;
    }
    v12 = *(float **)(a1 + 32);
    v11 = *(float **)(a1 + 40);
    v13 = *(float **)(a2 + 32);
    if ((char *)v11 - (char *)v12 == *(_QWORD *)(a2 + 40) - (_QWORD)v13)
    {
      while (v12 != v11)
      {
        if (*v12 != *v13)
          return 0;
        ++v12;
        ++v13;
      }
      if ((v9 & 4) != 0)
      {
        if ((v10 & 4) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
          return 0;
      }
      else if ((v10 & 4) != 0)
      {
        return 0;
      }
      result = (v10 & 0x400) == 0;
      if ((*(_WORD *)(a1 + 116) & 0x400) == 0)
        return result;
      if ((*(_WORD *)(a2 + 116) & 0x400) != 0 && *(unsigned __int8 *)(a1 + 112) == *(unsigned __int8 *)(a2 + 112))
        return 1;
    }
  }
  return 0;
}

BOOL CMMsl::AuxiliaryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  _BOOL8 v17;

  if ((*(_BYTE *)(a1 + 152) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 152) & 2) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 152) & 2) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 56);
  v2 = *(float **)(a1 + 64);
  v4 = *(float **)(a2 + 56);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 64) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 80);
  v5 = *(float **)(a1 + 88);
  v7 = *(float **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 88) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 32);
  v8 = *(float **)(a1 + 40);
  v10 = *(float **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 40) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(float **)(a1 + 8);
  v11 = *(float **)(a1 + 16);
  v13 = *(float **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  if ((*(_BYTE *)(a1 + 152) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 152) & 8) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 152) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 152) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 152) & 1) == 0 || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 128))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 152) & 1) != 0)
  {
    return 0;
  }
  v15 = *(float **)(a1 + 104);
  v14 = *(float **)(a1 + 112);
  v16 = *(float **)(a2 + 104);
  if ((char *)v14 - (char *)v15 != *(_QWORD *)(a2 + 112) - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*v15 != *v16)
      return 0;
    ++v15;
    ++v16;
  }
  v17 = (*(_BYTE *)(a2 + 152) & 4) == 0;
  if ((*(_BYTE *)(a1 + 152) & 4) != 0)
    return (*(_BYTE *)(a2 + 152) & 4) != 0 && *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144);
  return v17;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::hash_value(CMMsl::AudioAccessoryDeviceMotion *this)
{
  CMMsl::AuxiliaryDeviceMotion *v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v2 = (CMMsl::AuxiliaryDeviceMotion *)*((_QWORD *)this + 9);
  if (v2)
    v22 = CMMsl::AuxiliaryDeviceMotion::hash_value(v2);
  else
    v22 = 0;
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v4 = *((_WORD *)this + 58);
  if ((v4 & 0x40) != 0)
  {
    v13 = *((float *)this + 24);
    if (v13 == 0.0)
      v5 = 0;
    else
      v5 = LODWORD(v13);
    if ((v4 & 0x20) != 0)
    {
LABEL_6:
      v6 = *((unsigned int *)this + 23);
      if ((v4 & 0x10) != 0)
        goto LABEL_7;
      goto LABEL_23;
    }
  }
  else
  {
    v5 = 0;
    if ((v4 & 0x20) != 0)
      goto LABEL_6;
  }
  v6 = 0;
  if ((v4 & 0x10) != 0)
  {
LABEL_7:
    v7 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 58) & 0x100) != 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  v7 = 0;
  if ((*((_WORD *)this + 58) & 0x100) != 0)
  {
LABEL_8:
    v21 = *((unsigned int *)this + 26);
    if ((v4 & 2) != 0)
      goto LABEL_9;
LABEL_25:
    v8 = 0;
    if ((*((_WORD *)this + 58) & 0x200) != 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_24:
  v21 = 0;
  if ((v4 & 2) == 0)
    goto LABEL_25;
LABEL_9:
  if (*((double *)this + 8) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 8);
  if ((*((_WORD *)this + 58) & 0x200) != 0)
  {
LABEL_13:
    v9 = *((int *)this + 27);
    if ((v4 & 1) != 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v9 = 0;
  if ((v4 & 1) != 0)
  {
LABEL_14:
    v10 = *((_QWORD *)this + 7);
    if ((v4 & 8) != 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v10 = 0;
  if ((v4 & 8) != 0)
  {
LABEL_15:
    v11 = *((float *)this + 21);
    if (v11 == 0.0)
      v12 = 0;
    else
      v12 = LODWORD(v11);
    goto LABEL_29;
  }
LABEL_28:
  v12 = 0;
LABEL_29:
  v14 = v3;
  if ((v4 & 0x80) != 0)
  {
    v16 = *((float *)this + 25);
    if (v16 == 0.0)
      v15 = 0;
    else
      v15 = LODWORD(v16);
  }
  else
  {
    v15 = 0;
  }
  v17 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  if ((*((_WORD *)this + 58) & 4) != 0)
    v18 = *((unsigned int *)this + 20);
  else
    v18 = 0;
  if ((*((_WORD *)this + 58) & 0x400) != 0)
    v19 = *((unsigned __int8 *)this + 112);
  else
    v19 = 0;
  return v14 ^ v22 ^ v5 ^ v6 ^ v7 ^ v21 ^ v8 ^ v9 ^ v10 ^ v12 ^ v15 ^ v17 ^ v18 ^ v19;
}

uint64_t CMMsl::AudioAccessoryDeviceMotion::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 72))
    operator new();
  return this;
}

void CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_10034FD48;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion(this);
  operator delete();
}

CMMsl::AuxiliaryDeviceMotion *CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(CMMsl::AuxiliaryDeviceMotion *this, const CMMsl::AuxiliaryDeviceMotion *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)this = off_10034FD48;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  if ((*((_BYTE *)a2 + 152) & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 17);
    *((_BYTE *)this + 152) = 2;
    *((_QWORD *)this + 17) = v6;
  }
  if (this != a2)
  {
    sub_100020CE4(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  v7 = *((_BYTE *)a2 + 152);
  if ((v7 & 8) != 0)
  {
    v8 = *((_DWORD *)a2 + 37);
    *((_BYTE *)this + 152) |= 8u;
    *((_DWORD *)this + 37) = v8;
    v7 = *((_BYTE *)a2 + 152);
  }
  if ((v7 & 1) != 0)
  {
    v9 = *((_QWORD *)a2 + 16);
    *((_BYTE *)this + 152) |= 1u;
    *((_QWORD *)this + 16) = v9;
  }
  if (this != a2)
    sub_100020CE4((char *)this + 104, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  if ((*((_BYTE *)a2 + 152) & 4) != 0)
  {
    v10 = *((_DWORD *)a2 + 36);
    *((_BYTE *)this + 152) |= 4u;
    *((_DWORD *)this + 36) = v10;
  }
  return this;
}

CMMsl *CMMsl::AuxiliaryDeviceMotion::operator=(CMMsl *a1, const CMMsl::AuxiliaryDeviceMotion *a2)
{
  CMMsl::AuxiliaryDeviceMotion *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::AuxiliaryDeviceMotion *)v5, v3);
    CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::AuxiliaryDeviceMotion *a2, CMMsl::AuxiliaryDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v14;
  v15 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v15;
  LODWORD(v15) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v15;
  v16 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v16;
  v17 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v17;
  v19 = *((_QWORD *)this + 15);
  v18 = *((_QWORD *)this + 16);
  v20 = *((_QWORD *)a2 + 16);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 16) = v20;
  result = *((double *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((double *)a2 + 17) = result;
  *((_QWORD *)a2 + 15) = v19;
  *((_QWORD *)a2 + 16) = v18;
  LODWORD(v18) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v18;
  return result;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_10034FD48;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = a1 + 104;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  sub_100239458(v5, (__n128 *)(a2 + 80));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v7, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  sub_100239458(v6, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  return a1;
}

