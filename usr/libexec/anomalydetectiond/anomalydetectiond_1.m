CMMsl *CMMsl::AuxiliaryDeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::AuxiliaryDeviceMotion *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::AuxiliaryDeviceMotion::AuxiliaryDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::AuxiliaryDeviceMotion *)v5, v3);
    CMMsl::AuxiliaryDeviceMotion::~AuxiliaryDeviceMotion((CMMsl::AuxiliaryDeviceMotion *)v5);
  }
  return a1;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::formatText(CMMsl::AuxiliaryDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  char v17;
  float *v18;
  float *v19;
  float v20;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "acceleration", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "biasCovariance", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "quaternion", v13);
  }
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "rotationRate", v16);
  }
  v17 = *((_BYTE *)this + 152);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 16));
    v17 = *((_BYTE *)this + 152);
    if ((v17 & 4) == 0)
    {
LABEL_11:
      if ((v17 & 8) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*((_BYTE *)this + 152) & 4) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 36));
  v17 = *((_BYTE *)this + 152);
  if ((v17 & 8) == 0)
  {
LABEL_12:
    if ((v17 & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "statusDeprecated", *((_DWORD *)this + 37));
  if ((*((_BYTE *)this + 152) & 2) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
LABEL_14:
  v18 = (float *)*((_QWORD *)this + 13);
  v19 = (float *)*((_QWORD *)this + 14);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "userAcceleration", v20);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::AuxiliaryDeviceMotion::readFrom(CMMsl::AuxiliaryDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  char *v122;
  _DWORD *v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  unint64_t v128;
  char *v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  char *v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  int v175;
  char *v176;
  int v177;
  char *v178;
  int v179;
  char *v180;
  int v181;
  char *v182;
  int v183;
  unint64_t v184;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  void **v192;
  _BYTE v193[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v191 = (char *)this + 120;
    v192 = (void **)((char *)this + 104);
    v8 = (void **)((char *)this + 8);
    v9 = (void **)((char *)this + 32);
    v189 = (char *)this + 48;
    v190 = (char *)this + 24;
    v10 = (void **)((char *)this + 80);
    v11 = (void **)((char *)this + 56);
    v187 = (char *)this + 72;
    v188 = (char *)this + 96;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 152) |= 2u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_291;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_293;
        case 2u:
          if (v24 != 2)
          {
            v122 = (char *)*((_QWORD *)this + 8);
            v121 = *((_QWORD *)this + 9);
            if ((unint64_t)v122 >= v121)
            {
              v144 = (char *)*v11;
              v145 = (v122 - (_BYTE *)*v11) >> 2;
              v146 = v145 + 1;
              if ((unint64_t)(v145 + 1) >> 62)
LABEL_304:
                sub_10000D5F8();
              v147 = v121 - (_QWORD)v144;
              if (v147 >> 1 > v146)
                v146 = v147 >> 1;
              if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL)
                v148 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v148 = v146;
              if (v148)
              {
                v149 = (char *)sub_100020E2C((uint64_t)v187, v148);
                v144 = (char *)*((_QWORD *)this + 7);
                v122 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v149 = 0;
              }
              v174 = &v149[4 * v145];
              *(_DWORD *)v174 = 0;
              v123 = v174 + 4;
              while (v122 != v144)
              {
                v175 = *((_DWORD *)v122 - 1);
                v122 -= 4;
                *((_DWORD *)v174 - 1) = v175;
                v174 -= 4;
              }
              *((_QWORD *)this + 7) = v174;
              *((_QWORD *)this + 8) = v123;
              *((_QWORD *)this + 9) = &v149[4 * v148];
              if (v144)
                operator delete(v144);
            }
            else
            {
              *(_DWORD *)v122 = 0;
              v123 = v122 + 4;
            }
            *((_QWORD *)this + 8) = v123;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark(a2, v193) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 8);
            v29 = *((_QWORD *)this + 9);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_304;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100020E2C((uint64_t)v187, v36);
                v32 = (char *)*((_QWORD *)this + 7);
                v30 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((_QWORD *)this + 7) = v38;
              *((_QWORD *)this + 8) = v31;
              *((_QWORD *)this + 9) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 8) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_169;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          goto LABEL_170;
        case 3u:
          if (v24 != 2)
          {
            v125 = (char *)*((_QWORD *)this + 11);
            v124 = *((_QWORD *)this + 12);
            if ((unint64_t)v125 >= v124)
            {
              v150 = (char *)*v10;
              v151 = (v125 - (_BYTE *)*v10) >> 2;
              v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 62)
LABEL_305:
                sub_10000D5F8();
              v153 = v124 - (_QWORD)v150;
              if (v153 >> 1 > v152)
                v152 = v153 >> 1;
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
                v154 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v154 = v152;
              if (v154)
              {
                v155 = (char *)sub_100020E2C((uint64_t)v188, v154);
                v150 = (char *)*((_QWORD *)this + 10);
                v125 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v155 = 0;
              }
              v176 = &v155[4 * v151];
              *(_DWORD *)v176 = 0;
              v123 = v176 + 4;
              while (v125 != v150)
              {
                v177 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *((_DWORD *)v176 - 1) = v177;
                v176 -= 4;
              }
              *((_QWORD *)this + 10) = v176;
              *((_QWORD *)this + 11) = v123;
              *((_QWORD *)this + 12) = &v155[4 * v154];
              if (v150)
                operator delete(v150);
            }
            else
            {
              *(_DWORD *)v125 = 0;
              v123 = v125 + 4;
            }
            *((_QWORD *)this + 11) = v123;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark(a2, v193) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 11);
            v43 = *((_QWORD *)this + 12);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_305;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v188, v50);
                v46 = (char *)*((_QWORD *)this + 10);
                v44 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 10) = v52;
              *((_QWORD *)this + 11) = v45;
              *((_QWORD *)this + 12) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 11) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_169;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_170;
        case 4u:
          if (v24 != 2)
          {
            v127 = (char *)*((_QWORD *)this + 5);
            v126 = *((_QWORD *)this + 6);
            if ((unint64_t)v127 >= v126)
            {
              v156 = (char *)*v9;
              v157 = (v127 - (_BYTE *)*v9) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62)
LABEL_306:
                sub_10000D5F8();
              v159 = v126 - (_QWORD)v156;
              if (v159 >> 1 > v158)
                v158 = v159 >> 1;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
                v160 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v160 = v158;
              if (v160)
              {
                v161 = (char *)sub_100020E2C((uint64_t)v189, v160);
                v156 = (char *)*((_QWORD *)this + 4);
                v127 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v161 = 0;
              }
              v178 = &v161[4 * v157];
              *(_DWORD *)v178 = 0;
              v123 = v178 + 4;
              while (v127 != v156)
              {
                v179 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v178 - 1) = v179;
                v178 -= 4;
              }
              *((_QWORD *)this + 4) = v178;
              *((_QWORD *)this + 5) = v123;
              *((_QWORD *)this + 6) = &v161[4 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_DWORD *)v127 = 0;
              v123 = v127 + 4;
            }
            *((_QWORD *)this + 5) = v123;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark(a2, v193) & 1) != 0)
            return 0;
          v55 = *((_QWORD *)a2 + 1);
          v56 = *((_QWORD *)a2 + 2);
          while (v55 < v56 && !*((_BYTE *)a2 + 24))
          {
            v58 = (char *)*((_QWORD *)this + 5);
            v57 = *((_QWORD *)this + 6);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_306;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_100020E2C((uint64_t)v189, v64);
                v60 = (char *)*((_QWORD *)this + 4);
                v58 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *((_QWORD *)this + 4) = v66;
              *((_QWORD *)this + 5) = v59;
              *((_QWORD *)this + 6) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *((_QWORD *)this + 5) = v59;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_169;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            v56 = *((_QWORD *)a2 + 2);
            v55 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v55;
          }
          goto LABEL_170;
        case 5u:
          if (v24 != 2)
          {
            v129 = (char *)*((_QWORD *)this + 2);
            v128 = *((_QWORD *)this + 3);
            if ((unint64_t)v129 >= v128)
            {
              v162 = (char *)*v8;
              v163 = (v129 - (_BYTE *)*v8) >> 2;
              v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62)
LABEL_307:
                sub_10000D5F8();
              v165 = v128 - (_QWORD)v162;
              if (v165 >> 1 > v164)
                v164 = v165 >> 1;
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
                v166 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v166 = v164;
              if (v166)
              {
                v167 = (char *)sub_100020E2C((uint64_t)v190, v166);
                v162 = (char *)*((_QWORD *)this + 1);
                v129 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v167 = 0;
              }
              v180 = &v167[4 * v163];
              *(_DWORD *)v180 = 0;
              v123 = v180 + 4;
              while (v129 != v162)
              {
                v181 = *((_DWORD *)v129 - 1);
                v129 -= 4;
                *((_DWORD *)v180 - 1) = v181;
                v180 -= 4;
              }
              *((_QWORD *)this + 1) = v180;
              *((_QWORD *)this + 2) = v123;
              *((_QWORD *)this + 3) = &v167[4 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_DWORD *)v129 = 0;
              v123 = v129 + 4;
            }
            *((_QWORD *)this + 2) = v123;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark(a2, v193) & 1) != 0)
            return 0;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          while (v69 < v70 && !*((_BYTE *)a2 + 24))
          {
            v72 = (char *)*((_QWORD *)this + 2);
            v71 = *((_QWORD *)this + 3);
            if ((unint64_t)v72 >= v71)
            {
              v74 = (char *)*v8;
              v75 = (v72 - (_BYTE *)*v8) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
                goto LABEL_307;
              v77 = v71 - (_QWORD)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)sub_100020E2C((uint64_t)v190, v78);
                v74 = (char *)*((_QWORD *)this + 1);
                v72 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[4 * v75];
              *(_DWORD *)v80 = 0;
              v73 = v80 + 4;
              while (v72 != v74)
              {
                v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *((_QWORD *)this + 1) = v80;
              *((_QWORD *)this + 2) = v73;
              *((_QWORD *)this + 3) = &v79[4 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v73 = v72 + 4;
            }
            *((_QWORD *)this + 2) = v73;
            v82 = *((_QWORD *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_169;
            *(v73 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v82);
            v70 = *((_QWORD *)a2 + 2);
            v69 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v69;
          }
          goto LABEL_170;
        case 6u:
          *((_BYTE *)this + 152) |= 8u;
          v83 = *((_QWORD *)a2 + 1);
          v84 = *((_QWORD *)a2 + 2);
          v85 = *(_QWORD *)a2;
          if (v83 <= 0xFFFFFFFFFFFFFFF5 && v83 + 10 <= v84)
          {
            v86 = 0;
            v87 = 0;
            v88 = 0;
            do
            {
              v89 = v83 + 1;
              *((_QWORD *)a2 + 1) = v83 + 1;
              v90 = *(_BYTE *)(v85 + v83);
              v88 |= (unint64_t)(v90 & 0x7F) << v86;
              if ((v90 & 0x80) == 0)
                goto LABEL_247;
              v86 += 7;
              v83 = v89;
              v18 = v87++ > 8;
            }
            while (!v18);
LABEL_185:
            LODWORD(v88) = 0;
            goto LABEL_247;
          }
          v130 = 0;
          v131 = 0;
          v88 = 0;
          if (v84 <= v83)
            v84 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v84 == v83)
            {
              LODWORD(v88) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v132 = v83 + 1;
              v133 = *(_BYTE *)(v85 + v83);
              *((_QWORD *)a2 + 1) = v132;
              v88 |= (unint64_t)(v133 & 0x7F) << v130;
              if (v133 < 0)
              {
                v130 += 7;
                v83 = v132;
                v18 = v131++ > 8;
                if (v18)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v88) = 0;
            }
            break;
          }
LABEL_247:
          *((_DWORD *)this + 37) = v88;
          goto LABEL_294;
        case 7u:
          *((_BYTE *)this + 152) |= 1u;
          v91 = *((_QWORD *)a2 + 1);
          v92 = *((_QWORD *)a2 + 2);
          v93 = *(_QWORD *)a2;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            do
            {
              v97 = v91 + 1;
              *((_QWORD *)a2 + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0)
                goto LABEL_250;
              v94 += 7;
              v91 = v97;
              v18 = v95++ > 8;
            }
            while (!v18);
LABEL_192:
            v96 = 0;
            goto LABEL_250;
          }
          v134 = 0;
          v135 = 0;
          v96 = 0;
          if (v92 <= v91)
            v92 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v92 == v91)
            {
              v96 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v136 = v91 + 1;
              v137 = *(_BYTE *)(v93 + v91);
              *((_QWORD *)a2 + 1) = v136;
              v96 |= (unint64_t)(v137 & 0x7F) << v134;
              if (v137 < 0)
              {
                v134 += 7;
                v91 = v136;
                v18 = v135++ > 8;
                if (v18)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v96 = 0;
            }
            break;
          }
LABEL_250:
          *((_QWORD *)this + 16) = v96;
          goto LABEL_294;
        case 8u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v193) & 1) != 0)
              return 0;
            v99 = *((_QWORD *)a2 + 1);
            v100 = *((_QWORD *)a2 + 2);
            while (v99 < v100 && !*((_BYTE *)a2 + 24))
            {
              v102 = (char *)*((_QWORD *)this + 14);
              v101 = *((_QWORD *)this + 15);
              if ((unint64_t)v102 >= v101)
              {
                v104 = (char *)*v192;
                v105 = (v102 - (_BYTE *)*v192) >> 2;
                v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62)
                  goto LABEL_308;
                v107 = v101 - (_QWORD)v104;
                if (v107 >> 1 > v106)
                  v106 = v107 >> 1;
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                  v108 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v108 = v106;
                if (v108)
                {
                  v109 = (char *)sub_100020E2C((uint64_t)v191, v108);
                  v104 = (char *)*((_QWORD *)this + 13);
                  v102 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v109 = 0;
                }
                v110 = &v109[4 * v105];
                *(_DWORD *)v110 = 0;
                v103 = v110 + 4;
                while (v102 != v104)
                {
                  v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }
                *((_QWORD *)this + 13) = v110;
                *((_QWORD *)this + 14) = v103;
                *((_QWORD *)this + 15) = &v109[4 * v108];
                if (v104)
                  operator delete(v104);
              }
              else
              {
                *(_DWORD *)v102 = 0;
                v103 = v102 + 4;
              }
              *((_QWORD *)this + 14) = v103;
              v112 = *((_QWORD *)a2 + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_169:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v112);
              v100 = *((_QWORD *)a2 + 2);
              v99 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v99;
            }
LABEL_170:
            PB::Reader::recallMark(a2, v193);
          }
          else
          {
            v139 = (char *)*((_QWORD *)this + 14);
            v138 = *((_QWORD *)this + 15);
            if ((unint64_t)v139 >= v138)
            {
              v168 = (char *)*v192;
              v169 = (v139 - (_BYTE *)*v192) >> 2;
              v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 62)
LABEL_308:
                sub_10000D5F8();
              v171 = v138 - (_QWORD)v168;
              if (v171 >> 1 > v170)
                v170 = v171 >> 1;
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
                v172 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v172 = v170;
              if (v172)
              {
                v173 = (char *)sub_100020E2C((uint64_t)v191, v172);
                v168 = (char *)*((_QWORD *)this + 13);
                v139 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v173 = 0;
              }
              v182 = &v173[4 * v169];
              *(_DWORD *)v182 = 0;
              v123 = v182 + 4;
              while (v139 != v168)
              {
                v183 = *((_DWORD *)v139 - 1);
                v139 -= 4;
                *((_DWORD *)v182 - 1) = v183;
                v182 -= 4;
              }
              *((_QWORD *)this + 13) = v182;
              *((_QWORD *)this + 14) = v123;
              *((_QWORD *)this + 15) = &v173[4 * v172];
              if (v168)
                operator delete(v168);
            }
            else
            {
              *(_DWORD *)v139 = 0;
              v123 = v139 + 4;
            }
            *((_QWORD *)this + 14) = v123;
LABEL_289:
            v184 = *((_QWORD *)a2 + 1);
            if (v184 <= 0xFFFFFFFFFFFFFFFBLL && v184 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v123 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v184);
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_293:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_291:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_294:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 9u:
          *((_BYTE *)this + 152) |= 4u;
          v113 = *((_QWORD *)a2 + 1);
          v114 = *((_QWORD *)a2 + 2);
          v115 = *(_QWORD *)a2;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            v116 = 0;
            v117 = 0;
            v118 = 0;
            do
            {
              v119 = v113 + 1;
              *((_QWORD *)a2 + 1) = v113 + 1;
              v120 = *(_BYTE *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0)
                goto LABEL_253;
              v116 += 7;
              v113 = v119;
              v18 = v117++ > 8;
            }
            while (!v18);
LABEL_201:
            LODWORD(v118) = 0;
            goto LABEL_253;
          }
          v140 = 0;
          v141 = 0;
          v118 = 0;
          if (v114 <= v113)
            v114 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v142 = v113 + 1;
              v143 = *(_BYTE *)(v115 + v113);
              *((_QWORD *)a2 + 1) = v142;
              v118 |= (unint64_t)(v143 & 0x7F) << v140;
              if (v143 < 0)
              {
                v140 += 7;
                v113 = v142;
                v18 = v141++ > 8;
                if (v18)
                  goto LABEL_201;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v118) = 0;
            }
            break;
          }
LABEL_253:
          *((_DWORD *)this + 36) = v118;
          goto LABEL_294;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_294;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  char v16;
  float *v17;
  float *v18;
  float v19;

  v3 = this;
  if ((*(_BYTE *)(this + 152) & 2) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 136), 1u);
  v4 = *(float **)(v3 + 56);
  v5 = *(float **)(v3 + 64);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(float **)(v3 + 32);
  v11 = *(float **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  v13 = *(float **)(v3 + 8);
  v14 = *(float **)(v3 + 16);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  v16 = *(_BYTE *)(v3 + 152);
  if ((v16 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 6u);
    v16 = *(_BYTE *)(v3 + 152);
  }
  if ((v16 & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 128), 7u);
  v17 = *(float **)(v3 + 104);
  v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::write(a2, v19, 8u);
  }
  if ((*(_BYTE *)(v3 + 152) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 9u);
  return this;
}

uint64_t CMMsl::AuxiliaryDeviceMotion::hash_value(CMMsl::AuxiliaryDeviceMotion *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*((_BYTE *)this + 152) & 2) != 0)
  {
    if (*((double *)this + 17) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 17);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v4 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v5 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v6 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 152) & 8) != 0)
  {
    v7 = *((unsigned int *)this + 37);
    if ((*((_BYTE *)this + 152) & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 152) & 1) != 0)
    {
LABEL_8:
      v8 = *((_QWORD *)this + 16);
      goto LABEL_11;
    }
  }
  v8 = 0;
LABEL_11:
  v9 = PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  if ((*((_BYTE *)this + 152) & 4) != 0)
    v10 = *((unsigned int *)this + 36);
  else
    v10 = 0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

uint64_t CMMsl::AveragedALSData::AveragedALSData(uint64_t this)
{
  *(_QWORD *)this = off_10034FD80;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FD80;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::AveragedALSData::~AveragedALSData(CMMsl::AveragedALSData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::AveragedALSData::AveragedALSData(CMMsl::AveragedALSData *this, const CMMsl::AveragedALSData *a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = off_10034FD80;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = off_10034FD80;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::AveragedALSData::operator=(uint64_t a1, uint64_t a2, double a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v11[0] = off_10034FD80;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a4;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::AveragedALSData *a2, CMMsl::AveragedALSData *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::AveragedALSData::AveragedALSData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034FD80;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034FD80;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::AveragedALSData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_10034FD80;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::AveragedALSData::formatText(CMMsl::AveragedALSData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "alsTrustedLux", *((float *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::AveragedALSData::readFrom(CMMsl::AveragedALSData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
      }
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::AveragedALSData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::AveragedALSData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::AveragedALSData::hash_value(CMMsl::AveragedALSData *this)
{
  double v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::BTConnection::BTConnection(uint64_t this)
{
  *(_QWORD *)this = off_10034FDB8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FDB8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BTConnection::~BTConnection(CMMsl::BTConnection *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BTConnection::BTConnection(uint64_t this, const CMMsl::BTConnection *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)this = off_10034FDB8;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 28) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 28) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_BYTE *)a2 + 24);
    *(_BYTE *)(this + 28) = v3 | 4;
    *(_BYTE *)(this + 24) = v6;
  }
  return this;
}

uint64_t CMMsl::BTConnection::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  char v4;
  char v6;
  char v7;
  int v8;
  __int128 v9;
  void (**v11)(CMMsl::BTConnection *__hidden);
  __int128 v12;
  char v13;
  int v14;

  if (a1 != a2)
  {
    v11 = off_10034FDB8;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      v7 = 2;
      LOBYTE(v14) = 2;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 8);
        v7 |= 1u;
        LOBYTE(v14) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v4 = *(_BYTE *)(a2 + 24);
      LOBYTE(v14) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v14;
    v14 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v12 = v9;
    LOBYTE(v8) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v4;
    v13 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BTConnection *a2, CMMsl::BTConnection *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v3;
  return result;
}

double CMMsl::BTConnection::BTConnection(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034FDB8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034FDB8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t CMMsl::BTConnection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::BTConnection *__hidden);
  __int128 v9;
  char v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_10034FDB8;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_BYTE *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 28);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v4;
    v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::BTConnection::formatText(CMMsl::BTConnection *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "fEndTime", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "fConnected", *((_BYTE *)this + 24));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "fStartTime", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BTConnection::readFrom(CMMsl::BTConnection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 24) = v22;
        goto LABEL_38;
      }
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 28) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_31;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_38;
        }
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_31:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_38;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 8;
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::BTConnection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(_BYTE *)(v3 + 24), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 24), 3u);
  return this;
}

BOOL CMMsl::BTConnection::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::BTConnection::hash_value(CMMsl::BTConnection *this)
{
  double v1;
  double v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 1);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_6;
LABEL_11:
      v3 = 0;
      return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((unsigned __int8 *)this + 24);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3;
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_10034FDF0;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_10034FDF0;
  return this;
}

void CMMsl::BacklightState::~BacklightState(CMMsl::BacklightState *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_10034FDF0;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_100011294((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

{
  CMMsl::BacklightState::~BacklightState(this);
  operator delete();
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t this, const CMMsl::BacklightState *a2)
{
  int v2;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = off_10034FDF0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 28) = 0;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) = 1;
    *(_DWORD *)(this + 24) = v2;
  }
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  return this;
}

uint64_t CMMsl::BacklightState::operator=(uint64_t a1, const CMMsl::BacklightState *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::BacklightState *)a1 != a2)
  {
    CMMsl::BacklightState::BacklightState((uint64_t)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::BacklightState::~BacklightState((CMMsl::BacklightState *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BacklightState *a2, CMMsl::BacklightState *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  return this;
}

uint64_t CMMsl::BacklightState::BacklightState(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_10034FDF0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *v4;
  *v4 = v6;
  if (v7)
    sub_100011294((uint64_t)v4, v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *v5;
  *v5 = v8;
  if (v9)
    sub_100011294(a1 + 16, v9);
  return a1;
}

uint64_t CMMsl::BacklightState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if (a1 != a2)
  {
    CMMsl::BacklightState::BacklightState((uint64_t)&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::BacklightState::~BacklightState((CMMsl::BacklightState *)&v6);
  }
  return a1;
}

uint64_t CMMsl::BacklightState::formatText(CMMsl::BacklightState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 28) & 1) != 0)
    PB::TextFormatter::format(a2, "backlightState", *((_DWORD *)this + 6));
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "backlightStateChangeSourceEvent");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format(a2, "backlightStateSuppressionEventReason");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BacklightState::readFrom(CMMsl::BacklightState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        operator new();
      if ((_DWORD)v20 == 2)
        operator new();
      if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 28) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_45;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_41:
              LODWORD(v26) = 0;
              goto LABEL_45;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_41;
          }
        }
LABEL_45:
        *((_DWORD *)this + 6) = v26;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BacklightState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  if ((*(_BYTE *)(this + 28) & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    this = PB::Writer::write(a2, v4, 2);
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
    return PB::Writer::write(a2, v5, 3);
  return this;
}

uint64_t CMMsl::BacklightState::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_26;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_26:
  v12 = *(unsigned __int8 **)(a1 + 16);
  v13 = *(unsigned __int8 ***)(a2 + 16);
  result = v13 == 0;
  if (!v12)
    return result;
  if (!v13)
    return 0;
  v14 = v12[23];
  if ((v14 & 0x80u) == 0)
    v15 = (unsigned __int8 *)v12[23];
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  v17 = (char)v16;
  if ((char)v16 < 0)
    v16 = v13[1];
  if (v15 != v16)
    return 0;
  if (v17 >= 0)
    v18 = *(unsigned __int8 **)(a2 + 16);
  else
    v18 = *v13;
  if ((v14 & 0x80) != 0)
    return !memcmp(*(const void **)v12, v18, *((_QWORD *)v12 + 1));
  if (!v12[23])
    return 1;
  v19 = v14 - 1;
  do
  {
    v21 = *v12++;
    v20 = v21;
    v23 = *v18++;
    v22 = v23;
    v25 = v19-- != 0;
    result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

unint64_t CMMsl::BacklightState::hash_value(CMMsl::BacklightState *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;
  char v9;

  if ((*((_BYTE *)this + 28) & 1) != 0)
    v2 = *((unsigned int *)this + 6);
  else
    v2 = 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    v4 = sub_1000112DC((uint64_t)&v8, v3);
  else
    v4 = 0;
  v5 = *((_QWORD *)this + 2);
  if (v5)
    v6 = sub_1000112DC((uint64_t)&v9, v5);
  else
    v6 = 0;
  return v4 ^ v2 ^ v6;
}

uint64_t CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t this)
{
  *(_QWORD *)this = off_10034FE28;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FE28;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BasebandCompassCoex::~BasebandCompassCoex(CMMsl::BasebandCompassCoex *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t this, const CMMsl::BasebandCompassCoex *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;

  *(_QWORD *)this = off_10034FE28;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 28) = v3 | 2;
    *(_DWORD *)(this + 16) = v7;
    return this;
  }
  v6 = *((_BYTE *)a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(this + 28) = v3;
  *(_BYTE *)(this + 24) = v6;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::BasebandCompassCoex::operator=(uint64_t a1, const CMMsl::BasebandCompassCoex *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;

  if ((const CMMsl::BasebandCompassCoex *)a1 != a2)
  {
    CMMsl::BasebandCompassCoex::BasebandCompassCoex((uint64_t)&v8, a2);
    v3 = v10;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v11;
    v11 = v6;
    v9 = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BasebandCompassCoex *a2, CMMsl::BasebandCompassCoex *a3)
{
  int v3;
  double result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::BasebandCompassCoex::BasebandCompassCoex(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034FE28;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034FE28;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BasebandCompassCoex::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD v9[3];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_BYTE *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a1 + 24);
    *(_BYTE *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = off_10034FE28;
    v11 = *(_DWORD *)(a1 + 28);
    v10 = v7;
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BasebandCompassCoex::formatText(CMMsl::BasebandCompassCoex *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "inCoex", *((_BYTE *)this + 24));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "subType", *((_DWORD *)this + 5));
      if ((*((_BYTE *)this + 28) & 1) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "reserved", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandCompassCoex::readFrom(CMMsl::BasebandCompassCoex *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 28) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_70;
            case 2u:
              *((_BYTE *)this + 28) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_64;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    v2 = v37 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_63;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_64;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *((_DWORD *)this + 5) = v25;
              goto LABEL_70;
            case 3u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 24) = v28;
              goto LABEL_70;
            case 4u:
              *((_BYTE *)this + 28) |= 2u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_69;
                  }
                  v41 = v29++;
                  v42 = *(_BYTE *)(v30 + v41);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_68:
                    v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_68;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_69;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_69:
              *((_DWORD *)this + 4) = v33;
LABEL_70:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BasebandCompassCoex::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 4u);
  return this;
}

BOOL CMMsl::BasebandCompassCoex::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BasebandCompassCoex::hash_value(CMMsl::BasebandCompassCoex *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 5);
      if ((*((_BYTE *)this + 28) & 8) != 0)
        goto LABEL_4;
LABEL_10:
      v3 = 0;
      if ((*((_BYTE *)this + 28) & 2) != 0)
        goto LABEL_5;
LABEL_11:
      v4 = 0;
      return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_10;
LABEL_4:
  v3 = *((unsigned __int8 *)this + 24);
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_5:
  v4 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t this)
{
  *(_QWORD *)this = off_10034FE60;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FE60;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::BasebandCompassCoexConstraints::~BasebandCompassCoexConstraints(CMMsl::BasebandCompassCoexConstraints *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t this, const CMMsl::BasebandCompassCoexConstraints *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  int v13;
  char v14;

  *(_QWORD *)this = off_10034FE60;
  *(_DWORD *)(this + 48) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_WORD *)(this + 48) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 48) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 40) = v6;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_BYTE *)a2 + 47);
  v3 |= 0x400u;
  *(_WORD *)(this + 48) = v3;
  *(_BYTE *)(this + 47) = v8;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_BYTE *)a2 + 45);
  v3 |= 0x100u;
  *(_WORD *)(this + 48) = v3;
  *(_BYTE *)(this + 45) = v9;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_BYTE *)a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(this + 48) = v3;
  *(_BYTE *)(this + 44) = v10;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v11;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v12;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      return this;
LABEL_24:
    v14 = *((_BYTE *)a2 + 46);
    *(_WORD *)(this + 48) = v3 | 0x200;
    *(_BYTE *)(this + 46) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 24) = v13;
  if ((*((_WORD *)a2 + 24) & 0x200) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::BasebandCompassCoexConstraints::operator=(CMMsl *a1, const CMMsl::BasebandCompassCoexConstraints *a2)
{
  CMMsl::BasebandCompassCoexConstraints *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BasebandCompassCoexConstraints *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BasebandCompassCoexConstraints *a2, CMMsl::BasebandCompassCoexConstraints *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v3) = *((_BYTE *)this + 47);
  *((_BYTE *)this + 47) = *((_BYTE *)a2 + 47);
  *((_BYTE *)a2 + 47) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 45);
  *((_BYTE *)this + 45) = *((_BYTE *)a2 + 45);
  *((_BYTE *)a2 + 45) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v3;
  v6 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v6;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v6) = *((_BYTE *)this + 46);
  *((_BYTE *)this + 46) = *((_BYTE *)a2 + 46);
  *((_BYTE *)a2 + 46) = v6;
  return result;
}

float CMMsl::BasebandCompassCoexConstraints::BasebandCompassCoexConstraints(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034FE60;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  return result;
}

CMMsl *CMMsl::BasebandCompassCoexConstraints::operator=(CMMsl *this, uint64_t a2, CMMsl::BasebandCompassCoexConstraints *a3)
{
  void (**v5)(CMMsl::BasebandCompassCoexConstraints *__hidden);
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v5 = off_10034FE60;
    v12 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v6 = *(_OWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a2 + 40);
    v9 = *(_DWORD *)(a2 + 36);
    v8 = *(_DWORD *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a2 + 44);
    CMMsl::swap(this, (CMMsl::BasebandCompassCoexConstraints *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::formatText(CMMsl::BasebandCompassCoexConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "activeCoex", *((_BYTE *)this + 44));
    v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgTemperature", *((float *)this + 6));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "blackout", *((_BYTE *)this + 45));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "gradient", *((float *)this + 7));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "instTemperature", *((float *)this + 8));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "isSettle", *((_BYTE *)this + 46));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "rapidGradientChange", *((_BYTE *)this + 47));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 10));
    if ((*((_WORD *)this + 24) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 9));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandCompassCoexConstraints::readFrom(CMMsl::BasebandCompassCoexConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 24) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_30;
            case 2u:
              *((_WORD *)this + 24) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_30:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_75;
            case 3u:
              *((_WORD *)this + 24) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 4u:
              *((_WORD *)this + 24) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 5u:
              *((_WORD *)this + 24) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 47) = v22;
              goto LABEL_81;
            case 6u:
              *((_WORD *)this + 24) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 45) = v24;
              goto LABEL_81;
            case 7u:
              *((_WORD *)this + 24) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v26 = v25 != 0;
              }
              *((_BYTE *)this + 44) = v26;
              goto LABEL_81;
            case 8u:
              *((_WORD *)this + 24) |= 0x20u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_80;
                  }
                  v37 = v27++;
                  v38 = *(_BYTE *)(v28 + v37);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_79:
                    v2 = v37 + 1;
                    goto LABEL_80;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_79;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_80;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_80:
              *((_DWORD *)this + 9) = v31;
LABEL_81:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *((_WORD *)this + 24) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_74;
            case 0xAu:
              *((_WORD *)this + 24) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_74:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_75:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_81;
            case 0xBu:
              *((_WORD *)this + 24) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 46) = v34;
              goto LABEL_81;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_81;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 3u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 47), 5u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 45), 6u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 7u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 8u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 9u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 46), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 48) & 0x200) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 46), 0xBu);
  return this;
}

BOOL CMMsl::BasebandCompassCoexConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 48);
  v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 48) & 0x200) != 0)
    return (*(_WORD *)(a2 + 48) & 0x200) != 0 && *(unsigned __int8 *)(a1 + 46) == *(unsigned __int8 *)(a2 + 46);
  return v4;
}

uint64_t CMMsl::BasebandCompassCoexConstraints::hash_value(CMMsl::BasebandCompassCoexConstraints *this)
{
  __int16 v1;
  double v2;
  double v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 2) == 0)
  {
    v2 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_26:
    v3 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_6;
LABEL_27:
    v5 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_28:
    v7 = 0;
    if ((*((_WORD *)this + 24) & 0x400) != 0)
      goto LABEL_12;
    goto LABEL_29;
  }
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_26;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_27;
LABEL_6:
  v4 = *((float *)this + 10);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_28;
LABEL_9:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_WORD *)this + 24) & 0x400) != 0)
  {
LABEL_12:
    v8 = *((unsigned __int8 *)this + 47);
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v8 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_13:
    v9 = *((unsigned __int8 *)this + 45);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v10 = *((unsigned __int8 *)this + 44);
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v10 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_15:
    v11 = *((unsigned int *)this + 9);
    if ((v1 & 0x10) != 0)
      goto LABEL_16;
LABEL_33:
    v13 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_32:
  v11 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_33;
LABEL_16:
  v12 = *((float *)this + 8);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_19:
    v14 = *((float *)this + 6);
    v15 = LODWORD(v14);
    if (v14 == 0.0)
      v15 = 0;
    if ((*((_WORD *)this + 24) & 0x200) != 0)
      goto LABEL_22;
LABEL_35:
    v16 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16;
  }
LABEL_34:
  v15 = 0;
  if ((*((_WORD *)this + 24) & 0x200) == 0)
    goto LABEL_35;
LABEL_22:
  v16 = *((unsigned __int8 *)this + 46);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16;
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t this)
{
  *(_QWORD *)this = off_10034FE98;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FE98;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::BasebandSpeed::~BasebandSpeed(CMMsl::BasebandSpeed *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t this, const CMMsl::BasebandSpeed *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_10034FE98;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 4);
      *(_BYTE *)(this + 32) = v3 | 2;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 20) = v7;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::BasebandSpeed::operator=(uint64_t a1, const CMMsl::BasebandSpeed *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::BasebandSpeed *)a1 != a2)
  {
    CMMsl::BasebandSpeed::BasebandSpeed((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BasebandSpeed *a2, CMMsl::BasebandSpeed *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BasebandSpeed::BasebandSpeed(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_10034FE98;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_10034FE98;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BasebandSpeed::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = off_10034FE98;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BasebandSpeed::formatText(CMMsl::BasebandSpeed *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "reserved", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "scaledValue", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "speedThreshold", *((_DWORD *)this + 7));
    if ((*((_BYTE *)this + 32) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "speedRange", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BasebandSpeed::readFrom(CMMsl::BasebandSpeed *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)a2 + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v53 = v20++;
                  v54 = *(_BYTE *)(v21 + v53);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_102:
                v3 = v53 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_103;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_103:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_124;
            case 2u:
              *((_BYTE *)this + 32) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_107:
                    v3 = v57 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_107;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_108;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_108:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_124;
            case 3u:
              *((_BYTE *)this + 32) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_113;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    v3 = v61 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_112;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_113;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_124;
            case 4u:
              *((_BYTE *)this + 32) |= 4u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_118;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    v3 = v65 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_117;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_118;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *((_DWORD *)this + 5) = v43;
              goto LABEL_124;
            case 5u:
              *((_BYTE *)this + 32) |= 2u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_123;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_122:
                    v3 = v69 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_122;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_123;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_123:
              *((_DWORD *)this + 4) = v49;
LABEL_124:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              goto LABEL_124;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BasebandSpeed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  return this;
}

BOOL CMMsl::BasebandSpeed::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BasebandSpeed::hash_value(CMMsl::BasebandSpeed *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 7);
      if ((*((_BYTE *)this + 32) & 8) != 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 8) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
LABEL_10:
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_6;
LABEL_11:
    v5 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_9:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_10;
LABEL_5:
  v4 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_11;
LABEL_6:
  v5 = *((unsigned int *)this + 4);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5;
}

uint64_t CMMsl::BaselineResetCheck::BaselineResetCheck(uint64_t this)
{
  *(_QWORD *)this = off_10034FED0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FED0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BaselineResetCheck::~BaselineResetCheck(CMMsl::BaselineResetCheck *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::BaselineResetCheck::BaselineResetCheck(CMMsl::BaselineResetCheck *this, const CMMsl::BaselineResetCheck *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  float result;

  *(_QWORD *)this = off_10034FED0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 25);
    v3 |= 0x10u;
    *((_BYTE *)this + 28) = v3;
    *((_BYTE *)this + 25) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_BYTE *)a2 + 24);
    v3 |= 8u;
    *((_BYTE *)this + 28) = v3;
    *((_BYTE *)this + 24) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      result = *((float *)a2 + 4);
      *((_BYTE *)this + 28) = v3 | 2;
      *((float *)this + 4) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 28) = v3;
  *((float *)this + 5) = result;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::BaselineResetCheck::operator=(uint64_t a1, const CMMsl::BaselineResetCheck *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;

  if ((const CMMsl::BaselineResetCheck *)a1 != a2)
  {
    CMMsl::BaselineResetCheck::BaselineResetCheck((CMMsl::BaselineResetCheck *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    LOWORD(v4) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v10;
    v10 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BaselineResetCheck *a2, CMMsl::BaselineResetCheck *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 25);
  *((_BYTE *)this + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a2 + 25) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v4;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::BaselineResetCheck::BaselineResetCheck(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_10034FED0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_10034FED0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::BaselineResetCheck::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  __int16 v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_WORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[0] = off_10034FED0;
    v10[1] = v6;
    LOWORD(v4) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v5;
    v11 = v4;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 28) = v3;
    *(_QWORD *)(a1 + 16) = v8;
    v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BaselineResetCheck::formatText(CMMsl::BaselineResetCheck *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "lux", *((float *)this + 4));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "minPostSUIProx", *((float *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "resetTriggered", *((_BYTE *)this + 25));
    if ((*((_BYTE *)this + 28) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "possibleObstructed", *((_BYTE *)this + 24));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BaselineResetCheck::readFrom(CMMsl::BaselineResetCheck *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 28) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_58;
                  }
                  v33 = v20++;
                  v34 = *(_BYTE *)(v21 + v33);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_57:
                v2 = v33 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_58;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_58:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_59;
            case 2u:
              *((_BYTE *)this + 28) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 25) = v28;
              goto LABEL_59;
            case 3u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 24) = v30;
              goto LABEL_59;
            case 4u:
              *((_BYTE *)this + 28) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_40;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_53;
            case 5u:
              *((_BYTE *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_53:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_40:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_59;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_59:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BaselineResetCheck::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 25), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 16), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 5u);
  return this;
}

BOOL CMMsl::BaselineResetCheck::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BaselineResetCheck::hash_value(CMMsl::BaselineResetCheck *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 25);
      if ((*((_BYTE *)this + 28) & 8) != 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 8) != 0)
  {
LABEL_4:
    v3 = *((unsigned __int8 *)this + 24);
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_5:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_8;
LABEL_15:
    v7 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v7;
  }
LABEL_14:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_8:
  v6 = *((float *)this + 4);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v2 ^ v1 ^ v3 ^ v5 ^ v7;
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t this)
{
  *(_QWORD *)this = off_10034FF08;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FF08;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BatchedLocationFromOdometer::~BatchedLocationFromOdometer(CMMsl::BatchedLocationFromOdometer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t this, const CMMsl::BatchedLocationFromOdometer *a2)
{
  int v2;

  *(_QWORD *)this = off_10034FF08;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) |= 1u;
    *(_DWORD *)(this + 16) = v2;
  }
  return this;
}

const CMMsl::BatchedLocationFromOdometer *CMMsl::BatchedLocationFromOdometer::operator=(const CMMsl::BatchedLocationFromOdometer *a1, const CMMsl::BatchedLocationFromOdometer *a2)
{
  uint64_t v3;
  uint64_t v4;
  void (**v6)(CMMsl::BatchedLocationFromOdometer *__hidden);
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer((uint64_t)&v6, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v7;
    v4 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v8;
    v8 = v4;
    v6 = off_10034FF08;
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BatchedLocationFromOdometer *a2, CMMsl::BatchedLocationFromOdometer *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::BatchedLocationFromOdometer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034FF08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_10034FF08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::BatchedLocationFromOdometer::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    v8[0] = off_10034FF08;
    v8[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::BatchedLocationFromOdometer::formatText(CMMsl::BatchedLocationFromOdometer *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "batchedLocationFixType", *((_DWORD *)this + 4));
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatchedLocationFromOdometer::readFrom(CMMsl::BatchedLocationFromOdometer *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v26;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t this)
{
  *(_QWORD *)this = off_100352BE0;
  *(_QWORD *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352BE0;
  *(_QWORD *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  return this;
}

uint64_t CMMsl::BatchedLocationFromOdometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::BatchedLocationFromOdometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::MotionGPSLocation::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

BOOL CMMsl::MotionGPSLocation::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  int v9;
  int v10;

  v2 = *(_DWORD *)(a1 + 180);
  v3 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  v9 = *(_DWORD *)(a1 + 180);
  v10 = *(_DWORD *)(a2 + 180);
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x20000) != 0)
  {
    if ((v10 & 0x20000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v10 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x80000) != 0)
  {
    if ((v10 & 0x80000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v10 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x40000) != 0)
  {
    if ((v10 & 0x40000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v10 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v9 & 0x200000) != 0)
  {
    if ((v10 & 0x200000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156))
      return 0;
  }
  else if ((v10 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x400000) != 0)
  {
    if ((v10 & 0x400000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v10 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x10000) != 0)
  {
    if ((v10 & 0x10000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v10 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v9 & 0x100000) != 0)
  {
    if ((v10 & 0x100000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v10 & 0x100000) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a2 + 112);
  if (v4)
  {
    if (!v5 || !CMMsl::TrackRunData::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((v9 & 0x8000) != 0)
  {
    if ((v10 & 0x8000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132))
      return 0;
  }
  else if ((v10 & 0x8000) != 0)
  {
    return 0;
  }
  result = (v10 & 0x4000) == 0;
  if ((v9 & 0x4000) == 0)
    return result;
  return (v10 & 0x4000) != 0 && *(float *)(a1 + 128) == *(float *)(a2 + 128);
}

unint64_t CMMsl::BatchedLocationFromOdometer::hash_value(CMMsl::BatchedLocationFromOdometer *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::MotionGPSLocation::hash_value((CMMsl::MotionGPSLocation *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((unsigned int *)this + 4);
  else
    v3 = 0;
  return v3 ^ v2;
}

uint64_t CMMsl::BatchedLocationFromOdometer::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t this)
{
  *(_QWORD *)this = off_10034FF40;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FF40;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::BatterySaverModeStatus::~BatterySaverModeStatus(CMMsl::BatterySaverModeStatus *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t this, const CMMsl::BatterySaverModeStatus *a2)
{
  char v2;

  *(_QWORD *)this = off_10034FF40;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(_QWORD *)this = off_10034FF40;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::BatterySaverModeStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_10034FF40;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::BatterySaverModeStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_10034FF40;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BatterySaverModeStatus *a2, CMMsl::BatterySaverModeStatus *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::BatterySaverModeStatus::BatterySaverModeStatus(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_10034FF40;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_10034FF40;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::BatterySaverModeStatus::formatText(CMMsl::BatterySaverModeStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "isBatterySaverModeEnabled", *((_BYTE *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatterySaverModeStatus::readFrom(CMMsl::BatterySaverModeStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BatterySaverModeStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::BatterySaverModeStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

uint64_t CMMsl::BatterySaverModeStatus::hash_value(CMMsl::BatterySaverModeStatus *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

uint64_t CMMsl::BatteryStatus::BatteryStatus(uint64_t this)
{
  *(_QWORD *)this = off_10034FF78;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FF78;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BatteryStatus::~BatteryStatus(CMMsl::BatteryStatus *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BatteryStatus::BatteryStatus(uint64_t this, const CMMsl::BatteryStatus *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  int v7;
  char v8;
  int v9;

  *(_QWORD *)this = off_10034FF78;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(this + 28) = v3;
    *(_BYTE *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_BYTE *)a2 + 25);
    v3 |= 0x10u;
    *(_BYTE *)(this + 28) = v3;
    *(_BYTE *)(this + 25) = v6;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_BYTE *)(this + 28) = v3;
  *(_DWORD *)(this + 20) = v7;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      return this;
LABEL_14:
    v9 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 28) = v3 | 2;
    *(_DWORD *)(this + 16) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_BYTE *)a2 + 26);
  v3 |= 0x20u;
  *(_BYTE *)(this + 28) = v3;
  *(_BYTE *)(this + 26) = v8;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::BatteryStatus::operator=(uint64_t a1, const CMMsl::BatteryStatus *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  int v13;

  if ((const CMMsl::BatteryStatus *)a1 != a2)
  {
    CMMsl::BatteryStatus::BatteryStatus((uint64_t)&v8, a2);
    v3 = v10;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    LOWORD(v6) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v11;
    v11 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(a1 + 26) = v12;
    v12 = v6;
    v9 = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BatteryStatus *a2, CMMsl::BatteryStatus *a3)
{
  int v3;
  double result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 25);
  *((_BYTE *)this + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a2 + 25) = v3;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 26);
  *((_BYTE *)this + 26) = *((_BYTE *)a2 + 26);
  *((_BYTE *)a2 + 26) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::BatteryStatus::BatteryStatus(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_10034FF78;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_10034FF78;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BatteryStatus::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int16 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  _QWORD v10[3];
  __int16 v11;
  char v12;
  int v13;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_WORD *)(a2 + 24);
    v5 = *(_BYTE *)(a2 + 26);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v8 = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 26);
    *(_BYTE *)(a1 + 26) = v5;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v10[0] = off_10034FF78;
    v13 = *(_DWORD *)(a1 + 28);
    v11 = v8;
    v12 = v4;
    *(_DWORD *)(a1 + 28) = v3;
    v10[1] = v6;
    v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BatteryStatus::formatText(CMMsl::BatteryStatus *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "charged", *((_BYTE *)this + 24));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "chargerFamily", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "chargerType", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "level", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "connected", *((_BYTE *)this + 25));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "wasConnected", *((_BYTE *)this + 26));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BatteryStatus::readFrom(CMMsl::BatteryStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 28) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_78;
            case 2u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 24) = v22;
              goto LABEL_78;
            case 3u:
              *((_BYTE *)this + 28) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 25) = v24;
              goto LABEL_78;
            case 4u:
              *((_BYTE *)this + 28) |= 4u;
              v25 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v26 = *(_QWORD *)a2;
              if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v29 = 0;
                if (v2 <= v25)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v25)
                  {
                    LODWORD(v29) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  v41 = v25++;
                  v42 = *(_BYTE *)(v26 + v41);
                  *((_QWORD *)a2 + 1) = v25;
                  v29 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v29) = 0;
LABEL_71:
                    v2 = v41 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v29) = 0;
                goto LABEL_71;
              }
              v27 = 0;
              v28 = 0;
              v29 = 0;
              do
              {
                v2 = v25 + 1;
                *((_QWORD *)a2 + 1) = v25 + 1;
                v30 = *(_BYTE *)(v26 + v25);
                v29 |= (unint64_t)(v30 & 0x7F) << v27;
                if ((v30 & 0x80) == 0)
                  goto LABEL_72;
                v27 += 7;
                v25 = v2;
                v14 = v28++ > 8;
              }
              while (!v14);
              LODWORD(v29) = 0;
LABEL_72:
              *((_DWORD *)this + 5) = v29;
              goto LABEL_78;
            case 5u:
              *((_BYTE *)this + 28) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v32 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v32 = v31 != 0;
              }
              *((_BYTE *)this + 26) = v32;
              goto LABEL_78;
            case 6u:
              *((_BYTE *)this + 28) |= 2u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_77;
                  }
                  v45 = v33++;
                  v46 = *(_BYTE *)(v34 + v45);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_76:
                    v2 = v45 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_76;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_77;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_77:
              *((_DWORD *)this + 4) = v37;
LABEL_78:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_78;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BatteryStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 25), 3u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 4u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 6u);
  }
LABEL_12:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 26), 5u);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 6u);
  return this;
}

BOOL CMMsl::BatteryStatus::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 26) != *(unsigned __int8 *)(a2 + 26))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 0x20) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BatteryStatus::hash_value(CMMsl::BatteryStatus *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 24);
      if ((*((_BYTE *)this + 28) & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 28) & 0x10) != 0)
  {
LABEL_4:
    v3 = *((unsigned __int8 *)this + 25);
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_5:
    v4 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 28) & 0x20) != 0)
      goto LABEL_6;
LABEL_14:
    v5 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_7;
LABEL_15:
    v6 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6;
  }
LABEL_13:
  v4 = 0;
  if ((*((_BYTE *)this + 28) & 0x20) == 0)
    goto LABEL_14;
LABEL_6:
  v5 = *((unsigned __int8 *)this + 26);
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_7:
  v6 = *((int *)this + 4);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5 ^ v6;
}

uint64_t CMMsl::BioMotionAnchor::BioMotionAnchor(uint64_t this)
{
  *(_QWORD *)this = off_10034FFB0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_10034FFB0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::BioMotionAnchor::~BioMotionAnchor(CMMsl::BioMotionAnchor *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_10034FFB0;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::BioMotionAnchor::~BioMotionAnchor(this);
  operator delete();
}

CMMsl::BioMotionAnchor *CMMsl::BioMotionAnchor::BioMotionAnchor(CMMsl::BioMotionAnchor *this, const CMMsl::BioMotionAnchor *a2)
{
  char v4;
  uint64_t v5;
  char v6;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_10034FFB0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((_QWORD *)a2 + 5))
    operator new();
  if (this != a2)
    sub_100239350((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  v4 = *((_BYTE *)a2 + 52);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 4);
    *((_BYTE *)this + 52) |= 1u;
    *((_QWORD *)this + 4) = v5;
    v4 = *((_BYTE *)a2 + 52);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_BYTE *)a2 + 48);
    *((_BYTE *)this + 52) |= 2u;
    *((_BYTE *)this + 48) = v6;
  }
  return this;
}

uint64_t CMMsl::BioMotionAnchor::operator=(uint64_t a1, const CMMsl::BioMotionAnchor *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;

  if ((const CMMsl::BioMotionAnchor *)a1 != a2)
  {
    CMMsl::BioMotionAnchor::BioMotionAnchor((CMMsl::BioMotionAnchor *)v9, a2);
    v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v14;
    v14 = v6;
    CMMsl::BioMotionAnchor::~BioMotionAnchor((CMMsl::BioMotionAnchor *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionAnchor *a2, CMMsl::BioMotionAnchor *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  LOBYTE(v7) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v7;
  return result;
}

uint64_t CMMsl::BioMotionAnchor::BioMotionAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_10034FFB0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t CMMsl::BioMotionAnchor::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    CMMsl::BioMotionAnchor::BioMotionAnchor((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    v15 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    v12 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 48);
    *(_BYTE *)(a1 + 48) = v14;
    v14 = v6;
    CMMsl::BioMotionAnchor::~BioMotionAnchor((CMMsl::BioMotionAnchor *)v9);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchor::formatText(CMMsl::BioMotionAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 52) & 1) != 0)
    PB::TextFormatter::format(a2, "bioMotionTimestamp", *((double *)this + 4));
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "pose");
  if ((*((_BYTE *)this + 52) & 2) != 0)
    PB::TextFormatter::format(a2, "runSmoother", *((_BYTE *)this + 48));
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "velocity", v8);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionAnchor::readFrom(CMMsl::BioMotionAnchor *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE v55[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    while (1)
    {
      v10 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v22 = v13 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if (v22 == 2)
          {
            if ((PB::Reader::placeMark(a2, v55) & 1) != 0)
              return 0;
            v23 = *((_QWORD *)a2 + 1);
            v24 = *((_QWORD *)a2 + 2);
            while (v23 < v24 && !*((_BYTE *)a2 + 24))
            {
              v26 = (char *)*((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 3);
              if ((unint64_t)v26 >= v25)
              {
                v28 = (char *)*v8;
                v29 = (v26 - (_BYTE *)*v8) >> 3;
                v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 61)
                  goto LABEL_88;
                v31 = v25 - (_QWORD)v28;
                if (v31 >> 2 > v30)
                  v30 = v31 >> 2;
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                  v32 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v32 = v30;
                if (v32)
                {
                  v33 = (char *)sub_10000D60C((uint64_t)v9, v32);
                  v28 = (char *)*((_QWORD *)this + 1);
                  v26 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v33 = 0;
                }
                v34 = &v33[8 * v29];
                *(_QWORD *)v34 = 0;
                v27 = v34 + 8;
                while (v26 != v28)
                {
                  v35 = *((_QWORD *)v26 - 1);
                  v26 -= 8;
                  *((_QWORD *)v34 - 1) = v35;
                  v34 -= 8;
                }
                *((_QWORD *)this + 1) = v34;
                *((_QWORD *)this + 2) = v27;
                *((_QWORD *)this + 3) = &v33[8 * v32];
                if (v28)
                  operator delete(v28);
              }
              else
              {
                *(_QWORD *)v26 = 0;
                v27 = v26 + 8;
              }
              *((_QWORD *)this + 2) = v27;
              v36 = *((_QWORD *)a2 + 1);
              if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)a2 + 2))
              {
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v27 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v36);
              v24 = *((_QWORD *)a2 + 2);
              v23 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v23;
            }
            PB::Reader::recallMark(a2, v55);
          }
          else
          {
            v43 = (char *)*((_QWORD *)this + 2);
            v42 = *((_QWORD *)this + 3);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v8;
              v46 = (v43 - (_BYTE *)*v8) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
LABEL_88:
                sub_10000D5F8();
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_10000D60C((uint64_t)v9, v49);
                v45 = (char *)*((_QWORD *)this + 1);
                v43 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[8 * v46];
              *(_QWORD *)v51 = 0;
              v44 = v51 + 8;
              while (v43 != v45)
              {
                v52 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v51 - 1) = v52;
                v51 -= 8;
              }
              *((_QWORD *)this + 1) = v51;
              *((_QWORD *)this + 2) = v44;
              *((_QWORD *)this + 3) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v43 = 0;
              v44 = v43 + 8;
            }
            *((_QWORD *)this + 2) = v44;
            v53 = *((_QWORD *)a2 + 1);
            if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
LABEL_79:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_77:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_80:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 3u:
          *((_BYTE *)this + 52) |= 1u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_77;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v37);
          goto LABEL_79;
        case 4u:
          *((_BYTE *)this + 52) |= 2u;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 >= *((_QWORD *)a2 + 2))
          {
            v41 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v39 = v38 + 1;
            v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v38);
            *((_QWORD *)a2 + 1) = v39;
            v41 = v40 != 0;
          }
          *((_BYTE *)this + 48) = v41;
          goto LABEL_80;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0)
            return 0;
          goto LABEL_80;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::Pose::Pose(CMMsl::Pose *this)
{
  double result;

  *(_QWORD *)this = off_100353858;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100353858;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::BioMotionAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = this;
  v4 = *(const PB::Base **)(this + 40);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 2u);
  }
  v8 = *(_BYTE *)(v3 + 52);
  if ((v8 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
    v8 = *(_BYTE *)(v3 + 52);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 48), 4u);
  return this;
}

BOOL CMMsl::BioMotionAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(_QWORD *)(a2 + 16) - (_QWORD)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8)
        return 0;
      ++v7;
      ++v8;
    }
    if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 52) & 1) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 52) & 2) == 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      return result;
    if ((*(_BYTE *)(a2 + 52) & 2) != 0 && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
      return 1;
  }
  return 0;
}

BOOL CMMsl::Pose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 8;
  do
  {
    v9 = *v7++;
    result = *(double *)(v8 - 8) == v9;
    v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::BioMotionAnchor::hash_value(CMMsl::BioMotionAnchor *this)
{
  CMMsl::Pose *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v2 = (CMMsl::Pose *)*((_QWORD *)this + 5);
  if (v2)
    v3 = CMMsl::Pose::hash_value(v2);
  else
    v3 = 0;
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 52) & 1) != 0)
  {
    v5 = *((double *)this + 4);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 52) & 2) != 0)
      goto LABEL_6;
LABEL_10:
    v6 = 0;
    return v4 ^ v3 ^ *(_QWORD *)&v5 ^ v6;
  }
  v5 = 0.0;
  if ((*((_BYTE *)this + 52) & 2) == 0)
    goto LABEL_10;
LABEL_6:
  v6 = *((unsigned __int8 *)this + 48);
  return v4 ^ v3 ^ *(_QWORD *)&v5 ^ v6;
}

uint64_t CMMsl::BioMotionAnchor::makePose(uint64_t this)
{
  if (!*(_QWORD *)(this + 40))
    operator new();
  return this;
}

_QWORD *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(_QWORD *this)
{
  *this = off_10034FFE8;
  this[1] = 0;
  return this;
}

{
  *this = off_10034FFE8;
  this[1] = 0;
  return this;
}

void CMMsl::BioMotionAnchorPose::~BioMotionAnchorPose(CMMsl::BioMotionAnchorPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FFE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FFE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_10034FFE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(_QWORD *this, const CMMsl::BioMotionAnchorPose *a2)
{
  *this = off_10034FFE8;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::BioMotionAnchorPose *CMMsl::BioMotionAnchorPose::operator=(const CMMsl::BioMotionAnchorPose *a1, const CMMsl::BioMotionAnchorPose *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::BioMotionAnchorPose *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_10034FFE8;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BioMotionAnchorPose *a2, CMMsl::BioMotionAnchorPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::BioMotionAnchorPose::BioMotionAnchorPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034FFE8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_10034FFE8;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::BioMotionAnchorPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_10034FFE8;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::BioMotionAnchorPose::formatText(CMMsl::BioMotionAnchorPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionAnchorPose::readFrom(CMMsl::BioMotionAnchorPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionAnchorPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::BioMotionAnchorPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionAnchor::operator==(v2, v3);
  return result;
}

CMMsl::BioMotionAnchor *CMMsl::BioMotionAnchorPose::hash_value(CMMsl::BioMotionAnchorPose *this)
{
  CMMsl::BioMotionAnchor *result;

  result = (CMMsl::BioMotionAnchor *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionAnchor *)CMMsl::BioMotionAnchor::hash_value(result);
  return result;
}

uint64_t CMMsl::BioMotionAnchorPose::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::BioMotionClassification::BioMotionClassification(uint64_t this)
{
  *(_QWORD *)this = off_100350020;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350020;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::BioMotionClassification::~BioMotionClassification(CMMsl::BioMotionClassification *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::BioMotionClassification::BioMotionClassification(CMMsl::BioMotionClassification *this, const CMMsl::BioMotionClassification *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_100350020;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) != 0)
  {
    result = *((double *)a2 + 5);
    v3 = 16;
    *((_BYTE *)this + 48) = 16;
    *((double *)this + 5) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        return result;
LABEL_12:
      result = *((double *)a2 + 1);
      *((_BYTE *)this + 48) = v3 | 1;
      *((double *)this + 1) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 48) = v3;
  *((double *)this + 3) = result;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::BioMotionClassification::operator=(uint64_t a1, const CMMsl::BioMotionClassification *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if ((const CMMsl::BioMotionClassification *)a1 != a2)
  {
    CMMsl::BioMotionClassification::BioMotionClassification((CMMsl::BioMotionClassification *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionClassification *a2, CMMsl::BioMotionClassification *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::BioMotionClassification::BioMotionClassification(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350020;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350020;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::BioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::BioMotionClassification *__hidden);
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    v10 = off_100350020;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 40);
    v14 = *(_DWORD *)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 40);
    v5 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_QWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 8) = v7;
    v11 = v6;
    v12 = v5;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionClassification::formatText(CMMsl::BioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "probabilityGenericMotion", *((double *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "probabilityHeadMotion", *((double *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "probabilityTorsoMotion", *((double *)this + 4));
    if ((*((_BYTE *)this + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "probabilityPedestrianMotion", *((double *)this + 3));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionClassification::readFrom(CMMsl::BioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 48) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 2u:
          *((_BYTE *)this + 48) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 3u:
          *((_BYTE *)this + 48) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 4u:
          *((_BYTE *)this + 48) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 5u:
          *((_BYTE *)this + 48) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_40:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  return this;
}

BOOL CMMsl::BioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::BioMotionClassification::hash_value(CMMsl::BioMotionClassification *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;

  if ((*((_BYTE *)this + 48) & 0x10) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_3;
LABEL_18:
    v2 = 0.0;
    if ((*((_BYTE *)this + 48) & 8) != 0)
      goto LABEL_6;
LABEL_19:
    v3 = 0.0;
    if ((*((_BYTE *)this + 48) & 4) != 0)
      goto LABEL_9;
    goto LABEL_20;
  }
  v1 = *((double *)this + 5);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 48) & 2) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 48) & 8) == 0)
    goto LABEL_19;
LABEL_6:
  v3 = *((double *)this + 4);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 48) & 4) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 3);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_12;
LABEL_21:
    v5 = 0.0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
  }
LABEL_20:
  v4 = 0.0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_21;
LABEL_12:
  v5 = *((double *)this + 1);
  if (v5 == 0.0)
    v5 = 0.0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5;
}

double CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  double result;

  *(_QWORD *)this = off_100350058;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100350058;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_100350058;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters(this);
  operator delete();
}

CMMsl::BioMotionLinkLengthFitParameters *CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(CMMsl::BioMotionLinkLengthFitParameters *this, const CMMsl::BioMotionLinkLengthFitParameters *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_100350058;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_BYTE *)a2 + 144) & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 15);
    *((_BYTE *)this + 144) = 4;
    *((_QWORD *)this + 15) = v6;
  }
  if (this != a2)
  {
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v7 = *((_BYTE *)a2 + 144);
  if ((v7 & 1) != 0)
  {
    v10 = *((_QWORD *)a2 + 13);
    *((_BYTE *)this + 144) |= 1u;
    *((_QWORD *)this + 13) = v10;
    v7 = *((_BYTE *)a2 + 144);
    if ((v7 & 2) == 0)
    {
LABEL_7:
      if ((v7 & 8) == 0)
        goto LABEL_8;
LABEL_13:
      v12 = *((_QWORD *)a2 + 16);
      *((_BYTE *)this + 144) |= 8u;
      *((_QWORD *)this + 16) = v12;
      if ((*((_BYTE *)a2 + 144) & 0x10) == 0)
        return this;
      goto LABEL_9;
    }
  }
  else if ((*((_BYTE *)a2 + 144) & 2) == 0)
  {
    goto LABEL_7;
  }
  v11 = *((_QWORD *)a2 + 14);
  *((_BYTE *)this + 144) |= 2u;
  *((_QWORD *)this + 14) = v11;
  v7 = *((_BYTE *)a2 + 144);
  if ((v7 & 8) != 0)
    goto LABEL_13;
LABEL_8:
  if ((v7 & 0x10) != 0)
  {
LABEL_9:
    v8 = *((_QWORD *)a2 + 17);
    *((_BYTE *)this + 144) |= 0x10u;
    *((_QWORD *)this + 17) = v8;
  }
  return this;
}

CMMsl *CMMsl::BioMotionLinkLengthFitParameters::operator=(CMMsl *a1, const CMMsl::BioMotionLinkLengthFitParameters *a2)
{
  CMMsl::BioMotionLinkLengthFitParameters *v3;
  _BYTE v5[152];

  if (a1 != a2)
  {
    CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionLinkLengthFitParameters *)v5, v3);
    CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionLinkLengthFitParameters *a2, CMMsl::BioMotionLinkLengthFitParameters *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;

  v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v9;
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v16;
  v17 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v17;
  v18 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v18;
  v19 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v19;
  result = *((double *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((double *)a2 + 17) = result;
  return result;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100350058;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 80, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::BioMotionLinkLengthFitParameters::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::BioMotionLinkLengthFitParameters *v3;
  _BYTE v5[152];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionLinkLengthFitParameters::BioMotionLinkLengthFitParameters((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionLinkLengthFitParameters *)v5, v3);
    CMMsl::BioMotionLinkLengthFitParameters::~BioMotionLinkLengthFitParameters((CMMsl::BioMotionLinkLengthFitParameters *)v5);
  }
  return a1;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::formatText(CMMsl::BioMotionLinkLengthFitParameters *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  char v17;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "centerOfRotationEstVars", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "centerOfRotationEsts", v10);
  }
  v11 = (double *)*((_QWORD *)this + 7);
  v12 = (double *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "linkLengthEstVars", v13);
  }
  v14 = (double *)*((_QWORD *)this + 10);
  v15 = (double *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "linkLengthEsts", v16);
  }
  v17 = *((_BYTE *)this + 144);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "positionResidualNormMean", *((double *)this + 13));
    v17 = *((_BYTE *)this + 144);
    if ((v17 & 2) == 0)
    {
LABEL_11:
      if ((v17 & 4) == 0)
        goto LABEL_12;
      goto LABEL_18;
    }
  }
  else if ((*((_BYTE *)this + 144) & 2) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "positionResidualNormVar", *((double *)this + 14));
  v17 = *((_BYTE *)this + 144);
  if ((v17 & 4) == 0)
  {
LABEL_12:
    if ((v17 & 8) == 0)
      goto LABEL_13;
LABEL_19:
    PB::TextFormatter::format(a2, "timestampBegin", *((double *)this + 16));
    if ((*((_BYTE *)this + 144) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 15));
  v17 = *((_BYTE *)this + 144);
  if ((v17 & 8) != 0)
    goto LABEL_19;
LABEL_13:
  if ((v17 & 0x10) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "timestampEnd", *((double *)this + 17));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionLinkLengthFitParameters::readFrom(CMMsl::BioMotionLinkLengthFitParameters *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  _QWORD *v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  _BYTE v133[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 56);
    v9 = (void **)((char *)this + 8);
    v131 = (char *)this + 24;
    v132 = (char *)this + 72;
    v10 = (void **)((char *)this + 80);
    v11 = (void **)((char *)this + 32);
    v129 = (char *)this + 48;
    v130 = (char *)this + 96;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 144) |= 4u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_208;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_210;
        case 2u:
          if (v24 != 2)
          {
            v87 = (char *)*((_QWORD *)this + 5);
            v86 = *((_QWORD *)this + 6);
            if ((unint64_t)v87 >= v86)
            {
              v95 = (char *)*v11;
              v96 = (v87 - (_BYTE *)*v11) >> 3;
              v97 = v96 + 1;
              if ((unint64_t)(v96 + 1) >> 61)
LABEL_219:
                sub_10000D5F8();
              v98 = v86 - (_QWORD)v95;
              if (v98 >> 2 > v97)
                v97 = v98 >> 2;
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
                v99 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v99 = v97;
              if (v99)
              {
                v100 = (char *)sub_10000D60C((uint64_t)v129, v99);
                v95 = (char *)*((_QWORD *)this + 4);
                v87 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v100 = 0;
              }
              v119 = &v100[8 * v96];
              *(_QWORD *)v119 = 0;
              v88 = v119 + 8;
              while (v87 != v95)
              {
                v120 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v119 - 1) = v120;
                v119 -= 8;
              }
              *((_QWORD *)this + 4) = v119;
              *((_QWORD *)this + 5) = v88;
              *((_QWORD *)this + 6) = &v100[8 * v99];
              if (v95)
                operator delete(v95);
            }
            else
            {
              *(_QWORD *)v87 = 0;
              v88 = v87 + 8;
            }
            *((_QWORD *)this + 5) = v88;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark(a2, v133) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          while (v26 < v27 && !*((_BYTE *)a2 + 24))
          {
            v29 = (char *)*((_QWORD *)this + 5);
            v28 = *((_QWORD *)this + 6);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v11;
              v32 = (v29 - (_BYTE *)*v11) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_219;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_10000D60C((uint64_t)v129, v35);
                v31 = (char *)*((_QWORD *)this + 4);
                v29 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((_QWORD *)this + 4) = v37;
              *((_QWORD *)this + 5) = v30;
              *((_QWORD *)this + 6) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *((_QWORD *)this + 5) = v30;
            v39 = *((_QWORD *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_136;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
            v27 = *((_QWORD *)a2 + 2);
            v26 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v26;
          }
          goto LABEL_137;
        case 3u:
          if (v24 != 2)
          {
            v90 = (char *)*((_QWORD *)this + 11);
            v89 = *((_QWORD *)this + 12);
            if ((unint64_t)v90 >= v89)
            {
              v101 = (char *)*v10;
              v102 = (v90 - (_BYTE *)*v10) >> 3;
              v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 61)
LABEL_220:
                sub_10000D5F8();
              v104 = v89 - (_QWORD)v101;
              if (v104 >> 2 > v103)
                v103 = v104 >> 2;
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
                v105 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v105 = v103;
              if (v105)
              {
                v106 = (char *)sub_10000D60C((uint64_t)v130, v105);
                v101 = (char *)*((_QWORD *)this + 10);
                v90 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v106 = 0;
              }
              v121 = &v106[8 * v102];
              *(_QWORD *)v121 = 0;
              v88 = v121 + 8;
              while (v90 != v101)
              {
                v122 = *((_QWORD *)v90 - 1);
                v90 -= 8;
                *((_QWORD *)v121 - 1) = v122;
                v121 -= 8;
              }
              *((_QWORD *)this + 10) = v121;
              *((_QWORD *)this + 11) = v88;
              *((_QWORD *)this + 12) = &v106[8 * v105];
              if (v101)
                operator delete(v101);
            }
            else
            {
              *(_QWORD *)v90 = 0;
              v88 = v90 + 8;
            }
            *((_QWORD *)this + 11) = v88;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark(a2, v133) & 1) != 0)
            return 0;
          v40 = *((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          while (v40 < v41 && !*((_BYTE *)a2 + 24))
          {
            v43 = (char *)*((_QWORD *)this + 11);
            v42 = *((_QWORD *)this + 12);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v10;
              v46 = (v43 - (_BYTE *)*v10) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                goto LABEL_220;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_10000D60C((uint64_t)v130, v49);
                v45 = (char *)*((_QWORD *)this + 10);
                v43 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[8 * v46];
              *(_QWORD *)v51 = 0;
              v44 = v51 + 8;
              while (v43 != v45)
              {
                v52 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v51 - 1) = v52;
                v51 -= 8;
              }
              *((_QWORD *)this + 10) = v51;
              *((_QWORD *)this + 11) = v44;
              *((_QWORD *)this + 12) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v43 = 0;
              v44 = v43 + 8;
            }
            *((_QWORD *)this + 11) = v44;
            v53 = *((_QWORD *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_136;
            *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
            v41 = *((_QWORD *)a2 + 2);
            v40 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v40;
          }
          goto LABEL_137;
        case 4u:
          if (v24 != 2)
          {
            v92 = (char *)*((_QWORD *)this + 2);
            v91 = *((_QWORD *)this + 3);
            if ((unint64_t)v92 >= v91)
            {
              v107 = (char *)*v9;
              v108 = (v92 - (_BYTE *)*v9) >> 3;
              v109 = v108 + 1;
              if ((unint64_t)(v108 + 1) >> 61)
LABEL_221:
                sub_10000D5F8();
              v110 = v91 - (_QWORD)v107;
              if (v110 >> 2 > v109)
                v109 = v110 >> 2;
              if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
                v111 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v111 = v109;
              if (v111)
              {
                v112 = (char *)sub_10000D60C((uint64_t)v131, v111);
                v107 = (char *)*((_QWORD *)this + 1);
                v92 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v112 = 0;
              }
              v123 = &v112[8 * v108];
              *(_QWORD *)v123 = 0;
              v88 = v123 + 8;
              while (v92 != v107)
              {
                v124 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v123 - 1) = v124;
                v123 -= 8;
              }
              *((_QWORD *)this + 1) = v123;
              *((_QWORD *)this + 2) = v88;
              *((_QWORD *)this + 3) = &v112[8 * v111];
              if (v107)
                operator delete(v107);
            }
            else
            {
              *(_QWORD *)v92 = 0;
              v88 = v92 + 8;
            }
            *((_QWORD *)this + 2) = v88;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark(a2, v133) & 1) != 0)
            return 0;
          v54 = *((_QWORD *)a2 + 1);
          v55 = *((_QWORD *)a2 + 2);
          while (v54 < v55 && !*((_BYTE *)a2 + 24))
          {
            v57 = (char *)*((_QWORD *)this + 2);
            v56 = *((_QWORD *)this + 3);
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v9;
              v60 = (v57 - (_BYTE *)*v9) >> 3;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 61)
                goto LABEL_221;
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 2 > v61)
                v61 = v62 >> 2;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                v63 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_10000D60C((uint64_t)v131, v63);
                v59 = (char *)*((_QWORD *)this + 1);
                v57 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[8 * v60];
              *(_QWORD *)v65 = 0;
              v58 = v65 + 8;
              while (v57 != v59)
              {
                v66 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v65 - 1) = v66;
                v65 -= 8;
              }
              *((_QWORD *)this + 1) = v65;
              *((_QWORD *)this + 2) = v58;
              *((_QWORD *)this + 3) = &v64[8 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_QWORD *)v57 = 0;
              v58 = v57 + 8;
            }
            *((_QWORD *)this + 2) = v58;
            v67 = *((_QWORD *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_136;
            *(v58 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v67);
            v55 = *((_QWORD *)a2 + 2);
            v54 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v54;
          }
          goto LABEL_137;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v133) & 1) != 0)
              return 0;
            v68 = *((_QWORD *)a2 + 1);
            v69 = *((_QWORD *)a2 + 2);
            while (v68 < v69 && !*((_BYTE *)a2 + 24))
            {
              v71 = (char *)*((_QWORD *)this + 8);
              v70 = *((_QWORD *)this + 9);
              if ((unint64_t)v71 >= v70)
              {
                v73 = (char *)*v8;
                v74 = (v71 - (_BYTE *)*v8) >> 3;
                v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 61)
                  goto LABEL_222;
                v76 = v70 - (_QWORD)v73;
                if (v76 >> 2 > v75)
                  v75 = v76 >> 2;
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                  v77 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v77 = v75;
                if (v77)
                {
                  v78 = (char *)sub_10000D60C((uint64_t)v132, v77);
                  v73 = (char *)*((_QWORD *)this + 7);
                  v71 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v78 = 0;
                }
                v79 = &v78[8 * v74];
                *(_QWORD *)v79 = 0;
                v72 = v79 + 8;
                while (v71 != v73)
                {
                  v80 = *((_QWORD *)v71 - 1);
                  v71 -= 8;
                  *((_QWORD *)v79 - 1) = v80;
                  v79 -= 8;
                }
                *((_QWORD *)this + 7) = v79;
                *((_QWORD *)this + 8) = v72;
                *((_QWORD *)this + 9) = &v78[8 * v77];
                if (v73)
                  operator delete(v73);
              }
              else
              {
                *(_QWORD *)v71 = 0;
                v72 = v71 + 8;
              }
              *((_QWORD *)this + 8) = v72;
              v81 = *((_QWORD *)a2 + 1);
              if (v81 > 0xFFFFFFFFFFFFFFF7 || v81 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_136:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v72 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v81);
              v69 = *((_QWORD *)a2 + 2);
              v68 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v68;
            }
LABEL_137:
            PB::Reader::recallMark(a2, v133);
          }
          else
          {
            v94 = (char *)*((_QWORD *)this + 8);
            v93 = *((_QWORD *)this + 9);
            if ((unint64_t)v94 >= v93)
            {
              v113 = (char *)*v8;
              v114 = (v94 - (_BYTE *)*v8) >> 3;
              v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 61)
LABEL_222:
                sub_10000D5F8();
              v116 = v93 - (_QWORD)v113;
              if (v116 >> 2 > v115)
                v115 = v116 >> 2;
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
                v117 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v117 = v115;
              if (v117)
              {
                v118 = (char *)sub_10000D60C((uint64_t)v132, v117);
                v113 = (char *)*((_QWORD *)this + 7);
                v94 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v118 = 0;
              }
              v125 = &v118[8 * v114];
              *(_QWORD *)v125 = 0;
              v88 = v125 + 8;
              while (v94 != v113)
              {
                v126 = *((_QWORD *)v94 - 1);
                v94 -= 8;
                *((_QWORD *)v125 - 1) = v126;
                v125 -= 8;
              }
              *((_QWORD *)this + 7) = v125;
              *((_QWORD *)this + 8) = v88;
              *((_QWORD *)this + 9) = &v118[8 * v117];
              if (v113)
                operator delete(v113);
            }
            else
            {
              *(_QWORD *)v94 = 0;
              v88 = v94 + 8;
            }
            *((_QWORD *)this + 8) = v88;
LABEL_206:
            v127 = *((_QWORD *)a2 + 1);
            if (v127 <= 0xFFFFFFFFFFFFFFF7 && v127 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v88 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v127);
LABEL_210:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_208:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_211:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 6u:
          *((_BYTE *)this + 144) |= 1u;
          v82 = *((_QWORD *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFF7 || v82 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_208;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v82);
          goto LABEL_210;
        case 7u:
          *((_BYTE *)this + 144) |= 2u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFF7 || v83 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_208;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v83);
          goto LABEL_210;
        case 8u:
          *((_BYTE *)this + 144) |= 8u;
          v84 = *((_QWORD *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFF7 || v84 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_208;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v84);
          goto LABEL_210;
        case 9u:
          *((_BYTE *)this + 144) |= 0x10u;
          v85 = *((_QWORD *)a2 + 1);
          if (v85 > 0xFFFFFFFFFFFFFFF7 || v85 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_208;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v85);
          goto LABEL_210;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_211;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  char v16;

  v3 = this;
  if ((*(_BYTE *)(this + 144) & 4) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 120), 1u);
  v4 = *(double **)(v3 + 32);
  v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(double **)(v3 + 80);
  v8 = *(double **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(double **)(v3 + 8);
  v11 = *(double **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  v13 = *(double **)(v3 + 56);
  v14 = *(double **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 104), 6u);
    v16 = *(_BYTE *)(v3 + 144);
    if ((v16 & 2) == 0)
    {
LABEL_17:
      if ((v16 & 8) == 0)
        goto LABEL_18;
      goto LABEL_22;
    }
  }
  else if ((*(_BYTE *)(v3 + 144) & 2) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 7u);
  v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 8) == 0)
  {
LABEL_18:
    if ((v16 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 136), 9u);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 8u);
  if ((*(_BYTE *)(v3 + 144) & 0x10) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 136), 9u);
  return this;
}

BOOL CMMsl::BioMotionLinkLengthFitParameters::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  _BOOL8 v14;

  if ((*(_BYTE *)(a1 + 144) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 4) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 4) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 80);
  v5 = *(double **)(a1 + 88);
  v7 = *(double **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 88) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 8);
  v8 = *(double **)(a1 + 16);
  v10 = *(double **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 16) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(double **)(a1 + 56);
  v11 = *(double **)(a1 + 64);
  v13 = *(double **)(a2 + 56);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 64) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  if ((*(_BYTE *)(a1 + 144) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 144) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 2) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 144) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 8) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 8) != 0)
  {
    return 0;
  }
  v14 = (*(_BYTE *)(a2 + 144) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 144) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 144) & 0x10) != 0 && *(double *)(a1 + 136) == *(double *)(a2 + 136);
  return v14;
}

uint64_t CMMsl::BioMotionLinkLengthFitParameters::hash_value(CMMsl::BioMotionLinkLengthFitParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;

  if ((*((_BYTE *)this + 144) & 4) != 0)
  {
    if (*((double *)this + 15) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 15);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v4 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v5 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v6 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  if ((*((_BYTE *)this + 144) & 1) == 0)
  {
    v7 = 0.0;
    if ((*((_BYTE *)this + 144) & 2) != 0)
      goto LABEL_8;
LABEL_20:
    v8 = 0.0;
    if ((*((_BYTE *)this + 144) & 8) != 0)
      goto LABEL_11;
    goto LABEL_21;
  }
  v7 = *((double *)this + 13);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((*((_BYTE *)this + 144) & 2) == 0)
    goto LABEL_20;
LABEL_8:
  v8 = *((double *)this + 14);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_BYTE *)this + 144) & 8) != 0)
  {
LABEL_11:
    v9 = *((double *)this + 16);
    if (v9 == 0.0)
      v9 = 0.0;
    if ((*((_BYTE *)this + 144) & 0x10) != 0)
      goto LABEL_14;
LABEL_22:
    v10 = 0.0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
  }
LABEL_21:
  v9 = 0.0;
  if ((*((_BYTE *)this + 144) & 0x10) == 0)
    goto LABEL_22;
LABEL_14:
  v10 = *((double *)this + 17);
  if (v10 == 0.0)
    v10 = 0.0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t this)
{
  *(_QWORD *)this = off_100350090;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350090;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BioMotionOnlineLinkLengthUpdate::~BioMotionOnlineLinkLengthUpdate(CMMsl::BioMotionOnlineLinkLengthUpdate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t this, const CMMsl::BioMotionOnlineLinkLengthUpdate *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)this = off_100350090;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(this + 20) = v3;
    *(_BYTE *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_BYTE *)a2 + 18);
    *(_BYTE *)(this + 20) = v3 | 8;
    *(_BYTE *)(this + 18) = v7;
    return this;
  }
  v6 = *((_BYTE *)a2 + 17);
  v3 |= 4u;
  *(_BYTE *)(this + 20) = v3;
  *(_BYTE *)(this + 17) = v6;
  if ((*((_BYTE *)a2 + 20) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::operator=(uint64_t a1, const CMMsl::BioMotionOnlineLinkLengthUpdate *a2)
{
  int v3;
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;
  __int16 v8;
  char v9;
  int v10;

  if ((const CMMsl::BioMotionOnlineLinkLengthUpdate *)a1 != a2)
  {
    CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate((uint64_t)v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    v8 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 18);
    *(_BYTE *)(a1 + 18) = v9;
    v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionOnlineLinkLengthUpdate *a2, CMMsl::BioMotionOnlineLinkLengthUpdate *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 17);
  *((_BYTE *)this + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a2 + 17) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 18);
  *((_BYTE *)this + 18) = *((_BYTE *)a2 + 18);
  *((_BYTE *)a2 + 18) = v3;
  return result;
}

double CMMsl::BioMotionOnlineLinkLengthUpdate::BioMotionOnlineLinkLengthUpdate(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350090;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350090;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return result;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  __int16 v11;
  char v12;
  int v13;

  if (a1 != a2)
  {
    v10[0] = off_100350090;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_WORD *)(a2 + 16);
    v6 = *(_BYTE *)(a2 + 18);
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v10[1] = v8;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v5;
    v11 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 18);
    *(_BYTE *)(a1 + 18) = v6;
    v12 = v3;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::formatText(CMMsl::BioMotionOnlineLinkLengthUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestampEnd", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "updatedLinkLengthY", *((_BYTE *)this + 17));
      if ((*((_BYTE *)this + 20) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "updatedLinkLengthX", *((_BYTE *)this + 16));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "updatedLinkLengthZ", *((_BYTE *)this + 18));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::readFrom(CMMsl::BioMotionOnlineLinkLengthUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 20) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_40;
            case 2u:
              *((_BYTE *)this + 20) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 16) = v22;
              goto LABEL_40;
            case 3u:
              *((_BYTE *)this + 20) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 17) = v24;
              goto LABEL_40;
            case 4u:
              *((_BYTE *)this + 20) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v26 = v25 != 0;
              }
              *((_BYTE *)this + 18) = v26;
              goto LABEL_40;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_40:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  BOOL *v3;
  char v4;

  v3 = (BOOL *)this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = v3[20];
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, v3[16], 2u);
  v4 = v3[20];
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, v3[18], 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, v3[17], 3u);
  if ((v3[20] & 8) != 0)
    return PB::Writer::write(a2, v3[18], 4u);
  return this;
}

BOOL CMMsl::BioMotionOnlineLinkLengthUpdate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 8) == 0;
  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
    return (*(_BYTE *)(a2 + 20) & 8) != 0 && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18);
  return v2;
}

uint64_t CMMsl::BioMotionOnlineLinkLengthUpdate::hash_value(CMMsl::BioMotionOnlineLinkLengthUpdate *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned __int8 *)this + 16);
      if ((*((_BYTE *)this + 20) & 4) != 0)
        goto LABEL_4;
LABEL_10:
      v3 = 0;
      if ((*((_BYTE *)this + 20) & 8) != 0)
        goto LABEL_5;
LABEL_11:
      v4 = 0;
      return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_10;
LABEL_4:
  v3 = *((unsigned __int8 *)this + 17);
  if ((*((_BYTE *)this + 20) & 8) == 0)
    goto LABEL_11;
LABEL_5:
  v4 = *((unsigned __int8 *)this + 18);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
}

double CMMsl::BioMotionPose::BioMotionPose(CMMsl::BioMotionPose *this)
{
  double result;

  *(_QWORD *)this = off_1003500C8;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003500C8;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

void CMMsl::BioMotionPose::~BioMotionPose(CMMsl::BioMotionPose *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1003500C8;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::BioMotionPose::~BioMotionPose(this);
  operator delete();
}

CMMsl::BioMotionPose *CMMsl::BioMotionPose::BioMotionPose(CMMsl::BioMotionPose *this, const CMMsl::BioMotionPose *a2)
{
  char *v4;
  char v5;
  int v6;
  int v8;
  uint64_t v9;

  *(_QWORD *)this = off_1003500C8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 15) = 0;
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_100239350((char *)this + 104, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
  }
  v5 = *((_BYTE *)a2 + 144);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)a2 + 144) & 1) == 0)
      goto LABEL_5;
LABEL_9:
    v9 = *((_QWORD *)a2 + 16);
    *((_BYTE *)this + 144) |= 1u;
    *((_QWORD *)this + 16) = v9;
    if ((*((_BYTE *)a2 + 144) & 2) == 0)
      return this;
    goto LABEL_6;
  }
  v8 = *((_DWORD *)a2 + 35);
  *((_BYTE *)this + 144) |= 4u;
  *((_DWORD *)this + 35) = v8;
  v5 = *((_BYTE *)a2 + 144);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v5 & 2) != 0)
  {
LABEL_6:
    v6 = *((_DWORD *)a2 + 34);
    *((_BYTE *)this + 144) |= 2u;
    *((_DWORD *)this + 34) = v6;
  }
  return this;
}

CMMsl *CMMsl::BioMotionPose::operator=(CMMsl *a1, const CMMsl::BioMotionPose *a2)
{
  CMMsl::BioMotionPose *v3;
  _BYTE v5[152];

  if (a1 != a2)
  {
    CMMsl::BioMotionPose::BioMotionPose((CMMsl::BioMotionPose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionPose *)v5, v3);
    CMMsl::BioMotionPose::~BioMotionPose((CMMsl::BioMotionPose *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionPose *a2, CMMsl::BioMotionPose *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v8;
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v9;
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v10;
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v12;
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v13;
  v14 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v14;
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  v16 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v16;
  v17 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v17;
  v18 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v18;
  LODWORD(v18) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v18;
  result = *((double *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((double *)a2 + 16) = result;
  LODWORD(v18) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v18;
  return result;
}

uint64_t CMMsl::BioMotionPose::BioMotionPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1003500C8;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  v7 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v7, (__n128 *)(a2 + 56));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v5, (__n128 *)(a2 + 80));
  sub_100239458(v6, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::BioMotionPose::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::BioMotionPose *v3;
  _BYTE v5[152];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::BioMotionPose::BioMotionPose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::BioMotionPose *)v5, v3);
    CMMsl::BioMotionPose::~BioMotionPose((CMMsl::BioMotionPose *)v5);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPose::formatText(CMMsl::BioMotionPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "attitude", v7);
  }
  if ((*((_BYTE *)this + 144) & 2) != 0)
    PB::TextFormatter::format(a2, "modelType", *((_DWORD *)this + 34));
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "rotationRate", v10);
  }
  v11 = *((_BYTE *)this + 144);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 35));
    v11 = *((_BYTE *)this + 144);
  }
  if ((v11 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "translation", v14);
  }
  v15 = (double *)*((_QWORD *)this + 10);
  v16 = (double *)*((_QWORD *)this + 11);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "userAcceleration", v17);
  }
  v18 = (double *)*((_QWORD *)this + 13);
  v19 = (double *)*((_QWORD *)this + 14);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "velocity", v20);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::BioMotionPose::readFrom(CMMsl::BioMotionPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  char *v113;
  _QWORD *v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  char *v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  void **v179;
  _BYTE v180[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v178 = (char *)this + 120;
    v179 = (void **)((char *)this + 104);
    v8 = (void **)((char *)this + 80);
    v9 = (void **)((char *)this + 32);
    v176 = (char *)this + 48;
    v177 = (char *)this + 96;
    v10 = (void **)((char *)this + 56);
    v11 = (void **)((char *)this + 8);
    v174 = (char *)this + 24;
    v175 = (char *)this + 72;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            v113 = (char *)*((_QWORD *)this + 2);
            v112 = *((_QWORD *)this + 3);
            if ((unint64_t)v113 >= v112)
            {
              v131 = (char *)*v11;
              v132 = (v113 - (_BYTE *)*v11) >> 3;
              v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 61)
LABEL_286:
                sub_10000D5F8();
              v134 = v112 - (_QWORD)v131;
              if (v134 >> 2 > v133)
                v133 = v134 >> 2;
              if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
                v135 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v135 = v133;
              if (v135)
              {
                v136 = (char *)sub_10000D60C((uint64_t)v174, v135);
                v131 = (char *)*((_QWORD *)this + 1);
                v113 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v136 = 0;
              }
              v161 = &v136[8 * v132];
              *(_QWORD *)v161 = 0;
              v114 = v161 + 8;
              while (v113 != v131)
              {
                v162 = *((_QWORD *)v113 - 1);
                v113 -= 8;
                *((_QWORD *)v161 - 1) = v162;
                v161 -= 8;
              }
              *((_QWORD *)this + 1) = v161;
              *((_QWORD *)this + 2) = v114;
              *((_QWORD *)this + 3) = &v136[8 * v135];
              if (v131)
                operator delete(v131);
            }
            else
            {
              *(_QWORD *)v113 = 0;
              v114 = v113 + 8;
            }
            *((_QWORD *)this + 2) = v114;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark(a2, v180) & 1) != 0)
            return 0;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          while (v25 < v26 && !*((_BYTE *)a2 + 24))
          {
            v28 = (char *)*((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 3);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*v11;
              v31 = (v28 - (_BYTE *)*v11) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_286;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)sub_10000D60C((uint64_t)v174, v34);
                v30 = (char *)*((_QWORD *)this + 1);
                v28 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[8 * v31];
              *(_QWORD *)v36 = 0;
              v29 = v36 + 8;
              while (v28 != v30)
              {
                v37 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v36 - 1) = v37;
                v36 -= 8;
              }
              *((_QWORD *)this + 1) = v36;
              *((_QWORD *)this + 2) = v29;
              *((_QWORD *)this + 3) = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v28 = 0;
              v29 = v28 + 8;
            }
            *((_QWORD *)this + 2) = v29;
            v38 = *((_QWORD *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_162;
            *(v29 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v38);
            v26 = *((_QWORD *)a2 + 2);
            v25 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v25;
          }
          goto LABEL_163;
        case 2u:
          if (v24 != 2)
          {
            v116 = (char *)*((_QWORD *)this + 8);
            v115 = *((_QWORD *)this + 9);
            if ((unint64_t)v116 >= v115)
            {
              v137 = (char *)*v10;
              v138 = (v116 - (_BYTE *)*v10) >> 3;
              v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 61)
LABEL_287:
                sub_10000D5F8();
              v140 = v115 - (_QWORD)v137;
              if (v140 >> 2 > v139)
                v139 = v140 >> 2;
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
                v141 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v141 = v139;
              if (v141)
              {
                v142 = (char *)sub_10000D60C((uint64_t)v175, v141);
                v137 = (char *)*((_QWORD *)this + 7);
                v116 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v142 = 0;
              }
              v163 = &v142[8 * v138];
              *(_QWORD *)v163 = 0;
              v114 = v163 + 8;
              while (v116 != v137)
              {
                v164 = *((_QWORD *)v116 - 1);
                v116 -= 8;
                *((_QWORD *)v163 - 1) = v164;
                v163 -= 8;
              }
              *((_QWORD *)this + 7) = v163;
              *((_QWORD *)this + 8) = v114;
              *((_QWORD *)this + 9) = &v142[8 * v141];
              if (v137)
                operator delete(v137);
            }
            else
            {
              *(_QWORD *)v116 = 0;
              v114 = v116 + 8;
            }
            *((_QWORD *)this + 8) = v114;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark(a2, v180) & 1) != 0)
            return 0;
          v39 = *((_QWORD *)a2 + 1);
          v40 = *((_QWORD *)a2 + 2);
          while (v39 < v40 && !*((_BYTE *)a2 + 24))
          {
            v42 = (char *)*((_QWORD *)this + 8);
            v41 = *((_QWORD *)this + 9);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v10;
              v45 = (v42 - (_BYTE *)*v10) >> 3;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61)
                goto LABEL_287;
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_10000D60C((uint64_t)v175, v48);
                v44 = (char *)*((_QWORD *)this + 7);
                v42 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[8 * v45];
              *(_QWORD *)v50 = 0;
              v43 = v50 + 8;
              while (v42 != v44)
              {
                v51 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v50 - 1) = v51;
                v50 -= 8;
              }
              *((_QWORD *)this + 7) = v50;
              *((_QWORD *)this + 8) = v43;
              *((_QWORD *)this + 9) = &v49[8 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_QWORD *)v42 = 0;
              v43 = v42 + 8;
            }
            *((_QWORD *)this + 8) = v43;
            v52 = *((_QWORD *)a2 + 1);
            if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_162;
            *(v43 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v52);
            v40 = *((_QWORD *)a2 + 2);
            v39 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v39;
          }
          goto LABEL_163;
        case 3u:
          if (v24 != 2)
          {
            v118 = (char *)*((_QWORD *)this + 5);
            v117 = *((_QWORD *)this + 6);
            if ((unint64_t)v118 >= v117)
            {
              v143 = (char *)*v9;
              v144 = (v118 - (_BYTE *)*v9) >> 3;
              v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 61)
LABEL_288:
                sub_10000D5F8();
              v146 = v117 - (_QWORD)v143;
              if (v146 >> 2 > v145)
                v145 = v146 >> 2;
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
                v147 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v147 = v145;
              if (v147)
              {
                v148 = (char *)sub_10000D60C((uint64_t)v176, v147);
                v143 = (char *)*((_QWORD *)this + 4);
                v118 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v148 = 0;
              }
              v165 = &v148[8 * v144];
              *(_QWORD *)v165 = 0;
              v114 = v165 + 8;
              while (v118 != v143)
              {
                v166 = *((_QWORD *)v118 - 1);
                v118 -= 8;
                *((_QWORD *)v165 - 1) = v166;
                v165 -= 8;
              }
              *((_QWORD *)this + 4) = v165;
              *((_QWORD *)this + 5) = v114;
              *((_QWORD *)this + 6) = &v148[8 * v147];
              if (v143)
                operator delete(v143);
            }
            else
            {
              *(_QWORD *)v118 = 0;
              v114 = v118 + 8;
            }
            *((_QWORD *)this + 5) = v114;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark(a2, v180) & 1) != 0)
            return 0;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          while (v53 < v54 && !*((_BYTE *)a2 + 24))
          {
            v56 = (char *)*((_QWORD *)this + 5);
            v55 = *((_QWORD *)this + 6);
            if ((unint64_t)v56 >= v55)
            {
              v58 = (char *)*v9;
              v59 = (v56 - (_BYTE *)*v9) >> 3;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 61)
                goto LABEL_288;
              v61 = v55 - (_QWORD)v58;
              if (v61 >> 2 > v60)
                v60 = v61 >> 2;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                v62 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)sub_10000D60C((uint64_t)v176, v62);
                v58 = (char *)*((_QWORD *)this + 4);
                v56 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v63 = 0;
              }
              v64 = &v63[8 * v59];
              *(_QWORD *)v64 = 0;
              v57 = v64 + 8;
              while (v56 != v58)
              {
                v65 = *((_QWORD *)v56 - 1);
                v56 -= 8;
                *((_QWORD *)v64 - 1) = v65;
                v64 -= 8;
              }
              *((_QWORD *)this + 4) = v64;
              *((_QWORD *)this + 5) = v57;
              *((_QWORD *)this + 6) = &v63[8 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_QWORD *)v56 = 0;
              v57 = v56 + 8;
            }
            *((_QWORD *)this + 5) = v57;
            v66 = *((_QWORD *)a2 + 1);
            if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_162;
            *(v57 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v66);
            v54 = *((_QWORD *)a2 + 2);
            v53 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v53;
          }
          goto LABEL_163;
        case 4u:
          if (v24 != 2)
          {
            v120 = (char *)*((_QWORD *)this + 11);
            v119 = *((_QWORD *)this + 12);
            if ((unint64_t)v120 >= v119)
            {
              v149 = (char *)*v8;
              v150 = (v120 - (_BYTE *)*v8) >> 3;
              v151 = v150 + 1;
              if ((unint64_t)(v150 + 1) >> 61)
LABEL_289:
                sub_10000D5F8();
              v152 = v119 - (_QWORD)v149;
              if (v152 >> 2 > v151)
                v151 = v152 >> 2;
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
                v153 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v153 = v151;
              if (v153)
              {
                v154 = (char *)sub_10000D60C((uint64_t)v177, v153);
                v149 = (char *)*((_QWORD *)this + 10);
                v120 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v154 = 0;
              }
              v167 = &v154[8 * v150];
              *(_QWORD *)v167 = 0;
              v114 = v167 + 8;
              while (v120 != v149)
              {
                v168 = *((_QWORD *)v120 - 1);
                v120 -= 8;
                *((_QWORD *)v167 - 1) = v168;
                v167 -= 8;
              }
              *((_QWORD *)this + 10) = v167;
              *((_QWORD *)this + 11) = v114;
              *((_QWORD *)this + 12) = &v154[8 * v153];
              if (v149)
                operator delete(v149);
            }
            else
            {
              *(_QWORD *)v120 = 0;
              v114 = v120 + 8;
            }
            *((_QWORD *)this + 11) = v114;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark(a2, v180) & 1) != 0)
            return 0;
          v67 = *((_QWORD *)a2 + 1);
          v68 = *((_QWORD *)a2 + 2);
          while (v67 < v68 && !*((_BYTE *)a2 + 24))
          {
            v70 = (char *)*((_QWORD *)this + 11);
            v69 = *((_QWORD *)this + 12);
            if ((unint64_t)v70 >= v69)
            {
              v72 = (char *)*v8;
              v73 = (v70 - (_BYTE *)*v8) >> 3;
              v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_289;
              v75 = v69 - (_QWORD)v72;
              if (v75 >> 2 > v74)
                v74 = v75 >> 2;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v74;
              if (v76)
              {
                v77 = (char *)sub_10000D60C((uint64_t)v177, v76);
                v72 = (char *)*((_QWORD *)this + 10);
                v70 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v77 = 0;
              }
              v78 = &v77[8 * v73];
              *(_QWORD *)v78 = 0;
              v71 = v78 + 8;
              while (v70 != v72)
              {
                v79 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *((_QWORD *)v78 - 1) = v79;
                v78 -= 8;
              }
              *((_QWORD *)this + 10) = v78;
              *((_QWORD *)this + 11) = v71;
              *((_QWORD *)this + 12) = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v70 = 0;
              v71 = v70 + 8;
            }
            *((_QWORD *)this + 11) = v71;
            v80 = *((_QWORD *)a2 + 1);
            if (v80 > 0xFFFFFFFFFFFFFFF7 || v80 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_162;
            *(v71 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v80);
            v68 = *((_QWORD *)a2 + 2);
            v67 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v67;
          }
          goto LABEL_163;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v180) & 1) != 0)
              return 0;
            v81 = *((_QWORD *)a2 + 1);
            v82 = *((_QWORD *)a2 + 2);
            while (v81 < v82 && !*((_BYTE *)a2 + 24))
            {
              v84 = (char *)*((_QWORD *)this + 14);
              v83 = *((_QWORD *)this + 15);
              if ((unint64_t)v84 >= v83)
              {
                v86 = (char *)*v179;
                v87 = (v84 - (_BYTE *)*v179) >> 3;
                v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 61)
                  goto LABEL_290;
                v89 = v83 - (_QWORD)v86;
                if (v89 >> 2 > v88)
                  v88 = v89 >> 2;
                if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
                  v90 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v90 = v88;
                if (v90)
                {
                  v91 = (char *)sub_10000D60C((uint64_t)v178, v90);
                  v86 = (char *)*((_QWORD *)this + 13);
                  v84 = (char *)*((_QWORD *)this + 14);
                }
                else
                {
                  v91 = 0;
                }
                v92 = &v91[8 * v87];
                *(_QWORD *)v92 = 0;
                v85 = v92 + 8;
                while (v84 != v86)
                {
                  v93 = *((_QWORD *)v84 - 1);
                  v84 -= 8;
                  *((_QWORD *)v92 - 1) = v93;
                  v92 -= 8;
                }
                *((_QWORD *)this + 13) = v92;
                *((_QWORD *)this + 14) = v85;
                *((_QWORD *)this + 15) = &v91[8 * v90];
                if (v86)
                  operator delete(v86);
              }
              else
              {
                *(_QWORD *)v84 = 0;
                v85 = v84 + 8;
              }
              *((_QWORD *)this + 14) = v85;
              v94 = *((_QWORD *)a2 + 1);
              if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_162:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v85 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v94);
              v82 = *((_QWORD *)a2 + 2);
              v81 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v81;
            }
LABEL_163:
            PB::Reader::recallMark(a2, v180);
          }
          else
          {
            v122 = (char *)*((_QWORD *)this + 14);
            v121 = *((_QWORD *)this + 15);
            if ((unint64_t)v122 >= v121)
            {
              v155 = (char *)*v179;
              v156 = (v122 - (_BYTE *)*v179) >> 3;
              v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 61)
LABEL_290:
                sub_10000D5F8();
              v158 = v121 - (_QWORD)v155;
              if (v158 >> 2 > v157)
                v157 = v158 >> 2;
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
                v159 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v159 = v157;
              if (v159)
              {
                v160 = (char *)sub_10000D60C((uint64_t)v178, v159);
                v155 = (char *)*((_QWORD *)this + 13);
                v122 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v160 = 0;
              }
              v169 = &v160[8 * v156];
              *(_QWORD *)v169 = 0;
              v114 = v169 + 8;
              while (v122 != v155)
              {
                v170 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v169 - 1) = v170;
                v169 -= 8;
              }
              *((_QWORD *)this + 13) = v169;
              *((_QWORD *)this + 14) = v114;
              *((_QWORD *)this + 15) = &v160[8 * v159];
              if (v155)
                operator delete(v155);
            }
            else
            {
              *(_QWORD *)v122 = 0;
              v114 = v122 + 8;
            }
            *((_QWORD *)this + 14) = v114;
LABEL_271:
            v171 = *((_QWORD *)a2 + 1);
            if (v171 <= 0xFFFFFFFFFFFFFFF7 && v171 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v114 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v171);
LABEL_275:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_273:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_276:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          *((_BYTE *)this + 144) |= 4u;
          v95 = *((_QWORD *)a2 + 1);
          v96 = *((_QWORD *)a2 + 2);
          v97 = *(_QWORD *)a2;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)a2 + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_232;
              v98 += 7;
              v95 = v101;
              v18 = v99++ > 8;
            }
            while (!v18);
LABEL_180:
            LODWORD(v100) = 0;
            goto LABEL_232;
          }
          v123 = 0;
          v124 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v125 = v95 + 1;
              v126 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)a2 + 1) = v125;
              v100 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                v95 = v125;
                v18 = v124++ > 8;
                if (v18)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_232:
          *((_DWORD *)this + 35) = v100;
          goto LABEL_276;
        case 7u:
          *((_BYTE *)this + 144) |= 1u;
          v103 = *((_QWORD *)a2 + 1);
          if (v103 > 0xFFFFFFFFFFFFFFF7 || v103 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_273;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v103);
          goto LABEL_275;
        case 8u:
          *((_BYTE *)this + 144) |= 2u;
          v104 = *((_QWORD *)a2 + 1);
          v105 = *((_QWORD *)a2 + 2);
          v106 = *(_QWORD *)a2;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            v107 = 0;
            v108 = 0;
            v109 = 0;
            do
            {
              v110 = v104 + 1;
              *((_QWORD *)a2 + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0)
                goto LABEL_235;
              v107 += 7;
              v104 = v110;
              v18 = v108++ > 8;
            }
            while (!v18);
LABEL_187:
            LODWORD(v109) = 0;
            goto LABEL_235;
          }
          v127 = 0;
          v128 = 0;
          v109 = 0;
          if (v105 <= v104)
            v105 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v129 = v104 + 1;
              v130 = *(_BYTE *)(v106 + v104);
              *((_QWORD *)a2 + 1) = v129;
              v109 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                v104 = v129;
                v18 = v128++ > 8;
                if (v18)
                  goto LABEL_187;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v109) = 0;
            }
            break;
          }
LABEL_235:
          *((_DWORD *)this + 34) = v109;
          goto LABEL_276;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_276;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BioMotionPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  char v19;

  v3 = this;
  v4 = *(double **)(this + 8);
  v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  v7 = *(double **)(v3 + 56);
  v8 = *(double **)(v3 + 64);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  v10 = *(double **)(v3 + 32);
  v11 = *(double **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 3u);
  }
  v13 = *(double **)(v3 + 80);
  v14 = *(double **)(v3 + 88);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15, 4u);
  }
  v16 = *(double **)(v3 + 104);
  v17 = *(double **)(v3 + 112);
  while (v16 != v17)
  {
    v18 = *v16++;
    this = PB::Writer::write(a2, v18, 5u);
  }
  v19 = *(_BYTE *)(v3 + 144);
  if ((v19 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 6u);
    v19 = *(_BYTE *)(v3 + 144);
    if ((v19 & 1) == 0)
    {
LABEL_18:
      if ((v19 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 8u);
    }
  }
  else if ((*(_BYTE *)(v3 + 144) & 1) == 0)
  {
    goto LABEL_18;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 7u);
  if ((*(_BYTE *)(v3 + 144) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 8u);
  return this;
}

BOOL CMMsl::BioMotionPose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  _BOOL8 v17;

  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 56);
  v5 = *(double **)(a1 + 64);
  v7 = *(double **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 64) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 32);
  v8 = *(double **)(a1 + 40);
  v10 = *(double **)(a2 + 32);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 40) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(double **)(a1 + 80);
  v11 = *(double **)(a1 + 88);
  v13 = *(double **)(a2 + 80);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 88) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  v15 = *(double **)(a1 + 104);
  v14 = *(double **)(a1 + 112);
  v16 = *(double **)(a2 + 104);
  if ((char *)v14 - (char *)v15 != *(_QWORD *)(a2 + 112) - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*v15 != *v16)
      return 0;
    ++v15;
    ++v16;
  }
  if ((*(_BYTE *)(a1 + 144) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 4) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 144) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 144) & 1) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 144) & 1) != 0)
  {
    return 0;
  }
  v17 = (*(_BYTE *)(a2 + 144) & 2) == 0;
  if ((*(_BYTE *)(a1 + 144) & 2) != 0)
    return (*(_BYTE *)(a2 + 144) & 2) != 0 && *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136);
  return v17;
}

uint64_t CMMsl::BioMotionPose::hash_value(CMMsl::BioMotionPose *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v2 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v3 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v4 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v5 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v6 = PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  if ((*((_BYTE *)this + 144) & 4) != 0)
  {
    v7 = *((unsigned int *)this + 35);
    if ((*((_BYTE *)this + 144) & 1) != 0)
    {
LABEL_3:
      v8 = *((double *)this + 16);
      if (v8 == 0.0)
        v8 = 0.0;
      if ((*((_BYTE *)this + 144) & 2) != 0)
        goto LABEL_6;
LABEL_9:
      v9 = 0;
      return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
    }
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 144) & 1) != 0)
      goto LABEL_3;
  }
  v8 = 0.0;
  if ((*((_BYTE *)this + 144) & 2) == 0)
    goto LABEL_9;
LABEL_6:
  v9 = *((unsigned int *)this + 34);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ *(_QWORD *)&v8 ^ v9;
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t this)
{
  *(_QWORD *)this = off_100350100;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350100;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::BioMotionPredictedPose::~BioMotionPredictedPose(CMMsl::BioMotionPredictedPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350100;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350100;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350100;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t this, const CMMsl::BioMotionPredictedPose *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100350100;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 28) |= 1u;
    *(_QWORD *)(this + 16) = v3;
    v2 = *((_BYTE *)a2 + 28);
  }
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 28) |= 2u;
    *(_DWORD *)(this + 24) = v4;
  }
  return this;
}

const CMMsl::BioMotionPredictedPose *CMMsl::BioMotionPredictedPose::operator=(const CMMsl::BioMotionPredictedPose *a1, const CMMsl::BioMotionPredictedPose *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(CMMsl::BioMotionPredictedPose *__hidden);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    CMMsl::BioMotionPredictedPose::BioMotionPredictedPose((uint64_t)&v8, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v9;
    v4 = v11;
    v5 = *((_QWORD *)a1 + 2);
    v6 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 2) = v10;
    *((_QWORD *)a1 + 3) = v4;
    v10 = v5;
    v11 = v6;
    v8 = off_100350100;
    v9 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BioMotionPredictedPose *a2, CMMsl::BioMotionPredictedPose *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return result;
}

uint64_t CMMsl::BioMotionPredictedPose::BioMotionPredictedPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100350100;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

_QWORD *CMMsl::BioMotionPredictedPose::operator=(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  if (a1 != (_QWORD *)a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    v6 = a1[1];
    a1[1] = v3;
    v7 = a1[2];
    v8 = a1[3];
    a1[2] = v4;
    a1[3] = v5;
    v10[2] = v7;
    v10[3] = v8;
    v10[0] = off_100350100;
    v10[1] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPredictedPose::formatText(CMMsl::BioMotionPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 28) & 2) != 0)
    PB::TextFormatter::format(a2, "modelType", *((_DWORD *)this + 6));
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "state");
  if ((*((_BYTE *)this + 28) & 1) != 0)
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionPredictedPose::readFrom(CMMsl::BioMotionPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 28) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v31 = 0;
          v32 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_48;
            }
            v33 = v21 + 1;
            v34 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v33;
            v26 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v21 = v33;
            v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v26) = 0;
              goto LABEL_48;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_48:
        *((_DWORD *)this + 6) = v26;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 28) |= 1u;
        v29 = *((_QWORD *)a2 + 1);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v29);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

double CMMsl::PoseState::PoseState(CMMsl::PoseState *this)
{
  double result;

  *(_QWORD *)this = off_100353890;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100353890;
  *((_DWORD *)this + 11) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t CMMsl::BioMotionPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = *(_BYTE *)(v3 + 28);
  if ((v5 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
    v5 = *(_BYTE *)(v3 + 28);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  return this;
}

BOOL CMMsl::BioMotionPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::PoseState::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

BOOL CMMsl::PoseState::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(_QWORD *)(a2 + 16) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    if (*v7 != *v8)
      return 0;
    ++v7;
    ++v8;
  }
  result = (*(_BYTE *)(a2 + 44) & 1) == 0;
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    return (*(_BYTE *)(a2 + 44) & 1) != 0 && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40);
  return result;
}

unint64_t CMMsl::BioMotionPredictedPose::hash_value(CMMsl::BioMotionPredictedPose *this)
{
  unint64_t v2;
  double v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::PoseState::hash_value((CMMsl::PoseState *)v2);
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_5;
LABEL_9:
    v4 = 0;
    return *(_QWORD *)&v3 ^ v2 ^ v4;
  }
  v3 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_9;
LABEL_5:
  v4 = *((unsigned int *)this + 6);
  return *(_QWORD *)&v3 ^ v2 ^ v4;
}

uint64_t CMMsl::BioMotionPredictedPose::makeState(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

_QWORD *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(_QWORD *this)
{
  *this = off_100350138;
  this[1] = 0;
  return this;
}

{
  *this = off_100350138;
  this[1] = 0;
  return this;
}

void CMMsl::BioMotionPropagatedAnchor::~BioMotionPropagatedAnchor(CMMsl::BioMotionPropagatedAnchor *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350138;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350138;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350138;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(_QWORD *this, const CMMsl::BioMotionPropagatedAnchor *a2)
{
  *this = off_100350138;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::BioMotionPropagatedAnchor *CMMsl::BioMotionPropagatedAnchor::operator=(const CMMsl::BioMotionPropagatedAnchor *a1, const CMMsl::BioMotionPropagatedAnchor *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::BioMotionPropagatedAnchor *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100350138;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BioMotionPropagatedAnchor *a2, CMMsl::BioMotionPropagatedAnchor *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::BioMotionPropagatedAnchor::BioMotionPropagatedAnchor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100350138;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100350138;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100350138;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::formatText(CMMsl::BioMotionPropagatedAnchor *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BioMotionPropagatedAnchor::readFrom(CMMsl::BioMotionPropagatedAnchor *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PropagatedAnchor::PropagatedAnchor(uint64_t this)
{
  *(_QWORD *)this = off_100353CB8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353CB8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::BioMotionPropagatedAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::PropagatedAnchor::operator==(v2, v3);
  return result;
}

BOOL CMMsl::PropagatedAnchor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    if (!v5 || !CMMsl::Pose::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v7 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 != *(_QWORD *)(a2 + 16) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    if (*v7 != *v8)
      return 0;
    ++v7;
    ++v8;
  }
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return result;
}

CMMsl::PropagatedAnchor *CMMsl::BioMotionPropagatedAnchor::hash_value(CMMsl::BioMotionPropagatedAnchor *this)
{
  CMMsl::PropagatedAnchor *result;

  result = (CMMsl::PropagatedAnchor *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::PropagatedAnchor *)CMMsl::PropagatedAnchor::hash_value(result);
  return result;
}

uint64_t CMMsl::BioMotionPropagatedAnchor::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t this)
{
  *(_QWORD *)this = off_100350170;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350170;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BleedToZeroCorrection::~BleedToZeroCorrection(CMMsl::BleedToZeroCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350170;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350170;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350170;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t this, const CMMsl::BleedToZeroCorrection *a2)
{
  char v2;

  *(_QWORD *)this = off_100350170;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) |= 1u;
    *(_BYTE *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::operator=(uint64_t a1, const CMMsl::BleedToZeroCorrection *a2)
{
  int v3;
  uint64_t v4;
  void (**v6)(CMMsl::BleedToZeroCorrection *__hidden);
  uint64_t v7;
  char v8;
  int v9;

  if ((const CMMsl::BleedToZeroCorrection *)a1 != a2)
  {
    CMMsl::BleedToZeroCorrection::BleedToZeroCorrection((uint64_t)&v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v6 = off_100350170;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BleedToZeroCorrection *a2, CMMsl::BleedToZeroCorrection *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::BleedToZeroCorrection::BleedToZeroCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100350170;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100350170;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::BleedToZeroCorrection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    v9[0] = off_100350170;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BleedToZeroCorrection::formatText(CMMsl::BleedToZeroCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "withAnchoredStaticPose", *((_BYTE *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BleedToZeroCorrection::readFrom(CMMsl::BleedToZeroCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 >= *((_QWORD *)a2 + 2))
        {
          v24 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) = v22;
          v24 = v23 != 0;
        }
        *((_BYTE *)this + 16) = v24;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BleedToZeroCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::BleedToZeroCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

unint64_t CMMsl::BleedToZeroCorrection::hash_value(CMMsl::BleedToZeroCorrection *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((unsigned __int8 *)this + 16);
  else
    v3 = 0;
  return v3 ^ v2;
}

uint64_t CMMsl::BleedToZeroCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::BodyMetrics::BodyMetrics(uint64_t this)
{
  *(_QWORD *)this = off_1003501A8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003501A8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::BodyMetrics::~BodyMetrics(CMMsl::BodyMetrics *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::BodyMetrics::BodyMetrics(CMMsl::BodyMetrics *this, const CMMsl::BodyMetrics *a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  float result;
  int v6;
  char v7;
  int v8;

  *(_QWORD *)this = off_1003501A8;
  *((_DWORD *)this + 16) = 0;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    v3 = 16;
    *((_WORD *)this + 32) = 16;
    *((_DWORD *)this + 6) = v4;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 7);
    v3 |= 0x20u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 7) = result;
    v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x1000) != 0)
  {
    result = *((float *)a2 + 14);
    v3 |= 0x1000u;
    *((_WORD *)this + 32) = v3;
    *((float *)this + 14) = result;
    v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 13);
  v3 |= 0x800u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 13) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 3) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *((float *)a2 + 9);
  v3 |= 0x80u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 9) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *((float *)a2 + 8);
  v3 |= 0x40u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 8) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *((float *)a2 + 10);
  v3 |= 0x100u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 10) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *((float *)a2 + 11);
  v3 |= 0x200u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 11) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v6 = *((_DWORD *)a2 + 5);
  v3 |= 8u;
  *((_WORD *)this + 32) = v3;
  *((_DWORD *)this + 5) = v6;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_WORD *)this + 32) = v3;
  *((float *)this + 12) = result;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v7 = *((_BYTE *)a2 + 60);
  v3 |= 0x2000u;
  *((_WORD *)this + 32) = v3;
  *((_BYTE *)this + 60) = v7;
  v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      return result;
LABEL_30:
    result = *((float *)a2 + 2);
    *((_WORD *)this + 32) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
LABEL_29:
  v8 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *((_WORD *)this + 32) = v3;
  *((_DWORD *)this + 4) = v8;
  if ((*((_WORD *)a2 + 32) & 1) != 0)
    goto LABEL_30;
  return result;
}

CMMsl *CMMsl::BodyMetrics::operator=(CMMsl *a1, const CMMsl::BodyMetrics *a2)
{
  CMMsl::BodyMetrics *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::BodyMetrics::BodyMetrics((CMMsl::BodyMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::BodyMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::BodyMetrics *a2, CMMsl::BodyMetrics *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  float result;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  v6 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  v8 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v8;
  v9 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v9;
  v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  v11 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v11;
  v12 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v12;
  v13 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v13;
  v14 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v14;
  LOBYTE(v13) = *((_BYTE *)this + 60);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v13;
  v15 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v15;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::BodyMetrics::BodyMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003501A8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::BodyMetrics::operator=(CMMsl *this, uint64_t a2, CMMsl::BodyMetrics *a3)
{
  uint64_t v4;
  _QWORD v6[3];
  int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v6[0] = off_1003501A8;
    v11 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = 0;
    v7 = *(_DWORD *)(a2 + 24);
    v8 = *(_OWORD *)(a2 + 28);
    v9 = *(_OWORD *)(a2 + 44);
    v10 = *(_BYTE *)(a2 + 60);
    v4 = *(_QWORD *)(a2 + 16);
    v6[1] = *(_QWORD *)(a2 + 8);
    v6[2] = v4;
    CMMsl::swap(this, (CMMsl::BodyMetrics *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::BodyMetrics::formatText(CMMsl::BodyMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "adaptiveExerciseMinuteThreshold", *((float *)this + 2));
    v5 = *((_WORD *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "age", *((float *)this + 3));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "betaBlockerUse", *((_BYTE *)this + 60));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "biologicalSex", *((_DWORD *)this + 4));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "condition", *((_DWORD *)this + 5));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "gender", *((_DWORD *)this + 6));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "heightM", *((float *)this + 7));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "hrmax", *((float *)this + 8));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "hrmin", *((float *)this + 9));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "hronset", *((float *)this + 10));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "pal", *((float *)this + 11));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "vo2max", *((float *)this + 13));
    if ((*((_WORD *)this + 32) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "runVo2max", *((float *)this + 12));
  v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "weightKG", *((float *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BodyMetrics::readFrom(CMMsl::BodyMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 0x10u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  v43 = v20++;
                  v44 = *(_BYTE *)(v21 + v43);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_105:
                v2 = v43 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_106;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *((_DWORD *)this + 6) = v24;
              goto LABEL_117;
            case 2u:
              *((_WORD *)this + 32) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 3u:
              *((_WORD *)this + 32) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 4u:
              *((_WORD *)this + 32) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 5u:
              *((_WORD *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 6u:
              *((_WORD *)this + 32) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 7u:
              *((_WORD *)this + 32) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 8u:
              *((_WORD *)this + 32) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 9u:
              *((_WORD *)this + 32) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 0xAu:
              *((_WORD *)this + 32) |= 8u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_111;
                  }
                  v47 = v27++;
                  v48 = *(_BYTE *)(v28 + v47);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v47 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_117;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_76;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_101;
            case 0xCu:
              *((_WORD *)this + 32) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 60) = v34;
              goto LABEL_117;
            case 0xDu:
              *((_WORD *)this + 32) |= 4u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_116;
                  }
                  v51 = v35++;
                  v52 = *(_BYTE *)(v36 + v51);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_115:
                    v2 = v51 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_115;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_116;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_116:
              *((_DWORD *)this + 4) = v39;
LABEL_117:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *((_WORD *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_101:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_76:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_117;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BodyMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 3u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 4u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 5u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 6u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 8u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 9u);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 0xAu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xBu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 60), 0xCu);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8), 0xEu);
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0xDu);
  if ((*(_WORD *)(v3 + 64) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8), 0xEu);
  return this;
}

BOOL CMMsl::BodyMetrics::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 64);
  v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 64) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v4;
}

uint64_t CMMsl::BodyMetrics::hash_value(CMMsl::BodyMetrics *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;

  v1 = *((_WORD *)this + 32);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_3;
LABEL_37:
    v4 = 0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0)
      goto LABEL_6;
LABEL_38:
    v6 = 0;
    if ((*((_WORD *)this + 32) & 0x800) != 0)
      goto LABEL_9;
LABEL_39:
    v8 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_12;
LABEL_40:
    v10 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_15;
LABEL_41:
    v12 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_18;
LABEL_42:
    v14 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0)
      goto LABEL_21;
LABEL_43:
    v16 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0)
      goto LABEL_24;
LABEL_44:
    v18 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_27;
    goto LABEL_45;
  }
  v2 = *((unsigned int *)this + 6);
  if ((v1 & 0x20) == 0)
    goto LABEL_37;
LABEL_3:
  v3 = *((float *)this + 7);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 32) & 0x1000) == 0)
    goto LABEL_38;
LABEL_6:
  v5 = *((float *)this + 14);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((*((_WORD *)this + 32) & 0x800) == 0)
    goto LABEL_39;
LABEL_9:
  v7 = *((float *)this + 13);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_40;
LABEL_12:
  v9 = *((float *)this + 3);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_41;
LABEL_15:
  v11 = *((float *)this + 9);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_42;
LABEL_18:
  v13 = *((float *)this + 8);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 32) & 0x100) == 0)
    goto LABEL_43;
LABEL_21:
  v15 = *((float *)this + 10);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((*((_WORD *)this + 32) & 0x200) == 0)
    goto LABEL_44;
LABEL_24:
  v17 = *((float *)this + 11);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_27:
    v19 = *((unsigned int *)this + 5);
    if ((*((_WORD *)this + 32) & 0x400) != 0)
      goto LABEL_28;
LABEL_46:
    v21 = 0;
    if ((*((_WORD *)this + 32) & 0x2000) != 0)
      goto LABEL_31;
    goto LABEL_47;
  }
LABEL_45:
  v19 = 0;
  if ((*((_WORD *)this + 32) & 0x400) == 0)
    goto LABEL_46;
LABEL_28:
  v20 = *((float *)this + 12);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((*((_WORD *)this + 32) & 0x2000) != 0)
  {
LABEL_31:
    v22 = *((unsigned __int8 *)this + 60);
    if ((v1 & 4) != 0)
      goto LABEL_32;
    goto LABEL_48;
  }
LABEL_47:
  v22 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_32:
    v23 = *((unsigned int *)this + 4);
    if ((v1 & 1) != 0)
      goto LABEL_33;
LABEL_49:
    v25 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25;
  }
LABEL_48:
  v23 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_49;
LABEL_33:
  v24 = *((float *)this + 2);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v21 ^ v22 ^ v23 ^ v25;
}

_QWORD *CMMsl::BraveHeartAccel::BraveHeartAccel(_QWORD *this)
{
  *this = off_1003501E0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003501E0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartAccel::~BraveHeartAccel(CMMsl::BraveHeartAccel *this)
{
  void **v2;

  *(_QWORD *)this = off_1003501E0;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1003501E0;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1003501E0;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::BraveHeartAccel::BraveHeartAccel(_QWORD *this, const CMMsl::BraveHeartAccel *a2)
{
  this[1] = 0;
  *this = off_1003501E0;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_10007F18C();
  return this;
}

void sub_10007F18C()
{
  operator new();
}

void sub_10007F2C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartAccel::operator=(uint64_t a1, const CMMsl::BraveHeartAccel *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::BraveHeartAccel *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::BraveHeartAccel *)a1 != a2)
  {
    CMMsl::BraveHeartAccel::BraveHeartAccel(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_1003501E0;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::BraveHeartAccel *a2, CMMsl::BraveHeartAccel *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::BraveHeartAccel::BraveHeartAccel(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_1003501E0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_1003501E0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartAccel::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::BraveHeartAccel *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_1003501E0;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_1003501E0;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartAccel::formatText(CMMsl::BraveHeartAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "accel");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartAccel::readFrom(CMMsl::BraveHeartAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_10007F700();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_10007F700()
{
  operator new();
}

void sub_10007F838(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartAccel::operator==(uint64_t a1, uint64_t a2)
{
  return sub_10007F8A8((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_10007F8A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::Accel::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::BraveHeartAccel::hash_value(CMMsl::BraveHeartAccel *this)
{
  CMMsl::Accel **v1;
  CMMsl::Accel **v2;
  uint64_t v3;
  CMMsl::Accel *v4;

  v1 = (CMMsl::Accel **)*((_QWORD *)this + 1);
  v2 = (CMMsl::Accel **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::Accel::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

_QWORD *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(_QWORD *this)
{
  *this = off_100350218;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100350218;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartDeviceMotion::~BraveHeartDeviceMotion(CMMsl::BraveHeartDeviceMotion *this)
{
  void **v2;

  *(_QWORD *)this = off_100350218;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100350218;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100350218;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(_QWORD *this, const CMMsl::BraveHeartDeviceMotion *a2)
{
  this[1] = 0;
  *this = off_100350218;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_10007FAE0();
  return this;
}

void sub_10007FAE0()
{
  operator new();
}

void sub_10007FC14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartDeviceMotion::operator=(uint64_t a1, const CMMsl::BraveHeartDeviceMotion *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::BraveHeartDeviceMotion *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::BraveHeartDeviceMotion *)a1 != a2)
  {
    CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_100350218;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::BraveHeartDeviceMotion *a2, CMMsl::BraveHeartDeviceMotion *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::BraveHeartDeviceMotion::BraveHeartDeviceMotion(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_100350218;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_100350218;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartDeviceMotion::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::BraveHeartDeviceMotion *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_100350218;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_100350218;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartDeviceMotion::formatText(CMMsl::BraveHeartDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "deviceMotion");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartDeviceMotion::readFrom(CMMsl::BraveHeartDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_100080054();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_100080054()
{
  operator new();
}

void sub_10008018C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1000801FC((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_1000801FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::DeviceMotion::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::BraveHeartDeviceMotion::hash_value(CMMsl::BraveHeartDeviceMotion *this)
{
  CMMsl::DeviceMotion **v1;
  CMMsl::DeviceMotion **v2;
  uint64_t v3;
  CMMsl::DeviceMotion *v4;

  v1 = (CMMsl::DeviceMotion **)*((_QWORD *)this + 1);
  v2 = (CMMsl::DeviceMotion **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::DeviceMotion::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t this)
{
  *(_QWORD *)this = off_100350250;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350250;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::BraveHeartNatalieData::~BraveHeartNatalieData(CMMsl::BraveHeartNatalieData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t this, const CMMsl::BraveHeartNatalieData *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = off_100350250;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 8;
    *(_BYTE *)(this + 44) = 8;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 10);
      *(_BYTE *)(this + 44) = v3 | 0x10;
      *(_DWORD *)(this + 40) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 44) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 44) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::BraveHeartNatalieData::operator=(uint64_t a1, const CMMsl::BraveHeartNatalieData *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if ((const CMMsl::BraveHeartNatalieData *)a1 != a2)
  {
    CMMsl::BraveHeartNatalieData::BraveHeartNatalieData((uint64_t)&v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v9;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BraveHeartNatalieData *a2, CMMsl::BraveHeartNatalieData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  int v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

double CMMsl::BraveHeartNatalieData::BraveHeartNatalieData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350250;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350250;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::BraveHeartNatalieData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::BraveHeartNatalieData *__hidden);
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v7 = off_100350250;
    v3 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 44) = 0;
    v9 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v3;
    v10 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartNatalieData::formatText(CMMsl::BraveHeartNatalieData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "basalNatalies", *((double *)this + 1));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "mets", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "session", *((_DWORD *)this + 10));
    if ((*((_BYTE *)this + 44) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "natalies", *((double *)this + 3));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartNatalieData::readFrom(CMMsl::BraveHeartNatalieData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 2u:
              *((_BYTE *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((_BYTE *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((_BYTE *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_51:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *((_BYTE *)this + 44) |= 0x10u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *((_DWORD *)this + 10) = v25;
LABEL_57:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::BraveHeartNatalieData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  return this;
}

BOOL CMMsl::BraveHeartNatalieData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 44) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 44) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 44) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 44) & 0x10) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return v2;
}

uint64_t CMMsl::BraveHeartNatalieData::hash_value(CMMsl::BraveHeartNatalieData *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 44) & 8) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_3;
LABEL_16:
    v2 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_6;
LABEL_17:
    v3 = 0.0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 4);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_17;
LABEL_6:
  v3 = *((double *)this + 3);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 1);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_12;
LABEL_19:
    v5 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5;
  }
LABEL_18:
  v4 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_19;
LABEL_12:
  v5 = *((int *)this + 10);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5;
}

_QWORD *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(_QWORD *this)
{
  *this = off_100350288;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100350288;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::BraveHeartVO2MaxInput::~BraveHeartVO2MaxInput(CMMsl::BraveHeartVO2MaxInput *this)
{
  void **v2;

  *(_QWORD *)this = off_100350288;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100350288;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100350288;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(_QWORD *this, const CMMsl::BraveHeartVO2MaxInput *a2)
{
  this[1] = 0;
  *this = off_100350288;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_100080D20();
  return this;
}

void sub_100080D20()
{
  operator new();
}

void sub_100080E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::operator=(uint64_t a1, const CMMsl::BraveHeartVO2MaxInput *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::BraveHeartVO2MaxInput *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::BraveHeartVO2MaxInput *)a1 != a2)
  {
    CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_100350288;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::BraveHeartVO2MaxInput *a2, CMMsl::BraveHeartVO2MaxInput *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::BraveHeartVO2MaxInput::BraveHeartVO2MaxInput(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_100350288;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_100350288;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::BraveHeartVO2MaxInput *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_100350288;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_100350288;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::formatText(CMMsl::BraveHeartVO2MaxInput *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "vo2MaxInput");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::readFrom(CMMsl::BraveHeartVO2MaxInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_100081294();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_100081294()
{
  operator new();
}

void sub_1000813CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::BraveHeartVO2MaxInput::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::BraveHeartVO2MaxInput::operator==(uint64_t a1, uint64_t a2)
{
  return sub_10008143C((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_10008143C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::VO2MaxInput::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::BraveHeartVO2MaxInput::hash_value(CMMsl::BraveHeartVO2MaxInput *this)
{
  CMMsl::VO2MaxInput **v1;
  CMMsl::VO2MaxInput **v2;
  uint64_t v3;
  CMMsl::VO2MaxInput *v4;

  v1 = (CMMsl::VO2MaxInput **)*((_QWORD *)this + 1);
  v2 = (CMMsl::VO2MaxInput **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::VO2MaxInput::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(uint64_t this)
{
  *(_QWORD *)this = off_1003502C0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003502C0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::BraveHeartWorkoutEvent::~BraveHeartWorkoutEvent(CMMsl::BraveHeartWorkoutEvent *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(CMMsl::BraveHeartWorkoutEvent *this, const CMMsl::BraveHeartWorkoutEvent *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  double result;

  *(_QWORD *)this = off_1003502C0;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 5);
    v3 = 4;
    *((_BYTE *)this + 24) = 4;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 24) = v3;
    *((_DWORD *)this + 4) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 24) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  void (**v5)(CMMsl::BraveHeartWorkoutEvent *__hidden);
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v5 = off_1003502C0;
    v12[0] = off_1003502C0;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 4) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 20);
      v7 = 4;
      LOBYTE(v13) = 4;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        v3 = *(_DWORD *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v13) = v7;
        if ((v6 & 1) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      a3 = *(double *)(a2 + 8);
      LOBYTE(v13) = v7 | 1;
    }
LABEL_9:
    v8 = v13;
    v13 = *(_DWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 20) = (_DWORD)v5;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 16) = v3;
    *(double *)(a1 + 8) = a3;
    v12[1] = v10;
    v12[2] = v9;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::BraveHeartWorkoutEvent *a2, CMMsl::BraveHeartWorkoutEvent *a3)
{
  int v3;
  int v4;
  int v5;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::BraveHeartWorkoutEvent::BraveHeartWorkoutEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003502C0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003502C0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  int v10;

  if (a1 != a2)
  {
    v9[0] = off_1003502C0;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v10 = *(_DWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = v3;
    v7 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    v9[1] = v7;
    v9[2] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::formatText(CMMsl::BraveHeartWorkoutEvent *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 24) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "eventType", *((_DWORD *)this + 4));
    if ((*((_BYTE *)this + 24) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "eventTime", *((double *)this + 1));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BraveHeartWorkoutEvent::readFrom(CMMsl::BraveHeartWorkoutEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 4u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 5) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 20), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  return this;
}

BOOL CMMsl::BraveHeartWorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::BraveHeartWorkoutEvent::hash_value(CMMsl::BraveHeartWorkoutEvent *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;

  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
    v1 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 24) & 2) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 4);
      if ((*((_BYTE *)this + 24) & 1) != 0)
        goto LABEL_4;
LABEL_9:
      v3 = 0.0;
      return v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  return v2 ^ v1 ^ *(_QWORD *)&v3;
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t this)
{
  *(_QWORD *)this = off_1003502F8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003502F8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::BumpToWakeState::~BumpToWakeState(CMMsl::BumpToWakeState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t this, const CMMsl::BumpToWakeState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_1003502F8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_1003502F8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::BumpToWakeState::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::BumpToWakeState *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = off_1003502F8;
    v11[0] = off_1003502F8;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::BumpToWakeState *__hidden))(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v7;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v8[0] = off_1003502F8;
    v8[1] = v5;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::BumpToWakeState *a2, CMMsl::BumpToWakeState *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::BumpToWakeState::BumpToWakeState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_1003502F8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_1003502F8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::BumpToWakeState::formatText(CMMsl::BumpToWakeState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::BumpToWakeState::readFrom(CMMsl::BumpToWakeState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::BumpToWakeState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::BumpToWakeState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::BumpToWakeState::hash_value(CMMsl::BumpToWakeState *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

double CMMsl::CV3DPredictedPose::CV3DPredictedPose(CMMsl::CV3DPredictedPose *this)
{
  double result;

  *(_QWORD *)this = off_100350330;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100350330;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::CV3DPredictedPose::~CV3DPredictedPose(CMMsl::CV3DPredictedPose *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100350330;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::CV3DPredictedPose::~CV3DPredictedPose(this);
  operator delete();
}

CMMsl::CV3DPredictedPose *CMMsl::CV3DPredictedPose::CV3DPredictedPose(CMMsl::CV3DPredictedPose *this, const CMMsl::CV3DPredictedPose *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_100350330;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 72) & 2) != 0)
  {
    v5 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 72) = 2;
    *((_QWORD *)this + 8) = v5;
  }
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  }
  if ((*((_BYTE *)a2 + 72) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 72) |= 1u;
    *((_QWORD *)this + 7) = v6;
  }
  return this;
}

uint64_t CMMsl::CV3DPredictedPose::operator=(uint64_t a1, const CMMsl::CV3DPredictedPose *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  if ((const CMMsl::CV3DPredictedPose *)a1 != a2)
  {
    CMMsl::CV3DPredictedPose::CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v7;
    CMMsl::CV3DPredictedPose::~CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CV3DPredictedPose *a2, CMMsl::CV3DPredictedPose *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::CV3DPredictedPose::CV3DPredictedPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100350330;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::CV3DPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::CV3DPredictedPose::CV3DPredictedPose((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v7;
    CMMsl::CV3DPredictedPose::~CV3DPredictedPose((CMMsl::CV3DPredictedPose *)&v9);
  }
  return a1;
}

uint64_t CMMsl::CV3DPredictedPose::formatText(CMMsl::CV3DPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;
  double *v9;
  double *v10;
  double v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "rotationMatrix", v7);
  }
  v8 = *((_BYTE *)this + 72);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "targetTimestamp", *((double *)this + 7));
    v8 = *((_BYTE *)this + 72);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  v9 = (double *)*((_QWORD *)this + 4);
  v10 = (double *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "translation", v11);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CV3DPredictedPose::readFrom(CMMsl::CV3DPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE v78[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 72) |= 2u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_117;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_119;
        case 2u:
          if (v24 != 2)
          {
            v56 = (char *)*((_QWORD *)this + 2);
            v55 = *((_QWORD *)this + 3);
            if ((unint64_t)v56 >= v55)
            {
              v60 = (char *)*v10;
              v61 = (v56 - (_BYTE *)*v10) >> 3;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 61)
LABEL_129:
                sub_10000D5F8();
              v63 = v55 - (_QWORD)v60;
              if (v63 >> 2 > v62)
                v62 = v63 >> 2;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_10000D60C((uint64_t)v11, v64);
                v60 = (char *)*((_QWORD *)this + 1);
                v56 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v65 = 0;
              }
              v72 = &v65[8 * v61];
              *(_QWORD *)v72 = 0;
              v57 = v72 + 8;
              while (v56 != v60)
              {
                v73 = *((_QWORD *)v56 - 1);
                v56 -= 8;
                *((_QWORD *)v72 - 1) = v73;
                v72 -= 8;
              }
              *((_QWORD *)this + 1) = v72;
              *((_QWORD *)this + 2) = v57;
              *((_QWORD *)this + 3) = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_QWORD *)v56 = 0;
              v57 = v56 + 8;
            }
            *((_QWORD *)this + 2) = v57;
            goto LABEL_115;
          }
          if ((PB::Reader::placeMark(a2, v78) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          while (v26 < v27 && !*((_BYTE *)a2 + 24))
          {
            v29 = (char *)*((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 3);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_129;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_10000D60C((uint64_t)v11, v35);
                v31 = (char *)*((_QWORD *)this + 1);
                v29 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((_QWORD *)this + 1) = v37;
              *((_QWORD *)this + 2) = v30;
              *((_QWORD *)this + 3) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *((_QWORD *)this + 2) = v30;
            v39 = *((_QWORD *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_83;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
            v27 = *((_QWORD *)a2 + 2);
            v26 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v26;
          }
          goto LABEL_84;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v78) & 1) != 0)
              return 0;
            v40 = *((_QWORD *)a2 + 1);
            v41 = *((_QWORD *)a2 + 2);
            while (v40 < v41 && !*((_BYTE *)a2 + 24))
            {
              v43 = (char *)*((_QWORD *)this + 5);
              v42 = *((_QWORD *)this + 6);
              if ((unint64_t)v43 >= v42)
              {
                v45 = (char *)*v8;
                v46 = (v43 - (_BYTE *)*v8) >> 3;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_128;
                v48 = v42 - (_QWORD)v45;
                if (v48 >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v50 = (char *)sub_10000D60C((uint64_t)v9, v49);
                  v45 = (char *)*((_QWORD *)this + 4);
                  v43 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v50 = 0;
                }
                v51 = &v50[8 * v46];
                *(_QWORD *)v51 = 0;
                v44 = v51 + 8;
                while (v43 != v45)
                {
                  v52 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *((_QWORD *)this + 4) = v51;
                *((_QWORD *)this + 5) = v44;
                *((_QWORD *)this + 6) = &v50[8 * v49];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_QWORD *)v43 = 0;
                v44 = v43 + 8;
              }
              *((_QWORD *)this + 5) = v44;
              v53 = *((_QWORD *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_83:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
              v41 = *((_QWORD *)a2 + 2);
              v40 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v40;
            }
LABEL_84:
            PB::Reader::recallMark(a2, v78);
          }
          else
          {
            v59 = (char *)*((_QWORD *)this + 5);
            v58 = *((_QWORD *)this + 6);
            if ((unint64_t)v59 >= v58)
            {
              v66 = (char *)*v8;
              v67 = (v59 - (_BYTE *)*v8) >> 3;
              v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 61)
LABEL_128:
                sub_10000D5F8();
              v69 = v58 - (_QWORD)v66;
              if (v69 >> 2 > v68)
                v68 = v69 >> 2;
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v68;
              if (v70)
              {
                v71 = (char *)sub_10000D60C((uint64_t)v9, v70);
                v66 = (char *)*((_QWORD *)this + 4);
                v59 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v71 = 0;
              }
              v74 = &v71[8 * v67];
              *(_QWORD *)v74 = 0;
              v57 = v74 + 8;
              while (v59 != v66)
              {
                v75 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v74 - 1) = v75;
                v74 -= 8;
              }
              *((_QWORD *)this + 4) = v74;
              *((_QWORD *)this + 5) = v57;
              *((_QWORD *)this + 6) = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_QWORD *)v59 = 0;
              v57 = v59 + 8;
            }
            *((_QWORD *)this + 5) = v57;
LABEL_115:
            v76 = *((_QWORD *)a2 + 1);
            if (v76 <= 0xFFFFFFFFFFFFFFF7 && v76 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v57 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v76);
LABEL_119:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_117:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_120:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 72) |= 1u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_117;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_119;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_120;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CV3DPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = this;
  if ((*(_BYTE *)(this + 72) & 2) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
  v4 = *(double **)(v3 + 8);
  v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  return this;
}

BOOL CMMsl::CV3DPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  _BOOL8 v8;

  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 32);
  v5 = *(double **)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = (*(_BYTE *)(a2 + 72) & 1) == 0;
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
    return (*(_BYTE *)(a2 + 72) & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  return v8;
}

uint64_t CMMsl::CV3DPredictedPose::hash_value(CMMsl::CV3DPredictedPose *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  if ((*((_BYTE *)this + 72) & 2) != 0)
  {
    if (*((double *)this + 8) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 8);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v4 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    v5 = *((double *)this + 7);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5;
}

void CMMsl::CV3DSLAMState::~CV3DSLAMState(CMMsl::CV3DSLAMState *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_100350368;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::CV3DSLAMState::~CV3DSLAMState(this);
  operator delete();
}

CMMsl::CV3DSLAMState *CMMsl::CV3DSLAMState::CV3DSLAMState(CMMsl::CV3DSLAMState *this, const CMMsl::CV3DSLAMState *a2)
{
  char *v4;
  uint64_t v5;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = off_100350368;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 88) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 10);
    *((_BYTE *)this + 88) = 1;
    *((_QWORD *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  return this;
}

uint64_t CMMsl::CV3DSLAMState::operator=(uint64_t a1, const CMMsl::CV3DSLAMState *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if ((const CMMsl::CV3DSLAMState *)a1 != a2)
  {
    CMMsl::CV3DSLAMState::CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    v18 = v3;
    v4 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    v17 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    v15 = v8;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;
    v16 = v9;
    CMMsl::CV3DSLAMState::~CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CV3DSLAMState *a2, CMMsl::CV3DSLAMState *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  return result;
}

uint64_t CMMsl::CV3DSLAMState::CV3DSLAMState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100350368;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v5, (__n128 *)(a2 + 56));
  return a1;
}

uint64_t CMMsl::CV3DSLAMState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (a1 != a2)
  {
    CMMsl::CV3DSLAMState::CV3DSLAMState((uint64_t)&v11, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    v18 = v3;
    v4 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    v17 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v7;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    v15 = v8;
    v9 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;
    v16 = v9;
    CMMsl::CV3DSLAMState::~CV3DSLAMState((CMMsl::CV3DSLAMState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::CV3DSLAMState::formatText(CMMsl::CV3DSLAMState *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "rotationMatrix", v7);
  }
  if ((*((_BYTE *)this + 88) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "translation", v10);
  }
  v11 = (double *)*((_QWORD *)this + 7);
  v12 = (double *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "velocity", v13);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CV3DSLAMState::readFrom(CMMsl::CV3DSLAMState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v101;
  char *v102;
  _BYTE v103[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 56);
    v9 = (void **)((char *)this + 32);
    v101 = (char *)this + 48;
    v102 = (char *)this + 72;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 88) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_155;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_157;
        case 2u:
          if (v24 != 2)
          {
            v69 = (char *)*((_QWORD *)this + 2);
            v68 = *((_QWORD *)this + 3);
            if ((unint64_t)v69 >= v68)
            {
              v75 = (char *)*v10;
              v76 = (v69 - (_BYTE *)*v10) >> 3;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 61)
LABEL_166:
                sub_10000D5F8();
              v78 = v68 - (_QWORD)v75;
              if (v78 >> 2 > v77)
                v77 = v78 >> 2;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_10000D60C((uint64_t)v11, v79);
                v75 = (char *)*((_QWORD *)this + 1);
                v69 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v80 = 0;
              }
              v93 = &v80[8 * v76];
              *(_QWORD *)v93 = 0;
              v70 = v93 + 8;
              while (v69 != v75)
              {
                v94 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *((_QWORD *)v93 - 1) = v94;
                v93 -= 8;
              }
              *((_QWORD *)this + 1) = v93;
              *((_QWORD *)this + 2) = v70;
              *((_QWORD *)this + 3) = &v80[8 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v69 = 0;
              v70 = v69 + 8;
            }
            *((_QWORD *)this + 2) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          while (v26 < v27 && !*((_BYTE *)a2 + 24))
          {
            v29 = (char *)*((_QWORD *)this + 2);
            v28 = *((_QWORD *)this + 3);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_166;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_10000D60C((uint64_t)v11, v35);
                v31 = (char *)*((_QWORD *)this + 1);
                v29 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((_QWORD *)this + 1) = v37;
              *((_QWORD *)this + 2) = v30;
              *((_QWORD *)this + 3) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *((_QWORD *)this + 2) = v30;
            v39 = *((_QWORD *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_106;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
            v27 = *((_QWORD *)a2 + 2);
            v26 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v26;
          }
          goto LABEL_107;
        case 3u:
          if (v24 != 2)
          {
            v72 = (char *)*((_QWORD *)this + 5);
            v71 = *((_QWORD *)this + 6);
            if ((unint64_t)v72 >= v71)
            {
              v81 = (char *)*v9;
              v82 = (v72 - (_BYTE *)*v9) >> 3;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 61)
LABEL_167:
                sub_10000D5F8();
              v84 = v71 - (_QWORD)v81;
              if (v84 >> 2 > v83)
                v83 = v84 >> 2;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                v85 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v86 = (char *)sub_10000D60C((uint64_t)v101, v85);
                v81 = (char *)*((_QWORD *)this + 4);
                v72 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v86 = 0;
              }
              v95 = &v86[8 * v82];
              *(_QWORD *)v95 = 0;
              v70 = v95 + 8;
              while (v72 != v81)
              {
                v96 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v95 - 1) = v96;
                v95 -= 8;
              }
              *((_QWORD *)this + 4) = v95;
              *((_QWORD *)this + 5) = v70;
              *((_QWORD *)this + 6) = &v86[8 * v85];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *(_QWORD *)v72 = 0;
              v70 = v72 + 8;
            }
            *((_QWORD *)this + 5) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
            return 0;
          v40 = *((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          while (v40 < v41 && !*((_BYTE *)a2 + 24))
          {
            v43 = (char *)*((_QWORD *)this + 5);
            v42 = *((_QWORD *)this + 6);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v9;
              v46 = (v43 - (_BYTE *)*v9) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                goto LABEL_167;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_10000D60C((uint64_t)v101, v49);
                v45 = (char *)*((_QWORD *)this + 4);
                v43 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[8 * v46];
              *(_QWORD *)v51 = 0;
              v44 = v51 + 8;
              while (v43 != v45)
              {
                v52 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v51 - 1) = v52;
                v51 -= 8;
              }
              *((_QWORD *)this + 4) = v51;
              *((_QWORD *)this + 5) = v44;
              *((_QWORD *)this + 6) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v43 = 0;
              v44 = v43 + 8;
            }
            *((_QWORD *)this + 5) = v44;
            v53 = *((_QWORD *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_106;
            *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
            v41 = *((_QWORD *)a2 + 2);
            v40 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v40;
          }
          goto LABEL_107;
        case 4u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
              return 0;
            v54 = *((_QWORD *)a2 + 1);
            v55 = *((_QWORD *)a2 + 2);
            while (v54 < v55 && !*((_BYTE *)a2 + 24))
            {
              v57 = (char *)*((_QWORD *)this + 8);
              v56 = *((_QWORD *)this + 9);
              if ((unint64_t)v57 >= v56)
              {
                v59 = (char *)*v8;
                v60 = (v57 - (_BYTE *)*v8) >> 3;
                v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 61)
                  goto LABEL_168;
                v62 = v56 - (_QWORD)v59;
                if (v62 >> 2 > v61)
                  v61 = v62 >> 2;
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                  v63 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v63 = v61;
                if (v63)
                {
                  v64 = (char *)sub_10000D60C((uint64_t)v102, v63);
                  v59 = (char *)*((_QWORD *)this + 7);
                  v57 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v64 = 0;
                }
                v65 = &v64[8 * v60];
                *(_QWORD *)v65 = 0;
                v58 = v65 + 8;
                while (v57 != v59)
                {
                  v66 = *((_QWORD *)v57 - 1);
                  v57 -= 8;
                  *((_QWORD *)v65 - 1) = v66;
                  v65 -= 8;
                }
                *((_QWORD *)this + 7) = v65;
                *((_QWORD *)this + 8) = v58;
                *((_QWORD *)this + 9) = &v64[8 * v63];
                if (v59)
                  operator delete(v59);
              }
              else
              {
                *(_QWORD *)v57 = 0;
                v58 = v57 + 8;
              }
              *((_QWORD *)this + 8) = v58;
              v67 = *((_QWORD *)a2 + 1);
              if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_106:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v58 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v67);
              v55 = *((_QWORD *)a2 + 2);
              v54 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v54;
            }
LABEL_107:
            PB::Reader::recallMark(a2, v103);
          }
          else
          {
            v74 = (char *)*((_QWORD *)this + 8);
            v73 = *((_QWORD *)this + 9);
            if ((unint64_t)v74 >= v73)
            {
              v87 = (char *)*v8;
              v88 = (v74 - (_BYTE *)*v8) >> 3;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
LABEL_168:
                sub_10000D5F8();
              v90 = v73 - (_QWORD)v87;
              if (v90 >> 2 > v89)
                v89 = v90 >> 2;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v92 = (char *)sub_10000D60C((uint64_t)v102, v91);
                v87 = (char *)*((_QWORD *)this + 7);
                v74 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v92 = 0;
              }
              v97 = &v92[8 * v88];
              *(_QWORD *)v97 = 0;
              v70 = v97 + 8;
              while (v74 != v87)
              {
                v98 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *((_QWORD *)v97 - 1) = v98;
                v97 -= 8;
              }
              *((_QWORD *)this + 7) = v97;
              *((_QWORD *)this + 8) = v70;
              *((_QWORD *)this + 9) = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *(_QWORD *)v74 = 0;
              v70 = v74 + 8;
            }
            *((_QWORD *)this + 8) = v70;
LABEL_153:
            v99 = *((_QWORD *)a2 + 1);
            if (v99 <= 0xFFFFFFFFFFFFFFF7 && v99 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v70 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v99);
LABEL_157:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_155:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_158:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_158;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CV3DSLAMState::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 88) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = (double *)v3[4];
  v8 = (double *)v3[5];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v11 = (double *)v3[7];
  v10 = (double *)v3[8];
  while (v11 != v10)
  {
    v12 = *v11++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  return this;
}

uint64_t CMMsl::CV3DSLAMState::hash_value(CMMsl::CV3DSLAMState *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    if (*((double *)this + 10) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 10);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1)) ^ v2;
  v4 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  return v3 ^ v4 ^ PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
}

uint64_t CMMsl::CVWatchCalories::CVWatchCalories(uint64_t this)
{
  *(_QWORD *)this = off_1003503A0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003503A0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::CVWatchCalories::~CVWatchCalories(CMMsl::CVWatchCalories *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::CVWatchCalories::CVWatchCalories(CMMsl::CVWatchCalories *this, const CMMsl::CVWatchCalories *a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)this = off_1003503A0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 = 4;
    *((_BYTE *)this + 28) = 4;
    *((_DWORD *)this + 6) = LODWORD(result);
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 28) = v3 | 1;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t CMMsl::CVWatchCalories::operator=(uint64_t a1, uint64_t a2, float a3, double a4, double a5)
{
  char v6;
  char v7;
  int v8;
  int v9;
  __int128 v10;
  void (**v12)(CMMsl::CVWatchCalories *__hidden);
  __int128 v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v12 = off_1003503A0;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 4) != 0)
    {
      a3 = *(float *)(a2 + 24);
      v7 = 4;
      LOBYTE(v15) = 4;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v15) = v7;
        if ((v6 & 1) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 1) != 0)
    {
LABEL_8:
      a5 = *(double *)(a2 + 8);
      LOBYTE(v15) = v7 | 1;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v15;
    v15 = v8;
    v9 = *(_DWORD *)(a1 + 24);
    *(float *)(a1 + 24) = a3;
    v14 = v9;
    v10 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a5;
    *(double *)(a1 + 16) = a4;
    v13 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CVWatchCalories *a2, CMMsl::CVWatchCalories *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::CVWatchCalories::CVWatchCalories(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003503A0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003503A0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::CVWatchCalories::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  __int128 v6;
  __int128 v7;
  void (**v9)(CMMsl::CVWatchCalories *__hidden);
  __int128 v10;
  int v11;
  int v12;

  if (a1 != a2)
  {
    v9 = off_1003503A0;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::CVWatchCalories::formatText(CMMsl::CVWatchCalories *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "calories_kCal", *((float *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CVWatchCalories::readFrom(CMMsl::CVWatchCalories *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 28) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
        v2 = *((_QWORD *)a2 + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        goto LABEL_38;
      }
      *((_BYTE *)this + 28) |= 4u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
      {
LABEL_32:
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_38;
      }
      *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_37:
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 28) |= 1u;
    v2 = *((_QWORD *)a2 + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
      goto LABEL_32;
    *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t CMMsl::CVWatchCalories::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  return this;
}

BOOL CMMsl::CVWatchCalories::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 1) == 0;
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    return (*(_BYTE *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::CVWatchCalories::hash_value(CMMsl::CVWatchCalories *this)
{
  uint64_t v1;
  double v2;
  double v3;
  float v4;

  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
    v4 = *((float *)this + 6);
    v1 = LODWORD(v4);
    if (v4 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 2);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 1) != 0)
        goto LABEL_6;
LABEL_13:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 1) == 0)
    goto LABEL_13;
LABEL_6:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
}

_QWORD *CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(_QWORD *this)
{
  *this = off_1003503D8;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

{
  *this = off_1003503D8;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

void CMMsl::CalorieControllerMETsConsumed::~CalorieControllerMETsConsumed(CMMsl::CalorieControllerMETsConsumed *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(CMMsl::CalorieControllerMETsConsumed *this, const CMMsl::CalorieControllerMETsConsumed *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  char v15;
  int v16;

  *(_QWORD *)this = off_1003503D8;
  *(_QWORD *)((char *)this + 164) = 0;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 30);
    v3 = 0x2000000;
    *(_QWORD *)((char *)this + 164) = 0x2000000;
    *((_DWORD *)this + 30) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 12);
    v3 |= 0x80uLL;
    *(_QWORD *)((char *)this + 164) = v3;
    *((_DWORD *)this + 12) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 21);
    v3 |= 0x10000uLL;
    *(_QWORD *)((char *)this + 164) = v3;
    *((_DWORD *)this + 21) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_45;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v5 = *((_DWORD *)a2 + 8);
  v3 |= 8uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 8) = v5;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 35) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 39);
  v3 |= 0x400000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 39) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  v4 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_QWORD *)this + 2) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  v6 = *((_BYTE *)a2 + 162);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_BYTE *)this + 162) = v6;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 33) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  v7 = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 32) = v7;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 34) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  v8 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 18) = v8;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 38);
  v3 |= 0x200000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 38) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  v9 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 17) = v9;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  v10 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_QWORD *)this + 3) = v10;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_QWORD *)this + 1) = v11;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80000) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 36) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80000) == 0)
  {
LABEL_33:
    if ((v2 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  v12 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 24) = v12;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_35;
    goto LABEL_71;
  }
LABEL_70:
  v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 9) = v13;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_72;
  }
LABEL_71:
  v14 = *((_BYTE *)a2 + 161);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_BYTE *)this + 161) = v14;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x800000) == 0)
      goto LABEL_37;
    goto LABEL_73;
  }
LABEL_72:
  v15 = *((_BYTE *)a2 + 160);
  v3 |= 0x800000000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_BYTE *)this + 160) = v15;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_37:
    if ((v2 & 0x20000) == 0)
      goto LABEL_38;
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0)
      goto LABEL_39;
    goto LABEL_75;
  }
LABEL_74:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x400) == 0)
      goto LABEL_40;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_40:
    if ((v2 & 0x100) == 0)
      goto LABEL_41;
    goto LABEL_77;
  }
LABEL_76:
  v16 = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 15) = v16;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_41:
    if ((v2 & 0x100000000) == 0)
      return *(float *)&v4;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *(_QWORD *)((char *)this + 164) = v3;
  *((_DWORD *)this + 13) = v4;
  if ((*(_QWORD *)((_BYTE *)a2 + 164) & 0x100000000) == 0)
    return *(float *)&v4;
LABEL_78:
  LODWORD(v4) = *((_DWORD *)a2 + 37);
  *(_QWORD *)((char *)this + 164) = v3 | (unint64_t)&_mh_execute_header;
  *((_DWORD *)this + 37) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CalorieControllerMETsConsumed::operator=(CMMsl *a1, const CMMsl::CalorieControllerMETsConsumed *a2)
{
  CMMsl::CalorieControllerMETsConsumed *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed((CMMsl::CalorieControllerMETsConsumed *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CalorieControllerMETsConsumed *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CalorieControllerMETsConsumed *a2, CMMsl::CalorieControllerMETsConsumed *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;

  v3 = *(_QWORD *)((char *)this + 164);
  *(_QWORD *)((char *)this + 164) = *(_QWORD *)((char *)a2 + 164);
  *(_QWORD *)((char *)a2 + 164) = v3;
  v4 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v3) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v7 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v7;
  v8 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v8;
  v9 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  v10 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v10;
  v11 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  LOBYTE(v3) = *((_BYTE *)this + 162);
  *((_BYTE *)this + 162) = *((_BYTE *)a2 + 162);
  *((_BYTE *)a2 + 162) = v3;
  LODWORD(v12) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  LODWORD(v12) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v12;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  LODWORD(v12) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v12;
  LODWORD(v12) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v12;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  LODWORD(v12) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v12;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v12) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v12;
  LODWORD(v12) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v12;
  LODWORD(v12) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v12;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v12) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v12;
  LODWORD(v12) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  LODWORD(v12) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v12;
  LODWORD(v14) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v14;
  LODWORD(v14) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 161);
  *((_BYTE *)this + 161) = *((_BYTE *)a2 + 161);
  *((_BYTE *)a2 + 161) = v14;
  LOBYTE(v14) = *((_BYTE *)this + 160);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_BYTE *)a2 + 160) = v14;
  LODWORD(v12) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v12;
  LODWORD(v12) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  LODWORD(v12) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  LODWORD(v14) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v14;
  LODWORD(v12) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  result = *((float *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((float *)a2 + 37) = result;
  return result;
}

float CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003503D8;
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a2 + 164) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  result = *(float *)(a2 + 148);
  *(float *)(a1 + 148) = result;
  return result;
}

CMMsl *CMMsl::CalorieControllerMETsConsumed::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::CalorieControllerMETsConsumed *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CalorieControllerMETsConsumed::CalorieControllerMETsConsumed((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CalorieControllerMETsConsumed *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::formatText(CMMsl::CalorieControllerMETsConsumed *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "activity", *((_DWORD *)this + 8));
    v5 = *(_QWORD *)((char *)this + 164);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "activityTypeWithoutOverride", *((_DWORD *)this + 9));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "avgTruthMets", *((float *)this + 10));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "basalCalories", *((_QWORD *)this + 1));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "basalMets", *((float *)this + 11));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "computeTime", *((float *)this + 12));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "currentPace", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "distance", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "distanceSource", *((_DWORD *)this + 15));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "duration", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "elevationAscended", *((_DWORD *)this + 17));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 18));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "heartRate", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_16;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "heartRateConfidence", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_17;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "isMotionOverrideSet", *((_BYTE *)this + 160));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_18;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "isStanding", *((_BYTE *)this + 161));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "isStored", *((_BYTE *)this + 162));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "now", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "pedDistance", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "pedRawDistance", *((float *)this + 23));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "pushCount", *((_DWORD *)this + 24));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rawFMMets", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rawHRMets", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "rawTruthMets", *((float *)this + 27));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0)
      goto LABEL_27;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rawWRMets", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "recordInterval", *((double *)this + 2));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "speed", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "startTime", *((float *)this + 30));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "stepBegin", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "stepCount", *((_DWORD *)this + 32));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "stepDuration", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 4) == 0)
      goto LABEL_34;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "stepEnd", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "totalCalories", *((_QWORD *)this + 3));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "userMets", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "vectorMag", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_38;
LABEL_77:
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 38));
    if ((*(_QWORD *)((_BYTE *)this + 164) & 0x400000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_39;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "vectorMagCmSimOnly", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200000000) != 0)
    goto LABEL_77;
LABEL_38:
  if ((v5 & 0x400000000) != 0)
LABEL_39:
    PB::TextFormatter::format(a2, "wrMets", *((float *)this + 39));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CalorieControllerMETsConsumed::readFrom(CMMsl::CalorieControllerMETsConsumed *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  char v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)((char *)this + 164) |= 0x2000000uLL;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_241;
        case 2u:
          *(_QWORD *)((char *)this + 164) |= 0x80uLL;
          v22 = *((_QWORD *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v22);
          goto LABEL_241;
        case 3u:
          *(_QWORD *)((char *)this + 164) |= 0x10000uLL;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_241;
        case 4u:
          *(_QWORD *)((char *)this + 164) |= 8uLL;
          v24 = *((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
          v26 = *(_QWORD *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)a2 + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_251;
              v27 += 7;
              v24 = v30;
              v14 = v28++ > 8;
            }
            while (!v14);
LABEL_177:
            LODWORD(v29) = 0;
            goto LABEL_251;
          }
          v132 = 0;
          v133 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v134 = v24 + 1;
              v135 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)a2 + 1) = v134;
              v29 |= (unint64_t)(v135 & 0x7F) << v132;
              if (v135 < 0)
              {
                v132 += 7;
                v24 = v134;
                v14 = v133++ > 8;
                if (v14)
                  goto LABEL_177;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_251:
          *((_DWORD *)this + 8) = v29;
          goto LABEL_243;
        case 5u:
          *(_QWORD *)((char *)this + 164) |= 0x40000000uLL;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v32);
          goto LABEL_241;
        case 6u:
          *(_QWORD *)((char *)this + 164) |= 0x400000000uLL;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v33);
          goto LABEL_241;
        case 7u:
          *(_QWORD *)((char *)this + 164) |= 0x400000uLL;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v34);
          goto LABEL_241;
        case 8u:
          *(_QWORD *)((char *)this + 164) |= 0x20uLL;
          v35 = *((_QWORD *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v35);
          goto LABEL_241;
        case 9u:
          *(_QWORD *)((char *)this + 164) |= 0x40uLL;
          v36 = *((_QWORD *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v36);
          goto LABEL_241;
        case 0xAu:
          *(_QWORD *)((char *)this + 164) |= 2uLL;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v37);
          v38 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_242;
        case 0xBu:
          *(_QWORD *)((char *)this + 164) |= 0x2000000000uLL;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 >= *((_QWORD *)a2 + 2))
          {
            v42 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v40 = v39 + 1;
            v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v39);
            *((_QWORD *)a2 + 1) = v40;
            v42 = v41 != 0;
          }
          *((_BYTE *)this + 162) = v42;
          goto LABEL_243;
        case 0xCu:
          *(_QWORD *)((char *)this + 164) |= 0x800uLL;
          v43 = *((_QWORD *)a2 + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v43);
          goto LABEL_241;
        case 0xDu:
          *(_QWORD *)((char *)this + 164) |= 0x10000000uLL;
          v44 = *((_QWORD *)a2 + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v44);
          goto LABEL_241;
        case 0xEu:
          *(_QWORD *)((char *)this + 164) |= 0x8000000uLL;
          v45 = *((_QWORD *)a2 + 1);
          v46 = *((_QWORD *)a2 + 2);
          v47 = *(_QWORD *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_255;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v50) = 0;
            goto LABEL_255;
          }
          v136 = 0;
          v137 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v138 = v45 + 1;
              v139 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)a2 + 1) = v138;
              v50 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                v45 = v138;
                v14 = v137++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_255:
          *((_DWORD *)this + 32) = v50;
          goto LABEL_243;
        case 0xFu:
          *(_QWORD *)((char *)this + 164) |= 0x4000000uLL;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v53);
          goto LABEL_241;
        case 0x10u:
          *(_QWORD *)((char *)this + 164) |= 0x20000000uLL;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_241;
        case 0x11u:
          *(_QWORD *)((char *)this + 164) |= 0x200uLL;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v55);
          goto LABEL_241;
        case 0x12u:
          *(_QWORD *)((char *)this + 164) |= 0x1000000uLL;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v56);
          goto LABEL_241;
        case 0x13u:
          *(_QWORD *)((char *)this + 164) |= 0x2000uLL;
          v57 = *((_QWORD *)a2 + 1);
          v58 = *((_QWORD *)a2 + 2);
          v59 = *(_QWORD *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)a2 + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_259;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v62) = 0;
            goto LABEL_259;
          }
          v140 = 0;
          v141 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v142 = v57 + 1;
              v143 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)a2 + 1) = v142;
              v62 |= (unint64_t)(v143 & 0x7F) << v140;
              if (v143 < 0)
              {
                v140 += 7;
                v57 = v142;
                v14 = v141++ > 8;
                if (v14)
                  goto LABEL_193;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_259:
          *((_DWORD *)this + 18) = v62;
          goto LABEL_243;
        case 0x14u:
          *(_QWORD *)((char *)this + 164) |= 0x200000000uLL;
          v65 = *((_QWORD *)a2 + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v65);
          goto LABEL_241;
        case 0x15u:
          *(_QWORD *)((char *)this + 164) |= 0x4000uLL;
          v66 = *((_QWORD *)a2 + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v66);
          goto LABEL_241;
        case 0x16u:
          *(_QWORD *)((char *)this + 164) |= 0x8000uLL;
          v67 = *((_QWORD *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v67);
          goto LABEL_241;
        case 0x17u:
          *(_QWORD *)((char *)this + 164) |= 0x1000uLL;
          v68 = *((_QWORD *)a2 + 1);
          v69 = *((_QWORD *)a2 + 2);
          v70 = *(_QWORD *)a2;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v74 = v68 + 1;
              *((_QWORD *)a2 + 1) = v68 + 1;
              v75 = *(_BYTE *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0)
                goto LABEL_263;
              v71 += 7;
              v68 = v74;
              v14 = v72++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v73) = 0;
            goto LABEL_263;
          }
          v144 = 0;
          v145 = 0;
          v73 = 0;
          if (v69 <= v68)
            v69 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v146 = v68 + 1;
              v147 = *(_BYTE *)(v70 + v68);
              *((_QWORD *)a2 + 1) = v146;
              v73 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                v68 = v146;
                v14 = v145++ > 8;
                if (v14)
                  goto LABEL_200;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v73) = 0;
            }
            break;
          }
LABEL_263:
          *((_DWORD *)this + 17) = v73;
          goto LABEL_243;
        case 0x18u:
          *(_QWORD *)((char *)this + 164) |= 0x200000uLL;
          v76 = *((_QWORD *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v76);
          goto LABEL_241;
        case 0x19u:
          *(_QWORD *)((char *)this + 164) |= 0x100000uLL;
          v77 = *((_QWORD *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v77);
          goto LABEL_241;
        case 0x1Au:
          *(_QWORD *)((char *)this + 164) |= 4uLL;
          v78 = *((_QWORD *)a2 + 1);
          v79 = *((_QWORD *)a2 + 2);
          v80 = *(_QWORD *)a2;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            v81 = 0;
            v82 = 0;
            v83 = 0;
            do
            {
              v84 = v78 + 1;
              *((_QWORD *)a2 + 1) = v78 + 1;
              v85 = *(_BYTE *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0)
                goto LABEL_267;
              v81 += 7;
              v78 = v84;
              v14 = v82++ > 8;
            }
            while (!v14);
LABEL_207:
            v83 = 0;
            goto LABEL_267;
          }
          v148 = 0;
          v149 = 0;
          v83 = 0;
          if (v79 <= v78)
            v79 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v79 == v78)
            {
              v83 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v150 = v78 + 1;
              v151 = *(_BYTE *)(v80 + v78);
              *((_QWORD *)a2 + 1) = v150;
              v83 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                v78 = v150;
                v14 = v149++ > 8;
                if (v14)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v83 = 0;
            }
            break;
          }
LABEL_267:
          *((_QWORD *)this + 3) = v83;
          goto LABEL_243;
        case 0x1Bu:
          *(_QWORD *)((char *)this + 164) |= 1uLL;
          v86 = *((_QWORD *)a2 + 1);
          v87 = *((_QWORD *)a2 + 2);
          v88 = *(_QWORD *)a2;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v92 = v86 + 1;
              *((_QWORD *)a2 + 1) = v86 + 1;
              v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0)
                goto LABEL_271;
              v89 += 7;
              v86 = v92;
              v14 = v90++ > 8;
            }
            while (!v14);
LABEL_214:
            v91 = 0;
            goto LABEL_271;
          }
          v152 = 0;
          v153 = 0;
          v91 = 0;
          if (v87 <= v86)
            v87 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v87 == v86)
            {
              v91 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v154 = v86 + 1;
              v155 = *(_BYTE *)(v88 + v86);
              *((_QWORD *)a2 + 1) = v154;
              v91 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v86 = v154;
                v14 = v153++ > 8;
                if (v14)
                  goto LABEL_214;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v91 = 0;
            }
            break;
          }
LABEL_271:
          *((_QWORD *)this + 1) = v91;
          goto LABEL_243;
        case 0x1Cu:
          *(_QWORD *)((char *)this + 164) |= 0x80000000uLL;
          v94 = *((_QWORD *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v94);
          goto LABEL_241;
        case 0x1Du:
          *(_QWORD *)((char *)this + 164) |= 0x80000uLL;
          v95 = *((_QWORD *)a2 + 1);
          v96 = *((_QWORD *)a2 + 2);
          v97 = *(_QWORD *)a2;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)a2 + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_275;
              v98 += 7;
              v95 = v101;
              v14 = v99++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v100) = 0;
            goto LABEL_275;
          }
          v156 = 0;
          v157 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v158 = v95 + 1;
              v159 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)a2 + 1) = v158;
              v100 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                v95 = v158;
                v14 = v157++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_275:
          *((_DWORD *)this + 24) = v100;
          goto LABEL_243;
        case 0x1Eu:
          *(_QWORD *)((char *)this + 164) |= 0x10uLL;
          v103 = *((_QWORD *)a2 + 1);
          v104 = *((_QWORD *)a2 + 2);
          v105 = *(_QWORD *)a2;
          if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
          {
            v106 = 0;
            v107 = 0;
            v108 = 0;
            do
            {
              v109 = v103 + 1;
              *((_QWORD *)a2 + 1) = v103 + 1;
              v110 = *(_BYTE *)(v105 + v103);
              v108 |= (unint64_t)(v110 & 0x7F) << v106;
              if ((v110 & 0x80) == 0)
                goto LABEL_279;
              v106 += 7;
              v103 = v109;
              v14 = v107++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v108) = 0;
            goto LABEL_279;
          }
          v160 = 0;
          v161 = 0;
          v108 = 0;
          if (v104 <= v103)
            v104 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v104 == v103)
            {
              LODWORD(v108) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v162 = v103 + 1;
              v163 = *(_BYTE *)(v105 + v103);
              *((_QWORD *)a2 + 1) = v162;
              v108 |= (unint64_t)(v163 & 0x7F) << v160;
              if (v163 < 0)
              {
                v160 += 7;
                v103 = v162;
                v14 = v161++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v108) = 0;
            }
            break;
          }
LABEL_279:
          *((_DWORD *)this + 9) = v108;
          goto LABEL_243;
        case 0x1Fu:
          *(_QWORD *)((char *)this + 164) |= 0x1000000000uLL;
          v111 = *((_QWORD *)a2 + 1);
          if (v111 >= *((_QWORD *)a2 + 2))
          {
            v114 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v112 = v111 + 1;
            v113 = *(unsigned __int8 *)(*(_QWORD *)a2 + v111);
            *((_QWORD *)a2 + 1) = v112;
            v114 = v113 != 0;
          }
          *((_BYTE *)this + 161) = v114;
          goto LABEL_243;
        case 0x20u:
          *(_QWORD *)((char *)this + 164) |= 0x800000000uLL;
          v115 = *((_QWORD *)a2 + 1);
          if (v115 >= *((_QWORD *)a2 + 2))
          {
            v118 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v116 = v115 + 1;
            v117 = *(unsigned __int8 *)(*(_QWORD *)a2 + v115);
            *((_QWORD *)a2 + 1) = v116;
            v118 = v117 != 0;
          }
          *((_BYTE *)this + 160) = v118;
          goto LABEL_243;
        case 0x21u:
          *(_QWORD *)((char *)this + 164) |= 0x800000uLL;
          v119 = *((_QWORD *)a2 + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v119);
          goto LABEL_241;
        case 0x22u:
          *(_QWORD *)((char *)this + 164) |= 0x20000uLL;
          v120 = *((_QWORD *)a2 + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v120);
          goto LABEL_241;
        case 0x23u:
          *(_QWORD *)((char *)this + 164) |= 0x40000uLL;
          v121 = *((_QWORD *)a2 + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v121);
          goto LABEL_241;
        case 0x24u:
          *(_QWORD *)((char *)this + 164) |= 0x400uLL;
          v122 = *((_QWORD *)a2 + 1);
          v123 = *((_QWORD *)a2 + 2);
          v124 = *(_QWORD *)a2;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)a2 + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_283;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_239:
            LODWORD(v127) = 0;
            goto LABEL_283;
          }
          v164 = 0;
          v165 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)a2 + 1);
          break;
        case 0x25u:
          *(_QWORD *)((char *)this + 164) |= 0x100uLL;
          v130 = *((_QWORD *)a2 + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_170;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v130);
          goto LABEL_241;
        case 0x26u:
          *(_QWORD *)((char *)this + 164) |= (unint64_t)&_mh_execute_header;
          v131 = *((_QWORD *)a2 + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v131);
LABEL_241:
            v38 = *((_QWORD *)a2 + 1) + 4;
LABEL_242:
            *((_QWORD *)a2 + 1) = v38;
          }
          else
          {
LABEL_170:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_243;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_243;
      }
      while (1)
      {
        if (v123 == v122)
        {
          LODWORD(v127) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_283;
        }
        v166 = v122 + 1;
        v167 = *(_BYTE *)(v124 + v122);
        *((_QWORD *)a2 + 1) = v166;
        v127 |= (unint64_t)(v167 & 0x7F) << v164;
        if ((v167 & 0x80) == 0)
          break;
        v164 += 7;
        v122 = v166;
        v14 = v165++ > 8;
        if (v14)
          goto LABEL_239;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v127) = 0;
LABEL_283:
      *((_DWORD *)this + 15) = v127;
LABEL_243:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 164);
  if ((v4 & 0x2000000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 120), 1u);
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 2u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 3u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 5u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 6u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 7u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 8u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 9u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xAu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 162), 0xBu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xCu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xDu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 0xEu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xFu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x10u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x11u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x12u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0x13u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x14u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x15u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x16u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0x17u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x18u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x19u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 1) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x1Au);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_30:
    if ((v4 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x1Du);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 161), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 160), 0x20u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_34:
    if ((v4 & 0x20000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x21u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x22u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x400) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x23u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_37:
    if ((v4 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0x24u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_38:
    if ((v4 & 0x100000000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 148), 0x26u);
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x25u);
  if ((*(_QWORD *)(v3 + 164) & 0x100000000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 148), 0x26u);
  return this;
}

BOOL CMMsl::CalorieControllerMETsConsumed::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 164);
  v3 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & (unint64_t)&_mh_execute_header) == 0;
  if ((v2 & 0x100000000) != 0)
    return (v3 & 0x100000000) != 0 && *(float *)(a1 + 148) == *(float *)(a2 + 148);
  return v4;
}

uint64_t CMMsl::CalorieControllerMETsConsumed::hash_value(CMMsl::CalorieControllerMETsConsumed *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  double v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_QWORD *)((char *)this + 164);
  if ((v1 & 0x2000000) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
LABEL_104:
    v74 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_6;
LABEL_105:
    v73 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
    goto LABEL_106;
  }
  v62 = *((float *)this + 30);
  if (v62 == 0.0)
    v2 = 0;
  else
    v2 = LODWORD(v62);
  if ((v1 & 0x80) == 0)
    goto LABEL_104;
LABEL_3:
  v3 = *((float *)this + 12);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v74 = v4;
  if ((v1 & 0x10000) == 0)
    goto LABEL_105;
LABEL_6:
  v5 = *((float *)this + 21);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v73 = v6;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    v72 = *((int *)this + 8);
    if ((v1 & 0x40000000) != 0)
      goto LABEL_10;
LABEL_107:
    v71 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_13;
LABEL_108:
    v70 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_16;
LABEL_109:
    v69 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_19;
LABEL_110:
    v68 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_22;
LABEL_111:
    v67 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_25;
LABEL_112:
    v66 = 0.0;
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_28;
    goto LABEL_113;
  }
LABEL_106:
  v72 = 0;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_107;
LABEL_10:
  v7 = *((float *)this + 35);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v71 = v8;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_108;
LABEL_13:
  v9 = *((float *)this + 39);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v70 = v10;
  if ((v1 & 0x400000) == 0)
    goto LABEL_109;
LABEL_16:
  v11 = *((float *)this + 27);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v69 = v12;
  if ((v1 & 0x20) == 0)
    goto LABEL_110;
LABEL_19:
  v13 = *((float *)this + 10);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v68 = v14;
  if ((v1 & 0x40) == 0)
    goto LABEL_111;
LABEL_22:
  v15 = *((float *)this + 11);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v67 = v16;
  if ((v1 & 2) == 0)
    goto LABEL_112;
LABEL_25:
  v17 = *((double *)this + 2);
  if (v17 == 0.0)
    v17 = 0.0;
  v66 = v17;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_28:
    v65 = *((unsigned __int8 *)this + 162);
    if ((v1 & 0x800) != 0)
      goto LABEL_29;
LABEL_114:
    v64 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_32;
LABEL_115:
    v21 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_36;
    goto LABEL_116;
  }
LABEL_113:
  v65 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_114;
LABEL_29:
  v18 = *((float *)this + 16);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  v64 = v19;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_115;
LABEL_32:
  v20 = *((float *)this + 33);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 0x8000000) != 0)
  {
LABEL_36:
    v22 = *((int *)this + 32);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_37;
LABEL_117:
    v24 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_41;
LABEL_118:
    v26 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_45;
LABEL_119:
    v28 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_49;
LABEL_120:
    v30 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_53;
    goto LABEL_121;
  }
LABEL_116:
  v22 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_117;
LABEL_37:
  v23 = *((float *)this + 31);
  if (v23 == 0.0)
    v24 = 0;
  else
    v24 = LODWORD(v23);
  if ((v1 & 0x20000000) == 0)
    goto LABEL_118;
LABEL_41:
  v25 = *((float *)this + 34);
  if (v25 == 0.0)
    v26 = 0;
  else
    v26 = LODWORD(v25);
  if ((v1 & 0x200) == 0)
    goto LABEL_119;
LABEL_45:
  v27 = *((float *)this + 14);
  if (v27 == 0.0)
    v28 = 0;
  else
    v28 = LODWORD(v27);
  if ((v1 & 0x1000000) == 0)
    goto LABEL_120;
LABEL_49:
  v29 = *((float *)this + 29);
  if (v29 == 0.0)
    v30 = 0;
  else
    v30 = LODWORD(v29);
  if ((v1 & 0x2000) != 0)
  {
LABEL_53:
    v31 = *((int *)this + 18);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_54;
LABEL_122:
    v33 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_58;
LABEL_123:
    v35 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_62;
LABEL_124:
    v37 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_66;
    goto LABEL_125;
  }
LABEL_121:
  v31 = 0;
  if ((v1 & 0x200000000) == 0)
    goto LABEL_122;
LABEL_54:
  v32 = *((float *)this + 38);
  if (v32 == 0.0)
    v33 = 0;
  else
    v33 = LODWORD(v32);
  if ((v1 & 0x4000) == 0)
    goto LABEL_123;
LABEL_58:
  v34 = *((float *)this + 19);
  if (v34 == 0.0)
    v35 = 0;
  else
    v35 = LODWORD(v34);
  if ((v1 & 0x8000) == 0)
    goto LABEL_124;
LABEL_62:
  v36 = *((float *)this + 20);
  if (v36 == 0.0)
    v37 = 0;
  else
    v37 = LODWORD(v36);
  if ((v1 & 0x1000) != 0)
  {
LABEL_66:
    v38 = *((int *)this + 17);
    if ((v1 & 0x200000) != 0)
      goto LABEL_67;
LABEL_126:
    v40 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_71;
LABEL_127:
    v42 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_75;
    goto LABEL_128;
  }
LABEL_125:
  v38 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_126;
LABEL_67:
  v39 = *((float *)this + 26);
  if (v39 == 0.0)
    v40 = 0;
  else
    v40 = LODWORD(v39);
  if ((v1 & 0x100000) == 0)
    goto LABEL_127;
LABEL_71:
  v41 = *((float *)this + 25);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 4) != 0)
  {
LABEL_75:
    v43 = *((_QWORD *)this + 3);
    if ((v1 & 1) != 0)
      goto LABEL_76;
    goto LABEL_129;
  }
LABEL_128:
  v43 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_76:
    v44 = *((_QWORD *)this + 1);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_77;
LABEL_130:
    v46 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_80;
    goto LABEL_131;
  }
LABEL_129:
  v44 = 0;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_130;
LABEL_77:
  v45 = *((float *)this + 36);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_80:
    v47 = *((int *)this + 24);
    if ((v1 & 0x10) != 0)
      goto LABEL_81;
    goto LABEL_132;
  }
LABEL_131:
  v47 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_81:
    v48 = *((int *)this + 9);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_82;
    goto LABEL_133;
  }
LABEL_132:
  v48 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_82:
    v49 = *((unsigned __int8 *)this + 161);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_83;
    goto LABEL_134;
  }
LABEL_133:
  v49 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_83:
    v50 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x800000) != 0)
      goto LABEL_84;
LABEL_135:
    v52 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_87;
LABEL_136:
    v54 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_90;
LABEL_137:
    v56 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_93;
    goto LABEL_138;
  }
LABEL_134:
  v50 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_135;
LABEL_84:
  v51 = *((float *)this + 28);
  v52 = LODWORD(v51);
  if (v51 == 0.0)
    v52 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_136;
LABEL_87:
  v53 = *((float *)this + 22);
  v54 = LODWORD(v53);
  if (v53 == 0.0)
    v54 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_137;
LABEL_90:
  v55 = *((float *)this + 23);
  v56 = LODWORD(v55);
  if (v55 == 0.0)
    v56 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_93:
    v57 = *((unsigned int *)this + 15);
    if ((v1 & 0x100) != 0)
      goto LABEL_94;
    goto LABEL_139;
  }
LABEL_138:
  v57 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_94:
    v58 = *((float *)this + 13);
    v59 = LODWORD(v58);
    if (v58 == 0.0)
      v59 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_97;
LABEL_140:
    v61 = 0;
    return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ *(_QWORD *)&v66 ^ v65 ^ v64 ^ v21 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v35 ^ v37 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v54 ^ v56 ^ v57 ^ v59 ^ v61;
  }
LABEL_139:
  v59 = 0;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_140;
LABEL_97:
  v60 = *((float *)this + 37);
  v61 = LODWORD(v60);
  if (v60 == 0.0)
    v61 = 0;
  return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ *(_QWORD *)&v66 ^ v65 ^ v64 ^ v21 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v33 ^ v35 ^ v37 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v54 ^ v56 ^ v57 ^ v59 ^ v61;
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t this)
{
  *(_QWORD *)this = off_100350410;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350410;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::CalorimetryPauseEvent::~CalorimetryPauseEvent(CMMsl::CalorimetryPauseEvent *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t this, const CMMsl::CalorimetryPauseEvent *a2)
{
  char v2;

  *(_QWORD *)this = off_100350410;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(_QWORD *)this = off_100350410;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::CalorimetryPauseEvent::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::CalorimetryPauseEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100350410;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::CalorimetryPauseEvent *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100350410;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CalorimetryPauseEvent *a2, CMMsl::CalorimetryPauseEvent *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::CalorimetryPauseEvent::CalorimetryPauseEvent(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100350410;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100350410;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::CalorimetryPauseEvent::formatText(CMMsl::CalorimetryPauseEvent *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "pause", *((_BYTE *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CalorimetryPauseEvent::readFrom(CMMsl::CalorimetryPauseEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CalorimetryPauseEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::CalorimetryPauseEvent::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

uint64_t CMMsl::CalorimetryPauseEvent::hash_value(CMMsl::CalorimetryPauseEvent *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

uint64_t CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t this)
{
  *(_QWORD *)this = off_100350448;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350448;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::CatherineHealthKitData::~CatherineHealthKitData(CMMsl::CatherineHealthKitData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t this, const CMMsl::CatherineHealthKitData *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)this = off_100350448;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_BYTE *)(this + 36) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 36) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
      return this;
LABEL_10:
    v7 = *((_DWORD *)a2 + 8);
    *(_BYTE *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 32) = v7;
    return this;
  }
  v6 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_BYTE *)(this + 36) = v3;
  *(_QWORD *)(this + 16) = v6;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::CatherineHealthKitData::operator=(uint64_t a1, const CMMsl::CatherineHealthKitData *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if ((const CMMsl::CatherineHealthKitData *)a1 != a2)
  {
    CMMsl::CatherineHealthKitData::CatherineHealthKitData((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v3;
    *(_QWORD *)&v3 = v10;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v3;
    v9 = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CatherineHealthKitData *a2, CMMsl::CatherineHealthKitData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  int v7;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  return result;
}

double CMMsl::CatherineHealthKitData::CatherineHealthKitData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350448;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350448;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t CMMsl::CatherineHealthKitData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (**v8)(CMMsl::CatherineHealthKitData *__hidden);
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v8 = off_100350448;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 36) = 0;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v9 = v5;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    v10 = v5;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::CatherineHealthKitData::formatText(CMMsl::CatherineHealthKitData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "endDate", *((double *)this + 1));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "hr", *((double *)this + 2));
      if ((*((_BYTE *)this + 36) & 4) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hkType", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 4) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "startDate", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CatherineHealthKitData::readFrom(CMMsl::CatherineHealthKitData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_48;
            case 2u:
              *((_BYTE *)this + 36) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_32;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_48;
            case 3u:
              *((_BYTE *)this + 36) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_48:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_54;
            case 4u:
              *((_BYTE *)this + 36) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_53;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_52:
                    v2 = v29 + 1;
                    goto LABEL_53;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_52;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_53;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_53:
              *((_DWORD *)this + 8) = v25;
LABEL_54:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_54;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::CatherineHealthKitData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  return this;
}

BOOL CMMsl::CatherineHealthKitData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 8) == 0;
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
    return (*(_BYTE *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::CatherineHealthKitData::hash_value(CMMsl::CatherineHealthKitData *this)
{
  double v1;
  double v2;
  double v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 36) & 4) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 1) != 0)
      goto LABEL_3;
LABEL_13:
    v2 = 0.0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  v1 = *((double *)this + 3);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 36) & 1) == 0)
    goto LABEL_13;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 36) & 2) != 0)
  {
LABEL_6:
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_9;
LABEL_15:
    v4 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4;
  }
LABEL_14:
  v3 = 0.0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_15;
LABEL_9:
  v4 = *((unsigned int *)this + 8);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ v4;
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t this)
{
  *(_QWORD *)this = off_100350480;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350480;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void CMMsl::ClefCalibration::~ClefCalibration(CMMsl::ClefCalibration *this)
{
  void **v2;

  *(_QWORD *)this = off_100350480;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100350480;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100350480;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t this, const CMMsl::ClefCalibration *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  int v10;
  int v11;

  *(_QWORD *)this = off_100350480;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 64) = 0;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 9);
    v3 = 2;
    *(_BYTE *)(this + 64) = 2;
    *(_DWORD *)(this + 36) = v4;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 64) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 11);
    v3 |= 8u;
    *(_BYTE *)(this + 64) = v3;
    *(_DWORD *)(this + 44) = v5;
    v2 = *((_BYTE *)a2 + 64);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v7 = *((_DWORD *)a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(this + 64) = v3;
    *(_DWORD *)(this + 32) = v7;
    v2 = *((_BYTE *)a2 + 64);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 4u;
  *(_BYTE *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *((_BYTE *)a2 + 60);
  v3 |= 0x80u;
  *(_BYTE *)(this + 64) = v3;
  *(_BYTE *)(this + 60) = v9;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *((_DWORD *)a2 + 12);
  v3 |= 0x10u;
  *(_BYTE *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v10;
  v2 = *((_BYTE *)a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_20:
  v11 = *((_DWORD *)a2 + 13);
  v3 |= 0x20u;
  *(_BYTE *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v11;
  if ((*((_BYTE *)a2 + 64) & 0x40) != 0)
  {
LABEL_12:
    v6 = *((_DWORD *)a2 + 14);
    *(_BYTE *)(this + 64) = v3 | 0x40;
    *(_DWORD *)(this + 56) = v6;
  }
LABEL_13:
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_100087E24();
  return this;
}

void sub_100087E24()
{
  operator new();
}

void sub_100087F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::ClefCalibration::operator=(uint64_t a1, const CMMsl::ClefCalibration *a2)
{
  CMMsl::ClefCalibration *v3;
  void (**v5)(CMMsl::ClefCalibration *__hidden);
  uint64_t v6;
  void **v7;

  if ((const CMMsl::ClefCalibration *)a1 != a2)
  {
    CMMsl::ClefCalibration::ClefCalibration((uint64_t)&v5, a2);
    CMMsl::swap(a1, (CMMsl::ClefCalibration *)&v5, v3);
    v5 = off_100350480;
    v7 = (void **)&v6;
    sub_1002394A8(&v7);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ClefCalibration *a2, CMMsl::ClefCalibration *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_DWORD *)(this + 64);
  *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  v4 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v5 = *(_DWORD *)(this + 44);
  *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  v6 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LOBYTE(v7) = *(_BYTE *)(this + 60);
  *(_BYTE *)(this + 60) = *((_BYTE *)a2 + 60);
  *((_BYTE *)a2 + 60) = v7;
  v8 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v9 = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  v10 = *(_DWORD *)(this + 56);
  *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  v11 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  return this;
}

uint64_t CMMsl::ClefCalibration::ClefCalibration(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = off_100350480;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_100239524((_QWORD *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::ClefCalibration::operator=(uint64_t a1, uint64_t a2)
{
  CMMsl::ClefCalibration *v3;
  void (**v5)(CMMsl::ClefCalibration *__hidden);
  uint64_t v6;
  void **v7;

  if (a1 != a2)
  {
    CMMsl::ClefCalibration::ClefCalibration((uint64_t)&v5, a2);
    CMMsl::swap(a1, (CMMsl::ClefCalibration *)&v5, v3);
    v5 = off_100350480;
    v7 = (void **)&v6;
    sub_1002394A8(&v7);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::ClefCalibration::formatText(CMMsl::ClefCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "gain", *((_DWORD *)this + 8));
    v5 = *((_BYTE *)this + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*((_BYTE *)this + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 9));
  if ((*((_BYTE *)this + 64) & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "offset", *((_DWORD *)this + 10));
LABEL_5:
  v6 = (uint64_t *)*((_QWORD *)this + 1);
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "point");
  }
  v9 = *((_BYTE *)this + 64);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sensor", *((_DWORD *)this + 11));
    v9 = *((_BYTE *)this + 64);
    if ((v9 & 0x10) == 0)
    {
LABEL_9:
      if ((v9 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_19;
    }
  }
  else if ((*((_BYTE *)this + 64) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "tempCalA", *((_DWORD *)this + 12));
  v9 = *((_BYTE *)this + 64);
  if ((v9 & 0x20) == 0)
  {
LABEL_10:
    if ((v9 & 0x80) == 0)
      goto LABEL_11;
LABEL_20:
    PB::TextFormatter::format(a2, "tempCalEnabled", *((_BYTE *)this + 60));
    if ((*((_BYTE *)this + 64) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "tempCalB", *((_DWORD *)this + 13));
  v9 = *((_BYTE *)this + 64);
  if (v9 < 0)
    goto LABEL_20;
LABEL_11:
  if ((v9 & 0x40) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "tempCalT0", *((_DWORD *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefCalibration::readFrom(CMMsl::ClefCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  unint64_t v107;
  char v108;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 64) |= 2u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_136;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_82:
            LODWORD(v25) = 0;
            goto LABEL_136;
          }
          v81 = 0;
          v82 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v83 = v20 + 1;
              v84 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v83;
              v25 |= (unint64_t)(v84 & 0x7F) << v81;
              if (v84 < 0)
              {
                v81 += 7;
                v20 = v83;
                v14 = v82++ > 8;
                if (v14)
                  goto LABEL_82;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_136:
          *((_DWORD *)this + 9) = v25;
          goto LABEL_155;
        case 2u:
          *((_BYTE *)this + 64) |= 8u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_139;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_89:
            LODWORD(v34) = 0;
            goto LABEL_139;
          }
          v85 = 0;
          v86 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v87 = v29 + 1;
              v88 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v87;
              v34 |= (unint64_t)(v88 & 0x7F) << v85;
              if (v88 < 0)
              {
                v85 += 7;
                v29 = v87;
                v14 = v86++ > 8;
                if (v14)
                  goto LABEL_89;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_139:
          *((_DWORD *)this + 11) = v34;
          goto LABEL_155;
        case 3u:
          *((_BYTE *)this + 64) |= 1u;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_142;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_96:
            LODWORD(v42) = 0;
            goto LABEL_142;
          }
          v89 = 0;
          v90 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v91 = v37 + 1;
              v92 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)a2 + 1) = v91;
              v42 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                v37 = v91;
                v14 = v90++ > 8;
                if (v14)
                  goto LABEL_96;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_142:
          *((_DWORD *)this + 8) = v42;
          goto LABEL_155;
        case 4u:
          *((_BYTE *)this + 64) |= 4u;
          v45 = *((_QWORD *)a2 + 1);
          v46 = *((_QWORD *)a2 + 2);
          v47 = *(_QWORD *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_145;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_103:
            LODWORD(v50) = 0;
            goto LABEL_145;
          }
          v93 = 0;
          v94 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v95 = v45 + 1;
              v96 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)a2 + 1) = v95;
              v50 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                v45 = v95;
                v14 = v94++ > 8;
                if (v14)
                  goto LABEL_103;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_145:
          *((_DWORD *)this + 10) = v50;
          goto LABEL_155;
        case 5u:
          *((_BYTE *)this + 64) |= 0x80u;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 >= *((_QWORD *)a2 + 2))
          {
            v56 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v54 = v53 + 1;
            v55 = *(unsigned __int8 *)(*(_QWORD *)a2 + v53);
            *((_QWORD *)a2 + 1) = v54;
            v56 = v55 != 0;
          }
          *((_BYTE *)this + 60) = v56;
          goto LABEL_155;
        case 6u:
          *((_BYTE *)this + 64) |= 0x10u;
          v57 = *((_QWORD *)a2 + 1);
          v58 = *((_QWORD *)a2 + 2);
          v59 = *(_QWORD *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)a2 + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_148;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_112:
            LODWORD(v62) = 0;
            goto LABEL_148;
          }
          v97 = 0;
          v98 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v99 = v57 + 1;
              v100 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)a2 + 1) = v99;
              v62 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v57 = v99;
                v14 = v98++ > 8;
                if (v14)
                  goto LABEL_112;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_148:
          *((_DWORD *)this + 12) = v62;
          goto LABEL_155;
        case 7u:
          *((_BYTE *)this + 64) |= 0x20u;
          v65 = *((_QWORD *)a2 + 1);
          v66 = *((_QWORD *)a2 + 2);
          v67 = *(_QWORD *)a2;
          if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
          {
            v68 = 0;
            v69 = 0;
            v70 = 0;
            do
            {
              v71 = v65 + 1;
              *((_QWORD *)a2 + 1) = v65 + 1;
              v72 = *(_BYTE *)(v67 + v65);
              v70 |= (unint64_t)(v72 & 0x7F) << v68;
              if ((v72 & 0x80) == 0)
                goto LABEL_151;
              v68 += 7;
              v65 = v71;
              v14 = v69++ > 8;
            }
            while (!v14);
LABEL_119:
            LODWORD(v70) = 0;
            goto LABEL_151;
          }
          v101 = 0;
          v102 = 0;
          v70 = 0;
          if (v66 <= v65)
            v66 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v66 == v65)
            {
              LODWORD(v70) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v103 = v65 + 1;
              v104 = *(_BYTE *)(v67 + v65);
              *((_QWORD *)a2 + 1) = v103;
              v70 |= (unint64_t)(v104 & 0x7F) << v101;
              if (v104 < 0)
              {
                v101 += 7;
                v65 = v103;
                v14 = v102++ > 8;
                if (v14)
                  goto LABEL_119;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v70) = 0;
            }
            break;
          }
LABEL_151:
          *((_DWORD *)this + 13) = v70;
          goto LABEL_155;
        case 8u:
          *((_BYTE *)this + 64) |= 0x40u;
          v73 = *((_QWORD *)a2 + 1);
          v74 = *((_QWORD *)a2 + 2);
          v75 = *(_QWORD *)a2;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            v76 = 0;
            v77 = 0;
            v78 = 0;
            do
            {
              v79 = v73 + 1;
              *((_QWORD *)a2 + 1) = v73 + 1;
              v80 = *(_BYTE *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_154;
              v76 += 7;
              v73 = v79;
              v14 = v77++ > 8;
            }
            while (!v14);
LABEL_126:
            LODWORD(v78) = 0;
            goto LABEL_154;
          }
          v105 = 0;
          v106 = 0;
          v78 = 0;
          if (v74 <= v73)
            v74 = *((_QWORD *)a2 + 1);
          break;
        case 9u:
          sub_100088B84();
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_155;
      }
      while (1)
      {
        if (v74 == v73)
        {
          LODWORD(v78) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_154;
        }
        v107 = v73 + 1;
        v108 = *(_BYTE *)(v75 + v73);
        *((_QWORD *)a2 + 1) = v107;
        v78 |= (unint64_t)(v108 & 0x7F) << v105;
        if ((v108 & 0x80) == 0)
          break;
        v105 += 7;
        v73 = v107;
        v14 = v106++ > 8;
        if (v14)
          goto LABEL_126;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v78) = 0;
LABEL_154:
      *((_DWORD *)this + 14) = v78;
LABEL_155:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_100088B84()
{
  operator new();
}

void sub_100088CBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::ClefCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 64);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 36), 1u);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(this + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 2u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 60), 5u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
LABEL_20:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 7u);
    if ((*(_BYTE *)(v3 + 64) & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 6u);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) != 0)
    goto LABEL_20;
LABEL_8:
  if ((v4 & 0x40) != 0)
LABEL_9:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 8u);
LABEL_10:
  v6 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    this = PB::Writer::writeSubmessage(a2, v7, 9u);
  }
  return this;
}

BOOL CMMsl::ClefCalibration::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) == 0)
  {
    if (((v2 | v3) & 0x80) != 0)
      return 0;
LABEL_25:
    if ((v2 & 0x10) != 0)
    {
      if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
        return 0;
    }
    else if ((v3 & 0x10) != 0)
    {
      return 0;
    }
    if ((v2 & 0x20) != 0)
    {
      if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
        return 0;
    }
    else if ((v3 & 0x20) != 0)
    {
      return 0;
    }
    if ((v2 & 0x40) != 0)
    {
      if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
        return 0;
    }
    else if ((v3 & 0x40) != 0)
    {
      return 0;
    }
    return sub_100088F20((uint64_t *)(a1 + 8), a2 + 8);
  }
  if (*(unsigned __int8 *)(a1 + 60) == *(unsigned __int8 *)(a2 + 60))
    goto LABEL_25;
  return 0;
}

BOOL sub_100088F20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::ClefCalibrationPoint::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::ClefCalibration::hash_value(CMMsl::ClefCalibration *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  if ((*((_BYTE *)this + 64) & 2) != 0)
  {
    v1 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 64) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 11);
      if ((*((_BYTE *)this + 64) & 1) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 64) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 8);
    if ((*((_BYTE *)this + 64) & 4) != 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 64) & 4) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 10);
    if ((*((_BYTE *)this + 64) & 0x80) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v4 = 0;
  if ((*((_BYTE *)this + 64) & 0x80) != 0)
  {
LABEL_6:
    v5 = *((unsigned __int8 *)this + 60);
    if ((*((_BYTE *)this + 64) & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v5 = 0;
  if ((*((_BYTE *)this + 64) & 0x10) != 0)
  {
LABEL_7:
    v6 = *((int *)this + 12);
    if ((*((_BYTE *)this + 64) & 0x20) != 0)
      goto LABEL_8;
LABEL_16:
    v7 = 0;
    if ((*((_BYTE *)this + 64) & 0x40) != 0)
      goto LABEL_9;
LABEL_17:
    v8 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ sub_100089060((uint64_t)&v10, (uint64_t **)this + 1);
  }
LABEL_15:
  v6 = 0;
  if ((*((_BYTE *)this + 64) & 0x20) == 0)
    goto LABEL_16;
LABEL_8:
  v7 = *((int *)this + 13);
  if ((*((_BYTE *)this + 64) & 0x40) == 0)
    goto LABEL_17;
LABEL_9:
  v8 = *((int *)this + 14);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ sub_100089060((uint64_t)&v10, (uint64_t **)this + 1);
}

uint64_t sub_100089060(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  result = 0;
  do
  {
    v6 = *v2++;
    v5 = v6;
    v7 = *(_BYTE *)(v6 + 20);
    v8 = *(int *)(v6 + 8);
    v9 = *(int *)(v6 + 12);
    if ((v7 & 1) == 0)
      v8 = 0;
    v10 = *(int *)(v5 + 16);
    if ((v7 & 4) == 0)
      v10 = 0;
    if ((v7 & 2) != 0)
      v11 = v9;
    else
      v11 = 0;
    result ^= v8 ^ v10 ^ v11;
  }
  while (v2 != v3);
  return result;
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t this)
{
  *(_QWORD *)this = off_1003504B8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003504B8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::ClefCalibrationPoint::~ClefCalibrationPoint(CMMsl::ClefCalibrationPoint *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t this, const CMMsl::ClefCalibrationPoint *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_1003504B8;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 20) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(_BYTE *)(this + 20) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 20) = v3 | 2;
    *(_DWORD *)(this + 12) = v6;
  }
  return this;
}

uint64_t CMMsl::ClefCalibrationPoint::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  void (**v5)(CMMsl::ClefCalibrationPoint *__hidden);
  char v6;
  char v7;
  int v8;
  __int128 v9;
  void (**v11)(CMMsl::ClefCalibrationPoint *__hidden);
  __int128 v12;

  if (a1 != a2)
  {
    v5 = off_1003504B8;
    v11 = off_1003504B8;
    HIDWORD(v12) = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 1) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 8);
      v7 = 1;
      BYTE12(v12) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v2 = *(_DWORD *)(a2 + 16);
        v7 |= 4u;
        BYTE12(v12) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v3 = *(_DWORD *)(a2 + 12);
      BYTE12(v12) = v7 | 2;
    }
LABEL_9:
    v8 = HIDWORD(v12);
    v9 = *(_OWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v8;
    *(_DWORD *)(a1 + 8) = (_DWORD)v5;
    *(_DWORD *)(a1 + 12) = v3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

{
  __int128 v3;
  __int128 v4;
  void (**v6)(CMMsl::ClefCalibrationPoint *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = off_1003504B8;
    v3 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::ClefCalibrationPoint *a2, CMMsl::ClefCalibrationPoint *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = this[5];
  this[5] = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  return this;
}

uint64_t CMMsl::ClefCalibrationPoint::ClefCalibrationPoint(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = off_1003504B8;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(_QWORD *)result = off_1003504B8;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t CMMsl::ClefCalibrationPoint::formatText(CMMsl::ClefCalibrationPoint *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "distance", *((_DWORD *)this + 3));
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "base", *((_DWORD *)this + 2));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "peak", *((_DWORD *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefCalibrationPoint::readFrom(CMMsl::ClefCalibrationPoint *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_80;
            }
            v46 = v27++;
            v47 = *(_BYTE *)(v28 + v46);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_79:
          v3 = v46 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *((_DWORD *)this + 3) = v31;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 20) |= 4u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_85;
            }
            v50 = v33++;
            v51 = *(_BYTE *)(v34 + v50);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
LABEL_84:
          v3 = v50 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *((_DWORD *)this + 4) = v37;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_75;
            }
            v42 = v21++;
            v43 = *(_BYTE *)(v22 + v42);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_74;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_74:
          v3 = v42 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_75:
        *((_DWORD *)this + 2) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefCalibrationPoint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 3u);
  return this;
}

BOOL CMMsl::ClefCalibrationPoint::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::ClefCalibrationPoint::hash_value(CMMsl::ClefCalibrationPoint *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 4) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((int *)this + 2);
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((int *)this + 4);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((int *)this + 3);
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::ClefMeasurement::ClefMeasurement(uint64_t this)
{
  *(_QWORD *)this = off_1003504F0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003504F0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::ClefMeasurement::~ClefMeasurement(CMMsl::ClefMeasurement *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::ClefMeasurement::ClefMeasurement(CMMsl::ClefMeasurement *this, const CMMsl::ClefMeasurement *a2)
{
  char v2;
  float result;

  *(_QWORD *)this = off_1003504F0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((float *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  float result;

  *(_QWORD *)this = off_1003504F0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((float *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t CMMsl::ClefMeasurement::operator=(uint64_t a1, uint64_t a2, float a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v10[0] = off_1003504F0;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) != 0)
    {
      a3 = *(float *)(a2 + 8);
      LOBYTE(v11) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 12);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v11;
    v11 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(float *)(a1 + 8) = a3;
    *(float *)(a1 + 12) = a4;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ClefMeasurement *a2, CMMsl::ClefMeasurement *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::ClefMeasurement::ClefMeasurement(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003504F0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003504F0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t CMMsl::ClefMeasurement::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = off_1003504F0;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::ClefMeasurement::formatText(CMMsl::ClefMeasurement *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "concha", *((float *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "tragus", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefMeasurement::readFrom(CMMsl::ClefMeasurement *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 16) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefMeasurement::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  return this;
}

BOOL CMMsl::ClefMeasurement::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::ClefMeasurement::hash_value(CMMsl::ClefMeasurement *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v4 = *((float *)this + 2);
    v1 = LODWORD(v4);
    if (v4 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t this)
{
  *(_QWORD *)this = off_100350528;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350528;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::ClefTemperature::~ClefTemperature(CMMsl::ClefTemperature *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t this, const CMMsl::ClefTemperature *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = off_100350528;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = off_100350528;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t CMMsl::ClefTemperature::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(CMMsl::ClefTemperature *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v4 = off_100350528;
    v10[0] = off_100350528;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) != 0)
    {
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LOBYTE(v11) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 12);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = v11;
    v11 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (_DWORD)v4;
    *(_DWORD *)(a1 + 12) = v2;
    *(_DWORD *)(a1 + 16) = v7;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = off_100350528;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

_DWORD *CMMsl::swap(_DWORD *this, CMMsl::ClefTemperature *a2, CMMsl::ClefTemperature *a3)
{
  int v3;
  int v4;
  int v5;

  v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::ClefTemperature::ClefTemperature(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = off_100350528;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(_QWORD *)result = off_100350528;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t CMMsl::ClefTemperature::formatText(CMMsl::ClefTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "conchaTemp", *((_DWORD *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "tragusTemp", *((_DWORD *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ClefTemperature::readFrom(CMMsl::ClefTemperature *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_63:
          v3 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_59:
          v3 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ClefTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 2u);
  return this;
}

BOOL CMMsl::ClefTemperature::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::ClefTemperature::hash_value(CMMsl::ClefTemperature *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((int *)this + 2);
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((int *)this + 3);
  return v2 ^ v1;
}

uint64_t CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t this)
{
  *(_QWORD *)this = off_100350560;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350560;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CoarseElevationChange::~CoarseElevationChange(CMMsl::CoarseElevationChange *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t this, const CMMsl::CoarseElevationChange *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100350560;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100350560;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::CoarseElevationChange::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100350560;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CoarseElevationChange *a2, CMMsl::CoarseElevationChange *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::CoarseElevationChange::CoarseElevationChange(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350560;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350560;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::CoarseElevationChange::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100350560;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::CoarseElevationChange::formatText(CMMsl::CoarseElevationChange *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "elevationAscended", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CoarseElevationChange::readFrom(CMMsl::CoarseElevationChange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CoarseElevationChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::CoarseElevationChange::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::CoarseElevationChange::hash_value(CMMsl::CoarseElevationChange *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::Compass::Compass(uint64_t this)
{
  *(_QWORD *)this = off_100350598;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350598;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

void CMMsl::Compass::~Compass(CMMsl::Compass *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::Compass::Compass(CMMsl::Compass *this, const CMMsl::Compass *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)this = off_100350598;
  *((_DWORD *)this + 17) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_WORD *)this + 34) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 34) & 0x800) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 14);
    v3 |= 0x800u;
    *((_WORD *)this + 34) = v3;
    *((_DWORD *)this + 14) = v4;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x2000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 16);
    v3 |= 0x2000u;
    *((_WORD *)this + 34) = v3;
    *((_DWORD *)this + 16) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 4) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 5) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v5 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 8) = v5;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_WORD *)this + 34) = v3;
  *((_DWORD *)this + 10) = v4;
  if ((*((_WORD *)a2 + 34) & 0x40) == 0)
    return *(float *)&v4;
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_WORD *)this + 34) = v3 | 0x40;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::Compass::operator=(CMMsl *a1, const CMMsl::Compass *a2)
{
  CMMsl::Compass *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::Compass::Compass((CMMsl::Compass *)v5, a2);
    CMMsl::swap(a1, (CMMsl::Compass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Compass *a2, CMMsl::Compass *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::Compass::Compass(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350598;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::Compass::operator=(CMMsl *this, uint64_t a2, CMMsl::Compass *a3)
{
  _QWORD v5[2];
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;

  if (this != (CMMsl *)a2)
  {
    v5[0] = off_100350598;
    v10 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v5[1] = *(_QWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 32);
    v9 = *(_OWORD *)(a2 + 52);
    v8 = *(_OWORD *)(a2 + 36);
    CMMsl::swap(this, (CMMsl::Compass *)v5, a3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return this;
}

uint64_t CMMsl::Compass::formatText(CMMsl::Compass *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 4));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasX", *((float *)this + 5));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 6));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 7));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "calibrationLevel", *((_DWORD *)this + 8));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 9));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 10));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 11));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_WORD *)this + 34) & 0x2000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "magnitude", *((float *)this + 15));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 1) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x2000) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Compass::readFrom(CMMsl::Compass *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_79;
            case 2u:
              *((_WORD *)this + 34) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 3u:
              *((_WORD *)this + 34) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 4u:
              *((_WORD *)this + 34) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 5u:
              *((_WORD *)this + 34) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 6u:
              *((_WORD *)this + 34) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 7u:
              *((_WORD *)this + 34) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 8u:
              *((_WORD *)this + 34) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 9u:
              *((_WORD *)this + 34) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 0xAu:
              *((_WORD *)this + 34) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 0xBu:
              *((_WORD *)this + 34) |= 0x20u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_84;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_83:
                    v2 = v29 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_83;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_84;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_84:
              *((_DWORD *)this + 8) = v25;
LABEL_85:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xCu:
              *((_WORD *)this + 34) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 0xDu:
              *((_WORD *)this + 34) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_69;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_78;
            case 0xEu:
              *((_WORD *)this + 34) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_78:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_79:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_69:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_85;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Compass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(this + 68) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xAu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 0xBu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xCu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36), 0xEu);
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xDu);
  if ((*(_WORD *)(v3 + 68) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36), 0xEu);
  return this;
}

BOOL CMMsl::Compass::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v4;
}

uint64_t CMMsl::Compass::hash_value(CMMsl::Compass *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 34) & 0x800) != 0)
      goto LABEL_3;
LABEL_43:
    v4 = 0;
    if ((*((_WORD *)this + 34) & 0x2000) != 0)
      goto LABEL_6;
LABEL_44:
    v6 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_9;
LABEL_45:
    v8 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_12;
LABEL_46:
    v10 = 0;
    if ((*((_WORD *)this + 34) & 0x200) != 0)
      goto LABEL_15;
LABEL_47:
    v12 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0)
      goto LABEL_18;
LABEL_48:
    v14 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_21;
LABEL_49:
    v16 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_50:
    v18 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_51:
    v20 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_30;
    goto LABEL_52;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 34) & 0x800) == 0)
    goto LABEL_43;
LABEL_3:
  v3 = *((float *)this + 14);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 34) & 0x2000) == 0)
    goto LABEL_44;
LABEL_6:
  v5 = *((float *)this + 16);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_45;
LABEL_9:
  v7 = *((float *)this + 4);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_46;
LABEL_12:
  v9 = *((float *)this + 11);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_47;
LABEL_15:
  v11 = *((float *)this + 12);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 34) & 0x400) == 0)
    goto LABEL_48;
LABEL_18:
  v13 = *((float *)this + 13);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_49;
LABEL_21:
  v15 = *((float *)this + 5);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_50;
LABEL_24:
  v17 = *((float *)this + 6);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_51;
LABEL_27:
  v19 = *((float *)this + 7);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_30:
    v21 = *((int *)this + 8);
    if ((*((_WORD *)this + 34) & 0x1000) != 0)
      goto LABEL_31;
LABEL_53:
    v23 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_34;
    goto LABEL_54;
  }
LABEL_52:
  v21 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) == 0)
    goto LABEL_53;
LABEL_31:
  v22 = *((float *)this + 15);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_34:
    v24 = *((float *)this + 10);
    v25 = LODWORD(v24);
    if (v24 == 0.0)
      v25 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_37;
LABEL_55:
    v27 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27;
  }
LABEL_54:
  v25 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_55;
LABEL_37:
  v26 = *((float *)this + 9);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27;
}

uint64_t CMMsl::CompassAlignment::CompassAlignment(uint64_t this)
{
  *(_QWORD *)this = off_1003505D0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003505D0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CompassAlignment::~CompassAlignment(CMMsl::CompassAlignment *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::CompassAlignment::CompassAlignment(uint64_t this, const CMMsl::CompassAlignment *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_1003505D0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_1003505D0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::CompassAlignment::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_1003505D0;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::CompassAlignment *a2, CMMsl::CompassAlignment *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::CompassAlignment::CompassAlignment(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003505D0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003505D0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::CompassAlignment::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_1003505D0;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::CompassAlignment::formatText(CMMsl::CompassAlignment *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "compassJustAlignedToStableField", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassAlignment::readFrom(CMMsl::CompassAlignment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassAlignment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::CompassAlignment::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::CompassAlignment::hash_value(CMMsl::CompassAlignment *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::CompassCalibration::CompassCalibration(uint64_t this)
{
  *(_QWORD *)this = off_100350608;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350608;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::CompassCalibration::~CompassCalibration(CMMsl::CompassCalibration *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::CompassCalibration::CompassCalibration(CMMsl::CompassCalibration *this, const CMMsl::CompassCalibration *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;

  *(_QWORD *)this = off_100350608;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 20) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_DWORD *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x2000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x8000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v5 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 7) = v5;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v6 = *((_BYTE *)a2 + 77);
  v3 |= 0x20000u;
  *((_DWORD *)this + 20) = v3;
  *((_BYTE *)this + 77) = v6;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      return *(float *)&v4;
    goto LABEL_38;
  }
LABEL_37:
  v7 = *((_BYTE *)a2 + 76);
  v3 |= 0x10000u;
  *((_DWORD *)this + 20) = v3;
  *((_BYTE *)this + 76) = v7;
  if ((*((_DWORD *)a2 + 20) & 0x100) == 0)
    return *(float *)&v4;
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 20) = v3 | 0x100;
  *((_DWORD *)this + 11) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CompassCalibration::operator=(CMMsl *a1, const CMMsl::CompassCalibration *a2)
{
  CMMsl::CompassCalibration *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::CompassCalibration::CompassCalibration((CMMsl::CompassCalibration *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibration *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassCalibration *a2, CMMsl::CompassCalibration *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 77);
  *((_BYTE *)this + 77) = *((_BYTE *)a2 + 77);
  *((_BYTE *)a2 + 77) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_BYTE *)a2 + 76) = v5;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

float CMMsl::CompassCalibration::CompassCalibration(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350608;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

CMMsl *CMMsl::CompassCalibration::operator=(CMMsl *this, uint64_t a2, CMMsl::CompassCalibration *a3)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  int v16;

  if (this != (CMMsl *)a2)
  {
    v7[0] = off_100350608;
    v16 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    v7[1] = *(_QWORD *)(a2 + 8);
    v7[2] = v4;
    v8 = *(_DWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 64);
    v13 = *(_DWORD *)(a2 + 72);
    v9 = *(_DWORD *)(a2 + 28);
    v15 = *(_BYTE *)(a2 + 77);
    v14 = *(_BYTE *)(a2 + 76);
    v5 = *(_OWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 48);
    v10 = v5;
    CMMsl::swap(this, (CMMsl::CompassCalibration *)v7, a3);
    PB::Base::~Base((PB::Base *)v7);
  }
  return this;
}

uint64_t CMMsl::CompassCalibration::formatText(CMMsl::CompassCalibration *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "apAwake", *((_BYTE *)this + 76));
    v5 = *((_DWORD *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasX", *((float *)this + 4));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 5));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 6));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "calibrationLevel", *((_DWORD *)this + 7));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "cost", *((float *)this + 8));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "coverage", *((float *)this + 9));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "earthDiffRatio", *((float *)this + 10));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "hasConsistency", *((_BYTE *)this + 77));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "planarity", *((float *)this + 11));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "poseX", *((float *)this + 12));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "poseY", *((float *)this + 13));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "poseZ", *((float *)this + 14));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "quality", *((float *)this + 15));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "scaleX", *((float *)this + 16));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(a2, "scaleZ", *((float *)this + 18));
    if ((*((_DWORD *)this + 20) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "scaleY", *((float *)this + 17));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x8000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 1) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCalibration::readFrom(CMMsl::CompassCalibration *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 20) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_93;
            case 2u:
              *((_DWORD *)this + 20) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 3u:
              *((_DWORD *)this + 20) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 4u:
              *((_DWORD *)this + 20) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 5u:
              *((_DWORD *)this + 20) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 6u:
              *((_DWORD *)this + 20) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 7u:
              *((_DWORD *)this + 20) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 8u:
              *((_DWORD *)this + 20) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 9u:
              *((_DWORD *)this + 20) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 0xAu:
              *((_DWORD *)this + 20) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 0xBu:
              *((_DWORD *)this + 20) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 0xCu:
              *((_DWORD *)this + 20) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 0xDu:
              *((_DWORD *)this + 20) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 0xEu:
              *((_DWORD *)this + 20) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_79;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_92;
            case 0xFu:
              *((_DWORD *)this + 20) |= 0x10u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v33 = v21++;
                  v34 = *(_BYTE *)(v22 + v33);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    v2 = v33 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_97;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_98;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *((_DWORD *)this + 7) = v25;
LABEL_99:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x10u:
              *((_DWORD *)this + 20) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 77) = v28;
              goto LABEL_99;
            case 0x11u:
              *((_DWORD *)this + 20) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 76) = v30;
              goto LABEL_99;
            case 0x12u:
              *((_DWORD *)this + 20) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_92:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_93:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_79:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_99;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_99;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassCalibration::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 80);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 5u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 6u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 8u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xAu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xBu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xCu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xDu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xEu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 0xFu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 77), 0x10u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 44), 0x12u);
  }
LABEL_36:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 76), 0x11u);
  if ((*(_DWORD *)(v3 + 80) & 0x100) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 44), 0x12u);
  return this;
}

BOOL CMMsl::CompassCalibration::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 80);
  v3 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 80) & 0x100) == 0;
  if ((v2 & 0x100) != 0)
    return (v3 & 0x100) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
  return v4;
}

uint64_t CMMsl::CompassCalibration::hash_value(CMMsl::CompassCalibration *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;

  v1 = *((_DWORD *)this + 20);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_51:
    v4 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_52:
    v6 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_53:
    v8 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_12;
LABEL_54:
    v10 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_15;
LABEL_55:
    v12 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_18;
LABEL_56:
    v14 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_21;
LABEL_57:
    v16 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_24;
LABEL_58:
    v18 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_27;
LABEL_59:
    v20 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_30;
LABEL_60:
    v22 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_33;
LABEL_61:
    v24 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_36;
LABEL_62:
    v26 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_39;
LABEL_63:
    v28 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_42;
    goto LABEL_64;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_51;
LABEL_3:
  v3 = *((float *)this + 4);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_52;
LABEL_6:
  v5 = *((float *)this + 5);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_53;
LABEL_9:
  v7 = *((float *)this + 6);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_54;
LABEL_12:
  v9 = *((float *)this + 16);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_55;
LABEL_15:
  v11 = *((float *)this + 17);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_56;
LABEL_18:
  v13 = *((float *)this + 18);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_57;
LABEL_21:
  v15 = *((float *)this + 15);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_58;
LABEL_24:
  v17 = *((float *)this + 8);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_59;
LABEL_27:
  v19 = *((float *)this + 9);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_60;
LABEL_30:
  v21 = *((float *)this + 10);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_61;
LABEL_33:
  v23 = *((float *)this + 12);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_62;
LABEL_36:
  v25 = *((float *)this + 13);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_63;
LABEL_39:
  v27 = *((float *)this + 14);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_42:
    v29 = *((int *)this + 7);
    if ((v1 & 0x20000) != 0)
      goto LABEL_43;
    goto LABEL_65;
  }
LABEL_64:
  v29 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_43:
    v30 = *((unsigned __int8 *)this + 77);
    if ((v1 & 0x10000) != 0)
      goto LABEL_44;
    goto LABEL_66;
  }
LABEL_65:
  v30 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_44:
    v31 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x100) != 0)
      goto LABEL_45;
LABEL_67:
    v33 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33;
  }
LABEL_66:
  v31 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_67;
LABEL_45:
  v32 = *((float *)this + 11);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33;
}

uint64_t CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(uint64_t this)
{
  *(_QWORD *)this = off_100350640;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350640;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::CompassCalibrationAttempt::~CompassCalibrationAttempt(CMMsl::CompassCalibrationAttempt *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(CMMsl::CompassCalibrationAttempt *this, const CMMsl::CompassCalibrationAttempt *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;

  *(_QWORD *)this = off_100350640;
  *((_DWORD *)this + 20) = 0;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 20) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_DWORD *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_DWORD *)this + 20) = v3;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_DWORD *)a2 + 20);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x10000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v5 = *((_BYTE *)a2 + 76);
  v3 |= 0x10000u;
  *((_DWORD *)this + 20) = v3;
  *((_BYTE *)this + 76) = v5;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 20);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      return *(float *)&v4;
    goto LABEL_36;
  }
LABEL_35:
  v6 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 20) = v3;
  *((_DWORD *)this + 11) = v6;
  if ((*((_DWORD *)a2 + 20) & 0x200) == 0)
    return *(float *)&v4;
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 20) = v3 | 0x200;
  *((_DWORD *)this + 12) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::CompassCalibrationAttempt::operator=(CMMsl *a1, const CMMsl::CompassCalibrationAttempt *a2)
{
  CMMsl::CompassCalibrationAttempt *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt((CMMsl::CompassCalibrationAttempt *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassCalibrationAttempt *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassCalibrationAttempt *a2, CMMsl::CompassCalibrationAttempt *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = *((_BYTE *)a2 + 76);
  *((_BYTE *)a2 + 76) = v3;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  v5 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v5;
  result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::CompassCalibrationAttempt::CompassCalibrationAttempt(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350640;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::CompassCalibrationAttempt::operator=(CMMsl *this, uint64_t a2, CMMsl::CompassCalibrationAttempt *a3)
{
  _QWORD v5[2];
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5[0] = off_100350640;
    v14 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v5[1] = *(_QWORD *)(a2 + 8);
    v6 = *(_OWORD *)(a2 + 16);
    v12 = *(_DWORD *)(a2 + 72);
    v13 = *(_BYTE *)(a2 + 76);
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_DWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 64);
    v9 = *(_DWORD *)(a2 + 44);
    v10 = *(_OWORD *)(a2 + 48);
    CMMsl::swap(this, (CMMsl::CompassCalibrationAttempt *)v5, a3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return this;
}

uint64_t CMMsl::CompassCalibrationAttempt::formatText(CMMsl::CompassCalibrationAttempt *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "biasX", *((float *)this + 4));
    v5 = *((_DWORD *)this + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 5));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 6));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "cost", *((float *)this + 7));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "coverage2d", *((float *)this + 8));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "coverage3d", *((float *)this + 9));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "earthDiffRatio", *((float *)this + 10));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isPlanar", *((_BYTE *)this + 76));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "numberOfSamples", *((_DWORD *)this + 11));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "planarity", *((float *)this + 12));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "quality", *((float *)this + 13));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "scaleX", *((float *)this + 14));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "scaleY", *((float *)this + 15));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "scaleZ", *((float *)this + 16));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 1) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_DWORD *)this + 20) & 0x8000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "timeSpan", *((float *)this + 17));
  v5 = *((_DWORD *)this + 20);
  if ((v5 & 1) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x8000) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "unitDistance", *((float *)this + 18));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCalibrationAttempt::readFrom(CMMsl::CompassCalibrationAttempt *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 20) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_89;
            case 2u:
              *((_DWORD *)this + 20) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 3u:
              *((_DWORD *)this + 20) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 4u:
              *((_DWORD *)this + 20) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 5u:
              *((_DWORD *)this + 20) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 6u:
              *((_DWORD *)this + 20) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 7u:
              *((_DWORD *)this + 20) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 8u:
              *((_DWORD *)this + 20) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 9u:
              *((_DWORD *)this + 20) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xAu:
              *((_DWORD *)this + 20) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xBu:
              *((_DWORD *)this + 20) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 76) = v22;
              goto LABEL_95;
            case 0xCu:
              *((_DWORD *)this + 20) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xDu:
              *((_DWORD *)this + 20) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xEu:
              *((_DWORD *)this + 20) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0xFu:
              *((_DWORD *)this + 20) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_88;
            case 0x10u:
              *((_DWORD *)this + 20) |= 0x100u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_94;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_93:
                    v2 = v31 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_93;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_94;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_94:
              *((_DWORD *)this + 11) = v27;
LABEL_95:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x11u:
              *((_DWORD *)this + 20) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_88:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_89:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_95;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassCalibrationAttempt::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 80);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 5u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 6u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 7u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 8u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 9u);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xAu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 76), 0xBu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xCu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xDu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xEu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xFu);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 48), 0x11u);
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0x10u);
  if ((*(_DWORD *)(v3 + 80) & 0x200) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 48), 0x11u);
  return this;
}

BOOL CMMsl::CompassCalibrationAttempt::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 80);
  v3 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 80) & 0x200) == 0;
  if ((v2 & 0x200) != 0)
    return (v3 & 0x200) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  return v4;
}

uint64_t CMMsl::CompassCalibrationAttempt::hash_value(CMMsl::CompassCalibrationAttempt *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 20);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_50:
    v4 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_51:
    v6 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_52:
    v8 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_12;
LABEL_53:
    v10 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_15;
LABEL_54:
    v12 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_18;
LABEL_55:
    v14 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_21;
LABEL_56:
    v16 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_24;
LABEL_57:
    v18 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_27;
LABEL_58:
    v20 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_30;
    goto LABEL_59;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_50;
LABEL_3:
  v3 = *((float *)this + 4);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_51;
LABEL_6:
  v5 = *((float *)this + 5);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_52;
LABEL_9:
  v7 = *((float *)this + 6);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_53;
LABEL_12:
  v9 = *((float *)this + 14);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_54;
LABEL_15:
  v11 = *((float *)this + 15);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_55;
LABEL_18:
  v13 = *((float *)this + 16);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_56;
LABEL_21:
  v15 = *((float *)this + 13);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_57;
LABEL_24:
  v17 = *((float *)this + 7);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_58;
LABEL_27:
  v19 = *((float *)this + 18);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_30:
    v21 = *((unsigned __int8 *)this + 76);
    if ((v1 & 0x20) != 0)
      goto LABEL_31;
LABEL_60:
    v23 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_34;
LABEL_61:
    v25 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_37;
LABEL_62:
    v27 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_40;
LABEL_63:
    v29 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_43;
    goto LABEL_64;
  }
LABEL_59:
  v21 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_60;
LABEL_31:
  v22 = *((float *)this + 8);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_61;
LABEL_34:
  v24 = *((float *)this + 9);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_62;
LABEL_37:
  v26 = *((float *)this + 10);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_63;
LABEL_40:
  v28 = *((float *)this + 17);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_43:
    v30 = *((unsigned int *)this + 11);
    if ((v1 & 0x200) != 0)
      goto LABEL_44;
LABEL_65:
    v32 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32;
  }
LABEL_64:
  v30 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_65;
LABEL_44:
  v31 = *((float *)this + 12);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30 ^ v32;
}

double CMMsl::CompassConstraints::CompassConstraints(CMMsl::CompassConstraints *this)
{
  double result;

  *(_QWORD *)this = off_100350678;
  *((_DWORD *)this + 31) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100350678;
  *((_DWORD *)this + 31) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::CompassConstraints::~CompassConstraints(CMMsl::CompassConstraints *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100350678;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::CompassConstraints::~CompassConstraints(this);
  operator delete();
}

CMMsl::CompassConstraints *CMMsl::CompassConstraints::CompassConstraints(CMMsl::CompassConstraints *this, const CMMsl::CompassConstraints *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  int v23;
  int v24;
  int v25;

  *(_QWORD *)this = off_100350678;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 31) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = *((_DWORD *)a2 + 31);
  if ((v5 & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 7);
    v6 = 1;
    *((_DWORD *)this + 31) = 1;
    *((_QWORD *)this + 7) = v7;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 22);
    v6 |= 0x80u;
    *((_DWORD *)this + 31) = v6;
    *((_DWORD *)this + 22) = v8;
    v5 = *((_DWORD *)a2 + 31);
  }
LABEL_6:
  if ((v5 & 0x4000) != 0)
  {
    v13 = *((_DWORD *)a2 + 29);
    v6 |= 0x4000u;
    *((_DWORD *)this + 31) = v6;
    *((_DWORD *)this + 29) = v13;
    v5 = *((_DWORD *)a2 + 31);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }
  v14 = *((_DWORD *)a2 + 17);
  v6 |= 4u;
  *((_DWORD *)this + 31) = v6;
  *((_DWORD *)this + 17) = v14;
  if ((*((_DWORD *)a2 + 31) & 0x20) != 0)
  {
LABEL_9:
    v9 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 31) = v6 | 0x20;
    *((_DWORD *)this + 20) = v9;
  }
LABEL_10:
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x800) != 0)
  {
    v15 = *((_DWORD *)a2 + 26);
    *((_DWORD *)this + 31) |= 0x800u;
    *((_DWORD *)this + 26) = v15;
    v10 = *((_DWORD *)a2 + 31);
    if ((v10 & 0x100) == 0)
    {
LABEL_14:
      if ((v10 & 2) == 0)
        goto LABEL_15;
      goto LABEL_31;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_14;
  }
  v16 = *((_DWORD *)a2 + 23);
  *((_DWORD *)this + 31) |= 0x100u;
  *((_DWORD *)this + 23) = v16;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 2) == 0)
  {
LABEL_15:
    if ((v10 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v17 = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 31) |= 2u;
  *((_DWORD *)this + 16) = v17;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x10) == 0)
  {
LABEL_16:
    if ((v10 & 8) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v18 = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 31) |= 0x10u;
  *((_DWORD *)this + 19) = v18;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 8) == 0)
  {
LABEL_17:
    if ((v10 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v19 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 31) |= 8u;
  *((_DWORD *)this + 18) = v19;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x400) == 0)
  {
LABEL_18:
    if ((v10 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v20 = *((_DWORD *)a2 + 25);
  *((_DWORD *)this + 31) |= 0x400u;
  *((_DWORD *)this + 25) = v20;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x10000) == 0)
  {
LABEL_19:
    if ((v10 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v21 = *((_BYTE *)a2 + 121);
  *((_DWORD *)this + 31) |= 0x10000u;
  *((_BYTE *)this + 121) = v21;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x8000) == 0)
  {
LABEL_20:
    if ((v10 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v22 = *((_BYTE *)a2 + 120);
  *((_DWORD *)this + 31) |= 0x8000u;
  *((_BYTE *)this + 120) = v22;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x200) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_38;
  }
LABEL_37:
  v23 = *((_DWORD *)a2 + 24);
  *((_DWORD *)this + 31) |= 0x200u;
  *((_DWORD *)this + 24) = v23;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x40) == 0)
      goto LABEL_23;
LABEL_39:
    v25 = *((_DWORD *)a2 + 21);
    *((_DWORD *)this + 31) |= 0x40u;
    *((_DWORD *)this + 21) = v25;
    if ((*((_DWORD *)a2 + 31) & 0x2000) == 0)
      return this;
    goto LABEL_24;
  }
LABEL_38:
  v24 = *((_DWORD *)a2 + 27);
  *((_DWORD *)this + 31) |= 0x1000u;
  *((_DWORD *)this + 27) = v24;
  v10 = *((_DWORD *)a2 + 31);
  if ((v10 & 0x40) != 0)
    goto LABEL_39;
LABEL_23:
  if ((v10 & 0x2000) != 0)
  {
LABEL_24:
    v11 = *((_DWORD *)a2 + 28);
    *((_DWORD *)this + 31) |= 0x2000u;
    *((_DWORD *)this + 28) = v11;
  }
  return this;
}

CMMsl *CMMsl::CompassConstraints::operator=(CMMsl *a1, const CMMsl::CompassConstraints *a2)
{
  CMMsl::CompassConstraints *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::CompassConstraints::CompassConstraints((CMMsl::CompassConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassConstraints *)v5, v3);
    CMMsl::CompassConstraints::~CompassConstraints((CMMsl::CompassConstraints *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CompassConstraints *a2, CMMsl::CompassConstraints *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v10) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  LODWORD(v10) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v10;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LOBYTE(v10) = *((_BYTE *)this + 121);
  *((_BYTE *)this + 121) = *((_BYTE *)a2 + 121);
  *((_BYTE *)a2 + 121) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v10;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  result = *((float *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((float *)a2 + 28) = result;
  return result;
}

uint64_t CMMsl::CompassConstraints::CompassConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100350678;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

CMMsl *CMMsl::CompassConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::CompassConstraints *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::CompassConstraints::CompassConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::CompassConstraints *)v5, v3);
    CMMsl::CompassConstraints::~CompassConstraints((CMMsl::CompassConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::CompassConstraints::formatText(CMMsl::CompassConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  int v8;
  float *v9;
  float *v10;
  float v11;
  int v12;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 124) & 2) != 0)
    PB::TextFormatter::format(a2, "attitudeDelta", *((float *)this + 16));
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "calibratedField", v7);
  }
  v8 = *((_DWORD *)this + 31);
  if ((v8 & 0x8000) != 0)
  {
    PB::TextFormatter::format(a2, "doCorrection", *((_BYTE *)this + 120));
    v8 = *((_DWORD *)this + 31);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0)
        goto LABEL_8;
      goto LABEL_28;
    }
  }
  else if ((v8 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 17));
  v8 = *((_DWORD *)this + 31);
  if ((v8 & 8) == 0)
  {
LABEL_8:
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isOnSphere", *((_DWORD *)this + 18));
  v8 = *((_DWORD *)this + 31);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isRotating", *((_DWORD *)this + 19));
  if ((*((_DWORD *)this + 31) & 0x10000) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "isTraversingSphere", *((_BYTE *)this + 121));
LABEL_11:
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "predictedField", v11);
  }
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "scale", *((float *)this + 20));
    v12 = *((_DWORD *)this + 31);
    if ((v12 & 0x40) == 0)
    {
LABEL_15:
      if ((v12 & 1) == 0)
        goto LABEL_16;
      goto LABEL_33;
    }
  }
  else if ((v12 & 0x40) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "timerUnitDistanceThreshold", *((float *)this + 21));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    if ((v12 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x80) == 0)
  {
LABEL_17:
    if ((v12 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "unitDistance", *((float *)this + 22));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x100) == 0)
  {
LABEL_18:
    if ((v12 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "unitDistanceLargeBufferDelta", *((float *)this + 23));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x200) == 0)
  {
LABEL_19:
    if ((v12 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "unitDistanceLargeBufferMax", *((float *)this + 24));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x400) == 0)
  {
LABEL_20:
    if ((v12 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "unitDistanceReference", *((float *)this + 25));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x800) == 0)
  {
LABEL_21:
    if ((v12 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "unitDistanceSmallBufferDelta", *((float *)this + 26));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x1000) == 0)
  {
LABEL_22:
    if ((v12 & 0x2000) == 0)
      goto LABEL_23;
LABEL_40:
    PB::TextFormatter::format(a2, "unitDistanceThresholdApplied", *((float *)this + 28));
    if ((*((_DWORD *)this + 31) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_24;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "unitDistanceThreshold", *((float *)this + 27));
  v12 = *((_DWORD *)this + 31);
  if ((v12 & 0x2000) != 0)
    goto LABEL_40;
LABEL_23:
  if ((v12 & 0x4000) != 0)
LABEL_24:
    PB::TextFormatter::format(a2, "vertical", *((float *)this + 29));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::CompassConstraints::readFrom(CMMsl::CompassConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  unint64_t v94;
  char *v95;
  char v96;
  unsigned int v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  char *v118;
  int v119;
  unint64_t v120;
  _BYTE v123[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 31) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_197;
        case 2u:
          *((_DWORD *)this + 31) |= 0x80u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_196;
        case 3u:
          *((_DWORD *)this + 31) |= 0x4000u;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_196;
        case 4u:
          *((_DWORD *)this + 31) |= 4u;
          v29 = *((_QWORD *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v29);
          goto LABEL_196;
        case 5u:
          *((_DWORD *)this + 31) |= 0x20u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v30);
          goto LABEL_196;
        case 6u:
          if (v24 != 2)
          {
            v92 = (char *)*((_QWORD *)this + 2);
            v91 = *((_QWORD *)this + 3);
            if ((unint64_t)v92 >= v91)
            {
              v104 = (char *)*v10;
              v105 = (v92 - (_BYTE *)*v10) >> 2;
              v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 62)
LABEL_208:
                sub_10000D5F8();
              v107 = v91 - (_QWORD)v104;
              if (v107 >> 1 > v106)
                v106 = v107 >> 1;
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                v108 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v108 = v106;
              if (v108)
              {
                v109 = (char *)sub_100020E2C((uint64_t)v11, v108);
                v104 = (char *)*((_QWORD *)this + 1);
                v92 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v109 = 0;
              }
              v116 = &v109[4 * v105];
              *(_DWORD *)v116 = 0;
              v93 = v116 + 4;
              while (v92 != v104)
              {
                v117 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              *((_QWORD *)this + 1) = v116;
              *((_QWORD *)this + 2) = v93;
              *((_QWORD *)this + 3) = &v109[4 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_DWORD *)v92 = 0;
              v93 = v92 + 4;
            }
            *((_QWORD *)this + 2) = v93;
            goto LABEL_192;
          }
          if ((PB::Reader::placeMark(a2, v123) & 1) != 0)
            return 0;
          v31 = *((_QWORD *)a2 + 1);
          v32 = *((_QWORD *)a2 + 2);
          while (v31 < v32 && !*((_BYTE *)a2 + 24))
          {
            v34 = (char *)*((_QWORD *)this + 2);
            v33 = *((_QWORD *)this + 3);
            if ((unint64_t)v34 >= v33)
            {
              v36 = (char *)*v10;
              v37 = (v34 - (_BYTE *)*v10) >> 2;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62)
                goto LABEL_208;
              v39 = v33 - (_QWORD)v36;
              if (v39 >> 1 > v38)
                v38 = v39 >> 1;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                v40 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                v41 = (char *)sub_100020E2C((uint64_t)v11, v40);
                v36 = (char *)*((_QWORD *)this + 1);
                v34 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v41 = 0;
              }
              v42 = &v41[4 * v37];
              *(_DWORD *)v42 = 0;
              v35 = v42 + 4;
              while (v34 != v36)
              {
                v43 = *((_DWORD *)v34 - 1);
                v34 -= 4;
                *((_DWORD *)v42 - 1) = v43;
                v42 -= 4;
              }
              *((_QWORD *)this + 1) = v42;
              *((_QWORD *)this + 2) = v35;
              *((_QWORD *)this + 3) = &v41[4 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *(_DWORD *)v34 = 0;
              v35 = v34 + 4;
            }
            *((_QWORD *)this + 2) = v35;
            v44 = *((_QWORD *)a2 + 1);
            if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_152;
            *(v35 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v44);
            v32 = *((_QWORD *)a2 + 2);
            v31 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v31;
          }
          goto LABEL_153;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v123) & 1) != 0)
              return 0;
            v45 = *((_QWORD *)a2 + 1);
            v46 = *((_QWORD *)a2 + 2);
            while (v45 < v46 && !*((_BYTE *)a2 + 24))
            {
              v48 = (char *)*((_QWORD *)this + 5);
              v47 = *((_QWORD *)this + 6);
              if ((unint64_t)v48 >= v47)
              {
                v50 = (char *)*v8;
                v51 = (v48 - (_BYTE *)*v8) >> 2;
                v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 62)
                  goto LABEL_209;
                v53 = v47 - (_QWORD)v50;
                if (v53 >> 1 > v52)
                  v52 = v53 >> 1;
                if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                  v54 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v54 = v52;
                if (v54)
                {
                  v55 = (char *)sub_100020E2C((uint64_t)v9, v54);
                  v50 = (char *)*((_QWORD *)this + 4);
                  v48 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v55 = 0;
                }
                v56 = &v55[4 * v51];
                *(_DWORD *)v56 = 0;
                v49 = v56 + 4;
                while (v48 != v50)
                {
                  v57 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *((_DWORD *)v56 - 1) = v57;
                  v56 -= 4;
                }
                *((_QWORD *)this + 4) = v56;
                *((_QWORD *)this + 5) = v49;
                *((_QWORD *)this + 6) = &v55[4 * v54];
                if (v50)
                  operator delete(v50);
              }
              else
              {
                *(_DWORD *)v48 = 0;
                v49 = v48 + 4;
              }
              *((_QWORD *)this + 5) = v49;
              v58 = *((_QWORD *)a2 + 1);
              if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_152:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v49 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v58);
              v46 = *((_QWORD *)a2 + 2);
              v45 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v45;
            }
LABEL_153:
            PB::Reader::recallMark(a2, v123);
          }
          else
          {
            v95 = (char *)*((_QWORD *)this + 5);
            v94 = *((_QWORD *)this + 6);
            if ((unint64_t)v95 >= v94)
            {
              v110 = (char *)*v8;
              v111 = (v95 - (_BYTE *)*v8) >> 2;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
LABEL_209:
                sub_10000D5F8();
              v113 = v94 - (_QWORD)v110;
              if (v113 >> 1 > v112)
                v112 = v113 >> 1;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                v114 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_100020E2C((uint64_t)v9, v114);
                v110 = (char *)*((_QWORD *)this + 4);
                v95 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v115 = 0;
              }
              v118 = &v115[4 * v111];
              *(_DWORD *)v118 = 0;
              v93 = v118 + 4;
              while (v95 != v110)
              {
                v119 = *((_DWORD *)v95 - 1);
                v95 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *((_QWORD *)this + 4) = v118;
              *((_QWORD *)this + 5) = v93;
              *((_QWORD *)this + 6) = &v115[4 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_DWORD *)v95 = 0;
              v93 = v95 + 4;
            }
            *((_QWORD *)this + 5) = v93;
LABEL_192:
            v120 = *((_QWORD *)a2 + 1);
            if (v120 <= 0xFFFFFFFFFFFFFFFBLL && v120 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v93 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v120);
LABEL_196:
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_197:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_194:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_198:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 8u:
          *((_DWORD *)this + 31) |= 0x800u;
          v59 = *((_QWORD *)a2 + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v59);
          goto LABEL_196;
        case 9u:
          *((_DWORD *)this + 31) |= 0x100u;
          v60 = *((_QWORD *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v60);
          goto LABEL_196;
        case 0xAu:
          *((_DWORD *)this + 31) |= 2u;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v61);
          goto LABEL_196;
        case 0xBu:
          *((_DWORD *)this + 31) |= 0x10u;
          v62 = *((_QWORD *)a2 + 1);
          v63 = *((_QWORD *)a2 + 2);
          v64 = *(_QWORD *)a2;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v68 = v62 + 1;
              *((_QWORD *)a2 + 1) = v62 + 1;
              v69 = *(_BYTE *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0)
                goto LABEL_174;
              v65 += 7;
              v62 = v68;
              v18 = v66++ > 8;
            }
            while (!v18);
LABEL_140:
            LODWORD(v67) = 0;
            goto LABEL_174;
          }
          v96 = 0;
          v97 = 0;
          v67 = 0;
          if (v63 <= v62)
            v63 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v63 == v62)
            {
              LODWORD(v67) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v98 = v62 + 1;
              v99 = *(_BYTE *)(v64 + v62);
              *((_QWORD *)a2 + 1) = v98;
              v67 |= (unint64_t)(v99 & 0x7F) << v96;
              if (v99 < 0)
              {
                v96 += 7;
                v62 = v98;
                v18 = v97++ > 8;
                if (v18)
                  goto LABEL_140;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v67) = 0;
            }
            break;
          }
LABEL_174:
          *((_DWORD *)this + 19) = v67;
          goto LABEL_198;
        case 0xCu:
          *((_DWORD *)this + 31) |= 8u;
          v70 = *((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
          v72 = *(_QWORD *)a2;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)a2 + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_177;
              v73 += 7;
              v70 = v76;
              v18 = v74++ > 8;
            }
            while (!v18);
LABEL_147:
            LODWORD(v75) = 0;
            goto LABEL_177;
          }
          v100 = 0;
          v101 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v71 == v70)
            {
              LODWORD(v75) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v102 = v70 + 1;
              v103 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)a2 + 1) = v102;
              v75 |= (unint64_t)(v103 & 0x7F) << v100;
              if (v103 < 0)
              {
                v100 += 7;
                v70 = v102;
                v18 = v101++ > 8;
                if (v18)
                  goto LABEL_147;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v75) = 0;
            }
            break;
          }
LABEL_177:
          *((_DWORD *)this + 18) = v75;
          goto LABEL_198;
        case 0xDu:
          *((_DWORD *)this + 31) |= 0x400u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_196;
        case 0xEu:
          *((_DWORD *)this + 31) |= 0x10000u;
          v79 = *((_QWORD *)a2 + 1);
          if (v79 >= *((_QWORD *)a2 + 2))
          {
            v82 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)a2 + v79);
            *((_QWORD *)a2 + 1) = v80;
            v82 = v81 != 0;
          }
          *((_BYTE *)this + 121) = v82;
          goto LABEL_198;
        case 0xFu:
          *((_DWORD *)this + 31) |= 0x8000u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 >= *((_QWORD *)a2 + 2))
          {
            v86 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)a2 + v83);
            *((_QWORD *)a2 + 1) = v84;
            v86 = v85 != 0;
          }
          *((_BYTE *)this + 120) = v86;
          goto LABEL_198;
        case 0x10u:
          *((_DWORD *)this + 31) |= 0x200u;
          v87 = *((_QWORD *)a2 + 1);
          if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v87);
          goto LABEL_196;
        case 0x11u:
          *((_DWORD *)this + 31) |= 0x1000u;
          v88 = *((_QWORD *)a2 + 1);
          if (v88 > 0xFFFFFFFFFFFFFFFBLL || v88 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v88);
          goto LABEL_196;
        case 0x12u:
          *((_DWORD *)this + 31) |= 0x40u;
          v89 = *((_QWORD *)a2 + 1);
          if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v89);
          goto LABEL_196;
        case 0x13u:
          *((_DWORD *)this + 31) |= 0x2000u;
          v90 = *((_QWORD *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_194;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v90);
          goto LABEL_196;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_198;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = this;
  v4 = *(_DWORD *)(this + 124);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 2u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
LABEL_29:
    this = PB::Writer::write(a2, *(float *)(v3 + 68), 4u);
    if ((*(_DWORD *)(v3 + 124) & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 3u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) != 0)
    goto LABEL_29;
LABEL_5:
  if ((v4 & 0x20) != 0)
LABEL_6:
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 5u);
LABEL_7:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 6u);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 7u);
  }
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 104), 8u);
    v11 = *(_DWORD *)(v3 + 124);
    if ((v11 & 0x100) == 0)
    {
LABEL_15:
      if ((v11 & 2) == 0)
        goto LABEL_16;
      goto LABEL_33;
    }
  }
  else if ((v11 & 0x100) == 0)
  {
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 9u);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 2) == 0)
  {
LABEL_16:
    if ((v11 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xAu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10) == 0)
  {
LABEL_17:
    if ((v11 & 8) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0xBu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 8) == 0)
  {
LABEL_18:
    if ((v11 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xCu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x400) == 0)
  {
LABEL_19:
    if ((v11 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xDu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10000) == 0)
  {
LABEL_20:
    if ((v11 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 121), 0xEu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x8000) == 0)
  {
LABEL_21:
    if ((v11 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 120), 0xFu);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x200) == 0)
  {
LABEL_22:
    if ((v11 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x10u);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x1000) == 0)
  {
LABEL_23:
    if ((v11 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x11u);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x40) == 0)
  {
LABEL_24:
    if ((v11 & 0x2000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 112), 0x13u);
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x12u);
  if ((*(_DWORD *)(v3 + 124) & 0x2000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 112), 0x13u);
  return this;
}

BOOL CMMsl::CompassConstraints::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  _BOOL8 v10;

  v2 = *(_DWORD *)(a1 + 124);
  v3 = *(_DWORD *)(a2 + 124);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 40) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v10 = (*(_DWORD *)(a2 + 124) & 0x2000) == 0;
  if ((v2 & 0x2000) != 0)
    return (v3 & 0x2000) != 0 && *(float *)(a1 + 112) == *(float *)(a2 + 112);
  return v10;
}

uint64_t CMMsl::CompassConstraints::hash_value(CMMsl::CompassConstraints *this)
{
  int v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;

  v2 = *((_DWORD *)this + 31);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_3;
LABEL_22:
    v5 = 0;
    if ((v2 & 0x4000) != 0)
      goto LABEL_7;
LABEL_23:
    v7 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
  if (*((double *)this + 7) == 0.0)
    v3 = 0;
  else
    v3 = *((_QWORD *)this + 7);
  if ((v2 & 0x80) == 0)
    goto LABEL_22;
LABEL_3:
  v4 = *((float *)this + 22);
  if (v4 == 0.0)
    v5 = 0;
  else
    v5 = LODWORD(v4);
  if ((v2 & 0x4000) == 0)
    goto LABEL_23;
LABEL_7:
  v6 = *((float *)this + 29);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v2 & 4) != 0)
  {
LABEL_11:
    v8 = *((float *)this + 17);
    if (v8 == 0.0)
      v9 = 0;
    else
      v9 = LODWORD(v8);
    if ((v2 & 0x20) != 0)
      goto LABEL_15;
LABEL_25:
    v11 = 0;
    goto LABEL_26;
  }
LABEL_24:
  v9 = 0;
  if ((v2 & 0x20) == 0)
    goto LABEL_25;
LABEL_15:
  v10 = *((float *)this + 20);
  if (v10 == 0.0)
    v11 = 0;
  else
    v11 = LODWORD(v10);
LABEL_26:
  v12 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v13 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v14 = *((_DWORD *)this + 31);
  if ((v14 & 0x800) == 0)
  {
    v15 = 0;
    if ((v14 & 0x100) != 0)
      goto LABEL_28;
LABEL_56:
    v17 = 0;
    if ((v14 & 2) != 0)
      goto LABEL_31;
LABEL_57:
    v19 = 0;
    if ((v14 & 0x10) != 0)
      goto LABEL_34;
    goto LABEL_58;
  }
  v34 = *((float *)this + 26);
  v15 = LODWORD(v34);
  if (v34 == 0.0)
    v15 = 0;
  if ((v14 & 0x100) == 0)
    goto LABEL_56;
LABEL_28:
  v16 = *((float *)this + 23);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v14 & 2) == 0)
    goto LABEL_57;
LABEL_31:
  v18 = *((float *)this + 16);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v14 & 0x10) != 0)
  {
LABEL_34:
    v20 = *((unsigned int *)this + 19);
    if ((v14 & 8) != 0)
      goto LABEL_35;
    goto LABEL_59;
  }
LABEL_58:
  v20 = 0;
  if ((v14 & 8) != 0)
  {
LABEL_35:
    v21 = *((unsigned int *)this + 18);
    if ((v14 & 0x400) != 0)
      goto LABEL_36;
LABEL_60:
    v23 = 0;
    if ((v14 & 0x10000) != 0)
      goto LABEL_39;
    goto LABEL_61;
  }
LABEL_59:
  v21 = 0;
  if ((v14 & 0x400) == 0)
    goto LABEL_60;
LABEL_36:
  v22 = *((float *)this + 25);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v14 & 0x10000) != 0)
  {
LABEL_39:
    v24 = *((unsigned __int8 *)this + 121);
    if ((v14 & 0x8000) != 0)
      goto LABEL_40;
    goto LABEL_62;
  }
LABEL_61:
  v24 = 0;
  if ((v14 & 0x8000) != 0)
  {
LABEL_40:
    v25 = *((unsigned __int8 *)this + 120);
    if ((v14 & 0x200) != 0)
      goto LABEL_41;
LABEL_63:
    v27 = 0;
    if ((v14 & 0x1000) != 0)
      goto LABEL_44;
LABEL_64:
    v29 = 0;
    if ((v14 & 0x40) != 0)
      goto LABEL_47;
    goto LABEL_65;
  }
LABEL_62:
  v25 = 0;
  if ((v14 & 0x200) == 0)
    goto LABEL_63;
LABEL_41:
  v26 = *((float *)this + 24);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v14 & 0x1000) == 0)
    goto LABEL_64;
LABEL_44:
  v28 = *((float *)this + 27);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v14 & 0x40) != 0)
  {
LABEL_47:
    v30 = *((float *)this + 21);
    v31 = LODWORD(v30);
    if (v30 == 0.0)
      v31 = 0;
    if ((v14 & 0x2000) != 0)
      goto LABEL_50;
LABEL_66:
    v33 = 0;
    return v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33;
  }
LABEL_65:
  v31 = 0;
  if ((v14 & 0x2000) == 0)
    goto LABEL_66;
LABEL_50:
  v32 = *((float *)this + 28);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  return v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v21 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v33;
}

_QWORD *CMMsl::CompassCorrection::CompassCorrection(_QWORD *this)
{
  *this = off_1003506B0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003506B0;
  this[1] = 0;
  return this;
}

void CMMsl::CompassCorrection::~CompassCorrection(CMMsl::CompassCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003506B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003506B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003506B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::CompassCorrection::CompassCorrection(_QWORD *this, const CMMsl::CompassCorrection *a2)
{
  *this = off_1003506B0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::CompassCorrection *CMMsl::CompassCorrection::operator=(const CMMsl::CompassCorrection *a1, const CMMsl::CompassCorrection *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::CompassCorrection *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::CompassCorrection::CompassCorrection(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003506B0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CompassCorrection *a2, CMMsl::CompassCorrection *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::CompassCorrection::CompassCorrection(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003506B0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003506B0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::CompassCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003506B0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::CompassCorrection::formatText(CMMsl::CompassCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CompassCorrection::readFrom(CMMsl::CompassCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CompassCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::CompassCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  return result;
}

CMMsl::DeviceMotionCorrection *CMMsl::CompassCorrection::hash_value(CMMsl::CompassCorrection *this)
{
  CMMsl::DeviceMotionCorrection *result;

  result = (CMMsl::DeviceMotionCorrection *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  return result;
}

uint64_t CMMsl::CompassCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t this)
{
  *(_QWORD *)this = off_1003506E8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003506E8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::ComplexHandMotion::~ComplexHandMotion(CMMsl::ComplexHandMotion *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t this, const CMMsl::ComplexHandMotion *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)this = off_1003506E8;
  *(_DWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 28) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 28) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 4) == 0)
      return this;
LABEL_10:
    v7 = *((_BYTE *)a2 + 24);
    *(_BYTE *)(this + 28) = v3 | 4;
    *(_BYTE *)(this + 24) = v7;
    return this;
  }
  v6 = *((_BYTE *)a2 + 25);
  v3 |= 8u;
  *(_BYTE *)(this + 28) = v3;
  *(_BYTE *)(this + 25) = v6;
  if ((*((_BYTE *)a2 + 28) & 4) != 0)
    goto LABEL_10;
  return this;
}

uint64_t CMMsl::ComplexHandMotion::operator=(uint64_t a1, const CMMsl::ComplexHandMotion *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  int v9;

  if ((const CMMsl::ComplexHandMotion *)a1 != a2)
  {
    CMMsl::ComplexHandMotion::ComplexHandMotion((uint64_t)&v6, a2);
    v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v8;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::ComplexHandMotion *a2, CMMsl::ComplexHandMotion *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  LOBYTE(v3) = *((_BYTE *)this + 25);
  *((_BYTE *)this + 25) = *((_BYTE *)a2 + 25);
  *((_BYTE *)a2 + 25) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v3;
  return result;
}

double CMMsl::ComplexHandMotion::ComplexHandMotion(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003506E8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003506E8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return result;
}

uint64_t CMMsl::ComplexHandMotion::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int16 v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::ComplexHandMotion *__hidden);
  __int128 v9;
  __int16 v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_1003506E8;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_WORD *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 28);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    LOWORD(v3) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = v4;
    v10 = v3;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::ComplexHandMotion::formatText(CMMsl::ComplexHandMotion *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "finalDecision", *((_BYTE *)this + 24));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "timeStart", *((double *)this + 1));
      if ((*((_BYTE *)this + 28) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "instantDecision", *((_BYTE *)this + 25));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timeStop", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ComplexHandMotion::readFrom(CMMsl::ComplexHandMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 28) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_29;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 2u:
              *((_BYTE *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_39:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_29:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_40;
            case 3u:
              *((_BYTE *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 25) = v22;
              goto LABEL_40;
            case 4u:
              *((_BYTE *)this + 28) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 24) = v24;
              goto LABEL_40;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_40:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ComplexHandMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 24), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 25), 3u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 24), 4u);
  return this;
}

BOOL CMMsl::ComplexHandMotion::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 8) == 0 || *(unsigned __int8 *)(a1 + 25) != *(unsigned __int8 *)(a2 + 25))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::ComplexHandMotion::hash_value(CMMsl::ComplexHandMotion *this)
{
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_11:
    v2 = 0.0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_6;
LABEL_12:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_7;
LABEL_13:
    v4 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_11;
LABEL_3:
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_12;
LABEL_6:
  v3 = *((unsigned __int8 *)this + 25);
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_13;
LABEL_7:
  v4 = *((unsigned __int8 *)this + 24);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4;
}

_QWORD *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(_QWORD *this)
{
  *this = off_100350720;
  this[1] = 0;
  return this;
}

{
  *this = off_100350720;
  this[1] = 0;
  return this;
}

void CMMsl::ConstrainedIntegratorModelPredictedPose::~ConstrainedIntegratorModelPredictedPose(CMMsl::ConstrainedIntegratorModelPredictedPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350720;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350720;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350720;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(_QWORD *this, const CMMsl::ConstrainedIntegratorModelPredictedPose *a2)
{
  *this = off_100350720;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::ConstrainedIntegratorModelPredictedPose *CMMsl::ConstrainedIntegratorModelPredictedPose::operator=(const CMMsl::ConstrainedIntegratorModelPredictedPose *a1, const CMMsl::ConstrainedIntegratorModelPredictedPose *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::ConstrainedIntegratorModelPredictedPose *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100350720;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ConstrainedIntegratorModelPredictedPose *a2, CMMsl::ConstrainedIntegratorModelPredictedPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::ConstrainedIntegratorModelPredictedPose::ConstrainedIntegratorModelPredictedPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100350720;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100350720;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100350720;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::formatText(CMMsl::ConstrainedIntegratorModelPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::readFrom(CMMsl::ConstrainedIntegratorModelPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::ConstrainedIntegratorModelPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionPredictedPose::operator==(v2, v3);
  return result;
}

CMMsl::BioMotionPredictedPose *CMMsl::ConstrainedIntegratorModelPredictedPose::hash_value(CMMsl::ConstrainedIntegratorModelPredictedPose *this)
{
  CMMsl::BioMotionPredictedPose *result;

  result = (CMMsl::BioMotionPredictedPose *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionPredictedPose *)CMMsl::BioMotionPredictedPose::hash_value(result);
  return result;
}

uint64_t CMMsl::ConstrainedIntegratorModelPredictedPose::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

_QWORD *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(_QWORD *this)
{
  *this = off_100350758;
  this[1] = 0;
  return this;
}

{
  *this = off_100350758;
  this[1] = 0;
  return this;
}

void CMMsl::ConstrainedIntegratorPose::~ConstrainedIntegratorPose(CMMsl::ConstrainedIntegratorPose *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350758;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350758;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350758;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(_QWORD *this, const CMMsl::ConstrainedIntegratorPose *a2)
{
  *this = off_100350758;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::ConstrainedIntegratorPose *CMMsl::ConstrainedIntegratorPose::operator=(const CMMsl::ConstrainedIntegratorPose *a1, const CMMsl::ConstrainedIntegratorPose *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::ConstrainedIntegratorPose *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100350758;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ConstrainedIntegratorPose *a2, CMMsl::ConstrainedIntegratorPose *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::ConstrainedIntegratorPose::ConstrainedIntegratorPose(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100350758;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100350758;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorPose::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100350758;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::ConstrainedIntegratorPose::formatText(CMMsl::ConstrainedIntegratorPose *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ConstrainedIntegratorPose::readFrom(CMMsl::ConstrainedIntegratorPose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ConstrainedIntegratorPose::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::ConstrainedIntegratorPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionPose::operator==(v2, v3);
  return result;
}

CMMsl::BioMotionPose *CMMsl::ConstrainedIntegratorPose::hash_value(CMMsl::ConstrainedIntegratorPose *this)
{
  CMMsl::BioMotionPose *result;

  result = (CMMsl::BioMotionPose *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionPose *)CMMsl::BioMotionPose::hash_value(result);
  return result;
}

uint64_t CMMsl::ConstrainedIntegratorPose::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(uint64_t this)
{
  *(_QWORD *)this = off_100350790;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350790;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void CMMsl::CoprocessorReplyGaitMetrics::~CoprocessorReplyGaitMetrics(CMMsl::CoprocessorReplyGaitMetrics *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(CMMsl::CoprocessorReplyGaitMetrics *this, const CMMsl::CoprocessorReplyGaitMetrics *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)this = off_100350790;
  *((_DWORD *)this + 23) = 0;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 23) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 22);
    v3 |= 0x80000u;
    *((_DWORD *)this + 23) = v3;
    *((float *)this + 22) = result;
    v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *((float *)a2 + 7);
    v3 |= 0x10u;
    *((_DWORD *)this + 23) = v3;
    *((float *)this + 7) = result;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 18) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  v6 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 8) = v6;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 6) = v7;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 14) = v8;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 11) = v9;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 10) = v10;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 12) = v11;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 5) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = *((float *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 4) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 13) = v12;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 23) = v3;
  *((_DWORD *)this + 9) = v13;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  result = *((float *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_40:
  result = *((float *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0)
      return result;
LABEL_42:
    result = *((float *)a2 + 21);
    *((_DWORD *)this + 23) = v3 | 0x40000;
    *((float *)this + 21) = result;
    return result;
  }
LABEL_41:
  result = *((float *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 23) = v3;
  *((float *)this + 20) = result;
  if ((*((_DWORD *)a2 + 23) & 0x40000) != 0)
    goto LABEL_42;
  return result;
}

CMMsl *CMMsl::CoprocessorReplyGaitMetrics::operator=(CMMsl *a1, const CMMsl::CoprocessorReplyGaitMetrics *a2)
{
  CMMsl::CoprocessorReplyGaitMetrics *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics((CMMsl::CoprocessorReplyGaitMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::CoprocessorReplyGaitMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CoprocessorReplyGaitMetrics *a2, CMMsl::CoprocessorReplyGaitMetrics *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v5;
  v6 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  v9 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v9;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  v11 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v11;
  v12 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v12;
  v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

float CMMsl::CoprocessorReplyGaitMetrics::CoprocessorReplyGaitMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350790;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(float *)(a2 + 84);
  *(float *)(a1 + 84) = result;
  return result;
}

CMMsl *CMMsl::CoprocessorReplyGaitMetrics::operator=(CMMsl *this, uint64_t a2, CMMsl::CoprocessorReplyGaitMetrics *a3)
{
  uint64_t v4;
  _QWORD v6[3];
  int v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v14 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v6[0] = off_100350790;
    v6[1] = v4;
    v8 = *(_DWORD *)(a2 + 28);
    v7 = *(_DWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a2 + 56);
    v6[2] = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 48);
    v9 = *(_OWORD *)(a2 + 32);
    v12 = *(_OWORD *)(a2 + 60);
    v13 = *(_OWORD *)(a2 + 76);
    CMMsl::swap(this, (CMMsl::CoprocessorReplyGaitMetrics *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::formatText(CMMsl::CoprocessorReplyGaitMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbabilityEstimate", *((float *)this + 4));
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cycleTime", *((float *)this + 5));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "deviceSide", *((_DWORD *)this + 6));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "doubleSupportEstimate", *((float *)this + 7));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gaitPhase", *((_DWORD *)this + 8));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsCadenceConcordant", *((_DWORD *)this + 9));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsFeasibleWalkingSpeed", *((_DWORD *)this + 10));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsNotRunning", *((_DWORD *)this + 11));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsPendular", *((_DWORD *)this + 12));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSufficientVerticalTwist", *((_DWORD *)this + 13));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSwingStanceCycle", *((_DWORD *)this + 14));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 15));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 16));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 17));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "stepLengthEstimate", *((float *)this + 18));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 19));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 20));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0)
      goto LABEL_20;
LABEL_41:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
    if ((*((_DWORD *)this + 23) & 0x80000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_21;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 21));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) != 0)
    goto LABEL_41;
LABEL_20:
  if ((v5 & 0x80000) != 0)
LABEL_21:
    PB::TextFormatter::format(a2, "walkSpeedEstimate", *((float *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::readFrom(CMMsl::CoprocessorReplyGaitMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 23) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_189;
                  }
                  v77 = v20++;
                  v78 = *(_BYTE *)(v21 + v77);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_188:
                v2 = v77 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_189;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_189:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_230;
            case 2u:
              *((_DWORD *)this + 23) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 3u:
              *((_DWORD *)this + 23) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 4u:
              *((_DWORD *)this + 23) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 5u:
              *((_DWORD *)this + 23) |= 0x20u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_194;
                  }
                  v81 = v27++;
                  v82 = *(_BYTE *)(v28 + v81);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_193:
                    v2 = v81 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_193;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_194;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_194:
              *((_DWORD *)this + 8) = v31;
              goto LABEL_230;
            case 6u:
              *((_DWORD *)this + 23) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_199;
                  }
                  v85 = v33++;
                  v86 = *(_BYTE *)(v34 + v85);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_198:
                    v2 = v85 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_198;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_199;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_199:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_230;
            case 7u:
              *((_DWORD *)this + 23) |= 0x800u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_204;
                  }
                  v89 = v39++;
                  v90 = *(_BYTE *)(v40 + v89);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_203:
                    v2 = v89 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_203;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_204;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_204:
              *((_DWORD *)this + 14) = v43;
              goto LABEL_230;
            case 8u:
              *((_DWORD *)this + 23) |= 0x100u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_209;
                  }
                  v93 = v45++;
                  v94 = *(_BYTE *)(v46 + v93);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_208:
                    v2 = v93 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_208;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_209;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_209:
              *((_DWORD *)this + 11) = v49;
              goto LABEL_230;
            case 9u:
              *((_DWORD *)this + 23) |= 0x80u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_214;
                  }
                  v97 = v51++;
                  v98 = *(_BYTE *)(v52 + v97);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_213:
                    v2 = v97 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_213;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_214;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_214:
              *((_DWORD *)this + 10) = v55;
              goto LABEL_230;
            case 0xAu:
              *((_DWORD *)this + 23) |= 0x200u;
              v57 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v58 = *(_QWORD *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_219;
                  }
                  v101 = v57++;
                  v102 = *(_BYTE *)(v58 + v101);
                  *((_QWORD *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_218:
                    v2 = v101 + 1;
                    goto LABEL_219;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v61) = 0;
                goto LABEL_218;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)a2 + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_219;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_219:
              *((_DWORD *)this + 12) = v61;
              goto LABEL_230;
            case 0xBu:
              *((_DWORD *)this + 23) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 0xCu:
              *((_DWORD *)this + 23) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 0xDu:
              *((_DWORD *)this + 23) |= 0x400u;
              v63 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v64 = *(_QWORD *)a2;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v103 = 0;
                v104 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_224;
                  }
                  v105 = v63++;
                  v106 = *(_BYTE *)(v64 + v105);
                  *((_QWORD *)a2 + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0)
                    break;
                  v103 += 7;
                  v14 = v104++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_223:
                    v2 = v105 + 1;
                    goto LABEL_224;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v67) = 0;
                goto LABEL_223;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)a2 + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_224;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_224:
              *((_DWORD *)this + 13) = v67;
              goto LABEL_230;
            case 0xEu:
              *((_DWORD *)this + 23) |= 0x40u;
              v69 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v70 = *(_QWORD *)a2;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v107 = 0;
                v108 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_229;
                  }
                  v109 = v69++;
                  v110 = *(_BYTE *)(v70 + v109);
                  *((_QWORD *)a2 + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0)
                    break;
                  v107 += 7;
                  v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_228:
                    v2 = v109 + 1;
                    goto LABEL_229;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v73) = 0;
                goto LABEL_228;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)a2 + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_229;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_229:
              *((_DWORD *)this + 9) = v73;
LABEL_230:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *((_DWORD *)this + 23) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 0x10u:
              *((_DWORD *)this + 23) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 0x11u:
              *((_DWORD *)this + 23) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 0x12u:
              *((_DWORD *)this + 23) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 0x13u:
              *((_DWORD *)this + 23) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_119;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_184;
            case 0x14u:
              *((_DWORD *)this + 23) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_184:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_119:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_230;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_230;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 92);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 2u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 4u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 5u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 6u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 7u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 8u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 9u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0xAu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xBu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xCu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0xDu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0xEu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xFu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x10u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x11u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x12u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 84), 0x14u);
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x13u);
  if ((*(_DWORD *)(v3 + 92) & 0x40000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 84), 0x14u);
  return this;
}

BOOL CMMsl::CoprocessorReplyGaitMetrics::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 92);
  v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0)
    return (v3 & 0x40000) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84);
  return v4;
}

uint64_t CMMsl::CoprocessorReplyGaitMetrics::hash_value(CMMsl::CoprocessorReplyGaitMetrics *this)
{
  int v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;

  v1 = *((_DWORD *)this + 23);
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_3;
LABEL_45:
    v4 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
LABEL_46:
    v6 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_9;
LABEL_47:
    v8 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_12;
    goto LABEL_48;
  }
  v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x80000) == 0)
    goto LABEL_45;
LABEL_3:
  v3 = *((float *)this + 22);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_46;
LABEL_6:
  v5 = *((float *)this + 7);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_47;
LABEL_9:
  v7 = *((float *)this + 18);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_12:
    v9 = *((unsigned int *)this + 8);
    if ((v1 & 8) != 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  v9 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_13:
    v10 = *((unsigned int *)this + 6);
    if ((v1 & 0x800) != 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  v10 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_14:
    v11 = *((unsigned int *)this + 14);
    if ((v1 & 0x100) != 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  v11 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_15:
    v12 = *((unsigned int *)this + 11);
    if ((v1 & 0x80) != 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  v12 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_16:
    v13 = *((unsigned int *)this + 10);
    if ((v1 & 0x200) != 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  v13 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_17:
    v14 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0)
      goto LABEL_18;
LABEL_54:
    v16 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_21;
LABEL_55:
    v18 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_53:
  v14 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_54;
LABEL_18:
  v15 = *((float *)this + 5);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_55;
LABEL_21:
  v17 = *((float *)this + 4);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_24:
    v19 = *((unsigned int *)this + 13);
    if ((v1 & 0x40) != 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  v19 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_25:
    v20 = *((unsigned int *)this + 9);
    if ((v1 & 0x1000) != 0)
      goto LABEL_26;
LABEL_58:
    v22 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_29;
LABEL_59:
    v24 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_32;
LABEL_60:
    v26 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_35;
LABEL_61:
    v28 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_38;
    goto LABEL_62;
  }
LABEL_57:
  v20 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_58;
LABEL_26:
  v21 = *((float *)this + 15);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_59;
LABEL_29:
  v23 = *((float *)this + 16);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_60;
LABEL_32:
  v25 = *((float *)this + 17);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_61;
LABEL_35:
  v27 = *((float *)this + 19);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_38:
    v29 = *((float *)this + 20);
    v30 = LODWORD(v29);
    if (v29 == 0.0)
      v30 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_41;
LABEL_63:
    v32 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32;
  }
LABEL_62:
  v30 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_63;
LABEL_41:
  v31 = *((float *)this + 21);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32;
}

uint64_t CMMsl::CourseConstraints::CourseConstraints(uint64_t this)
{
  *(_QWORD *)this = off_1003507C8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003507C8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::CourseConstraints::~CourseConstraints(CMMsl::CourseConstraints *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::CourseConstraints::CourseConstraints(CMMsl::CourseConstraints *this, const CMMsl::CourseConstraints *a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = off_1003507C8;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

{
  char v2;
  uint64_t v3;

  *(_QWORD *)this = off_1003507C8;
  *((_DWORD *)this + 5) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *((_QWORD *)a2 + 1);
  *((_BYTE *)this + 20) = 1;
  *((_QWORD *)this + 1) = v3;
  v2 = 3;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::CourseConstraints::operator=(uint64_t a1, uint64_t a2, double a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  int v12;
  int v13;

  if (a1 != a2)
  {
    v11[0] = off_1003507C8;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v11[1] = v8;
    v9 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a4;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::CourseConstraints *a2, CMMsl::CourseConstraints *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::CourseConstraints::CourseConstraints(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003507C8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003507C8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::CourseConstraints::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_1003507C8;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::CourseConstraints::formatText(CMMsl::CourseConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "yaw", *((float *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CourseConstraints::readFrom(CMMsl::CourseConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_28;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_28:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 8;
      }
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::CourseConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::CourseConstraints::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::CourseConstraints::hash_value(CMMsl::CourseConstraints *this)
{
  double v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ *(_QWORD *)&v1;
}

_QWORD *CMMsl::CourseCorrection::CourseCorrection(_QWORD *this)
{
  *this = off_100350800;
  this[1] = 0;
  return this;
}

{
  *this = off_100350800;
  this[1] = 0;
  return this;
}

void CMMsl::CourseCorrection::~CourseCorrection(CMMsl::CourseCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350800;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350800;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350800;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::CourseCorrection::CourseCorrection(_QWORD *this, const CMMsl::CourseCorrection *a2)
{
  *this = off_100350800;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::CourseCorrection *CMMsl::CourseCorrection::operator=(const CMMsl::CourseCorrection *a1, const CMMsl::CourseCorrection *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::CourseCorrection *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::CourseCorrection::CourseCorrection(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100350800;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::CourseCorrection *a2, CMMsl::CourseCorrection *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::CourseCorrection::CourseCorrection(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100350800;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100350800;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::CourseCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100350800;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::CourseCorrection::formatText(CMMsl::CourseCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::CourseCorrection::readFrom(CMMsl::CourseCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::CourseCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::CourseCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  return result;
}

CMMsl::DeviceMotionCorrection *CMMsl::CourseCorrection::hash_value(CMMsl::CourseCorrection *this)
{
  CMMsl::DeviceMotionCorrection *result;

  result = (CMMsl::DeviceMotionCorrection *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::DeviceMotionCorrection *)CMMsl::DeviceMotionCorrection::hash_value(result);
  return result;
}

uint64_t CMMsl::CourseCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::DeviceMotion::~DeviceMotion(CMMsl::DeviceMotion *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::DeviceMotion::DeviceMotion(CMMsl::DeviceMotion *this, const CMMsl::DeviceMotion *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;

  *(_QWORD *)this = off_100350838;
  *((_DWORD *)this + 31) = 0;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *((_DWORD *)this + 31) = 16;
    *((_QWORD *)this + 5) = v4;
    v2 = *((_DWORD *)a2 + 31);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 31) = v3;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_DWORD *)a2 + 31);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 31) = v3;
    *((_QWORD *)this + 3) = v4;
    v2 = *((_DWORD *)a2 + 31);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v4 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 31) = v3;
  *((_QWORD *)this + 4) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  v4 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 31) = v3;
  *((_QWORD *)this + 1) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x40000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x80000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x100000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 21) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  v5 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 14) = v5;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x1000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_46;
  }
LABEL_45:
  v6 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 19) = v6;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_46:
  v7 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 13) = v7;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x10000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v8 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 23) = v8;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_49;
  }
LABEL_48:
  v9 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000u;
  *((_DWORD *)this + 31) = v3;
  *((_DWORD *)this + 28) = v9;
  v2 = *((_DWORD *)a2 + 31);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0)
      return *(float *)&v4;
    goto LABEL_50;
  }
LABEL_49:
  v10 = *((_BYTE *)a2 + 120);
  v3 |= 0x800000u;
  *((_DWORD *)this + 31) = v3;
  *((_BYTE *)this + 120) = v10;
  if ((*((_DWORD *)a2 + 31) & 0x400000) == 0)
    return *(float *)&v4;
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 31) = v3 | 0x400000;
  *((_DWORD *)this + 29) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::DeviceMotion::operator=(CMMsl *a1, const CMMsl::DeviceMotion *a2)
{
  CMMsl::DeviceMotion *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::DeviceMotion::DeviceMotion((CMMsl::DeviceMotion *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DeviceMotion *a2, CMMsl::DeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float result;

  v3 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v8;
  LODWORD(v8) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v8;
  LODWORD(v8) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v8;
  LODWORD(v8) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  LODWORD(v8) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  LODWORD(v8) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  v9 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v8;
  LODWORD(v8) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  v10 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  v11 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v11;
  v12 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  v13 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 120);
  *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
  *((_BYTE *)a2 + 120) = v13;
  result = *((float *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((float *)a2 + 29) = result;
  return result;
}

float CMMsl::DeviceMotion::DeviceMotion(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350838;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  result = *(float *)(a2 + 116);
  *(float *)(a1 + 116) = result;
  return result;
}

CMMsl *CMMsl::DeviceMotion::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DeviceMotion *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DeviceMotion::DeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotion::formatText(CMMsl::DeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 12));
    v5 = *((_DWORD *)this + 31);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "clientID", *((_DWORD *)this + 13));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isGyroOn", *((_BYTE *)this + 120));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "magneticFieldCalibrationLevel", *((_DWORD *)this + 14));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 15));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 16));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 17));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 18));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "mode", *((_DWORD *)this + 19));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 1));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 2));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 8) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 3));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 4));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 20));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 21));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 22));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 23));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 24));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "userAccelerationX", *((float *)this + 25));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "userAccelerationY", *((float *)this + 26));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
LABEL_49:
    PB::TextFormatter::format(a2, "variant", *((_DWORD *)this + 28));
    if ((*((_DWORD *)this + 31) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_25;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelerationZ", *((float *)this + 27));
  v5 = *((_DWORD *)this + 31);
  if ((v5 & 0x200000) != 0)
    goto LABEL_49;
LABEL_24:
  if ((v5 & 0x400000) != 0)
LABEL_25:
    PB::TextFormatter::format(a2, "visionCompassBias", *((float *)this + 29));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DeviceMotion::readFrom(CMMsl::DeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 31) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 2u:
              *((_DWORD *)this + 31) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 3u:
              *((_DWORD *)this + 31) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 4u:
              *((_DWORD *)this + 31) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 5u:
              *((_DWORD *)this + 31) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_39:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_155;
            case 6u:
              *((_DWORD *)this + 31) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 7u:
              *((_DWORD *)this + 31) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 8u:
              *((_DWORD *)this + 31) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 9u:
              *((_DWORD *)this + 31) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0xAu:
              *((_DWORD *)this + 31) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0xBu:
              *((_DWORD *)this + 31) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0xCu:
              *((_DWORD *)this + 31) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0xDu:
              *((_DWORD *)this + 31) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0xEu:
              *((_DWORD *)this + 31) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0xFu:
              *((_DWORD *)this + 31) |= 0x80u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_165;
                  }
                  v55 = v21++;
                  v56 = *(_BYTE *)(v22 + v55);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_164:
                    v2 = v55 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_164;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_165;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_165:
              *((_DWORD *)this + 14) = v25;
              goto LABEL_156;
            case 0x10u:
              *((_DWORD *)this + 31) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0x11u:
              *((_DWORD *)this + 31) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0x12u:
              *((_DWORD *)this + 31) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_115;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_154;
            case 0x13u:
              *((_DWORD *)this + 31) |= 0x1000u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_170;
                  }
                  v59 = v27++;
                  v60 = *(_BYTE *)(v28 + v59);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_169:
                    v2 = v59 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_169;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_170;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_170:
              *((_DWORD *)this + 19) = v31;
              goto LABEL_156;
            case 0x14u:
              *((_DWORD *)this + 31) |= 0x40u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_175;
                  }
                  v63 = v33++;
                  v64 = *(_BYTE *)(v34 + v63);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_174:
                    v2 = v63 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_174;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_175;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_175:
              *((_DWORD *)this + 13) = v37;
              goto LABEL_156;
            case 0x15u:
              *((_DWORD *)this + 31) |= 0x10000u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_180;
                  }
                  v67 = v39++;
                  v68 = *(_BYTE *)(v40 + v67);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_179:
                    v2 = v67 + 1;
                    goto LABEL_180;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_179;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_180;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_180:
              *((_DWORD *)this + 23) = v43;
              goto LABEL_156;
            case 0x16u:
              *((_DWORD *)this + 31) |= 0x200000u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_185;
                  }
                  v71 = v45++;
                  v72 = *(_BYTE *)(v46 + v71);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_184:
                    v2 = v71 + 1;
                    goto LABEL_185;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_184;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_185;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_185:
              *((_DWORD *)this + 28) = v49;
LABEL_156:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x17u:
              *((_DWORD *)this + 31) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v52 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v52 = v51 != 0;
              }
              *((_BYTE *)this + 120) = v52;
              goto LABEL_156;
            case 0x18u:
              *((_DWORD *)this + 31) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_154:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_155:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_115:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_156;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_156;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 124);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 6u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 7u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 8u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 9u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xAu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xBu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xCu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xDu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xEu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0xFu);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x10u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x11u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x12u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x13u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0x14u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x10000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x15u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x16u);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 116), 0x18u);
  }
LABEL_48:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 120), 0x17u);
  if ((*(_DWORD *)(v3 + 124) & 0x400000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 116), 0x18u);
  return this;
}

uint64_t CMMsl::DeviceMotion::hash_value(CMMsl::DeviceMotion *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;

  v1 = *((_DWORD *)this + 31);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_63:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_64:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_65:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_66:
    v6 = 0.0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_15;
LABEL_67:
    v8 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_18;
LABEL_68:
    v10 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_21;
LABEL_69:
    v12 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_24;
LABEL_70:
    v14 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_27;
LABEL_71:
    v16 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_30;
LABEL_72:
    v18 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_33;
LABEL_73:
    v20 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_36;
LABEL_74:
    v22 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_39;
LABEL_75:
    v24 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_42;
    goto LABEL_76;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_63;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_64;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_65;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_66;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_67;
LABEL_15:
  v7 = *((float *)this + 25);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_68;
LABEL_18:
  v9 = *((float *)this + 26);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_69;
LABEL_21:
  v11 = *((float *)this + 27);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_70;
LABEL_24:
  v13 = *((float *)this + 20);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_71;
LABEL_27:
  v15 = *((float *)this + 21);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_72;
LABEL_30:
  v17 = *((float *)this + 22);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_73;
LABEL_33:
  v19 = *((float *)this + 15);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_74;
LABEL_36:
  v21 = *((float *)this + 16);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_75;
LABEL_39:
  v23 = *((float *)this + 17);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_42:
    v25 = *((int *)this + 14);
    if ((v1 & 0x800) != 0)
      goto LABEL_43;
LABEL_77:
    v27 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_46;
LABEL_78:
    v29 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_49;
LABEL_79:
    v31 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_52;
    goto LABEL_80;
  }
LABEL_76:
  v25 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_77;
LABEL_43:
  v26 = *((float *)this + 18);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_78;
LABEL_46:
  v28 = *((float *)this + 24);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_79;
LABEL_49:
  v30 = *((float *)this + 12);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_52:
    v32 = *((unsigned int *)this + 19);
    if ((v1 & 0x40) != 0)
      goto LABEL_53;
    goto LABEL_81;
  }
LABEL_80:
  v32 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_53:
    v33 = *((unsigned int *)this + 13);
    if ((v1 & 0x10000) != 0)
      goto LABEL_54;
    goto LABEL_82;
  }
LABEL_81:
  v33 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_54:
    v34 = *((unsigned int *)this + 23);
    if ((v1 & 0x200000) != 0)
      goto LABEL_55;
    goto LABEL_83;
  }
LABEL_82:
  v34 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_55:
    v35 = *((unsigned int *)this + 28);
    if ((v1 & 0x800000) != 0)
      goto LABEL_56;
    goto LABEL_84;
  }
LABEL_83:
  v35 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_56:
    v36 = *((unsigned __int8 *)this + 120);
    if ((v1 & 0x400000) != 0)
      goto LABEL_57;
LABEL_85:
    v38 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
  }
LABEL_84:
  v36 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_85;
LABEL_57:
  v37 = *((float *)this + 29);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t this)
{
  *(_QWORD *)this = off_100350870;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350870;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DeviceMotionAlwaysOn::~DeviceMotionAlwaysOn(CMMsl::DeviceMotionAlwaysOn *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350870;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350870;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100350870;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t this, const CMMsl::DeviceMotionAlwaysOn *a2)
{
  char v2;
  char v3;
  char v4;

  *(_QWORD *)this = off_100350870;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v3 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) |= 1u;
    *(_BYTE *)(this + 16) = v3;
    v2 = *((_BYTE *)a2 + 20);
  }
  if ((v2 & 2) != 0)
  {
    v4 = *((_BYTE *)a2 + 17);
    *(_BYTE *)(this + 20) |= 2u;
    *(_BYTE *)(this + 17) = v4;
  }
  return this;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::operator=(uint64_t a1, const CMMsl::DeviceMotionAlwaysOn *a2)
{
  int v3;
  uint64_t v4;
  void (**v6)(CMMsl::DeviceMotionAlwaysOn *__hidden);
  uint64_t v7;
  __int16 v8;
  int v9;

  if ((const CMMsl::DeviceMotionAlwaysOn *)a1 != a2)
  {
    CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn((uint64_t)&v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8;
    v8 = v3;
    v6 = off_100350870;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::DeviceMotionAlwaysOn *a2, CMMsl::DeviceMotionAlwaysOn *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 17);
  *(_BYTE *)(this + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a2 + 17) = v4;
  return this;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::DeviceMotionAlwaysOn(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100350870;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  __int16 v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_WORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    LOWORD(v3) = *(_WORD *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v5;
    v10 = v3;
    v9[0] = off_100350870;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::formatText(CMMsl::DeviceMotionAlwaysOn *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "deviceMotion");
  v6 = *((_BYTE *)this + 20);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "inQuiescentMode", *((_BYTE *)this + 16));
    v6 = *((_BYTE *)this + 20);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(a2, "shouldGyroBeOn", *((_BYTE *)this + 17));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DeviceMotionAlwaysOn::readFrom(CMMsl::DeviceMotionAlwaysOn *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 >= *((_QWORD *)a2 + 2))
        {
          v24 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) = v22;
          v24 = v23 != 0;
        }
        *((_BYTE *)this + 17) = v24;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v25 = *((_QWORD *)a2 + 1);
        if (v25 >= *((_QWORD *)a2 + 2))
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v26 = v25 + 1;
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v25);
          *((_QWORD *)a2 + 1) = v26;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 16) = v28;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::writeTo(uint64_t this, PB::Writer *a2)
{
  BOOL *v3;
  const PB::Base *v4;
  BOOL v5;

  v3 = (BOOL *)this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  v5 = v3[20];
  if (v5)
  {
    this = PB::Writer::write(a2, v3[16], 2u);
    v5 = v3[20];
  }
  if ((v5 & 2) != 0)
    return PB::Writer::write(a2, v3[17], 3u);
  return this;
}

BOOL CMMsl::DeviceMotionAlwaysOn::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotion::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
}

unint64_t CMMsl::DeviceMotionAlwaysOn::hash_value(CMMsl::DeviceMotionAlwaysOn *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotion::hash_value((CMMsl::DeviceMotion *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v3 = *((unsigned __int8 *)this + 16);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_5;
LABEL_7:
    v4 = 0;
    return v3 ^ v2 ^ v4;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_5:
  v4 = *((unsigned __int8 *)this + 17);
  return v3 ^ v2 ^ v4;
}

uint64_t CMMsl::DeviceMotionAlwaysOn::makeDeviceMotion(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = off_1003508A8;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection(this);
  operator delete();
}

CMMsl::DeviceMotionCorrection *CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(CMMsl::DeviceMotionCorrection *this, const CMMsl::DeviceMotionCorrection *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_QWORD *)this = off_1003508A8;
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (char *)this + 104;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  if ((*((_BYTE *)a2 + 160) & 1) != 0)
  {
    v7 = *((_QWORD *)a2 + 19);
    *((_BYTE *)this + 160) = 1;
    *((_QWORD *)this + 19) = v7;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_100020CE4(v6, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4((char *)this + 128, *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DeviceMotionCorrection::operator=(CMMsl *a1, const CMMsl::DeviceMotionCorrection *a2)
{
  CMMsl::DeviceMotionCorrection *v3;
  _BYTE v5[168];

  if (a1 != a2)
  {
    CMMsl::DeviceMotionCorrection::DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotionCorrection *)v5, v3);
    CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DeviceMotionCorrection *a2, CMMsl::DeviceMotionCorrection *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v3;
  result = *((double *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((double *)a2 + 19) = result;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v11;
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v12;
  v13 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  v17 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v17;
  v18 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v18;
  v19 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v19;
  v20 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v20;
  v21 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v21;
  v22 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v22;
  return result;
}

uint64_t CMMsl::DeviceMotionCorrection::DeviceMotionCorrection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003508A8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  sub_100239458(a1 + 104, (__n128 *)(a2 + 104));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 80, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 128, (__n128 *)(a2 + 128));
  return a1;
}

CMMsl *CMMsl::DeviceMotionCorrection::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DeviceMotionCorrection *v3;
  _BYTE v5[168];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DeviceMotionCorrection::DeviceMotionCorrection((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DeviceMotionCorrection *)v5, v3);
    CMMsl::DeviceMotionCorrection::~DeviceMotionCorrection((CMMsl::DeviceMotionCorrection *)v5);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionCorrection::formatText(CMMsl::DeviceMotionCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "dx", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "estimate", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "measurement", v13);
  }
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "noisevariance", v16);
  }
  v17 = (float *)*((_QWORD *)this + 13);
  v18 = (float *)*((_QWORD *)this + 14);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(a2, "residual", v19);
  }
  v20 = (float *)*((_QWORD *)this + 16);
  v21 = (float *)*((_QWORD *)this + 17);
  while (v20 != v21)
  {
    v22 = *v20++;
    PB::TextFormatter::format(a2, "statevariance", v22);
  }
  if ((*((_BYTE *)this + 160) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DeviceMotionCorrection::readFrom(CMMsl::DeviceMotionCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  _DWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  _DWORD *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  _DWORD *v113;
  unint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  int v161;
  char *v162;
  int v163;
  char *v164;
  int v165;
  char *v166;
  int v167;
  char *v168;
  int v169;
  char *v170;
  int v171;
  unint64_t v172;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  void **v180;
  void **v181;
  _BYTE v182[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v179 = (char *)this + 144;
    v180 = (void **)((char *)this + 80);
    v181 = (void **)((char *)this + 128);
    v8 = (void **)((char *)this + 8);
    v177 = (char *)this + 24;
    v178 = (char *)this + 96;
    v9 = (void **)((char *)this + 104);
    v10 = (void **)((char *)this + 56);
    v175 = (char *)this + 72;
    v176 = (char *)this + 120;
    v11 = (void **)((char *)this + 32);
    v174 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 160) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_278;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_280;
        case 2u:
          if (v24 != 2)
          {
            v112 = (char *)*((_QWORD *)this + 5);
            v111 = *((_QWORD *)this + 6);
            if ((unint64_t)v112 >= v111)
            {
              v124 = (char *)*v11;
              v125 = (v112 - (_BYTE *)*v11) >> 2;
              v126 = v125 + 1;
              if ((unint64_t)(v125 + 1) >> 62)
LABEL_289:
                sub_10000D5F8();
              v127 = v111 - (_QWORD)v124;
              if (v127 >> 1 > v126)
                v126 = v127 >> 1;
              if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
                v128 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v128 = v126;
              if (v128)
              {
                v129 = (char *)sub_100020E2C((uint64_t)v174, v128);
                v124 = (char *)*((_QWORD *)this + 4);
                v112 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v129 = 0;
              }
              v160 = &v129[4 * v125];
              *(_DWORD *)v160 = 0;
              v113 = v160 + 4;
              while (v112 != v124)
              {
                v161 = *((_DWORD *)v112 - 1);
                v112 -= 4;
                *((_DWORD *)v160 - 1) = v161;
                v160 -= 4;
              }
              *((_QWORD *)this + 4) = v160;
              *((_QWORD *)this + 5) = v113;
              *((_QWORD *)this + 6) = &v129[4 * v128];
              if (v124)
                operator delete(v124);
            }
            else
            {
              *(_DWORD *)v112 = 0;
              v113 = v112 + 4;
            }
            *((_QWORD *)this + 5) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(a2, v182) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 5);
            v29 = *((_QWORD *)this + 6);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_289;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100020E2C((uint64_t)v174, v36);
                v32 = (char *)*((_QWORD *)this + 4);
                v30 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((_QWORD *)this + 4) = v38;
              *((_QWORD *)this + 5) = v31;
              *((_QWORD *)this + 6) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 5) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_172;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          goto LABEL_173;
        case 3u:
          if (v24 != 2)
          {
            v115 = (char *)*((_QWORD *)this + 8);
            v114 = *((_QWORD *)this + 9);
            if ((unint64_t)v115 >= v114)
            {
              v130 = (char *)*v10;
              v131 = (v115 - (_BYTE *)*v10) >> 2;
              v132 = v131 + 1;
              if ((unint64_t)(v131 + 1) >> 62)
LABEL_290:
                sub_10000D5F8();
              v133 = v114 - (_QWORD)v130;
              if (v133 >> 1 > v132)
                v132 = v133 >> 1;
              if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
                v134 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v134 = v132;
              if (v134)
              {
                v135 = (char *)sub_100020E2C((uint64_t)v175, v134);
                v130 = (char *)*((_QWORD *)this + 7);
                v115 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v135 = 0;
              }
              v162 = &v135[4 * v131];
              *(_DWORD *)v162 = 0;
              v113 = v162 + 4;
              while (v115 != v130)
              {
                v163 = *((_DWORD *)v115 - 1);
                v115 -= 4;
                *((_DWORD *)v162 - 1) = v163;
                v162 -= 4;
              }
              *((_QWORD *)this + 7) = v162;
              *((_QWORD *)this + 8) = v113;
              *((_QWORD *)this + 9) = &v135[4 * v134];
              if (v130)
                operator delete(v130);
            }
            else
            {
              *(_DWORD *)v115 = 0;
              v113 = v115 + 4;
            }
            *((_QWORD *)this + 8) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(a2, v182) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 8);
            v43 = *((_QWORD *)this + 9);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_290;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v175, v50);
                v46 = (char *)*((_QWORD *)this + 7);
                v44 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 7) = v52;
              *((_QWORD *)this + 8) = v45;
              *((_QWORD *)this + 9) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 8) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_172;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_173;
        case 4u:
          if (v24 != 2)
          {
            v117 = (char *)*((_QWORD *)this + 14);
            v116 = *((_QWORD *)this + 15);
            if ((unint64_t)v117 >= v116)
            {
              v136 = (char *)*v9;
              v137 = (v117 - (_BYTE *)*v9) >> 2;
              v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 62)
LABEL_291:
                sub_10000D5F8();
              v139 = v116 - (_QWORD)v136;
              if (v139 >> 1 > v138)
                v138 = v139 >> 1;
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
                v140 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v140 = v138;
              if (v140)
              {
                v141 = (char *)sub_100020E2C((uint64_t)v176, v140);
                v136 = (char *)*((_QWORD *)this + 13);
                v117 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v141 = 0;
              }
              v164 = &v141[4 * v137];
              *(_DWORD *)v164 = 0;
              v113 = v164 + 4;
              while (v117 != v136)
              {
                v165 = *((_DWORD *)v117 - 1);
                v117 -= 4;
                *((_DWORD *)v164 - 1) = v165;
                v164 -= 4;
              }
              *((_QWORD *)this + 13) = v164;
              *((_QWORD *)this + 14) = v113;
              *((_QWORD *)this + 15) = &v141[4 * v140];
              if (v136)
                operator delete(v136);
            }
            else
            {
              *(_DWORD *)v117 = 0;
              v113 = v117 + 4;
            }
            *((_QWORD *)this + 14) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(a2, v182) & 1) != 0)
            return 0;
          v55 = *((_QWORD *)a2 + 1);
          v56 = *((_QWORD *)a2 + 2);
          while (v55 < v56 && !*((_BYTE *)a2 + 24))
          {
            v58 = (char *)*((_QWORD *)this + 14);
            v57 = *((_QWORD *)this + 15);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_291;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_100020E2C((uint64_t)v176, v64);
                v60 = (char *)*((_QWORD *)this + 13);
                v58 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *((_QWORD *)this + 13) = v66;
              *((_QWORD *)this + 14) = v59;
              *((_QWORD *)this + 15) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *((_QWORD *)this + 14) = v59;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_172;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            v56 = *((_QWORD *)a2 + 2);
            v55 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v55;
          }
          goto LABEL_173;
        case 5u:
          if (v24 != 2)
          {
            v119 = (char *)*((_QWORD *)this + 2);
            v118 = *((_QWORD *)this + 3);
            if ((unint64_t)v119 >= v118)
            {
              v142 = (char *)*v8;
              v143 = (v119 - (_BYTE *)*v8) >> 2;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62)
LABEL_292:
                sub_10000D5F8();
              v145 = v118 - (_QWORD)v142;
              if (v145 >> 1 > v144)
                v144 = v145 >> 1;
              if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
                v146 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v146 = v144;
              if (v146)
              {
                v147 = (char *)sub_100020E2C((uint64_t)v177, v146);
                v142 = (char *)*((_QWORD *)this + 1);
                v119 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v147 = 0;
              }
              v166 = &v147[4 * v143];
              *(_DWORD *)v166 = 0;
              v113 = v166 + 4;
              while (v119 != v142)
              {
                v167 = *((_DWORD *)v119 - 1);
                v119 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }
              *((_QWORD *)this + 1) = v166;
              *((_QWORD *)this + 2) = v113;
              *((_QWORD *)this + 3) = &v147[4 * v146];
              if (v142)
                operator delete(v142);
            }
            else
            {
              *(_DWORD *)v119 = 0;
              v113 = v119 + 4;
            }
            *((_QWORD *)this + 2) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(a2, v182) & 1) != 0)
            return 0;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          while (v69 < v70 && !*((_BYTE *)a2 + 24))
          {
            v72 = (char *)*((_QWORD *)this + 2);
            v71 = *((_QWORD *)this + 3);
            if ((unint64_t)v72 >= v71)
            {
              v74 = (char *)*v8;
              v75 = (v72 - (_BYTE *)*v8) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
                goto LABEL_292;
              v77 = v71 - (_QWORD)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)sub_100020E2C((uint64_t)v177, v78);
                v74 = (char *)*((_QWORD *)this + 1);
                v72 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[4 * v75];
              *(_DWORD *)v80 = 0;
              v73 = v80 + 4;
              while (v72 != v74)
              {
                v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *((_QWORD *)this + 1) = v80;
              *((_QWORD *)this + 2) = v73;
              *((_QWORD *)this + 3) = &v79[4 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v73 = v72 + 4;
            }
            *((_QWORD *)this + 2) = v73;
            v82 = *((_QWORD *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_172;
            *(v73 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v82);
            v70 = *((_QWORD *)a2 + 2);
            v69 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v69;
          }
          goto LABEL_173;
        case 6u:
          if (v24 != 2)
          {
            v121 = (char *)*((_QWORD *)this + 11);
            v120 = *((_QWORD *)this + 12);
            if ((unint64_t)v121 >= v120)
            {
              v148 = (char *)*v180;
              v149 = (v121 - (_BYTE *)*v180) >> 2;
              v150 = v149 + 1;
              if ((unint64_t)(v149 + 1) >> 62)
LABEL_293:
                sub_10000D5F8();
              v151 = v120 - (_QWORD)v148;
              if (v151 >> 1 > v150)
                v150 = v151 >> 1;
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
                v152 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v152 = v150;
              if (v152)
              {
                v153 = (char *)sub_100020E2C((uint64_t)v178, v152);
                v148 = (char *)*((_QWORD *)this + 10);
                v121 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v153 = 0;
              }
              v168 = &v153[4 * v149];
              *(_DWORD *)v168 = 0;
              v113 = v168 + 4;
              while (v121 != v148)
              {
                v169 = *((_DWORD *)v121 - 1);
                v121 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *((_QWORD *)this + 10) = v168;
              *((_QWORD *)this + 11) = v113;
              *((_QWORD *)this + 12) = &v153[4 * v152];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *(_DWORD *)v121 = 0;
              v113 = v121 + 4;
            }
            *((_QWORD *)this + 11) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark(a2, v182) & 1) != 0)
            return 0;
          v83 = *((_QWORD *)a2 + 1);
          v84 = *((_QWORD *)a2 + 2);
          while (v83 < v84 && !*((_BYTE *)a2 + 24))
          {
            v86 = (char *)*((_QWORD *)this + 11);
            v85 = *((_QWORD *)this + 12);
            if ((unint64_t)v86 >= v85)
            {
              v88 = (char *)*v180;
              v89 = (v86 - (_BYTE *)*v180) >> 2;
              v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62)
                goto LABEL_293;
              v91 = v85 - (_QWORD)v88;
              if (v91 >> 1 > v90)
                v90 = v91 >> 1;
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                v92 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v92 = v90;
              if (v92)
              {
                v93 = (char *)sub_100020E2C((uint64_t)v178, v92);
                v88 = (char *)*((_QWORD *)this + 10);
                v86 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v93 = 0;
              }
              v94 = &v93[4 * v89];
              *(_DWORD *)v94 = 0;
              v87 = v94 + 4;
              while (v86 != v88)
              {
                v95 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v94 - 1) = v95;
                v94 -= 4;
              }
              *((_QWORD *)this + 10) = v94;
              *((_QWORD *)this + 11) = v87;
              *((_QWORD *)this + 12) = &v93[4 * v92];
              if (v88)
                operator delete(v88);
            }
            else
            {
              *(_DWORD *)v86 = 0;
              v87 = v86 + 4;
            }
            *((_QWORD *)this + 11) = v87;
            v96 = *((_QWORD *)a2 + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_172;
            *(v87 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v96);
            v84 = *((_QWORD *)a2 + 2);
            v83 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v83;
          }
          goto LABEL_173;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v182) & 1) != 0)
              return 0;
            v97 = *((_QWORD *)a2 + 1);
            v98 = *((_QWORD *)a2 + 2);
            while (v97 < v98 && !*((_BYTE *)a2 + 24))
            {
              v100 = (char *)*((_QWORD *)this + 17);
              v99 = *((_QWORD *)this + 18);
              if ((unint64_t)v100 >= v99)
              {
                v102 = (char *)*v181;
                v103 = (v100 - (_BYTE *)*v181) >> 2;
                v104 = v103 + 1;
                if ((unint64_t)(v103 + 1) >> 62)
                  goto LABEL_294;
                v105 = v99 - (_QWORD)v102;
                if (v105 >> 1 > v104)
                  v104 = v105 >> 1;
                if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                  v106 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v106 = v104;
                if (v106)
                {
                  v107 = (char *)sub_100020E2C((uint64_t)v179, v106);
                  v102 = (char *)*((_QWORD *)this + 16);
                  v100 = (char *)*((_QWORD *)this + 17);
                }
                else
                {
                  v107 = 0;
                }
                v108 = &v107[4 * v103];
                *(_DWORD *)v108 = 0;
                v101 = v108 + 4;
                while (v100 != v102)
                {
                  v109 = *((_DWORD *)v100 - 1);
                  v100 -= 4;
                  *((_DWORD *)v108 - 1) = v109;
                  v108 -= 4;
                }
                *((_QWORD *)this + 16) = v108;
                *((_QWORD *)this + 17) = v101;
                *((_QWORD *)this + 18) = &v107[4 * v106];
                if (v102)
                  operator delete(v102);
              }
              else
              {
                *(_DWORD *)v100 = 0;
                v101 = v100 + 4;
              }
              *((_QWORD *)this + 17) = v101;
              v110 = *((_QWORD *)a2 + 1);
              if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_172:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v101 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v110);
              v98 = *((_QWORD *)a2 + 2);
              v97 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v97;
            }
LABEL_173:
            PB::Reader::recallMark(a2, v182);
          }
          else
          {
            v123 = (char *)*((_QWORD *)this + 17);
            v122 = *((_QWORD *)this + 18);
            if ((unint64_t)v123 >= v122)
            {
              v154 = (char *)*v181;
              v155 = (v123 - (_BYTE *)*v181) >> 2;
              v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 62)
LABEL_294:
                sub_10000D5F8();
              v157 = v122 - (_QWORD)v154;
              if (v157 >> 1 > v156)
                v156 = v157 >> 1;
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL)
                v158 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v158 = v156;
              if (v158)
              {
                v159 = (char *)sub_100020E2C((uint64_t)v179, v158);
                v154 = (char *)*((_QWORD *)this + 16);
                v123 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v159 = 0;
              }
              v170 = &v159[4 * v155];
              *(_DWORD *)v170 = 0;
              v113 = v170 + 4;
              while (v123 != v154)
              {
                v171 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *((_DWORD *)v170 - 1) = v171;
                v170 -= 4;
              }
              *((_QWORD *)this + 16) = v170;
              *((_QWORD *)this + 17) = v113;
              *((_QWORD *)this + 18) = &v159[4 * v158];
              if (v154)
                operator delete(v154);
            }
            else
            {
              *(_DWORD *)v123 = 0;
              v113 = v123 + 4;
            }
            *((_QWORD *)this + 17) = v113;
LABEL_276:
            v172 = *((_QWORD *)a2 + 1);
            if (v172 <= 0xFFFFFFFFFFFFFFFBLL && v172 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v113 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v172);
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_280:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_278:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_281:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_281;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 160) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 152), 1u);
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = (float *)v3[7];
  v8 = (float *)v3[8];
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = (float *)v3[13];
  v11 = (float *)v3[14];
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  v13 = (float *)v3[1];
  v14 = (float *)v3[2];
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  v16 = (float *)v3[10];
  v17 = (float *)v3[11];
  while (v16 != v17)
  {
    v18 = *v16++;
    this = PB::Writer::write(a2, v18, 6u);
  }
  v20 = (float *)v3[16];
  v19 = (float *)v3[17];
  while (v20 != v19)
  {
    v21 = *v20++;
    this = PB::Writer::write(a2, v21, 7u);
  }
  return this;
}

uint64_t CMMsl::DeviceMotionCorrection::hash_value(CMMsl::DeviceMotionCorrection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 160) & 1) != 0)
  {
    if (*((double *)this + 19) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 19);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4)) ^ v2;
  v4 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v5 = v3 ^ v4 ^ PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  v6 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v7 = v6 ^ PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  return v5 ^ v7 ^ PBHashBytes(*((_QWORD *)this + 16), *((_QWORD *)this + 17) - *((_QWORD *)this + 16));
}

double CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this)
{
  double result;

  *(_QWORD *)this = off_1003508E0;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003508E0;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_1003508E0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance(this);
  operator delete();
}

CMMsl::DeviceMotionCovariance *CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(CMMsl::DeviceMotionCovariance *this, const CMMsl::DeviceMotionCovariance *a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = off_1003508E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::DeviceMotionCovariance::operator=(uint64_t a1, const CMMsl::DeviceMotionCovariance *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::DeviceMotionCovariance *)a1 != a2)
  {
    CMMsl::DeviceMotionCovariance::DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v7;
    v12 = v5;
    CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DeviceMotionCovariance *a2, CMMsl::DeviceMotionCovariance *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  return result;
}

uint64_t CMMsl::DeviceMotionCovariance::DeviceMotionCovariance(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1003508E0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::DeviceMotionCovariance::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::DeviceMotionCovariance::DeviceMotionCovariance((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v7;
    v12 = v5;
    CMMsl::DeviceMotionCovariance::~DeviceMotionCovariance((CMMsl::DeviceMotionCovariance *)v9);
  }
  return a1;
}

uint64_t CMMsl::DeviceMotionCovariance::formatText(CMMsl::DeviceMotionCovariance *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "biasvariance", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "statevariance", v10);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DeviceMotionCovariance::readFrom(CMMsl::DeviceMotionCovariance *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  unint64_t v77;
  _BYTE v79[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark(a2, v79) & 1) != 0)
            return 0;
          v42 = *((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          while (v42 < v43 && !*((_BYTE *)a2 + 24))
          {
            v45 = (char *)*((_QWORD *)this + 5);
            v44 = *((_QWORD *)this + 6);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v10;
              v48 = (v45 - (_BYTE *)*v10) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                goto LABEL_128;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_100020E2C((uint64_t)v11, v51);
                v47 = (char *)*((_QWORD *)this + 4);
                v45 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[4 * v48];
              *(_DWORD *)v53 = 0;
              v46 = v53 + 4;
              while (v45 != v47)
              {
                v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((_QWORD *)this + 4) = v53;
              *((_QWORD *)this + 5) = v46;
              *((_QWORD *)this + 6) = &v52[4 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_DWORD *)v45 = 0;
              v46 = v45 + 4;
            }
            *((_QWORD *)this + 5) = v46;
            v55 = *((_QWORD *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_82;
            *(v46 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v55);
            v43 = *((_QWORD *)a2 + 2);
            v42 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v42;
          }
          goto LABEL_83;
        }
        v60 = (char *)*((_QWORD *)this + 5);
        v59 = *((_QWORD *)this + 6);
        if ((unint64_t)v60 >= v59)
        {
          v67 = (char *)*v10;
          v68 = (v60 - (_BYTE *)*v10) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
LABEL_128:
            sub_10000D5F8();
          v70 = v59 - (_QWORD)v67;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)sub_100020E2C((uint64_t)v11, v71);
            v67 = (char *)*((_QWORD *)this + 4);
            v60 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v72 = 0;
          }
          v75 = &v72[4 * v68];
          *(_DWORD *)v75 = 0;
          v58 = v75 + 4;
          while (v60 != v67)
          {
            v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *((_QWORD *)this + 4) = v75;
          *((_QWORD *)this + 5) = v58;
          *((_QWORD *)this + 6) = &v72[4 * v71];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_DWORD *)v60 = 0;
          v58 = v60 + 4;
        }
        *((_QWORD *)this + 5) = v58;
LABEL_114:
        v77 = *((_QWORD *)a2 + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_116:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v77);
        v27 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *((_BYTE *)this + 64) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_116;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v26);
        v27 = *((_QWORD *)a2 + 1) + 8;
LABEL_118:
        *((_QWORD *)a2 + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark(a2, v79) & 1) != 0)
        return 0;
      v28 = *((_QWORD *)a2 + 1);
      v29 = *((_QWORD *)a2 + 2);
      while (v28 < v29 && !*((_BYTE *)a2 + 24))
      {
        v31 = (char *)*((_QWORD *)this + 2);
        v30 = *((_QWORD *)this + 3);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v8;
          v34 = (v31 - (_BYTE *)*v8) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            goto LABEL_127;
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)sub_100020E2C((uint64_t)v9, v37);
            v33 = (char *)*((_QWORD *)this + 1);
            v31 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = 0;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *((_QWORD *)this + 1) = v39;
          *((_QWORD *)this + 2) = v32;
          *((_QWORD *)this + 3) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = 0;
          v32 = v31 + 4;
        }
        *((_QWORD *)this + 2) = v32;
        v41 = *((_QWORD *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_82:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v41);
        v29 = *((_QWORD *)a2 + 2);
        v28 = *((_QWORD *)a2 + 1) + 4;
        *((_QWORD *)a2 + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark(a2, v79);
      goto LABEL_119;
    }
    v57 = (char *)*((_QWORD *)this + 2);
    v56 = *((_QWORD *)this + 3);
    if ((unint64_t)v57 >= v56)
    {
      v61 = (char *)*v8;
      v62 = (v57 - (_BYTE *)*v8) >> 2;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62)
LABEL_127:
        sub_10000D5F8();
      v64 = v56 - (_QWORD)v61;
      if (v64 >> 1 > v63)
        v63 = v64 >> 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        v66 = (char *)sub_100020E2C((uint64_t)v9, v65);
        v61 = (char *)*((_QWORD *)this + 1);
        v57 = (char *)*((_QWORD *)this + 2);
      }
      else
      {
        v66 = 0;
      }
      v73 = &v66[4 * v62];
      *(_DWORD *)v73 = 0;
      v58 = v73 + 4;
      while (v57 != v61)
      {
        v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *((_QWORD *)this + 1) = v73;
      *((_QWORD *)this + 2) = v58;
      *((_QWORD *)this + 3) = &v66[4 * v65];
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_DWORD *)v57 = 0;
      v58 = v57 + 4;
    }
    *((_QWORD *)this + 2) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t CMMsl::DeviceMotionCovariance::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 64) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v8 = (float *)v3[1];
  v7 = (float *)v3[2];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

BOOL CMMsl::DeviceMotionCovariance::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if (v5 - v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::DeviceMotionCovariance::hash_value(CMMsl::DeviceMotionCovariance *this)
{
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 7);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4)) ^ v2;
  return v3 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
}

uint64_t CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(uint64_t this)
{
  *(_QWORD *)this = off_100350918;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350918;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::DirectionOfTravelMetrics::~DirectionOfTravelMetrics(CMMsl::DirectionOfTravelMetrics *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(CMMsl::DirectionOfTravelMetrics *this, const CMMsl::DirectionOfTravelMetrics *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100350918;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 28) = 2;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 28) = v3;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 28) = v3 | 4;
    *((_DWORD *)this + 6) = v4;
  }
  return *(float *)&v4;
}

uint64_t CMMsl::DirectionOfTravelMetrics::operator=(uint64_t a1, uint64_t a2, double a3, double a4, float a5)
{
  char v6;
  char v7;
  int v8;
  __int128 v9;
  int v10;
  void (**v12)(CMMsl::DirectionOfTravelMetrics *__hidden);
  __int128 v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v12 = off_100350918;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 28);
    if ((v6 & 2) != 0)
    {
      a3 = *(double *)(a2 + 16);
      v7 = 2;
      LOBYTE(v15) = 2;
      if ((v6 & 1) != 0)
      {
LABEL_4:
        a4 = *(double *)(a2 + 8);
        v7 |= 1u;
        LOBYTE(v15) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 28) & 1) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(float *)(a2 + 24);
      LOBYTE(v15) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v15;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a3;
    v13 = v9;
    v10 = *(_DWORD *)(a1 + 24);
    *(float *)(a1 + 24) = a5;
    v14 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DirectionOfTravelMetrics *a2, CMMsl::DirectionOfTravelMetrics *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::DirectionOfTravelMetrics::DirectionOfTravelMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350918;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100350918;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::DirectionOfTravelMetrics::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::DirectionOfTravelMetrics *__hidden);
  __int128 v9;
  int v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100350918;
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v11 = *(_DWORD *)(a1 + 28);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::DirectionOfTravelMetrics::formatText(CMMsl::DirectionOfTravelMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) == 0)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "theta", *((double *)this + 1));
    if ((*((_BYTE *)this + 28) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "cadence", *((float *)this + 6));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DirectionOfTravelMetrics::readFrom(CMMsl::DirectionOfTravelMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 28) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_32;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        v2 = *((_QWORD *)a2 + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 == 2)
        {
          *((_BYTE *)this + 28) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_32;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        }
        else
        {
          if ((_DWORD)v20 != 1)
          {
            result = PB::Reader::skip(a2, v20, v11 & 7, 0);
            if (!(_DWORD)result)
              return result;
            v2 = *((_QWORD *)a2 + 1);
            goto LABEL_38;
          }
          *((_BYTE *)this + 28) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_32:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_38;
          }
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        }
        v2 = *((_QWORD *)a2 + 1) + 8;
      }
      *((_QWORD *)a2 + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::DirectionOfTravelMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  return this;
}

BOOL CMMsl::DirectionOfTravelMetrics::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 4) == 0;
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
    return (*(_BYTE *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::DirectionOfTravelMetrics::hash_value(CMMsl::DirectionOfTravelMetrics *this)
{
  double v1;
  double v2;
  float v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 1);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 28) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v4 = 0;
      return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v4;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 28) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v3 = *((float *)this + 6);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ v4;
}

uint64_t CMMsl::DisplacingState::DisplacingState(uint64_t this)
{
  *(_QWORD *)this = off_100350950;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350950;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DisplacingState::~DisplacingState(CMMsl::DisplacingState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::DisplacingState::DisplacingState(uint64_t this, const CMMsl::DisplacingState *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100350950;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100350950;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::DisplacingState::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100350950;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DisplacingState *a2, CMMsl::DisplacingState *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::DisplacingState::DisplacingState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350950;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350950;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DisplacingState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100350950;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::DisplacingState::formatText(CMMsl::DisplacingState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "displacingState", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DisplacingState::readFrom(CMMsl::DisplacingState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DisplacingState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::DisplacingState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::DisplacingState::hash_value(CMMsl::DisplacingState *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t this)
{
  *(_QWORD *)this = off_100350988;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350988;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::DisplayStatus::~DisplayStatus(CMMsl::DisplayStatus *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t this, const CMMsl::DisplayStatus *a2)
{
  char v2;

  *(_QWORD *)this = off_100350988;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

{
  char v2;

  *(_QWORD *)this = off_100350988;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 8);
    *(_BYTE *)(this + 12) = 1;
    *(_BYTE *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::DisplayStatus::operator=(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  char v5;
  void (**v7)(CMMsl::DisplayStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100350988;
    v3 = *(_BYTE *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::DisplayStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100350988;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_BYTE *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v9 = v5;
    LOBYTE(v3) = *(_BYTE *)(a1 + 8);
    *(_BYTE *)(a1 + 8) = v4;
    v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::DisplayStatus *a2, CMMsl::DisplayStatus *a3)
{
  int v3;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(_BYTE *)(this + 8);
  *(_BYTE *)(this + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::DisplayStatus::DisplayStatus(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100350988;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100350988;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::DisplayStatus::formatText(CMMsl::DisplayStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "displayOn", *((_BYTE *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DisplayStatus::readFrom(CMMsl::DisplayStatus *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v21 = v20 != 0;
        }
        *((_BYTE *)this + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DisplayStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::DisplayStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  return result;
}

uint64_t CMMsl::DisplayStatus::hash_value(CMMsl::DisplayStatus *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned __int8 *)this + 8);
  else
    return 0;
}

double CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this)
{
  double result;

  *(_QWORD *)this = off_1003509C0;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003509C0;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = off_1003509C0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing(this);
  operator delete();
}

CMMsl::DoTEstimatorHandSwing *CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(CMMsl::DoTEstimatorHandSwing *this, const CMMsl::DoTEstimatorHandSwing *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;

  *(_QWORD *)this = off_1003509C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *((_DWORD *)this + 36) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 42) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if ((*((_WORD *)a2 + 84) & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 16);
    *((_WORD *)this + 84) = 2;
    *((_QWORD *)this + 16) = v6;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  v7 = *((_WORD *)a2 + 84);
  if ((v7 & 0x20) != 0)
  {
    v12 = *((_DWORD *)a2 + 37);
    *((_WORD *)this + 84) |= 0x20u;
    *((_DWORD *)this + 37) = v12;
    v7 = *((_WORD *)a2 + 84);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  v13 = *((_QWORD *)a2 + 15);
  *((_WORD *)this + 84) |= 1u;
  *((_QWORD *)this + 15) = v13;
  if ((*((_WORD *)a2 + 84) & 0x100) != 0)
  {
LABEL_8:
    v8 = *((_DWORD *)a2 + 40);
    *((_WORD *)this + 84) |= 0x100u;
    *((_DWORD *)this + 40) = v8;
  }
LABEL_9:
  if (*((_QWORD *)a2 + 13))
    operator new();
  if (*((_QWORD *)a2 + 14))
    operator new();
  v9 = *((_WORD *)a2 + 84);
  if ((v9 & 0x10) != 0)
  {
    v14 = *((_DWORD *)a2 + 36);
    *((_WORD *)this + 84) |= 0x10u;
    *((_DWORD *)this + 36) = v14;
    v9 = *((_WORD *)a2 + 84);
    if ((v9 & 0x200) == 0)
    {
LABEL_15:
      if ((v9 & 4) == 0)
        goto LABEL_16;
      goto LABEL_28;
    }
  }
  else if ((*((_WORD *)a2 + 84) & 0x200) == 0)
  {
    goto LABEL_15;
  }
  v15 = *((_BYTE *)a2 + 164);
  *((_WORD *)this + 84) |= 0x200u;
  *((_BYTE *)this + 164) = v15;
  v9 = *((_WORD *)a2 + 84);
  if ((v9 & 4) == 0)
  {
LABEL_16:
    if ((v9 & 8) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v16 = *((_DWORD *)a2 + 34);
  *((_WORD *)this + 84) |= 4u;
  *((_DWORD *)this + 34) = v16;
  v9 = *((_WORD *)a2 + 84);
  if ((v9 & 8) == 0)
  {
LABEL_17:
    if ((v9 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_30;
  }
LABEL_29:
  v17 = *((_DWORD *)a2 + 35);
  *((_WORD *)this + 84) |= 8u;
  *((_DWORD *)this + 35) = v17;
  v9 = *((_WORD *)a2 + 84);
  if ((v9 & 0x40) == 0)
  {
LABEL_18:
    if ((v9 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_30:
  v18 = *((_DWORD *)a2 + 38);
  *((_WORD *)this + 84) |= 0x40u;
  *((_DWORD *)this + 38) = v18;
  if ((*((_WORD *)a2 + 84) & 0x80) != 0)
  {
LABEL_19:
    v10 = *((_DWORD *)a2 + 39);
    *((_WORD *)this + 84) |= 0x80u;
    *((_DWORD *)this + 39) = v10;
  }
LABEL_20:
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DoTEstimatorHandSwing::operator=(CMMsl *a1, const CMMsl::DoTEstimatorHandSwing *a2)
{
  CMMsl::DoTEstimatorHandSwing *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorHandSwing *)v5, v3);
    CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DoTEstimatorHandSwing *a2, CMMsl::DoTEstimatorHandSwing *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v3;
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v6;
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  v11 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v11;
  v12 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  v13 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v13;
  LODWORD(v13) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  LOBYTE(v13) = *((_BYTE *)this + 164);
  *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
  *((_BYTE *)a2 + 164) = v13;
  LODWORD(v11) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v11;
  LODWORD(v11) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v11;
  LODWORD(v13) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v13;
  result = *(double *)((char *)a2 + 156);
  v15 = *(_QWORD *)((char *)this + 156);
  *(double *)((char *)this + 156) = result;
  *(_QWORD *)((char *)a2 + 156) = v15;
  v16 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v16;
  v17 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v17;
  v18 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v18;
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  return result;
}

uint64_t CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_QWORD *)a1 = off_1003509C0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  sub_100239458(a1 + 80, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v8 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  return a1;
}

CMMsl *CMMsl::DoTEstimatorHandSwing::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DoTEstimatorHandSwing *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DoTEstimatorHandSwing::DoTEstimatorHandSwing((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorHandSwing *)v5, v3);
    CMMsl::DoTEstimatorHandSwing::~DoTEstimatorHandSwing((CMMsl::DoTEstimatorHandSwing *)v5);
  }
  return a1;
}

uint64_t CMMsl::DoTEstimatorHandSwing::formatText(CMMsl::DoTEstimatorHandSwing *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;
  float *v15;
  float *v16;
  float v17;
  float *v18;
  float *v19;
  float v20;
  __int16 v21;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 84);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "AzABufferMean", *((float *)this + 34));
    v5 = *((_WORD *)this + 84);
  }
  if ((v5 & 8) != 0)
    PB::TextFormatter::format(a2, "AzBBufferMean", *((float *)this + 35));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "cachedAttitude", v8);
  }
  v9 = *((_QWORD *)this + 13);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "candidateA");
  v10 = *((_QWORD *)this + 14);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "candidateB");
  v11 = (float *)*((_QWORD *)this + 4);
  v12 = (float *)*((_QWORD *)this + 5);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "currAttitude", v13);
  }
  v14 = *((_WORD *)this + 84);
  if ((v14 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "disambiguationFlag", *((_DWORD *)this + 36));
    v14 = *((_WORD *)this + 84);
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v14 & 0x20) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "lastDoTUpdateTime", *((double *)this + 15));
  if ((*((_WORD *)this + 84) & 0x20) != 0)
LABEL_16:
    PB::TextFormatter::format(a2, "lastEstimatedDoTAngleRad", *((float *)this + 37));
LABEL_17:
  v15 = (float *)*((_QWORD *)this + 7);
  v16 = (float *)*((_QWORD *)this + 8);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(a2, "lpfInertialRotationRate", v17);
  }
  v18 = (float *)*((_QWORD *)this + 10);
  v19 = (float *)*((_QWORD *)this + 11);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(a2, "lpfInertialUserAccel", v20);
  }
  v21 = *((_WORD *)this + 84);
  if ((v21 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "newDisambiguation", *((_BYTE *)this + 164));
    v21 = *((_WORD *)this + 84);
    if ((v21 & 0x40) == 0)
    {
LABEL_23:
      if ((v21 & 0x80) == 0)
        goto LABEL_24;
      goto LABEL_33;
    }
  }
  else if ((v21 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(a2, "numAbortedPeaks", *((_DWORD *)this + 38));
  v21 = *((_WORD *)this + 84);
  if ((v21 & 0x80) == 0)
  {
LABEL_24:
    if ((v21 & 0x100) == 0)
      goto LABEL_25;
LABEL_34:
    PB::TextFormatter::format(a2, "stateFSM", *((_DWORD *)this + 40));
    if ((*((_WORD *)this + 84) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_26;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "numLargeYawDetections", *((_DWORD *)this + 39));
  v21 = *((_WORD *)this + 84);
  if ((v21 & 0x100) != 0)
    goto LABEL_34;
LABEL_25:
  if ((v21 & 2) != 0)
LABEL_26:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DoTEstimatorHandSwing::readFrom(CMMsl::DoTEstimatorHandSwing *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  _DWORD *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  _DWORD *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  _DWORD *v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  char *v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  unint64_t v141;
  char v142;
  char v143;
  unsigned int v144;
  unint64_t v145;
  char v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  int v174;
  char *v175;
  int v176;
  char *v177;
  int v178;
  char *v179;
  int v180;
  unint64_t v181;
  char *v184;
  char *v185;
  char *v186;
  _BYTE v187[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (void **)((char *)this + 8);
    v185 = (char *)this + 24;
    v186 = (char *)this + 48;
    v10 = (void **)((char *)this + 56);
    v184 = (char *)this + 72;
    v11 = (void **)((char *)this + 80);
    v12 = (char *)this + 96;
    while (1)
    {
      v13 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((_WORD *)this + 84) |= 2u;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_287;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_53;
        case 2u:
          if (v25 != 2)
          {
            v134 = (char *)*((_QWORD *)this + 11);
            v133 = *((_QWORD *)this + 12);
            if ((unint64_t)v134 >= v133)
            {
              v161 = (char *)*v11;
              v162 = (v134 - (_BYTE *)*v11) >> 2;
              v163 = v162 + 1;
              if ((unint64_t)(v162 + 1) >> 62)
LABEL_303:
                sub_10000D5F8();
              v164 = v133 - (_QWORD)v161;
              if (v164 >> 1 > v163)
                v163 = v164 >> 1;
              if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL)
                v165 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v165 = v163;
              if (v165)
              {
                v166 = (char *)sub_100020E2C((uint64_t)v12, v165);
                v161 = (char *)*((_QWORD *)this + 10);
                v134 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v166 = 0;
              }
              v177 = &v166[4 * v162];
              *(_DWORD *)v177 = 0;
              v126 = v177 + 4;
              while (v134 != v161)
              {
                v178 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              *((_QWORD *)this + 10) = v177;
              *((_QWORD *)this + 11) = v126;
              *((_QWORD *)this + 12) = &v166[4 * v165];
              if (v161)
                operator delete(v161);
            }
            else
            {
              *(_DWORD *)v134 = 0;
              v126 = v134 + 4;
            }
            *((_QWORD *)this + 11) = v126;
            goto LABEL_285;
          }
          if ((PB::Reader::placeMark(a2, v187) & 1) != 0)
            return 0;
          v70 = *((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
          while (v70 < v71 && !*((_BYTE *)a2 + 24))
          {
            v73 = (char *)*((_QWORD *)this + 11);
            v72 = *((_QWORD *)this + 12);
            if ((unint64_t)v73 >= v72)
            {
              v75 = (char *)*v11;
              v76 = (v73 - (_BYTE *)*v11) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
                goto LABEL_303;
              v78 = v72 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_100020E2C((uint64_t)v12, v79);
                v75 = (char *)*((_QWORD *)this + 10);
                v73 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[4 * v76];
              *(_DWORD *)v81 = 0;
              v74 = v81 + 4;
              while (v73 != v75)
              {
                v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *((_QWORD *)this + 10) = v81;
              *((_QWORD *)this + 11) = v74;
              *((_QWORD *)this + 12) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v73 = 0;
              v74 = v73 + 4;
            }
            *((_QWORD *)this + 11) = v74;
            v83 = *((_QWORD *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_169;
            *(v74 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v83);
            v71 = *((_QWORD *)a2 + 2);
            v70 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v70;
          }
          goto LABEL_170;
        case 3u:
          if (v25 != 2)
          {
            v125 = (char *)*((_QWORD *)this + 8);
            v124 = *((_QWORD *)this + 9);
            if ((unint64_t)v125 >= v124)
            {
              v149 = (char *)*v10;
              v150 = (v125 - (_BYTE *)*v10) >> 2;
              v151 = v150 + 1;
              if ((unint64_t)(v150 + 1) >> 62)
LABEL_301:
                sub_10000D5F8();
              v152 = v124 - (_QWORD)v149;
              if (v152 >> 1 > v151)
                v151 = v152 >> 1;
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
                v153 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v153 = v151;
              if (v153)
              {
                v154 = (char *)sub_100020E2C((uint64_t)v184, v153);
                v149 = (char *)*((_QWORD *)this + 7);
                v125 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v154 = 0;
              }
              v173 = &v154[4 * v150];
              *(_DWORD *)v173 = 0;
              v126 = v173 + 4;
              while (v125 != v149)
              {
                v174 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *((_DWORD *)v173 - 1) = v174;
                v173 -= 4;
              }
              *((_QWORD *)this + 7) = v173;
              *((_QWORD *)this + 8) = v126;
              *((_QWORD *)this + 9) = &v154[4 * v153];
              if (v149)
                operator delete(v149);
            }
            else
            {
              *(_DWORD *)v125 = 0;
              v126 = v125 + 4;
            }
            *((_QWORD *)this + 8) = v126;
            goto LABEL_285;
          }
          if ((PB::Reader::placeMark(a2, v187) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 8);
            v29 = *((_QWORD *)this + 9);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_301;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100020E2C((uint64_t)v184, v36);
                v32 = (char *)*((_QWORD *)this + 7);
                v30 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((_QWORD *)this + 7) = v38;
              *((_QWORD *)this + 8) = v31;
              *((_QWORD *)this + 9) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 8) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_169;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          goto LABEL_170;
        case 4u:
          *((_WORD *)this + 84) |= 0x20u;
          v84 = *((_QWORD *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_287;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v84);
          goto LABEL_289;
        case 5u:
          *((_WORD *)this + 84) |= 1u;
          v41 = *((_QWORD *)a2 + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_287;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v41);
LABEL_53:
          v42 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_290;
        case 6u:
          *((_WORD *)this + 84) |= 0x100u;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_250;
              v88 += 7;
              v85 = v91;
              v19 = v89++ > 8;
            }
            while (!v19);
LABEL_192:
            LODWORD(v90) = 0;
            goto LABEL_250;
          }
          v135 = 0;
          v136 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v137 = v85 + 1;
              v138 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v137;
              v90 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                v85 = v137;
                v19 = v136++ > 8;
                if (v19)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_250:
          *((_DWORD *)this + 40) = v90;
          goto LABEL_291;
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          *((_WORD *)this + 84) |= 0x10u;
          v93 = *((_QWORD *)a2 + 1);
          v94 = *((_QWORD *)a2 + 2);
          v95 = *(_QWORD *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)a2 + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_253;
              v96 += 7;
              v93 = v99;
              v19 = v97++ > 8;
            }
            while (!v19);
LABEL_199:
            LODWORD(v98) = 0;
            goto LABEL_253;
          }
          v139 = 0;
          v140 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v141 = v93 + 1;
              v142 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)a2 + 1) = v141;
              v98 |= (unint64_t)(v142 & 0x7F) << v139;
              if (v142 < 0)
              {
                v139 += 7;
                v93 = v141;
                v19 = v140++ > 8;
                if (v19)
                  goto LABEL_199;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_253:
          *((_DWORD *)this + 36) = v98;
          goto LABEL_291;
        case 0xAu:
          *((_WORD *)this + 84) |= 0x200u;
          v43 = *((_QWORD *)a2 + 1);
          if (v43 >= *((_QWORD *)a2 + 2))
          {
            v46 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v44 = v43 + 1;
            v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v43);
            *((_QWORD *)a2 + 1) = v44;
            v46 = v45 != 0;
          }
          *((_BYTE *)this + 164) = v46;
          goto LABEL_291;
        case 0xBu:
          *((_WORD *)this + 84) |= 4u;
          v101 = *((_QWORD *)a2 + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_287;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v101);
          goto LABEL_289;
        case 0xCu:
          *((_WORD *)this + 84) |= 8u;
          v47 = *((_QWORD *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_287;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v47);
          goto LABEL_289;
        case 0xDu:
          *((_WORD *)this + 84) |= 0x40u;
          v48 = *((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
          v50 = *(_QWORD *)a2;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)a2 + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_247;
              v51 += 7;
              v48 = v54;
              v19 = v52++ > 8;
            }
            while (!v19);
LABEL_181:
            LODWORD(v53) = 0;
            goto LABEL_247;
          }
          v127 = 0;
          v128 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v129 = v48 + 1;
              v130 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)a2 + 1) = v129;
              v53 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                v48 = v129;
                v19 = v128++ > 8;
                if (v19)
                  goto LABEL_181;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_247:
          *((_DWORD *)this + 38) = v53;
          goto LABEL_291;
        case 0xEu:
          *((_WORD *)this + 84) |= 0x80u;
          v102 = *((_QWORD *)a2 + 1);
          v103 = *((_QWORD *)a2 + 2);
          v104 = *(_QWORD *)a2;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v108 = v102 + 1;
              *((_QWORD *)a2 + 1) = v102 + 1;
              v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0)
                goto LABEL_256;
              v105 += 7;
              v102 = v108;
              v19 = v106++ > 8;
            }
            while (!v19);
LABEL_206:
            LODWORD(v107) = 0;
            goto LABEL_256;
          }
          v143 = 0;
          v144 = 0;
          v107 = 0;
          if (v103 <= v102)
            v103 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v145 = v102 + 1;
              v146 = *(_BYTE *)(v104 + v102);
              *((_QWORD *)a2 + 1) = v145;
              v107 |= (unint64_t)(v146 & 0x7F) << v143;
              if (v146 < 0)
              {
                v143 += 7;
                v102 = v145;
                v19 = v144++ > 8;
                if (v19)
                  goto LABEL_206;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v107) = 0;
            }
            break;
          }
LABEL_256:
          *((_DWORD *)this + 39) = v107;
          goto LABEL_291;
        case 0xFu:
          if (v25 != 2)
          {
            v132 = (char *)*((_QWORD *)this + 2);
            v131 = *((_QWORD *)this + 3);
            if ((unint64_t)v132 >= v131)
            {
              v155 = (char *)*v9;
              v156 = (v132 - (_BYTE *)*v9) >> 2;
              v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 62)
LABEL_302:
                sub_10000D5F8();
              v158 = v131 - (_QWORD)v155;
              if (v158 >> 1 > v157)
                v157 = v158 >> 1;
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL)
                v159 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v159 = v157;
              if (v159)
              {
                v160 = (char *)sub_100020E2C((uint64_t)v185, v159);
                v155 = (char *)*((_QWORD *)this + 1);
                v132 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v160 = 0;
              }
              v175 = &v160[4 * v156];
              *(_DWORD *)v175 = 0;
              v126 = v175 + 4;
              while (v132 != v155)
              {
                v176 = *((_DWORD *)v132 - 1);
                v132 -= 4;
                *((_DWORD *)v175 - 1) = v176;
                v175 -= 4;
              }
              *((_QWORD *)this + 1) = v175;
              *((_QWORD *)this + 2) = v126;
              *((_QWORD *)this + 3) = &v160[4 * v159];
              if (v155)
                operator delete(v155);
            }
            else
            {
              *(_DWORD *)v132 = 0;
              v126 = v132 + 4;
            }
            *((_QWORD *)this + 2) = v126;
            goto LABEL_285;
          }
          if ((PB::Reader::placeMark(a2, v187) & 1) != 0)
            return 0;
          v56 = *((_QWORD *)a2 + 1);
          v57 = *((_QWORD *)a2 + 2);
          while (v56 < v57 && !*((_BYTE *)a2 + 24))
          {
            v59 = (char *)*((_QWORD *)this + 2);
            v58 = *((_QWORD *)this + 3);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v9;
              v62 = (v59 - (_BYTE *)*v9) >> 2;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62)
                goto LABEL_302;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_100020E2C((uint64_t)v185, v65);
                v61 = (char *)*((_QWORD *)this + 1);
                v59 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *((_QWORD *)this + 1) = v67;
              *((_QWORD *)this + 2) = v60;
              *((_QWORD *)this + 3) = &v66[4 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *((_QWORD *)this + 2) = v60;
            v69 = *((_QWORD *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_169;
            *(v60 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v69);
            v57 = *((_QWORD *)a2 + 2);
            v56 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v56;
          }
          goto LABEL_170;
        case 0x10u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark(a2, v187) & 1) != 0)
              return 0;
            v110 = *((_QWORD *)a2 + 1);
            v111 = *((_QWORD *)a2 + 2);
            while (v110 < v111 && !*((_BYTE *)a2 + 24))
            {
              v113 = (char *)*((_QWORD *)this + 5);
              v112 = *((_QWORD *)this + 6);
              if ((unint64_t)v113 >= v112)
              {
                v115 = (char *)*v8;
                v116 = (v113 - (_BYTE *)*v8) >> 2;
                v117 = v116 + 1;
                if ((unint64_t)(v116 + 1) >> 62)
                  goto LABEL_304;
                v118 = v112 - (_QWORD)v115;
                if (v118 >> 1 > v117)
                  v117 = v118 >> 1;
                if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
                  v119 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v119 = v117;
                if (v119)
                {
                  v120 = (char *)sub_100020E2C((uint64_t)v186, v119);
                  v115 = (char *)*((_QWORD *)this + 4);
                  v113 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v120 = 0;
                }
                v121 = &v120[4 * v116];
                *(_DWORD *)v121 = 0;
                v114 = v121 + 4;
                while (v113 != v115)
                {
                  v122 = *((_DWORD *)v113 - 1);
                  v113 -= 4;
                  *((_DWORD *)v121 - 1) = v122;
                  v121 -= 4;
                }
                *((_QWORD *)this + 4) = v121;
                *((_QWORD *)this + 5) = v114;
                *((_QWORD *)this + 6) = &v120[4 * v119];
                if (v115)
                  operator delete(v115);
              }
              else
              {
                *(_DWORD *)v113 = 0;
                v114 = v113 + 4;
              }
              *((_QWORD *)this + 5) = v114;
              v123 = *((_QWORD *)a2 + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_169:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v114 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v123);
              v111 = *((_QWORD *)a2 + 2);
              v110 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v110;
            }
LABEL_170:
            PB::Reader::recallMark(a2, v187);
          }
          else
          {
            v148 = (char *)*((_QWORD *)this + 5);
            v147 = *((_QWORD *)this + 6);
            if ((unint64_t)v148 >= v147)
            {
              v167 = (char *)*v8;
              v168 = (v148 - (_BYTE *)*v8) >> 2;
              v169 = v168 + 1;
              if ((unint64_t)(v168 + 1) >> 62)
LABEL_304:
                sub_10000D5F8();
              v170 = v147 - (_QWORD)v167;
              if (v170 >> 1 > v169)
                v169 = v170 >> 1;
              if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL)
                v171 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v171 = v169;
              if (v171)
              {
                v172 = (char *)sub_100020E2C((uint64_t)v186, v171);
                v167 = (char *)*((_QWORD *)this + 4);
                v148 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v172 = 0;
              }
              v179 = &v172[4 * v168];
              *(_DWORD *)v179 = 0;
              v126 = v179 + 4;
              while (v148 != v167)
              {
                v180 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *((_DWORD *)v179 - 1) = v180;
                v179 -= 4;
              }
              *((_QWORD *)this + 4) = v179;
              *((_QWORD *)this + 5) = v126;
              *((_QWORD *)this + 6) = &v172[4 * v171];
              if (v167)
                operator delete(v167);
            }
            else
            {
              *(_DWORD *)v148 = 0;
              v126 = v148 + 4;
            }
            *((_QWORD *)this + 5) = v126;
LABEL_285:
            v181 = *((_QWORD *)a2 + 1);
            if (v181 <= 0xFFFFFFFFFFFFFFFBLL && v181 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v126 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v181);
LABEL_289:
              v42 = *((_QWORD *)a2 + 1) + 4;
LABEL_290:
              *((_QWORD *)a2 + 1) = v42;
            }
            else
            {
LABEL_287:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_291:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0)
            return 0;
          goto LABEL_291;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::SwingDoTCandidate::SwingDoTCandidate(uint64_t this)
{
  *(_QWORD *)this = off_100354C40;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354C40;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::DoTEstimatorHandSwing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  __int16 v10;
  const PB::Base *v11;
  const PB::Base *v12;
  __int16 v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  v3 = this;
  if ((*(_WORD *)(this + 168) & 2) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 128), 1u);
  v4 = *(float **)(v3 + 80);
  v5 = *(float **)(v3 + 88);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(float **)(v3 + 56);
  v8 = *(float **)(v3 + 64);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(_WORD *)(v3 + 168);
  if ((v10 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 148), 4u);
    v10 = *(_WORD *)(v3 + 168);
    if ((v10 & 1) == 0)
    {
LABEL_11:
      if ((v10 & 0x100) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 5u);
  if ((*(_WORD *)(v3 + 168) & 0x100) != 0)
LABEL_12:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 6u);
LABEL_13:
  v11 = *(const PB::Base **)(v3 + 104);
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11, 7u);
  v12 = *(const PB::Base **)(v3 + 112);
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12, 8u);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x10) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 9u);
    v13 = *(_WORD *)(v3 + 168);
    if ((v13 & 0x200) == 0)
    {
LABEL_19:
      if ((v13 & 4) == 0)
        goto LABEL_20;
      goto LABEL_36;
    }
  }
  else if ((*(_WORD *)(v3 + 168) & 0x200) == 0)
  {
    goto LABEL_19;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 164), 0xAu);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 4) == 0)
  {
LABEL_20:
    if ((v13 & 8) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xBu);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 8) == 0)
  {
LABEL_21:
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
LABEL_38:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0xDu);
    if ((*(_WORD *)(v3 + 168) & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xCu);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x40) != 0)
    goto LABEL_38;
LABEL_22:
  if ((v13 & 0x80) != 0)
LABEL_23:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 156), 0xEu);
LABEL_24:
  v14 = *(float **)(v3 + 8);
  v15 = *(float **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::write(a2, v16, 0xFu);
  }
  v18 = *(float **)(v3 + 32);
  v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    v19 = *v18++;
    this = PB::Writer::write(a2, v19, 0x10u);
  }
  return this;
}

BOOL CMMsl::DoTEstimatorHandSwing::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  _BOOL8 result;
  BOOL v25;

  v4 = *(_WORD *)(a1 + 168);
  v5 = *(_WORD *)(a2 + 168);
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  v7 = *(float **)(a1 + 80);
  v6 = *(float **)(a1 + 88);
  v8 = *(float **)(a2 + 80);
  if ((char *)v6 - (char *)v7 != *(_QWORD *)(a2 + 88) - (_QWORD)v8)
    return 0;
  while (v7 != v6)
  {
    if (*v7 != *v8)
      return 0;
    ++v7;
    ++v8;
  }
  v10 = *(float **)(a1 + 56);
  v9 = *(float **)(a1 + 64);
  v11 = *(float **)(a2 + 56);
  if ((char *)v9 - (char *)v10 != *(_QWORD *)(a2 + 64) - (_QWORD)v11)
    return 0;
  while (v10 != v9)
  {
    if (*v10 != *v11)
      return 0;
    ++v10;
    ++v11;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 168) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 168) & 0x100) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 168) & 0x100) != 0)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a2 + 104);
  if (v12)
  {
    if (!v13 || !CMMsl::SwingDoTCandidate::operator==(v12, v13))
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a2 + 112);
  if (!v14)
  {
    if (!v15)
      goto LABEL_39;
    return 0;
  }
  if (!v15 || !CMMsl::SwingDoTCandidate::operator==(v14, v15))
    return 0;
LABEL_39:
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v4 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164))
      return 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  v17 = *(float **)(a1 + 8);
  v16 = *(float **)(a1 + 16);
  v18 = *(float **)(a2 + 8);
  if ((char *)v16 - (char *)v17 != *(_QWORD *)(a2 + 16) - (_QWORD)v18)
    return 0;
  while (v17 != v16)
  {
    if (*v17 != *v18)
      return 0;
    ++v17;
    ++v18;
  }
  v20 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  v21 = *(float **)(a2 + 32);
  if (v19 - v20 != *(_QWORD *)(a2 + 40) - (_QWORD)v21)
    return 0;
  if (v20 == v19)
    return 1;
  v22 = v20 + 4;
  do
  {
    v23 = *v21++;
    result = *(float *)(v22 - 4) == v23;
    v25 = *(float *)(v22 - 4) != v23 || v22 == v19;
    v22 += 4;
  }
  while (!v25);
  return result;
}

BOOL CMMsl::SwingDoTCandidate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

unint64_t CMMsl::DoTEstimatorHandSwing::hash_value(CMMsl::DoTEstimatorHandSwing *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  CMMsl::SwingDoTCandidate *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  if ((*((_WORD *)this + 84) & 2) != 0)
  {
    if (*((double *)this + 16) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 16);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v4 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v5 = *((_WORD *)this + 84);
  if ((v5 & 0x20) != 0)
  {
    v9 = *((float *)this + 37);
    if (v9 == 0.0)
      v6 = 0;
    else
      v6 = LODWORD(v9);
    if ((v5 & 1) != 0)
    {
LABEL_8:
      if (*((double *)this + 15) == 0.0)
        v7 = 0;
      else
        v7 = *((_QWORD *)this + 15);
      if ((*((_WORD *)this + 84) & 0x100) != 0)
        goto LABEL_12;
      goto LABEL_18;
    }
  }
  else
  {
    v6 = 0;
    if ((v5 & 1) != 0)
      goto LABEL_8;
  }
  v7 = 0;
  if ((*((_WORD *)this + 84) & 0x100) != 0)
  {
LABEL_12:
    v8 = *((int *)this + 40);
    goto LABEL_19;
  }
LABEL_18:
  v8 = 0;
LABEL_19:
  v10 = (CMMsl::SwingDoTCandidate *)*((_QWORD *)this + 13);
  if (v10)
    v11 = CMMsl::SwingDoTCandidate::hash_value(v10);
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 14);
  if (v12)
    v12 = CMMsl::SwingDoTCandidate::hash_value((CMMsl::SwingDoTCandidate *)v12);
  if ((v5 & 0x10) != 0)
  {
    v13 = *((int *)this + 36);
    if ((v5 & 0x200) != 0)
    {
LABEL_26:
      v14 = *((unsigned __int8 *)this + 164);
      if ((v5 & 4) != 0)
        goto LABEL_27;
LABEL_37:
      v16 = 0;
      if ((v5 & 8) != 0)
        goto LABEL_30;
LABEL_38:
      v18 = 0;
      if ((v5 & 0x40) != 0)
        goto LABEL_33;
LABEL_39:
      v19 = 0;
      if ((v5 & 0x80) != 0)
        goto LABEL_34;
LABEL_40:
      v20 = 0;
      goto LABEL_41;
    }
  }
  else
  {
    v13 = 0;
    if ((v5 & 0x200) != 0)
      goto LABEL_26;
  }
  v14 = 0;
  if ((v5 & 4) == 0)
    goto LABEL_37;
LABEL_27:
  v15 = *((float *)this + 34);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v5 & 8) == 0)
    goto LABEL_38;
LABEL_30:
  v17 = *((float *)this + 35);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v5 & 0x40) == 0)
    goto LABEL_39;
LABEL_33:
  v19 = *((int *)this + 38);
  if ((v5 & 0x80) == 0)
    goto LABEL_40;
LABEL_34:
  v20 = *((int *)this + 39);
LABEL_41:
  v21 = v3 ^ v2 ^ v4 ^ v6 ^ v7 ^ v8 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v19;
  v22 = v20 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  return v21 ^ v22 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
}

uint64_t CMMsl::DoTEstimatorHandSwing::makeCandidateA(uint64_t this)
{
  if (!*(_QWORD *)(this + 104))
    operator new();
  return this;
}

uint64_t CMMsl::DoTEstimatorHandSwing::makeCandidateB(uint64_t this)
{
  if (!*(_QWORD *)(this + 112))
    operator new();
  return this;
}

double CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this)
{
  double result;

  *(_QWORD *)this = off_1003509F8;
  *((_DWORD *)this + 51) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003509F8;
  *((_DWORD *)this + 51) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  return result;
}

void CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = off_1003509F8;
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB(this);
  operator delete();
}

CMMsl::DoTEstimatorWithTNB *CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(CMMsl::DoTEstimatorWithTNB *this, const CMMsl::DoTEstimatorWithTNB *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  int v13;
  char v14;
  char v15;

  *(_QWORD *)this = off_1003509F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (char *)this + 104;
  *(_OWORD *)((char *)this + 152) = 0u;
  v7 = (char *)this + 152;
  *((_DWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  if ((*((_BYTE *)a2 + 204) & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 23);
    *((_BYTE *)this + 204) = 1;
    *((_QWORD *)this + 23) = v8;
  }
  if (this != a2)
  {
    sub_100020CE4(v7, *((char **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  v9 = *((_BYTE *)a2 + 204);
  if ((v9 & 2) != 0)
  {
    v13 = *((_DWORD *)a2 + 48);
    *((_BYTE *)this + 204) |= 2u;
    *((_DWORD *)this + 48) = v13;
    v9 = *((_BYTE *)a2 + 204);
    if ((v9 & 8) == 0)
    {
LABEL_7:
      if ((v9 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((*((_BYTE *)a2 + 204) & 8) == 0)
  {
    goto LABEL_7;
  }
  v14 = *((_BYTE *)a2 + 200);
  *((_BYTE *)this + 204) |= 8u;
  *((_BYTE *)this + 200) = v14;
  v9 = *((_BYTE *)a2 + 204);
  if ((v9 & 0x10) == 0)
  {
LABEL_8:
    if ((v9 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_21:
  v15 = *((_BYTE *)a2 + 201);
  *((_BYTE *)this + 204) |= 0x10u;
  *((_BYTE *)this + 201) = v15;
  if ((*((_BYTE *)a2 + 204) & 0x20) != 0)
  {
LABEL_9:
    v10 = *((_BYTE *)a2 + 202);
    *((_BYTE *)this + 204) |= 0x20u;
    *((_BYTE *)this + 202) = v10;
  }
LABEL_10:
  if (*((_QWORD *)a2 + 22))
    operator new();
  if (this != a2)
    sub_100020CE4(v6, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  if ((*((_BYTE *)a2 + 204) & 4) != 0)
  {
    v11 = *((_DWORD *)a2 + 49);
    *((_BYTE *)this + 204) |= 4u;
    *((_DWORD *)this + 49) = v11;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 128, *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
    sub_100020CE4(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::DoTEstimatorWithTNB::operator=(CMMsl *a1, const CMMsl::DoTEstimatorWithTNB *a2)
{
  CMMsl::DoTEstimatorWithTNB *v3;
  _BYTE v5[208];

  if (a1 != a2)
  {
    CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorWithTNB *)v5, v3);
    CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DoTEstimatorWithTNB *a2, CMMsl::DoTEstimatorWithTNB *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  v4 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v4;
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v5;
  v6 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v6;
  v7 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v7;
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v9;
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v10;
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v11;
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  LODWORD(v4) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v4;
  LOBYTE(v16) = *((_BYTE *)this + 200);
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  *((_BYTE *)a2 + 200) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 201);
  *((_BYTE *)this + 201) = *((_BYTE *)a2 + 201);
  *((_BYTE *)a2 + 201) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 202);
  *((_BYTE *)this + 202) = *((_BYTE *)a2 + 202);
  *((_BYTE *)a2 + 202) = v16;
  v17 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v17;
  v18 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v18;
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v19;
  v20 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v20;
  result = *((float *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((float *)a2 + 49) = result;
  v22 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v22;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v23;
  v24 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v24;
  v25 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v25;
  v26 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v26;
  v27 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v27;
  return result;
}

uint64_t CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1003509F8;
  v4 = a1 + 32;
  v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = a1 + 8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  sub_100239458(a1 + 152, (__n128 *)(a2 + 152));
  sub_100239458(v5, (__n128 *)(a2 + 80));
  sub_100239458(v6, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
  *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
  v7 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v8 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_100239458(a1 + 104, (__n128 *)(a2 + 104));
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  sub_100239458(a1 + 128, (__n128 *)(a2 + 128));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::DoTEstimatorWithTNB::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DoTEstimatorWithTNB *v3;
  _BYTE v5[208];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DoTEstimatorWithTNB::DoTEstimatorWithTNB((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DoTEstimatorWithTNB *)v5, v3);
    CMMsl::DoTEstimatorWithTNB::~DoTEstimatorWithTNB((CMMsl::DoTEstimatorWithTNB *)v5);
  }
  return a1;
}

uint64_t CMMsl::DoTEstimatorWithTNB::formatText(CMMsl::DoTEstimatorWithTNB *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float *v25;
  float *v26;
  float v27;
  char v28;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 22);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "TNBFrame");
  if ((*((_BYTE *)this + 204) & 2) != 0)
    PB::TextFormatter::format(a2, "dotQuality", *((float *)this + 48));
  v6 = (float *)*((_QWORD *)this + 1);
  v7 = (float *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "dotVector", v8);
  }
  if ((*((_BYTE *)this + 204) & 8) != 0)
    PB::TextFormatter::format(a2, "fusingGaze", *((_BYTE *)this + 200));
  v9 = (float *)*((_QWORD *)this + 4);
  v10 = (float *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "gazeVector", v11);
  }
  v12 = *((_BYTE *)this + 204);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "hasStep", *((_BYTE *)this + 201));
    v12 = *((_BYTE *)this + 204);
  }
  if ((v12 & 0x20) != 0)
    PB::TextFormatter::format(a2, "hasValidTNBFrame", *((_BYTE *)this + 202));
  v13 = (float *)*((_QWORD *)this + 7);
  v14 = (float *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "lpfInertialRotationRate", v15);
  }
  v16 = (float *)*((_QWORD *)this + 10);
  v17 = (float *)*((_QWORD *)this + 11);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(a2, "lpfInertialUserAccel", v18);
  }
  v19 = (float *)*((_QWORD *)this + 13);
  v20 = (float *)*((_QWORD *)this + 14);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(a2, "rawDoTVector", v21);
  }
  v22 = (float *)*((_QWORD *)this + 16);
  v23 = (float *)*((_QWORD *)this + 17);
  while (v22 != v23)
  {
    v24 = *v22++;
    PB::TextFormatter::format(a2, "rawInertialRotationRate", v24);
  }
  v25 = (float *)*((_QWORD *)this + 19);
  v26 = (float *)*((_QWORD *)this + 20);
  while (v25 != v26)
  {
    v27 = *v25++;
    PB::TextFormatter::format(a2, "rawInertialUserAccel", v27);
  }
  v28 = *((_BYTE *)this + 204);
  if ((v28 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 49));
    v28 = *((_BYTE *)this + 204);
  }
  if ((v28 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 23));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::DoTEstimatorWithTNB::readFrom(CMMsl::DoTEstimatorWithTNB *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  _DWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  _DWORD *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  _DWORD *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  _DWORD *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  int v197;
  char *v198;
  int v199;
  char *v200;
  int v201;
  char *v202;
  int v203;
  char *v204;
  int v205;
  char *v206;
  int v207;
  char *v208;
  int v209;
  unint64_t v210;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  void **v219;
  void **v220;
  void **v221;
  _BYTE v222[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v218 = (char *)this + 72;
    v220 = (void **)((char *)this + 128);
    v221 = (void **)((char *)this + 56);
    v219 = (void **)((char *)this + 104);
    v216 = (char *)this + 120;
    v217 = (char *)this + 144;
    v8 = (void **)((char *)this + 32);
    v9 = (void **)((char *)this + 8);
    v214 = (char *)this + 24;
    v215 = (char *)this + 48;
    v10 = (void **)((char *)this + 80);
    v11 = (void **)((char *)this + 152);
    v212 = (char *)this + 168;
    v213 = (char *)this + 96;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 204) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_338;
          *((_QWORD *)this + 23) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_341;
        case 2u:
          if (v24 != 2)
          {
            v140 = (char *)*((_QWORD *)this + 20);
            v139 = *((_QWORD *)this + 21);
            if ((unint64_t)v140 >= v139)
            {
              v154 = (char *)*v11;
              v155 = (v140 - (_BYTE *)*v11) >> 2;
              v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 62)
LABEL_350:
                sub_10000D5F8();
              v157 = v139 - (_QWORD)v154;
              if (v157 >> 1 > v156)
                v156 = v157 >> 1;
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL)
                v158 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v158 = v156;
              if (v158)
              {
                v159 = (char *)sub_100020E2C((uint64_t)v212, v158);
                v154 = (char *)*((_QWORD *)this + 19);
                v140 = (char *)*((_QWORD *)this + 20);
              }
              else
              {
                v159 = 0;
              }
              v196 = &v159[4 * v155];
              *(_DWORD *)v196 = 0;
              v141 = v196 + 4;
              while (v140 != v154)
              {
                v197 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *((_DWORD *)v196 - 1) = v197;
                v196 -= 4;
              }
              *((_QWORD *)this + 19) = v196;
              *((_QWORD *)this + 20) = v141;
              *((_QWORD *)this + 21) = &v159[4 * v158];
              if (v154)
                operator delete(v154);
            }
            else
            {
              *(_DWORD *)v140 = 0;
              v141 = v140 + 4;
            }
            *((_QWORD *)this + 20) = v141;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(a2, v222) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 20);
            v29 = *((_QWORD *)this + 21);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_350;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100020E2C((uint64_t)v212, v36);
                v32 = (char *)*((_QWORD *)this + 19);
                v30 = (char *)*((_QWORD *)this + 20);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((_QWORD *)this + 19) = v38;
              *((_QWORD *)this + 20) = v31;
              *((_QWORD *)this + 21) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 20) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_209;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          goto LABEL_210;
        case 3u:
          if (v24 != 2)
          {
            v143 = (char *)*((_QWORD *)this + 11);
            v142 = *((_QWORD *)this + 12);
            if ((unint64_t)v143 >= v142)
            {
              v160 = (char *)*v10;
              v161 = (v143 - (_BYTE *)*v10) >> 2;
              v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) >> 62)
LABEL_351:
                sub_10000D5F8();
              v163 = v142 - (_QWORD)v160;
              if (v163 >> 1 > v162)
                v162 = v163 >> 1;
              if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
                v164 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v164 = v162;
              if (v164)
              {
                v165 = (char *)sub_100020E2C((uint64_t)v213, v164);
                v160 = (char *)*((_QWORD *)this + 10);
                v143 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v165 = 0;
              }
              v198 = &v165[4 * v161];
              *(_DWORD *)v198 = 0;
              v141 = v198 + 4;
              while (v143 != v160)
              {
                v199 = *((_DWORD *)v143 - 1);
                v143 -= 4;
                *((_DWORD *)v198 - 1) = v199;
                v198 -= 4;
              }
              *((_QWORD *)this + 10) = v198;
              *((_QWORD *)this + 11) = v141;
              *((_QWORD *)this + 12) = &v165[4 * v164];
              if (v160)
                operator delete(v160);
            }
            else
            {
              *(_DWORD *)v143 = 0;
              v141 = v143 + 4;
            }
            *((_QWORD *)this + 11) = v141;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(a2, v222) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 11);
            v43 = *((_QWORD *)this + 12);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_351;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v213, v50);
                v46 = (char *)*((_QWORD *)this + 10);
                v44 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 10) = v52;
              *((_QWORD *)this + 11) = v45;
              *((_QWORD *)this + 12) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 11) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_209;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_210;
        case 4u:
          if (v24 != 2)
          {
            v145 = (char *)*((_QWORD *)this + 2);
            v144 = *((_QWORD *)this + 3);
            if ((unint64_t)v145 >= v144)
            {
              v166 = (char *)*v9;
              v167 = (v145 - (_BYTE *)*v9) >> 2;
              v168 = v167 + 1;
              if ((unint64_t)(v167 + 1) >> 62)
LABEL_352:
                sub_10000D5F8();
              v169 = v144 - (_QWORD)v166;
              if (v169 >> 1 > v168)
                v168 = v169 >> 1;
              if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
                v170 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v170 = v168;
              if (v170)
              {
                v171 = (char *)sub_100020E2C((uint64_t)v214, v170);
                v166 = (char *)*((_QWORD *)this + 1);
                v145 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v171 = 0;
              }
              v200 = &v171[4 * v167];
              *(_DWORD *)v200 = 0;
              v141 = v200 + 4;
              while (v145 != v166)
              {
                v201 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *((_DWORD *)v200 - 1) = v201;
                v200 -= 4;
              }
              *((_QWORD *)this + 1) = v200;
              *((_QWORD *)this + 2) = v141;
              *((_QWORD *)this + 3) = &v171[4 * v170];
              if (v166)
                operator delete(v166);
            }
            else
            {
              *(_DWORD *)v145 = 0;
              v141 = v145 + 4;
            }
            *((_QWORD *)this + 2) = v141;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(a2, v222) & 1) != 0)
            return 0;
          v55 = *((_QWORD *)a2 + 1);
          v56 = *((_QWORD *)a2 + 2);
          while (v55 < v56 && !*((_BYTE *)a2 + 24))
          {
            v58 = (char *)*((_QWORD *)this + 2);
            v57 = *((_QWORD *)this + 3);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_352;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_100020E2C((uint64_t)v214, v64);
                v60 = (char *)*((_QWORD *)this + 1);
                v58 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *((_QWORD *)this + 1) = v66;
              *((_QWORD *)this + 2) = v59;
              *((_QWORD *)this + 3) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *((_QWORD *)this + 2) = v59;
            v68 = *((_QWORD *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_209;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v68);
            v56 = *((_QWORD *)a2 + 2);
            v55 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v55;
          }
          goto LABEL_210;
        case 5u:
          if (v24 != 2)
          {
            v147 = (char *)*((_QWORD *)this + 5);
            v146 = *((_QWORD *)this + 6);
            if ((unint64_t)v147 >= v146)
            {
              v172 = (char *)*v8;
              v173 = (v147 - (_BYTE *)*v8) >> 2;
              v174 = v173 + 1;
              if ((unint64_t)(v173 + 1) >> 62)
LABEL_353:
                sub_10000D5F8();
              v175 = v146 - (_QWORD)v172;
              if (v175 >> 1 > v174)
                v174 = v175 >> 1;
              if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL)
                v176 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v176 = v174;
              if (v176)
              {
                v177 = (char *)sub_100020E2C((uint64_t)v215, v176);
                v172 = (char *)*((_QWORD *)this + 4);
                v147 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v177 = 0;
              }
              v202 = &v177[4 * v173];
              *(_DWORD *)v202 = 0;
              v141 = v202 + 4;
              while (v147 != v172)
              {
                v203 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v202 - 1) = v203;
                v202 -= 4;
              }
              *((_QWORD *)this + 4) = v202;
              *((_QWORD *)this + 5) = v141;
              *((_QWORD *)this + 6) = &v177[4 * v176];
              if (v172)
                operator delete(v172);
            }
            else
            {
              *(_DWORD *)v147 = 0;
              v141 = v147 + 4;
            }
            *((_QWORD *)this + 5) = v141;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(a2, v222) & 1) != 0)
            return 0;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          while (v69 < v70 && !*((_BYTE *)a2 + 24))
          {
            v72 = (char *)*((_QWORD *)this + 5);
            v71 = *((_QWORD *)this + 6);
            if ((unint64_t)v72 >= v71)
            {
              v74 = (char *)*v8;
              v75 = (v72 - (_BYTE *)*v8) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
                goto LABEL_353;
              v77 = v71 - (_QWORD)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)sub_100020E2C((uint64_t)v215, v78);
                v74 = (char *)*((_QWORD *)this + 4);
                v72 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[4 * v75];
              *(_DWORD *)v80 = 0;
              v73 = v80 + 4;
              while (v72 != v74)
              {
                v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *((_QWORD *)this + 4) = v80;
              *((_QWORD *)this + 5) = v73;
              *((_QWORD *)this + 6) = &v79[4 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v73 = v72 + 4;
            }
            *((_QWORD *)this + 5) = v73;
            v82 = *((_QWORD *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_209;
            *(v73 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v82);
            v70 = *((_QWORD *)a2 + 2);
            v69 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v69;
          }
          goto LABEL_210;
        case 6u:
          *((_BYTE *)this + 204) |= 2u;
          v83 = *((_QWORD *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_338;
          *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v83);
          goto LABEL_340;
        case 7u:
          *((_BYTE *)this + 204) |= 8u;
          v84 = *((_QWORD *)a2 + 1);
          if (v84 >= *((_QWORD *)a2 + 2))
          {
            v87 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v85 = v84 + 1;
            v86 = *(unsigned __int8 *)(*(_QWORD *)a2 + v84);
            *((_QWORD *)a2 + 1) = v85;
            v87 = v86 != 0;
          }
          *((_BYTE *)this + 200) = v87;
          goto LABEL_342;
        case 8u:
          *((_BYTE *)this + 204) |= 0x10u;
          v88 = *((_QWORD *)a2 + 1);
          if (v88 >= *((_QWORD *)a2 + 2))
          {
            v91 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v89 = v88 + 1;
            v90 = *(unsigned __int8 *)(*(_QWORD *)a2 + v88);
            *((_QWORD *)a2 + 1) = v89;
            v91 = v90 != 0;
          }
          *((_BYTE *)this + 201) = v91;
          goto LABEL_342;
        case 9u:
          *((_BYTE *)this + 204) |= 0x20u;
          v92 = *((_QWORD *)a2 + 1);
          if (v92 >= *((_QWORD *)a2 + 2))
          {
            v95 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v93 = v92 + 1;
            v94 = *(unsigned __int8 *)(*(_QWORD *)a2 + v92);
            *((_QWORD *)a2 + 1) = v93;
            v95 = v94 != 0;
          }
          *((_BYTE *)this + 202) = v95;
          goto LABEL_342;
        case 0xAu:
          operator new();
        case 0xBu:
          if (v24 != 2)
          {
            v149 = (char *)*((_QWORD *)this + 14);
            v148 = *((_QWORD *)this + 15);
            if ((unint64_t)v149 >= v148)
            {
              v178 = (char *)*v219;
              v179 = (v149 - (_BYTE *)*v219) >> 2;
              v180 = v179 + 1;
              if ((unint64_t)(v179 + 1) >> 62)
LABEL_354:
                sub_10000D5F8();
              v181 = v148 - (_QWORD)v178;
              if (v181 >> 1 > v180)
                v180 = v181 >> 1;
              if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL)
                v182 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v182 = v180;
              if (v182)
              {
                v183 = (char *)sub_100020E2C((uint64_t)v216, v182);
                v178 = (char *)*((_QWORD *)this + 13);
                v149 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v183 = 0;
              }
              v204 = &v183[4 * v179];
              *(_DWORD *)v204 = 0;
              v141 = v204 + 4;
              while (v149 != v178)
              {
                v205 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v204 - 1) = v205;
                v204 -= 4;
              }
              *((_QWORD *)this + 13) = v204;
              *((_QWORD *)this + 14) = v141;
              *((_QWORD *)this + 15) = &v183[4 * v182];
              if (v178)
                operator delete(v178);
            }
            else
            {
              *(_DWORD *)v149 = 0;
              v141 = v149 + 4;
            }
            *((_QWORD *)this + 14) = v141;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(a2, v222) & 1) != 0)
            return 0;
          v96 = *((_QWORD *)a2 + 1);
          v97 = *((_QWORD *)a2 + 2);
          while (v96 < v97 && !*((_BYTE *)a2 + 24))
          {
            v99 = (char *)*((_QWORD *)this + 14);
            v98 = *((_QWORD *)this + 15);
            if ((unint64_t)v99 >= v98)
            {
              v101 = (char *)*v219;
              v102 = (v99 - (_BYTE *)*v219) >> 2;
              v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 62)
                goto LABEL_354;
              v104 = v98 - (_QWORD)v101;
              if (v104 >> 1 > v103)
                v103 = v104 >> 1;
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
                v105 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v105 = v103;
              if (v105)
              {
                v106 = (char *)sub_100020E2C((uint64_t)v216, v105);
                v101 = (char *)*((_QWORD *)this + 13);
                v99 = (char *)*((_QWORD *)this + 14);
              }
              else
              {
                v106 = 0;
              }
              v107 = &v106[4 * v102];
              *(_DWORD *)v107 = 0;
              v100 = v107 + 4;
              while (v99 != v101)
              {
                v108 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v107 - 1) = v108;
                v107 -= 4;
              }
              *((_QWORD *)this + 13) = v107;
              *((_QWORD *)this + 14) = v100;
              *((_QWORD *)this + 15) = &v106[4 * v105];
              if (v101)
                operator delete(v101);
            }
            else
            {
              *(_DWORD *)v99 = 0;
              v100 = v99 + 4;
            }
            *((_QWORD *)this + 14) = v100;
            v109 = *((_QWORD *)a2 + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_209;
            *(v100 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v109);
            v97 = *((_QWORD *)a2 + 2);
            v96 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v96;
          }
          goto LABEL_210;
        case 0xCu:
          *((_BYTE *)this + 204) |= 4u;
          v110 = *((_QWORD *)a2 + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_338;
          *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v110);
          goto LABEL_340;
        case 0xDu:
          if (v24 != 2)
          {
            v151 = (char *)*((_QWORD *)this + 17);
            v150 = *((_QWORD *)this + 18);
            if ((unint64_t)v151 >= v150)
            {
              v184 = (char *)*v220;
              v185 = (v151 - (_BYTE *)*v220) >> 2;
              v186 = v185 + 1;
              if ((unint64_t)(v185 + 1) >> 62)
LABEL_355:
                sub_10000D5F8();
              v187 = v150 - (_QWORD)v184;
              if (v187 >> 1 > v186)
                v186 = v187 >> 1;
              if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
                v188 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v188 = v186;
              if (v188)
              {
                v189 = (char *)sub_100020E2C((uint64_t)v217, v188);
                v184 = (char *)*((_QWORD *)this + 16);
                v151 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v189 = 0;
              }
              v206 = &v189[4 * v185];
              *(_DWORD *)v206 = 0;
              v141 = v206 + 4;
              while (v151 != v184)
              {
                v207 = *((_DWORD *)v151 - 1);
                v151 -= 4;
                *((_DWORD *)v206 - 1) = v207;
                v206 -= 4;
              }
              *((_QWORD *)this + 16) = v206;
              *((_QWORD *)this + 17) = v141;
              *((_QWORD *)this + 18) = &v189[4 * v188];
              if (v184)
                operator delete(v184);
            }
            else
            {
              *(_DWORD *)v151 = 0;
              v141 = v151 + 4;
            }
            *((_QWORD *)this + 17) = v141;
            goto LABEL_336;
          }
          if ((PB::Reader::placeMark(a2, v222) & 1) != 0)
            return 0;
          v111 = *((_QWORD *)a2 + 1);
          v112 = *((_QWORD *)a2 + 2);
          while (v111 < v112 && !*((_BYTE *)a2 + 24))
          {
            v114 = (char *)*((_QWORD *)this + 17);
            v113 = *((_QWORD *)this + 18);
            if ((unint64_t)v114 >= v113)
            {
              v116 = (char *)*v220;
              v117 = (v114 - (_BYTE *)*v220) >> 2;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 62)
                goto LABEL_355;
              v119 = v113 - (_QWORD)v116;
              if (v119 >> 1 > v118)
                v118 = v119 >> 1;
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
                v120 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v120 = v118;
              if (v120)
              {
                v121 = (char *)sub_100020E2C((uint64_t)v217, v120);
                v116 = (char *)*((_QWORD *)this + 16);
                v114 = (char *)*((_QWORD *)this + 17);
              }
              else
              {
                v121 = 0;
              }
              v122 = &v121[4 * v117];
              *(_DWORD *)v122 = 0;
              v115 = v122 + 4;
              while (v114 != v116)
              {
                v123 = *((_DWORD *)v114 - 1);
                v114 -= 4;
                *((_DWORD *)v122 - 1) = v123;
                v122 -= 4;
              }
              *((_QWORD *)this + 16) = v122;
              *((_QWORD *)this + 17) = v115;
              *((_QWORD *)this + 18) = &v121[4 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_DWORD *)v114 = 0;
              v115 = v114 + 4;
            }
            *((_QWORD *)this + 17) = v115;
            v124 = *((_QWORD *)a2 + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_209;
            *(v115 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v124);
            v112 = *((_QWORD *)a2 + 2);
            v111 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v111;
          }
          goto LABEL_210;
        case 0xEu:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v222) & 1) != 0)
              return 0;
            v125 = *((_QWORD *)a2 + 1);
            v126 = *((_QWORD *)a2 + 2);
            while (v125 < v126 && !*((_BYTE *)a2 + 24))
            {
              v128 = (char *)*((_QWORD *)this + 8);
              v127 = *((_QWORD *)this + 9);
              if ((unint64_t)v128 >= v127)
              {
                v130 = (char *)*v221;
                v131 = (v128 - (_BYTE *)*v221) >> 2;
                v132 = v131 + 1;
                if ((unint64_t)(v131 + 1) >> 62)
                  goto LABEL_356;
                v133 = v127 - (_QWORD)v130;
                if (v133 >> 1 > v132)
                  v132 = v133 >> 1;
                if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
                  v134 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v134 = v132;
                if (v134)
                {
                  v135 = (char *)sub_100020E2C((uint64_t)v218, v134);
                  v130 = (char *)*((_QWORD *)this + 7);
                  v128 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v135 = 0;
                }
                v136 = &v135[4 * v131];
                *(_DWORD *)v136 = 0;
                v129 = v136 + 4;
                while (v128 != v130)
                {
                  v137 = *((_DWORD *)v128 - 1);
                  v128 -= 4;
                  *((_DWORD *)v136 - 1) = v137;
                  v136 -= 4;
                }
                *((_QWORD *)this + 7) = v136;
                *((_QWORD *)this + 8) = v129;
                *((_QWORD *)this + 9) = &v135[4 * v134];
                if (v130)
                  operator delete(v130);
              }
              else
              {
                *(_DWORD *)v128 = 0;
                v129 = v128 + 4;
              }
              *((_QWORD *)this + 8) = v129;
              v138 = *((_QWORD *)a2 + 1);
              if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_209:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v129 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v138);
              v126 = *((_QWORD *)a2 + 2);
              v125 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v125;
            }
LABEL_210:
            PB::Reader::recallMark(a2, v222);
          }
          else
          {
            v153 = (char *)*((_QWORD *)this + 8);
            v152 = *((_QWORD *)this + 9);
            if ((unint64_t)v153 >= v152)
            {
              v190 = (char *)*v221;
              v191 = (v153 - (_BYTE *)*v221) >> 2;
              v192 = v191 + 1;
              if ((unint64_t)(v191 + 1) >> 62)
LABEL_356:
                sub_10000D5F8();
              v193 = v152 - (_QWORD)v190;
              if (v193 >> 1 > v192)
                v192 = v193 >> 1;
              if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                v194 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v194 = v192;
              if (v194)
              {
                v195 = (char *)sub_100020E2C((uint64_t)v218, v194);
                v190 = (char *)*((_QWORD *)this + 7);
                v153 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v195 = 0;
              }
              v208 = &v195[4 * v191];
              *(_DWORD *)v208 = 0;
              v141 = v208 + 4;
              while (v153 != v190)
              {
                v209 = *((_DWORD *)v153 - 1);
                v153 -= 4;
                *((_DWORD *)v208 - 1) = v209;
                v208 -= 4;
              }
              *((_QWORD *)this + 7) = v208;
              *((_QWORD *)this + 8) = v141;
              *((_QWORD *)this + 9) = &v195[4 * v194];
              if (v190)
                operator delete(v190);
            }
            else
            {
              *(_DWORD *)v153 = 0;
              v141 = v153 + 4;
            }
            *((_QWORD *)this + 8) = v141;
LABEL_336:
            v210 = *((_QWORD *)a2 + 1);
            if (v210 <= 0xFFFFFFFFFFFFFFFBLL && v210 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v141 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v210);
LABEL_340:
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_341:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_338:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_342:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_342;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DoTEstimatorWithTNB::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  char v16;
  const PB::Base *v17;
  float *v18;
  float *v19;
  float v20;
  float *v21;
  float *v22;
  float v23;
  float *v24;
  float *v25;
  float v26;

  v3 = this;
  if ((*(_BYTE *)(this + 204) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 184), 1u);
  v4 = *(float **)(v3 + 152);
  v5 = *(float **)(v3 + 160);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(float **)(v3 + 8);
  v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  v13 = *(float **)(v3 + 32);
  v14 = *(float **)(v3 + 40);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 192), 6u);
    v16 = *(_BYTE *)(v3 + 204);
    if ((v16 & 8) == 0)
    {
LABEL_17:
      if ((v16 & 0x10) == 0)
        goto LABEL_18;
      goto LABEL_36;
    }
  }
  else if ((*(_BYTE *)(v3 + 204) & 8) == 0)
  {
    goto LABEL_17;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 200), 7u);
  v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 0x10) == 0)
  {
LABEL_18:
    if ((v16 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 201), 8u);
  if ((*(_BYTE *)(v3 + 204) & 0x20) != 0)
LABEL_19:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 202), 9u);
LABEL_20:
  v17 = *(const PB::Base **)(v3 + 176);
  if (v17)
    this = PB::Writer::writeSubmessage(a2, v17, 0xAu);
  v18 = *(float **)(v3 + 104);
  v19 = *(float **)(v3 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    this = PB::Writer::write(a2, v20, 0xBu);
  }
  if ((*(_BYTE *)(v3 + 204) & 4) != 0)
    this = PB::Writer::write(a2, *(float *)(v3 + 196), 0xCu);
  v21 = *(float **)(v3 + 128);
  v22 = *(float **)(v3 + 136);
  while (v21 != v22)
  {
    v23 = *v21++;
    this = PB::Writer::write(a2, v23, 0xDu);
  }
  v25 = *(float **)(v3 + 56);
  v24 = *(float **)(v3 + 64);
  while (v25 != v24)
  {
    v26 = *v25++;
    this = PB::Writer::write(a2, v26, 0xEu);
  }
  return this;
}

BOOL CMMsl::DoTEstimatorWithTNB::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float v26;
  _BOOL8 result;
  BOOL v28;
  char v29;
  char v30;

  if ((*(_BYTE *)(a1 + 204) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 1) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 152);
  v2 = *(float **)(a1 + 160);
  v4 = *(float **)(a2 + 152);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 160) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 80);
  v5 = *(float **)(a1 + 88);
  v7 = *(float **)(a2 + 80);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 88) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 8);
  v8 = *(float **)(a1 + 16);
  v10 = *(float **)(a2 + 8);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 16) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  v13 = *(float **)(a2 + 32);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 40) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  if ((*(_BYTE *)(a1 + 204) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 2) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 204) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 8) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 204) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 204) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 204) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 202) != *(unsigned __int8 *)(a2 + 202))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 204) & 0x20) != 0)
  {
    return 0;
  }
  v29 = *(_BYTE *)(a2 + 204);
  v30 = *(_BYTE *)(a1 + 204);
  v14 = *(_QWORD *)(a1 + 176);
  v15 = *(_QWORD *)(a2 + 176);
  if (v14)
  {
    if (!v15 || !CMMsl::AccelTNBFrame::operator==(v14, v15))
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v17 = *(float **)(a1 + 104);
  v16 = *(float **)(a1 + 112);
  v18 = *(float **)(a2 + 104);
  if ((char *)v16 - (char *)v17 != *(_QWORD *)(a2 + 112) - (_QWORD)v18)
    return 0;
  while (v17 != v16)
  {
    if (*v17 != *v18)
      return 0;
    ++v17;
    ++v18;
  }
  if ((v30 & 4) != 0)
  {
    if ((v29 & 4) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v29 & 4) != 0)
  {
    return 0;
  }
  v20 = *(float **)(a1 + 128);
  v19 = *(float **)(a1 + 136);
  v21 = *(float **)(a2 + 128);
  if ((char *)v19 - (char *)v20 != *(_QWORD *)(a2 + 136) - (_QWORD)v21)
    return 0;
  while (v20 != v19)
  {
    if (*v20 != *v21)
      return 0;
    ++v20;
    ++v21;
  }
  v23 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 64);
  v24 = *(float **)(a2 + 56);
  if (v22 - v23 != *(_QWORD *)(a2 + 64) - (_QWORD)v24)
    return 0;
  if (v23 == v22)
    return 1;
  v25 = v23 + 4;
  do
  {
    v26 = *v24++;
    result = *(float *)(v25 - 4) == v26;
    v28 = *(float *)(v25 - 4) != v26 || v25 == v22;
    v25 += 4;
  }
  while (!v28);
  return result;
}

uint64_t CMMsl::DoTEstimatorWithTNB::hash_value(CMMsl::DoTEstimatorWithTNB *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  CMMsl::AccelTNBFrame *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  double v19;

  if ((*((_BYTE *)this + 204) & 1) != 0)
  {
    v2 = *((double *)this + 23);
    if (v2 == 0.0)
      v2 = 0.0;
    v19 = v2;
  }
  else
  {
    v19 = 0.0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 19), *((_QWORD *)this + 20) - *((_QWORD *)this + 19));
  v4 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v5 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v6 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  if ((*((_BYTE *)this + 204) & 2) != 0)
  {
    v11 = *((float *)this + 48);
    if (v11 == 0.0)
      v7 = 0;
    else
      v7 = LODWORD(v11);
    if ((*((_BYTE *)this + 204) & 8) != 0)
    {
LABEL_8:
      v8 = *((unsigned __int8 *)this + 200);
      if ((*((_BYTE *)this + 204) & 0x10) != 0)
        goto LABEL_9;
LABEL_16:
      v9 = 0;
      if ((*((_BYTE *)this + 204) & 0x20) != 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else
  {
    v7 = 0;
    if ((*((_BYTE *)this + 204) & 8) != 0)
      goto LABEL_8;
  }
  v8 = 0;
  if ((*((_BYTE *)this + 204) & 0x10) == 0)
    goto LABEL_16;
LABEL_9:
  v9 = *((unsigned __int8 *)this + 201);
  if ((*((_BYTE *)this + 204) & 0x20) != 0)
  {
LABEL_10:
    v10 = *((unsigned __int8 *)this + 202);
    goto LABEL_18;
  }
LABEL_17:
  v10 = 0;
LABEL_18:
  v12 = (CMMsl::AccelTNBFrame *)*((_QWORD *)this + 22);
  if (v12)
    v13 = CMMsl::AccelTNBFrame::hash_value(v12);
  else
    v13 = 0;
  v14 = PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  if ((*((_BYTE *)this + 204) & 4) != 0)
  {
    v16 = *((float *)this + 49);
    v15 = LODWORD(v16);
    if (v16 == 0.0)
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  v17 = v3 ^ *(_QWORD *)&v19 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v13 ^ v14 ^ v15 ^ PBHashBytes(*((_QWORD *)this + 16), *((_QWORD *)this + 17)- *((_QWORD *)this + 16));
  return v17 ^ PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
}

uint64_t CMMsl::DoTEstimatorWithTNB::makeTNBFrame(uint64_t this)
{
  if (!*(_QWORD *)(this + 176))
    operator new();
  return this;
}

uint64_t CMMsl::DopplerDebugRecord::DopplerDebugRecord(uint64_t this)
{
  *(_QWORD *)this = off_100350A30;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350A30;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

void CMMsl::DopplerDebugRecord::~DopplerDebugRecord(CMMsl::DopplerDebugRecord *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::DopplerDebugRecord::DopplerDebugRecord(CMMsl::DopplerDebugRecord *this, const CMMsl::DopplerDebugRecord *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_100350A30;
  *((_DWORD *)this + 30) = 0;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 30) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 30);
    if ((v2 & 0x1000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 27);
    v3 |= 0x1000000u;
    *((_DWORD *)this + 30) = v3;
    *((_DWORD *)this + 27) = v4;
    v2 = *((_DWORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 24);
    v3 |= 0x200000u;
    *((_DWORD *)this + 30) = v3;
    *((_DWORD *)this + 24) = v4;
    v2 = *((_DWORD *)a2 + 30);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800000) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x400000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x800000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x800000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x100000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x20000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v5 = *((_DWORD *)a2 + 19);
  v3 |= 0x10000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 19) = v5;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x4000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x8000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x2000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  v6 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 15) = v6;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 10) = v7;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 4) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x80000u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0)
      return *(float *)&v4;
    goto LABEL_56;
  }
LABEL_55:
  v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_DWORD *)this + 30) = v3;
  *((_DWORD *)this + 5) = v8;
  if ((*((_DWORD *)a2 + 30) & 0x40000) == 0)
    return *(float *)&v4;
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 30) = v3 | 0x40000;
  *((_DWORD *)this + 21) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::DopplerDebugRecord::operator=(CMMsl *a1, const CMMsl::DopplerDebugRecord *a2)
{
  CMMsl::DopplerDebugRecord *v3;
  _BYTE v5[128];

  if (a1 != a2)
  {
    CMMsl::DopplerDebugRecord::DopplerDebugRecord((CMMsl::DopplerDebugRecord *)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerDebugRecord *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DopplerDebugRecord *a2, CMMsl::DopplerDebugRecord *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  v5 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

float CMMsl::DopplerDebugRecord::DopplerDebugRecord(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350A30;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 84);
  *(float *)(a1 + 84) = result;
  return result;
}

CMMsl *CMMsl::DopplerDebugRecord::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DopplerDebugRecord *v3;
  _BYTE v5[128];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DopplerDebugRecord::DopplerDebugRecord((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerDebugRecord *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DopplerDebugRecord::formatText(CMMsl::DopplerDebugRecord *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "biasFraction", *((float *)this + 4));
    v5 = *((_DWORD *)this + 30);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cookie", *((_DWORD *)this + 5));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "currentRange", *((float *)this + 6));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "distanceReleaseThreshold", *((float *)this + 7));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "distanceTriggerThreshold", *((float *)this + 8));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "habcBiasCorrectedDenominator", *((float *)this + 9));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "habcBiasCorrectedNumFramesCaptured", *((_DWORD *)this + 10));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "habcBiasCorrectedNumerator", *((float *)this + 11));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "habcBiasCorrectedRateBaseline", *((float *)this + 12));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "habcBiasCorrectedRateBaselineSigma", *((float *)this + 13));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "habcDenominator", *((float *)this + 14));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "habcNumFramesCaptured", *((_DWORD *)this + 15));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "habcNumerator", *((float *)this + 16));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "habcRateBaseline", *((float *)this + 17));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "habcRateBaselineSigma", *((float *)this + 18));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "numBaselineCaptureFrames", *((_DWORD *)this + 19));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "numEffSpads", *((float *)this + 20));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "rateScalingFactor", *((float *)this + 21));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "reflectanceEstimate", *((float *)this + 22));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "signalDeltaNCounts", *((float *)this + 23));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "signalRateBaselineKcpss", *((float *)this + 24));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "signalRateBaselineSigmaKcpss", *((float *)this + 25));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "signalRateNoiseMarginKcpss", *((float *)this + 26));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "signalRateSigmaKcpss", *((float *)this + 27));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(a2, "smudgeTimeoutCountdownMs", *((float *)this + 29));
    if ((*((_DWORD *)this + 30) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "signalRateTriggerThresholdNCounts", *((float *)this + 28));
  v5 = *((_DWORD *)this + 30);
  if ((v5 & 0x4000000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 1) != 0)
LABEL_28:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerDebugRecord::readFrom(CMMsl::DopplerDebugRecord *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 30) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_151;
            case 2u:
              *((_DWORD *)this + 30) |= 0x1000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 3u:
              *((_DWORD *)this + 30) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 4u:
              *((_DWORD *)this + 30) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 5u:
              *((_DWORD *)this + 30) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 6u:
              *((_DWORD *)this + 30) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 7u:
              *((_DWORD *)this + 30) |= 0x2000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 8u:
              *((_DWORD *)this + 30) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 9u:
              *((_DWORD *)this + 30) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0xAu:
              *((_DWORD *)this + 30) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0xBu:
              *((_DWORD *)this + 30) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0xCu:
              *((_DWORD *)this + 30) |= 0x10000u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_161;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_160:
                    v2 = v47 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_160;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_161;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_161:
              *((_DWORD *)this + 19) = v25;
              goto LABEL_152;
            case 0xDu:
              *((_DWORD *)this + 30) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0xEu:
              *((_DWORD *)this + 30) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0xFu:
              *((_DWORD *)this + 30) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x10u:
              *((_DWORD *)this + 30) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x11u:
              *((_DWORD *)this + 30) |= 0x1000u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_166;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_165:
                    v2 = v51 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_165;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_166;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_166:
              *((_DWORD *)this + 15) = v31;
              goto LABEL_152;
            case 0x12u:
              *((_DWORD *)this + 30) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x13u:
              *((_DWORD *)this + 30) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x14u:
              *((_DWORD *)this + 30) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x15u:
              *((_DWORD *)this + 30) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x16u:
              *((_DWORD *)this + 30) |= 0x80u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_171;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_170:
                    v2 = v55 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_170;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_171;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_171:
              *((_DWORD *)this + 10) = v37;
              goto LABEL_152;
            case 0x17u:
              *((_DWORD *)this + 30) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x18u:
              *((_DWORD *)this + 30) |= 0x4000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x19u:
              *((_DWORD *)this + 30) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_120;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_150;
            case 0x1Au:
              *((_DWORD *)this + 30) |= 4u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_176;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_175:
                    v2 = v59 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_175;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_176;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_176:
              *((_DWORD *)this + 5) = v43;
LABEL_152:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x1Bu:
              *((_DWORD *)this + 30) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_150:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_151:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_120:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_152;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_152;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerDebugRecord::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 120);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 2u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 3u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 4u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 5u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 6u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 7u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 8u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 9u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xAu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0xCu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xDu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xEu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xFu);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x10u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0x11u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x12u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x13u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x14u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x15u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x16u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0x17u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x18u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x19u);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 84), 0x1Bu);
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 0x1Au);
  if ((*(_DWORD *)(v3 + 120) & 0x40000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 84), 0x1Bu);
  return this;
}

BOOL CMMsl::DopplerDebugRecord::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 120);
  v3 = *(_DWORD *)(a2 + 120);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0)
    return (v3 & 0x40000) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84);
  return v4;
}

uint64_t CMMsl::DopplerDebugRecord::hash_value(CMMsl::DopplerDebugRecord *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;

  v1 = *((_DWORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_3;
LABEL_76:
    v4 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_6;
LABEL_77:
    v6 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_9;
LABEL_78:
    v8 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_12;
LABEL_79:
    v10 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_15;
LABEL_80:
    v12 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_18;
LABEL_81:
    v14 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_82:
    v16 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_24;
LABEL_83:
    v18 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_84:
    v20 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_30;
LABEL_85:
    v22 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_33;
    goto LABEL_86;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_76;
LABEL_3:
  v3 = *((float *)this + 27);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_77;
LABEL_6:
  v5 = *((float *)this + 24);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_78;
LABEL_9:
  v7 = *((float *)this + 25);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_79;
LABEL_12:
  v9 = *((float *)this + 26);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_80;
LABEL_15:
  v11 = *((float *)this + 23);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_81;
LABEL_18:
  v13 = *((float *)this + 28);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_82;
LABEL_21:
  v15 = *((float *)this + 6);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_83;
LABEL_24:
  v17 = *((float *)this + 8);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_84;
LABEL_27:
  v19 = *((float *)this + 7);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_85;
LABEL_30:
  v21 = *((float *)this + 20);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_33:
    v23 = *((int *)this + 19);
    if ((v1 & 0x4000) != 0)
      goto LABEL_34;
LABEL_87:
    v25 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_37;
LABEL_88:
    v27 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_40;
LABEL_89:
    v29 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_43;
LABEL_90:
    v31 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_46;
    goto LABEL_91;
  }
LABEL_86:
  v23 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_87;
LABEL_34:
  v24 = *((float *)this + 17);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_88;
LABEL_37:
  v26 = *((float *)this + 18);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_89;
LABEL_40:
  v28 = *((float *)this + 16);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_90;
LABEL_43:
  v30 = *((float *)this + 14);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_46:
    v32 = *((int *)this + 15);
    if ((v1 & 0x200) != 0)
      goto LABEL_47;
LABEL_92:
    v34 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_50;
LABEL_93:
    v36 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_53;
LABEL_94:
    v38 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_56;
LABEL_95:
    v40 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_59;
    goto LABEL_96;
  }
LABEL_91:
  v32 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_92;
LABEL_47:
  v33 = *((float *)this + 12);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_93;
LABEL_50:
  v35 = *((float *)this + 13);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_94;
LABEL_53:
  v37 = *((float *)this + 11);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_95;
LABEL_56:
  v39 = *((float *)this + 9);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_59:
    v41 = *((int *)this + 10);
    if ((v1 & 2) != 0)
      goto LABEL_60;
LABEL_97:
    v43 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_63;
LABEL_98:
    v45 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_66;
LABEL_99:
    v47 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_69;
    goto LABEL_100;
  }
LABEL_96:
  v41 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_97;
LABEL_60:
  v42 = *((float *)this + 4);
  v43 = LODWORD(v42);
  if (v42 == 0.0)
    v43 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_98;
LABEL_63:
  v44 = *((float *)this + 29);
  v45 = LODWORD(v44);
  if (v44 == 0.0)
    v45 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_99;
LABEL_66:
  v46 = *((float *)this + 22);
  v47 = LODWORD(v46);
  if (v46 == 0.0)
    v47 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_69:
    v48 = *((unsigned int *)this + 5);
    if ((v1 & 0x40000) != 0)
      goto LABEL_70;
LABEL_101:
    v50 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v41 ^ v43 ^ v45 ^ v47 ^ v48 ^ v50;
  }
LABEL_100:
  v48 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_101;
LABEL_70:
  v49 = *((float *)this + 21);
  v50 = LODWORD(v49);
  if (v49 == 0.0)
    v50 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v41 ^ v43 ^ v45 ^ v47 ^ v48 ^ v50;
}

uint64_t CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t this)
{
  *(_QWORD *)this = off_100350A68;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350A68;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::DopplerProximityEvent::~DopplerProximityEvent(CMMsl::DopplerProximityEvent *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t this, const CMMsl::DopplerProximityEvent *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_100350A68;
  *(_DWORD *)(this + 24) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 24) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 24) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 24) = v3 | 2;
    *(_DWORD *)(this + 16) = v6;
  }
  return this;
}

uint64_t CMMsl::DopplerProximityEvent::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  int v4;
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  int v13;

  if (a1 != a2)
  {
    v12[0] = off_100350A68;
    v13 = 0;
    v6 = *(_BYTE *)(a2 + 24);
    if ((v6 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      v7 = 1;
      LOBYTE(v13) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v3 = *(_DWORD *)(a2 + 20);
        v7 |= 4u;
        LOBYTE(v13) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 24) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v4 = *(_DWORD *)(a2 + 16);
      LOBYTE(v13) = v7 | 2;
    }
LABEL_9:
    v8 = v13;
    v13 = *(_DWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 20) = v3;
    *(_DWORD *)(a1 + 24) = v8;
    *(_DWORD *)(a1 + 16) = v4;
    v12[1] = v9;
    v12[2] = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DopplerProximityEvent *a2, CMMsl::DopplerProximityEvent *a3)
{
  int v3;
  double result;
  int v5;
  int v6;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

double CMMsl::DopplerProximityEvent::DopplerProximityEvent(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350A68;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350A68;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DopplerProximityEvent::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  int v8;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7[0] = off_100350A68;
    v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::DopplerProximityEvent::formatText(CMMsl::DopplerProximityEvent *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 2) == 0)
  {
    if ((*((_BYTE *)this + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "proximityState", *((_DWORD *)this + 5));
    if ((*((_BYTE *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "proximityRawValue", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerProximityEvent::readFrom(CMMsl::DopplerProximityEvent *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 24) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 5) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerProximityEvent::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 2u);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  return this;
}

BOOL CMMsl::DopplerProximityEvent::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 2) == 0;
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    return (*(_BYTE *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::DopplerProximityEvent::hash_value(CMMsl::DopplerProximityEvent *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_8:
    v2 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_4;
LABEL_9:
    v3 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_8;
LABEL_3:
  v2 = *((unsigned int *)this + 5);
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_9;
LABEL_4:
  v3 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1 ^ v3;
}

_QWORD *CMMsl::DopplerRawDataInput::DopplerRawDataInput(_QWORD *this)
{
  *this = off_100350AA0;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

{
  *this = off_100350AA0;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

void CMMsl::DopplerRawDataInput::~DopplerRawDataInput(CMMsl::DopplerRawDataInput *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::DopplerRawDataInput::DopplerRawDataInput(uint64_t this, const CMMsl::DopplerRawDataInput *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  *(_QWORD *)this = off_100350AA0;
  *(_QWORD *)(this + 164) = 0;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_QWORD *)(this + 164) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x80000uLL;
    *(_QWORD *)(this + 164) = v3;
    *(_DWORD *)(this + 104) = v5;
    v2 = *(_QWORD *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x20000000) != 0)
  {
    v6 = *((_DWORD *)a2 + 36);
    v3 |= 0x20000000uLL;
    *(_QWORD *)(this + 164) = v3;
    *(_DWORD *)(this + 144) = v6;
    v2 = *(_QWORD *)((char *)a2 + 164);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_41;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x20uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 48) = v7;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 148) = v8;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  v9 = *((_DWORD *)a2 + 13);
  v3 |= 0x40uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 52) = v9;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  v10 = *((_DWORD *)a2 + 39);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 156) = v10;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  v11 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 80) = v11;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  v12 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 76) = v12;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x80uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 56) = v13;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  v14 = *((_DWORD *)a2 + 40);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 160) = v14;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  v15 = *((_DWORD *)a2 + 35);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 140) = v15;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  v16 = *((_DWORD *)a2 + 17);
  v3 |= 0x400uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 68) = v16;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  v17 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 84) = v17;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  v18 = *((_DWORD *)a2 + 30);
  v3 |= 0x800000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 120) = v18;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  v19 = *((_DWORD *)a2 + 32);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 128) = v19;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  v20 = *((_DWORD *)a2 + 34);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 136) = v20;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  v21 = *((_DWORD *)a2 + 33);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 132) = v21;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  v22 = *((_DWORD *)a2 + 29);
  v3 |= 0x400000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 116) = v22;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  v23 = *((_DWORD *)a2 + 31);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 124) = v23;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  v24 = *((_DWORD *)a2 + 38);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 152) = v24;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  v25 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 88) = v25;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  v26 = *((_DWORD *)a2 + 27);
  v3 |= 0x100000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 108) = v26;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  v27 = *((_DWORD *)a2 + 15);
  v3 |= 0x100uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 60) = v27;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  v28 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 112) = v28;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x20000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  v29 = *((_DWORD *)a2 + 16);
  v3 |= 0x200uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 64) = v29;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  v30 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 96) = v30;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  v31 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 100) = v31;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  v32 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_DWORD *)(this + 92) = v32;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 4) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  v33 = *((_QWORD *)a2 + 4);
  v3 |= 8uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 32) = v33;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  v34 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 24) = v34;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  v35 = *((_QWORD *)a2 + 1);
  v3 |= 1uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 8) = v35;
  v2 = *(_QWORD *)((char *)a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_37:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_70:
    v37 = *((_DWORD *)a2 + 18);
    *(_QWORD *)(this + 164) = v3 | 0x800;
    *(_DWORD *)(this + 72) = v37;
    return this;
  }
LABEL_69:
  v36 = *((_QWORD *)a2 + 2);
  v3 |= 2uLL;
  *(_QWORD *)(this + 164) = v3;
  *(_QWORD *)(this + 16) = v36;
  if ((*(_QWORD *)((_BYTE *)a2 + 164) & 0x800) != 0)
    goto LABEL_70;
  return this;
}

CMMsl *CMMsl::DopplerRawDataInput::operator=(CMMsl *a1, const CMMsl::DopplerRawDataInput *a2)
{
  CMMsl::DopplerRawDataInput *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::DopplerRawDataInput::DopplerRawDataInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerRawDataInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::DopplerRawDataInput *a2, CMMsl::DopplerRawDataInput *a3)
{
  uint64_t v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)((char *)this + 164);
  *(_QWORD *)((char *)this + 164) = *(_QWORD *)((char *)a2 + 164);
  *(_QWORD *)((char *)a2 + 164) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v4;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  LODWORD(v3) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  LODWORD(v3) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v3;
  LODWORD(v3) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v3;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  LODWORD(v3) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LODWORD(v3) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  LODWORD(v3) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  LODWORD(v3) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  LODWORD(v3) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  return result;
}

float CMMsl::DopplerRawDataInput::DopplerRawDataInput(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350AA0;
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_QWORD *)(a2 + 164) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return result;
}

CMMsl *CMMsl::DopplerRawDataInput::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::DopplerRawDataInput *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::DopplerRawDataInput::DopplerRawDataInput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::DopplerRawDataInput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::DopplerRawDataInput::formatText(CMMsl::DopplerRawDataInput *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "ambientRatePerSPAD", *((float *)this + 12));
    v5 = *(_QWORD *)((char *)this + 164);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_39;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ambientRateTotal", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "blockSelectByte", *((_DWORD *)this + 14));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "correctedSignalRatePerSPAD", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "estimatedAmbientBias", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "integrationTime", *((_DWORD *)this + 17));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "numAOPClients", *((_DWORD *)this + 18));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "numAperturedSPADs", *((_DWORD *)this + 19));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "numFullSPADs", *((_DWORD *)this + 20));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "oscFrequencySetting", *((_DWORD *)this + 21));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "oscTrim", *((_DWORD *)this + 22));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "pearlScanWindowOnTs", *((_QWORD *)this + 1));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "pearlScanWindowOpen", *((_DWORD *)this + 23));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "pearlScanWindownOffTs", *((_QWORD *)this + 2));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "pearlSessionOffTs", *((_QWORD *)this + 3));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "pearlSessionOnTs", *((_QWORD *)this + 4));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "pearlSessionRunning", *((_DWORD *)this + 24));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "pearlSessionType", *((_DWORD *)this + 25));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "rawRange", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "refPhaseOffset", *((_DWORD *)this + 27));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "refSignalRateTotal", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "regValAmbientWindowEvents", *((_DWORD *)this + 29));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "regValRange", *((_DWORD *)this + 30));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "regValRefAmbientWindowEvents", *((_DWORD *)this + 31));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "regValRefRange", *((_DWORD *)this + 32));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "regValRefSignalTotalEvents", *((_DWORD *)this + 33));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "regValSignalTotalEvents", *((_DWORD *)this + 34));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "signalEventLimit", *((_DWORD *)this + 35));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "signalRatePerSPAD", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "signalRateTotal", *((float *)this + 37));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "signalToAmbientWindowRatio", *((_DWORD *)this + 38));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
LABEL_69:
    PB::TextFormatter::format(a2, "totalRateTotal", *((float *)this + 39));
    if ((*(_QWORD *)((_BYTE *)this + 164) & 0x200000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_35;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *(_QWORD *)((char *)this + 164);
  if ((v5 & 0x100000000) != 0)
    goto LABEL_69;
LABEL_34:
  if ((v5 & 0x200000000) != 0)
LABEL_35:
    PB::TextFormatter::format(a2, "vhvSetting", *((_DWORD *)this + 40));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerRawDataInput::readFrom(CMMsl::DopplerRawDataInput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  unsigned int v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;
  char v272;
  unsigned int v273;
  unint64_t v274;
  char v275;
  char v276;
  unsigned int v277;
  unint64_t v278;
  char v279;
  char v280;
  unsigned int v281;
  unint64_t v282;
  char v283;
  char v284;
  unsigned int v285;
  unint64_t v286;
  char v287;
  char v288;
  unsigned int v289;
  unint64_t v290;
  char v291;
  char v292;
  unsigned int v293;
  unint64_t v294;
  char v295;
  char v296;
  unsigned int v297;
  unint64_t v298;
  char v299;
  char v300;
  unsigned int v301;
  unint64_t v302;
  char v303;
  char v304;
  unsigned int v305;
  unint64_t v306;
  char v307;
  char v308;
  unsigned int v309;
  unint64_t v310;
  char v311;
  char v312;
  unsigned int v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  unint64_t v318;
  char v319;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)((char *)this + 164) |= 0x10uLL;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_392;
        case 2u:
          *(_QWORD *)((char *)this + 164) |= 0x80000uLL;
          v23 = *((_QWORD *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v23);
          goto LABEL_391;
        case 3u:
          *(_QWORD *)((char *)this + 164) |= 0x20000000uLL;
          v24 = *((_QWORD *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v24);
          goto LABEL_391;
        case 4u:
          *(_QWORD *)((char *)this + 164) |= 0x20uLL;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_391;
        case 5u:
          *(_QWORD *)((char *)this + 164) |= 0x40000000uLL;
          v26 = *((_QWORD *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_DWORD *)this + 37) = *(_DWORD *)(*(_QWORD *)a2 + v26);
          goto LABEL_391;
        case 6u:
          *(_QWORD *)((char *)this + 164) |= 0x40uLL;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v27);
          goto LABEL_391;
        case 7u:
          *(_QWORD *)((char *)this + 164) |= (unint64_t)&_mh_execute_header;
          v28 = *((_QWORD *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v28);
          goto LABEL_391;
        case 8u:
          *(_QWORD *)((char *)this + 164) |= 0x2000uLL;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_396;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v34) = 0;
            goto LABEL_396;
          }
          v224 = 0;
          v225 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v226 = v29 + 1;
              v227 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v226;
              v34 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                v29 = v226;
                v14 = v225++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_396:
          *((_DWORD *)this + 20) = v34;
          goto LABEL_489;
        case 9u:
          *(_QWORD *)((char *)this + 164) |= 0x1000uLL;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_400;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v42) = 0;
            goto LABEL_400;
          }
          v228 = 0;
          v229 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v230 = v37 + 1;
              v231 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)a2 + 1) = v230;
              v42 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                v37 = v230;
                v14 = v229++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_400:
          *((_DWORD *)this + 19) = v42;
          goto LABEL_489;
        case 0xAu:
          *(_QWORD *)((char *)this + 164) |= 0x80uLL;
          v45 = *((_QWORD *)a2 + 1);
          v46 = *((_QWORD *)a2 + 2);
          v47 = *(_QWORD *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)a2 + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_404;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v50) = 0;
            goto LABEL_404;
          }
          v232 = 0;
          v233 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v234 = v45 + 1;
              v235 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)a2 + 1) = v234;
              v50 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                v45 = v234;
                v14 = v233++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_404:
          *((_DWORD *)this + 14) = v50;
          goto LABEL_489;
        case 0xBu:
          *(_QWORD *)((char *)this + 164) |= 0x200000000uLL;
          v53 = *((_QWORD *)a2 + 1);
          v54 = *((_QWORD *)a2 + 2);
          v55 = *(_QWORD *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)a2 + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_408;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v58) = 0;
            goto LABEL_408;
          }
          v236 = 0;
          v237 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v238 = v53 + 1;
              v239 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)a2 + 1) = v238;
              v58 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v53 = v238;
                v14 = v237++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_408:
          *((_DWORD *)this + 40) = v58;
          goto LABEL_489;
        case 0xCu:
          *(_QWORD *)((char *)this + 164) |= 0x10000000uLL;
          v61 = *((_QWORD *)a2 + 1);
          v62 = *((_QWORD *)a2 + 2);
          v63 = *(_QWORD *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)a2 + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_412;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v66) = 0;
            goto LABEL_412;
          }
          v240 = 0;
          v241 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v242 = v61 + 1;
              v243 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)a2 + 1) = v242;
              v66 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v61 = v242;
                v14 = v241++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_412:
          *((_DWORD *)this + 35) = v66;
          goto LABEL_489;
        case 0xDu:
          *(_QWORD *)((char *)this + 164) |= 0x400uLL;
          v69 = *((_QWORD *)a2 + 1);
          v70 = *((_QWORD *)a2 + 2);
          v71 = *(_QWORD *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)a2 + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_416;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v74) = 0;
            goto LABEL_416;
          }
          v244 = 0;
          v245 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v246 = v69 + 1;
              v247 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)a2 + 1) = v246;
              v74 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v69 = v246;
                v14 = v245++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_416:
          *((_DWORD *)this + 17) = v74;
          goto LABEL_489;
        case 0xEu:
          *(_QWORD *)((char *)this + 164) |= 0x4000uLL;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_420;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v82) = 0;
            goto LABEL_420;
          }
          v248 = 0;
          v249 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v250 = v77 + 1;
              v251 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)a2 + 1) = v250;
              v82 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                v77 = v250;
                v14 = v249++ > 8;
                if (v14)
                  goto LABEL_270;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_420:
          *((_DWORD *)this + 21) = v82;
          goto LABEL_489;
        case 0xFu:
          *(_QWORD *)((char *)this + 164) |= 0x800000uLL;
          v85 = *((_QWORD *)a2 + 1);
          v86 = *((_QWORD *)a2 + 2);
          v87 = *(_QWORD *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)a2 + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_424;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v90) = 0;
            goto LABEL_424;
          }
          v252 = 0;
          v253 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v254 = v85 + 1;
              v255 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)a2 + 1) = v254;
              v90 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                v85 = v254;
                v14 = v253++ > 8;
                if (v14)
                  goto LABEL_277;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_424:
          *((_DWORD *)this + 30) = v90;
          goto LABEL_489;
        case 0x10u:
          *(_QWORD *)((char *)this + 164) |= 0x2000000uLL;
          v93 = *((_QWORD *)a2 + 1);
          v94 = *((_QWORD *)a2 + 2);
          v95 = *(_QWORD *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)a2 + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_428;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v98) = 0;
            goto LABEL_428;
          }
          v256 = 0;
          v257 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v258 = v93 + 1;
              v259 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)a2 + 1) = v258;
              v98 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                v93 = v258;
                v14 = v257++ > 8;
                if (v14)
                  goto LABEL_284;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_428:
          *((_DWORD *)this + 32) = v98;
          goto LABEL_489;
        case 0x11u:
          *(_QWORD *)((char *)this + 164) |= 0x8000000uLL;
          v101 = *((_QWORD *)a2 + 1);
          v102 = *((_QWORD *)a2 + 2);
          v103 = *(_QWORD *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)a2 + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_432;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v106) = 0;
            goto LABEL_432;
          }
          v260 = 0;
          v261 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v262 = v101 + 1;
              v263 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)a2 + 1) = v262;
              v106 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                v101 = v262;
                v14 = v261++ > 8;
                if (v14)
                  goto LABEL_291;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_432:
          *((_DWORD *)this + 34) = v106;
          goto LABEL_489;
        case 0x12u:
          *(_QWORD *)((char *)this + 164) |= 0x4000000uLL;
          v109 = *((_QWORD *)a2 + 1);
          v110 = *((_QWORD *)a2 + 2);
          v111 = *(_QWORD *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)a2 + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_436;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_298:
            LODWORD(v114) = 0;
            goto LABEL_436;
          }
          v264 = 0;
          v265 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v266 = v109 + 1;
              v267 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)a2 + 1) = v266;
              v114 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                v109 = v266;
                v14 = v265++ > 8;
                if (v14)
                  goto LABEL_298;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_436:
          *((_DWORD *)this + 33) = v114;
          goto LABEL_489;
        case 0x13u:
          *(_QWORD *)((char *)this + 164) |= 0x400000uLL;
          v117 = *((_QWORD *)a2 + 1);
          v118 = *((_QWORD *)a2 + 2);
          v119 = *(_QWORD *)a2;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)a2 + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_440;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_305:
            LODWORD(v122) = 0;
            goto LABEL_440;
          }
          v268 = 0;
          v269 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v270 = v117 + 1;
              v271 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)a2 + 1) = v270;
              v122 |= (unint64_t)(v271 & 0x7F) << v268;
              if (v271 < 0)
              {
                v268 += 7;
                v117 = v270;
                v14 = v269++ > 8;
                if (v14)
                  goto LABEL_305;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_440:
          *((_DWORD *)this + 29) = v122;
          goto LABEL_489;
        case 0x14u:
          *(_QWORD *)((char *)this + 164) |= 0x1000000uLL;
          v125 = *((_QWORD *)a2 + 1);
          v126 = *((_QWORD *)a2 + 2);
          v127 = *(_QWORD *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)a2 + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_444;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_312:
            LODWORD(v130) = 0;
            goto LABEL_444;
          }
          v272 = 0;
          v273 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v274 = v125 + 1;
              v275 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)a2 + 1) = v274;
              v130 |= (unint64_t)(v275 & 0x7F) << v272;
              if (v275 < 0)
              {
                v272 += 7;
                v125 = v274;
                v14 = v273++ > 8;
                if (v14)
                  goto LABEL_312;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_444:
          *((_DWORD *)this + 31) = v130;
          goto LABEL_489;
        case 0x15u:
          *(_QWORD *)((char *)this + 164) |= 0x80000000uLL;
          v133 = *((_QWORD *)a2 + 1);
          v134 = *((_QWORD *)a2 + 2);
          v135 = *(_QWORD *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)a2 + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_448;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_319:
            LODWORD(v138) = 0;
            goto LABEL_448;
          }
          v276 = 0;
          v277 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v278 = v133 + 1;
              v279 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)a2 + 1) = v278;
              v138 |= (unint64_t)(v279 & 0x7F) << v276;
              if (v279 < 0)
              {
                v276 += 7;
                v133 = v278;
                v14 = v277++ > 8;
                if (v14)
                  goto LABEL_319;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_448:
          *((_DWORD *)this + 38) = v138;
          goto LABEL_489;
        case 0x16u:
          *(_QWORD *)((char *)this + 164) |= 0x8000uLL;
          v141 = *((_QWORD *)a2 + 1);
          v142 = *((_QWORD *)a2 + 2);
          v143 = *(_QWORD *)a2;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)a2 + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_452;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_326:
            LODWORD(v146) = 0;
            goto LABEL_452;
          }
          v280 = 0;
          v281 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v282 = v141 + 1;
              v283 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)a2 + 1) = v282;
              v146 |= (unint64_t)(v283 & 0x7F) << v280;
              if (v283 < 0)
              {
                v280 += 7;
                v141 = v282;
                v14 = v281++ > 8;
                if (v14)
                  goto LABEL_326;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_452:
          *((_DWORD *)this + 22) = v146;
          goto LABEL_489;
        case 0x17u:
          *(_QWORD *)((char *)this + 164) |= 0x100000uLL;
          v149 = *((_QWORD *)a2 + 1);
          v150 = *((_QWORD *)a2 + 2);
          v151 = *(_QWORD *)a2;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)a2 + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_456;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_333:
            LODWORD(v154) = 0;
            goto LABEL_456;
          }
          v284 = 0;
          v285 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v286 = v149 + 1;
              v287 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)a2 + 1) = v286;
              v154 |= (unint64_t)(v287 & 0x7F) << v284;
              if (v287 < 0)
              {
                v284 += 7;
                v149 = v286;
                v14 = v285++ > 8;
                if (v14)
                  goto LABEL_333;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_456:
          *((_DWORD *)this + 27) = v154;
          goto LABEL_489;
        case 0x18u:
          *(_QWORD *)((char *)this + 164) |= 0x100uLL;
          v157 = *((_QWORD *)a2 + 1);
          if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v157);
          goto LABEL_391;
        case 0x19u:
          *(_QWORD *)((char *)this + 164) |= 0x200000uLL;
          v158 = *((_QWORD *)a2 + 1);
          if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_165;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v158);
          goto LABEL_391;
        case 0x1Au:
          *(_QWORD *)((char *)this + 164) |= 0x200uLL;
          v159 = *((_QWORD *)a2 + 1);
          if (v159 <= 0xFFFFFFFFFFFFFFFBLL && v159 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v159);
LABEL_391:
            v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_392:
            *((_QWORD *)a2 + 1) = v21;
          }
          else
          {
LABEL_165:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_489;
        case 0x1Bu:
          *(_QWORD *)((char *)this + 164) |= 0x20000uLL;
          v160 = *((_QWORD *)a2 + 1);
          v161 = *((_QWORD *)a2 + 2);
          v162 = *(_QWORD *)a2;
          if (v160 <= 0xFFFFFFFFFFFFFFF5 && v160 + 10 <= v161)
          {
            v163 = 0;
            v164 = 0;
            v165 = 0;
            do
            {
              v166 = v160 + 1;
              *((_QWORD *)a2 + 1) = v160 + 1;
              v167 = *(_BYTE *)(v162 + v160);
              v165 |= (unint64_t)(v167 & 0x7F) << v163;
              if ((v167 & 0x80) == 0)
                goto LABEL_460;
              v163 += 7;
              v160 = v166;
              v14 = v164++ > 8;
            }
            while (!v14);
LABEL_340:
            LODWORD(v165) = 0;
            goto LABEL_460;
          }
          v288 = 0;
          v289 = 0;
          v165 = 0;
          if (v161 <= v160)
            v161 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v161 == v160)
            {
              LODWORD(v165) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v290 = v160 + 1;
              v291 = *(_BYTE *)(v162 + v160);
              *((_QWORD *)a2 + 1) = v290;
              v165 |= (unint64_t)(v291 & 0x7F) << v288;
              if (v291 < 0)
              {
                v288 += 7;
                v160 = v290;
                v14 = v289++ > 8;
                if (v14)
                  goto LABEL_340;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v165) = 0;
            }
            break;
          }
LABEL_460:
          *((_DWORD *)this + 24) = v165;
          goto LABEL_489;
        case 0x1Cu:
          *(_QWORD *)((char *)this + 164) |= 0x40000uLL;
          v168 = *((_QWORD *)a2 + 1);
          v169 = *((_QWORD *)a2 + 2);
          v170 = *(_QWORD *)a2;
          if (v168 <= 0xFFFFFFFFFFFFFFF5 && v168 + 10 <= v169)
          {
            v171 = 0;
            v172 = 0;
            v173 = 0;
            do
            {
              v174 = v168 + 1;
              *((_QWORD *)a2 + 1) = v168 + 1;
              v175 = *(_BYTE *)(v170 + v168);
              v173 |= (unint64_t)(v175 & 0x7F) << v171;
              if ((v175 & 0x80) == 0)
                goto LABEL_464;
              v171 += 7;
              v168 = v174;
              v14 = v172++ > 8;
            }
            while (!v14);
LABEL_347:
            LODWORD(v173) = 0;
            goto LABEL_464;
          }
          v292 = 0;
          v293 = 0;
          v173 = 0;
          if (v169 <= v168)
            v169 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v169 == v168)
            {
              LODWORD(v173) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v294 = v168 + 1;
              v295 = *(_BYTE *)(v170 + v168);
              *((_QWORD *)a2 + 1) = v294;
              v173 |= (unint64_t)(v295 & 0x7F) << v292;
              if (v295 < 0)
              {
                v292 += 7;
                v168 = v294;
                v14 = v293++ > 8;
                if (v14)
                  goto LABEL_347;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v173) = 0;
            }
            break;
          }
LABEL_464:
          *((_DWORD *)this + 25) = v173;
          goto LABEL_489;
        case 0x1Du:
          *(_QWORD *)((char *)this + 164) |= 0x10000uLL;
          v176 = *((_QWORD *)a2 + 1);
          v177 = *((_QWORD *)a2 + 2);
          v178 = *(_QWORD *)a2;
          if (v176 <= 0xFFFFFFFFFFFFFFF5 && v176 + 10 <= v177)
          {
            v179 = 0;
            v180 = 0;
            v181 = 0;
            do
            {
              v182 = v176 + 1;
              *((_QWORD *)a2 + 1) = v176 + 1;
              v183 = *(_BYTE *)(v178 + v176);
              v181 |= (unint64_t)(v183 & 0x7F) << v179;
              if ((v183 & 0x80) == 0)
                goto LABEL_468;
              v179 += 7;
              v176 = v182;
              v14 = v180++ > 8;
            }
            while (!v14);
LABEL_354:
            LODWORD(v181) = 0;
            goto LABEL_468;
          }
          v296 = 0;
          v297 = 0;
          v181 = 0;
          if (v177 <= v176)
            v177 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v177 == v176)
            {
              LODWORD(v181) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v298 = v176 + 1;
              v299 = *(_BYTE *)(v178 + v176);
              *((_QWORD *)a2 + 1) = v298;
              v181 |= (unint64_t)(v299 & 0x7F) << v296;
              if (v299 < 0)
              {
                v296 += 7;
                v176 = v298;
                v14 = v297++ > 8;
                if (v14)
                  goto LABEL_354;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v181) = 0;
            }
            break;
          }
LABEL_468:
          *((_DWORD *)this + 23) = v181;
          goto LABEL_489;
        case 0x1Eu:
          *(_QWORD *)((char *)this + 164) |= 8uLL;
          v184 = *((_QWORD *)a2 + 1);
          v185 = *((_QWORD *)a2 + 2);
          v186 = *(_QWORD *)a2;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            v187 = 0;
            v188 = 0;
            v189 = 0;
            do
            {
              v190 = v184 + 1;
              *((_QWORD *)a2 + 1) = v184 + 1;
              v191 = *(_BYTE *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0)
                goto LABEL_472;
              v187 += 7;
              v184 = v190;
              v14 = v188++ > 8;
            }
            while (!v14);
LABEL_361:
            v189 = 0;
            goto LABEL_472;
          }
          v300 = 0;
          v301 = 0;
          v189 = 0;
          if (v185 <= v184)
            v185 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v185 == v184)
            {
              v189 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v302 = v184 + 1;
              v303 = *(_BYTE *)(v186 + v184);
              *((_QWORD *)a2 + 1) = v302;
              v189 |= (unint64_t)(v303 & 0x7F) << v300;
              if (v303 < 0)
              {
                v300 += 7;
                v184 = v302;
                v14 = v301++ > 8;
                if (v14)
                  goto LABEL_361;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v189 = 0;
            }
            break;
          }
LABEL_472:
          *((_QWORD *)this + 4) = v189;
          goto LABEL_489;
        case 0x1Fu:
          *(_QWORD *)((char *)this + 164) |= 4uLL;
          v192 = *((_QWORD *)a2 + 1);
          v193 = *((_QWORD *)a2 + 2);
          v194 = *(_QWORD *)a2;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            v195 = 0;
            v196 = 0;
            v197 = 0;
            do
            {
              v198 = v192 + 1;
              *((_QWORD *)a2 + 1) = v192 + 1;
              v199 = *(_BYTE *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0)
                goto LABEL_476;
              v195 += 7;
              v192 = v198;
              v14 = v196++ > 8;
            }
            while (!v14);
LABEL_368:
            v197 = 0;
            goto LABEL_476;
          }
          v304 = 0;
          v305 = 0;
          v197 = 0;
          if (v193 <= v192)
            v193 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v193 == v192)
            {
              v197 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v306 = v192 + 1;
              v307 = *(_BYTE *)(v194 + v192);
              *((_QWORD *)a2 + 1) = v306;
              v197 |= (unint64_t)(v307 & 0x7F) << v304;
              if (v307 < 0)
              {
                v304 += 7;
                v192 = v306;
                v14 = v305++ > 8;
                if (v14)
                  goto LABEL_368;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v197 = 0;
            }
            break;
          }
LABEL_476:
          *((_QWORD *)this + 3) = v197;
          goto LABEL_489;
        case 0x20u:
          *(_QWORD *)((char *)this + 164) |= 1uLL;
          v200 = *((_QWORD *)a2 + 1);
          v201 = *((_QWORD *)a2 + 2);
          v202 = *(_QWORD *)a2;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            v203 = 0;
            v204 = 0;
            v205 = 0;
            do
            {
              v206 = v200 + 1;
              *((_QWORD *)a2 + 1) = v200 + 1;
              v207 = *(_BYTE *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0)
                goto LABEL_480;
              v203 += 7;
              v200 = v206;
              v14 = v204++ > 8;
            }
            while (!v14);
LABEL_375:
            v205 = 0;
            goto LABEL_480;
          }
          v308 = 0;
          v309 = 0;
          v205 = 0;
          if (v201 <= v200)
            v201 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v201 == v200)
            {
              v205 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v310 = v200 + 1;
              v311 = *(_BYTE *)(v202 + v200);
              *((_QWORD *)a2 + 1) = v310;
              v205 |= (unint64_t)(v311 & 0x7F) << v308;
              if (v311 < 0)
              {
                v308 += 7;
                v200 = v310;
                v14 = v309++ > 8;
                if (v14)
                  goto LABEL_375;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v205 = 0;
            }
            break;
          }
LABEL_480:
          *((_QWORD *)this + 1) = v205;
          goto LABEL_489;
        case 0x21u:
          *(_QWORD *)((char *)this + 164) |= 2uLL;
          v208 = *((_QWORD *)a2 + 1);
          v209 = *((_QWORD *)a2 + 2);
          v210 = *(_QWORD *)a2;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            v211 = 0;
            v212 = 0;
            v213 = 0;
            do
            {
              v214 = v208 + 1;
              *((_QWORD *)a2 + 1) = v208 + 1;
              v215 = *(_BYTE *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0)
                goto LABEL_484;
              v211 += 7;
              v208 = v214;
              v14 = v212++ > 8;
            }
            while (!v14);
LABEL_382:
            v213 = 0;
            goto LABEL_484;
          }
          v312 = 0;
          v313 = 0;
          v213 = 0;
          if (v209 <= v208)
            v209 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v209 == v208)
            {
              v213 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v314 = v208 + 1;
              v315 = *(_BYTE *)(v210 + v208);
              *((_QWORD *)a2 + 1) = v314;
              v213 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                v208 = v314;
                v14 = v313++ > 8;
                if (v14)
                  goto LABEL_382;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v213 = 0;
            }
            break;
          }
LABEL_484:
          *((_QWORD *)this + 2) = v213;
          goto LABEL_489;
        case 0x22u:
          *(_QWORD *)((char *)this + 164) |= 0x800uLL;
          v216 = *((_QWORD *)a2 + 1);
          v217 = *((_QWORD *)a2 + 2);
          v218 = *(_QWORD *)a2;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            v219 = 0;
            v220 = 0;
            v221 = 0;
            do
            {
              v222 = v216 + 1;
              *((_QWORD *)a2 + 1) = v216 + 1;
              v223 = *(_BYTE *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0)
                goto LABEL_488;
              v219 += 7;
              v216 = v222;
              v14 = v220++ > 8;
            }
            while (!v14);
LABEL_389:
            LODWORD(v221) = 0;
            goto LABEL_488;
          }
          v316 = 0;
          v317 = 0;
          v221 = 0;
          if (v217 <= v216)
            v217 = *((_QWORD *)a2 + 1);
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_489;
      }
      while (1)
      {
        if (v217 == v216)
        {
          LODWORD(v221) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_488;
        }
        v318 = v216 + 1;
        v319 = *(_BYTE *)(v218 + v216);
        *((_QWORD *)a2 + 1) = v318;
        v221 |= (unint64_t)(v319 & 0x7F) << v316;
        if ((v319 & 0x80) == 0)
          break;
        v316 += 7;
        v216 = v318;
        v14 = v317++ > 8;
        if (v14)
          goto LABEL_389;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v221) = 0;
LABEL_488:
      *((_DWORD *)this + 18) = v221;
LABEL_489:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerRawDataInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 164);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 2u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 3u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 4u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 5u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 6u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 7u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 8u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 9u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0xAu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0xBu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0xCu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0xDu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800000) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0xEu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0xFu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 0x10u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x11u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0x12u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x13u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 0x14u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x15u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x16u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x17u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x18u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x19u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x20000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x1Au);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x1Du);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 4) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x20u);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_34:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0x22u);
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x21u);
  if ((*(_QWORD *)(v3 + 164) & 0x800) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0x22u);
  return this;
}

BOOL CMMsl::DopplerRawDataInput::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 164);
  v3 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 164) & 0x800) == 0;
  if ((v2 & 0x800) != 0)
    return (v3 & 0x800) != 0 && *(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72);
  return v4;
}

uint64_t CMMsl::DopplerRawDataInput::hash_value(CMMsl::DopplerRawDataInput *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)((char *)this + 164);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_3;
LABEL_61:
    v51 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_6;
LABEL_62:
    v50 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_63:
    v49 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_12;
LABEL_64:
    v48 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_65:
    v47 = 0;
    if ((v1 & 0x100000000) != 0)
      goto LABEL_18;
LABEL_66:
    v46 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_21;
    goto LABEL_67;
  }
  if (*((double *)this + 5) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 5);
  if ((v1 & 0x80000) == 0)
    goto LABEL_61;
LABEL_3:
  v3 = *((float *)this + 26);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v51 = v4;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_62;
LABEL_6:
  v5 = *((float *)this + 36);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v50 = v6;
  if ((v1 & 0x20) == 0)
    goto LABEL_63;
LABEL_9:
  v7 = *((float *)this + 12);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v49 = v8;
  if ((v1 & 0x40000000) == 0)
    goto LABEL_64;
LABEL_12:
  v9 = *((float *)this + 37);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v48 = v10;
  if ((v1 & 0x40) == 0)
    goto LABEL_65;
LABEL_15:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v47 = v12;
  if ((v1 & 0x100000000) == 0)
    goto LABEL_66;
LABEL_18:
  v13 = *((float *)this + 39);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v46 = v14;
  if ((v1 & 0x2000) != 0)
  {
LABEL_21:
    v45 = *((unsigned int *)this + 20);
    if ((v1 & 0x1000) != 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  v45 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_22:
    v15 = *((unsigned int *)this + 19);
    if ((v1 & 0x80) != 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  v15 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_23:
    v16 = *((unsigned int *)this + 14);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  v16 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_24:
    v17 = *((unsigned int *)this + 40);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  v17 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_25:
    v18 = *((unsigned int *)this + 35);
    if ((v1 & 0x400) != 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  v18 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_26:
    v19 = *((unsigned int *)this + 17);
    if ((v1 & 0x4000) != 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  v19 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_27:
    v20 = *((unsigned int *)this + 21);
    if ((v1 & 0x800000) != 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  v20 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_28:
    v21 = *((unsigned int *)this + 30);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  v21 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_29:
    v22 = *((unsigned int *)this + 32);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  v22 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_30:
    v23 = *((int *)this + 34);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  v23 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_31:
    v24 = *((int *)this + 33);
    if ((v1 & 0x400000) != 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  v24 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_32:
    v25 = *((unsigned int *)this + 29);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  v25 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_33:
    v26 = *((unsigned int *)this + 31);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  v26 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_34:
    v27 = *((unsigned int *)this + 38);
    if ((v1 & 0x8000) != 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  v27 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_35:
    v28 = *((unsigned int *)this + 22);
    if ((v1 & 0x100000) != 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  v28 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_36:
    v29 = *((unsigned int *)this + 27);
    if ((v1 & 0x100) != 0)
      goto LABEL_37;
LABEL_83:
    v31 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_41;
LABEL_84:
    v33 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_45;
LABEL_85:
    v35 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_49;
    goto LABEL_86;
  }
LABEL_82:
  v29 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_83;
LABEL_37:
  v30 = *((float *)this + 15);
  if (v30 == 0.0)
    v31 = 0;
  else
    v31 = LODWORD(v30);
  if ((v1 & 0x200000) == 0)
    goto LABEL_84;
LABEL_41:
  v32 = *((float *)this + 28);
  if (v32 == 0.0)
    v33 = 0;
  else
    v33 = LODWORD(v32);
  if ((v1 & 0x200) == 0)
    goto LABEL_85;
LABEL_45:
  v34 = *((float *)this + 16);
  if (v34 == 0.0)
    v35 = 0;
  else
    v35 = LODWORD(v34);
  if ((v1 & 0x20000) != 0)
  {
LABEL_49:
    v36 = *((unsigned int *)this + 24);
    if ((v1 & 0x40000) != 0)
      goto LABEL_50;
    goto LABEL_87;
  }
LABEL_86:
  v36 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_50:
    v37 = *((unsigned int *)this + 25);
    if ((v1 & 0x10000) != 0)
      goto LABEL_51;
    goto LABEL_88;
  }
LABEL_87:
  v37 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_51:
    v38 = *((unsigned int *)this + 23);
    if ((v1 & 8) != 0)
      goto LABEL_52;
    goto LABEL_89;
  }
LABEL_88:
  v38 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_52:
    v39 = *((_QWORD *)this + 4);
    if ((v1 & 4) != 0)
      goto LABEL_53;
    goto LABEL_90;
  }
LABEL_89:
  v39 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_53:
    v40 = *((_QWORD *)this + 3);
    if ((v1 & 1) != 0)
      goto LABEL_54;
    goto LABEL_91;
  }
LABEL_90:
  v40 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_54:
    v41 = *((_QWORD *)this + 1);
    if ((v1 & 2) != 0)
      goto LABEL_55;
LABEL_92:
    v42 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_56;
LABEL_93:
    v43 = 0;
    return v51 ^ v2 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43;
  }
LABEL_91:
  v41 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_92;
LABEL_55:
  v42 = *((_QWORD *)this + 2);
  if ((v1 & 0x800) == 0)
    goto LABEL_93;
LABEL_56:
  v43 = *((unsigned int *)this + 18);
  return v51 ^ v2 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v31 ^ v33 ^ v35 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43;
}

uint64_t CMMsl::DopplerSample::DopplerSample(uint64_t this)
{
  *(_QWORD *)this = off_100350AD8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350AD8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::DopplerSample::~DopplerSample(CMMsl::DopplerSample *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::DopplerSample::DopplerSample(uint64_t this, const CMMsl::DopplerSample *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100350AD8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100350AD8;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::DopplerSample::operator=(uint64_t a1, uint64_t a2, double a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;

  if (a1 != a2)
  {
    v11[0] = off_100350AD8;
    HIDWORD(v12) = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      BYTE4(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 16);
        BYTE4(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = HIDWORD(v12);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(double *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 16) = v3;
    *(_DWORD *)(a1 + 20) = v7;
    v11[1] = v8;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DopplerSample *a2, CMMsl::DopplerSample *a3)
{
  int v3;
  double result;
  int v5;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::DopplerSample::DopplerSample(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350AD8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350AD8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::DopplerSample::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v8[0] = off_100350AD8;
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::DopplerSample::formatText(CMMsl::DopplerSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "proximityState", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DopplerSample::readFrom(CMMsl::DopplerSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::DopplerSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::DopplerSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::DopplerSample::hash_value(CMMsl::DopplerSample *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::DoubleTap::DoubleTap(uint64_t this)
{
  *(_QWORD *)this = off_100350B10;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350B10;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::DoubleTap::~DoubleTap(CMMsl::DoubleTap *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::DoubleTap::DoubleTap(uint64_t this, const CMMsl::DoubleTap *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  *(_QWORD *)this = off_100350B10;
  *(_DWORD *)(this + 28) = -1;
  *(_DWORD *)(this + 48) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 48) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 10);
    v3 |= 0x80u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 40) = v5;
    v2 = *((_WORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 28) = v6;
    v2 = *((_WORD *)a2 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 16) = v7;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 20) = v8;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v9;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v10;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      return this;
LABEL_20:
    v12 = *((_DWORD *)a2 + 6);
    *(_WORD *)(this + 48) = v3 | 8;
    *(_DWORD *)(this + 24) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 48) = v3;
  *(_DWORD *)(this + 44) = v11;
  if ((*((_WORD *)a2 + 24) & 8) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::DoubleTap::operator=(uint64_t a1, const CMMsl::DoubleTap *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;

  if ((const CMMsl::DoubleTap *)a1 != a2)
  {
    CMMsl::DoubleTap::DoubleTap((uint64_t)v13, a2);
    v3 = v15;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v3;
    v14 = v4;
    v15 = v5;
    v6 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    v19 = v6;
    v7 = v17;
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v7;
    v10 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v20;
    v20 = v10;
    v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v18;
    v18 = v11;
    v16 = v9;
    v17 = v8;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::DoubleTap *a2, CMMsl::DoubleTap *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;
  uint64_t v7;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  result = *((double *)a2 + 3);
  v7 = *((_QWORD *)this + 3);
  *((double *)this + 3) = result;
  *((_QWORD *)a2 + 3) = v7;
  return result;
}

double CMMsl::DoubleTap::DoubleTap(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350B10;
  *(_DWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::DoubleTap::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  int v16;
  int v17;
  int v18;

  if (a1 != a2)
  {
    v15[0] = off_100350B10;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v6 = *(_DWORD *)(a2 + 44);
    v18 = *(_DWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    v16 = *(_DWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a2 + 16);
    v15[1] = v7;
    v15[2] = v8;
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 16) = v9;
    v12 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    LODWORD(v10) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v6;
    v17 = v10;
    v13 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 24) = v13;
    v15[3] = v12;
    v15[4] = v11;
    PB::Base::~Base((PB::Base *)v15);
  }
  return a1;
}

uint64_t CMMsl::DoubleTap::formatText(CMMsl::DoubleTap *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentMeanAngleY", *((float *)this + 4));
    v5 = *((_WORD *)this + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaMeanAngleY", *((float *)this + 5));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "doubleTapCounter", *((_DWORD *)this + 6));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "doubleTapStatus", *((_DWORD *)this + 7));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "entropyConcha", *((float *)this + 8));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "entropyTragus", *((float *)this + 9));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "tapInterval", *((float *)this + 11));
    if ((*((_WORD *)this + 24) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 10));
  v5 = *((_WORD *)this + 24);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 1) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::DoubleTap::readFrom(CMMsl::DoubleTap *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 24) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_86;
            case 2u:
              *((_WORD *)this + 24) |= 0x80u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_90:
                    v2 = v41 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_90;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_91;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_91:
              *((_DWORD *)this + 10) = v25;
              goto LABEL_102;
            case 3u:
              *((_WORD *)this + 24) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_96;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_95:
                    v2 = v45 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_95;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_96;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_96:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_102;
            case 4u:
              *((_WORD *)this + 24) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_85;
            case 5u:
              *((_WORD *)this + 24) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_85;
            case 6u:
              *((_WORD *)this + 24) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_85;
            case 7u:
              *((_WORD *)this + 24) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_55;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_85;
            case 8u:
              *((_WORD *)this + 24) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_85:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_86:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_102;
            case 9u:
              *((_WORD *)this + 24) |= 8u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_101;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_100:
                    v2 = v49 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_100;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_101;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_101:
              *((_DWORD *)this + 6) = v37;
LABEL_102:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_102;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::DoubleTap::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 2u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 3u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 5u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 6u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 7u);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 9u);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 8u);
  if ((*(_WORD *)(v3 + 48) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 9u);
  return this;
}

BOOL CMMsl::DoubleTap::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 48);
  v3 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  return v4;
}

uint64_t CMMsl::DoubleTap::hash_value(CMMsl::DoubleTap *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 1) != 0)
  {
    v2 = *((double *)this + 1);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 10);
      if ((v1 & 0x10) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_4:
    v4 = *((int *)this + 7);
    if ((v1 & 2) != 0)
      goto LABEL_5;
LABEL_26:
    v6 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_8;
LABEL_27:
    v8 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_11;
LABEL_28:
    v10 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_14;
LABEL_29:
    v12 = 0;
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_25:
  v4 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_26;
LABEL_5:
  v5 = *((float *)this + 4);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_27;
LABEL_8:
  v7 = *((float *)this + 5);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_28;
LABEL_11:
  v9 = *((float *)this + 8);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_29;
LABEL_14:
  v11 = *((float *)this + 9);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_17:
    v13 = *((float *)this + 11);
    v14 = LODWORD(v13);
    if (v13 == 0.0)
      v14 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_20;
LABEL_31:
    v15 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15;
  }
LABEL_30:
  v14 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_31;
LABEL_20:
  v15 = *((unsigned int *)this + 6);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15;
}

uint64_t CMMsl::ElevationChange::ElevationChange(uint64_t this)
{
  *(_QWORD *)this = off_100350B48;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350B48;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::ElevationChange::~ElevationChange(CMMsl::ElevationChange *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ElevationChange::ElevationChange(uint64_t this, const CMMsl::ElevationChange *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;

  *(_QWORD *)this = off_100350B48;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_WORD *)(this + 60) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 60) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x10u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 28) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v12;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      return this;
LABEL_24:
    v14 = *((_BYTE *)a2 + 56);
    *(_WORD *)(this + 60) = v3 | 0x400;
    *(_BYTE *)(this + 56) = v14;
    return this;
  }
LABEL_23:
  v13 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 24) = v13;
  if ((*((_WORD *)a2 + 30) & 0x400) != 0)
    goto LABEL_24;
  return this;
}

CMMsl *CMMsl::ElevationChange::operator=(CMMsl *a1, const CMMsl::ElevationChange *a2)
{
  CMMsl::ElevationChange *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::ElevationChange::ElevationChange((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationChange *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationChange *a2, CMMsl::ElevationChange *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  v7 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  v8 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v8;
  v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  v11 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v11;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v11) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v11;
  return result;
}

float CMMsl::ElevationChange::ElevationChange(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350B48;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::ElevationChange::operator=(CMMsl *this, uint64_t a2, CMMsl::ElevationChange *a3)
{
  void (**v5)(CMMsl::ElevationChange *__hidden);
  __int128 v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100350B48;
    v14 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v6 = *(_OWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 36);
    v12 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 28);
    v10 = *(_DWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 44);
    v7 = *(_DWORD *)(a2 + 24);
    v13 = *(_BYTE *)(a2 + 56);
    CMMsl::swap(this, (CMMsl::ElevationChange *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::ElevationChange::formatText(CMMsl::ElevationChange *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "averageFilteredPressure", *((float *)this + 6));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaStepCount", *((_DWORD *)this + 7));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "elevationAscended", *((_DWORD *)this + 8));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "elevationDescended", *((_DWORD *)this + 9));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isWorkoutElevationFusion", *((_BYTE *)this + 56));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pressureAmplitude", *((float *)this + 10));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pressureFailureState", *((_DWORD *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "pressureQuality", *((_DWORD *)this + 12));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
    if ((*((_WORD *)this + 30) & 2) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 13));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationChange::readFrom(CMMsl::ElevationChange *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  int v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_78;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_30;
            case 2u:
              *((_WORD *)this + 30) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_78;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_30:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_127;
            case 3u:
              *((_WORD *)this + 30) |= 0x10u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_132;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_131:
                    v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_131;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_132;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_132:
              *((_DWORD *)this + 8) = v25;
              goto LABEL_158;
            case 4u:
              *((_WORD *)this + 30) |= 0x20u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_136:
                    v2 = v65 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_136;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_137;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_137:
              *((_DWORD *)this + 9) = v31;
              goto LABEL_158;
            case 5u:
              *((_WORD *)this + 30) |= 0x200u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_142;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_141:
                    v2 = v69 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_141;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_142;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_142:
              *((_DWORD *)this + 13) = v37;
              goto LABEL_158;
            case 6u:
              *((_WORD *)this + 30) |= 8u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  v73 = v39++;
                  v74 = *(_BYTE *)(v40 + v73);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_146:
                    v2 = v73 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_146;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_147;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_147:
              *((_DWORD *)this + 7) = v43;
              goto LABEL_158;
            case 7u:
              *((_WORD *)this + 30) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_78;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 8u:
              *((_WORD *)this + 30) |= 0x100u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  v77 = v45++;
                  v78 = *(_BYTE *)(v46 + v77);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_151:
                    v2 = v77 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_151;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_152;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_152:
              *((_DWORD *)this + 12) = v49;
              goto LABEL_158;
            case 9u:
              *((_WORD *)this + 30) |= 0x80u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  v81 = v51++;
                  v82 = *(_BYTE *)(v52 + v81);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_156:
                    v2 = v81 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_156;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_157;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_157:
              *((_DWORD *)this + 11) = v55;
LABEL_158:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xAu:
              *((_WORD *)this + 30) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_126:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_127:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_78:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_158;
            case 0xBu:
              *((_WORD *)this + 30) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v58 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v58 = v57 != 0;
              }
              *((_BYTE *)this + 56) = v58;
              goto LABEL_158;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_158;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ElevationChange::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xAu);
  if ((*(_WORD *)(v3 + 60) & 0x400) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 0xBu);
  return this;
}

BOOL CMMsl::ElevationChange::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x400) == 0;
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
    return (*(_WORD *)(a2 + 60) & 0x400) != 0 && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  return v4;
}

uint64_t CMMsl::ElevationChange::hash_value(CMMsl::ElevationChange *this)
{
  __int16 v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 2) == 0)
  {
    v2 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_22:
    v3 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_6;
    goto LABEL_23;
  }
  v2 = *((double *)this + 2);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_22;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x10) != 0)
  {
LABEL_6:
    v4 = *((unsigned int *)this + 8);
    if ((v1 & 0x20) != 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_7:
    v5 = *((unsigned int *)this + 9);
    if ((*((_WORD *)this + 30) & 0x200) != 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  v5 = 0;
  if ((*((_WORD *)this + 30) & 0x200) != 0)
  {
LABEL_8:
    v6 = *((unsigned int *)this + 13);
    if ((v1 & 8) != 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  v6 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_9:
    v7 = *((int *)this + 7);
    if ((v1 & 0x40) != 0)
      goto LABEL_10;
LABEL_27:
    v9 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_26:
  v7 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_27;
LABEL_10:
  v8 = *((float *)this + 10);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_WORD *)this + 30) & 0x100) != 0)
  {
LABEL_13:
    v10 = *((int *)this + 12);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v11 = *((int *)this + 11);
    if ((v1 & 4) != 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  v11 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_15:
    v12 = *((float *)this + 6);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_18;
LABEL_31:
    v14 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v13 ^ v14;
  }
LABEL_30:
  v13 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0)
    goto LABEL_31;
LABEL_18:
  v14 = *((unsigned __int8 *)this + 56);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v13 ^ v14;
}

uint64_t CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t this)
{
  *(_QWORD *)this = off_100350B80;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350B80;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void CMMsl::ElevationGradeEstimator::~ElevationGradeEstimator(CMMsl::ElevationGradeEstimator *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t this, const CMMsl::ElevationGradeEstimator *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;

  *(_QWORD *)this = off_100350B80;
  *(_DWORD *)(this + 92) = 0;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v3 = 8;
    *(_DWORD *)(this + 92) = 8;
    *(_QWORD *)(this + 32) = v4;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_DWORD *)(this + 92) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_DWORD *)(this + 92) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 76) = v7;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  v8 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 48) = v8;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  v9 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v9;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  v10 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 60) = v10;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  v11 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 56) = v11;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  v12 = *((_BYTE *)a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 92) = v3;
  *(_BYTE *)(this + 88) = v12;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  v13 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 64) = v13;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v14 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 40) = v14;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 52) = v15;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  v16 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 80) = v16;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v17 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 92) = v3;
  *(_QWORD *)(this + 8) = v17;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v18 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 68) = v18;
  v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      return this;
LABEL_36:
    v20 = *((_BYTE *)a2 + 89);
    *(_DWORD *)(this + 92) = v3 | 0x10000;
    *(_BYTE *)(this + 89) = v20;
    return this;
  }
LABEL_35:
  v19 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 72) = v19;
  if ((*((_DWORD *)a2 + 23) & 0x10000) != 0)
    goto LABEL_36;
  return this;
}

CMMsl *CMMsl::ElevationGradeEstimator::operator=(CMMsl *a1, const CMMsl::ElevationGradeEstimator *a2)
{
  CMMsl::ElevationGradeEstimator *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::ElevationGradeEstimator::ElevationGradeEstimator((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ElevationGradeEstimator *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationGradeEstimator *a2, CMMsl::ElevationGradeEstimator *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_BYTE *)a2 + 88) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  LOBYTE(v6) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v6;
  return result;
}

float CMMsl::ElevationGradeEstimator::ElevationGradeEstimator(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350B80;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return result;
}

CMMsl *CMMsl::ElevationGradeEstimator::operator=(CMMsl *this, uint64_t a2, CMMsl::ElevationGradeEstimator *a3)
{
  __int128 v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;
  int v18;

  if (this != (CMMsl *)a2)
  {
    v6[0] = off_100350B80;
    v18 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(a2 + 92) = 0;
    v14 = *(_DWORD *)(a2 + 76);
    v11 = *(_DWORD *)(a2 + 60);
    v10 = *(_DWORD *)(a2 + 56);
    v16 = *(_BYTE *)(a2 + 88);
    v4 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = v4;
    v9 = *(_QWORD *)(a2 + 48);
    v15 = *(_QWORD *)(a2 + 80);
    v6[1] = *(_QWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 64);
    v13 = *(_DWORD *)(a2 + 72);
    v17 = *(_BYTE *)(a2 + 89);
    CMMsl::swap(this, (CMMsl::ElevationGradeEstimator *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::ElevationGradeEstimator::formatText(CMMsl::ElevationGradeEstimator *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "altitudeDelta", *((float *)this + 12));
    v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "altitudeDeltaStreaming", *((float *)this + 13));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "deltaTime", *((float *)this + 14));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "didEstimate", *((_BYTE *)this + 88));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "downhillStartTime", *((double *)this + 1));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "elevationAscended", *((_QWORD *)this + 2));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "elevationDescended", *((_QWORD *)this + 3));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 15));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "heightRef", *((float *)this + 16));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isWorkoutElevationFusion", *((_BYTE *)this + 89));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "predictionError", *((float *)this + 17));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "predictionIntercept", *((float *)this + 18));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 19));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(a2, "timeRef", *((double *)this + 5));
    if ((*((_DWORD *)this + 23) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "timeDeltaStreaming", *((float *)this + 20));
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x4000) != 0)
LABEL_18:
    PB::TextFormatter::format(a2, "verticalSpeed", *((float *)this + 21));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationGradeEstimator::readFrom(CMMsl::ElevationGradeEstimator *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 23) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_81;
            case 2u:
              *((_DWORD *)this + 23) |= 2u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_129;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_128:
                    v2 = v51 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_128;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_129;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_129:
              *((_QWORD *)this + 2) = v25;
              goto LABEL_145;
            case 3u:
              *((_DWORD *)this + 23) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_134;
                  }
                  v55 = v27++;
                  v56 = *(_BYTE *)(v28 + v55);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_133:
                    v2 = v55 + 1;
                    goto LABEL_134;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_133;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_134;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_134:
              *((_QWORD *)this + 3) = v31;
              goto LABEL_145;
            case 4u:
              *((_DWORD *)this + 23) |= 0x1000u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_139;
                  }
                  v59 = v33++;
                  v60 = *(_BYTE *)(v34 + v59);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_138:
                    v2 = v59 + 1;
                    goto LABEL_139;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_138;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_139;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_139:
              *((_DWORD *)this + 19) = v37;
              goto LABEL_145;
            case 5u:
              *((_DWORD *)this + 23) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_123;
            case 6u:
              *((_DWORD *)this + 23) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_123;
            case 7u:
              *((_DWORD *)this + 23) |= 0x100u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_144;
                  }
                  v63 = v39++;
                  v64 = *(_BYTE *)(v40 + v63);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_143:
                    v2 = v63 + 1;
                    goto LABEL_144;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_143;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_144;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_144:
              *((_DWORD *)this + 15) = v43;
LABEL_145:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *((_DWORD *)this + 23) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_123;
            case 9u:
              *((_DWORD *)this + 23) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v46 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v46 = v45 != 0;
              }
              *((_BYTE *)this + 88) = v46;
              goto LABEL_145;
            case 0xAu:
              *((_DWORD *)this + 23) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_123;
            case 0xBu:
              *((_DWORD *)this + 23) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_81;
            case 0xCu:
              *((_DWORD *)this + 23) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_123;
            case 0xDu:
              *((_DWORD *)this + 23) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_123;
            case 0xEu:
              *((_DWORD *)this + 23) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_81:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_124;
            case 0xFu:
              *((_DWORD *)this + 23) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_87;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_123;
            case 0x10u:
              *((_DWORD *)this + 23) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_123:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_124:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_87:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_145;
            case 0x11u:
              *((_DWORD *)this + 23) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v48 = v47 != 0;
              }
              *((_BYTE *)this + 89) = v48;
              goto LABEL_145;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_145;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ElevationGradeEstimator::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 92);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 4u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 5u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 6u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 7u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 8u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 88), 9u);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xAu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xBu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xDu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xEu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xFu);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 89), 0x11u);
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x10u);
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 89), 0x11u);
  return this;
}

BOOL CMMsl::ElevationGradeEstimator::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 92);
  v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10000) == 0;
  if ((v2 & 0x10000) != 0)
    return (v3 & 0x10000) != 0 && *(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89);
  return v4;
}

uint64_t CMMsl::ElevationGradeEstimator::hash_value(CMMsl::ElevationGradeEstimator *this)
{
  int v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  double v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  double v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *((_DWORD *)this + 23);
  if ((v1 & 8) != 0)
  {
    v2 = *((double *)this + 4);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 2) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 2);
      if ((v1 & 4) != 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 3);
    if ((v1 & 0x1000) != 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  v4 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 19);
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_45:
    v7 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_9;
LABEL_46:
    v9 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_44:
  v5 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_45;
LABEL_6:
  v6 = *((float *)this + 12);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_46;
LABEL_9:
  v8 = *((float *)this + 21);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_12:
    v10 = *((int *)this + 15);
    if ((v1 & 0x80) != 0)
      goto LABEL_13;
LABEL_48:
    v12 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_47:
  v10 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_48;
LABEL_13:
  v11 = *((float *)this + 14);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_16:
    v13 = *((unsigned __int8 *)this + 88);
    if ((v1 & 0x200) != 0)
      goto LABEL_17;
LABEL_50:
    v15 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_20;
LABEL_51:
    v16 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_23;
LABEL_52:
    v18 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_26;
LABEL_53:
    v20 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_29;
LABEL_54:
    v21 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_32;
LABEL_55:
    v23 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_35;
    goto LABEL_56;
  }
LABEL_49:
  v13 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_50;
LABEL_17:
  v14 = *((float *)this + 16);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_51;
LABEL_20:
  v16 = *((double *)this + 5);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_52;
LABEL_23:
  v17 = *((float *)this + 13);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_53;
LABEL_26:
  v19 = *((float *)this + 20);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_54;
LABEL_29:
  v21 = *((double *)this + 1);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_55;
LABEL_32:
  v22 = *((float *)this + 17);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_35:
    v24 = *((float *)this + 18);
    v25 = LODWORD(v24);
    if (v24 == 0.0)
      v25 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_38;
LABEL_57:
    v26 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v10 ^ v12 ^ v13 ^ v15 ^ *(_QWORD *)&v16 ^ v18 ^ v20 ^ *(_QWORD *)&v21 ^ v23 ^ v25 ^ v26;
  }
LABEL_56:
  v25 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_57;
LABEL_38:
  v26 = *((unsigned __int8 *)this + 89);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v10 ^ v12 ^ v13 ^ v15 ^ *(_QWORD *)&v16 ^ v18 ^ v20 ^ *(_QWORD *)&v21 ^ v23 ^ v25 ^ v26;
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t this)
{
  *(_QWORD *)this = off_100350BB8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350BB8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::ElevationThreshold::~ElevationThreshold(CMMsl::ElevationThreshold *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100350BB8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

{
  CMMsl::ElevationThreshold::~ElevationThreshold(this);
  operator delete();
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t this, const CMMsl::ElevationThreshold *a2)
{
  uint64_t v2;
  char v3;
  int v4;
  char v5;

  *(_QWORD *)this = off_100350BB8;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 16) = v2;
  }
  if (*((_QWORD *)a2 + 1))
    operator new();
  v3 = *((_BYTE *)a2 + 32);
  if ((v3 & 2) != 0)
  {
    v4 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 32) |= 2u;
    *(_DWORD *)(this + 24) = v4;
    v3 = *((_BYTE *)a2 + 32);
  }
  if ((v3 & 4) != 0)
  {
    v5 = *((_BYTE *)a2 + 28);
    *(_BYTE *)(this + 32) |= 4u;
    *(_BYTE *)(this + 28) = v5;
  }
  return this;
}

uint64_t CMMsl::ElevationThreshold::operator=(uint64_t a1, const CMMsl::ElevationThreshold *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;

  if ((const CMMsl::ElevationThreshold *)a1 != a2)
  {
    CMMsl::ElevationThreshold::ElevationThreshold((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v4;
    LOBYTE(v5) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v11;
    v11 = v5;
    CMMsl::ElevationThreshold::~ElevationThreshold((CMMsl::ElevationThreshold *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ElevationThreshold *a2, CMMsl::ElevationThreshold *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LOBYTE(v5) = *((_BYTE *)this + 28);
  *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = v5;
  return result;
}

uint64_t CMMsl::ElevationThreshold::ElevationThreshold(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_100350BB8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *v4;
  *v4 = v5;
  if (v6)
    sub_100011294((uint64_t)v4, v6);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t CMMsl::ElevationThreshold::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  int v12;

  if (a1 != a2)
  {
    CMMsl::ElevationThreshold::ElevationThreshold((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v12;
    v12 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v4;
    LOBYTE(v5) = *(_BYTE *)(a1 + 28);
    *(_BYTE *)(a1 + 28) = v11;
    v11 = v5;
    CMMsl::ElevationThreshold::~ElevationThreshold((CMMsl::ElevationThreshold *)v7);
  }
  return a1;
}

uint64_t CMMsl::ElevationThreshold::formatText(CMMsl::ElevationThreshold *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 32) & 4) != 0)
    PB::TextFormatter::format(a2, "active", *((_BYTE *)this + 28));
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "clientId");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "threshold", *((float *)this + 6));
    v5 = *((_BYTE *)this + 32);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ElevationThreshold::readFrom(CMMsl::ElevationThreshold *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_30;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v20);
              v21 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_36;
            case 2u:
              operator new();
            case 3u:
              *((_BYTE *)this + 32) |= 2u;
              v23 = *((_QWORD *)a2 + 1);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v23);
                v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_36:
                *((_QWORD *)a2 + 1) = v21;
              }
              else
              {
LABEL_30:
                *((_BYTE *)a2 + 24) = 1;
              }
LABEL_37:
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            case 4u:
              *((_BYTE *)this + 32) |= 4u;
              v24 = *((_QWORD *)a2 + 1);
              if (v24 >= *((_QWORD *)a2 + 2))
              {
                v27 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = v24 + 1;
                v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v24);
                *((_QWORD *)a2 + 1) = v25;
                v27 = v26 != 0;
              }
              *((_BYTE *)this + 28) = v27;
              goto LABEL_37;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              goto LABEL_37;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ElevationThreshold::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = this;
  if ((*(_BYTE *)(this + 32) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    this = PB::Writer::write(a2, v4, 2);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
    v5 = *(_BYTE *)(v3 + 32);
  }
  if ((v5 & 4) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 28), 4u);
  return this;
}

BOOL CMMsl::ElevationThreshold::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_BYTE *)(a2 + 32);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 8);
  v7 = *(unsigned __int8 ***)(a2 + 8);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 8);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  result = (v5 & 4) == 0;
  if ((v4 & 4) == 0)
    return result;
  return (v5 & 4) != 0 && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28);
}

unint64_t CMMsl::ElevationThreshold::hash_value(CMMsl::ElevationThreshold *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  char v10;

  v2 = *((_BYTE *)this + 32);
  if ((v2 & 1) != 0)
  {
    if (*((double *)this + 2) == 0.0)
      v3 = 0;
    else
      v3 = *((_QWORD *)this + 2);
  }
  else
  {
    v3 = 0;
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = sub_1000112DC((uint64_t)&v10, v4);
    v2 = *((_BYTE *)this + 32);
    if ((v2 & 2) == 0)
      goto LABEL_8;
LABEL_11:
    v8 = *((float *)this + 6);
    v6 = LODWORD(v8);
    if (v8 == 0.0)
      v6 = 0;
    if ((v2 & 4) != 0)
      goto LABEL_9;
LABEL_14:
    v7 = 0;
    return v5 ^ v3 ^ v6 ^ v7;
  }
  v5 = 0;
  if ((v2 & 2) != 0)
    goto LABEL_11;
LABEL_8:
  v6 = 0;
  if ((v2 & 4) == 0)
    goto LABEL_14;
LABEL_9:
  v7 = *((unsigned __int8 *)this + 28);
  return v5 ^ v3 ^ v6 ^ v7;
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t this)
{
  *(_QWORD *)this = off_100350BF0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350BF0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::EmergencyState::~EmergencyState(CMMsl::EmergencyState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t this, const CMMsl::EmergencyState *a2)
{
  int v2;

  *(_QWORD *)this = off_100350BF0;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = off_100350BF0;
  *(_DWORD *)(this + 12) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::EmergencyState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100350BF0;
    v3 = *(_BYTE *)(a2 + 12) & 1;
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_100350BF0;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::EmergencyState *a2, CMMsl::EmergencyState *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::EmergencyState::EmergencyState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100350BF0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100350BF0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::EmergencyState::formatText(CMMsl::EmergencyState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::EmergencyState::readFrom(CMMsl::EmergencyState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::EmergencyState::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::EmergencyState::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::EmergencyState::hash_value(CMMsl::EmergencyState *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((unsigned int *)this + 2);
  else
    return 0;
}

uint64_t CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t this)
{
  *(_QWORD *)this = off_100350C28;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350C28;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

void CMMsl::EnhancedDeviceMotion::~EnhancedDeviceMotion(CMMsl::EnhancedDeviceMotion *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t this, const CMMsl::EnhancedDeviceMotion *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  char v20;
  int v21;

  *(_QWORD *)this = off_100350C28;
  *(_DWORD *)(this + 96) = 0;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_QWORD *)a2 + 5);
    v3 = 16;
    *(_DWORD *)(this + 96) = 16;
    *(_QWORD *)(this + 40) = v4;
    v2 = *((_DWORD *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_DWORD *)(this + 96) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_DWORD *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_DWORD *)(this + 96) = v3;
    *(_QWORD *)(this + 24) = v6;
    v2 = *((_DWORD *)a2 + 24);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 96) = v3;
  *(_QWORD *)(this + 32) = v7;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 96) = v3;
  *(_QWORD *)(this + 8) = v8;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 76) = v9;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 80) = v10;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 84) = v11;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 64) = v12;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 68) = v13;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 72) = v14;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 52) = v15;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 56) = v16;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x100) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 60) = v17;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 96) = v3;
  *(_DWORD *)(this + 48) = v18;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *((_BYTE *)a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 96) = v3;
  *(_BYTE *)(this + 92) = v19;
  v2 = *((_DWORD *)a2 + 24);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      return this;
LABEL_38:
    v21 = *((_DWORD *)a2 + 22);
    *(_DWORD *)(this + 96) = v3 | 0x8000;
    *(_DWORD *)(this + 88) = v21;
    return this;
  }
LABEL_37:
  v20 = *((_BYTE *)a2 + 93);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 96) = v3;
  *(_BYTE *)(this + 93) = v20;
  if ((*((_DWORD *)a2 + 24) & 0x8000) != 0)
    goto LABEL_38;
  return this;
}

CMMsl *CMMsl::EnhancedDeviceMotion::operator=(CMMsl *a1, const CMMsl::EnhancedDeviceMotion *a2)
{
  CMMsl::EnhancedDeviceMotion *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::EnhancedDeviceMotion *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::EnhancedDeviceMotion *a2, CMMsl::EnhancedDeviceMotion *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;
  int v10;
  int v11;

  v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v8;
  LODWORD(v8) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  LODWORD(v8) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  LODWORD(v8) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v8;
  LODWORD(v8) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v8;
  LODWORD(v8) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v8;
  result = *((float *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((float *)a2 + 15) = result;
  v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 93);
  *((_BYTE *)this + 93) = *((_BYTE *)a2 + 93);
  *((_BYTE *)a2 + 93) = v10;
  v11 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v11;
  return result;
}

float CMMsl::EnhancedDeviceMotion::EnhancedDeviceMotion(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350C28;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  result = *(float *)(a2 + 60);
  *(float *)(a1 + 60) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::EnhancedDeviceMotion::operator=(CMMsl *this, uint64_t a2, CMMsl::EnhancedDeviceMotion *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::EnhancedDeviceMotion *__hidden);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;
  char v15;
  char v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v6 = off_100350C28;
    v17 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a2 + 96) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    v4 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    v13 = *(_DWORD *)(a2 + 84);
    v12 = *(_OWORD *)(a2 + 68);
    v11 = *(_OWORD *)(a2 + 52);
    v10 = *(_DWORD *)(a2 + 48);
    v15 = *(_BYTE *)(a2 + 92);
    v16 = *(_BYTE *)(a2 + 93);
    v14 = *(_DWORD *)(a2 + 88);
    CMMsl::swap(this, (CMMsl::EnhancedDeviceMotion *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::EnhancedDeviceMotion::formatText(CMMsl::EnhancedDeviceMotion *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "doingBiasEstimation", *((_BYTE *)this + 92));
    v5 = *((_DWORD *)this + 24);
    if ((v5 & 0x20000) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "doingYawCorrection", *((_BYTE *)this + 93));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "magneticFieldCalibrationLevel", *((_DWORD *)this + 12));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 13));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 14));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 15));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 1));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 2));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 3));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 4));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 16));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 17));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 18));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "userAccelerationX", *((float *)this + 19));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(a2, "userAccelerationZ", *((float *)this + 21));
    if ((*((_DWORD *)this + 24) & 0x8000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "userAccelerationY", *((float *)this + 20));
  v5 = *((_DWORD *)this + 24);
  if ((v5 & 0x4000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x8000) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "variant", *((_DWORD *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::EnhancedDeviceMotion::readFrom(CMMsl::EnhancedDeviceMotion *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 24) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 2u:
              *((_DWORD *)this + 24) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 3u:
              *((_DWORD *)this + 24) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 4u:
              *((_DWORD *)this + 24) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_39;
            case 5u:
              *((_DWORD *)this + 24) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_39:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_105;
            case 6u:
              *((_DWORD *)this + 24) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 7u:
              *((_DWORD *)this + 24) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 8u:
              *((_DWORD *)this + 24) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 9u:
              *((_DWORD *)this + 24) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 0xAu:
              *((_DWORD *)this + 24) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 0xBu:
              *((_DWORD *)this + 24) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 0xCu:
              *((_DWORD *)this + 24) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 0xDu:
              *((_DWORD *)this + 24) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_66;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_104;
            case 0xEu:
              *((_DWORD *)this + 24) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_104:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_105:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_116;
            case 0xFu:
              *((_DWORD *)this + 24) |= 0x20u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_110;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_109:
                    v2 = v39 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_109;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_110;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_110:
              *((_DWORD *)this + 12) = v25;
              goto LABEL_116;
            case 0x10u:
              *((_DWORD *)this + 24) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 92) = v28;
              goto LABEL_116;
            case 0x11u:
              *((_DWORD *)this + 24) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 93) = v30;
              goto LABEL_116;
            case 0x12u:
              *((_DWORD *)this + 24) |= 0x8000u;
              v31 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v32 = *(_QWORD *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_115;
                  }
                  v43 = v31++;
                  v44 = *(_BYTE *)(v32 + v43);
                  *((_QWORD *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_114:
                    v2 = v43 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v35) = 0;
                goto LABEL_114;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)a2 + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_115;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_115:
              *((_DWORD *)this + 22) = v35;
LABEL_116:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_116;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::EnhancedDeviceMotion::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 96);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    v4 = *(_DWORD *)(v3 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 6u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 7u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 8u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 9u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xAu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xBu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xDu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xEu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0xFu);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 92), 0x10u);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x12u);
  }
LABEL_36:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 93), 0x11u);
  if ((*(_DWORD *)(v3 + 96) & 0x8000) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x12u);
  return this;
}

BOOL CMMsl::EnhancedDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 96);
  v3 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 96) & 0x8000) == 0;
  if ((v2 & 0x8000) != 0)
    return (v3 & 0x8000) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
  return v4;
}

uint64_t CMMsl::EnhancedDeviceMotion::hash_value(CMMsl::EnhancedDeviceMotion *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *((_DWORD *)this + 24);
  if ((v1 & 0x10) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_49:
    v3 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_50:
    v4 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_51:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_52:
    v6 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_15;
LABEL_53:
    v8 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_18;
LABEL_54:
    v10 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_21;
LABEL_55:
    v12 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_24;
LABEL_56:
    v14 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_27;
LABEL_57:
    v16 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_30;
LABEL_58:
    v18 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_33;
LABEL_59:
    v20 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_36;
LABEL_60:
    v22 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_39;
LABEL_61:
    v24 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_42;
    goto LABEL_62;
  }
  v2 = *((double *)this + 5);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_49;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_50;
LABEL_6:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_51;
LABEL_9:
  v5 = *((double *)this + 4);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_52;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_53;
LABEL_15:
  v7 = *((float *)this + 19);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_54;
LABEL_18:
  v9 = *((float *)this + 20);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_55;
LABEL_21:
  v11 = *((float *)this + 21);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_56;
LABEL_24:
  v13 = *((float *)this + 16);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_57;
LABEL_27:
  v15 = *((float *)this + 17);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_58;
LABEL_30:
  v17 = *((float *)this + 18);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_59;
LABEL_33:
  v19 = *((float *)this + 13);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_60;
LABEL_36:
  v21 = *((float *)this + 14);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_61;
LABEL_39:
  v23 = *((float *)this + 15);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_42:
    v25 = *((int *)this + 12);
    if ((v1 & 0x10000) != 0)
      goto LABEL_43;
    goto LABEL_63;
  }
LABEL_62:
  v25 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_43:
    v26 = *((unsigned __int8 *)this + 92);
    if ((v1 & 0x20000) != 0)
      goto LABEL_44;
LABEL_64:
    v27 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_45;
LABEL_65:
    v28 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28;
  }
LABEL_63:
  v26 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_64;
LABEL_44:
  v27 = *((unsigned __int8 *)this + 93);
  if ((v1 & 0x8000) == 0)
    goto LABEL_65;
LABEL_45:
  v28 = *((unsigned int *)this + 22);
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(uint64_t this)
{
  *(_QWORD *)this = off_100350C60;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350C60;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::FaceBlendShapeCoefficients::~FaceBlendShapeCoefficients(CMMsl::FaceBlendShapeCoefficients *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(CMMsl::FaceBlendShapeCoefficients *this, const CMMsl::FaceBlendShapeCoefficients *a2)
{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = off_100350C60;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  int v3;
  float result;

  *(_QWORD *)this = off_100350C60;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((_DWORD *)this + 2) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

float *CMMsl::FaceBlendShapeCoefficients::operator=(float *a1, uint64_t a2, float a3)
{
  char v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  void (**v11)(CMMsl::FaceBlendShapeCoefficients *__hidden);
  int v12;
  int v13;
  int v14;

  if (a1 != (float *)a2)
  {
    v11 = off_100350C60;
    v14 = 0;
    v4 = *(_BYTE *)(a2 + 16);
    if ((v4 & 1) != 0)
    {
      v5 = *(_DWORD *)(a2 + 8);
      LOBYTE(v14) = 1;
      v6 = 3;
      if ((v4 & 2) != 0)
      {
LABEL_6:
        a3 = *(float *)(a2 + 12);
        LOBYTE(v14) = v6;
      }
    }
    else
    {
      v5 = 0;
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v14;
    v14 = v7;
    v8 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v5;
    v12 = v8;
    v9 = *((_DWORD *)a1 + 3);
    a1[3] = a3;
    v13 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FaceBlendShapeCoefficients *a2, CMMsl::FaceBlendShapeCoefficients *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::FaceBlendShapeCoefficients::FaceBlendShapeCoefficients(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350C60;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100350C60;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

_DWORD *CMMsl::FaceBlendShapeCoefficients::operator=(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(CMMsl::FaceBlendShapeCoefficients *__hidden);
  int v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10 = off_100350C60;
    v3 = a2[4];
    a2[4] = 0;
    v4 = a2[2];
    v5 = a2[3];
    v6 = a1[4];
    a1[4] = v3;
    v13 = v6;
    v7 = a1[2];
    a1[2] = v4;
    v11 = v7;
    v8 = a1[3];
    a1[3] = v5;
    v12 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::formatText(CMMsl::FaceBlendShapeCoefficients *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "name", *((_DWORD *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "value", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceBlendShapeCoefficients::readFrom(CMMsl::FaceBlendShapeCoefficients *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  return this;
}

BOOL CMMsl::FaceBlendShapeCoefficients::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t CMMsl::FaceBlendShapeCoefficients::hash_value(CMMsl::FaceBlendShapeCoefficients *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 16) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = *((int *)this + 2);
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t this)
{
  *(_QWORD *)this = off_100350C98;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350C98;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::FaceBlendShapeCoefficientsSample::~FaceBlendShapeCoefficientsSample(CMMsl::FaceBlendShapeCoefficientsSample *this)
{
  void **v2;

  *(_QWORD *)this = off_100350C98;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100350C98;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100350C98;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t this, const CMMsl::FaceBlendShapeCoefficientsSample *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100350C98;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_1000A9804();
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    v3 = *((_QWORD *)a2 + 5);
    *(_BYTE *)(this + 48) |= 2u;
    *(_QWORD *)(this + 40) = v3;
    v2 = *((_BYTE *)a2 + 48);
  }
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    *(_BYTE *)(this + 48) |= 1u;
    *(_QWORD *)(this + 32) = v4;
  }
  return this;
}

void sub_1000A9804()
{
  operator new();
}

void sub_1000A997C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::operator=(uint64_t a1, const CMMsl::FaceBlendShapeCoefficientsSample *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  void (**v8)(CMMsl::FaceBlendShapeCoefficientsSample *__hidden);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  void **v13;

  if ((const CMMsl::FaceBlendShapeCoefficientsSample *)a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    v8 = off_100350C98;
    v13 = (void **)&v9;
    sub_1002394A8(&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceBlendShapeCoefficientsSample *a2, CMMsl::FaceBlendShapeCoefficientsSample *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = off_100350C98;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  sub_100239524((_QWORD *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  void (**v8)(CMMsl::FaceBlendShapeCoefficientsSample *__hidden);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  void **v13;

  if (a1 != a2)
  {
    CMMsl::FaceBlendShapeCoefficientsSample::FaceBlendShapeCoefficientsSample((uint64_t)&v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    v11 = v6;
    v8 = off_100350C98;
    v13 = (void **)&v9;
    sub_1002394A8(&v13);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::formatText(CMMsl::FaceBlendShapeCoefficientsSample *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "blendShapeCoefficients");
  }
  v8 = *((_BYTE *)this + 48);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 4));
    v8 = *((_BYTE *)this + 48);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::readFrom(CMMsl::FaceBlendShapeCoefficientsSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 48) |= 2u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v22);
LABEL_34:
        *((_QWORD *)a2 + 1) += 8;
        goto LABEL_35;
      }
      if ((_DWORD)v20 == 1)
        sub_1000A9EB0();
      result = PB::Reader::skip(a2, v20, v11 & 7, 0);
      if (!(_DWORD)result)
        return result;
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 48) |= 1u;
    v21 = *((_QWORD *)a2 + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
    {
LABEL_30:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_35;
    }
    *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_1000A9EB0()
{
  operator new();
}

void sub_1000A9FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 8);
  v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  return this;
}

BOOL CMMsl::FaceBlendShapeCoefficientsSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_1000AA110((uint64_t *)(a1 + 8), a2 + 8);
  if (result)
  {
    if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    result = (*(_BYTE *)(a2 + 48) & 1) == 0;
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
      return result;
    return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return result;
}

BOOL sub_1000AA110(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::FaceBlendShapeCoefficients::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::FaceBlendShapeCoefficientsSample::hash_value(uint64_t **this)
{
  uint64_t v2;
  double v3;
  double v4;
  char v6;

  v2 = sub_1000AA1F4((uint64_t)&v6, this + 1);
  if (((_BYTE)this[6] & 2) != 0)
  {
    v3 = *((double *)this + 5);
    if (v3 == 0.0)
      v3 = 0.0;
    if (((_BYTE)this[6] & 1) != 0)
      goto LABEL_3;
LABEL_9:
    v4 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4;
  }
  v3 = 0.0;
  if (((_BYTE)this[6] & 1) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4;
}

uint64_t sub_1000AA1F4(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  float v10;
  BOOL v11;
  uint64_t v12;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  result = 0;
  do
  {
    v6 = *v2++;
    v5 = v6;
    v7 = *(_BYTE *)(v6 + 16);
    v8 = *(int *)(v6 + 8);
    if ((v7 & 1) == 0)
      v8 = 0;
    v9 = v7 & 2;
    v10 = *(float *)(v5 + 12);
    v11 = v10 == 0.0 || v9 == 0;
    v12 = LODWORD(v10);
    if (v11)
      v12 = 0;
    result ^= v8 ^ v12;
  }
  while (v2 != v3);
  return result;
}

uint64_t CMMsl::FaceCovered::FaceCovered(uint64_t this)
{
  *(_QWORD *)this = off_100350CD0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350CD0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::FaceCovered::~FaceCovered(CMMsl::FaceCovered *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FaceCovered::FaceCovered(uint64_t this, const CMMsl::FaceCovered *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_100350CD0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_100350CD0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::FaceCovered::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = off_100350CD0;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FaceCovered *a2, CMMsl::FaceCovered *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::FaceCovered::FaceCovered(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350CD0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100350CD0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::FaceCovered::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_100350CD0;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::FaceCovered::formatText(CMMsl::FaceCovered *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "isCovered", *((_BYTE *)this + 16));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FaceCovered::readFrom(CMMsl::FaceCovered *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceCovered::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::FaceCovered::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::FaceCovered::hash_value(CMMsl::FaceCovered *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

double CMMsl::FaceDownDetection::FaceDownDetection(CMMsl::FaceDownDetection *this)
{
  double result;

  *(_QWORD *)this = off_100350D08;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100350D08;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::FaceDownDetection::~FaceDownDetection(CMMsl::FaceDownDetection *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100350D08;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::FaceDownDetection::~FaceDownDetection(this);
  operator delete();
}

CMMsl::FaceDownDetection *CMMsl::FaceDownDetection::FaceDownDetection(CMMsl::FaceDownDetection *this, const CMMsl::FaceDownDetection *a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  int v7;
  int v9;
  int v10;
  char v11;
  char v12;
  int v13;
  int v14;

  *(_QWORD *)this = off_100350D08;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 88) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 88) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 4) != 0)
  {
    v9 = *((_DWORD *)a2 + 17);
    *((_BYTE *)this + 88) |= 4u;
    *((_DWORD *)this + 17) = v9;
    v6 = *((_BYTE *)a2 + 88);
    if ((v6 & 8) == 0)
    {
LABEL_7:
      if ((v6 & 0x40) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*((_BYTE *)a2 + 88) & 8) == 0)
  {
    goto LABEL_7;
  }
  v10 = *((_DWORD *)a2 + 18);
  *((_BYTE *)this + 88) |= 8u;
  *((_DWORD *)this + 18) = v10;
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v11 = *((_BYTE *)a2 + 84);
  *((_BYTE *)this + 88) |= 0x40u;
  *((_BYTE *)this + 84) = v11;
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v12 = *((_BYTE *)a2 + 85);
  *((_BYTE *)this + 88) |= 0x80u;
  *((_BYTE *)this + 85) = v12;
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 0x10) == 0)
      goto LABEL_11;
LABEL_19:
    v14 = *((_DWORD *)a2 + 19);
    *((_BYTE *)this + 88) |= 0x10u;
    *((_DWORD *)this + 19) = v14;
    if ((*((_BYTE *)a2 + 88) & 0x20) == 0)
      return this;
    goto LABEL_12;
  }
LABEL_18:
  v13 = *((_DWORD *)a2 + 16);
  *((_BYTE *)this + 88) |= 2u;
  *((_DWORD *)this + 16) = v13;
  v6 = *((_BYTE *)a2 + 88);
  if ((v6 & 0x10) != 0)
    goto LABEL_19;
LABEL_11:
  if ((v6 & 0x20) != 0)
  {
LABEL_12:
    v7 = *((_DWORD *)a2 + 20);
    *((_BYTE *)this + 88) |= 0x20u;
    *((_DWORD *)this + 20) = v7;
  }
  return this;
}

CMMsl *CMMsl::FaceDownDetection::operator=(CMMsl *a1, const CMMsl::FaceDownDetection *a2)
{
  CMMsl::FaceDownDetection *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::FaceDownDetection::FaceDownDetection((CMMsl::FaceDownDetection *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FaceDownDetection *)v5, v3);
    CMMsl::FaceDownDetection::~FaceDownDetection((CMMsl::FaceDownDetection *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FaceDownDetection *a2, CMMsl::FaceDownDetection *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LOBYTE(v10) = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 85);
  *((_BYTE *)this + 85) = *((_BYTE *)a2 + 85);
  *((_BYTE *)a2 + 85) = v10;
  LODWORD(v10) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v10;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  return result;
}

uint64_t CMMsl::FaceDownDetection::FaceDownDetection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100350D08;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::FaceDownDetection::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FaceDownDetection *v3;
  _BYTE v5[96];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FaceDownDetection::FaceDownDetection((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FaceDownDetection *)v5, v3);
    CMMsl::FaceDownDetection::~FaceDownDetection((CMMsl::FaceDownDetection *)v5);
  }
  return a1;
}

uint64_t CMMsl::FaceDownDetection::formatText(CMMsl::FaceDownDetection *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 4);
  v6 = (float *)*((_QWORD *)this + 5);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accel", v7);
  }
  v8 = (float *)*((_QWORD *)this + 1);
  v9 = (float *)*((_QWORD *)this + 2);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "accelFiltered", v10);
  }
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "faceDownState", *((_DWORD *)this + 16));
    v11 = *((_BYTE *)this + 88);
    if ((v11 & 4) == 0)
    {
LABEL_7:
      if ((v11 & 8) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
  }
  else if ((*((_BYTE *)this + 88) & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "gravityAngle", *((float *)this + 17));
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 8) == 0)
  {
LABEL_8:
    if ((v11 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "gravityAngleVar", *((float *)this + 18));
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 0x40) == 0)
  {
LABEL_9:
    if ((v11 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isFaceDown", *((_BYTE *)this + 84));
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 0x10) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pocketProbability", *((float *)this + 19));
  v11 = *((_BYTE *)this + 88);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x80) == 0)
      goto LABEL_12;
LABEL_21:
    PB::TextFormatter::format(a2, "shouldSuppress", *((_BYTE *)this + 85));
    if ((*((_BYTE *)this + 88) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pocketProbabilityVar", *((float *)this + 20));
  v11 = *((_BYTE *)this + 88);
  if (v11 < 0)
    goto LABEL_21;
LABEL_12:
  if ((v11 & 1) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FaceDownDetection::readFrom(CMMsl::FaceDownDetection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  _DWORD *v77;
  unint64_t v78;
  char *v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  unint64_t v100;
  _BYTE v103[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 88) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_152;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_155;
        case 2u:
          if (v24 != 2)
          {
            v76 = (char *)*((_QWORD *)this + 5);
            v75 = *((_QWORD *)this + 6);
            if ((unint64_t)v76 >= v75)
            {
              v84 = (char *)*v10;
              v85 = (v76 - (_BYTE *)*v10) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
LABEL_166:
                sub_10000D5F8();
              v87 = v75 - (_QWORD)v84;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v89 = (char *)sub_100020E2C((uint64_t)v11, v88);
                v84 = (char *)*((_QWORD *)this + 4);
                v76 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v89 = 0;
              }
              v96 = &v89[4 * v85];
              *(_DWORD *)v96 = 0;
              v77 = v96 + 4;
              while (v76 != v84)
              {
                v97 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *((_QWORD *)this + 4) = v96;
              *((_QWORD *)this + 5) = v77;
              *((_QWORD *)this + 6) = &v89[4 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_DWORD *)v76 = 0;
              v77 = v76 + 4;
            }
            *((_QWORD *)this + 5) = v77;
            goto LABEL_150;
          }
          if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 5);
            v29 = *((_QWORD *)this + 6);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_166;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100020E2C((uint64_t)v11, v36);
                v32 = (char *)*((_QWORD *)this + 4);
                v30 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((_QWORD *)this + 4) = v38;
              *((_QWORD *)this + 5) = v31;
              *((_QWORD *)this + 6) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 5) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_114;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          goto LABEL_115;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
              return 0;
            v41 = *((_QWORD *)a2 + 1);
            v42 = *((_QWORD *)a2 + 2);
            while (v41 < v42 && !*((_BYTE *)a2 + 24))
            {
              v44 = (char *)*((_QWORD *)this + 2);
              v43 = *((_QWORD *)this + 3);
              if ((unint64_t)v44 >= v43)
              {
                v46 = (char *)*v8;
                v47 = (v44 - (_BYTE *)*v8) >> 2;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62)
                  goto LABEL_167;
                v49 = v43 - (_QWORD)v46;
                if (v49 >> 1 > v48)
                  v48 = v49 >> 1;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                  v50 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  v51 = (char *)sub_100020E2C((uint64_t)v9, v50);
                  v46 = (char *)*((_QWORD *)this + 1);
                  v44 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v47];
                *(_DWORD *)v52 = 0;
                v45 = v52 + 4;
                while (v44 != v46)
                {
                  v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                *((_QWORD *)this + 1) = v52;
                *((_QWORD *)this + 2) = v45;
                *((_QWORD *)this + 3) = &v51[4 * v50];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *(_DWORD *)v44 = 0;
                v45 = v44 + 4;
              }
              *((_QWORD *)this + 2) = v45;
              v54 = *((_QWORD *)a2 + 1);
              if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_114:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
              v42 = *((_QWORD *)a2 + 2);
              v41 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v41;
            }
LABEL_115:
            PB::Reader::recallMark(a2, v103);
          }
          else
          {
            v79 = (char *)*((_QWORD *)this + 2);
            v78 = *((_QWORD *)this + 3);
            if ((unint64_t)v79 >= v78)
            {
              v90 = (char *)*v8;
              v91 = (v79 - (_BYTE *)*v8) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
LABEL_167:
                sub_10000D5F8();
              v93 = v78 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_100020E2C((uint64_t)v9, v94);
                v90 = (char *)*((_QWORD *)this + 1);
                v79 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v95 = 0;
              }
              v98 = &v95[4 * v91];
              *(_DWORD *)v98 = 0;
              v77 = v98 + 4;
              while (v79 != v90)
              {
                v99 = *((_DWORD *)v79 - 1);
                v79 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *((_QWORD *)this + 1) = v98;
              *((_QWORD *)this + 2) = v77;
              *((_QWORD *)this + 3) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v79 = 0;
              v77 = v79 + 4;
            }
            *((_QWORD *)this + 2) = v77;
LABEL_150:
            v100 = *((_QWORD *)a2 + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v77 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v100);
LABEL_154:
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_155:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_152:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_156:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 88) |= 4u;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_152;
          *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v55);
          goto LABEL_154;
        case 5u:
          *((_BYTE *)this + 88) |= 8u;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_152;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v56);
          goto LABEL_154;
        case 6u:
          *((_BYTE *)this + 88) |= 0x40u;
          v57 = *((_QWORD *)a2 + 1);
          if (v57 >= *((_QWORD *)a2 + 2))
          {
            v60 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v58 = v57 + 1;
            v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + v57);
            *((_QWORD *)a2 + 1) = v58;
            v60 = v59 != 0;
          }
          *((_BYTE *)this + 84) = v60;
          goto LABEL_156;
        case 7u:
          *((_BYTE *)this + 88) |= 0x80u;
          v61 = *((_QWORD *)a2 + 1);
          if (v61 >= *((_QWORD *)a2 + 2))
          {
            v64 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v62 = v61 + 1;
            v63 = *(unsigned __int8 *)(*(_QWORD *)a2 + v61);
            *((_QWORD *)a2 + 1) = v62;
            v64 = v63 != 0;
          }
          *((_BYTE *)this + 85) = v64;
          goto LABEL_156;
        case 8u:
          *((_BYTE *)this + 88) |= 2u;
          v65 = *((_QWORD *)a2 + 1);
          v66 = *((_QWORD *)a2 + 2);
          v67 = *(_QWORD *)a2;
          if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
          {
            v68 = 0;
            v69 = 0;
            v70 = 0;
            do
            {
              v71 = v65 + 1;
              *((_QWORD *)a2 + 1) = v65 + 1;
              v72 = *(_BYTE *)(v67 + v65);
              v70 |= (unint64_t)(v72 & 0x7F) << v68;
              if ((v72 & 0x80) == 0)
                goto LABEL_135;
              v68 += 7;
              v65 = v71;
              v18 = v69++ > 8;
            }
            while (!v18);
LABEL_113:
            LODWORD(v70) = 0;
            goto LABEL_135;
          }
          v80 = 0;
          v81 = 0;
          v70 = 0;
          if (v66 <= v65)
            v66 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v66 == v65)
            {
              LODWORD(v70) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v82 = v65 + 1;
              v83 = *(_BYTE *)(v67 + v65);
              *((_QWORD *)a2 + 1) = v82;
              v70 |= (unint64_t)(v83 & 0x7F) << v80;
              if (v83 < 0)
              {
                v80 += 7;
                v65 = v82;
                v18 = v81++ > 8;
                if (v18)
                  goto LABEL_113;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v70) = 0;
            }
            break;
          }
LABEL_135:
          *((_DWORD *)this + 16) = v70;
          goto LABEL_156;
        case 9u:
          *((_BYTE *)this + 88) |= 0x10u;
          v73 = *((_QWORD *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_152;
          *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v73);
          goto LABEL_154;
        case 0xAu:
          *((_BYTE *)this + 88) |= 0x20u;
          v74 = *((_QWORD *)a2 + 1);
          if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_152;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v74);
          goto LABEL_154;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_156;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FaceDownDetection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = this;
  if ((*(_BYTE *)(this + 88) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  v4 = *(float **)(v3 + 32);
  v5 = *(float **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 68), 4u);
    v10 = *(_BYTE *)(v3 + 88);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(v3 + 88) & 8) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 5u);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x40) == 0)
  {
LABEL_12:
    if ((v10 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 84), 6u);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x80) == 0)
  {
LABEL_13:
    if ((v10 & 2) == 0)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 85), 7u);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 2) == 0)
  {
LABEL_14:
    if ((v10 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 8u);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x10) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 80), 0xAu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 9u);
  if ((*(_BYTE *)(v3 + 88) & 0x20) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 80), 0xAu);
  return this;
}

BOOL CMMsl::FaceDownDetection::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  _BOOL8 v10;

  v2 = *(unsigned __int8 *)(a1 + 88);
  v3 = *(unsigned __int8 *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 32);
  v4 = *(float **)(a1 + 40);
  v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85))
      return 0;
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v10 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(float *)(a1 + 80) == *(float *)(a2 + 80);
  return v10;
}

uint64_t CMMsl::FaceDownDetection::hash_value(CMMsl::FaceDownDetection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;

  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 7);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 88) & 4) == 0)
  {
    v5 = 0;
    if ((*((_BYTE *)this + 88) & 8) != 0)
      goto LABEL_8;
LABEL_23:
    v7 = 0;
    if ((*((_BYTE *)this + 88) & 0x40) != 0)
      goto LABEL_11;
    goto LABEL_24;
  }
  v15 = *((float *)this + 17);
  v5 = LODWORD(v15);
  if (v15 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 88) & 8) == 0)
    goto LABEL_23;
LABEL_8:
  v6 = *((float *)this + 18);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 88) & 0x40) != 0)
  {
LABEL_11:
    v8 = *((unsigned __int8 *)this + 84);
    if ((*((_BYTE *)this + 88) & 0x80) != 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v8 = 0;
  if ((*((_BYTE *)this + 88) & 0x80) != 0)
  {
LABEL_12:
    v9 = *((unsigned __int8 *)this + 85);
    if ((*((_BYTE *)this + 88) & 2) != 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v9 = 0;
  if ((*((_BYTE *)this + 88) & 2) != 0)
  {
LABEL_13:
    v10 = *((unsigned int *)this + 16);
    if ((*((_BYTE *)this + 88) & 0x10) != 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v10 = 0;
  if ((*((_BYTE *)this + 88) & 0x10) != 0)
  {
LABEL_14:
    v11 = *((float *)this + 19);
    v12 = LODWORD(v11);
    if (v11 == 0.0)
      v12 = 0;
    if ((*((_BYTE *)this + 88) & 0x20) != 0)
      goto LABEL_17;
LABEL_28:
    v14 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
  }
LABEL_27:
  v12 = 0;
  if ((*((_BYTE *)this + 88) & 0x20) == 0)
    goto LABEL_28;
LABEL_17:
  v13 = *((float *)this + 20);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
}

uint64_t CMMsl::FacePose::FacePose(uint64_t this)
{
  *(_QWORD *)this = off_100350D40;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350D40;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

void CMMsl::FacePose::~FacePose(CMMsl::FacePose *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::FacePose::FacePose(CMMsl::FacePose *this, const CMMsl::FacePose *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;

  *(_QWORD *)this = off_100350D40;
  *((_DWORD *)this + 34) = 0;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *((_DWORD *)this + 34) = 2;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x2000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 29);
    v3 |= 0x2000000u;
    *((_DWORD *)this + 34) = v3;
    *((_DWORD *)this + 29) = v5;
    v2 = *((_DWORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    v6 = *((_DWORD *)a2 + 20);
    v3 |= 0x10000u;
    *((_DWORD *)this + 34) = v3;
    *((_DWORD *)this + 20) = v6;
    v2 = *((_DWORD *)a2 + 34);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_38;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x80000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x100000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x200000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x40000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 30) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 32) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x8000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 6) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  v7 = *((_DWORD *)a2 + 21);
  v3 |= 0x20000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 21) = v7;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 1) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 10) = v8;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  v4 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 34) = v3;
  *((_QWORD *)this + 1) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  v9 = *((_BYTE *)a2 + 133);
  v3 |= 0x40000000u;
  *((_DWORD *)this + 34) = v3;
  *((_BYTE *)this + 133) = v9;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  v10 = *((_BYTE *)a2 + 132);
  v3 |= 0x20000000u;
  *((_DWORD *)this + 34) = v3;
  *((_BYTE *)this + 132) = v10;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 7) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x4000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x1000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x2000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000) == 0)
      goto LABEL_33;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x2000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x400000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x400000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *((_DWORD *)a2 + 34);
  if ((v2 & 0x800000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0)
      return *(float *)&v4;
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x800000u;
  *((_DWORD *)this + 34) = v3;
  *((_DWORD *)this + 27) = v4;
  if ((*((_DWORD *)a2 + 34) & 0x1000000) == 0)
    return *(float *)&v4;
LABEL_64:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 34) = v3 | 0x1000000;
  *((_DWORD *)this + 28) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FacePose::operator=(CMMsl *a1, const CMMsl::FacePose *a2)
{
  CMMsl::FacePose *v3;
  _BYTE v5[144];

  if (a1 != a2)
  {
    CMMsl::FacePose::FacePose((CMMsl::FacePose *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FacePose *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FacePose *a2, CMMsl::FacePose *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  float result;

  v3 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v5;
  v6 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v6;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  v7 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v7;
  v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  LOBYTE(v8) = *((_BYTE *)this + 133);
  *((_BYTE *)this + 133) = *((_BYTE *)a2 + 133);
  *((_BYTE *)a2 + 133) = v8;
  LOBYTE(v8) = *((_BYTE *)this + 132);
  *((_BYTE *)this + 132) = *((_BYTE *)a2 + 132);
  *((_BYTE *)a2 + 132) = v8;
  LODWORD(v9) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  LODWORD(v9) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  LODWORD(v9) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  LODWORD(v9) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  LODWORD(v9) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v9;
  LODWORD(v9) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v9;
  LODWORD(v9) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  LODWORD(v9) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v9;
  LODWORD(v9) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v9;
  result = *((float *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((float *)a2 + 28) = result;
  return result;
}

float CMMsl::FacePose::FacePose(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350D40;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 133) = *(_BYTE *)(a2 + 133);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  result = *(float *)(a2 + 112);
  *(float *)(a1 + 112) = result;
  return result;
}

CMMsl *CMMsl::FacePose::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FacePose *v3;
  _BYTE v5[144];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FacePose::FacePose((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FacePose *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FacePose::formatText(CMMsl::FacePose *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "aperture", *((float *)this + 6));
    v5 = *((_DWORD *)this + 34);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((float *)this + 7));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "ev", *((float *)this + 8));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "exposureDuration", *((float *)this + 9));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "failureCode", *((_DWORD *)this + 10));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gaze_x", *((float *)this + 11));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gaze_y", *((float *)this + 12));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "gaze_z", *((float *)this + 13));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "iso", *((float *)this + 14));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "left_eye_x", *((float *)this + 15));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "left_eye_y", *((float *)this + 16));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "left_eye_z", *((float *)this + 17));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "lidAngle", *((float *)this + 18));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 19));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "orientation", *((_DWORD *)this + 20));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "poseLibrary", *((_DWORD *)this + 21));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "qw", *((float *)this + 22));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x80000) == 0)
  {
LABEL_19:
    if ((v5 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "qx", *((float *)this + 23));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x100000) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "qy", *((float *)this + 24));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x200000) == 0)
  {
LABEL_21:
    if ((v5 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "qz", *((float *)this + 25));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x400000) == 0)
  {
LABEL_22:
    if ((v5 & 0x800000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "right_eye_x", *((float *)this + 26));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x800000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "right_eye_y", *((float *)this + 27));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "right_eye_z", *((float *)this + 28));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 1) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "rollValue", *((double *)this + 1));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "sensorCovered", *((_BYTE *)this + 132));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "tooDark", *((_BYTE *)this + 133));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 29));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_31;
LABEL_63:
    PB::TextFormatter::format(a2, "y", *((float *)this + 31));
    if ((*((_DWORD *)this + 34) & 0x10000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_32;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "x", *((float *)this + 30));
  v5 = *((_DWORD *)this + 34);
  if ((v5 & 0x8000000) != 0)
    goto LABEL_63;
LABEL_31:
  if ((v5 & 0x10000000) != 0)
LABEL_32:
    PB::TextFormatter::format(a2, "z", *((float *)this + 32));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FacePose::readFrom(CMMsl::FacePose *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 34) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_94;
            case 2u:
              *((_DWORD *)this + 34) |= 0x2000000u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_176;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_175:
                    v2 = v51 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_175;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_176;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_176:
              *((_DWORD *)this + 29) = v25;
              goto LABEL_167;
            case 3u:
              *((_DWORD *)this + 34) |= 0x10000u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_181;
                  }
                  v55 = v27++;
                  v56 = *(_BYTE *)(v28 + v55);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_180:
                    v2 = v55 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_180;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_181;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_181:
              *((_DWORD *)this + 20) = v31;
              goto LABEL_167;
            case 4u:
              *((_DWORD *)this + 34) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 5u:
              *((_DWORD *)this + 34) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 6u:
              *((_DWORD *)this + 34) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 7u:
              *((_DWORD *)this + 34) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 8u:
              *((_DWORD *)this + 34) |= 0x4000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 9u:
              *((_DWORD *)this + 34) |= 0x8000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0xAu:
              *((_DWORD *)this + 34) |= 0x10000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0xBu:
              *((_DWORD *)this + 34) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0xCu:
              *((_DWORD *)this + 34) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0xDu:
              *((_DWORD *)this + 34) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0xEu:
              *((_DWORD *)this + 34) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0xFu:
              *((_DWORD *)this + 34) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x10u:
              *((_DWORD *)this + 34) |= 0x20000u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_186;
                  }
                  v59 = v33++;
                  v60 = *(_BYTE *)(v34 + v59);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_185:
                    v2 = v59 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_185;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_186;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_186:
              *((_DWORD *)this + 21) = v37;
              goto LABEL_167;
            case 0x11u:
              *((_DWORD *)this + 34) |= 0x40u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_191;
                  }
                  v63 = v39++;
                  v64 = *(_BYTE *)(v40 + v63);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_190:
                    v2 = v63 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_190;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_191;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_191:
              *((_DWORD *)this + 10) = v43;
LABEL_167:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x12u:
              *((_DWORD *)this + 34) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_94:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_166;
            case 0x13u:
              *((_DWORD *)this + 34) |= 0x40000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v46 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v46 = v45 != 0;
              }
              *((_BYTE *)this + 133) = v46;
              goto LABEL_167;
            case 0x14u:
              *((_DWORD *)this + 34) |= 0x20000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v48 = v47 != 0;
              }
              *((_BYTE *)this + 132) = v48;
              goto LABEL_167;
            case 0x15u:
              *((_DWORD *)this + 34) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x16u:
              *((_DWORD *)this + 34) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x17u:
              *((_DWORD *)this + 34) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x18u:
              *((_DWORD *)this + 34) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x19u:
              *((_DWORD *)this + 34) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x1Au:
              *((_DWORD *)this + 34) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x1Bu:
              *((_DWORD *)this + 34) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x1Cu:
              *((_DWORD *)this + 34) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x1Du:
              *((_DWORD *)this + 34) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x1Eu:
              *((_DWORD *)this + 34) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_131;
              *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_165;
            case 0x1Fu:
              *((_DWORD *)this + 34) |= 0x1000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_165:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_166:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_131:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_167;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_167;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FacePose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 136);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 2u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 3u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 4u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 5u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 6u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 7u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 8u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 9u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xAu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xBu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xCu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xDu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xEu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xFu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0x10u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 1) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x11u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x12u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 133), 0x13u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 132), 0x14u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0x15u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x16u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x17u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x18u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x19u);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x1Au);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x2000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x1Du);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 112), 0x1Fu);
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x1Eu);
  if ((*(_DWORD *)(v3 + 136) & 0x1000000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 112), 0x1Fu);
  return this;
}

BOOL CMMsl::FacePose::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 136);
  v3 = *(_DWORD *)(a2 + 136);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 133) != *(unsigned __int8 *)(a2 + 133))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 132) != *(unsigned __int8 *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x1000000) == 0;
  if ((v2 & 0x1000000) != 0)
    return (v3 & 0x1000000) != 0 && *(float *)(a1 + 112) == *(float *)(a2 + 112);
  return v4;
}

uint64_t CMMsl::FacePose::hash_value(CMMsl::FacePose *this)
{
  int v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  double v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;

  v1 = *((_DWORD *)this + 34);
  if ((v1 & 2) != 0)
  {
    v53 = *((double *)this + 2);
    if (v53 == 0.0)
      v53 = 0.0;
    v59 = v53;
    if ((v1 & 0x2000000) != 0)
    {
LABEL_3:
      v58 = *((unsigned int *)this + 29);
      if ((v1 & 0x10000) != 0)
        goto LABEL_4;
      goto LABEL_103;
    }
  }
  else
  {
    v59 = 0.0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_3;
  }
  v58 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_4:
    v57 = *((unsigned int *)this + 20);
    if ((v1 & 0x80000) != 0)
      goto LABEL_5;
LABEL_104:
    v56 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_8;
LABEL_105:
    v55 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_11;
LABEL_106:
    v7 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_15;
LABEL_107:
    v9 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_19;
LABEL_108:
    v11 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_23;
LABEL_109:
    v13 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_27;
LABEL_110:
    v15 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_31;
LABEL_111:
    v17 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_35;
LABEL_112:
    v19 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_39;
LABEL_113:
    v21 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_43;
LABEL_114:
    v23 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_47;
LABEL_115:
    v25 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_51;
    goto LABEL_116;
  }
LABEL_103:
  v57 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_104;
LABEL_5:
  v2 = *((float *)this + 23);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  v56 = v3;
  if ((v1 & 0x100000) == 0)
    goto LABEL_105;
LABEL_8:
  v4 = *((float *)this + 24);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  v55 = v5;
  if ((v1 & 0x200000) == 0)
    goto LABEL_106;
LABEL_11:
  v6 = *((float *)this + 25);
  if (v6 == 0.0)
    v7 = 0;
  else
    v7 = LODWORD(v6);
  if ((v1 & 0x40000) == 0)
    goto LABEL_107;
LABEL_15:
  v8 = *((float *)this + 22);
  if (v8 == 0.0)
    v9 = 0;
  else
    v9 = LODWORD(v8);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_108;
LABEL_19:
  v10 = *((float *)this + 30);
  if (v10 == 0.0)
    v11 = 0;
  else
    v11 = LODWORD(v10);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_109;
LABEL_23:
  v12 = *((float *)this + 31);
  if (v12 == 0.0)
    v13 = 0;
  else
    v13 = LODWORD(v12);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_110;
LABEL_27:
  v14 = *((float *)this + 32);
  if (v14 == 0.0)
    v15 = 0;
  else
    v15 = LODWORD(v14);
  if ((v1 & 0x8000) == 0)
    goto LABEL_111;
LABEL_31:
  v16 = *((float *)this + 19);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x20) == 0)
    goto LABEL_112;
LABEL_35:
  v18 = *((float *)this + 9);
  if (v18 == 0.0)
    v19 = 0;
  else
    v19 = LODWORD(v18);
  if ((v1 & 0x400) == 0)
    goto LABEL_113;
LABEL_39:
  v20 = *((float *)this + 14);
  if (v20 == 0.0)
    v21 = 0;
  else
    v21 = LODWORD(v20);
  if ((v1 & 4) == 0)
    goto LABEL_114;
LABEL_43:
  v22 = *((float *)this + 6);
  if (v22 == 0.0)
    v23 = 0;
  else
    v23 = LODWORD(v22);
  if ((v1 & 0x10) == 0)
    goto LABEL_115;
LABEL_47:
  v24 = *((float *)this + 8);
  if (v24 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v24);
  if ((v1 & 0x20000) != 0)
  {
LABEL_51:
    v26 = *((unsigned int *)this + 21);
    if ((v1 & 0x40) != 0)
      goto LABEL_52;
    goto LABEL_117;
  }
LABEL_116:
  v26 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_52:
    v27 = *((int *)this + 10);
    if ((v1 & 1) != 0)
      goto LABEL_53;
LABEL_118:
    v28 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_57;
    goto LABEL_119;
  }
LABEL_117:
  v27 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_118;
LABEL_53:
  if (*((double *)this + 1) == 0.0)
    v28 = 0;
  else
    v28 = *((_QWORD *)this + 1);
  if ((v1 & 0x40000000) != 0)
  {
LABEL_57:
    v29 = *((unsigned __int8 *)this + 133);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_58;
    goto LABEL_120;
  }
LABEL_119:
  v29 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_58:
    v30 = *((unsigned __int8 *)this + 132);
    if ((v1 & 8) != 0)
      goto LABEL_59;
LABEL_121:
    v32 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_63;
LABEL_122:
    v34 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_67;
LABEL_123:
    v36 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_71;
LABEL_124:
    v38 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_75;
LABEL_125:
    v40 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_79;
LABEL_126:
    v42 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_83;
LABEL_127:
    v44 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_87;
LABEL_128:
    v46 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_90;
LABEL_129:
    v48 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_93;
    goto LABEL_130;
  }
LABEL_120:
  v30 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_121;
LABEL_59:
  v31 = *((float *)this + 7);
  if (v31 == 0.0)
    v32 = 0;
  else
    v32 = LODWORD(v31);
  if ((v1 & 0x4000) == 0)
    goto LABEL_122;
LABEL_63:
  v33 = *((float *)this + 18);
  if (v33 == 0.0)
    v34 = 0;
  else
    v34 = LODWORD(v33);
  if ((v1 & 0x80) == 0)
    goto LABEL_123;
LABEL_67:
  v35 = *((float *)this + 11);
  if (v35 == 0.0)
    v36 = 0;
  else
    v36 = LODWORD(v35);
  if ((v1 & 0x100) == 0)
    goto LABEL_124;
LABEL_71:
  v37 = *((float *)this + 12);
  if (v37 == 0.0)
    v38 = 0;
  else
    v38 = LODWORD(v37);
  if ((v1 & 0x200) == 0)
    goto LABEL_125;
LABEL_75:
  v39 = *((float *)this + 13);
  if (v39 == 0.0)
    v40 = 0;
  else
    v40 = LODWORD(v39);
  if ((v1 & 0x800) == 0)
    goto LABEL_126;
LABEL_79:
  v41 = *((float *)this + 15);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x1000) == 0)
    goto LABEL_127;
LABEL_83:
  v43 = *((float *)this + 16);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x2000) == 0)
    goto LABEL_128;
LABEL_87:
  v45 = *((float *)this + 17);
  v46 = LODWORD(v45);
  if (v45 == 0.0)
    v46 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_129;
LABEL_90:
  v47 = *((float *)this + 26);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_93:
    v49 = *((float *)this + 27);
    v50 = LODWORD(v49);
    if (v49 == 0.0)
      v50 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_96;
LABEL_131:
    v52 = 0;
    return v58 ^ *(_QWORD *)&v59 ^ v57 ^ v56 ^ v55 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
  }
LABEL_130:
  v50 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_131;
LABEL_96:
  v51 = *((float *)this + 28);
  v52 = LODWORD(v51);
  if (v51 == 0.0)
    v52 = 0;
  return v58 ^ *(_QWORD *)&v59 ^ v57 ^ v56 ^ v55 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v52;
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t this)
{
  *(_QWORD *)this = off_100350D78;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350D78;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::FacePoseSynchronized::~FacePoseSynchronized(CMMsl::FacePoseSynchronized *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_100350D78;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100350D78;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_100350D78;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t this, const CMMsl::FacePoseSynchronized *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100350D78;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
    v3 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 32) = 2;
    *(_QWORD *)(this + 16) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 32) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 32) = v2;
    *(_QWORD *)(this + 8) = v4;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 3))
    operator new();
  return this;
}

uint64_t CMMsl::FacePoseSynchronized::operator=(uint64_t a1, const CMMsl::FacePoseSynchronized *a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  void (**v7)(CMMsl::FacePoseSynchronized *__hidden);
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::FacePoseSynchronized *)a1 != a2)
  {
    CMMsl::FacePoseSynchronized::FacePoseSynchronized((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v7 = off_100350D78;
    v9 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FacePoseSynchronized *a2, CMMsl::FacePoseSynchronized *a3)
{
  int v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return result;
}

uint64_t CMMsl::FacePoseSynchronized::FacePoseSynchronized(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_100350D78;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::FacePoseSynchronized::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::FacePoseSynchronized *__hidden);
  __int128 v10;
  uint64_t v11;
  int v12;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    v12 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v9 = off_100350D78;
    v11 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::FacePoseSynchronized::formatText(CMMsl::FacePoseSynchronized *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 1));
    v5 = *((_BYTE *)this + 32);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 2));
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FacePoseSynchronized::readFrom(CMMsl::FacePoseSynchronized *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        operator new();
      if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 32) |= 1u;
        v22 = *((_QWORD *)a2 + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v22);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_35;
        }
        *((_BYTE *)this + 32) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_35;
        }
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v21);
      }
      *((_QWORD *)a2 + 1) += 8;
LABEL_35:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::FacePoseSynchronized::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    return PB::Writer::writeSubmessage(a2, v5, 3u);
  return this;
}

BOOL CMMsl::FacePoseSynchronized::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  result = v3 == 0;
  if (!v2)
    return result;
  return v3 && CMMsl::FacePose::operator==(v2, v3);
}

unint64_t CMMsl::FacePoseSynchronized::hash_value(CMMsl::FacePoseSynchronized *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    if (*((double *)this + 2) == 0.0)
      v1 = 0;
    else
      v1 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_3;
LABEL_10:
    v2 = 0;
    goto LABEL_11;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_10;
LABEL_3:
  if (*((double *)this + 1) == 0.0)
    v2 = 0;
  else
    v2 = *((_QWORD *)this + 1);
LABEL_11:
  v3 = *((_QWORD *)this + 3);
  if (v3)
    v3 = CMMsl::FacePose::hash_value((CMMsl::FacePose *)v3);
  return v2 ^ v1 ^ v3;
}

uint64_t CMMsl::FacePoseSynchronized::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 24))
    operator new();
  return this;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(uint64_t this)
{
  *(_QWORD *)this = off_100350DB0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350DB0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::FallDetectionActivityClassifierReplay::~FallDetectionActivityClassifierReplay(CMMsl::FallDetectionActivityClassifierReplay *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(CMMsl::FallDetectionActivityClassifierReplay *this, const CMMsl::FallDetectionActivityClassifierReplay *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  float result;

  *(_QWORD *)this = off_100350DB0;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 7) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 4) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return result;
LABEL_12:
      result = *((float *)a2 + 6);
      *((_BYTE *)this + 32) = v3 | 8;
      *((float *)this + 6) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 5) = v7;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
    goto LABEL_12;
  return result;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::operator=(uint64_t a1, const CMMsl::FallDetectionActivityClassifierReplay *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((const CMMsl::FallDetectionActivityClassifierReplay *)a1 != a2)
  {
    CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay((CMMsl::FallDetectionActivityClassifierReplay *)v8, a2);
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v12;
    v12 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDetectionActivityClassifierReplay *a2, CMMsl::FallDetectionActivityClassifierReplay *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::FallDetectionActivityClassifierReplay::FallDetectionActivityClassifierReplay(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350DB0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100350DB0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v10[0] = off_100350DB0;
    v10[1] = v7;
    v12 = *(_QWORD *)(a1 + 28);
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 28) = v6;
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v11 = v5;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::formatText(CMMsl::FallDetectionActivityClassifierReplay *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "cyclingState", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cyclingStateSummary", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "motionType", *((_DWORD *)this + 7));
    if ((*((_BYTE *)this + 32) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "distanceTraveledOverTimeWindow", *((float *)this + 6));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::readFrom(CMMsl::FallDetectionActivityClassifierReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 32) |= 0x10u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 32) |= 2u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 4) = v37;
              goto LABEL_104;
            case 4u:
              *((_BYTE *)this + 32) |= 4u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 5) = v43;
LABEL_104:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *((_BYTE *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_104;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 4u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  return this;
}

BOOL CMMsl::FallDetectionActivityClassifierReplay::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::FallDetectionActivityClassifierReplay::hash_value(CMMsl::FallDetectionActivityClassifierReplay *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 7);
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 4);
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_5:
    v4 = *((int *)this + 5);
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_6;
LABEL_13:
    v6 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v6;
  }
LABEL_12:
  v4 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_13;
LABEL_6:
  v5 = *((float *)this + 6);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  return v2 ^ v1 ^ v3 ^ v4 ^ v6;
}

_QWORD *CMMsl::FallDetectionDetector::FallDetectionDetector(_QWORD *this)
{
  *this = off_100350DE8;
  *(_QWORD *)((char *)this + 156) = 0;
  return this;
}

{
  *this = off_100350DE8;
  *(_QWORD *)((char *)this + 156) = 0;
  return this;
}

void CMMsl::FallDetectionDetector::~FallDetectionDetector(CMMsl::FallDetectionDetector *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::FallDetectionDetector::FallDetectionDetector(CMMsl::FallDetectionDetector *this, const CMMsl::FallDetectionDetector *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  int v12;
  char v13;

  *(_QWORD *)this = off_100350DE8;
  *(_QWORD *)((char *)this + 156) = 0;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_QWORD *)((char *)this + 156) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *(_QWORD *)((char *)a2 + 156);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4uLL;
    *(_QWORD *)((char *)this + 156) = v3;
    *((_QWORD *)this + 3) = v5;
    v2 = *(_QWORD *)((char *)a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2uLL;
    *(_QWORD *)((char *)this + 156) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *(_QWORD *)((char *)a2 + 156);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x10000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 21) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 9) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 33) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 35) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 34) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v7 = *((_DWORD *)a2 + 12);
  v3 |= 0x80uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 12) = v7;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 32) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v8 = *((_BYTE *)a2 + 152);
  v3 |= 0x200000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 152) = v8;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v9 = *((_DWORD *)a2 + 37);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 37) = v9;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 36) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400) == 0)
  {
LABEL_26:
    if ((v2 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  v10 = *((_BYTE *)a2 + 153);
  v3 |= 0x400000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 153) = v10;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  v11 = *((_BYTE *)a2 + 155);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 155) = v11;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_36;
    goto LABEL_71;
  }
LABEL_70:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0)
      goto LABEL_37;
    goto LABEL_72;
  }
LABEL_71:
  v12 = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 30) = v12;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_73;
  }
LABEL_72:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_39;
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_75;
  }
LABEL_74:
  v13 = *((_BYTE *)a2 + 154);
  v3 |= 0x800000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 154) = v13;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_40:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 23) = v4;
  if ((*(_QWORD *)((_BYTE *)a2 + 156) & 8) == 0)
    return *(float *)&v4;
LABEL_76:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  *(_QWORD *)((char *)this + 156) = v3 | 8;
  *((_DWORD *)this + 8) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FallDetectionDetector::operator=(CMMsl *a1, const CMMsl::FallDetectionDetector *a2)
{
  CMMsl::FallDetectionDetector *v3;
  _BYTE v5[168];

  if (a1 != a2)
  {
    CMMsl::FallDetectionDetector::FallDetectionDetector((CMMsl::FallDetectionDetector *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionDetector *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDetectionDetector *a2, CMMsl::FallDetectionDetector *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  v3 = *(_QWORD *)((char *)this + 156);
  *(_QWORD *)((char *)this + 156) = *(_QWORD *)((char *)a2 + 156);
  *(_QWORD *)((char *)a2 + 156) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 152);
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  *((_BYTE *)a2 + 152) = v6;
  LODWORD(v6) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v6;
  LODWORD(v4) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 153);
  *((_BYTE *)this + 153) = *((_BYTE *)a2 + 153);
  *((_BYTE *)a2 + 153) = v6;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 155);
  *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
  *((_BYTE *)a2 + 155) = v6;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LOBYTE(v6) = *((_BYTE *)this + 154);
  *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
  *((_BYTE *)a2 + 154) = v6;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::FallDetectionDetector::FallDetectionDetector(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350DE8;
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_QWORD *)(a2 + 156) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionDetector::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallDetectionDetector *v3;
  _BYTE v5[168];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionDetector::FallDetectionDetector((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionDetector *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionDetector::formatText(CMMsl::FallDetectionDetector *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "abruptGravityChangeAngle", *((float *)this + 8));
    v5 = *(_QWORD *)((char *)this + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelPathLength", *((float *)this + 9));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "angleChangePostImpact", *((float *)this + 10));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "angleChangePreImpact", *((float *)this + 11));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "crown", *((_DWORD *)this + 12));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "crownVariance", *((float *)this + 13));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "gravityVariance", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isFall", *((_BYTE *)this + 152));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isNearFall", *((_BYTE *)this + 153));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "maxAbsX", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "maxAbsY", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "maxAbsZ", *((float *)this + 17));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 18));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "maxAngleChangePostImpact", *((float *)this + 19));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "maxAngleChangePreImpact", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "maxJerkVM", *((float *)this + 21));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "maxMinusMin", *((float *)this + 22));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "medianAbsGravityY", *((float *)this + 23));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "minInertialZ", *((float *)this + 24));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "minInertialZHighFreq", *((float *)this + 25));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "multiPeakAccelPathLengthWithPeak", *((float *)this + 26));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "multiPeakPathLengthDecorrelation", *((float *)this + 27));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "multiPeakPathLengthDelaySpread", *((float *)this + 28));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "multiPeakPathLengthHarmonicMean", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 30));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 2) == 0)
  {
LABEL_28:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "peakTimestamp", *((_QWORD *)this + 2));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "poseAtImpact", *((float *)this + 31));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "posteriorRatio", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 3));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "sumDeltaAngles", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "swingAngle", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "tiltAngle", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "timeto3rdZC", *((float *)this + 36));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_37;
LABEL_75:
    PB::TextFormatter::format(a2, "withinCyclingImpactThresholds", *((_BYTE *)this + 154));
    if ((*(_QWORD *)((_BYTE *)this + 156) & 0x1000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_38;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 37));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800000000) != 0)
    goto LABEL_75;
LABEL_37:
  if ((v5 & 0x1000000000) != 0)
LABEL_38:
    PB::TextFormatter::format(a2, "withinHardThresholds", *((_BYTE *)this + 155));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionDetector::readFrom(CMMsl::FallDetectionDetector *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  int v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)((char *)this + 156) |= 1uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_196;
            case 2u:
              *(_QWORD *)((char *)this + 156) |= 4uLL;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_206;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_205:
                    v2 = v61 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_205;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_206;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_206:
              *((_QWORD *)this + 3) = v25;
              goto LABEL_197;
            case 3u:
              *(_QWORD *)((char *)this + 156) |= 2uLL;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_211;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_210:
                    v2 = v65 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_210;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_211;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_211:
              *((_QWORD *)this + 2) = v31;
              goto LABEL_197;
            case 4u:
              *(_QWORD *)((char *)this + 156) |= 0x40uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 5u:
              *(_QWORD *)((char *)this + 156) |= 0x20uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 6u:
              *(_QWORD *)((char *)this + 156) |= 0x20000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 7u:
              *(_QWORD *)((char *)this + 156) |= 0x2000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 8u:
              *(_QWORD *)((char *)this + 156) |= 0x10000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 9u:
              *(_QWORD *)((char *)this + 156) |= 0x80000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0xAu:
              *(_QWORD *)((char *)this + 156) |= 0x10uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0xBu:
              *(_QWORD *)((char *)this + 156) |= 0x8000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0xCu:
              *(_QWORD *)((char *)this + 156) |= 0x4000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0xDu:
              *(_QWORD *)((char *)this + 156) |= 0x4000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0xEu:
              *(_QWORD *)((char *)this + 156) |= 0x10000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0xFu:
              *(_QWORD *)((char *)this + 156) |= 0x40000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x10u:
              *(_QWORD *)((char *)this + 156) |= 0x20000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x11u:
              *(_QWORD *)((char *)this + 156) |= 0x80uLL;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_216;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_215:
                    v2 = v69 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_215;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_216;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_216:
              *((_DWORD *)this + 12) = v37;
              goto LABEL_197;
            case 0x12u:
              *(_QWORD *)((char *)this + 156) |= 0x8000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x13u:
              *(_QWORD *)((char *)this + 156) |= 0x200000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 152) = v40;
              goto LABEL_197;
            case 0x14u:
              *(_QWORD *)((char *)this + 156) |= (unint64_t)&_mh_execute_header;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_221;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_220:
                    v2 = v73 + 1;
                    goto LABEL_221;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_220;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_221;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_221:
              *((_DWORD *)this + 37) = v45;
              goto LABEL_197;
            case 0x15u:
              *(_QWORD *)((char *)this + 156) |= 0x80000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 36) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x16u:
              *(_QWORD *)((char *)this + 156) |= 0x400uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x17u:
              *(_QWORD *)((char *)this + 156) |= 0x800uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x18u:
              *(_QWORD *)((char *)this + 156) |= 0x1000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x19u:
              *(_QWORD *)((char *)this + 156) |= 0x400000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v48 = v47 != 0;
              }
              *((_BYTE *)this + 153) = v48;
              goto LABEL_197;
            case 0x1Au:
              *(_QWORD *)((char *)this + 156) |= 0x800000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x1Bu:
              *(_QWORD *)((char *)this + 156) |= 0x400000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x1Cu:
              *(_QWORD *)((char *)this + 156) |= 0x1000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x1Du:
              *(_QWORD *)((char *)this + 156) |= 0x200000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x1Eu:
              *(_QWORD *)((char *)this + 156) |= 0x1000000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v50 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v50 = v49 != 0;
              }
              *((_BYTE *)this + 155) = v50;
              goto LABEL_197;
            case 0x1Fu:
              *(_QWORD *)((char *)this + 156) |= 0x100000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x20u:
              *(_QWORD *)((char *)this + 156) |= 0x2000000uLL;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_226;
                  }
                  v77 = v51++;
                  v78 = *(_BYTE *)(v52 + v77);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_225:
                    v2 = v77 + 1;
                    goto LABEL_226;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_225;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_226;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_226:
              *((_DWORD *)this + 30) = v55;
LABEL_197:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x21u:
              *(_QWORD *)((char *)this + 156) |= 0x200uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x22u:
              *(_QWORD *)((char *)this + 156) |= 0x100uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x23u:
              *(_QWORD *)((char *)this + 156) |= 0x800000000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v58 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v58 = v57 != 0;
              }
              *((_BYTE *)this + 154) = v58;
              goto LABEL_197;
            case 0x24u:
              *(_QWORD *)((char *)this + 156) |= 0x40000uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_150;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_195;
            case 0x25u:
              *(_QWORD *)((char *)this + 156) |= 8uLL;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_195:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_196:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_150:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_197;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_197;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionDetector::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 156);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_QWORD *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 2u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 3u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 4u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 6u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 7u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 8u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 9u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xAu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xCu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xDu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xEu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xFu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x10u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0x11u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x12u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 152), 0x13u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 0x14u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x15u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x16u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x17u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x18u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 153), 0x19u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x1Au);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x1Du);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 155), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0x20u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x21u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x22u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 154), 0x23u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 32), 0x25u);
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x24u);
  if ((*(_QWORD *)(v3 + 156) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 32), 0x25u);
  return this;
}

BOOL CMMsl::FallDetectionDetector::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 156);
  v3 = *(_QWORD *)(a2 + 156);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 156) & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  return v4;
}

uint64_t CMMsl::FallDetectionDetector::hash_value(CMMsl::FallDetectionDetector *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = *(_QWORD *)((char *)this + 156);
  if ((v1 & 1) != 0)
  {
    if (*((double *)this + 1) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 1);
    if ((v1 & 4) != 0)
    {
LABEL_3:
      v74 = *((_QWORD *)this + 3);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_110;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
  }
  v74 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v73 = *((_QWORD *)this + 2);
    if ((v1 & 0x40) != 0)
      goto LABEL_5;
LABEL_111:
    v72 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_8;
LABEL_112:
    v71 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_11;
LABEL_113:
    v70 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_14;
LABEL_114:
    v69 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_17;
LABEL_115:
    v68 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_20;
LABEL_116:
    v67 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_23;
LABEL_117:
    v66 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_26;
LABEL_118:
    v65 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_29;
LABEL_119:
    v20 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_33;
LABEL_120:
    v22 = 0;
    if ((v1 & 0x10000000) != 0)
      goto LABEL_37;
LABEL_121:
    v24 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_41;
LABEL_122:
    v26 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_45;
LABEL_123:
    v28 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_110:
  v73 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_111;
LABEL_5:
  v3 = *((float *)this + 11);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v72 = v4;
  if ((v1 & 0x20) == 0)
    goto LABEL_112;
LABEL_8:
  v5 = *((float *)this + 10);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v71 = v6;
  if ((v1 & 0x20000) == 0)
    goto LABEL_113;
LABEL_11:
  v7 = *((float *)this + 22);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v70 = v8;
  if ((v1 & 0x2000) == 0)
    goto LABEL_114;
LABEL_14:
  v9 = *((float *)this + 18);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v69 = v10;
  if ((v1 & 0x10000) == 0)
    goto LABEL_115;
LABEL_17:
  v11 = *((float *)this + 21);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v68 = v12;
  if ((v1 & 0x80000) == 0)
    goto LABEL_116;
LABEL_20:
  v13 = *((float *)this + 24);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v67 = v14;
  if ((v1 & 0x10) == 0)
    goto LABEL_117;
LABEL_23:
  v15 = *((float *)this + 9);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v66 = v16;
  if ((v1 & 0x8000) == 0)
    goto LABEL_118;
LABEL_26:
  v17 = *((float *)this + 20);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v65 = v18;
  if ((v1 & 0x4000) == 0)
    goto LABEL_119;
LABEL_29:
  v19 = *((float *)this + 19);
  if (v19 == 0.0)
    v20 = 0;
  else
    v20 = LODWORD(v19);
  if ((v1 & 0x4000000) == 0)
    goto LABEL_120;
LABEL_33:
  v21 = *((float *)this + 31);
  if (v21 == 0.0)
    v22 = 0;
  else
    v22 = LODWORD(v21);
  if ((v1 & 0x10000000) == 0)
    goto LABEL_121;
LABEL_37:
  v23 = *((float *)this + 33);
  if (v23 == 0.0)
    v24 = 0;
  else
    v24 = LODWORD(v23);
  if ((v1 & 0x40000000) == 0)
    goto LABEL_122;
LABEL_41:
  v25 = *((float *)this + 35);
  if (v25 == 0.0)
    v26 = 0;
  else
    v26 = LODWORD(v25);
  if ((v1 & 0x20000000) == 0)
    goto LABEL_123;
LABEL_45:
  v27 = *((float *)this + 34);
  if (v27 == 0.0)
    v28 = 0;
  else
    v28 = LODWORD(v27);
  if ((v1 & 0x80) != 0)
  {
LABEL_49:
    v29 = *((int *)this + 12);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_50;
LABEL_125:
    v31 = 0;
    if ((v1 & 0x200000000) != 0)
      goto LABEL_54;
    goto LABEL_126;
  }
LABEL_124:
  v29 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_125;
LABEL_50:
  v30 = *((float *)this + 32);
  if (v30 == 0.0)
    v31 = 0;
  else
    v31 = LODWORD(v30);
  if ((v1 & 0x200000000) != 0)
  {
LABEL_54:
    v32 = *((unsigned __int8 *)this + 152);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_55;
    goto LABEL_127;
  }
LABEL_126:
  v32 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_55:
    v33 = *((int *)this + 37);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_56;
LABEL_128:
    v35 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_60;
LABEL_129:
    v37 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_64;
LABEL_130:
    v39 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_68;
LABEL_131:
    v41 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_72;
    goto LABEL_132;
  }
LABEL_127:
  v33 = 0;
  if ((v1 & 0x80000000) == 0)
    goto LABEL_128;
LABEL_56:
  v34 = *((float *)this + 36);
  if (v34 == 0.0)
    v35 = 0;
  else
    v35 = LODWORD(v34);
  if ((v1 & 0x400) == 0)
    goto LABEL_129;
LABEL_60:
  v36 = *((float *)this + 15);
  if (v36 == 0.0)
    v37 = 0;
  else
    v37 = LODWORD(v36);
  if ((v1 & 0x800) == 0)
    goto LABEL_130;
LABEL_64:
  v38 = *((float *)this + 16);
  if (v38 == 0.0)
    v39 = 0;
  else
    v39 = LODWORD(v38);
  if ((v1 & 0x1000) == 0)
    goto LABEL_131;
LABEL_68:
  v40 = *((float *)this + 17);
  if (v40 == 0.0)
    v41 = 0;
  else
    v41 = LODWORD(v40);
  if ((v1 & 0x400000000) != 0)
  {
LABEL_72:
    v42 = *((unsigned __int8 *)this + 153);
    if ((v1 & 0x800000) != 0)
      goto LABEL_73;
LABEL_133:
    v44 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_77;
LABEL_134:
    v46 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_81;
LABEL_135:
    v48 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_84;
LABEL_136:
    v50 = 0;
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_87;
    goto LABEL_137;
  }
LABEL_132:
  v42 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_133;
LABEL_73:
  v43 = *((float *)this + 28);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x400000) == 0)
    goto LABEL_134;
LABEL_77:
  v45 = *((float *)this + 27);
  if (v45 == 0.0)
    v46 = 0;
  else
    v46 = LODWORD(v45);
  if ((v1 & 0x1000000) == 0)
    goto LABEL_135;
LABEL_81:
  v47 = *((float *)this + 29);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_136;
LABEL_84:
  v49 = *((float *)this + 26);
  v50 = LODWORD(v49);
  if (v49 == 0.0)
    v50 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_87:
    v51 = *((unsigned __int8 *)this + 155);
    if ((v1 & 0x100000) != 0)
      goto LABEL_88;
LABEL_138:
    v53 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_91;
    goto LABEL_139;
  }
LABEL_137:
  v51 = 0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_138;
LABEL_88:
  v52 = *((float *)this + 25);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_91:
    v54 = *((unsigned int *)this + 30);
    if ((v1 & 0x200) != 0)
      goto LABEL_92;
LABEL_140:
    v56 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_95;
LABEL_141:
    v58 = 0;
    if ((v1 & 0x800000000) != 0)
      goto LABEL_98;
    goto LABEL_142;
  }
LABEL_139:
  v54 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_140;
LABEL_92:
  v55 = *((float *)this + 14);
  v56 = LODWORD(v55);
  if (v55 == 0.0)
    v56 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_141;
LABEL_95:
  v57 = *((float *)this + 13);
  v58 = LODWORD(v57);
  if (v57 == 0.0)
    v58 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_98:
    v59 = *((unsigned __int8 *)this + 154);
    if ((v1 & 0x40000) != 0)
      goto LABEL_99;
    goto LABEL_143;
  }
LABEL_142:
  v59 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_99:
    v60 = *((float *)this + 23);
    v61 = LODWORD(v60);
    if (v60 == 0.0)
      v61 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_102;
LABEL_144:
    v63 = 0;
    return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v31 ^ v32 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v51 ^ v53 ^ v54 ^ v56 ^ v58 ^ v59 ^ v61 ^ v63;
  }
LABEL_143:
  v61 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_144;
LABEL_102:
  v62 = *((float *)this + 8);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  return v74 ^ v2 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v31 ^ v32 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v46 ^ v48 ^ v50 ^ v51 ^ v53 ^ v54 ^ v56 ^ v58 ^ v59 ^ v61 ^ v63;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t this)
{
  *(_QWORD *)this = off_100350E20;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350E20;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::FallDetectionGyroControllerReplay::~FallDetectionGyroControllerReplay(CMMsl::FallDetectionGyroControllerReplay *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t this, const CMMsl::FallDetectionGyroControllerReplay *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_100350E20;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_100350E20;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::operator=(uint64_t a1, uint64_t a2)
{
  char v2;
  void (**v4)(CMMsl::FallDetectionGyroControllerReplay *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD v11[2];
  char v12;
  int v13;

  if (a1 != a2)
  {
    v4 = off_100350E20;
    v11[0] = off_100350E20;
    v13 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      v4 = *(void (***)(CMMsl::FallDetectionGyroControllerReplay *__hidden))(a2 + 8);
      LOBYTE(v13) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_BYTE *)(a2 + 16);
        LOBYTE(v13) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[1] = v8;
    v9 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v2;
    v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = off_100350E20;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallDetectionGyroControllerReplay *a2, CMMsl::FallDetectionGyroControllerReplay *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::FallDetectionGyroControllerReplay(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100350E20;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_100350E20;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::formatText(CMMsl::FallDetectionGyroControllerReplay *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "gyroOn", *((_BYTE *)this + 16));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::readFrom(CMMsl::FallDetectionGyroControllerReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        if (v2 >= v3)
        {
          v28 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v28 = v27 != 0;
        }
        *((_BYTE *)this + 16) = v28;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v3)
        {
          v30 = 0;
          v31 = 0;
          v25 = 0;
          if (v3 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v21)
            {
              v25 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_48;
            }
            v32 = v21++;
            v33 = *(_BYTE *)(v22 + v32);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v14 = v31++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v25 = 0;
LABEL_47:
          v2 = v32 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_48:
        *((_QWORD *)this + 1) = v25;
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::FallDetectionGyroControllerReplay::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::FallDetectionGyroControllerReplay::hash_value(CMMsl::FallDetectionGyroControllerReplay *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ v1;
}

uint64_t CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t this)
{
  *(_QWORD *)this = off_100350E58;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350E58;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::FallDetectionReferee::~FallDetectionReferee(CMMsl::FallDetectionReferee *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t this, const CMMsl::FallDetectionReferee *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  *(_QWORD *)this = off_100350E58;
  *(_DWORD *)(this + 52) = 0;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_WORD *)(this + 52) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 52) = v3;
    *(_QWORD *)(this + 24) = v5;
    v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 52) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 32) = v7;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_WORD *)(this + 52) = v3;
  *(_DWORD *)(this + 36) = v9;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_BYTE *)a2 + 50);
  v3 |= 0x1000u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 50) = v10;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_BYTE *)a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 44) = v11;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_BYTE *)a2 + 45);
  v3 |= 0x80u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 45) = v12;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_BYTE *)a2 + 46);
  v3 |= 0x100u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 46) = v13;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_BYTE *)a2 + 47);
  v3 |= 0x200u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 47) = v14;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      return this;
LABEL_28:
    v16 = *((_BYTE *)a2 + 49);
    *(_WORD *)(this + 52) = v3 | 0x800;
    *(_BYTE *)(this + 49) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_BYTE *)a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(this + 52) = v3;
  *(_BYTE *)(this + 48) = v15;
  if ((*((_WORD *)a2 + 26) & 0x800) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::FallDetectionReferee::operator=(CMMsl *a1, const CMMsl::FallDetectionReferee *a2)
{
  CMMsl::FallDetectionReferee *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::FallDetectionReferee::FallDetectionReferee((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReferee *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionReferee *a2, CMMsl::FallDetectionReferee *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 50);
  *((_BYTE *)this + 50) = *((_BYTE *)a2 + 50);
  *((_BYTE *)a2 + 50) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 45);
  *((_BYTE *)this + 45) = *((_BYTE *)a2 + 45);
  *((_BYTE *)a2 + 45) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 46);
  *((_BYTE *)this + 46) = *((_BYTE *)a2 + 46);
  *((_BYTE *)a2 + 46) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 47);
  *((_BYTE *)this + 47) = *((_BYTE *)a2 + 47);
  *((_BYTE *)a2 + 47) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 49);
  *((_BYTE *)this + 49) = *((_BYTE *)a2 + 49);
  *((_BYTE *)a2 + 49) = v6;
  return result;
}

double CMMsl::FallDetectionReferee::FallDetectionReferee(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350E58;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  return result;
}

CMMsl *CMMsl::FallDetectionReferee::operator=(CMMsl *this, uint64_t a2, CMMsl::FallDetectionReferee *a3)
{
  uint64_t v4;
  _QWORD v6[5];
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v12 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    v6[2] = *(_QWORD *)(a2 + 16);
    v6[3] = *(_QWORD *)(a2 + 24);
    v4 = *(_QWORD *)(a2 + 8);
    v6[0] = off_100350E58;
    v6[1] = v4;
    v7 = *(_DWORD *)(a2 + 40);
    v6[4] = *(_QWORD *)(a2 + 32);
    v11 = *(_BYTE *)(a2 + 50);
    v8 = *(_DWORD *)(a2 + 44);
    v9 = *(_BYTE *)(a2 + 48);
    v10 = *(_BYTE *)(a2 + 49);
    CMMsl::swap(this, (CMMsl::FallDetectionReferee *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::FallDetectionReferee::formatText(CMMsl::FallDetectionReferee *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "consideredAlert", *((_BYTE *)this + 44));
    v5 = *((_WORD *)this + 26);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "consideredRecovery", *((_BYTE *)this + 45));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "consideredSOS", *((_BYTE *)this + 46));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "droppedAlert", *((_BYTE *)this + 47));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "droppedRecovery", *((_BYTE *)this + 48));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "droppedSOS", *((_BYTE *)this + 49));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "fallTime", *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "impactOperatingMode", *((_DWORD *)this + 8));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 2));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isOtherStateMachineProcessingNearbyImpact", *((_BYTE *)this + 50));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "refereeOperatingMode", *((_DWORD *)this + 10));
    if ((*((_WORD *)this + 26) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "refereeCyclingStateDecision", *((_DWORD *)this + 9));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 4) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionReferee::readFrom(CMMsl::FallDetectionReferee *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int v50;
  BOOL v51;
  uint64_t result;
  int v53;
  BOOL v54;
  int v55;
  BOOL v56;
  int v57;
  BOOL v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  int v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 26) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_151;
            case 2u:
              *((_WORD *)this + 26) |= 4u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_130;
                  }
                  v67 = v20++;
                  v68 = *(_BYTE *)(v21 + v67);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    v24 = 0;
LABEL_129:
                    v2 = v67 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
                goto LABEL_129;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)a2 + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_130;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              v24 = 0;
LABEL_130:
              *((_QWORD *)this + 3) = v24;
              goto LABEL_151;
            case 3u:
              *((_WORD *)this + 26) |= 1u;
              v26 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v27 = *(_QWORD *)a2;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    v30 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_135;
                  }
                  v71 = v26++;
                  v72 = *(_BYTE *)(v27 + v71);
                  *((_QWORD *)a2 + 1) = v26;
                  v30 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v30 = 0;
LABEL_134:
                    v2 = v71 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v30 = 0;
                goto LABEL_134;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)a2 + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_135;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              v30 = 0;
LABEL_135:
              *((_QWORD *)this + 1) = v30;
              goto LABEL_151;
            case 4u:
              *((_WORD *)this + 26) |= 8u;
              v32 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v33 = *(_QWORD *)a2;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v36 = 0;
                if (v2 <= v32)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_140;
                  }
                  v75 = v32++;
                  v76 = *(_BYTE *)(v33 + v75);
                  *((_QWORD *)a2 + 1) = v32;
                  v36 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_139:
                    v2 = v75 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v36) = 0;
                goto LABEL_139;
              }
              v34 = 0;
              v35 = 0;
              v36 = 0;
              do
              {
                v2 = v32 + 1;
                *((_QWORD *)a2 + 1) = v32 + 1;
                v37 = *(_BYTE *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0)
                  goto LABEL_140;
                v34 += 7;
                v32 = v2;
                v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_140:
              *((_DWORD *)this + 8) = v36;
              goto LABEL_151;
            case 5u:
              *((_WORD *)this + 26) |= 0x20u;
              v38 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v39 = *(_QWORD *)a2;
              if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v42 = 0;
                if (v2 <= v38)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v38)
                  {
                    LODWORD(v42) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  v79 = v38++;
                  v80 = *(_BYTE *)(v39 + v79);
                  *((_QWORD *)a2 + 1) = v38;
                  v42 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v42) = 0;
LABEL_144:
                    v2 = v79 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v42) = 0;
                goto LABEL_144;
              }
              v40 = 0;
              v41 = 0;
              v42 = 0;
              do
              {
                v2 = v38 + 1;
                *((_QWORD *)a2 + 1) = v38 + 1;
                v43 = *(_BYTE *)(v39 + v38);
                v42 |= (unint64_t)(v43 & 0x7F) << v40;
                if ((v43 & 0x80) == 0)
                  goto LABEL_145;
                v40 += 7;
                v38 = v2;
                v14 = v41++ > 8;
              }
              while (!v14);
              LODWORD(v42) = 0;
LABEL_145:
              *((_DWORD *)this + 10) = v42;
              goto LABEL_151;
            case 6u:
              *((_WORD *)this + 26) |= 0x10u;
              v44 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v45 = *(_QWORD *)a2;
              if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v48 = 0;
                if (v2 <= v44)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v44)
                  {
                    LODWORD(v48) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_150;
                  }
                  v83 = v44++;
                  v84 = *(_BYTE *)(v45 + v83);
                  *((_QWORD *)a2 + 1) = v44;
                  v48 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v48) = 0;
LABEL_149:
                    v2 = v83 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v48) = 0;
                goto LABEL_149;
              }
              v46 = 0;
              v47 = 0;
              v48 = 0;
              do
              {
                v2 = v44 + 1;
                *((_QWORD *)a2 + 1) = v44 + 1;
                v49 = *(_BYTE *)(v45 + v44);
                v48 |= (unint64_t)(v49 & 0x7F) << v46;
                if ((v49 & 0x80) == 0)
                  goto LABEL_150;
                v46 += 7;
                v44 = v2;
                v14 = v47++ > 8;
              }
              while (!v14);
              LODWORD(v48) = 0;
LABEL_150:
              *((_DWORD *)this + 9) = v48;
LABEL_151:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 7u:
              *((_WORD *)this + 26) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v51 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v50 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v51 = v50 != 0;
              }
              *((_BYTE *)this + 50) = v51;
              goto LABEL_151;
            case 0xBu:
              *((_WORD *)this + 26) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v54 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v53 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v54 = v53 != 0;
              }
              *((_BYTE *)this + 44) = v54;
              goto LABEL_151;
            case 0xCu:
              *((_WORD *)this + 26) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v56 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v55 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v56 = v55 != 0;
              }
              *((_BYTE *)this + 45) = v56;
              goto LABEL_151;
            case 0xDu:
              *((_WORD *)this + 26) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v58 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v58 = v57 != 0;
              }
              *((_BYTE *)this + 46) = v58;
              goto LABEL_151;
            case 0x15u:
              *((_WORD *)this + 26) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v60 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v59 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v60 = v59 != 0;
              }
              *((_BYTE *)this + 47) = v60;
              goto LABEL_151;
            case 0x16u:
              *((_WORD *)this + 26) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v62 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v61 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v62 = v61 != 0;
              }
              *((_BYTE *)this + 48) = v62;
              goto LABEL_151;
            case 0x17u:
              *((_WORD *)this + 26) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v64 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v63 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v64 = v63 != 0;
              }
              *((_BYTE *)this + 49) = v64;
              goto LABEL_151;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_151;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionReferee::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 52);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 2u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 3u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 6u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 50), 7u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 0xBu);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 45), 0xCu);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 46), 0xDu);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 47), 0x15u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 49), 0x17u);
  }
LABEL_26:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 48), 0x16u);
  if ((*(_WORD *)(v3 + 52) & 0x800) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 49), 0x17u);
  return this;
}

BOOL CMMsl::FallDetectionReferee::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 52);
  v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 46) != *(unsigned __int8 *)(a2 + 46))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 47) != *(unsigned __int8 *)(a2 + 47))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 52) & 0x800) != 0)
    return (*(_WORD *)(a2 + 52) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 49) == *(unsigned __int8 *)(a2 + 49);
  return v4;
}

uint64_t CMMsl::FallDetectionReferee::hash_value(CMMsl::FallDetectionReferee *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *((_WORD *)this + 26);
  if ((v1 & 2) != 0)
  {
    v2 = *((double *)this + 2);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 4) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 3);
      if ((v1 & 1) != 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 1);
    if ((v1 & 8) != 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  v4 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 8);
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  v5 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_6:
    v6 = *((int *)this + 10);
    if ((v1 & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_7:
    v7 = *((int *)this + 9);
    if ((*((_WORD *)this + 26) & 0x1000) != 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  v7 = 0;
  if ((*((_WORD *)this + 26) & 0x1000) != 0)
  {
LABEL_8:
    v8 = *((unsigned __int8 *)this + 50);
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  v8 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_9:
    v9 = *((unsigned __int8 *)this + 44);
    if ((v1 & 0x80) != 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  v9 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_10:
    v10 = *((unsigned __int8 *)this + 45);
    if ((*((_WORD *)this + 26) & 0x100) != 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  v10 = 0;
  if ((*((_WORD *)this + 26) & 0x100) != 0)
  {
LABEL_11:
    v11 = *((unsigned __int8 *)this + 46);
    if ((*((_WORD *)this + 26) & 0x200) != 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  v11 = 0;
  if ((*((_WORD *)this + 26) & 0x200) != 0)
  {
LABEL_12:
    v12 = *((unsigned __int8 *)this + 47);
    if ((*((_WORD *)this + 26) & 0x400) != 0)
      goto LABEL_13;
LABEL_28:
    v13 = 0;
    if ((*((_WORD *)this + 26) & 0x800) != 0)
      goto LABEL_14;
LABEL_29:
    v14 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14;
  }
LABEL_27:
  v12 = 0;
  if ((*((_WORD *)this + 26) & 0x400) == 0)
    goto LABEL_28;
LABEL_13:
  v13 = *((unsigned __int8 *)this + 48);
  if ((*((_WORD *)this + 26) & 0x800) == 0)
    goto LABEL_29;
LABEL_14:
  v14 = *((unsigned __int8 *)this + 49);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14;
}

_QWORD *CMMsl::FallDetectionReplay::FallDetectionReplay(_QWORD *this)
{
  *this = off_100350E90;
  *(_QWORD *)((char *)this + 364) = 0;
  return this;
}

{
  *this = off_100350E90;
  *(_QWORD *)((char *)this + 364) = 0;
  return this;
}

void CMMsl::FallDetectionReplay::~FallDetectionReplay(CMMsl::FallDetectionReplay *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::FallDetectionReplay::FallDetectionReplay(CMMsl::FallDetectionReplay *this, const CMMsl::FallDetectionReplay *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double result;

  *(_QWORD *)this = off_100350E90;
  v2 = (uint64_t *)((char *)this + 364);
  *(_QWORD *)((char *)this + 364) = 0;
  v3 = (uint64_t *)((char *)a2 + 364);
  v4 = *(_QWORD *)((char *)a2 + 364);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *((_QWORD *)a2 + 31);
    v5 = 0x40000000;
    *v2 = 0x40000000;
    *((_QWORD *)this + 31) = v6;
    v4 = *v3;
    if ((*v3 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x80000000) != 0)
  {
LABEL_5:
    v7 = *((_QWORD *)a2 + 32);
    v5 |= 0x80000000uLL;
    *v2 = v5;
    *((_QWORD *)this + 32) = v7;
    v4 = *v3;
  }
LABEL_6:
  if ((v4 & 0x80000) != 0)
  {
    v8 = *((_QWORD *)a2 + 20);
    v5 |= 0x80000uLL;
    *v2 = v5;
    *((_QWORD *)this + 20) = v8;
    v4 = *v3;
    if ((*v3 & 0x100000) == 0)
    {
LABEL_8:
      if ((v4 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_52;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  v9 = *((_QWORD *)a2 + 21);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *((_QWORD *)this + 21) = v9;
  v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v10 = *((_QWORD *)a2 + 22);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *((_QWORD *)this + 22) = v10;
  v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_11;
    goto LABEL_54;
  }
LABEL_53:
  v11 = *((_QWORD *)a2 + 40);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 40) = v11;
  v4 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_55;
  }
LABEL_54:
  v12 = *((_QWORD *)a2 + 43);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 43) = v12;
  v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_13;
    goto LABEL_56;
  }
LABEL_55:
  v13 = *((_QWORD *)a2 + 41);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 41) = v13;
  v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_14;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *((_QWORD *)a2 + 42);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 42) = v14;
  v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_15;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *((_QWORD *)a2 + 44);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 44) = v15;
  v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_59;
  }
LABEL_58:
  v16 = *((_DWORD *)a2 + 90);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *((_DWORD *)this + 90) = v16;
  v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_60;
  }
LABEL_59:
  v17 = *((_QWORD *)a2 + 25);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 25) = v17;
  v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_61;
  }
LABEL_60:
  v18 = *((_QWORD *)a2 + 28);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 28) = v18;
  v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_62;
  }
LABEL_61:
  v19 = *((_QWORD *)a2 + 26);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 26) = v19;
  v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_63;
  }
LABEL_62:
  v20 = *((_QWORD *)a2 + 27);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 27) = v20;
  v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_64;
  }
LABEL_63:
  v21 = *((_QWORD *)a2 + 23);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *((_QWORD *)this + 23) = v21;
  v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_65;
  }
LABEL_64:
  v22 = *((_QWORD *)a2 + 24);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *((_QWORD *)this + 24) = v22;
  v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_66;
  }
LABEL_65:
  v23 = *((_QWORD *)a2 + 6);
  v5 |= 0x20uLL;
  *v2 = v5;
  *((_QWORD *)this + 6) = v23;
  v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0)
      goto LABEL_24;
    goto LABEL_67;
  }
LABEL_66:
  v24 = *((_QWORD *)a2 + 4);
  v5 |= 8uLL;
  *v2 = v5;
  *((_QWORD *)this + 4) = v24;
  v4 = *v3;
  if ((*v3 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_68;
  }
LABEL_67:
  v25 = *((_QWORD *)a2 + 1);
  v5 |= 1uLL;
  *v2 = v5;
  *((_QWORD *)this + 1) = v25;
  v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_69;
  }
LABEL_68:
  v26 = *((_QWORD *)a2 + 7);
  v5 |= 0x40uLL;
  *v2 = v5;
  *((_QWORD *)this + 7) = v26;
  v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_70;
  }
LABEL_69:
  v27 = *((_QWORD *)a2 + 9);
  v5 |= 0x100uLL;
  *v2 = v5;
  *((_QWORD *)this + 9) = v27;
  v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_71;
  }
LABEL_70:
  v28 = *((_QWORD *)a2 + 5);
  v5 |= 0x10uLL;
  *v2 = v5;
  *((_QWORD *)this + 5) = v28;
  v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_28:
    if ((v4 & 0x400) == 0)
      goto LABEL_29;
    goto LABEL_72;
  }
LABEL_71:
  v29 = *((_QWORD *)a2 + 10);
  v5 |= 0x200uLL;
  *v2 = v5;
  *((_QWORD *)this + 10) = v29;
  v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_29:
    if ((v4 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_73;
  }
LABEL_72:
  v30 = *((_QWORD *)a2 + 11);
  v5 |= 0x400uLL;
  *v2 = v5;
  *((_QWORD *)this + 11) = v30;
  v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_74;
  }
LABEL_73:
  v31 = *((_QWORD *)a2 + 12);
  v5 |= 0x800uLL;
  *v2 = v5;
  *((_QWORD *)this + 12) = v31;
  v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 2) == 0)
      goto LABEL_32;
    goto LABEL_75;
  }
LABEL_74:
  v32 = *((_QWORD *)a2 + 15);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *((_QWORD *)this + 15) = v32;
  v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000) == 0)
      goto LABEL_33;
    goto LABEL_76;
  }
LABEL_75:
  v33 = *((_QWORD *)a2 + 2);
  v5 |= 2uLL;
  *v2 = v5;
  *((_QWORD *)this + 2) = v33;
  v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_34;
    goto LABEL_77;
  }
LABEL_76:
  v34 = *((_QWORD *)a2 + 16);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *((_QWORD *)this + 16) = v34;
  v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_35;
    goto LABEL_78;
  }
LABEL_77:
  v35 = *((_QWORD *)a2 + 36);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 36) = v35;
  v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_79;
  }
LABEL_78:
  v36 = *((_QWORD *)a2 + 35);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 35) = v36;
  v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_80;
  }
LABEL_79:
  v37 = *((_QWORD *)a2 + 34);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 34) = v37;
  v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_81;
  }
LABEL_80:
  v38 = *((_QWORD *)a2 + 33);
  v5 |= (unint64_t)&_mh_execute_header;
  *v2 = v5;
  *((_QWORD *)this + 33) = v38;
  v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_82;
  }
LABEL_81:
  v39 = *((_QWORD *)a2 + 30);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 30) = v39;
  v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0)
      goto LABEL_40;
    goto LABEL_83;
  }
LABEL_82:
  v40 = *((_QWORD *)a2 + 29);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 29) = v40;
  v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000) == 0)
      goto LABEL_41;
    goto LABEL_84;
  }
LABEL_83:
  v41 = *((_QWORD *)a2 + 14);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *((_QWORD *)this + 14) = v41;
  v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_41:
    if ((v4 & 4) == 0)
      goto LABEL_42;
    goto LABEL_85;
  }
LABEL_84:
  v42 = *((_QWORD *)a2 + 17);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *((_QWORD *)this + 17) = v42;
  v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_42:
    if ((v4 & 0x40000) == 0)
      goto LABEL_43;
    goto LABEL_86;
  }
LABEL_85:
  v43 = *((_QWORD *)a2 + 3);
  v5 |= 4uLL;
  *v2 = v5;
  *((_QWORD *)this + 3) = v43;
  v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20000) == 0)
      goto LABEL_44;
    goto LABEL_87;
  }
LABEL_86:
  v44 = *((_QWORD *)a2 + 19);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *((_QWORD *)this + 19) = v44;
  v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_88;
  }
LABEL_87:
  v45 = *((_QWORD *)a2 + 18);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *((_QWORD *)this + 18) = v45;
  v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x1000) == 0)
      goto LABEL_46;
    goto LABEL_89;
  }
LABEL_88:
  v46 = *((_QWORD *)a2 + 8);
  v5 |= 0x80uLL;
  *v2 = v5;
  *((_QWORD *)this + 8) = v46;
  v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_46:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_90;
  }
LABEL_89:
  v47 = *((_QWORD *)a2 + 13);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *((_QWORD *)this + 13) = v47;
  v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_48;
    goto LABEL_91;
  }
LABEL_90:
  v48 = *((_QWORD *)a2 + 39);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 39) = v48;
  v4 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x2000000000) == 0)
      return result;
LABEL_92:
    result = *((double *)a2 + 38);
    *v2 = v5 | 0x2000000000;
    *((double *)this + 38) = result;
    return result;
  }
LABEL_91:
  v49 = *((_QWORD *)a2 + 37);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *((_QWORD *)this + 37) = v49;
  if ((*v3 & 0x2000000000) != 0)
    goto LABEL_92;
  return result;
}

CMMsl *CMMsl::FallDetectionReplay::operator=(CMMsl *a1, const CMMsl::FallDetectionReplay *a2)
{
  CMMsl::FallDetectionReplay *v3;
  _BYTE v5[376];

  if (a1 != a2)
  {
    CMMsl::FallDetectionReplay::FallDetectionReplay((CMMsl::FallDetectionReplay *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReplay *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionReplay *a2, CMMsl::FallDetectionReplay *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double result;

  v3 = *(_QWORD *)((char *)this + 364);
  *(_QWORD *)((char *)this + 364) = *(_QWORD *)((char *)a2 + 364);
  *(_QWORD *)((char *)a2 + 364) = v3;
  v4 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = v4;
  v5 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v5;
  v6 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v6;
  v7 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v7;
  v8 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v8;
  v9 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v9;
  v10 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = v10;
  v11 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
  *((_QWORD *)a2 + 41) = v11;
  v12 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  *((_QWORD *)a2 + 42) = v12;
  v13 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  *((_QWORD *)a2 + 44) = v13;
  LODWORD(v13) = *((_DWORD *)this + 90);
  *((_DWORD *)this + 90) = *((_DWORD *)a2 + 90);
  *((_DWORD *)a2 + 90) = v13;
  v14 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v14;
  v15 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v15;
  v16 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v16;
  v17 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v17;
  v18 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v18;
  v19 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v19;
  v20 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v20;
  v21 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v21;
  v22 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v22;
  v23 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v25;
  v26 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v26;
  v27 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v27;
  v28 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v28;
  v29 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v29;
  v30 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v30;
  v31 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v31;
  v32 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v32;
  v33 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v33;
  v34 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v34;
  v35 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v35;
  v36 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v36;
  v37 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v37;
  v38 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v38;
  v39 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v39;
  v40 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v40;
  v41 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v41;
  v42 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v42;
  v43 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v43;
  v44 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v44;
  v45 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v45;
  v46 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v46;
  result = *((double *)this + 38);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((double *)a2 + 38) = result;
  return result;
}

double CMMsl::FallDetectionReplay::FallDetectionReplay(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350E90;
  *(_QWORD *)(a1 + 364) = *(_QWORD *)(a2 + 364);
  *(_QWORD *)(a2 + 364) = 0;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  result = *(double *)(a2 + 304);
  *(double *)(a1 + 304) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionReplay::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallDetectionReplay *v3;
  _BYTE v5[376];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionReplay::FallDetectionReplay((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionReplay *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionReplay::formatText(CMMsl::FallDetectionReplay *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)((char *)this + 364);
  v6 = *(_QWORD *)((char *)this + 364);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "alertCanceledBecauseOfAbsenceOfQuiessence", *((_QWORD *)this + 1));
    v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfActive", *((_QWORD *)this + 2));
  v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfChargerState", *((_QWORD *)this + 3));
  v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfCyclingPostImpact", *((_QWORD *)this + 4));
  v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfDecimatedLowFrequencyFFT", *((_QWORD *)this + 5));
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfDistanceTraveledPostImpact", *((_QWORD *)this + 6));
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfHighFrequencyFFT", *((_QWORD *)this + 7));
  v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfLockedNoMotionPre", *((_QWORD *)this + 8));
  v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfLowFrequencyFFT", *((_QWORD *)this + 9));
  v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfNumberOfPeaksFFT", *((_QWORD *)this + 10));
  v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfOffBody", *((_QWORD *)this + 11));
  v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfRepetitiveMotion", *((_QWORD *)this + 12));
  v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfRetraction", *((_QWORD *)this + 13));
  v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfSimilarPeaks", *((_QWORD *)this + 14));
  v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfStand", *((_QWORD *)this + 15));
  v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfSteps", *((_QWORD *)this + 16));
  v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristState", *((_QWORD *)this + 17));
  v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristStatePost", *((_QWORD *)this + 18));
  v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "alertCanceledBecauseOfWristStatePre", *((_QWORD *)this + 19));
  v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "fallStatsDispatchResetOnAccelSensorTime", *((_QWORD *)this + 20));
  v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "fallStatsDispatchRestoredOnAccelSensorTime", *((_QWORD *)this + 21));
  v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "hkWorkoutId", *((_QWORD *)this + 22));
  v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "impactCanceledBecauseOfExistingAlert", *((_QWORD *)this + 23));
  v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfCyclingImpactThresholds", *((_QWORD *)this + 24));
  v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfMaxAccelNormThreshold", *((_QWORD *)this + 25));
  v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfMultiPeaks", *((_QWORD *)this + 26));
  v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfNaiveBayesClassifier", *((_QWORD *)this + 27));
  v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "impactNotConsideredBecauseOfOtherHardThresholds", *((_QWORD *)this + 28));
  v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "leavingImpactBecauseOfNewImpactNewImpact", *((_QWORD *)this + 29));
  v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "leavingImpactBecauseOfNewImpactOldImpact", *((_QWORD *)this + 30));
  v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 90));
  v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "skippedFallStatsSensorTime", *((_QWORD *)this + 31));
  v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "skippedGyroSensorTime", *((_QWORD *)this + 32));
  v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfAbsenceOfLongLie", *((_QWORD *)this + 33));
  v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfActive", *((_QWORD *)this + 34));
  v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfStand", *((_QWORD *)this + 35));
  v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "sosCanceledBecauseOfSteps", *((_QWORD *)this + 36));
  v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "sosConsideredFallTimestamp", *((_QWORD *)this + 37));
  v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "sosConsideredIOSTime", *((double *)this + 38));
  v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "sosConsideredSensorTime", *((_QWORD *)this + 39));
  v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "workoutId", *((_QWORD *)this + 40));
  v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "workoutTransitionPause", *((_QWORD *)this + 41));
  v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(a2, "workoutTransitionStart", *((_QWORD *)this + 43));
    if ((*v5 & 0x80000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "workoutTransitionResume", *((_QWORD *)this + 42));
  v6 = *v5;
  if ((*v5 & 0x40000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v6 & 0x80000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(a2, "workoutTransitionStop", *((_QWORD *)this + 44));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionReplay::readFrom(CMMsl::FallDetectionReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  char v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  char v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char v265;
  unsigned int v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  char v273;
  unsigned int v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  char v281;
  unsigned int v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  char v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t v292;
  char v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  char v297;
  unsigned int v298;
  uint64_t v299;
  unint64_t v300;
  char v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char v305;
  unsigned int v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  unint64_t v316;
  char v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  char v321;
  unsigned int v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  char v337;
  unsigned int v338;
  uint64_t v339;
  unint64_t v340;
  char v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  char v345;
  unsigned int v346;
  uint64_t v347;
  unint64_t v348;
  char v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  char v353;
  unsigned int v354;
  uint64_t v355;
  unint64_t v356;
  char v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  char v361;
  unsigned int v362;
  uint64_t v363;
  unint64_t v364;
  char v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  char v369;
  unsigned int v370;
  uint64_t v371;
  unint64_t v372;
  char v373;
  unint64_t v374;
  char v375;
  unsigned int v376;
  unint64_t v377;
  char v378;
  char v379;
  unsigned int v380;
  unint64_t v381;
  char v382;
  char v383;
  unsigned int v384;
  unint64_t v385;
  char v386;
  char v387;
  unsigned int v388;
  unint64_t v389;
  char v390;
  char v391;
  unsigned int v392;
  unint64_t v393;
  char v394;
  char v395;
  unsigned int v396;
  unint64_t v397;
  char v398;
  char v399;
  unsigned int v400;
  unint64_t v401;
  char v402;
  char v403;
  unsigned int v404;
  unint64_t v405;
  char v406;
  char v407;
  unsigned int v408;
  unint64_t v409;
  char v410;
  char v411;
  unsigned int v412;
  unint64_t v413;
  char v414;
  char v415;
  unsigned int v416;
  unint64_t v417;
  char v418;
  char v419;
  unsigned int v420;
  unint64_t v421;
  char v422;
  char v423;
  unsigned int v424;
  unint64_t v425;
  char v426;
  char v427;
  unsigned int v428;
  unint64_t v429;
  char v430;
  char v431;
  unsigned int v432;
  unint64_t v433;
  char v434;
  char v435;
  unsigned int v436;
  unint64_t v437;
  char v438;
  char v439;
  unsigned int v440;
  unint64_t v441;
  char v442;
  char v443;
  unsigned int v444;
  unint64_t v445;
  char v446;
  char v447;
  unsigned int v448;
  unint64_t v449;
  char v450;
  char v451;
  unsigned int v452;
  unint64_t v453;
  char v454;
  char v455;
  unsigned int v456;
  unint64_t v457;
  char v458;
  char v459;
  unsigned int v460;
  unint64_t v461;
  char v462;
  char v463;
  unsigned int v464;
  unint64_t v465;
  char v466;
  char v467;
  unsigned int v468;
  unint64_t v469;
  char v470;
  char v471;
  unsigned int v472;
  unint64_t v473;
  char v474;
  char v475;
  unsigned int v476;
  unint64_t v477;
  char v478;
  char v479;
  unsigned int v480;
  unint64_t v481;
  char v482;
  char v483;
  unsigned int v484;
  unint64_t v485;
  char v486;
  char v487;
  unsigned int v488;
  unint64_t v489;
  char v490;
  char v491;
  unsigned int v492;
  unint64_t v493;
  char v494;
  char v495;
  unsigned int v496;
  unint64_t v497;
  char v498;
  char v499;
  unsigned int v500;
  unint64_t v501;
  char v502;
  char v503;
  unsigned int v504;
  unint64_t v505;
  char v506;
  char v507;
  unsigned int v508;
  unint64_t v509;
  char v510;
  char v511;
  unsigned int v512;
  unint64_t v513;
  char v514;
  char v515;
  unsigned int v516;
  unint64_t v517;
  char v518;
  char v519;
  unsigned int v520;
  unint64_t v521;
  char v522;
  char v523;
  unsigned int v524;
  unint64_t v525;
  char v526;
  char v527;
  unsigned int v528;
  unint64_t v529;
  char v530;
  char v531;
  unsigned int v532;
  unint64_t v533;
  char v534;
  char v535;
  unsigned int v536;
  unint64_t v537;
  char v538;
  char v539;
  unsigned int v540;
  unint64_t v541;
  char v542;
  char v543;
  unsigned int v544;
  unint64_t v545;
  char v546;
  char v547;
  unsigned int v548;
  unint64_t v549;
  char v550;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)((char *)this + 364);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          *v8 |= 0x40000000uLL;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
          {
            v375 = 0;
            v376 = 0;
            v26 = 0;
            if (v22 <= v21)
              v22 = *((_QWORD *)a2 + 1);
            do
            {
              if (v22 == v21)
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_648;
              }
              v377 = v21 + 1;
              v378 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v377;
              v26 |= (unint64_t)(v378 & 0x7F) << v375;
              if ((v378 & 0x80) == 0)
              {
                if (*((_BYTE *)a2 + 24))
                  v26 = 0;
                goto LABEL_648;
              }
              v375 += 7;
              v21 = v377;
              v15 = v376++ > 8;
            }
            while (!v15);
LABEL_342:
            v26 = 0;
          }
          else
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            while (1)
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                break;
              v24 += 7;
              v21 = v27;
              v15 = v25++ > 8;
              if (v15)
                goto LABEL_342;
            }
          }
LABEL_648:
          *((_QWORD *)this + 31) = v26;
          goto LABEL_821;
        case 2u:
          *v8 |= 0x80000000uLL;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_652;
              v32 += 7;
              v29 = v35;
              v15 = v33++ > 8;
            }
            while (!v15);
LABEL_349:
            v34 = 0;
            goto LABEL_652;
          }
          v379 = 0;
          v380 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v381 = v29 + 1;
              v382 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v381;
              v34 |= (unint64_t)(v382 & 0x7F) << v379;
              if (v382 < 0)
              {
                v379 += 7;
                v29 = v381;
                v15 = v380++ > 8;
                if (v15)
                  goto LABEL_349;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v34 = 0;
            }
            break;
          }
LABEL_652:
          *((_QWORD *)this + 32) = v34;
          goto LABEL_821;
        case 0x15u:
          *v8 |= 0x80000uLL;
          v38 = *((_QWORD *)a2 + 1);
          v39 = *((_QWORD *)a2 + 2);
          v40 = *(_QWORD *)a2;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = v38 + 1;
              *((_QWORD *)a2 + 1) = v38 + 1;
              v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0)
                goto LABEL_656;
              v41 += 7;
              v38 = v44;
              v15 = v42++ > 8;
            }
            while (!v15);
LABEL_356:
            v43 = 0;
            goto LABEL_656;
          }
          v383 = 0;
          v384 = 0;
          v43 = 0;
          if (v39 <= v38)
            v39 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v39 == v38)
            {
              v43 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v385 = v38 + 1;
              v386 = *(_BYTE *)(v40 + v38);
              *((_QWORD *)a2 + 1) = v385;
              v43 |= (unint64_t)(v386 & 0x7F) << v383;
              if (v386 < 0)
              {
                v383 += 7;
                v38 = v385;
                v15 = v384++ > 8;
                if (v15)
                  goto LABEL_356;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v43 = 0;
            }
            break;
          }
LABEL_656:
          *((_QWORD *)this + 20) = v43;
          goto LABEL_821;
        case 0x16u:
          *v8 |= 0x100000uLL;
          v46 = *((_QWORD *)a2 + 1);
          v47 = *((_QWORD *)a2 + 2);
          v48 = *(_QWORD *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)a2 + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_660;
              v49 += 7;
              v46 = v52;
              v15 = v50++ > 8;
            }
            while (!v15);
LABEL_363:
            v51 = 0;
            goto LABEL_660;
          }
          v387 = 0;
          v388 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v47 == v46)
            {
              v51 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v389 = v46 + 1;
              v390 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)a2 + 1) = v389;
              v51 |= (unint64_t)(v390 & 0x7F) << v387;
              if (v390 < 0)
              {
                v387 += 7;
                v46 = v389;
                v15 = v388++ > 8;
                if (v15)
                  goto LABEL_363;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v51 = 0;
            }
            break;
          }
LABEL_660:
          *((_QWORD *)this + 21) = v51;
          goto LABEL_821;
        case 0x2Cu:
          *v8 |= 0x200000uLL;
          v54 = *((_QWORD *)a2 + 1);
          v55 = *((_QWORD *)a2 + 2);
          v56 = *(_QWORD *)a2;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = v54 + 1;
              *((_QWORD *)a2 + 1) = v54 + 1;
              v61 = *(_BYTE *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0)
                goto LABEL_664;
              v57 += 7;
              v54 = v60;
              v15 = v58++ > 8;
            }
            while (!v15);
LABEL_370:
            v59 = 0;
            goto LABEL_664;
          }
          v391 = 0;
          v392 = 0;
          v59 = 0;
          if (v55 <= v54)
            v55 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v55 == v54)
            {
              v59 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v393 = v54 + 1;
              v394 = *(_BYTE *)(v56 + v54);
              *((_QWORD *)a2 + 1) = v393;
              v59 |= (unint64_t)(v394 & 0x7F) << v391;
              if (v394 < 0)
              {
                v391 += 7;
                v54 = v393;
                v15 = v392++ > 8;
                if (v15)
                  goto LABEL_370;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v59 = 0;
            }
            break;
          }
LABEL_664:
          *((_QWORD *)this + 22) = v59;
          goto LABEL_821;
        case 0x2Du:
          *v8 |= 0x8000000000uLL;
          v62 = *((_QWORD *)a2 + 1);
          v63 = *((_QWORD *)a2 + 2);
          v64 = *(_QWORD *)a2;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v68 = v62 + 1;
              *((_QWORD *)a2 + 1) = v62 + 1;
              v69 = *(_BYTE *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0)
                goto LABEL_668;
              v65 += 7;
              v62 = v68;
              v15 = v66++ > 8;
            }
            while (!v15);
LABEL_377:
            v67 = 0;
            goto LABEL_668;
          }
          v395 = 0;
          v396 = 0;
          v67 = 0;
          if (v63 <= v62)
            v63 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v63 == v62)
            {
              v67 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v397 = v62 + 1;
              v398 = *(_BYTE *)(v64 + v62);
              *((_QWORD *)a2 + 1) = v397;
              v67 |= (unint64_t)(v398 & 0x7F) << v395;
              if (v398 < 0)
              {
                v395 += 7;
                v62 = v397;
                v15 = v396++ > 8;
                if (v15)
                  goto LABEL_377;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v67 = 0;
            }
            break;
          }
LABEL_668:
          *((_QWORD *)this + 40) = v67;
          goto LABEL_821;
        case 0x2Eu:
          *v8 |= 0x40000000000uLL;
          v70 = *((_QWORD *)a2 + 1);
          v71 = *((_QWORD *)a2 + 2);
          v72 = *(_QWORD *)a2;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)a2 + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_672;
              v73 += 7;
              v70 = v76;
              v15 = v74++ > 8;
            }
            while (!v15);
LABEL_384:
            v75 = 0;
            goto LABEL_672;
          }
          v399 = 0;
          v400 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v71 == v70)
            {
              v75 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v401 = v70 + 1;
              v402 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)a2 + 1) = v401;
              v75 |= (unint64_t)(v402 & 0x7F) << v399;
              if (v402 < 0)
              {
                v399 += 7;
                v70 = v401;
                v15 = v400++ > 8;
                if (v15)
                  goto LABEL_384;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v75 = 0;
            }
            break;
          }
LABEL_672:
          *((_QWORD *)this + 43) = v75;
          goto LABEL_821;
        case 0x2Fu:
          *v8 |= 0x10000000000uLL;
          v78 = *((_QWORD *)a2 + 1);
          v79 = *((_QWORD *)a2 + 2);
          v80 = *(_QWORD *)a2;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            v81 = 0;
            v82 = 0;
            v83 = 0;
            do
            {
              v84 = v78 + 1;
              *((_QWORD *)a2 + 1) = v78 + 1;
              v85 = *(_BYTE *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0)
                goto LABEL_676;
              v81 += 7;
              v78 = v84;
              v15 = v82++ > 8;
            }
            while (!v15);
LABEL_391:
            v83 = 0;
            goto LABEL_676;
          }
          v403 = 0;
          v404 = 0;
          v83 = 0;
          if (v79 <= v78)
            v79 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v79 == v78)
            {
              v83 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v405 = v78 + 1;
              v406 = *(_BYTE *)(v80 + v78);
              *((_QWORD *)a2 + 1) = v405;
              v83 |= (unint64_t)(v406 & 0x7F) << v403;
              if (v406 < 0)
              {
                v403 += 7;
                v78 = v405;
                v15 = v404++ > 8;
                if (v15)
                  goto LABEL_391;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v83 = 0;
            }
            break;
          }
LABEL_676:
          *((_QWORD *)this + 41) = v83;
          goto LABEL_821;
        case 0x30u:
          *v8 |= 0x20000000000uLL;
          v86 = *((_QWORD *)a2 + 1);
          v87 = *((_QWORD *)a2 + 2);
          v88 = *(_QWORD *)a2;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v92 = v86 + 1;
              *((_QWORD *)a2 + 1) = v86 + 1;
              v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0)
                goto LABEL_680;
              v89 += 7;
              v86 = v92;
              v15 = v90++ > 8;
            }
            while (!v15);
LABEL_398:
            v91 = 0;
            goto LABEL_680;
          }
          v407 = 0;
          v408 = 0;
          v91 = 0;
          if (v87 <= v86)
            v87 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v87 == v86)
            {
              v91 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v409 = v86 + 1;
              v410 = *(_BYTE *)(v88 + v86);
              *((_QWORD *)a2 + 1) = v409;
              v91 |= (unint64_t)(v410 & 0x7F) << v407;
              if (v410 < 0)
              {
                v407 += 7;
                v86 = v409;
                v15 = v408++ > 8;
                if (v15)
                  goto LABEL_398;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v91 = 0;
            }
            break;
          }
LABEL_680:
          *((_QWORD *)this + 42) = v91;
          goto LABEL_821;
        case 0x31u:
          *v8 |= 0x80000000000uLL;
          v94 = *((_QWORD *)a2 + 1);
          v95 = *((_QWORD *)a2 + 2);
          v96 = *(_QWORD *)a2;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v100 = v94 + 1;
              *((_QWORD *)a2 + 1) = v94 + 1;
              v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0)
                goto LABEL_684;
              v97 += 7;
              v94 = v100;
              v15 = v98++ > 8;
            }
            while (!v15);
LABEL_405:
            v99 = 0;
            goto LABEL_684;
          }
          v411 = 0;
          v412 = 0;
          v99 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v95 == v94)
            {
              v99 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v413 = v94 + 1;
              v414 = *(_BYTE *)(v96 + v94);
              *((_QWORD *)a2 + 1) = v413;
              v99 |= (unint64_t)(v414 & 0x7F) << v411;
              if (v414 < 0)
              {
                v411 += 7;
                v94 = v413;
                v15 = v412++ > 8;
                if (v15)
                  goto LABEL_405;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v99 = 0;
            }
            break;
          }
LABEL_684:
          *((_QWORD *)this + 44) = v99;
          goto LABEL_821;
        case 0x32u:
          *v8 |= 0x100000000000uLL;
          v102 = *((_QWORD *)a2 + 1);
          v103 = *((_QWORD *)a2 + 2);
          v104 = *(_QWORD *)a2;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v108 = v102 + 1;
              *((_QWORD *)a2 + 1) = v102 + 1;
              v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0)
                goto LABEL_688;
              v105 += 7;
              v102 = v108;
              v15 = v106++ > 8;
            }
            while (!v15);
LABEL_412:
            LODWORD(v107) = 0;
            goto LABEL_688;
          }
          v415 = 0;
          v416 = 0;
          v107 = 0;
          if (v103 <= v102)
            v103 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v417 = v102 + 1;
              v418 = *(_BYTE *)(v104 + v102);
              *((_QWORD *)a2 + 1) = v417;
              v107 |= (unint64_t)(v418 & 0x7F) << v415;
              if (v418 < 0)
              {
                v415 += 7;
                v102 = v417;
                v15 = v416++ > 8;
                if (v15)
                  goto LABEL_412;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v107) = 0;
            }
            break;
          }
LABEL_688:
          *((_DWORD *)this + 90) = v107;
          goto LABEL_821;
        case 0x33u:
          *v8 |= 0x1000000uLL;
          v110 = *((_QWORD *)a2 + 1);
          v111 = *((_QWORD *)a2 + 2);
          v112 = *(_QWORD *)a2;
          if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
          {
            v113 = 0;
            v114 = 0;
            v115 = 0;
            do
            {
              v116 = v110 + 1;
              *((_QWORD *)a2 + 1) = v110 + 1;
              v117 = *(_BYTE *)(v112 + v110);
              v115 |= (unint64_t)(v117 & 0x7F) << v113;
              if ((v117 & 0x80) == 0)
                goto LABEL_692;
              v113 += 7;
              v110 = v116;
              v15 = v114++ > 8;
            }
            while (!v15);
LABEL_419:
            v115 = 0;
            goto LABEL_692;
          }
          v419 = 0;
          v420 = 0;
          v115 = 0;
          if (v111 <= v110)
            v111 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v111 == v110)
            {
              v115 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v421 = v110 + 1;
              v422 = *(_BYTE *)(v112 + v110);
              *((_QWORD *)a2 + 1) = v421;
              v115 |= (unint64_t)(v422 & 0x7F) << v419;
              if (v422 < 0)
              {
                v419 += 7;
                v110 = v421;
                v15 = v420++ > 8;
                if (v15)
                  goto LABEL_419;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v115 = 0;
            }
            break;
          }
LABEL_692:
          *((_QWORD *)this + 25) = v115;
          goto LABEL_821;
        case 0x34u:
          *v8 |= 0x8000000uLL;
          v118 = *((_QWORD *)a2 + 1);
          v119 = *((_QWORD *)a2 + 2);
          v120 = *(_QWORD *)a2;
          if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
          {
            v121 = 0;
            v122 = 0;
            v123 = 0;
            do
            {
              v124 = v118 + 1;
              *((_QWORD *)a2 + 1) = v118 + 1;
              v125 = *(_BYTE *)(v120 + v118);
              v123 |= (unint64_t)(v125 & 0x7F) << v121;
              if ((v125 & 0x80) == 0)
                goto LABEL_696;
              v121 += 7;
              v118 = v124;
              v15 = v122++ > 8;
            }
            while (!v15);
LABEL_426:
            v123 = 0;
            goto LABEL_696;
          }
          v423 = 0;
          v424 = 0;
          v123 = 0;
          if (v119 <= v118)
            v119 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v119 == v118)
            {
              v123 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v425 = v118 + 1;
              v426 = *(_BYTE *)(v120 + v118);
              *((_QWORD *)a2 + 1) = v425;
              v123 |= (unint64_t)(v426 & 0x7F) << v423;
              if (v426 < 0)
              {
                v423 += 7;
                v118 = v425;
                v15 = v424++ > 8;
                if (v15)
                  goto LABEL_426;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v123 = 0;
            }
            break;
          }
LABEL_696:
          *((_QWORD *)this + 28) = v123;
          goto LABEL_821;
        case 0x35u:
          *v8 |= 0x2000000uLL;
          v126 = *((_QWORD *)a2 + 1);
          v127 = *((_QWORD *)a2 + 2);
          v128 = *(_QWORD *)a2;
          if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            do
            {
              v132 = v126 + 1;
              *((_QWORD *)a2 + 1) = v126 + 1;
              v133 = *(_BYTE *)(v128 + v126);
              v131 |= (unint64_t)(v133 & 0x7F) << v129;
              if ((v133 & 0x80) == 0)
                goto LABEL_700;
              v129 += 7;
              v126 = v132;
              v15 = v130++ > 8;
            }
            while (!v15);
LABEL_433:
            v131 = 0;
            goto LABEL_700;
          }
          v427 = 0;
          v428 = 0;
          v131 = 0;
          if (v127 <= v126)
            v127 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v127 == v126)
            {
              v131 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v429 = v126 + 1;
              v430 = *(_BYTE *)(v128 + v126);
              *((_QWORD *)a2 + 1) = v429;
              v131 |= (unint64_t)(v430 & 0x7F) << v427;
              if (v430 < 0)
              {
                v427 += 7;
                v126 = v429;
                v15 = v428++ > 8;
                if (v15)
                  goto LABEL_433;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v131 = 0;
            }
            break;
          }
LABEL_700:
          *((_QWORD *)this + 26) = v131;
          goto LABEL_821;
        case 0x36u:
          *v8 |= 0x4000000uLL;
          v134 = *((_QWORD *)a2 + 1);
          v135 = *((_QWORD *)a2 + 2);
          v136 = *(_QWORD *)a2;
          if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
          {
            v137 = 0;
            v138 = 0;
            v139 = 0;
            do
            {
              v140 = v134 + 1;
              *((_QWORD *)a2 + 1) = v134 + 1;
              v141 = *(_BYTE *)(v136 + v134);
              v139 |= (unint64_t)(v141 & 0x7F) << v137;
              if ((v141 & 0x80) == 0)
                goto LABEL_704;
              v137 += 7;
              v134 = v140;
              v15 = v138++ > 8;
            }
            while (!v15);
LABEL_440:
            v139 = 0;
            goto LABEL_704;
          }
          v431 = 0;
          v432 = 0;
          v139 = 0;
          if (v135 <= v134)
            v135 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v135 == v134)
            {
              v139 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v433 = v134 + 1;
              v434 = *(_BYTE *)(v136 + v134);
              *((_QWORD *)a2 + 1) = v433;
              v139 |= (unint64_t)(v434 & 0x7F) << v431;
              if (v434 < 0)
              {
                v431 += 7;
                v134 = v433;
                v15 = v432++ > 8;
                if (v15)
                  goto LABEL_440;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v139 = 0;
            }
            break;
          }
LABEL_704:
          *((_QWORD *)this + 27) = v139;
          goto LABEL_821;
        case 0x37u:
          *v8 |= 0x400000uLL;
          v142 = *((_QWORD *)a2 + 1);
          v143 = *((_QWORD *)a2 + 2);
          v144 = *(_QWORD *)a2;
          if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
          {
            v145 = 0;
            v146 = 0;
            v147 = 0;
            do
            {
              v148 = v142 + 1;
              *((_QWORD *)a2 + 1) = v142 + 1;
              v149 = *(_BYTE *)(v144 + v142);
              v147 |= (unint64_t)(v149 & 0x7F) << v145;
              if ((v149 & 0x80) == 0)
                goto LABEL_708;
              v145 += 7;
              v142 = v148;
              v15 = v146++ > 8;
            }
            while (!v15);
LABEL_447:
            v147 = 0;
            goto LABEL_708;
          }
          v435 = 0;
          v436 = 0;
          v147 = 0;
          if (v143 <= v142)
            v143 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v143 == v142)
            {
              v147 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v437 = v142 + 1;
              v438 = *(_BYTE *)(v144 + v142);
              *((_QWORD *)a2 + 1) = v437;
              v147 |= (unint64_t)(v438 & 0x7F) << v435;
              if (v438 < 0)
              {
                v435 += 7;
                v142 = v437;
                v15 = v436++ > 8;
                if (v15)
                  goto LABEL_447;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v147 = 0;
            }
            break;
          }
LABEL_708:
          *((_QWORD *)this + 23) = v147;
          goto LABEL_821;
        case 0x38u:
          *v8 |= 0x800000uLL;
          v150 = *((_QWORD *)a2 + 1);
          v151 = *((_QWORD *)a2 + 2);
          v152 = *(_QWORD *)a2;
          if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
          {
            v153 = 0;
            v154 = 0;
            v155 = 0;
            do
            {
              v156 = v150 + 1;
              *((_QWORD *)a2 + 1) = v150 + 1;
              v157 = *(_BYTE *)(v152 + v150);
              v155 |= (unint64_t)(v157 & 0x7F) << v153;
              if ((v157 & 0x80) == 0)
                goto LABEL_712;
              v153 += 7;
              v150 = v156;
              v15 = v154++ > 8;
            }
            while (!v15);
LABEL_454:
            v155 = 0;
            goto LABEL_712;
          }
          v439 = 0;
          v440 = 0;
          v155 = 0;
          if (v151 <= v150)
            v151 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v151 == v150)
            {
              v155 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v441 = v150 + 1;
              v442 = *(_BYTE *)(v152 + v150);
              *((_QWORD *)a2 + 1) = v441;
              v155 |= (unint64_t)(v442 & 0x7F) << v439;
              if (v442 < 0)
              {
                v439 += 7;
                v150 = v441;
                v15 = v440++ > 8;
                if (v15)
                  goto LABEL_454;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v155 = 0;
            }
            break;
          }
LABEL_712:
          *((_QWORD *)this + 24) = v155;
          goto LABEL_821;
        case 0x3Bu:
          *v8 |= 0x20uLL;
          v158 = *((_QWORD *)a2 + 1);
          v159 = *((_QWORD *)a2 + 2);
          v160 = *(_QWORD *)a2;
          if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
          {
            v161 = 0;
            v162 = 0;
            v163 = 0;
            do
            {
              v164 = v158 + 1;
              *((_QWORD *)a2 + 1) = v158 + 1;
              v165 = *(_BYTE *)(v160 + v158);
              v163 |= (unint64_t)(v165 & 0x7F) << v161;
              if ((v165 & 0x80) == 0)
                goto LABEL_716;
              v161 += 7;
              v158 = v164;
              v15 = v162++ > 8;
            }
            while (!v15);
LABEL_461:
            v163 = 0;
            goto LABEL_716;
          }
          v443 = 0;
          v444 = 0;
          v163 = 0;
          if (v159 <= v158)
            v159 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v159 == v158)
            {
              v163 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v445 = v158 + 1;
              v446 = *(_BYTE *)(v160 + v158);
              *((_QWORD *)a2 + 1) = v445;
              v163 |= (unint64_t)(v446 & 0x7F) << v443;
              if (v446 < 0)
              {
                v443 += 7;
                v158 = v445;
                v15 = v444++ > 8;
                if (v15)
                  goto LABEL_461;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v163 = 0;
            }
            break;
          }
LABEL_716:
          *((_QWORD *)this + 6) = v163;
          goto LABEL_821;
        case 0x3Cu:
          *v8 |= 8uLL;
          v166 = *((_QWORD *)a2 + 1);
          v167 = *((_QWORD *)a2 + 2);
          v168 = *(_QWORD *)a2;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            v169 = 0;
            v170 = 0;
            v171 = 0;
            do
            {
              v172 = v166 + 1;
              *((_QWORD *)a2 + 1) = v166 + 1;
              v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0)
                goto LABEL_720;
              v169 += 7;
              v166 = v172;
              v15 = v170++ > 8;
            }
            while (!v15);
LABEL_468:
            v171 = 0;
            goto LABEL_720;
          }
          v447 = 0;
          v448 = 0;
          v171 = 0;
          if (v167 <= v166)
            v167 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v167 == v166)
            {
              v171 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v449 = v166 + 1;
              v450 = *(_BYTE *)(v168 + v166);
              *((_QWORD *)a2 + 1) = v449;
              v171 |= (unint64_t)(v450 & 0x7F) << v447;
              if (v450 < 0)
              {
                v447 += 7;
                v166 = v449;
                v15 = v448++ > 8;
                if (v15)
                  goto LABEL_468;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v171 = 0;
            }
            break;
          }
LABEL_720:
          *((_QWORD *)this + 4) = v171;
          goto LABEL_821;
        case 0x3Du:
          *v8 |= 1uLL;
          v174 = *((_QWORD *)a2 + 1);
          v175 = *((_QWORD *)a2 + 2);
          v176 = *(_QWORD *)a2;
          if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
          {
            v177 = 0;
            v178 = 0;
            v179 = 0;
            do
            {
              v180 = v174 + 1;
              *((_QWORD *)a2 + 1) = v174 + 1;
              v181 = *(_BYTE *)(v176 + v174);
              v179 |= (unint64_t)(v181 & 0x7F) << v177;
              if ((v181 & 0x80) == 0)
                goto LABEL_724;
              v177 += 7;
              v174 = v180;
              v15 = v178++ > 8;
            }
            while (!v15);
LABEL_475:
            v179 = 0;
            goto LABEL_724;
          }
          v451 = 0;
          v452 = 0;
          v179 = 0;
          if (v175 <= v174)
            v175 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v175 == v174)
            {
              v179 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v453 = v174 + 1;
              v454 = *(_BYTE *)(v176 + v174);
              *((_QWORD *)a2 + 1) = v453;
              v179 |= (unint64_t)(v454 & 0x7F) << v451;
              if (v454 < 0)
              {
                v451 += 7;
                v174 = v453;
                v15 = v452++ > 8;
                if (v15)
                  goto LABEL_475;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v179 = 0;
            }
            break;
          }
LABEL_724:
          *((_QWORD *)this + 1) = v179;
          goto LABEL_821;
        case 0x3Eu:
          *v8 |= 0x40uLL;
          v182 = *((_QWORD *)a2 + 1);
          v183 = *((_QWORD *)a2 + 2);
          v184 = *(_QWORD *)a2;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            v185 = 0;
            v186 = 0;
            v187 = 0;
            do
            {
              v188 = v182 + 1;
              *((_QWORD *)a2 + 1) = v182 + 1;
              v189 = *(_BYTE *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0)
                goto LABEL_728;
              v185 += 7;
              v182 = v188;
              v15 = v186++ > 8;
            }
            while (!v15);
LABEL_482:
            v187 = 0;
            goto LABEL_728;
          }
          v455 = 0;
          v456 = 0;
          v187 = 0;
          if (v183 <= v182)
            v183 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v183 == v182)
            {
              v187 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v457 = v182 + 1;
              v458 = *(_BYTE *)(v184 + v182);
              *((_QWORD *)a2 + 1) = v457;
              v187 |= (unint64_t)(v458 & 0x7F) << v455;
              if (v458 < 0)
              {
                v455 += 7;
                v182 = v457;
                v15 = v456++ > 8;
                if (v15)
                  goto LABEL_482;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v187 = 0;
            }
            break;
          }
LABEL_728:
          *((_QWORD *)this + 7) = v187;
          goto LABEL_821;
        case 0x3Fu:
          *v8 |= 0x100uLL;
          v190 = *((_QWORD *)a2 + 1);
          v191 = *((_QWORD *)a2 + 2);
          v192 = *(_QWORD *)a2;
          if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
          {
            v193 = 0;
            v194 = 0;
            v195 = 0;
            do
            {
              v196 = v190 + 1;
              *((_QWORD *)a2 + 1) = v190 + 1;
              v197 = *(_BYTE *)(v192 + v190);
              v195 |= (unint64_t)(v197 & 0x7F) << v193;
              if ((v197 & 0x80) == 0)
                goto LABEL_732;
              v193 += 7;
              v190 = v196;
              v15 = v194++ > 8;
            }
            while (!v15);
LABEL_489:
            v195 = 0;
            goto LABEL_732;
          }
          v459 = 0;
          v460 = 0;
          v195 = 0;
          if (v191 <= v190)
            v191 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v191 == v190)
            {
              v195 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v461 = v190 + 1;
              v462 = *(_BYTE *)(v192 + v190);
              *((_QWORD *)a2 + 1) = v461;
              v195 |= (unint64_t)(v462 & 0x7F) << v459;
              if (v462 < 0)
              {
                v459 += 7;
                v190 = v461;
                v15 = v460++ > 8;
                if (v15)
                  goto LABEL_489;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v195 = 0;
            }
            break;
          }
LABEL_732:
          *((_QWORD *)this + 9) = v195;
          goto LABEL_821;
        case 0x40u:
          *v8 |= 0x10uLL;
          v198 = *((_QWORD *)a2 + 1);
          v199 = *((_QWORD *)a2 + 2);
          v200 = *(_QWORD *)a2;
          if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
          {
            v201 = 0;
            v202 = 0;
            v203 = 0;
            do
            {
              v204 = v198 + 1;
              *((_QWORD *)a2 + 1) = v198 + 1;
              v205 = *(_BYTE *)(v200 + v198);
              v203 |= (unint64_t)(v205 & 0x7F) << v201;
              if ((v205 & 0x80) == 0)
                goto LABEL_736;
              v201 += 7;
              v198 = v204;
              v15 = v202++ > 8;
            }
            while (!v15);
LABEL_496:
            v203 = 0;
            goto LABEL_736;
          }
          v463 = 0;
          v464 = 0;
          v203 = 0;
          if (v199 <= v198)
            v199 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v199 == v198)
            {
              v203 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v465 = v198 + 1;
              v466 = *(_BYTE *)(v200 + v198);
              *((_QWORD *)a2 + 1) = v465;
              v203 |= (unint64_t)(v466 & 0x7F) << v463;
              if (v466 < 0)
              {
                v463 += 7;
                v198 = v465;
                v15 = v464++ > 8;
                if (v15)
                  goto LABEL_496;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v203 = 0;
            }
            break;
          }
LABEL_736:
          *((_QWORD *)this + 5) = v203;
          goto LABEL_821;
        case 0x41u:
          *v8 |= 0x200uLL;
          v206 = *((_QWORD *)a2 + 1);
          v207 = *((_QWORD *)a2 + 2);
          v208 = *(_QWORD *)a2;
          if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
          {
            v209 = 0;
            v210 = 0;
            v211 = 0;
            do
            {
              v212 = v206 + 1;
              *((_QWORD *)a2 + 1) = v206 + 1;
              v213 = *(_BYTE *)(v208 + v206);
              v211 |= (unint64_t)(v213 & 0x7F) << v209;
              if ((v213 & 0x80) == 0)
                goto LABEL_740;
              v209 += 7;
              v206 = v212;
              v15 = v210++ > 8;
            }
            while (!v15);
LABEL_503:
            v211 = 0;
            goto LABEL_740;
          }
          v467 = 0;
          v468 = 0;
          v211 = 0;
          if (v207 <= v206)
            v207 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v207 == v206)
            {
              v211 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v469 = v206 + 1;
              v470 = *(_BYTE *)(v208 + v206);
              *((_QWORD *)a2 + 1) = v469;
              v211 |= (unint64_t)(v470 & 0x7F) << v467;
              if (v470 < 0)
              {
                v467 += 7;
                v206 = v469;
                v15 = v468++ > 8;
                if (v15)
                  goto LABEL_503;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v211 = 0;
            }
            break;
          }
LABEL_740:
          *((_QWORD *)this + 10) = v211;
          goto LABEL_821;
        case 0x42u:
          *v8 |= 0x400uLL;
          v214 = *((_QWORD *)a2 + 1);
          v215 = *((_QWORD *)a2 + 2);
          v216 = *(_QWORD *)a2;
          if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
          {
            v217 = 0;
            v218 = 0;
            v219 = 0;
            do
            {
              v220 = v214 + 1;
              *((_QWORD *)a2 + 1) = v214 + 1;
              v221 = *(_BYTE *)(v216 + v214);
              v219 |= (unint64_t)(v221 & 0x7F) << v217;
              if ((v221 & 0x80) == 0)
                goto LABEL_744;
              v217 += 7;
              v214 = v220;
              v15 = v218++ > 8;
            }
            while (!v15);
LABEL_510:
            v219 = 0;
            goto LABEL_744;
          }
          v471 = 0;
          v472 = 0;
          v219 = 0;
          if (v215 <= v214)
            v215 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v215 == v214)
            {
              v219 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v473 = v214 + 1;
              v474 = *(_BYTE *)(v216 + v214);
              *((_QWORD *)a2 + 1) = v473;
              v219 |= (unint64_t)(v474 & 0x7F) << v471;
              if (v474 < 0)
              {
                v471 += 7;
                v214 = v473;
                v15 = v472++ > 8;
                if (v15)
                  goto LABEL_510;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v219 = 0;
            }
            break;
          }
LABEL_744:
          *((_QWORD *)this + 11) = v219;
          goto LABEL_821;
        case 0x43u:
          *v8 |= 0x800uLL;
          v222 = *((_QWORD *)a2 + 1);
          v223 = *((_QWORD *)a2 + 2);
          v224 = *(_QWORD *)a2;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            v225 = 0;
            v226 = 0;
            v227 = 0;
            do
            {
              v228 = v222 + 1;
              *((_QWORD *)a2 + 1) = v222 + 1;
              v229 = *(_BYTE *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0)
                goto LABEL_748;
              v225 += 7;
              v222 = v228;
              v15 = v226++ > 8;
            }
            while (!v15);
LABEL_517:
            v227 = 0;
            goto LABEL_748;
          }
          v475 = 0;
          v476 = 0;
          v227 = 0;
          if (v223 <= v222)
            v223 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v223 == v222)
            {
              v227 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v477 = v222 + 1;
              v478 = *(_BYTE *)(v224 + v222);
              *((_QWORD *)a2 + 1) = v477;
              v227 |= (unint64_t)(v478 & 0x7F) << v475;
              if (v478 < 0)
              {
                v475 += 7;
                v222 = v477;
                v15 = v476++ > 8;
                if (v15)
                  goto LABEL_517;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v227 = 0;
            }
            break;
          }
LABEL_748:
          *((_QWORD *)this + 12) = v227;
          goto LABEL_821;
        case 0x44u:
          *v8 |= 0x4000uLL;
          v230 = *((_QWORD *)a2 + 1);
          v231 = *((_QWORD *)a2 + 2);
          v232 = *(_QWORD *)a2;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            v233 = 0;
            v234 = 0;
            v235 = 0;
            do
            {
              v236 = v230 + 1;
              *((_QWORD *)a2 + 1) = v230 + 1;
              v237 = *(_BYTE *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0)
                goto LABEL_752;
              v233 += 7;
              v230 = v236;
              v15 = v234++ > 8;
            }
            while (!v15);
LABEL_524:
            v235 = 0;
            goto LABEL_752;
          }
          v479 = 0;
          v480 = 0;
          v235 = 0;
          if (v231 <= v230)
            v231 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v231 == v230)
            {
              v235 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v481 = v230 + 1;
              v482 = *(_BYTE *)(v232 + v230);
              *((_QWORD *)a2 + 1) = v481;
              v235 |= (unint64_t)(v482 & 0x7F) << v479;
              if (v482 < 0)
              {
                v479 += 7;
                v230 = v481;
                v15 = v480++ > 8;
                if (v15)
                  goto LABEL_524;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v235 = 0;
            }
            break;
          }
LABEL_752:
          *((_QWORD *)this + 15) = v235;
          goto LABEL_821;
        case 0x45u:
          *v8 |= 2uLL;
          v238 = *((_QWORD *)a2 + 1);
          v239 = *((_QWORD *)a2 + 2);
          v240 = *(_QWORD *)a2;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            v241 = 0;
            v242 = 0;
            v243 = 0;
            do
            {
              v244 = v238 + 1;
              *((_QWORD *)a2 + 1) = v238 + 1;
              v245 = *(_BYTE *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0)
                goto LABEL_756;
              v241 += 7;
              v238 = v244;
              v15 = v242++ > 8;
            }
            while (!v15);
LABEL_531:
            v243 = 0;
            goto LABEL_756;
          }
          v483 = 0;
          v484 = 0;
          v243 = 0;
          if (v239 <= v238)
            v239 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v239 == v238)
            {
              v243 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v485 = v238 + 1;
              v486 = *(_BYTE *)(v240 + v238);
              *((_QWORD *)a2 + 1) = v485;
              v243 |= (unint64_t)(v486 & 0x7F) << v483;
              if (v486 < 0)
              {
                v483 += 7;
                v238 = v485;
                v15 = v484++ > 8;
                if (v15)
                  goto LABEL_531;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v243 = 0;
            }
            break;
          }
LABEL_756:
          *((_QWORD *)this + 2) = v243;
          goto LABEL_821;
        case 0x46u:
          *v8 |= 0x8000uLL;
          v246 = *((_QWORD *)a2 + 1);
          v247 = *((_QWORD *)a2 + 2);
          v248 = *(_QWORD *)a2;
          if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
          {
            v249 = 0;
            v250 = 0;
            v251 = 0;
            do
            {
              v252 = v246 + 1;
              *((_QWORD *)a2 + 1) = v246 + 1;
              v253 = *(_BYTE *)(v248 + v246);
              v251 |= (unint64_t)(v253 & 0x7F) << v249;
              if ((v253 & 0x80) == 0)
                goto LABEL_760;
              v249 += 7;
              v246 = v252;
              v15 = v250++ > 8;
            }
            while (!v15);
LABEL_538:
            v251 = 0;
            goto LABEL_760;
          }
          v487 = 0;
          v488 = 0;
          v251 = 0;
          if (v247 <= v246)
            v247 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v247 == v246)
            {
              v251 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v489 = v246 + 1;
              v490 = *(_BYTE *)(v248 + v246);
              *((_QWORD *)a2 + 1) = v489;
              v251 |= (unint64_t)(v490 & 0x7F) << v487;
              if (v490 < 0)
              {
                v487 += 7;
                v246 = v489;
                v15 = v488++ > 8;
                if (v15)
                  goto LABEL_538;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v251 = 0;
            }
            break;
          }
LABEL_760:
          *((_QWORD *)this + 16) = v251;
          goto LABEL_821;
        case 0x47u:
          *v8 |= 0x800000000uLL;
          v254 = *((_QWORD *)a2 + 1);
          v255 = *((_QWORD *)a2 + 2);
          v256 = *(_QWORD *)a2;
          if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
          {
            v257 = 0;
            v258 = 0;
            v259 = 0;
            do
            {
              v260 = v254 + 1;
              *((_QWORD *)a2 + 1) = v254 + 1;
              v261 = *(_BYTE *)(v256 + v254);
              v259 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0)
                goto LABEL_764;
              v257 += 7;
              v254 = v260;
              v15 = v258++ > 8;
            }
            while (!v15);
LABEL_545:
            v259 = 0;
            goto LABEL_764;
          }
          v491 = 0;
          v492 = 0;
          v259 = 0;
          if (v255 <= v254)
            v255 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v255 == v254)
            {
              v259 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v493 = v254 + 1;
              v494 = *(_BYTE *)(v256 + v254);
              *((_QWORD *)a2 + 1) = v493;
              v259 |= (unint64_t)(v494 & 0x7F) << v491;
              if (v494 < 0)
              {
                v491 += 7;
                v254 = v493;
                v15 = v492++ > 8;
                if (v15)
                  goto LABEL_545;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v259 = 0;
            }
            break;
          }
LABEL_764:
          *((_QWORD *)this + 36) = v259;
          goto LABEL_821;
        case 0x48u:
          *v8 |= 0x400000000uLL;
          v262 = *((_QWORD *)a2 + 1);
          v263 = *((_QWORD *)a2 + 2);
          v264 = *(_QWORD *)a2;
          if (v262 <= 0xFFFFFFFFFFFFFFF5 && v262 + 10 <= v263)
          {
            v265 = 0;
            v266 = 0;
            v267 = 0;
            do
            {
              v268 = v262 + 1;
              *((_QWORD *)a2 + 1) = v262 + 1;
              v269 = *(_BYTE *)(v264 + v262);
              v267 |= (unint64_t)(v269 & 0x7F) << v265;
              if ((v269 & 0x80) == 0)
                goto LABEL_768;
              v265 += 7;
              v262 = v268;
              v15 = v266++ > 8;
            }
            while (!v15);
LABEL_552:
            v267 = 0;
            goto LABEL_768;
          }
          v495 = 0;
          v496 = 0;
          v267 = 0;
          if (v263 <= v262)
            v263 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v263 == v262)
            {
              v267 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v497 = v262 + 1;
              v498 = *(_BYTE *)(v264 + v262);
              *((_QWORD *)a2 + 1) = v497;
              v267 |= (unint64_t)(v498 & 0x7F) << v495;
              if (v498 < 0)
              {
                v495 += 7;
                v262 = v497;
                v15 = v496++ > 8;
                if (v15)
                  goto LABEL_552;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v267 = 0;
            }
            break;
          }
LABEL_768:
          *((_QWORD *)this + 35) = v267;
          goto LABEL_821;
        case 0x49u:
          *v8 |= 0x200000000uLL;
          v270 = *((_QWORD *)a2 + 1);
          v271 = *((_QWORD *)a2 + 2);
          v272 = *(_QWORD *)a2;
          if (v270 <= 0xFFFFFFFFFFFFFFF5 && v270 + 10 <= v271)
          {
            v273 = 0;
            v274 = 0;
            v275 = 0;
            do
            {
              v276 = v270 + 1;
              *((_QWORD *)a2 + 1) = v270 + 1;
              v277 = *(_BYTE *)(v272 + v270);
              v275 |= (unint64_t)(v277 & 0x7F) << v273;
              if ((v277 & 0x80) == 0)
                goto LABEL_772;
              v273 += 7;
              v270 = v276;
              v15 = v274++ > 8;
            }
            while (!v15);
LABEL_559:
            v275 = 0;
            goto LABEL_772;
          }
          v499 = 0;
          v500 = 0;
          v275 = 0;
          if (v271 <= v270)
            v271 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v271 == v270)
            {
              v275 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v501 = v270 + 1;
              v502 = *(_BYTE *)(v272 + v270);
              *((_QWORD *)a2 + 1) = v501;
              v275 |= (unint64_t)(v502 & 0x7F) << v499;
              if (v502 < 0)
              {
                v499 += 7;
                v270 = v501;
                v15 = v500++ > 8;
                if (v15)
                  goto LABEL_559;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v275 = 0;
            }
            break;
          }
LABEL_772:
          *((_QWORD *)this + 34) = v275;
          goto LABEL_821;
        case 0x4Au:
          *v8 |= (unint64_t)&_mh_execute_header;
          v278 = *((_QWORD *)a2 + 1);
          v279 = *((_QWORD *)a2 + 2);
          v280 = *(_QWORD *)a2;
          if (v278 <= 0xFFFFFFFFFFFFFFF5 && v278 + 10 <= v279)
          {
            v281 = 0;
            v282 = 0;
            v283 = 0;
            do
            {
              v284 = v278 + 1;
              *((_QWORD *)a2 + 1) = v278 + 1;
              v285 = *(_BYTE *)(v280 + v278);
              v283 |= (unint64_t)(v285 & 0x7F) << v281;
              if ((v285 & 0x80) == 0)
                goto LABEL_776;
              v281 += 7;
              v278 = v284;
              v15 = v282++ > 8;
            }
            while (!v15);
LABEL_566:
            v283 = 0;
            goto LABEL_776;
          }
          v503 = 0;
          v504 = 0;
          v283 = 0;
          if (v279 <= v278)
            v279 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v279 == v278)
            {
              v283 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v505 = v278 + 1;
              v506 = *(_BYTE *)(v280 + v278);
              *((_QWORD *)a2 + 1) = v505;
              v283 |= (unint64_t)(v506 & 0x7F) << v503;
              if (v506 < 0)
              {
                v503 += 7;
                v278 = v505;
                v15 = v504++ > 8;
                if (v15)
                  goto LABEL_566;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v283 = 0;
            }
            break;
          }
LABEL_776:
          *((_QWORD *)this + 33) = v283;
          goto LABEL_821;
        case 0x51u:
          *v8 |= 0x20000000uLL;
          v286 = *((_QWORD *)a2 + 1);
          v287 = *((_QWORD *)a2 + 2);
          v288 = *(_QWORD *)a2;
          if (v286 <= 0xFFFFFFFFFFFFFFF5 && v286 + 10 <= v287)
          {
            v289 = 0;
            v290 = 0;
            v291 = 0;
            do
            {
              v292 = v286 + 1;
              *((_QWORD *)a2 + 1) = v286 + 1;
              v293 = *(_BYTE *)(v288 + v286);
              v291 |= (unint64_t)(v293 & 0x7F) << v289;
              if ((v293 & 0x80) == 0)
                goto LABEL_780;
              v289 += 7;
              v286 = v292;
              v15 = v290++ > 8;
            }
            while (!v15);
LABEL_573:
            v291 = 0;
            goto LABEL_780;
          }
          v507 = 0;
          v508 = 0;
          v291 = 0;
          if (v287 <= v286)
            v287 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v287 == v286)
            {
              v291 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v509 = v286 + 1;
              v510 = *(_BYTE *)(v288 + v286);
              *((_QWORD *)a2 + 1) = v509;
              v291 |= (unint64_t)(v510 & 0x7F) << v507;
              if (v510 < 0)
              {
                v507 += 7;
                v286 = v509;
                v15 = v508++ > 8;
                if (v15)
                  goto LABEL_573;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v291 = 0;
            }
            break;
          }
LABEL_780:
          *((_QWORD *)this + 30) = v291;
          goto LABEL_821;
        case 0x52u:
          *v8 |= 0x10000000uLL;
          v294 = *((_QWORD *)a2 + 1);
          v295 = *((_QWORD *)a2 + 2);
          v296 = *(_QWORD *)a2;
          if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
          {
            v297 = 0;
            v298 = 0;
            v299 = 0;
            do
            {
              v300 = v294 + 1;
              *((_QWORD *)a2 + 1) = v294 + 1;
              v301 = *(_BYTE *)(v296 + v294);
              v299 |= (unint64_t)(v301 & 0x7F) << v297;
              if ((v301 & 0x80) == 0)
                goto LABEL_784;
              v297 += 7;
              v294 = v300;
              v15 = v298++ > 8;
            }
            while (!v15);
LABEL_580:
            v299 = 0;
            goto LABEL_784;
          }
          v511 = 0;
          v512 = 0;
          v299 = 0;
          if (v295 <= v294)
            v295 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v295 == v294)
            {
              v299 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v513 = v294 + 1;
              v514 = *(_BYTE *)(v296 + v294);
              *((_QWORD *)a2 + 1) = v513;
              v299 |= (unint64_t)(v514 & 0x7F) << v511;
              if (v514 < 0)
              {
                v511 += 7;
                v294 = v513;
                v15 = v512++ > 8;
                if (v15)
                  goto LABEL_580;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v299 = 0;
            }
            break;
          }
LABEL_784:
          *((_QWORD *)this + 29) = v299;
          goto LABEL_821;
        case 0x53u:
          *v8 |= 0x2000uLL;
          v302 = *((_QWORD *)a2 + 1);
          v303 = *((_QWORD *)a2 + 2);
          v304 = *(_QWORD *)a2;
          if (v302 <= 0xFFFFFFFFFFFFFFF5 && v302 + 10 <= v303)
          {
            v305 = 0;
            v306 = 0;
            v307 = 0;
            do
            {
              v308 = v302 + 1;
              *((_QWORD *)a2 + 1) = v302 + 1;
              v309 = *(_BYTE *)(v304 + v302);
              v307 |= (unint64_t)(v309 & 0x7F) << v305;
              if ((v309 & 0x80) == 0)
                goto LABEL_788;
              v305 += 7;
              v302 = v308;
              v15 = v306++ > 8;
            }
            while (!v15);
LABEL_587:
            v307 = 0;
            goto LABEL_788;
          }
          v515 = 0;
          v516 = 0;
          v307 = 0;
          if (v303 <= v302)
            v303 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v303 == v302)
            {
              v307 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v517 = v302 + 1;
              v518 = *(_BYTE *)(v304 + v302);
              *((_QWORD *)a2 + 1) = v517;
              v307 |= (unint64_t)(v518 & 0x7F) << v515;
              if (v518 < 0)
              {
                v515 += 7;
                v302 = v517;
                v15 = v516++ > 8;
                if (v15)
                  goto LABEL_587;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v307 = 0;
            }
            break;
          }
LABEL_788:
          *((_QWORD *)this + 14) = v307;
          goto LABEL_821;
        case 0x54u:
          *v8 |= 0x10000uLL;
          v310 = *((_QWORD *)a2 + 1);
          v311 = *((_QWORD *)a2 + 2);
          v312 = *(_QWORD *)a2;
          if (v310 <= 0xFFFFFFFFFFFFFFF5 && v310 + 10 <= v311)
          {
            v313 = 0;
            v314 = 0;
            v315 = 0;
            do
            {
              v316 = v310 + 1;
              *((_QWORD *)a2 + 1) = v310 + 1;
              v317 = *(_BYTE *)(v312 + v310);
              v315 |= (unint64_t)(v317 & 0x7F) << v313;
              if ((v317 & 0x80) == 0)
                goto LABEL_792;
              v313 += 7;
              v310 = v316;
              v15 = v314++ > 8;
            }
            while (!v15);
LABEL_594:
            v315 = 0;
            goto LABEL_792;
          }
          v519 = 0;
          v520 = 0;
          v315 = 0;
          if (v311 <= v310)
            v311 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v311 == v310)
            {
              v315 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v521 = v310 + 1;
              v522 = *(_BYTE *)(v312 + v310);
              *((_QWORD *)a2 + 1) = v521;
              v315 |= (unint64_t)(v522 & 0x7F) << v519;
              if (v522 < 0)
              {
                v519 += 7;
                v310 = v521;
                v15 = v520++ > 8;
                if (v15)
                  goto LABEL_594;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v315 = 0;
            }
            break;
          }
LABEL_792:
          *((_QWORD *)this + 17) = v315;
          goto LABEL_821;
        case 0x55u:
          *v8 |= 4uLL;
          v318 = *((_QWORD *)a2 + 1);
          v319 = *((_QWORD *)a2 + 2);
          v320 = *(_QWORD *)a2;
          if (v318 <= 0xFFFFFFFFFFFFFFF5 && v318 + 10 <= v319)
          {
            v321 = 0;
            v322 = 0;
            v323 = 0;
            do
            {
              v324 = v318 + 1;
              *((_QWORD *)a2 + 1) = v318 + 1;
              v325 = *(_BYTE *)(v320 + v318);
              v323 |= (unint64_t)(v325 & 0x7F) << v321;
              if ((v325 & 0x80) == 0)
                goto LABEL_796;
              v321 += 7;
              v318 = v324;
              v15 = v322++ > 8;
            }
            while (!v15);
LABEL_601:
            v323 = 0;
            goto LABEL_796;
          }
          v523 = 0;
          v524 = 0;
          v323 = 0;
          if (v319 <= v318)
            v319 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v319 == v318)
            {
              v323 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v525 = v318 + 1;
              v526 = *(_BYTE *)(v320 + v318);
              *((_QWORD *)a2 + 1) = v525;
              v323 |= (unint64_t)(v526 & 0x7F) << v523;
              if (v526 < 0)
              {
                v523 += 7;
                v318 = v525;
                v15 = v524++ > 8;
                if (v15)
                  goto LABEL_601;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v323 = 0;
            }
            break;
          }
LABEL_796:
          *((_QWORD *)this + 3) = v323;
          goto LABEL_821;
        case 0x56u:
          *v8 |= 0x40000uLL;
          v326 = *((_QWORD *)a2 + 1);
          v327 = *((_QWORD *)a2 + 2);
          v328 = *(_QWORD *)a2;
          if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
          {
            v329 = 0;
            v330 = 0;
            v331 = 0;
            do
            {
              v332 = v326 + 1;
              *((_QWORD *)a2 + 1) = v326 + 1;
              v333 = *(_BYTE *)(v328 + v326);
              v331 |= (unint64_t)(v333 & 0x7F) << v329;
              if ((v333 & 0x80) == 0)
                goto LABEL_800;
              v329 += 7;
              v326 = v332;
              v15 = v330++ > 8;
            }
            while (!v15);
LABEL_608:
            v331 = 0;
            goto LABEL_800;
          }
          v527 = 0;
          v528 = 0;
          v331 = 0;
          if (v327 <= v326)
            v327 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v327 == v326)
            {
              v331 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v529 = v326 + 1;
              v530 = *(_BYTE *)(v328 + v326);
              *((_QWORD *)a2 + 1) = v529;
              v331 |= (unint64_t)(v530 & 0x7F) << v527;
              if (v530 < 0)
              {
                v527 += 7;
                v326 = v529;
                v15 = v528++ > 8;
                if (v15)
                  goto LABEL_608;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v331 = 0;
            }
            break;
          }
LABEL_800:
          *((_QWORD *)this + 19) = v331;
          goto LABEL_821;
        case 0x57u:
          *v8 |= 0x20000uLL;
          v334 = *((_QWORD *)a2 + 1);
          v335 = *((_QWORD *)a2 + 2);
          v336 = *(_QWORD *)a2;
          if (v334 <= 0xFFFFFFFFFFFFFFF5 && v334 + 10 <= v335)
          {
            v337 = 0;
            v338 = 0;
            v339 = 0;
            do
            {
              v340 = v334 + 1;
              *((_QWORD *)a2 + 1) = v334 + 1;
              v341 = *(_BYTE *)(v336 + v334);
              v339 |= (unint64_t)(v341 & 0x7F) << v337;
              if ((v341 & 0x80) == 0)
                goto LABEL_804;
              v337 += 7;
              v334 = v340;
              v15 = v338++ > 8;
            }
            while (!v15);
LABEL_615:
            v339 = 0;
            goto LABEL_804;
          }
          v531 = 0;
          v532 = 0;
          v339 = 0;
          if (v335 <= v334)
            v335 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v335 == v334)
            {
              v339 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v533 = v334 + 1;
              v534 = *(_BYTE *)(v336 + v334);
              *((_QWORD *)a2 + 1) = v533;
              v339 |= (unint64_t)(v534 & 0x7F) << v531;
              if (v534 < 0)
              {
                v531 += 7;
                v334 = v533;
                v15 = v532++ > 8;
                if (v15)
                  goto LABEL_615;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v339 = 0;
            }
            break;
          }
LABEL_804:
          *((_QWORD *)this + 18) = v339;
          goto LABEL_821;
        case 0x58u:
          *v8 |= 0x80uLL;
          v342 = *((_QWORD *)a2 + 1);
          v343 = *((_QWORD *)a2 + 2);
          v344 = *(_QWORD *)a2;
          if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
          {
            v345 = 0;
            v346 = 0;
            v347 = 0;
            do
            {
              v348 = v342 + 1;
              *((_QWORD *)a2 + 1) = v342 + 1;
              v349 = *(_BYTE *)(v344 + v342);
              v347 |= (unint64_t)(v349 & 0x7F) << v345;
              if ((v349 & 0x80) == 0)
                goto LABEL_808;
              v345 += 7;
              v342 = v348;
              v15 = v346++ > 8;
            }
            while (!v15);
LABEL_622:
            v347 = 0;
            goto LABEL_808;
          }
          v535 = 0;
          v536 = 0;
          v347 = 0;
          if (v343 <= v342)
            v343 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v343 == v342)
            {
              v347 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v537 = v342 + 1;
              v538 = *(_BYTE *)(v344 + v342);
              *((_QWORD *)a2 + 1) = v537;
              v347 |= (unint64_t)(v538 & 0x7F) << v535;
              if (v538 < 0)
              {
                v535 += 7;
                v342 = v537;
                v15 = v536++ > 8;
                if (v15)
                  goto LABEL_622;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v347 = 0;
            }
            break;
          }
LABEL_808:
          *((_QWORD *)this + 8) = v347;
          goto LABEL_821;
        case 0x59u:
          *v8 |= 0x1000uLL;
          v350 = *((_QWORD *)a2 + 1);
          v351 = *((_QWORD *)a2 + 2);
          v352 = *(_QWORD *)a2;
          if (v350 <= 0xFFFFFFFFFFFFFFF5 && v350 + 10 <= v351)
          {
            v353 = 0;
            v354 = 0;
            v355 = 0;
            do
            {
              v356 = v350 + 1;
              *((_QWORD *)a2 + 1) = v350 + 1;
              v357 = *(_BYTE *)(v352 + v350);
              v355 |= (unint64_t)(v357 & 0x7F) << v353;
              if ((v357 & 0x80) == 0)
                goto LABEL_812;
              v353 += 7;
              v350 = v356;
              v15 = v354++ > 8;
            }
            while (!v15);
LABEL_629:
            v355 = 0;
            goto LABEL_812;
          }
          v539 = 0;
          v540 = 0;
          v355 = 0;
          if (v351 <= v350)
            v351 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v351 == v350)
            {
              v355 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v541 = v350 + 1;
              v542 = *(_BYTE *)(v352 + v350);
              *((_QWORD *)a2 + 1) = v541;
              v355 |= (unint64_t)(v542 & 0x7F) << v539;
              if (v542 < 0)
              {
                v539 += 7;
                v350 = v541;
                v15 = v540++ > 8;
                if (v15)
                  goto LABEL_629;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v355 = 0;
            }
            break;
          }
LABEL_812:
          *((_QWORD *)this + 13) = v355;
          goto LABEL_821;
        case 0x64u:
          *v8 |= 0x4000000000uLL;
          v358 = *((_QWORD *)a2 + 1);
          v359 = *((_QWORD *)a2 + 2);
          v360 = *(_QWORD *)a2;
          if (v358 <= 0xFFFFFFFFFFFFFFF5 && v358 + 10 <= v359)
          {
            v361 = 0;
            v362 = 0;
            v363 = 0;
            do
            {
              v364 = v358 + 1;
              *((_QWORD *)a2 + 1) = v358 + 1;
              v365 = *(_BYTE *)(v360 + v358);
              v363 |= (unint64_t)(v365 & 0x7F) << v361;
              if ((v365 & 0x80) == 0)
                goto LABEL_816;
              v361 += 7;
              v358 = v364;
              v15 = v362++ > 8;
            }
            while (!v15);
LABEL_636:
            v363 = 0;
            goto LABEL_816;
          }
          v543 = 0;
          v544 = 0;
          v363 = 0;
          if (v359 <= v358)
            v359 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v359 == v358)
            {
              v363 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v545 = v358 + 1;
              v546 = *(_BYTE *)(v360 + v358);
              *((_QWORD *)a2 + 1) = v545;
              v363 |= (unint64_t)(v546 & 0x7F) << v543;
              if (v546 < 0)
              {
                v543 += 7;
                v358 = v545;
                v15 = v544++ > 8;
                if (v15)
                  goto LABEL_636;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v363 = 0;
            }
            break;
          }
LABEL_816:
          *((_QWORD *)this + 39) = v363;
          goto LABEL_821;
        case 0x65u:
          *v8 |= 0x1000000000uLL;
          v366 = *((_QWORD *)a2 + 1);
          v367 = *((_QWORD *)a2 + 2);
          v368 = *(_QWORD *)a2;
          if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
          {
            v369 = 0;
            v370 = 0;
            v371 = 0;
            do
            {
              v372 = v366 + 1;
              *((_QWORD *)a2 + 1) = v366 + 1;
              v373 = *(_BYTE *)(v368 + v366);
              v371 |= (unint64_t)(v373 & 0x7F) << v369;
              if ((v373 & 0x80) == 0)
                goto LABEL_820;
              v369 += 7;
              v366 = v372;
              v15 = v370++ > 8;
            }
            while (!v15);
LABEL_643:
            v371 = 0;
            goto LABEL_820;
          }
          v547 = 0;
          v548 = 0;
          v371 = 0;
          if (v367 <= v366)
            v367 = *((_QWORD *)a2 + 1);
          break;
        case 0x66u:
          *v8 |= 0x2000000000uLL;
          v374 = *((_QWORD *)a2 + 1);
          if (v374 <= 0xFFFFFFFFFFFFFFF7 && v374 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 38) = *(_QWORD *)(*(_QWORD *)a2 + v374);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_821;
        default:
          result = PB::Reader::skip(a2, v12 >> 3, v12 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_821;
      }
      while (1)
      {
        if (v367 == v366)
        {
          v371 = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_820;
        }
        v549 = v366 + 1;
        v550 = *(_BYTE *)(v368 + v366);
        *((_QWORD *)a2 + 1) = v549;
        v371 |= (unint64_t)(v550 & 0x7F) << v547;
        if ((v550 & 0x80) == 0)
          break;
        v547 += 7;
        v366 = v549;
        v15 = v548++ > 8;
        if (v15)
          goto LABEL_643;
      }
      if (*((_BYTE *)a2 + 24))
        v371 = 0;
LABEL_820:
      *((_QWORD *)this + 37) = v371;
LABEL_821:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = this;
  v4 = (uint64_t *)(this + 364);
  v5 = *(_QWORD *)(this + 364);
  if ((v5 & 0x40000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 248), 1u);
    v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 256), 2u);
  v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 160), 0x15u);
  v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 168), 0x16u);
  v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 176), 0x2Cu);
  v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 320), 0x2Du);
  v5 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 344), 0x2Eu);
  v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 328), 0x2Fu);
  v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 336), 0x30u);
  v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 352), 0x31u);
  v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 360), 0x32u);
  v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 200), 0x33u);
  v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 224), 0x34u);
  v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 208), 0x35u);
  v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 216), 0x36u);
  v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 184), 0x37u);
  v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 192), 0x38u);
  v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0x3Bu);
  v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x3Cu);
  v5 = *v4;
  if ((*v4 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0x3Du);
  v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 0x3Eu);
  v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 72), 0x3Fu);
  v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0x40u);
  v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 80), 0x41u);
  v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 88), 0x42u);
  v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 96), 0x43u);
  v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 120), 0x44u);
  v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 0x45u);
  v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 128), 0x46u);
  v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 288), 0x47u);
  v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 280), 0x48u);
  v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 272), 0x49u);
  v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 264), 0x4Au);
  v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 240), 0x51u);
  v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 232), 0x52u);
  v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 112), 0x53u);
  v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 136), 0x54u);
  v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x55u);
  v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_40:
    if ((v5 & 0x20000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 152), 0x56u);
  v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 144), 0x57u);
  v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 64), 0x58u);
  v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 104), 0x59u);
  v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 312), 0x64u);
  v5 = *v4;
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 304), 0x66u);
  }
LABEL_90:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 296), 0x65u);
  if ((*v4 & 0x2000000000) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 304), 0x66u);
  return this;
}

BOOL CMMsl::FallDetectionReplay::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 364);
  v3 = *(_QWORD *)(a2 + 364);
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_QWORD *)(a1 + 248) != *(_QWORD *)(a2 + 248))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_QWORD *)(a1 + 256) != *(_QWORD *)(a2 + 256))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_QWORD *)(a1 + 168) != *(_QWORD *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_QWORD *)(a1 + 176) != *(_QWORD *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(_QWORD *)(a1 + 320) != *(_QWORD *)(a2 + 320))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(_QWORD *)(a1 + 344) != *(_QWORD *)(a2 + 344))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(_QWORD *)(a1 + 328) != *(_QWORD *)(a2 + 328))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(_QWORD *)(a1 + 336) != *(_QWORD *)(a2 + 336))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(_QWORD *)(a1 + 352) != *(_QWORD *)(a2 + 352))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(_DWORD *)(a1 + 360) != *(_DWORD *)(a2 + 360))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_QWORD *)(a1 + 200) != *(_QWORD *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_QWORD *)(a1 + 224) != *(_QWORD *)(a2 + 224))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_QWORD *)(a1 + 216) != *(_QWORD *)(a2 + 216))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_QWORD *)(a1 + 184) != *(_QWORD *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_QWORD *)(a1 + 192) != *(_QWORD *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_QWORD *)(a1 + 120) != *(_QWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_QWORD *)(a1 + 128) != *(_QWORD *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(_QWORD *)(a1 + 288) != *(_QWORD *)(a2 + 288))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(_QWORD *)(a1 + 280) != *(_QWORD *)(a2 + 280))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_QWORD *)(a1 + 272) != *(_QWORD *)(a2 + 272))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_QWORD *)(a1 + 264) != *(_QWORD *)(a2 + 264))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(_QWORD *)(a1 + 240) != *(_QWORD *)(a2 + 240))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_QWORD *)(a1 + 232) != *(_QWORD *)(a2 + 232))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_QWORD *)(a1 + 152) != *(_QWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_QWORD *)(a1 + 104) != *(_QWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(_QWORD *)(a1 + 312) != *(_QWORD *)(a2 + 312))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_QWORD *)(a1 + 296) != *(_QWORD *)(a2 + 296))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000000000) == 0;
  if ((v2 & 0x2000000000) != 0)
    return (v3 & 0x2000000000) != 0 && *(double *)(a1 + 304) == *(double *)(a2 + 304);
  return v4;
}

uint64_t CMMsl::FallDetectionReplay::hash_value(CMMsl::FallDetectionReplay *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)((char *)this + 364);
  if ((v1 & 0x40000000) != 0)
  {
    v2 = *((_QWORD *)this + 31);
    if ((v1 & 0x80000000) != 0)
    {
LABEL_3:
      v47 = *((_QWORD *)this + 32);
      if ((v1 & 0x80000) != 0)
        goto LABEL_4;
      goto LABEL_51;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x80000000) != 0)
      goto LABEL_3;
  }
  v47 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    v46 = *((_QWORD *)this + 20);
    if ((v1 & 0x100000) != 0)
      goto LABEL_5;
    goto LABEL_52;
  }
LABEL_51:
  v46 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_5:
    v45 = *((_QWORD *)this + 21);
    if ((v1 & 0x200000) != 0)
      goto LABEL_6;
    goto LABEL_53;
  }
LABEL_52:
  v45 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_6:
    v44 = *((_QWORD *)this + 22);
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_7;
    goto LABEL_54;
  }
LABEL_53:
  v44 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_7:
    v43 = *((_QWORD *)this + 40);
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_8;
    goto LABEL_55;
  }
LABEL_54:
  v43 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_8:
    v42 = *((_QWORD *)this + 43);
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_9;
    goto LABEL_56;
  }
LABEL_55:
  v42 = 0;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_9:
    v41 = *((_QWORD *)this + 41);
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  v41 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_10:
    v40 = *((_QWORD *)this + 42);
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  v40 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_11:
    v39 = *((_QWORD *)this + 44);
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  v39 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_12:
    v38 = *((unsigned int *)this + 90);
    if ((v1 & 0x1000000) != 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  v38 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_13:
    v37 = *((_QWORD *)this + 25);
    if ((v1 & 0x8000000) != 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  v37 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_14:
    v36 = *((_QWORD *)this + 28);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  v36 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_15:
    v35 = *((_QWORD *)this + 26);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  v35 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_16:
    v34 = *((_QWORD *)this + 27);
    if ((v1 & 0x400000) != 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  v34 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_17:
    v33 = *((_QWORD *)this + 23);
    if ((v1 & 0x800000) != 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  v33 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_18:
    v32 = *((_QWORD *)this + 24);
    if ((v1 & 0x20) != 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  v32 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_19:
    v31 = *((_QWORD *)this + 6);
    if ((v1 & 8) != 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  v31 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_20:
    v30 = *((_QWORD *)this + 4);
    if ((v1 & 1) != 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  v30 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_21:
    v3 = *((_QWORD *)this + 1);
    if ((v1 & 0x40) != 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  v3 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_22:
    v4 = *((_QWORD *)this + 7);
    if ((v1 & 0x100) != 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  v4 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_23:
    v5 = *((_QWORD *)this + 9);
    if ((v1 & 0x10) != 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  v5 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_24:
    v6 = *((_QWORD *)this + 5);
    if ((v1 & 0x200) != 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  v6 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_25:
    v7 = *((_QWORD *)this + 10);
    if ((v1 & 0x400) != 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  v7 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_26:
    v8 = *((_QWORD *)this + 11);
    if ((v1 & 0x800) != 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  v8 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_27:
    v9 = *((_QWORD *)this + 12);
    if ((v1 & 0x4000) != 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  v9 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_28:
    v10 = *((_QWORD *)this + 15);
    if ((v1 & 2) != 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  v10 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_29:
    v11 = *((_QWORD *)this + 2);
    if ((v1 & 0x8000) != 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  v11 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_30:
    v12 = *((_QWORD *)this + 16);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  v12 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_31:
    v13 = *((_QWORD *)this + 36);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  v13 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_32:
    v14 = *((_QWORD *)this + 35);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  v14 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_33:
    v15 = *((_QWORD *)this + 34);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  v15 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_34:
    v16 = *((_QWORD *)this + 33);
    if ((v1 & 0x20000000) != 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  v16 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_35:
    v17 = *((_QWORD *)this + 30);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  v17 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_36:
    v18 = *((_QWORD *)this + 29);
    if ((v1 & 0x2000) != 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  v18 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_37:
    v19 = *((_QWORD *)this + 14);
    if ((v1 & 0x10000) != 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  v19 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_38:
    v20 = *((_QWORD *)this + 17);
    if ((v1 & 4) != 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  v20 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_39:
    v21 = *((_QWORD *)this + 3);
    if ((v1 & 0x40000) != 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  v21 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_40:
    v22 = *((_QWORD *)this + 19);
    if ((v1 & 0x20000) != 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  v22 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    v23 = *((_QWORD *)this + 18);
    if ((v1 & 0x80) != 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  v23 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_42:
    v24 = *((_QWORD *)this + 8);
    if ((v1 & 0x1000) != 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  v24 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_43:
    v25 = *((_QWORD *)this + 13);
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  v25 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_44:
    v26 = *((_QWORD *)this + 39);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  v26 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_45:
    v27 = *((_QWORD *)this + 37);
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_46;
LABEL_93:
    v28 = 0.0;
    return v47 ^ v2 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(_QWORD *)&v28;
  }
LABEL_92:
  v27 = 0;
  if ((v1 & 0x2000000000) == 0)
    goto LABEL_93;
LABEL_46:
  v28 = *((double *)this + 38);
  if (v28 == 0.0)
    v28 = 0.0;
  return v47 ^ v2 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v32 ^ v31 ^ v30 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ *(_QWORD *)&v28;
}

_QWORD *CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(_QWORD *this)
{
  *this = off_100350EC8;
  *(_QWORD *)((char *)this + 156) = 0;
  return this;
}

{
  *this = off_100350EC8;
  *(_QWORD *)((char *)this + 156) = 0;
  return this;
}

void CMMsl::FallDetectionStateMachine::~FallDetectionStateMachine(CMMsl::FallDetectionStateMachine *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(CMMsl::FallDetectionStateMachine *this, const CMMsl::FallDetectionStateMachine *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  int v15;
  int v16;
  char v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  *(_QWORD *)this = off_100350EC8;
  *(_QWORD *)((char *)this + 156) = 0;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *(_QWORD *)((char *)this + 156) = 4;
    *((double *)this + 3) = result;
    v2 = *(_QWORD *)((char *)a2 + 156);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8uLL;
    *(_QWORD *)((char *)this + 156) = v3;
    *((_QWORD *)this + 4) = v5;
    v2 = *(_QWORD *)((char *)a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2uLL;
    *(_QWORD *)((char *)this + 156) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *(_QWORD *)((char *)a2 + 156);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_43;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x400uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x200uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x100uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x800uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 17) = v7;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 37) = v8;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  v9 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 18) = v9;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(result) = *((_DWORD *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 34) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(result) = *((_DWORD *)a2 + 35);
  v3 |= 0x20000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 35) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(result) = *((_DWORD *)a2 + 33);
  v3 |= 0x8000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 33) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  v10 = *((_DWORD *)a2 + 24);
  v3 |= 0x40000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 24) = v10;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x4000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x20uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 11) = v11;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  v12 = *((_BYTE *)a2 + 154);
  v3 |= 0x400000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 154) = v12;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  v13 = *((_BYTE *)a2 + 153);
  v3 |= 0x200000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 153) = v13;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x80uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 13) = v14;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 36) = v15;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  v16 = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 31) = v16;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  v17 = *((_BYTE *)a2 + 155);
  v3 |= 0x800000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 155) = v17;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  v18 = *((_BYTE *)a2 + 152);
  v3 |= (unint64_t)&_mh_execute_header;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_BYTE *)this + 152) = v18;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  v19 = *((_DWORD *)a2 + 23);
  v3 |= 0x20000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 23) = v19;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  v20 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 27) = v20;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_29:
    if ((v2 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  v21 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 28) = v21;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  v22 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 25) = v22;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  v23 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 21) = v23;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x100000) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(result) = *((_DWORD *)a2 + 29);
  v3 |= 0x800000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 29) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  v24 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 26) = v24;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(result) = *((_DWORD *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 32) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x10) == 0)
      goto LABEL_36;
    goto LABEL_70;
  }
LABEL_69:
  v25 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 30) = v25;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_36:
    if ((v2 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_71;
  }
LABEL_70:
  v26 = *((_DWORD *)a2 + 10);
  v3 |= 0x10uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 10) = v26;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x40) == 0)
  {
LABEL_37:
    if ((v2 & 0x10000) == 0)
      goto LABEL_38;
    goto LABEL_72;
  }
LABEL_71:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x40uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0)
      goto LABEL_39;
    goto LABEL_73;
  }
LABEL_72:
  v27 = *((_DWORD *)a2 + 22);
  v3 |= 0x10000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 22) = v27;
  v2 = *(_QWORD *)((char *)a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 1) == 0)
      return result;
LABEL_74:
    result = *((double *)a2 + 1);
    *(_QWORD *)((char *)this + 156) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
LABEL_73:
  v28 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000uLL;
  *(_QWORD *)((char *)this + 156) = v3;
  *((_DWORD *)this + 19) = v28;
  if ((*(_QWORD *)((_BYTE *)a2 + 156) & 1) != 0)
    goto LABEL_74;
  return result;
}

CMMsl *CMMsl::FallDetectionStateMachine::operator=(CMMsl *a1, const CMMsl::FallDetectionStateMachine *a2)
{
  CMMsl::FallDetectionStateMachine *v3;
  _BYTE v5[168];

  if (a1 != a2)
  {
    CMMsl::FallDetectionStateMachine::FallDetectionStateMachine((CMMsl::FallDetectionStateMachine *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionStateMachine *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionStateMachine *a2, CMMsl::FallDetectionStateMachine *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *(_QWORD *)((char *)this + 156);
  *(_QWORD *)((char *)this + 156) = *(_QWORD *)((char *)a2 + 156);
  *(_QWORD *)((char *)a2 + 156) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v6) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v4) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  LODWORD(v4) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v4;
  LODWORD(v6) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v6;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 154);
  *((_BYTE *)this + 154) = *((_BYTE *)a2 + 154);
  *((_BYTE *)a2 + 154) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 153);
  *((_BYTE *)this + 153) = *((_BYTE *)a2 + 153);
  *((_BYTE *)a2 + 153) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  LODWORD(v6) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  LODWORD(v6) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 155);
  *((_BYTE *)this + 155) = *((_BYTE *)a2 + 155);
  *((_BYTE *)a2 + 155) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 152);
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  *((_BYTE *)a2 + 152) = v6;
  LODWORD(v6) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LODWORD(v6) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v4) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  LODWORD(v6) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v6;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::FallDetectionStateMachine::FallDetectionStateMachine(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100350EC8;
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 156);
  *(_QWORD *)(a2 + 156) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
  *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

CMMsl *CMMsl::FallDetectionStateMachine::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallDetectionStateMachine *v3;
  _BYTE v5[168];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionStateMachine::FallDetectionStateMachine((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionStateMachine *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionStateMachine::formatText(CMMsl::FallDetectionStateMachine *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "conisderedSOS", *((_DWORD *)this + 10));
    v5 = *(_QWORD *)((char *)this + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps", *((_DWORD *)this + 11));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "didCancelSOS", *((_BYTE *)this + 152));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "distanceTraveled", *((float *)this + 12));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "fallAlertUndelayedTimestamp", *((double *)this + 1));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "fallTime", *((_QWORD *)this + 2));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "fromState", *((_DWORD *)this + 13));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "gyroMaxMean", *((float *)this + 14));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 3));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isActive", *((_BYTE *)this + 153));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isStand", *((_BYTE *)this + 154));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "magnitudeDiffUnity", *((float *)this + 15));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "maxAccelStdAxis", *((float *)this + 16));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "maxNumQuiescentBins", *((_DWORD *)this + 17));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "maxNumStaticBins", *((_DWORD *)this + 18));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "nominalQuiescentThreshold", *((_DWORD *)this + 19));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "normalizedIQR", *((float *)this + 20));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "numActiveBins", *((_DWORD *)this + 21));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "numCyclingEpochs", *((_DWORD *)this + 22));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "numNonzeroStepEpochs", *((_DWORD *)this + 23));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "numPeaks", *((_DWORD *)this + 24));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "numQuiescentBins", *((_DWORD *)this + 25));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v5 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "numSharpPeaks", *((_DWORD *)this + 26));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "numStandBins", *((_DWORD *)this + 27));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "numStaticBins", *((_DWORD *)this + 28));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "onBodyFeature", *((float *)this + 29));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 30));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 8) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "quiescentThreshold", *((_DWORD *)this + 31));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "sensorTime", *((_QWORD *)this + 4));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "sentFallAlert", *((_BYTE *)this + 155));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "sharpPeaksDelaySpread", *((float *)this + 32));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "sumHighQPeaksInDecLowFreqFFT", *((float *)this + 33));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "sumHighQPeaksInHighFreqFFT", *((float *)this + 34));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_36;
LABEL_73:
    PB::TextFormatter::format(a2, "toState", *((_DWORD *)this + 36));
    if ((*(_QWORD *)((_BYTE *)this + 156) & 0x80000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_37;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "sumHighQPeaksInLowFreqFFT", *((float *)this + 35));
  v5 = *(_QWORD *)((char *)this + 156);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_73;
LABEL_36:
  if ((v5 & 0x80000000) != 0)
LABEL_37:
    PB::TextFormatter::format(a2, "totalNumStaticBins", *((_DWORD *)this + 37));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDetectionStateMachine::readFrom(CMMsl::FallDetectionStateMachine *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  BOOL v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  unint64_t v209;
  char v211;
  unsigned int v212;
  unint64_t v213;
  char v214;
  char v215;
  unsigned int v216;
  unint64_t v217;
  char v218;
  char v219;
  unsigned int v220;
  unint64_t v221;
  char v222;
  char v223;
  unsigned int v224;
  unint64_t v225;
  char v226;
  char v227;
  unsigned int v228;
  unint64_t v229;
  char v230;
  char v231;
  unsigned int v232;
  unint64_t v233;
  char v234;
  char v235;
  unsigned int v236;
  unint64_t v237;
  char v238;
  char v239;
  unsigned int v240;
  unint64_t v241;
  char v242;
  char v243;
  unsigned int v244;
  unint64_t v245;
  char v246;
  char v247;
  unsigned int v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  unint64_t v253;
  char v254;
  char v255;
  unsigned int v256;
  unint64_t v257;
  char v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  char v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  char v266;
  char v267;
  unsigned int v268;
  unint64_t v269;
  char v270;
  char v271;
  unsigned int v272;
  unint64_t v273;
  char v274;
  char v275;
  unsigned int v276;
  unint64_t v277;
  char v278;
  char v279;
  unsigned int v280;
  unint64_t v281;
  char v282;
  char v283;
  unsigned int v284;
  unint64_t v285;
  char v286;
  char v287;
  unsigned int v288;
  unint64_t v289;
  char v290;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)((char *)this + 156) |= 4uLL;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          goto LABEL_364;
        case 2u:
          *(_QWORD *)((char *)this + 156) |= 8uLL;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_368;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_221:
            v27 = 0;
            goto LABEL_368;
          }
          v211 = 0;
          v212 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v23 == v22)
            {
              v27 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v213 = v22 + 1;
              v214 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)a2 + 1) = v213;
              v27 |= (unint64_t)(v214 & 0x7F) << v211;
              if (v214 < 0)
              {
                v211 += 7;
                v22 = v213;
                v14 = v212++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v27 = 0;
            }
            break;
          }
LABEL_368:
          *((_QWORD *)this + 4) = v27;
          goto LABEL_210;
        case 3u:
          *(_QWORD *)((char *)this + 156) |= 2uLL;
          v30 = *((_QWORD *)a2 + 1);
          v31 = *((_QWORD *)a2 + 2);
          v32 = *(_QWORD *)a2;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)a2 + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_372;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_228:
            v35 = 0;
            goto LABEL_372;
          }
          v215 = 0;
          v216 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v31 == v30)
            {
              v35 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v217 = v30 + 1;
              v218 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)a2 + 1) = v217;
              v35 |= (unint64_t)(v218 & 0x7F) << v215;
              if (v218 < 0)
              {
                v215 += 7;
                v30 = v217;
                v14 = v216++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v35 = 0;
            }
            break;
          }
LABEL_372:
          *((_QWORD *)this + 2) = v35;
          goto LABEL_210;
        case 4u:
          *(_QWORD *)((char *)this + 156) |= 0x400uLL;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v38);
          goto LABEL_191;
        case 5u:
          *(_QWORD *)((char *)this + 156) |= 0x200uLL;
          v39 = *((_QWORD *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v39);
          goto LABEL_191;
        case 6u:
          *(_QWORD *)((char *)this + 156) |= 0x100uLL;
          v40 = *((_QWORD *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v40);
          goto LABEL_191;
        case 7u:
          *(_QWORD *)((char *)this + 156) |= 0x800uLL;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v43 = *(_QWORD *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)a2 + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_376;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v46) = 0;
            goto LABEL_376;
          }
          v219 = 0;
          v220 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v221 = v41 + 1;
              v222 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)a2 + 1) = v221;
              v46 |= (unint64_t)(v222 & 0x7F) << v219;
              if (v222 < 0)
              {
                v219 += 7;
                v41 = v221;
                v14 = v220++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_376:
          *((_DWORD *)this + 17) = v46;
          goto LABEL_210;
        case 8u:
          *(_QWORD *)((char *)this + 156) |= 0x80000000uLL;
          v49 = *((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
          v51 = *(_QWORD *)a2;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            do
            {
              v55 = v49 + 1;
              *((_QWORD *)a2 + 1) = v49 + 1;
              v56 = *(_BYTE *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0)
                goto LABEL_380;
              v52 += 7;
              v49 = v55;
              v14 = v53++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v54) = 0;
            goto LABEL_380;
          }
          v223 = 0;
          v224 = 0;
          v54 = 0;
          if (v50 <= v49)
            v50 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v225 = v49 + 1;
              v226 = *(_BYTE *)(v51 + v49);
              *((_QWORD *)a2 + 1) = v225;
              v54 |= (unint64_t)(v226 & 0x7F) << v223;
              if (v226 < 0)
              {
                v223 += 7;
                v49 = v225;
                v14 = v224++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v54) = 0;
            }
            break;
          }
LABEL_380:
          *((_DWORD *)this + 37) = v54;
          goto LABEL_210;
        case 9u:
          *(_QWORD *)((char *)this + 156) |= 0x1000uLL;
          v57 = *((_QWORD *)a2 + 1);
          v58 = *((_QWORD *)a2 + 2);
          v59 = *(_QWORD *)a2;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)a2 + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_384;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v62) = 0;
            goto LABEL_384;
          }
          v227 = 0;
          v228 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v229 = v57 + 1;
              v230 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)a2 + 1) = v229;
              v62 |= (unint64_t)(v230 & 0x7F) << v227;
              if (v230 < 0)
              {
                v227 += 7;
                v57 = v229;
                v14 = v228++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_384:
          *((_DWORD *)this + 18) = v62;
          goto LABEL_210;
        case 0xAu:
          *(_QWORD *)((char *)this + 156) |= 0x10000000uLL;
          v65 = *((_QWORD *)a2 + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v65);
          goto LABEL_191;
        case 0xBu:
          *(_QWORD *)((char *)this + 156) |= 0x20000000uLL;
          v66 = *((_QWORD *)a2 + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v66);
          goto LABEL_191;
        case 0xCu:
          *(_QWORD *)((char *)this + 156) |= 0x8000000uLL;
          v67 = *((_QWORD *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v67);
          goto LABEL_191;
        case 0xDu:
          *(_QWORD *)((char *)this + 156) |= 0x40000uLL;
          v68 = *((_QWORD *)a2 + 1);
          v69 = *((_QWORD *)a2 + 2);
          v70 = *(_QWORD *)a2;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v74 = v68 + 1;
              *((_QWORD *)a2 + 1) = v68 + 1;
              v75 = *(_BYTE *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0)
                goto LABEL_388;
              v71 += 7;
              v68 = v74;
              v14 = v72++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v73) = 0;
            goto LABEL_388;
          }
          v231 = 0;
          v232 = 0;
          v73 = 0;
          if (v69 <= v68)
            v69 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v233 = v68 + 1;
              v234 = *(_BYTE *)(v70 + v68);
              *((_QWORD *)a2 + 1) = v233;
              v73 |= (unint64_t)(v234 & 0x7F) << v231;
              if (v234 < 0)
              {
                v231 += 7;
                v68 = v233;
                v14 = v232++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v73) = 0;
            }
            break;
          }
LABEL_388:
          *((_DWORD *)this + 24) = v73;
          goto LABEL_210;
        case 0xEu:
          *(_QWORD *)((char *)this + 156) |= 0x4000uLL;
          v76 = *((_QWORD *)a2 + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v76);
          goto LABEL_191;
        case 0xFu:
          *(_QWORD *)((char *)this + 156) |= 0x20uLL;
          v77 = *((_QWORD *)a2 + 1);
          v78 = *((_QWORD *)a2 + 2);
          v79 = *(_QWORD *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)a2 + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_392;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v82) = 0;
            goto LABEL_392;
          }
          v235 = 0;
          v236 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v237 = v77 + 1;
              v238 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)a2 + 1) = v237;
              v82 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                v77 = v237;
                v14 = v236++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_392:
          *((_DWORD *)this + 11) = v82;
          goto LABEL_210;
        case 0x10u:
          *(_QWORD *)((char *)this + 156) |= 0x400000000uLL;
          v85 = *((_QWORD *)a2 + 1);
          if (v85 >= *((_QWORD *)a2 + 2))
          {
            v88 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v86 = v85 + 1;
            v87 = *(unsigned __int8 *)(*(_QWORD *)a2 + v85);
            *((_QWORD *)a2 + 1) = v86;
            v88 = v87 != 0;
          }
          *((_BYTE *)this + 154) = v88;
          goto LABEL_210;
        case 0x11u:
          *(_QWORD *)((char *)this + 156) |= 0x200000000uLL;
          v89 = *((_QWORD *)a2 + 1);
          if (v89 >= *((_QWORD *)a2 + 2))
          {
            v92 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v90 = v89 + 1;
            v91 = *(unsigned __int8 *)(*(_QWORD *)a2 + v89);
            *((_QWORD *)a2 + 1) = v90;
            v92 = v91 != 0;
          }
          *((_BYTE *)this + 153) = v92;
          goto LABEL_210;
        case 0x12u:
          *(_QWORD *)((char *)this + 156) |= 0x80uLL;
          v93 = *((_QWORD *)a2 + 1);
          v94 = *((_QWORD *)a2 + 2);
          v95 = *(_QWORD *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)a2 + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_396;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v98) = 0;
            goto LABEL_396;
          }
          v239 = 0;
          v240 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v241 = v93 + 1;
              v242 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)a2 + 1) = v241;
              v98 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                v93 = v241;
                v14 = v240++ > 8;
                if (v14)
                  goto LABEL_274;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_396:
          *((_DWORD *)this + 13) = v98;
          goto LABEL_210;
        case 0x13u:
          *(_QWORD *)((char *)this + 156) |= 0x40000000uLL;
          v101 = *((_QWORD *)a2 + 1);
          v102 = *((_QWORD *)a2 + 2);
          v103 = *(_QWORD *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)a2 + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_400;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v106) = 0;
            goto LABEL_400;
          }
          v243 = 0;
          v244 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v245 = v101 + 1;
              v246 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)a2 + 1) = v245;
              v106 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                v101 = v245;
                v14 = v244++ > 8;
                if (v14)
                  goto LABEL_281;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_400:
          *((_DWORD *)this + 36) = v106;
          goto LABEL_210;
        case 0x14u:
          *(_QWORD *)((char *)this + 156) |= 0x2000000uLL;
          v109 = *((_QWORD *)a2 + 1);
          v110 = *((_QWORD *)a2 + 2);
          v111 = *(_QWORD *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)a2 + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_404;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v114) = 0;
            goto LABEL_404;
          }
          v247 = 0;
          v248 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v249 = v109 + 1;
              v250 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)a2 + 1) = v249;
              v114 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                v109 = v249;
                v14 = v248++ > 8;
                if (v14)
                  goto LABEL_288;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_404:
          *((_DWORD *)this + 31) = v114;
          goto LABEL_210;
        case 0x15u:
          *(_QWORD *)((char *)this + 156) |= 0x800000000uLL;
          v117 = *((_QWORD *)a2 + 1);
          if (v117 >= *((_QWORD *)a2 + 2))
          {
            v120 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v118 = v117 + 1;
            v119 = *(unsigned __int8 *)(*(_QWORD *)a2 + v117);
            *((_QWORD *)a2 + 1) = v118;
            v120 = v119 != 0;
          }
          *((_BYTE *)this + 155) = v120;
          goto LABEL_210;
        case 0x16u:
          *(_QWORD *)((char *)this + 156) |= (unint64_t)&_mh_execute_header;
          v121 = *((_QWORD *)a2 + 1);
          if (v121 >= *((_QWORD *)a2 + 2))
          {
            v124 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v122 = v121 + 1;
            v123 = *(unsigned __int8 *)(*(_QWORD *)a2 + v121);
            *((_QWORD *)a2 + 1) = v122;
            v124 = v123 != 0;
          }
          *((_BYTE *)this + 152) = v124;
          goto LABEL_210;
        case 0x17u:
          *(_QWORD *)((char *)this + 156) |= 0x20000uLL;
          v125 = *((_QWORD *)a2 + 1);
          v126 = *((_QWORD *)a2 + 2);
          v127 = *(_QWORD *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)a2 + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_408;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v130) = 0;
            goto LABEL_408;
          }
          v251 = 0;
          v252 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v253 = v125 + 1;
              v254 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)a2 + 1) = v253;
              v130 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                v125 = v253;
                v14 = v252++ > 8;
                if (v14)
                  goto LABEL_299;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_408:
          *((_DWORD *)this + 23) = v130;
          goto LABEL_210;
        case 0x18u:
          *(_QWORD *)((char *)this + 156) |= 0x200000uLL;
          v133 = *((_QWORD *)a2 + 1);
          v134 = *((_QWORD *)a2 + 2);
          v135 = *(_QWORD *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)a2 + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_412;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v138) = 0;
            goto LABEL_412;
          }
          v255 = 0;
          v256 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v257 = v133 + 1;
              v258 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)a2 + 1) = v257;
              v138 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                v133 = v257;
                v14 = v256++ > 8;
                if (v14)
                  goto LABEL_306;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_412:
          *((_DWORD *)this + 27) = v138;
          goto LABEL_210;
        case 0x19u:
          *(_QWORD *)((char *)this + 156) |= 0x400000uLL;
          v141 = *((_QWORD *)a2 + 1);
          v142 = *((_QWORD *)a2 + 2);
          v143 = *(_QWORD *)a2;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)a2 + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_416;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v146) = 0;
            goto LABEL_416;
          }
          v259 = 0;
          v260 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v261 = v141 + 1;
              v262 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)a2 + 1) = v261;
              v146 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                v141 = v261;
                v14 = v260++ > 8;
                if (v14)
                  goto LABEL_313;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_416:
          *((_DWORD *)this + 28) = v146;
          goto LABEL_210;
        case 0x1Au:
          *(_QWORD *)((char *)this + 156) |= 0x80000uLL;
          v149 = *((_QWORD *)a2 + 1);
          v150 = *((_QWORD *)a2 + 2);
          v151 = *(_QWORD *)a2;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)a2 + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_420;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v154) = 0;
            goto LABEL_420;
          }
          v263 = 0;
          v264 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v265 = v149 + 1;
              v266 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)a2 + 1) = v265;
              v154 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                v149 = v265;
                v14 = v264++ > 8;
                if (v14)
                  goto LABEL_320;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_420:
          *((_DWORD *)this + 25) = v154;
          goto LABEL_210;
        case 0x1Bu:
          *(_QWORD *)((char *)this + 156) |= 0x8000uLL;
          v157 = *((_QWORD *)a2 + 1);
          v158 = *((_QWORD *)a2 + 2);
          v159 = *(_QWORD *)a2;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)a2 + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_424;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v162) = 0;
            goto LABEL_424;
          }
          v267 = 0;
          v268 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v269 = v157 + 1;
              v270 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)a2 + 1) = v269;
              v162 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                v157 = v269;
                v14 = v268++ > 8;
                if (v14)
                  goto LABEL_327;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_424:
          *((_DWORD *)this + 21) = v162;
          goto LABEL_210;
        case 0x1Cu:
          *(_QWORD *)((char *)this + 156) |= 0x800000uLL;
          v165 = *((_QWORD *)a2 + 1);
          if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v165);
          goto LABEL_191;
        case 0x1Du:
          *(_QWORD *)((char *)this + 156) |= 0x100000uLL;
          v166 = *((_QWORD *)a2 + 1);
          v167 = *((_QWORD *)a2 + 2);
          v168 = *(_QWORD *)a2;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            v169 = 0;
            v170 = 0;
            v171 = 0;
            do
            {
              v172 = v166 + 1;
              *((_QWORD *)a2 + 1) = v166 + 1;
              v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0)
                goto LABEL_428;
              v169 += 7;
              v166 = v172;
              v14 = v170++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v171) = 0;
            goto LABEL_428;
          }
          v271 = 0;
          v272 = 0;
          v171 = 0;
          if (v167 <= v166)
            v167 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v167 == v166)
            {
              LODWORD(v171) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v273 = v166 + 1;
              v274 = *(_BYTE *)(v168 + v166);
              *((_QWORD *)a2 + 1) = v273;
              v171 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                v166 = v273;
                v14 = v272++ > 8;
                if (v14)
                  goto LABEL_334;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v171) = 0;
            }
            break;
          }
LABEL_428:
          *((_DWORD *)this + 26) = v171;
          goto LABEL_210;
        case 0x1Eu:
          *(_QWORD *)((char *)this + 156) |= 0x4000000uLL;
          v174 = *((_QWORD *)a2 + 1);
          if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v174);
          goto LABEL_191;
        case 0x1Fu:
          *(_QWORD *)((char *)this + 156) |= 0x1000000uLL;
          v175 = *((_QWORD *)a2 + 1);
          v176 = *((_QWORD *)a2 + 2);
          v177 = *(_QWORD *)a2;
          if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
          {
            v178 = 0;
            v179 = 0;
            v180 = 0;
            do
            {
              v181 = v175 + 1;
              *((_QWORD *)a2 + 1) = v175 + 1;
              v182 = *(_BYTE *)(v177 + v175);
              v180 |= (unint64_t)(v182 & 0x7F) << v178;
              if ((v182 & 0x80) == 0)
                goto LABEL_432;
              v178 += 7;
              v175 = v181;
              v14 = v179++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v180) = 0;
            goto LABEL_432;
          }
          v275 = 0;
          v276 = 0;
          v180 = 0;
          if (v176 <= v175)
            v176 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v176 == v175)
            {
              LODWORD(v180) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v277 = v175 + 1;
              v278 = *(_BYTE *)(v177 + v175);
              *((_QWORD *)a2 + 1) = v277;
              v180 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                v175 = v277;
                v14 = v276++ > 8;
                if (v14)
                  goto LABEL_341;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v180) = 0;
            }
            break;
          }
LABEL_432:
          *((_DWORD *)this + 30) = v180;
          goto LABEL_210;
        case 0x20u:
          *(_QWORD *)((char *)this + 156) |= 0x10uLL;
          v183 = *((_QWORD *)a2 + 1);
          v184 = *((_QWORD *)a2 + 2);
          v185 = *(_QWORD *)a2;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
            do
            {
              v189 = v183 + 1;
              *((_QWORD *)a2 + 1) = v183 + 1;
              v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0)
                goto LABEL_436;
              v186 += 7;
              v183 = v189;
              v14 = v187++ > 8;
            }
            while (!v14);
LABEL_348:
            LODWORD(v188) = 0;
            goto LABEL_436;
          }
          v279 = 0;
          v280 = 0;
          v188 = 0;
          if (v184 <= v183)
            v184 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v184 == v183)
            {
              LODWORD(v188) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v281 = v183 + 1;
              v282 = *(_BYTE *)(v185 + v183);
              *((_QWORD *)a2 + 1) = v281;
              v188 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                v183 = v281;
                v14 = v280++ > 8;
                if (v14)
                  goto LABEL_348;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v188) = 0;
            }
            break;
          }
LABEL_436:
          *((_DWORD *)this + 10) = v188;
          goto LABEL_210;
        case 0x21u:
          *(_QWORD *)((char *)this + 156) |= 0x40uLL;
          v191 = *((_QWORD *)a2 + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_209;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v191);
LABEL_191:
          v192 = *((_QWORD *)a2 + 1) + 4;
          goto LABEL_192;
        case 0x22u:
          *(_QWORD *)((char *)this + 156) |= 0x10000uLL;
          v193 = *((_QWORD *)a2 + 1);
          v194 = *((_QWORD *)a2 + 2);
          v195 = *(_QWORD *)a2;
          if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
          {
            v196 = 0;
            v197 = 0;
            v198 = 0;
            do
            {
              v199 = v193 + 1;
              *((_QWORD *)a2 + 1) = v193 + 1;
              v200 = *(_BYTE *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0)
                goto LABEL_440;
              v196 += 7;
              v193 = v199;
              v14 = v197++ > 8;
            }
            while (!v14);
LABEL_355:
            LODWORD(v198) = 0;
            goto LABEL_440;
          }
          v283 = 0;
          v284 = 0;
          v198 = 0;
          if (v194 <= v193)
            v194 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v198) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v285 = v193 + 1;
              v286 = *(_BYTE *)(v195 + v193);
              *((_QWORD *)a2 + 1) = v285;
              v198 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                v193 = v285;
                v14 = v284++ > 8;
                if (v14)
                  goto LABEL_355;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v198) = 0;
            }
            break;
          }
LABEL_440:
          *((_DWORD *)this + 22) = v198;
          goto LABEL_210;
        case 0x23u:
          *(_QWORD *)((char *)this + 156) |= 0x2000uLL;
          v201 = *((_QWORD *)a2 + 1);
          v202 = *((_QWORD *)a2 + 2);
          v203 = *(_QWORD *)a2;
          if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
          {
            v204 = 0;
            v205 = 0;
            v206 = 0;
            do
            {
              v207 = v201 + 1;
              *((_QWORD *)a2 + 1) = v201 + 1;
              v208 = *(_BYTE *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0)
                goto LABEL_444;
              v204 += 7;
              v201 = v207;
              v14 = v205++ > 8;
            }
            while (!v14);
LABEL_362:
            LODWORD(v206) = 0;
            goto LABEL_444;
          }
          v287 = 0;
          v288 = 0;
          v206 = 0;
          if (v202 <= v201)
            v202 = *((_QWORD *)a2 + 1);
          break;
        case 0x24u:
          *(_QWORD *)((char *)this + 156) |= 1uLL;
          v209 = *((_QWORD *)a2 + 1);
          if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v209);
LABEL_364:
            v192 = *((_QWORD *)a2 + 1) + 8;
LABEL_192:
            *((_QWORD *)a2 + 1) = v192;
          }
          else
          {
LABEL_209:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_210;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_210;
      }
      while (1)
      {
        if (v202 == v201)
        {
          LODWORD(v206) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_444;
        }
        v289 = v201 + 1;
        v290 = *(_BYTE *)(v203 + v201);
        *((_QWORD *)a2 + 1) = v289;
        v206 |= (unint64_t)(v290 & 0x7F) << v287;
        if ((v290 & 0x80) == 0)
          break;
        v287 += 7;
        v201 = v289;
        v14 = v288++ > 8;
        if (v14)
          goto LABEL_362;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v206) = 0;
LABEL_444:
      *((_DWORD *)this + 19) = v206;
LABEL_210:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionStateMachine::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 156);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_QWORD *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 2u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 3u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 4u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 5u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 6u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 7u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 8u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 9u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xAu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xBu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xCu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0xDu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xEu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0xFu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 154), 0x10u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 153), 0x11u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0x12u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 0x13u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 0x14u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 155), 0x15u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 152), 0x16u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x17u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x18u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x19u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x1Au);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x1Du);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x20u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x21u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0)
      goto LABEL_36;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x22u);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_36:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 0x24u);
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x23u);
  if ((*(_QWORD *)(v3 + 156) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 0x24u);
  return this;
}

BOOL CMMsl::FallDetectionStateMachine::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 156);
  v3 = *(_QWORD *)(a2 + 156);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 156) & 1) == 0;
  if ((v2 & 1) != 0)
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v4;
}

uint64_t CMMsl::FallDetectionStateMachine::hash_value(CMMsl::FallDetectionStateMachine *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)((char *)this + 156);
  if ((v1 & 4) != 0)
  {
    if (*((double *)this + 3) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 3);
    if ((v1 & 8) != 0)
    {
LABEL_3:
      v52 = *((_QWORD *)this + 4);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_68;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
  }
  v52 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v51 = *((_QWORD *)this + 2);
    if ((v1 & 0x400) != 0)
      goto LABEL_5;
LABEL_69:
    v50 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_8;
LABEL_70:
    v49 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_11;
LABEL_71:
    v48 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_14;
    goto LABEL_72;
  }
LABEL_68:
  v51 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_69;
LABEL_5:
  v3 = *((float *)this + 16);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v50 = v4;
  if ((v1 & 0x200) == 0)
    goto LABEL_70;
LABEL_8:
  v5 = *((float *)this + 15);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v49 = v6;
  if ((v1 & 0x100) == 0)
    goto LABEL_71;
LABEL_11:
  v7 = *((float *)this + 14);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v48 = v8;
  if ((v1 & 0x800) != 0)
  {
LABEL_14:
    v47 = *((int *)this + 17);
    if ((v1 & 0x80000000) != 0)
      goto LABEL_15;
    goto LABEL_73;
  }
LABEL_72:
  v47 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_15:
    v46 = *((int *)this + 37);
    if ((v1 & 0x1000) != 0)
      goto LABEL_16;
    goto LABEL_74;
  }
LABEL_73:
  v46 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_16:
    v45 = *((int *)this + 18);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_17;
LABEL_75:
    v44 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_20;
LABEL_76:
    v12 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_24;
LABEL_77:
    v14 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_74:
  v45 = 0;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_75;
LABEL_17:
  v9 = *((float *)this + 34);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v44 = v10;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_76;
LABEL_20:
  v11 = *((float *)this + 35);
  if (v11 == 0.0)
    v12 = 0;
  else
    v12 = LODWORD(v11);
  if ((v1 & 0x8000000) == 0)
    goto LABEL_77;
LABEL_24:
  v13 = *((float *)this + 33);
  if (v13 == 0.0)
    v14 = 0;
  else
    v14 = LODWORD(v13);
  if ((v1 & 0x40000) != 0)
  {
LABEL_28:
    v15 = *((int *)this + 24);
    if ((v1 & 0x4000) != 0)
      goto LABEL_29;
LABEL_79:
    v17 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_78:
  v15 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_79;
LABEL_29:
  v16 = *((float *)this + 20);
  if (v16 == 0.0)
    v17 = 0;
  else
    v17 = LODWORD(v16);
  if ((v1 & 0x20) != 0)
  {
LABEL_33:
    v18 = *((int *)this + 11);
    if ((v1 & 0x400000000) != 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  v18 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_34:
    v19 = *((unsigned __int8 *)this + 154);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  v19 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_35:
    v20 = *((unsigned __int8 *)this + 153);
    if ((v1 & 0x80) != 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  v20 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_36:
    v21 = *((int *)this + 13);
    if ((v1 & 0x40000000) != 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  v21 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_37:
    v22 = *((int *)this + 36);
    if ((v1 & 0x2000000) != 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  v22 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_38:
    v23 = *((int *)this + 31);
    if ((v1 & 0x800000000) != 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  v23 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_39:
    v24 = *((unsigned __int8 *)this + 155);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  v24 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_40:
    v25 = *((unsigned __int8 *)this + 152);
    if ((v1 & 0x20000) != 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  v25 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    v26 = *((int *)this + 23);
    if ((v1 & 0x200000) != 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  v26 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_42:
    v27 = *((int *)this + 27);
    if ((v1 & 0x400000) != 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  v27 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_43:
    v28 = *((int *)this + 28);
    if ((v1 & 0x80000) != 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  v28 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_44:
    v29 = *((int *)this + 25);
    if ((v1 & 0x8000) != 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  v29 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_45:
    v30 = *((int *)this + 21);
    if ((v1 & 0x800000) != 0)
      goto LABEL_46;
LABEL_93:
    v32 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_49;
    goto LABEL_94;
  }
LABEL_92:
  v30 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_93;
LABEL_46:
  v31 = *((float *)this + 29);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_49:
    v33 = *((int *)this + 26);
    if ((v1 & 0x4000000) != 0)
      goto LABEL_50;
LABEL_95:
    v35 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_53;
    goto LABEL_96;
  }
LABEL_94:
  v33 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_95;
LABEL_50:
  v34 = *((float *)this + 32);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_53:
    v36 = *((unsigned int *)this + 30);
    if ((v1 & 0x10) != 0)
      goto LABEL_54;
    goto LABEL_97;
  }
LABEL_96:
  v36 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_54:
    v37 = *((unsigned int *)this + 10);
    if ((v1 & 0x40) != 0)
      goto LABEL_55;
LABEL_98:
    v39 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_58;
    goto LABEL_99;
  }
LABEL_97:
  v37 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_98;
LABEL_55:
  v38 = *((float *)this + 12);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_58:
    v40 = *((int *)this + 22);
    if ((v1 & 0x2000) != 0)
      goto LABEL_59;
    goto LABEL_100;
  }
LABEL_99:
  v40 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_59:
    v41 = *((int *)this + 19);
    if ((v1 & 1) != 0)
      goto LABEL_60;
LABEL_101:
    v42 = 0.0;
    return v52 ^ v2 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v12 ^ v14 ^ v15 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v33 ^ v35 ^ v36 ^ v37 ^ v39 ^ v40 ^ v41 ^ *(_QWORD *)&v42;
  }
LABEL_100:
  v41 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_101;
LABEL_60:
  v42 = *((double *)this + 1);
  if (v42 == 0.0)
    v42 = 0.0;
  return v52 ^ v2 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v12 ^ v14 ^ v15 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v33 ^ v35 ^ v36 ^ v37 ^ v39 ^ v40 ^ v41 ^ *(_QWORD *)&v42;
}

double CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this)
{
  double result;

  *(_QWORD *)this = off_100350F00;
  *((_DWORD *)this + 99) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100350F00;
  *((_DWORD *)this + 99) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  return result;
}

void CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = off_100350F00;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 8) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay(this);
  operator delete();
}

CMMsl::FallDetectionWristStateReplay *CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this, const CMMsl::FallDetectionWristStateReplay *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (char *)this + 104;
  *(_OWORD *)((char *)this + 152) = 0u;
  v7 = (char *)this + 152;
  *(_OWORD *)((char *)this + 200) = 0u;
  v8 = (char *)this + 200;
  *(_QWORD *)this = off_100350F00;
  *((_DWORD *)this + 99) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 27) = 0;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80000) != 0)
  {
    v11 = *((_QWORD *)a2 + 47);
    v10 = 0x80000;
    *((_DWORD *)this + 99) = 0x80000;
    *((_QWORD *)this + 47) = v11;
    v9 = *((_DWORD *)a2 + 99);
    if ((v9 & 0x1000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v10 = 0;
  if ((v9 & 0x1000000) != 0)
  {
LABEL_5:
    v12 = *((_BYTE *)a2 + 388);
    v10 |= 0x1000000u;
    *((_DWORD *)this + 99) = v10;
    *((_BYTE *)this + 388) = v12;
    v9 = *((_DWORD *)a2 + 99);
  }
LABEL_6:
  if ((v9 & 1) != 0)
  {
    v15 = *((_QWORD *)a2 + 28);
    v10 |= 1u;
    *((_DWORD *)this + 99) = v10;
    *((_QWORD *)this + 28) = v15;
    v9 = *((_DWORD *)a2 + 99);
    if ((v9 & 0x40000) == 0)
    {
LABEL_8:
      if ((v9 & 2) == 0)
        goto LABEL_9;
      goto LABEL_42;
    }
  }
  else if ((v9 & 0x40000) == 0)
  {
    goto LABEL_8;
  }
  v16 = *((_QWORD *)a2 + 46);
  v10 |= 0x40000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 46) = v16;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 2) == 0)
  {
LABEL_9:
    if ((v9 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  v17 = *((_QWORD *)a2 + 29);
  v10 |= 2u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 29) = v17;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  v18 = *((_QWORD *)a2 + 32);
  v10 |= 0x10u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 32) = v18;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  v19 = *((_QWORD *)a2 + 33);
  v10 |= 0x20u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 33) = v19;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  v20 = *((_QWORD *)a2 + 36);
  v10 |= 0x100u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 36) = v20;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x400) == 0)
  {
LABEL_13:
    if ((v9 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  v21 = *((_QWORD *)a2 + 38);
  v10 |= 0x400u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 38) = v21;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  v22 = *((_QWORD *)a2 + 37);
  v10 |= 0x200u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 37) = v22;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80) == 0)
  {
LABEL_15:
    if ((v9 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  v23 = *((_QWORD *)a2 + 35);
  v10 |= 0x80u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 35) = v23;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x40) == 0)
  {
LABEL_16:
    if ((v9 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  v24 = *((_QWORD *)a2 + 34);
  v10 |= 0x40u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 34) = v24;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x1000) == 0)
  {
LABEL_17:
    if ((v9 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  v25 = *((_QWORD *)a2 + 40);
  v10 |= 0x1000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 40) = v25;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x800) == 0)
  {
LABEL_18:
    if ((v9 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  v26 = *((_QWORD *)a2 + 39);
  v10 |= 0x800u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 39) = v26;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20000) == 0)
  {
LABEL_19:
    if ((v9 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  v27 = *((_QWORD *)a2 + 45);
  v10 |= 0x20000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 45) = v27;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  v28 = *((_QWORD *)a2 + 44);
  v10 |= 0x10000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 44) = v28;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  v29 = *((_QWORD *)a2 + 43);
  v10 |= 0x8000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 43) = v29;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x4000) == 0)
  {
LABEL_22:
    if ((v9 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  v30 = *((_QWORD *)a2 + 42);
  v10 |= 0x4000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 42) = v30;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x2000) == 0)
  {
LABEL_23:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v31 = *((_QWORD *)a2 + 41);
  v10 |= 0x2000u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 41) = v31;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 4) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  v32 = *((_BYTE *)a2 + 395);
  v10 |= 0x80000000;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 395) = v32;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 4) == 0)
  {
LABEL_25:
    if ((v9 & 8) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  v33 = *((_QWORD *)a2 + 30);
  v10 |= 4u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 30) = v33;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 8) == 0)
  {
LABEL_26:
    if ((v9 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  v34 = *((_QWORD *)a2 + 31);
  v10 |= 8u;
  *((_DWORD *)this + 99) = v10;
  *((_QWORD *)this + 31) = v34;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x100000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  v35 = *((_BYTE *)a2 + 384);
  v10 |= 0x100000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 384) = v35;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  v36 = *((_BYTE *)a2 + 386);
  v10 |= 0x400000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 386) = v36;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v9 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  v37 = *((_BYTE *)a2 + 394);
  v10 |= 0x40000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 394) = v37;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x200000) == 0)
  {
LABEL_30:
    if ((v9 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  v38 = *((_BYTE *)a2 + 385);
  v10 |= 0x200000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 385) = v38;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x800000) == 0)
  {
LABEL_31:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  v39 = *((_BYTE *)a2 + 387);
  v10 |= 0x800000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 387) = v39;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  v40 = *((_BYTE *)a2 + 392);
  v10 |= 0x10000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 392) = v40;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v9 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  v41 = *((_BYTE *)a2 + 391);
  v10 |= 0x8000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 391) = v41;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v9 & 0x2000000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  v42 = *((_BYTE *)a2 + 393);
  v10 |= 0x20000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 393) = v42;
  v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x2000000) == 0)
  {
LABEL_35:
    if ((v9 & 0x4000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_68:
  v43 = *((_BYTE *)a2 + 389);
  v10 |= 0x2000000u;
  *((_DWORD *)this + 99) = v10;
  *((_BYTE *)this + 389) = v43;
  if ((*((_DWORD *)a2 + 99) & 0x4000000) != 0)
  {
LABEL_36:
    v13 = *((_BYTE *)a2 + 390);
    *((_DWORD *)this + 99) = v10 | 0x4000000;
    *((_BYTE *)this + 390) = v13;
  }
LABEL_37:
  if (this != a2)
  {
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
    sub_100239350(v6, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
    sub_100239350((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_100239350((char *)this + 128, *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3);
    sub_100239350((char *)this + 176, *((char **)a2 + 22), *((_QWORD *)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 3);
    sub_100239350(v7, *((char **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 3);
    sub_100239350(v8, *((char **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 3);
  }
  return this;
}

CMMsl *CMMsl::FallDetectionWristStateReplay::operator=(CMMsl *a1, const CMMsl::FallDetectionWristStateReplay *a2)
{
  CMMsl::FallDetectionWristStateReplay *v3;
  _BYTE v5[400];

  if (a1 != a2)
  {
    CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionWristStateReplay *)v5, v3);
    CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionWristStateReplay *a2, CMMsl::FallDetectionWristStateReplay *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = *((_DWORD *)this + 99);
  *((_DWORD *)this + 99) = *((_DWORD *)a2 + 99);
  *((_DWORD *)a2 + 99) = v3;
  v4 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
  *((_QWORD *)a2 + 47) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 388);
  *((_BYTE *)this + 388) = *((_BYTE *)a2 + 388);
  *((_BYTE *)a2 + 388) = v4;
  v5 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v5;
  v6 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
  *((_QWORD *)a2 + 46) = v6;
  v7 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v7;
  v8 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v8;
  v9 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v9;
  v10 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v10;
  v11 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = v11;
  v12 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v12;
  v13 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v13;
  v14 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v14;
  v15 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v15;
  v16 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v16;
  v17 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = *((_QWORD *)a2 + 45);
  *((_QWORD *)a2 + 45) = v17;
  v18 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  *((_QWORD *)a2 + 44) = v18;
  v19 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = v19;
  v20 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  *((_QWORD *)a2 + 42) = v20;
  v21 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
  *((_QWORD *)a2 + 41) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 395);
  *((_BYTE *)this + 395) = *((_BYTE *)a2 + 395);
  *((_BYTE *)a2 + 395) = v21;
  v22 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v22;
  result = *((double *)this + 31);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((double *)a2 + 31) = result;
  LOBYTE(v21) = *((_BYTE *)this + 384);
  *((_BYTE *)this + 384) = *((_BYTE *)a2 + 384);
  *((_BYTE *)a2 + 384) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 386);
  *((_BYTE *)this + 386) = *((_BYTE *)a2 + 386);
  *((_BYTE *)a2 + 386) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 394);
  *((_BYTE *)this + 394) = *((_BYTE *)a2 + 394);
  *((_BYTE *)a2 + 394) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 385);
  *((_BYTE *)this + 385) = *((_BYTE *)a2 + 385);
  *((_BYTE *)a2 + 385) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 387);
  *((_BYTE *)this + 387) = *((_BYTE *)a2 + 387);
  *((_BYTE *)a2 + 387) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 392);
  *((_BYTE *)this + 392) = *((_BYTE *)a2 + 392);
  *((_BYTE *)a2 + 392) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 391);
  *((_BYTE *)this + 391) = *((_BYTE *)a2 + 391);
  *((_BYTE *)a2 + 391) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 393);
  *((_BYTE *)this + 393) = *((_BYTE *)a2 + 393);
  *((_BYTE *)a2 + 393) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 389);
  *((_BYTE *)this + 389) = *((_BYTE *)a2 + 389);
  *((_BYTE *)a2 + 389) = v21;
  LOBYTE(v21) = *((_BYTE *)this + 390);
  *((_BYTE *)this + 390) = *((_BYTE *)a2 + 390);
  *((_BYTE *)a2 + 390) = v21;
  v24 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v24;
  v25 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v25;
  v26 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v26;
  v27 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v27;
  v28 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v28;
  v29 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v29;
  v30 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v30;
  v31 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v31;
  v32 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v32;
  v33 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v33;
  v34 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v34;
  v35 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v35;
  v36 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v36;
  v37 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v37;
  v38 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v38;
  v39 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v39;
  v40 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v40;
  v41 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v41;
  v42 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v42;
  v43 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v43;
  v44 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v44;
  v45 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v45;
  v46 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v46;
  v47 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v47;
  v48 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v48;
  v49 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v49;
  v50 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v50;
  return result;
}

uint64_t CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100350F00;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a2 + 396) = 0;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 388) = *(_BYTE *)(a2 + 388);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 395) = *(_BYTE *)(a2 + 395);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_BYTE *)(a1 + 386) = *(_BYTE *)(a2 + 386);
  *(_BYTE *)(a1 + 394) = *(_BYTE *)(a2 + 394);
  *(_BYTE *)(a1 + 385) = *(_BYTE *)(a2 + 385);
  *(_BYTE *)(a1 + 387) = *(_BYTE *)(a2 + 387);
  *(_BYTE *)(a1 + 392) = *(_BYTE *)(a2 + 392);
  *(_BYTE *)(a1 + 391) = *(_BYTE *)(a2 + 391);
  *(_BYTE *)(a1 + 393) = *(_BYTE *)(a2 + 393);
  *(_BYTE *)(a1 + 389) = *(_BYTE *)(a2 + 389);
  *(_BYTE *)(a1 + 390) = *(_BYTE *)(a2 + 390);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  sub_100239458(a1 + 104, (__n128 *)(a2 + 104));
  sub_100239458(a1 + 80, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 128, (__n128 *)(a2 + 128));
  sub_100239458(a1 + 176, (__n128 *)(a2 + 176));
  sub_100239458(a1 + 152, (__n128 *)(a2 + 152));
  sub_100239458(a1 + 200, (__n128 *)(a2 + 200));
  return a1;
}

CMMsl *CMMsl::FallDetectionWristStateReplay::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallDetectionWristStateReplay *v3;
  _BYTE v5[400];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionWristStateReplay *)v5, v3);
    CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionWristStateReplay::formatText(CMMsl::FallDetectionWristStateReplay *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  int v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  int v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  int v35;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 99);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "absoluteTimestampOfImpact", *((double *)this + 28));
    v5 = *((_DWORD *)this + 99);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_60;
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "anyOffWristAfterImpact", *((_BYTE *)this + 384));
  v5 = *((_DWORD *)this + 99);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0)
      goto LABEL_5;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "aopTimestampOfImpact", *((_QWORD *)this + 29));
  v5 = *((_DWORD *)this + 99);
  if ((v5 & 0x200000) == 0)
  {
LABEL_5:
    if ((v5 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "continuousLockedBeforeImpact", *((_BYTE *)this + 385));
  v5 = *((_DWORD *)this + 99);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "continuousOffWristBeforeImpact", *((_BYTE *)this + 386));
  if ((*((_DWORD *)this + 99) & 0x800000) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "continuousStaticAndVerticalBeforeImpact", *((_BYTE *)this + 387));
LABEL_8:
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryEndimestamp", v8);
  }
  v9 = (double *)*((_QWORD *)this + 4);
  v10 = (double *)*((_QWORD *)this + 5);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryStartTimestamp", v11);
  }
  v12 = (double *)*((_QWORD *)this + 7);
  v13 = (double *)*((_QWORD *)this + 8);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryState", v14);
  }
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x1000000) != 0)
  {
    PB::TextFormatter::format(a2, "gatingEnabled", *((_BYTE *)this + 388));
    v15 = *((_DWORD *)this + 99);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000000) == 0)
        goto LABEL_17;
      goto LABEL_66;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "gatingLockedNoMotionPreImpact", *((_BYTE *)this + 389));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "gatingMotionPreImpact", *((_BYTE *)this + 390));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "gatingOffWristPostImpact", *((_BYTE *)this + 391));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "gatingOffWristPreImpact", *((_BYTE *)this + 392));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "gatingOnCharger", *((_BYTE *)this + 393));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "hasMotionBeforeImpact", *((_BYTE *)this + 394));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "lastChargerState", *((_BYTE *)this + 395));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "lastChargerStateDuration", *((double *)this + 30));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "lastChargerStateDurationThreshold", *((double *)this + 31));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "lastCoreMotionWristState", *((_QWORD *)this + 32));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDuration", *((double *)this + 33));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostEnd", *((double *)this + 34));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostStart", *((double *)this + 35));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x100) == 0)
  {
LABEL_29:
    if ((v15 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostThreshold", *((double *)this + 36));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPreEnd", *((double *)this + 37));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPreStart", *((double *)this + 38));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "lastLockedStateDurationPreEnd", *((double *)this + 39));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "lastLockedStateDurationPreStart", *((double *)this + 40));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "lastMotionState", *((_QWORD *)this + 41));
  v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "lastMotionStateEndTime", *((_QWORD *)this + 42));
  if ((*((_DWORD *)this + 99) & 0x8000) != 0)
LABEL_36:
    PB::TextFormatter::format(a2, "lastMotionStateStartTime", *((_QWORD *)this + 43));
LABEL_37:
  v16 = (double *)*((_QWORD *)this + 10);
  v17 = (double *)*((_QWORD *)this + 11);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(a2, "lockStateHistoryEndTimestamp", v18);
  }
  v19 = (double *)*((_QWORD *)this + 13);
  v20 = (double *)*((_QWORD *)this + 14);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(a2, "lockStateHistoryStartTimestamp", v21);
  }
  v22 = (double *)*((_QWORD *)this + 16);
  v23 = (double *)*((_QWORD *)this + 17);
  while (v22 != v23)
  {
    v24 = *v22++;
    PB::TextFormatter::format(a2, "lockStateHistoryState", v24);
  }
  v25 = *((_DWORD *)this + 99);
  if ((v25 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "motionLookbackBeforeImpactEndOfInterval", *((_QWORD *)this + 44));
    v25 = *((_DWORD *)this + 99);
  }
  if ((v25 & 0x20000) != 0)
    PB::TextFormatter::format(a2, "motionLookbackBeforeImpactStartOfInterval", *((_QWORD *)this + 45));
  v26 = (double *)*((_QWORD *)this + 19);
  v27 = (double *)*((_QWORD *)this + 20);
  while (v26 != v27)
  {
    v28 = *v26++;
    PB::TextFormatter::format(a2, "motionStateHistoryEndTimestamp", v28);
  }
  v29 = (double *)*((_QWORD *)this + 22);
  v30 = (double *)*((_QWORD *)this + 23);
  while (v29 != v30)
  {
    v31 = *v29++;
    PB::TextFormatter::format(a2, "motionStateHistoryStartTimestamp", v31);
  }
  v32 = (double *)*((_QWORD *)this + 25);
  v33 = (double *)*((_QWORD *)this + 26);
  while (v32 != v33)
  {
    v34 = *v32++;
    PB::TextFormatter::format(a2, "motionStateHistoryState", v34);
  }
  v35 = *((_DWORD *)this + 99);
  if ((v35 & 0x40000) != 0)
  {
    PB::TextFormatter::format(a2, "relativeTimestampToImpact", *((double *)this + 46));
    v35 = *((_DWORD *)this + 99);
  }
  if ((v35 & 0x80000) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 47));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FallDetectionWristStateReplay::readFrom(CMMsl::FallDetectionWristStateReplay *this, PB::Reader *a2)
{
  __int16 *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  __int16 *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  _QWORD *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  BOOL v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  char v192;
  unsigned int v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char v216;
  unsigned int v217;
  uint64_t v218;
  unint64_t v219;
  char v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char v240;
  unsigned int v241;
  uint64_t v242;
  unint64_t v243;
  char v244;
  unint64_t v245;
  unint64_t v246;
  int v247;
  BOOL v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  int v253;
  BOOL v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  BOOL v266;
  unint64_t v267;
  unint64_t v268;
  int v269;
  BOOL v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  BOOL v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  BOOL v282;
  unint64_t v283;
  unint64_t v284;
  int v285;
  BOOL v286;
  unint64_t v287;
  char *v288;
  _QWORD *v289;
  unint64_t v290;
  char *v291;
  unint64_t v292;
  char *v293;
  unint64_t v294;
  char *v295;
  unint64_t v296;
  char *v297;
  unint64_t v298;
  char *v299;
  unint64_t v300;
  char *v301;
  unint64_t v302;
  char *v303;
  unint64_t v304;
  char *v305;
  char v306;
  unsigned int v307;
  unint64_t v308;
  char v309;
  char v310;
  unsigned int v311;
  unint64_t v312;
  char v313;
  char v314;
  unsigned int v315;
  unint64_t v316;
  char v317;
  char v318;
  unsigned int v319;
  unint64_t v320;
  char v321;
  char v322;
  unsigned int v323;
  unint64_t v324;
  char v325;
  char v326;
  unsigned int v327;
  unint64_t v328;
  char v329;
  char v330;
  unsigned int v331;
  unint64_t v332;
  char v333;
  char v334;
  unsigned int v335;
  unint64_t v336;
  char v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  char *v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  unint64_t v410;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  void **v422;
  void **v423;
  void **v424;
  void **v425;
  _BYTE v426[16];

  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v6 = *((unsigned __int8 *)a2 + 24);
  if (v4 < v5 && v6 == 0)
  {
    v421 = (char *)this + 216;
    v424 = (void **)((char *)this + 152);
    v425 = (void **)((char *)this + 200);
    v423 = (void **)((char *)this + 176);
    v419 = (char *)this + 192;
    v420 = (char *)this + 168;
    v422 = (void **)((char *)this + 128);
    v10 = (void **)((char *)this + 80);
    v417 = (char *)this + 96;
    v418 = (char *)this + 144;
    v11 = (void **)((char *)this + 104);
    v12 = (void **)((char *)this + 56);
    v415 = (char *)this + 72;
    v416 = (char *)this + 120;
    v13 = (void **)((char *)this + 8);
    v14 = (void **)((char *)this + 32);
    v413 = (char *)this + 48;
    v414 = (char *)this + 24;
    while (1)
    {
      v15 = *(_QWORD *)a2;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v4 + 1;
        *((_QWORD *)a2 + 1) = v4 + 1;
        v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v4 = v19;
        v21 = v17++ > 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_21:
      v27 = v18 & 7;
      if (v27 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v28 = v18 >> 3;
      switch((v18 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 99) |= 0x80000u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_542;
              v32 += 7;
              v29 = v35;
              v21 = v33++ > 8;
            }
            while (!v21);
LABEL_385:
            v34 = 0;
            goto LABEL_542;
          }
          v306 = 0;
          v307 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v308 = v29 + 1;
              v309 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v308;
              v34 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                v29 = v308;
                v21 = v307++ > 8;
                if (v21)
                  goto LABEL_385;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v34 = 0;
            }
            break;
          }
LABEL_542:
          *((_QWORD *)this + 47) = v34;
          goto LABEL_641;
        case 2u:
          *((_DWORD *)this + 99) |= 0x1000000u;
          v175 = *((_QWORD *)a2 + 1);
          if (v175 >= *((_QWORD *)a2 + 2))
          {
            v178 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v176 = v175 + 1;
            v177 = *(unsigned __int8 *)(*(_QWORD *)a2 + v175);
            *((_QWORD *)a2 + 1) = v176;
            v178 = v177 != 0;
          }
          *((_BYTE *)this + 388) = v178;
          goto LABEL_641;
        case 3u:
          *((_DWORD *)this + 99) |= 1u;
          v179 = *((_QWORD *)a2 + 1);
          if (v179 > 0xFFFFFFFFFFFFFFF7 || v179 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 28) = *(_QWORD *)(*(_QWORD *)a2 + v179);
          goto LABEL_640;
        case 4u:
          *((_DWORD *)this + 99) |= 0x40000u;
          v180 = *((_QWORD *)a2 + 1);
          if (v180 > 0xFFFFFFFFFFFFFFF7 || v180 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 46) = *(_QWORD *)(*(_QWORD *)a2 + v180);
          goto LABEL_640;
        case 5u:
          *((_DWORD *)this + 99) |= 2u;
          v181 = *((_QWORD *)a2 + 1);
          v182 = *((_QWORD *)a2 + 2);
          v183 = *(_QWORD *)a2;
          if (v181 <= 0xFFFFFFFFFFFFFFF5 && v181 + 10 <= v182)
          {
            v184 = 0;
            v185 = 0;
            v186 = 0;
            do
            {
              v187 = v181 + 1;
              *((_QWORD *)a2 + 1) = v181 + 1;
              v188 = *(_BYTE *)(v183 + v181);
              v186 |= (unint64_t)(v188 & 0x7F) << v184;
              if ((v188 & 0x80) == 0)
                goto LABEL_545;
              v184 += 7;
              v181 = v187;
              v21 = v185++ > 8;
            }
            while (!v21);
LABEL_394:
            v186 = 0;
            goto LABEL_545;
          }
          v310 = 0;
          v311 = 0;
          v186 = 0;
          if (v182 <= v181)
            v182 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v182 == v181)
            {
              v186 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v312 = v181 + 1;
              v313 = *(_BYTE *)(v183 + v181);
              *((_QWORD *)a2 + 1) = v312;
              v186 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                v181 = v312;
                v21 = v311++ > 8;
                if (v21)
                  goto LABEL_394;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v186 = 0;
            }
            break;
          }
LABEL_545:
          *((_QWORD *)this + 29) = v186;
          goto LABEL_641;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
LABEL_58:
          v55 = v3;
          v56 = v14;
          v57 = v13;
          v58 = v12;
          v59 = v11;
          v60 = v10;
          v61 = v2;
          v62 = PB::Reader::skip(a2, v28, v27, 0);
          v2 = v61;
          v10 = v60;
          v11 = v59;
          v12 = v58;
          v13 = v57;
          v14 = v56;
          v3 = v55;
          if ((v62 & 1) == 0)
            return 0;
          goto LABEL_641;
        case 0x15u:
          *((_DWORD *)this + 99) |= 0x10u;
          v189 = *((_QWORD *)a2 + 1);
          v190 = *((_QWORD *)a2 + 2);
          v191 = *(_QWORD *)a2;
          if (v189 <= 0xFFFFFFFFFFFFFFF5 && v189 + 10 <= v190)
          {
            v192 = 0;
            v193 = 0;
            v194 = 0;
            do
            {
              v195 = v189 + 1;
              *((_QWORD *)a2 + 1) = v189 + 1;
              v196 = *(_BYTE *)(v191 + v189);
              v194 |= (unint64_t)(v196 & 0x7F) << v192;
              if ((v196 & 0x80) == 0)
                goto LABEL_548;
              v192 += 7;
              v189 = v195;
              v21 = v193++ > 8;
            }
            while (!v21);
LABEL_401:
            v194 = 0;
            goto LABEL_548;
          }
          v314 = 0;
          v315 = 0;
          v194 = 0;
          if (v190 <= v189)
            v190 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v190 == v189)
            {
              v194 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v316 = v189 + 1;
              v317 = *(_BYTE *)(v191 + v189);
              *((_QWORD *)a2 + 1) = v316;
              v194 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                v189 = v316;
                v21 = v315++ > 8;
                if (v21)
                  goto LABEL_401;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v194 = 0;
            }
            break;
          }
LABEL_548:
          *((_QWORD *)this + 32) = v194;
          goto LABEL_641;
        case 0x16u:
          *((_DWORD *)this + 99) |= 0x20u;
          v197 = *((_QWORD *)a2 + 1);
          if (v197 > 0xFFFFFFFFFFFFFFF7 || v197 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 33) = *(_QWORD *)(*(_QWORD *)a2 + v197);
          goto LABEL_640;
        case 0x17u:
          *((_DWORD *)this + 99) |= 0x100u;
          v198 = *((_QWORD *)a2 + 1);
          if (v198 > 0xFFFFFFFFFFFFFFF7 || v198 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 36) = *(_QWORD *)(*(_QWORD *)a2 + v198);
          goto LABEL_640;
        case 0x18u:
          *((_DWORD *)this + 99) |= 0x400u;
          v199 = *((_QWORD *)a2 + 1);
          if (v199 > 0xFFFFFFFFFFFFFFF7 || v199 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 38) = *(_QWORD *)(*(_QWORD *)a2 + v199);
          goto LABEL_640;
        case 0x19u:
          *((_DWORD *)this + 99) |= 0x200u;
          v200 = *((_QWORD *)a2 + 1);
          if (v200 > 0xFFFFFFFFFFFFFFF7 || v200 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 37) = *(_QWORD *)(*(_QWORD *)a2 + v200);
          goto LABEL_640;
        case 0x1Au:
          *((_DWORD *)this + 99) |= 0x80u;
          v201 = *((_QWORD *)a2 + 1);
          if (v201 > 0xFFFFFFFFFFFFFFF7 || v201 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 35) = *(_QWORD *)(*(_QWORD *)a2 + v201);
          goto LABEL_640;
        case 0x1Bu:
          *((_DWORD *)this + 99) |= 0x40u;
          v202 = *((_QWORD *)a2 + 1);
          if (v202 > 0xFFFFFFFFFFFFFFF7 || v202 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 34) = *(_QWORD *)(*(_QWORD *)a2 + v202);
          goto LABEL_640;
        case 0x1Cu:
          *((_DWORD *)this + 99) |= 0x1000u;
          v203 = *((_QWORD *)a2 + 1);
          if (v203 > 0xFFFFFFFFFFFFFFF7 || v203 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 40) = *(_QWORD *)(*(_QWORD *)a2 + v203);
          goto LABEL_640;
        case 0x1Du:
          *((_DWORD *)this + 99) |= 0x800u;
          v204 = *((_QWORD *)a2 + 1);
          if (v204 > 0xFFFFFFFFFFFFFFF7 || v204 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 39) = *(_QWORD *)(*(_QWORD *)a2 + v204);
          goto LABEL_640;
        case 0x1Eu:
          *((_DWORD *)this + 99) |= 0x20000u;
          v205 = *((_QWORD *)a2 + 1);
          v206 = *((_QWORD *)a2 + 2);
          v207 = *(_QWORD *)a2;
          if (v205 <= 0xFFFFFFFFFFFFFFF5 && v205 + 10 <= v206)
          {
            v208 = 0;
            v209 = 0;
            v210 = 0;
            do
            {
              v211 = v205 + 1;
              *((_QWORD *)a2 + 1) = v205 + 1;
              v212 = *(_BYTE *)(v207 + v205);
              v210 |= (unint64_t)(v212 & 0x7F) << v208;
              if ((v212 & 0x80) == 0)
                goto LABEL_551;
              v208 += 7;
              v205 = v211;
              v21 = v209++ > 8;
            }
            while (!v21);
LABEL_408:
            v210 = 0;
            goto LABEL_551;
          }
          v318 = 0;
          v319 = 0;
          v210 = 0;
          if (v206 <= v205)
            v206 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v206 == v205)
            {
              v210 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v320 = v205 + 1;
              v321 = *(_BYTE *)(v207 + v205);
              *((_QWORD *)a2 + 1) = v320;
              v210 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                v205 = v320;
                v21 = v319++ > 8;
                if (v21)
                  goto LABEL_408;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v210 = 0;
            }
            break;
          }
LABEL_551:
          *((_QWORD *)this + 45) = v210;
          goto LABEL_641;
        case 0x1Fu:
          *((_DWORD *)this + 99) |= 0x10000u;
          v213 = *((_QWORD *)a2 + 1);
          v214 = *((_QWORD *)a2 + 2);
          v215 = *(_QWORD *)a2;
          if (v213 <= 0xFFFFFFFFFFFFFFF5 && v213 + 10 <= v214)
          {
            v216 = 0;
            v217 = 0;
            v218 = 0;
            do
            {
              v219 = v213 + 1;
              *((_QWORD *)a2 + 1) = v213 + 1;
              v220 = *(_BYTE *)(v215 + v213);
              v218 |= (unint64_t)(v220 & 0x7F) << v216;
              if ((v220 & 0x80) == 0)
                goto LABEL_554;
              v216 += 7;
              v213 = v219;
              v21 = v217++ > 8;
            }
            while (!v21);
LABEL_415:
            v218 = 0;
            goto LABEL_554;
          }
          v322 = 0;
          v323 = 0;
          v218 = 0;
          if (v214 <= v213)
            v214 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v214 == v213)
            {
              v218 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v324 = v213 + 1;
              v325 = *(_BYTE *)(v215 + v213);
              *((_QWORD *)a2 + 1) = v324;
              v218 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                v213 = v324;
                v21 = v323++ > 8;
                if (v21)
                  goto LABEL_415;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v218 = 0;
            }
            break;
          }
LABEL_554:
          *((_QWORD *)this + 44) = v218;
          goto LABEL_641;
        case 0x20u:
          *((_DWORD *)this + 99) |= 0x8000u;
          v221 = *((_QWORD *)a2 + 1);
          v222 = *((_QWORD *)a2 + 2);
          v223 = *(_QWORD *)a2;
          if (v221 <= 0xFFFFFFFFFFFFFFF5 && v221 + 10 <= v222)
          {
            v224 = 0;
            v225 = 0;
            v226 = 0;
            do
            {
              v227 = v221 + 1;
              *((_QWORD *)a2 + 1) = v221 + 1;
              v228 = *(_BYTE *)(v223 + v221);
              v226 |= (unint64_t)(v228 & 0x7F) << v224;
              if ((v228 & 0x80) == 0)
                goto LABEL_557;
              v224 += 7;
              v221 = v227;
              v21 = v225++ > 8;
            }
            while (!v21);
LABEL_422:
            v226 = 0;
            goto LABEL_557;
          }
          v326 = 0;
          v327 = 0;
          v226 = 0;
          if (v222 <= v221)
            v222 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v222 == v221)
            {
              v226 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v328 = v221 + 1;
              v329 = *(_BYTE *)(v223 + v221);
              *((_QWORD *)a2 + 1) = v328;
              v226 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                v221 = v328;
                v21 = v327++ > 8;
                if (v21)
                  goto LABEL_422;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v226 = 0;
            }
            break;
          }
LABEL_557:
          *((_QWORD *)this + 43) = v226;
          goto LABEL_641;
        case 0x21u:
          *((_DWORD *)this + 99) |= 0x4000u;
          v229 = *((_QWORD *)a2 + 1);
          v230 = *((_QWORD *)a2 + 2);
          v231 = *(_QWORD *)a2;
          if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
          {
            v232 = 0;
            v233 = 0;
            v234 = 0;
            do
            {
              v235 = v229 + 1;
              *((_QWORD *)a2 + 1) = v229 + 1;
              v236 = *(_BYTE *)(v231 + v229);
              v234 |= (unint64_t)(v236 & 0x7F) << v232;
              if ((v236 & 0x80) == 0)
                goto LABEL_560;
              v232 += 7;
              v229 = v235;
              v21 = v233++ > 8;
            }
            while (!v21);
LABEL_429:
            v234 = 0;
            goto LABEL_560;
          }
          v330 = 0;
          v331 = 0;
          v234 = 0;
          if (v230 <= v229)
            v230 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v230 == v229)
            {
              v234 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v332 = v229 + 1;
              v333 = *(_BYTE *)(v231 + v229);
              *((_QWORD *)a2 + 1) = v332;
              v234 |= (unint64_t)(v333 & 0x7F) << v330;
              if (v333 < 0)
              {
                v330 += 7;
                v229 = v332;
                v21 = v331++ > 8;
                if (v21)
                  goto LABEL_429;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v234 = 0;
            }
            break;
          }
LABEL_560:
          *((_QWORD *)this + 42) = v234;
          goto LABEL_641;
        case 0x22u:
          *((_DWORD *)this + 99) |= 0x2000u;
          v237 = *((_QWORD *)a2 + 1);
          v238 = *((_QWORD *)a2 + 2);
          v239 = *(_QWORD *)a2;
          if (v237 <= 0xFFFFFFFFFFFFFFF5 && v237 + 10 <= v238)
          {
            v240 = 0;
            v241 = 0;
            v242 = 0;
            do
            {
              v243 = v237 + 1;
              *((_QWORD *)a2 + 1) = v237 + 1;
              v244 = *(_BYTE *)(v239 + v237);
              v242 |= (unint64_t)(v244 & 0x7F) << v240;
              if ((v244 & 0x80) == 0)
                goto LABEL_563;
              v240 += 7;
              v237 = v243;
              v21 = v241++ > 8;
            }
            while (!v21);
LABEL_436:
            v242 = 0;
            goto LABEL_563;
          }
          v334 = 0;
          v335 = 0;
          v242 = 0;
          if (v238 <= v237)
            v238 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v238 == v237)
            {
              v242 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v336 = v237 + 1;
              v337 = *(_BYTE *)(v239 + v237);
              *((_QWORD *)a2 + 1) = v336;
              v242 |= (unint64_t)(v337 & 0x7F) << v334;
              if (v337 < 0)
              {
                v334 += 7;
                v237 = v336;
                v21 = v335++ > 8;
                if (v21)
                  goto LABEL_436;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v242 = 0;
            }
            break;
          }
LABEL_563:
          *((_QWORD *)this + 41) = v242;
          goto LABEL_641;
        case 0x29u:
          *((_DWORD *)this + 99) |= 0x80000000;
          v245 = *((_QWORD *)a2 + 1);
          if (v245 >= *((_QWORD *)a2 + 2))
          {
            v248 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v246 = v245 + 1;
            v247 = *(unsigned __int8 *)(*(_QWORD *)a2 + v245);
            *((_QWORD *)a2 + 1) = v246;
            v248 = v247 != 0;
          }
          *((_BYTE *)this + 395) = v248;
          goto LABEL_641;
        case 0x2Au:
          *((_DWORD *)this + 99) |= 4u;
          v249 = *((_QWORD *)a2 + 1);
          if (v249 > 0xFFFFFFFFFFFFFFF7 || v249 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_342;
          *((_QWORD *)this + 30) = *(_QWORD *)(*(_QWORD *)a2 + v249);
          goto LABEL_640;
        case 0x2Bu:
          *((_DWORD *)this + 99) |= 8u;
          v250 = *((_QWORD *)a2 + 1);
          if (v250 > 0xFFFFFFFFFFFFFFF7 || v250 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_342:
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_641;
          }
          *((_QWORD *)this + 31) = *(_QWORD *)(*(_QWORD *)a2 + v250);
          goto LABEL_640;
        case 0x33u:
          *((_DWORD *)this + 99) |= 0x100000u;
          v251 = *((_QWORD *)a2 + 1);
          if (v251 >= *((_QWORD *)a2 + 2))
          {
            v254 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v252 = v251 + 1;
            v253 = *(unsigned __int8 *)(*(_QWORD *)a2 + v251);
            *((_QWORD *)a2 + 1) = v252;
            v254 = v253 != 0;
          }
          *((_BYTE *)this + 384) = v254;
          goto LABEL_641;
        case 0x34u:
          *((_DWORD *)this + 99) |= 0x400000u;
          v255 = *((_QWORD *)a2 + 1);
          if (v255 >= *((_QWORD *)a2 + 2))
          {
            v258 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v256 = v255 + 1;
            v257 = *(unsigned __int8 *)(*(_QWORD *)a2 + v255);
            *((_QWORD *)a2 + 1) = v256;
            v258 = v257 != 0;
          }
          *((_BYTE *)this + 386) = v258;
          goto LABEL_641;
        case 0x35u:
          *((_DWORD *)this + 99) |= 0x40000000u;
          v259 = *((_QWORD *)a2 + 1);
          if (v259 >= *((_QWORD *)a2 + 2))
          {
            v262 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v260 = v259 + 1;
            v261 = *(unsigned __int8 *)(*(_QWORD *)a2 + v259);
            *((_QWORD *)a2 + 1) = v260;
            v262 = v261 != 0;
          }
          *((_BYTE *)this + 394) = v262;
          goto LABEL_641;
        case 0x36u:
          *((_DWORD *)this + 99) |= 0x200000u;
          v263 = *((_QWORD *)a2 + 1);
          if (v263 >= *((_QWORD *)a2 + 2))
          {
            v266 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v264 = v263 + 1;
            v265 = *(unsigned __int8 *)(*(_QWORD *)a2 + v263);
            *((_QWORD *)a2 + 1) = v264;
            v266 = v265 != 0;
          }
          *((_BYTE *)this + 385) = v266;
          goto LABEL_641;
        case 0x37u:
          *((_DWORD *)this + 99) |= 0x800000u;
          v267 = *((_QWORD *)a2 + 1);
          if (v267 >= *((_QWORD *)a2 + 2))
          {
            v270 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v268 = v267 + 1;
            v269 = *(unsigned __int8 *)(*(_QWORD *)a2 + v267);
            *((_QWORD *)a2 + 1) = v268;
            v270 = v269 != 0;
          }
          *((_BYTE *)this + 387) = v270;
          goto LABEL_641;
        default:
          switch((int)v28)
          {
            case 151:
              if (v27 != 2)
              {
                v288 = (char *)*((_QWORD *)this + 5);
                v287 = *((_QWORD *)this + 6);
                if ((unint64_t)v288 >= v287)
                {
                  v338 = (char *)*v14;
                  v339 = (v288 - (_BYTE *)*v14) >> 3;
                  v340 = v339 + 1;
                  if ((unint64_t)(v339 + 1) >> 61)
LABEL_651:
                    sub_10000D5F8();
                  v341 = v287 - (_QWORD)v338;
                  if (v341 >> 2 > v340)
                    v340 = v341 >> 2;
                  if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFF8)
                    v342 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v342 = v340;
                  if (v342)
                  {
                    v343 = (char *)sub_10000D60C((uint64_t)v413, v342);
                    v338 = (char *)*((_QWORD *)this + 4);
                    v288 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v343 = 0;
                  }
                  v392 = &v343[8 * v339];
                  *(_QWORD *)v392 = 0;
                  v289 = v392 + 8;
                  while (v288 != v338)
                  {
                    v393 = *((_QWORD *)v288 - 1);
                    v288 -= 8;
                    *((_QWORD *)v392 - 1) = v393;
                    v392 -= 8;
                  }
                  *((_QWORD *)this + 4) = v392;
                  *((_QWORD *)this + 5) = v289;
                  *((_QWORD *)this + 6) = &v343[8 * v342];
                  if (v338)
                    operator delete(v338);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v288 = 0;
                  v289 = v288 + 8;
                }
                *((_QWORD *)this + 5) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                return 0;
              v37 = *((_QWORD *)a2 + 1);
              v38 = *((_QWORD *)a2 + 2);
              while (v37 < v38 && !*((_BYTE *)a2 + 24))
              {
                v40 = (char *)*((_QWORD *)this + 5);
                v39 = *((_QWORD *)this + 6);
                if ((unint64_t)v40 >= v39)
                {
                  v42 = (char *)*v14;
                  v43 = (v40 - (_BYTE *)*v14) >> 3;
                  v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 61)
                    goto LABEL_651;
                  v45 = v39 - (_QWORD)v42;
                  if (v45 >> 2 > v44)
                    v44 = v45 >> 2;
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                    v46 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v46 = v44;
                  if (v46)
                  {
                    v47 = (char *)sub_10000D60C((uint64_t)v413, v46);
                    v42 = (char *)*((_QWORD *)this + 4);
                    v40 = (char *)*((_QWORD *)this + 5);
                  }
                  else
                  {
                    v47 = 0;
                  }
                  v48 = &v47[8 * v43];
                  *(_QWORD *)v48 = 0;
                  v41 = v48 + 8;
                  while (v40 != v42)
                  {
                    v49 = *((_QWORD *)v40 - 1);
                    v40 -= 8;
                    *((_QWORD *)v48 - 1) = v49;
                    v48 -= 8;
                  }
                  *((_QWORD *)this + 4) = v48;
                  *((_QWORD *)this + 5) = v41;
                  *((_QWORD *)this + 6) = &v47[8 * v46];
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *(_QWORD *)v40 = 0;
                  v41 = v40 + 8;
                }
                *((_QWORD *)this + 5) = v41;
                v50 = *((_QWORD *)a2 + 1);
                if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_252;
                *(v41 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v50);
                v38 = *((_QWORD *)a2 + 2);
                v37 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v37;
              }
              goto LABEL_253;
            case 152:
              if (v27 != 2)
              {
                v291 = (char *)*((_QWORD *)this + 2);
                v290 = *((_QWORD *)this + 3);
                if ((unint64_t)v291 >= v290)
                {
                  v344 = (char *)*v13;
                  v345 = (v291 - (_BYTE *)*v13) >> 3;
                  v346 = v345 + 1;
                  if ((unint64_t)(v345 + 1) >> 61)
LABEL_652:
                    sub_10000D5F8();
                  v347 = v290 - (_QWORD)v344;
                  if (v347 >> 2 > v346)
                    v346 = v347 >> 2;
                  if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFF8)
                    v348 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v348 = v346;
                  if (v348)
                  {
                    v349 = (char *)sub_10000D60C((uint64_t)v414, v348);
                    v344 = (char *)*((_QWORD *)this + 1);
                    v291 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v349 = 0;
                  }
                  v394 = &v349[8 * v345];
                  *(_QWORD *)v394 = 0;
                  v289 = v394 + 8;
                  while (v291 != v344)
                  {
                    v395 = *((_QWORD *)v291 - 1);
                    v291 -= 8;
                    *((_QWORD *)v394 - 1) = v395;
                    v394 -= 8;
                  }
                  *((_QWORD *)this + 1) = v394;
                  *((_QWORD *)this + 2) = v289;
                  *((_QWORD *)this + 3) = &v349[8 * v348];
                  if (v344)
                    operator delete(v344);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v291 = 0;
                  v289 = v291 + 8;
                }
                *((_QWORD *)this + 2) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                return 0;
              v63 = *((_QWORD *)a2 + 1);
              v64 = *((_QWORD *)a2 + 2);
              while (v63 < v64 && !*((_BYTE *)a2 + 24))
              {
                v66 = (char *)*((_QWORD *)this + 2);
                v65 = *((_QWORD *)this + 3);
                if ((unint64_t)v66 >= v65)
                {
                  v68 = (char *)*v13;
                  v69 = (v66 - (_BYTE *)*v13) >> 3;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 61)
                    goto LABEL_652;
                  v71 = v65 - (_QWORD)v68;
                  if (v71 >> 2 > v70)
                    v70 = v71 >> 2;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                    v72 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  if (v72)
                  {
                    v73 = (char *)sub_10000D60C((uint64_t)v414, v72);
                    v68 = (char *)*((_QWORD *)this + 1);
                    v66 = (char *)*((_QWORD *)this + 2);
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = &v73[8 * v69];
                  *(_QWORD *)v74 = 0;
                  v67 = v74 + 8;
                  while (v66 != v68)
                  {
                    v75 = *((_QWORD *)v66 - 1);
                    v66 -= 8;
                    *((_QWORD *)v74 - 1) = v75;
                    v74 -= 8;
                  }
                  *((_QWORD *)this + 1) = v74;
                  *((_QWORD *)this + 2) = v67;
                  *((_QWORD *)this + 3) = &v73[8 * v72];
                  if (v68)
                    operator delete(v68);
                }
                else
                {
                  *(_QWORD *)v66 = 0;
                  v67 = v66 + 8;
                }
                *((_QWORD *)this + 2) = v67;
                v76 = *((_QWORD *)a2 + 1);
                if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_252;
                *(v67 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v76);
                v64 = *((_QWORD *)a2 + 2);
                v63 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v63;
              }
              goto LABEL_253;
            case 153:
              if (v27 != 2)
              {
                v293 = (char *)*((_QWORD *)this + 8);
                v292 = *((_QWORD *)this + 9);
                if ((unint64_t)v293 >= v292)
                {
                  v350 = (char *)*v12;
                  v351 = (v293 - (_BYTE *)*v12) >> 3;
                  v352 = v351 + 1;
                  if ((unint64_t)(v351 + 1) >> 61)
LABEL_653:
                    sub_10000D5F8();
                  v353 = v292 - (_QWORD)v350;
                  if (v353 >> 2 > v352)
                    v352 = v353 >> 2;
                  if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
                    v354 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v354 = v352;
                  if (v354)
                  {
                    v355 = (char *)sub_10000D60C((uint64_t)v415, v354);
                    v350 = (char *)*((_QWORD *)this + 7);
                    v293 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v355 = 0;
                  }
                  v396 = &v355[8 * v351];
                  *(_QWORD *)v396 = 0;
                  v289 = v396 + 8;
                  while (v293 != v350)
                  {
                    v397 = *((_QWORD *)v293 - 1);
                    v293 -= 8;
                    *((_QWORD *)v396 - 1) = v397;
                    v396 -= 8;
                  }
                  *((_QWORD *)this + 7) = v396;
                  *((_QWORD *)this + 8) = v289;
                  *((_QWORD *)this + 9) = &v355[8 * v354];
                  if (v350)
                    operator delete(v350);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v293 = 0;
                  v289 = v293 + 8;
                }
                *((_QWORD *)this + 8) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                return 0;
              v77 = *((_QWORD *)a2 + 1);
              v78 = *((_QWORD *)a2 + 2);
              while (v77 < v78 && !*((_BYTE *)a2 + 24))
              {
                v80 = (char *)*((_QWORD *)this + 8);
                v79 = *((_QWORD *)this + 9);
                if ((unint64_t)v80 >= v79)
                {
                  v82 = (char *)*v12;
                  v83 = (v80 - (_BYTE *)*v12) >> 3;
                  v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 61)
                    goto LABEL_653;
                  v85 = v79 - (_QWORD)v82;
                  if (v85 >> 2 > v84)
                    v84 = v85 >> 2;
                  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
                    v86 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v86 = v84;
                  if (v86)
                  {
                    v87 = (char *)sub_10000D60C((uint64_t)v415, v86);
                    v82 = (char *)*((_QWORD *)this + 7);
                    v80 = (char *)*((_QWORD *)this + 8);
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v88 = &v87[8 * v83];
                  *(_QWORD *)v88 = 0;
                  v81 = v88 + 8;
                  while (v80 != v82)
                  {
                    v89 = *((_QWORD *)v80 - 1);
                    v80 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  *((_QWORD *)this + 7) = v88;
                  *((_QWORD *)this + 8) = v81;
                  *((_QWORD *)this + 9) = &v87[8 * v86];
                  if (v82)
                    operator delete(v82);
                }
                else
                {
                  *(_QWORD *)v80 = 0;
                  v81 = v80 + 8;
                }
                *((_QWORD *)this + 8) = v81;
                v90 = *((_QWORD *)a2 + 1);
                if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_252;
                *(v81 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v90);
                v78 = *((_QWORD *)a2 + 2);
                v77 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v77;
              }
              goto LABEL_253;
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
              goto LABEL_58;
            case 161:
              if (v27 != 2)
              {
                v295 = (char *)*((_QWORD *)this + 14);
                v294 = *((_QWORD *)this + 15);
                if ((unint64_t)v295 >= v294)
                {
                  v356 = (char *)*v11;
                  v357 = (v295 - (_BYTE *)*v11) >> 3;
                  v358 = v357 + 1;
                  if ((unint64_t)(v357 + 1) >> 61)
LABEL_654:
                    sub_10000D5F8();
                  v359 = v294 - (_QWORD)v356;
                  if (v359 >> 2 > v358)
                    v358 = v359 >> 2;
                  if ((unint64_t)v359 >= 0x7FFFFFFFFFFFFFF8)
                    v360 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v360 = v358;
                  if (v360)
                  {
                    v361 = (char *)sub_10000D60C((uint64_t)v416, v360);
                    v356 = (char *)*((_QWORD *)this + 13);
                    v295 = (char *)*((_QWORD *)this + 14);
                  }
                  else
                  {
                    v361 = 0;
                  }
                  v398 = &v361[8 * v357];
                  *(_QWORD *)v398 = 0;
                  v289 = v398 + 8;
                  while (v295 != v356)
                  {
                    v399 = *((_QWORD *)v295 - 1);
                    v295 -= 8;
                    *((_QWORD *)v398 - 1) = v399;
                    v398 -= 8;
                  }
                  *((_QWORD *)this + 13) = v398;
                  *((_QWORD *)this + 14) = v289;
                  *((_QWORD *)this + 15) = &v361[8 * v360];
                  if (v356)
                    operator delete(v356);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v295 = 0;
                  v289 = v295 + 8;
                }
                *((_QWORD *)this + 14) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                return 0;
              v91 = *((_QWORD *)a2 + 1);
              v92 = *((_QWORD *)a2 + 2);
              while (v91 < v92 && !*((_BYTE *)a2 + 24))
              {
                v94 = (char *)*((_QWORD *)this + 14);
                v93 = *((_QWORD *)this + 15);
                if ((unint64_t)v94 >= v93)
                {
                  v96 = (char *)*v11;
                  v97 = (v94 - (_BYTE *)*v11) >> 3;
                  v98 = v97 + 1;
                  if ((unint64_t)(v97 + 1) >> 61)
                    goto LABEL_654;
                  v99 = v93 - (_QWORD)v96;
                  if (v99 >> 2 > v98)
                    v98 = v99 >> 2;
                  if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
                    v100 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v100 = v98;
                  if (v100)
                  {
                    v101 = (char *)sub_10000D60C((uint64_t)v416, v100);
                    v96 = (char *)*((_QWORD *)this + 13);
                    v94 = (char *)*((_QWORD *)this + 14);
                  }
                  else
                  {
                    v101 = 0;
                  }
                  v102 = &v101[8 * v97];
                  *(_QWORD *)v102 = 0;
                  v95 = v102 + 8;
                  while (v94 != v96)
                  {
                    v103 = *((_QWORD *)v94 - 1);
                    v94 -= 8;
                    *((_QWORD *)v102 - 1) = v103;
                    v102 -= 8;
                  }
                  *((_QWORD *)this + 13) = v102;
                  *((_QWORD *)this + 14) = v95;
                  *((_QWORD *)this + 15) = &v101[8 * v100];
                  if (v96)
                    operator delete(v96);
                }
                else
                {
                  *(_QWORD *)v94 = 0;
                  v95 = v94 + 8;
                }
                *((_QWORD *)this + 14) = v95;
                v104 = *((_QWORD *)a2 + 1);
                if (v104 > 0xFFFFFFFFFFFFFFF7 || v104 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_252;
                *(v95 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v104);
                v92 = *((_QWORD *)a2 + 2);
                v91 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v91;
              }
              goto LABEL_253;
            case 162:
              if (v27 != 2)
              {
                v297 = (char *)*((_QWORD *)this + 11);
                v296 = *((_QWORD *)this + 12);
                if ((unint64_t)v297 >= v296)
                {
                  v362 = (char *)*v10;
                  v363 = (v297 - (_BYTE *)*v10) >> 3;
                  v364 = v363 + 1;
                  if ((unint64_t)(v363 + 1) >> 61)
LABEL_655:
                    sub_10000D5F8();
                  v365 = v296 - (_QWORD)v362;
                  if (v365 >> 2 > v364)
                    v364 = v365 >> 2;
                  if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFF8)
                    v366 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v366 = v364;
                  if (v366)
                  {
                    v367 = (char *)sub_10000D60C((uint64_t)v417, v366);
                    v362 = (char *)*((_QWORD *)this + 10);
                    v297 = (char *)*((_QWORD *)this + 11);
                  }
                  else
                  {
                    v367 = 0;
                  }
                  v400 = &v367[8 * v363];
                  *(_QWORD *)v400 = 0;
                  v289 = v400 + 8;
                  while (v297 != v362)
                  {
                    v401 = *((_QWORD *)v297 - 1);
                    v297 -= 8;
                    *((_QWORD *)v400 - 1) = v401;
                    v400 -= 8;
                  }
                  *((_QWORD *)this + 10) = v400;
                  *((_QWORD *)this + 11) = v289;
                  *((_QWORD *)this + 12) = &v367[8 * v366];
                  if (v362)
                    operator delete(v362);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v297 = 0;
                  v289 = v297 + 8;
                }
                *((_QWORD *)this + 11) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                return 0;
              v105 = *((_QWORD *)a2 + 1);
              v106 = *((_QWORD *)a2 + 2);
              while (v105 < v106 && !*((_BYTE *)a2 + 24))
              {
                v108 = (char *)*((_QWORD *)this + 11);
                v107 = *((_QWORD *)this + 12);
                if ((unint64_t)v108 >= v107)
                {
                  v110 = (char *)*v10;
                  v111 = (v108 - (_BYTE *)*v10) >> 3;
                  v112 = v111 + 1;
                  if ((unint64_t)(v111 + 1) >> 61)
                    goto LABEL_655;
                  v113 = v107 - (_QWORD)v110;
                  if (v113 >> 2 > v112)
                    v112 = v113 >> 2;
                  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                    v114 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v114 = v112;
                  if (v114)
                  {
                    v115 = (char *)sub_10000D60C((uint64_t)v417, v114);
                    v110 = (char *)*((_QWORD *)this + 10);
                    v108 = (char *)*((_QWORD *)this + 11);
                  }
                  else
                  {
                    v115 = 0;
                  }
                  v116 = &v115[8 * v111];
                  *(_QWORD *)v116 = 0;
                  v109 = v116 + 8;
                  while (v108 != v110)
                  {
                    v117 = *((_QWORD *)v108 - 1);
                    v108 -= 8;
                    *((_QWORD *)v116 - 1) = v117;
                    v116 -= 8;
                  }
                  *((_QWORD *)this + 10) = v116;
                  *((_QWORD *)this + 11) = v109;
                  *((_QWORD *)this + 12) = &v115[8 * v114];
                  if (v110)
                    operator delete(v110);
                }
                else
                {
                  *(_QWORD *)v108 = 0;
                  v109 = v108 + 8;
                }
                *((_QWORD *)this + 11) = v109;
                v118 = *((_QWORD *)a2 + 1);
                if (v118 > 0xFFFFFFFFFFFFFFF7 || v118 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_252;
                *(v109 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v118);
                v106 = *((_QWORD *)a2 + 2);
                v105 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v105;
              }
              goto LABEL_253;
            case 163:
              if (v27 != 2)
              {
                v299 = (char *)*((_QWORD *)this + 17);
                v298 = *((_QWORD *)this + 18);
                if ((unint64_t)v299 >= v298)
                {
                  v368 = (char *)*v422;
                  v369 = (v299 - (_BYTE *)*v422) >> 3;
                  v370 = v369 + 1;
                  if ((unint64_t)(v369 + 1) >> 61)
LABEL_656:
                    sub_10000D5F8();
                  v371 = v298 - (_QWORD)v368;
                  if (v371 >> 2 > v370)
                    v370 = v371 >> 2;
                  if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF8)
                    v372 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v372 = v370;
                  if (v372)
                  {
                    v373 = (char *)sub_10000D60C((uint64_t)v418, v372);
                    v368 = (char *)*((_QWORD *)this + 16);
                    v299 = (char *)*((_QWORD *)this + 17);
                  }
                  else
                  {
                    v373 = 0;
                  }
                  v402 = &v373[8 * v369];
                  *(_QWORD *)v402 = 0;
                  v289 = v402 + 8;
                  while (v299 != v368)
                  {
                    v403 = *((_QWORD *)v299 - 1);
                    v299 -= 8;
                    *((_QWORD *)v402 - 1) = v403;
                    v402 -= 8;
                  }
                  *((_QWORD *)this + 16) = v402;
                  *((_QWORD *)this + 17) = v289;
                  *((_QWORD *)this + 18) = &v373[8 * v372];
                  if (v368)
                    operator delete(v368);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v299 = 0;
                  v289 = v299 + 8;
                }
                *((_QWORD *)this + 17) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                return 0;
              v119 = *((_QWORD *)a2 + 1);
              v120 = *((_QWORD *)a2 + 2);
              while (v119 < v120 && !*((_BYTE *)a2 + 24))
              {
                v122 = (char *)*((_QWORD *)this + 17);
                v121 = *((_QWORD *)this + 18);
                if ((unint64_t)v122 >= v121)
                {
                  v124 = (char *)*v422;
                  v125 = (v122 - (_BYTE *)*v422) >> 3;
                  v126 = v125 + 1;
                  if ((unint64_t)(v125 + 1) >> 61)
                    goto LABEL_656;
                  v127 = v121 - (_QWORD)v124;
                  if (v127 >> 2 > v126)
                    v126 = v127 >> 2;
                  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
                    v128 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v128 = v126;
                  if (v128)
                  {
                    v129 = (char *)sub_10000D60C((uint64_t)v418, v128);
                    v124 = (char *)*((_QWORD *)this + 16);
                    v122 = (char *)*((_QWORD *)this + 17);
                  }
                  else
                  {
                    v129 = 0;
                  }
                  v130 = &v129[8 * v125];
                  *(_QWORD *)v130 = 0;
                  v123 = v130 + 8;
                  while (v122 != v124)
                  {
                    v131 = *((_QWORD *)v122 - 1);
                    v122 -= 8;
                    *((_QWORD *)v130 - 1) = v131;
                    v130 -= 8;
                  }
                  *((_QWORD *)this + 16) = v130;
                  *((_QWORD *)this + 17) = v123;
                  *((_QWORD *)this + 18) = &v129[8 * v128];
                  if (v124)
                    operator delete(v124);
                }
                else
                {
                  *(_QWORD *)v122 = 0;
                  v123 = v122 + 8;
                }
                *((_QWORD *)this + 17) = v123;
                v132 = *((_QWORD *)a2 + 1);
                if (v132 > 0xFFFFFFFFFFFFFFF7 || v132 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_252;
                *(v123 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v132);
                v120 = *((_QWORD *)a2 + 2);
                v119 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v119;
              }
              goto LABEL_253;
            case 164:
              if (v27 != 2)
              {
                v301 = (char *)*((_QWORD *)this + 23);
                v300 = *((_QWORD *)this + 24);
                if ((unint64_t)v301 >= v300)
                {
                  v374 = (char *)*v423;
                  v375 = (v301 - (_BYTE *)*v423) >> 3;
                  v376 = v375 + 1;
                  if ((unint64_t)(v375 + 1) >> 61)
LABEL_657:
                    sub_10000D5F8();
                  v377 = v300 - (_QWORD)v374;
                  if (v377 >> 2 > v376)
                    v376 = v377 >> 2;
                  if ((unint64_t)v377 >= 0x7FFFFFFFFFFFFFF8)
                    v378 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v378 = v376;
                  if (v378)
                  {
                    v379 = (char *)sub_10000D60C((uint64_t)v419, v378);
                    v374 = (char *)*((_QWORD *)this + 22);
                    v301 = (char *)*((_QWORD *)this + 23);
                  }
                  else
                  {
                    v379 = 0;
                  }
                  v404 = &v379[8 * v375];
                  *(_QWORD *)v404 = 0;
                  v289 = v404 + 8;
                  while (v301 != v374)
                  {
                    v405 = *((_QWORD *)v301 - 1);
                    v301 -= 8;
                    *((_QWORD *)v404 - 1) = v405;
                    v404 -= 8;
                  }
                  *((_QWORD *)this + 22) = v404;
                  *((_QWORD *)this + 23) = v289;
                  *((_QWORD *)this + 24) = &v379[8 * v378];
                  if (v374)
                    operator delete(v374);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v301 = 0;
                  v289 = v301 + 8;
                }
                *((_QWORD *)this + 23) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                return 0;
              v133 = *((_QWORD *)a2 + 1);
              v134 = *((_QWORD *)a2 + 2);
              while (v133 < v134 && !*((_BYTE *)a2 + 24))
              {
                v136 = (char *)*((_QWORD *)this + 23);
                v135 = *((_QWORD *)this + 24);
                if ((unint64_t)v136 >= v135)
                {
                  v138 = (char *)*v423;
                  v139 = (v136 - (_BYTE *)*v423) >> 3;
                  v140 = v139 + 1;
                  if ((unint64_t)(v139 + 1) >> 61)
                    goto LABEL_657;
                  v141 = v135 - (_QWORD)v138;
                  if (v141 >> 2 > v140)
                    v140 = v141 >> 2;
                  if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
                    v142 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v142 = v140;
                  if (v142)
                  {
                    v143 = (char *)sub_10000D60C((uint64_t)v419, v142);
                    v138 = (char *)*((_QWORD *)this + 22);
                    v136 = (char *)*((_QWORD *)this + 23);
                  }
                  else
                  {
                    v143 = 0;
                  }
                  v144 = &v143[8 * v139];
                  *(_QWORD *)v144 = 0;
                  v137 = v144 + 8;
                  while (v136 != v138)
                  {
                    v145 = *((_QWORD *)v136 - 1);
                    v136 -= 8;
                    *((_QWORD *)v144 - 1) = v145;
                    v144 -= 8;
                  }
                  *((_QWORD *)this + 22) = v144;
                  *((_QWORD *)this + 23) = v137;
                  *((_QWORD *)this + 24) = &v143[8 * v142];
                  if (v138)
                    operator delete(v138);
                }
                else
                {
                  *(_QWORD *)v136 = 0;
                  v137 = v136 + 8;
                }
                *((_QWORD *)this + 23) = v137;
                v146 = *((_QWORD *)a2 + 1);
                if (v146 > 0xFFFFFFFFFFFFFFF7 || v146 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_252;
                *(v137 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v146);
                v134 = *((_QWORD *)a2 + 2);
                v133 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v133;
              }
              goto LABEL_253;
            case 165:
              if (v27 != 2)
              {
                v303 = (char *)*((_QWORD *)this + 20);
                v302 = *((_QWORD *)this + 21);
                if ((unint64_t)v303 >= v302)
                {
                  v380 = (char *)*v424;
                  v381 = (v303 - (_BYTE *)*v424) >> 3;
                  v382 = v381 + 1;
                  if ((unint64_t)(v381 + 1) >> 61)
LABEL_658:
                    sub_10000D5F8();
                  v383 = v302 - (_QWORD)v380;
                  if (v383 >> 2 > v382)
                    v382 = v383 >> 2;
                  if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFF8)
                    v384 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v384 = v382;
                  if (v384)
                  {
                    v385 = (char *)sub_10000D60C((uint64_t)v420, v384);
                    v380 = (char *)*((_QWORD *)this + 19);
                    v303 = (char *)*((_QWORD *)this + 20);
                  }
                  else
                  {
                    v385 = 0;
                  }
                  v406 = &v385[8 * v381];
                  *(_QWORD *)v406 = 0;
                  v289 = v406 + 8;
                  while (v303 != v380)
                  {
                    v407 = *((_QWORD *)v303 - 1);
                    v303 -= 8;
                    *((_QWORD *)v406 - 1) = v407;
                    v406 -= 8;
                  }
                  *((_QWORD *)this + 19) = v406;
                  *((_QWORD *)this + 20) = v289;
                  *((_QWORD *)this + 21) = &v385[8 * v384];
                  if (v380)
                    operator delete(v380);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v303 = 0;
                  v289 = v303 + 8;
                }
                *((_QWORD *)this + 20) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                return 0;
              v147 = *((_QWORD *)a2 + 1);
              v148 = *((_QWORD *)a2 + 2);
              while (v147 < v148 && !*((_BYTE *)a2 + 24))
              {
                v150 = (char *)*((_QWORD *)this + 20);
                v149 = *((_QWORD *)this + 21);
                if ((unint64_t)v150 >= v149)
                {
                  v152 = (char *)*v424;
                  v153 = (v150 - (_BYTE *)*v424) >> 3;
                  v154 = v153 + 1;
                  if ((unint64_t)(v153 + 1) >> 61)
                    goto LABEL_658;
                  v155 = v149 - (_QWORD)v152;
                  if (v155 >> 2 > v154)
                    v154 = v155 >> 2;
                  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
                    v156 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v156 = v154;
                  if (v156)
                  {
                    v157 = (char *)sub_10000D60C((uint64_t)v420, v156);
                    v152 = (char *)*((_QWORD *)this + 19);
                    v150 = (char *)*((_QWORD *)this + 20);
                  }
                  else
                  {
                    v157 = 0;
                  }
                  v158 = &v157[8 * v153];
                  *(_QWORD *)v158 = 0;
                  v151 = v158 + 8;
                  while (v150 != v152)
                  {
                    v159 = *((_QWORD *)v150 - 1);
                    v150 -= 8;
                    *((_QWORD *)v158 - 1) = v159;
                    v158 -= 8;
                  }
                  *((_QWORD *)this + 19) = v158;
                  *((_QWORD *)this + 20) = v151;
                  *((_QWORD *)this + 21) = &v157[8 * v156];
                  if (v152)
                    operator delete(v152);
                }
                else
                {
                  *(_QWORD *)v150 = 0;
                  v151 = v150 + 8;
                }
                *((_QWORD *)this + 20) = v151;
                v160 = *((_QWORD *)a2 + 1);
                if (v160 > 0xFFFFFFFFFFFFFFF7 || v160 + 8 > *((_QWORD *)a2 + 2))
                  goto LABEL_252;
                *(v151 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v160);
                v148 = *((_QWORD *)a2 + 2);
                v147 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v147;
              }
              goto LABEL_253;
            case 166:
              if (v27 == 2)
              {
                if ((PB::Reader::placeMark(a2, v426) & 1) != 0)
                  return 0;
                v161 = *((_QWORD *)a2 + 1);
                v162 = *((_QWORD *)a2 + 2);
                while (v161 < v162 && !*((_BYTE *)a2 + 24))
                {
                  v164 = (char *)*((_QWORD *)this + 26);
                  v163 = *((_QWORD *)this + 27);
                  if ((unint64_t)v164 >= v163)
                  {
                    v166 = (char *)*v425;
                    v167 = (v164 - (_BYTE *)*v425) >> 3;
                    v168 = v167 + 1;
                    if ((unint64_t)(v167 + 1) >> 61)
                      goto LABEL_659;
                    v169 = v163 - (_QWORD)v166;
                    if (v169 >> 2 > v168)
                      v168 = v169 >> 2;
                    if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
                      v170 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v170 = v168;
                    if (v170)
                    {
                      v171 = (char *)sub_10000D60C((uint64_t)v421, v170);
                      v166 = (char *)*((_QWORD *)this + 25);
                      v164 = (char *)*((_QWORD *)this + 26);
                    }
                    else
                    {
                      v171 = 0;
                    }
                    v172 = &v171[8 * v167];
                    *(_QWORD *)v172 = 0;
                    v165 = v172 + 8;
                    while (v164 != v166)
                    {
                      v173 = *((_QWORD *)v164 - 1);
                      v164 -= 8;
                      *((_QWORD *)v172 - 1) = v173;
                      v172 -= 8;
                    }
                    *((_QWORD *)this + 25) = v172;
                    *((_QWORD *)this + 26) = v165;
                    *((_QWORD *)this + 27) = &v171[8 * v170];
                    if (v166)
                      operator delete(v166);
                  }
                  else
                  {
                    *(_QWORD *)v164 = 0;
                    v165 = v164 + 8;
                  }
                  *((_QWORD *)this + 26) = v165;
                  v174 = *((_QWORD *)a2 + 1);
                  if (v174 > 0xFFFFFFFFFFFFFFF7 || v174 + 8 > *((_QWORD *)a2 + 2))
                  {
LABEL_252:
                    *((_BYTE *)a2 + 24) = 1;
                    break;
                  }
                  *(v165 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v174);
                  v162 = *((_QWORD *)a2 + 2);
                  v161 = *((_QWORD *)a2 + 1) + 8;
                  *((_QWORD *)a2 + 1) = v161;
                }
LABEL_253:
                PB::Reader::recallMark(a2, v426);
                v2 = &jpt_1000BBFE4;
              }
              else
              {
                v305 = (char *)*((_QWORD *)this + 26);
                v304 = *((_QWORD *)this + 27);
                if ((unint64_t)v305 >= v304)
                {
                  v386 = (char *)*v425;
                  v387 = (v305 - (_BYTE *)*v425) >> 3;
                  v388 = v387 + 1;
                  if ((unint64_t)(v387 + 1) >> 61)
LABEL_659:
                    sub_10000D5F8();
                  v389 = v304 - (_QWORD)v386;
                  if (v389 >> 2 > v388)
                    v388 = v389 >> 2;
                  if ((unint64_t)v389 >= 0x7FFFFFFFFFFFFFF8)
                    v390 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v390 = v388;
                  if (v390)
                  {
                    v391 = (char *)sub_10000D60C((uint64_t)v421, v390);
                    v386 = (char *)*((_QWORD *)this + 25);
                    v305 = (char *)*((_QWORD *)this + 26);
                  }
                  else
                  {
                    v391 = 0;
                  }
                  v408 = &v391[8 * v387];
                  *(_QWORD *)v408 = 0;
                  v289 = v408 + 8;
                  while (v305 != v386)
                  {
                    v409 = *((_QWORD *)v305 - 1);
                    v305 -= 8;
                    *((_QWORD *)v408 - 1) = v409;
                    v408 -= 8;
                  }
                  *((_QWORD *)this + 25) = v408;
                  *((_QWORD *)this + 26) = v289;
                  *((_QWORD *)this + 27) = &v391[8 * v390];
                  if (v386)
                    operator delete(v386);
                  v2 = &jpt_1000BBFE4;
                }
                else
                {
                  *(_QWORD *)v305 = 0;
                  v289 = v305 + 8;
                }
                *((_QWORD *)this + 26) = v289;
LABEL_636:
                v410 = *((_QWORD *)a2 + 1);
                if (v410 <= 0xFFFFFFFFFFFFFFF7 && v410 + 8 <= *((_QWORD *)a2 + 2))
                {
                  *(v289 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v410);
LABEL_640:
                  *((_QWORD *)a2 + 1) += 8;
                }
                else
                {
                  *((_BYTE *)a2 + 24) = 1;
                }
              }
LABEL_641:
              v4 = *((_QWORD *)a2 + 1);
              v5 = *((_QWORD *)a2 + 2);
              v6 = *((unsigned __int8 *)a2 + 24);
              if (v4 >= v5 || v6 != 0)
                return v6 == 0;
              break;
            default:
              switch((int)v28)
              {
                case 'e':
                  *((_DWORD *)this + 99) |= 0x10000000u;
                  v51 = *((_QWORD *)a2 + 1);
                  if (v51 >= *((_QWORD *)a2 + 2))
                  {
                    v54 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v52 = v51 + 1;
                    v53 = *(unsigned __int8 *)(*(_QWORD *)a2 + v51);
                    *((_QWORD *)a2 + 1) = v52;
                    v54 = v53 != 0;
                  }
                  *((_BYTE *)this + 392) = v54;
                  goto LABEL_641;
                case 'f':
                  *((_DWORD *)this + 99) |= 0x8000000u;
                  v271 = *((_QWORD *)a2 + 1);
                  if (v271 >= *((_QWORD *)a2 + 2))
                  {
                    v274 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v272 = v271 + 1;
                    v273 = *(unsigned __int8 *)(*(_QWORD *)a2 + v271);
                    *((_QWORD *)a2 + 1) = v272;
                    v274 = v273 != 0;
                  }
                  *((_BYTE *)this + 391) = v274;
                  goto LABEL_641;
                case 'g':
                  *((_DWORD *)this + 99) |= 0x20000000u;
                  v275 = *((_QWORD *)a2 + 1);
                  if (v275 >= *((_QWORD *)a2 + 2))
                  {
                    v278 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v276 = v275 + 1;
                    v277 = *(unsigned __int8 *)(*(_QWORD *)a2 + v275);
                    *((_QWORD *)a2 + 1) = v276;
                    v278 = v277 != 0;
                  }
                  *((_BYTE *)this + 393) = v278;
                  goto LABEL_641;
                case 'h':
                  *((_DWORD *)this + 99) |= 0x2000000u;
                  v279 = *((_QWORD *)a2 + 1);
                  if (v279 >= *((_QWORD *)a2 + 2))
                  {
                    v282 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v280 = v279 + 1;
                    v281 = *(unsigned __int8 *)(*(_QWORD *)a2 + v279);
                    *((_QWORD *)a2 + 1) = v280;
                    v282 = v281 != 0;
                  }
                  *((_BYTE *)this + 389) = v282;
                  goto LABEL_641;
                case 'i':
                  *((_DWORD *)this + 99) |= 0x4000000u;
                  v283 = *((_QWORD *)a2 + 1);
                  if (v283 >= *((_QWORD *)a2 + 2))
                  {
                    v286 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                  }
                  else
                  {
                    v284 = v283 + 1;
                    v285 = *(unsigned __int8 *)(*(_QWORD *)a2 + v283);
                    *((_QWORD *)a2 + 1) = v284;
                    v286 = v285 != 0;
                  }
                  *((_BYTE *)this + 390) = v286;
                  goto LABEL_641;
                default:
                  goto LABEL_58;
              }
          }
          break;
      }
    }
    v22 = 0;
    v23 = 0;
    v18 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v24 = v4 + 1;
      v25 = *(_BYTE *)(v15 + v4);
      *((_QWORD *)a2 + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_21;
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        v18 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v6 == 0;
}

