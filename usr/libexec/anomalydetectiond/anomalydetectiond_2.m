uint64_t CMMsl::FallDetectionWristStateReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;

  v3 = this;
  v4 = *(_DWORD *)(this + 396);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 376), 1u);
    v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_64;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 388), 2u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0)
      goto LABEL_5;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 224), 3u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(double *)(v3 + 368), 4u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 232), 5u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 256), 0x15u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 264), 0x16u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 288), 0x17u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(double *)(v3 + 304), 0x18u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(double *)(v3 + 296), 0x19u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(double *)(v3 + 280), 0x1Au);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(double *)(v3 + 272), 0x1Bu);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(double *)(v3 + 320), 0x1Cu);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(double *)(v3 + 312), 0x1Du);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 360), 0x1Eu);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 352), 0x1Fu);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 344), 0x20u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 336), 0x21u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 328), 0x22u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 395), 0x29u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(double *)(v3 + 240), 0x2Au);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(double *)(v3 + 248), 0x2Bu);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 384), 0x33u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_26;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 386), 0x34u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 394), 0x35u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 385), 0x36u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 387), 0x37u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 392), 0x65u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 391), 0x66u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_32;
LABEL_92:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 389), 0x68u);
    if ((*(_DWORD *)(v3 + 396) & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 393), 0x67u);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0)
    goto LABEL_92;
LABEL_32:
  if ((v4 & 0x4000000) != 0)
LABEL_33:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 390), 0x69u);
LABEL_34:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 0x97u);
  }
  v8 = *(double **)(v3 + 8);
  v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 0x98u);
  }
  v11 = *(double **)(v3 + 56);
  v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 0x99u);
  }
  v14 = *(double **)(v3 + 104);
  v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    v16 = *v14++;
    this = PB::Writer::write(a2, v16, 0xA1u);
  }
  v17 = *(double **)(v3 + 80);
  v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    v19 = *v17++;
    this = PB::Writer::write(a2, v19, 0xA2u);
  }
  v20 = *(double **)(v3 + 128);
  v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    v22 = *v20++;
    this = PB::Writer::write(a2, v22, 0xA3u);
  }
  v23 = *(double **)(v3 + 176);
  v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    v25 = *v23++;
    this = PB::Writer::write(a2, v25, 0xA4u);
  }
  v26 = *(double **)(v3 + 152);
  v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    v28 = *v26++;
    this = PB::Writer::write(a2, v28, 0xA5u);
  }
  v30 = *(double **)(v3 + 200);
  v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    v31 = *v30++;
    this = PB::Writer::write(a2, v31, 0xA6u);
  }
  return this;
}

BOOL CMMsl::FallDetectionWristStateReplay::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double *v24;
  double *v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  double *v38;
  double *v39;
  double *v40;
  double *v41;
  double *v42;
  double *v43;
  double *v44;
  double *v45;
  double *v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  uint64_t v50;
  double v51;
  _BOOL8 result;
  BOOL v53;

  v3 = *(_DWORD *)(a1 + 396);
  v4 = *(_DWORD *)(a2 + 396);
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0)
      return 0;
    v5 = *(_QWORD *)(a1 + 376);
    v6 = *(_QWORD *)(a2 + 376);
    v2 = __OFSUB__(v5, v6);
    if (v5 != v6)
      return 0;
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0)
      return 0;
    v7 = *(unsigned __int8 *)(a1 + 388);
    v8 = *(unsigned __int8 *)(a2 + 388);
    v2 = __OFSUB__(v7, v8);
    if (v7 != v8)
      return 0;
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 1) != 0)
  {
    if ((v4 & 1) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 224) != *(double *)(a2 + 224))
      return 0;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 368) != *(double *)(a2 + 368))
      return 0;
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0)
      return 0;
    v9 = *(_QWORD *)(a1 + 232);
    v10 = *(_QWORD *)(a2 + 232);
    v2 = __OFSUB__(v9, v10);
    if (v9 != v10)
      return 0;
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0)
      return 0;
    v11 = *(_QWORD *)(a1 + 256);
    v12 = *(_QWORD *)(a2 + 256);
    v2 = __OFSUB__(v11, v12);
    if (v11 != v12)
      return 0;
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 264) != *(double *)(a2 + 264))
      return 0;
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 288) != *(double *)(a2 + 288))
      return 0;
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 304) != *(double *)(a2 + 304))
      return 0;
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 296) != *(double *)(a2 + 296))
      return 0;
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 280) != *(double *)(a2 + 280))
      return 0;
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 272) != *(double *)(a2 + 272))
      return 0;
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 320) != *(double *)(a2 + 320))
      return 0;
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0)
      return 0;
    v2 = 0;
    if (*(double *)(a1 + 312) != *(double *)(a2 + 312))
      return 0;
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0)
      return 0;
    v13 = *(_QWORD *)(a1 + 360);
    v14 = *(_QWORD *)(a2 + 360);
    v2 = __OFSUB__(v13, v14);
    if (v13 != v14)
      return 0;
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0)
      return 0;
    v15 = *(_QWORD *)(a1 + 352);
    v16 = *(_QWORD *)(a2 + 352);
    v2 = __OFSUB__(v15, v16);
    if (v15 != v16)
      return 0;
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0)
      return 0;
    v17 = *(_QWORD *)(a1 + 344);
    v18 = *(_QWORD *)(a2 + 344);
    v2 = __OFSUB__(v17, v18);
    if (v17 != v18)
      return 0;
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0)
      return 0;
    v19 = *(_QWORD *)(a1 + 336);
    v20 = *(_QWORD *)(a2 + 336);
    v2 = __OFSUB__(v19, v20);
    if (v19 != v20)
      return 0;
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0)
      return 0;
    v21 = *(_QWORD *)(a1 + 328);
    v22 = *(_QWORD *)(a2 + 328);
    v2 = __OFSUB__(v21, v22);
    if (v21 != v22)
      return 0;
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & v4) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 395) != *(unsigned __int8 *)(a2 + 395))
      return 0;
  }
  else if ((v3 | v4) < 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(double *)(a1 + 240) != *(double *)(a2 + 240))
      return 0;
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(double *)(a1 + 248) != *(double *)(a2 + 248))
      return 0;
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 384) != *(unsigned __int8 *)(a2 + 384))
      return 0;
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 386) != *(unsigned __int8 *)(a2 + 386))
      return 0;
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 394) != *(unsigned __int8 *)(a2 + 394))
      return 0;
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 385) != *(unsigned __int8 *)(a2 + 385))
      return 0;
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 387) != *(unsigned __int8 *)(a2 + 387))
      return 0;
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 392) != *(unsigned __int8 *)(a2 + 392))
      return 0;
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 391) != *(unsigned __int8 *)(a2 + 391))
      return 0;
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 393) != *(unsigned __int8 *)(a2 + 393))
      return 0;
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 389) != *(unsigned __int8 *)(a2 + 389))
      return 0;
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 390) != *(unsigned __int8 *)(a2 + 390))
      return 0;
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  v24 = *(double **)(a1 + 32);
  v23 = *(double **)(a1 + 40);
  v25 = *(double **)(a2 + 32);
  if ((char *)v23 - (char *)v24 != *(_QWORD *)(a2 + 40) - (_QWORD)v25)
    return 0;
  while (v24 != v23)
  {
    if (*v24 != *v25)
      return 0;
    ++v24;
    ++v25;
  }
  v27 = *(double **)(a1 + 8);
  v26 = *(double **)(a1 + 16);
  v28 = *(double **)(a2 + 8);
  if ((char *)v26 - (char *)v27 != *(_QWORD *)(a2 + 16) - (_QWORD)v28)
    return 0;
  while (v27 != v26)
  {
    if (*v27 != *v28)
      return 0;
    ++v27;
    ++v28;
  }
  v30 = *(double **)(a1 + 56);
  v29 = *(double **)(a1 + 64);
  v31 = *(double **)(a2 + 56);
  if ((char *)v29 - (char *)v30 != *(_QWORD *)(a2 + 64) - (_QWORD)v31)
    return 0;
  while (v30 != v29)
  {
    if (*v30 != *v31)
      return 0;
    ++v30;
    ++v31;
  }
  v33 = *(double **)(a1 + 104);
  v32 = *(double **)(a1 + 112);
  v34 = *(double **)(a2 + 104);
  if ((char *)v32 - (char *)v33 != *(_QWORD *)(a2 + 112) - (_QWORD)v34)
    return 0;
  while (v33 != v32)
  {
    if (*v33 != *v34)
      return 0;
    ++v33;
    ++v34;
  }
  v36 = *(double **)(a1 + 80);
  v35 = *(double **)(a1 + 88);
  v37 = *(double **)(a2 + 80);
  if ((char *)v35 - (char *)v36 != *(_QWORD *)(a2 + 88) - (_QWORD)v37)
    return 0;
  while (v36 != v35)
  {
    if (*v36 != *v37)
      return 0;
    ++v36;
    ++v37;
  }
  v39 = *(double **)(a1 + 128);
  v38 = *(double **)(a1 + 136);
  v40 = *(double **)(a2 + 128);
  if ((char *)v38 - (char *)v39 != *(_QWORD *)(a2 + 136) - (_QWORD)v40)
    return 0;
  while (v39 != v38)
  {
    if (*v39 != *v40)
      return 0;
    ++v39;
    ++v40;
  }
  v42 = *(double **)(a1 + 176);
  v41 = *(double **)(a1 + 184);
  v43 = *(double **)(a2 + 176);
  if ((char *)v41 - (char *)v42 != *(_QWORD *)(a2 + 184) - (_QWORD)v43)
    return 0;
  while (v42 != v41)
  {
    if (*v42 != *v43)
      return 0;
    ++v42;
    ++v43;
  }
  v45 = *(double **)(a1 + 152);
  v44 = *(double **)(a1 + 160);
  v46 = *(double **)(a2 + 152);
  if ((char *)v44 - (char *)v45 != *(_QWORD *)(a2 + 160) - (_QWORD)v46)
    return 0;
  while (v45 != v44)
  {
    if (*v45 != *v46)
      return 0;
    ++v45;
    ++v46;
  }
  v48 = *(_QWORD *)(a1 + 200);
  v47 = *(_QWORD *)(a1 + 208);
  v49 = *(double **)(a2 + 200);
  if (v47 - v48 != *(_QWORD *)(a2 + 208) - (_QWORD)v49)
    return 0;
  if (v48 == v47)
    return 1;
  v50 = v48 + 8;
  do
  {
    v51 = *v49++;
    result = *(double *)(v50 - 8) == v51;
    v53 = *(double *)(v50 - 8) != v51 || v50 == v47;
    v50 += 8;
  }
  while (!v53);
  return result;
}

uint64_t CMMsl::FallDetectionWristStateReplay::hash_value(CMMsl::FallDetectionWristStateReplay *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;

  v2 = *((_DWORD *)this + 99);
  if ((v2 & 0x80000) != 0)
  {
    v3 = *((_QWORD *)this + 47);
    if ((v2 & 0x1000000) != 0)
    {
LABEL_3:
      v4 = *((unsigned __int8 *)this + 388);
      if ((v2 & 1) != 0)
        goto LABEL_4;
LABEL_69:
      v46 = 0.0;
      if ((v2 & 0x40000) != 0)
        goto LABEL_7;
LABEL_70:
      v45 = 0.0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
      goto LABEL_71;
    }
  }
  else
  {
    v3 = 0;
    if ((v2 & 0x1000000) != 0)
      goto LABEL_3;
  }
  v4 = 0;
  if ((v2 & 1) == 0)
    goto LABEL_69;
LABEL_4:
  v5 = *((double *)this + 28);
  if (v5 == 0.0)
    v5 = 0.0;
  v46 = v5;
  if ((v2 & 0x40000) == 0)
    goto LABEL_70;
LABEL_7:
  v6 = *((double *)this + 46);
  if (v6 == 0.0)
    v6 = 0.0;
  v45 = v6;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    v44 = *((_QWORD *)this + 29);
    if ((v2 & 0x10) != 0)
      goto LABEL_11;
    goto LABEL_72;
  }
LABEL_71:
  v44 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_11:
    v43 = *((_QWORD *)this + 32);
    if ((v2 & 0x20) != 0)
      goto LABEL_12;
LABEL_73:
    v42 = 0.0;
    if ((v2 & 0x100) != 0)
      goto LABEL_15;
LABEL_74:
    v8 = 0;
    if ((v2 & 0x400) != 0)
      goto LABEL_19;
LABEL_75:
    v9 = 0;
    if ((v2 & 0x200) != 0)
      goto LABEL_23;
LABEL_76:
    v10 = 0;
    if ((v2 & 0x80) != 0)
      goto LABEL_27;
LABEL_77:
    v11 = 0;
    if ((v2 & 0x40) != 0)
      goto LABEL_31;
LABEL_78:
    v12 = 0;
    if ((v2 & 0x1000) != 0)
      goto LABEL_35;
LABEL_79:
    v13 = 0;
    if ((v2 & 0x800) != 0)
      goto LABEL_39;
LABEL_80:
    v14 = 0;
    if ((v2 & 0x20000) != 0)
      goto LABEL_43;
    goto LABEL_81;
  }
LABEL_72:
  v43 = 0;
  if ((v2 & 0x20) == 0)
    goto LABEL_73;
LABEL_12:
  v7 = *((double *)this + 33);
  if (v7 == 0.0)
    v7 = 0.0;
  v42 = v7;
  if ((v2 & 0x100) == 0)
    goto LABEL_74;
LABEL_15:
  if (*((double *)this + 36) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 36);
  if ((v2 & 0x400) == 0)
    goto LABEL_75;
LABEL_19:
  if (*((double *)this + 38) == 0.0)
    v9 = 0;
  else
    v9 = *((_QWORD *)this + 38);
  if ((v2 & 0x200) == 0)
    goto LABEL_76;
LABEL_23:
  if (*((double *)this + 37) == 0.0)
    v10 = 0;
  else
    v10 = *((_QWORD *)this + 37);
  if ((v2 & 0x80) == 0)
    goto LABEL_77;
LABEL_27:
  if (*((double *)this + 35) == 0.0)
    v11 = 0;
  else
    v11 = *((_QWORD *)this + 35);
  if ((v2 & 0x40) == 0)
    goto LABEL_78;
LABEL_31:
  if (*((double *)this + 34) == 0.0)
    v12 = 0;
  else
    v12 = *((_QWORD *)this + 34);
  if ((v2 & 0x1000) == 0)
    goto LABEL_79;
LABEL_35:
  if (*((double *)this + 40) == 0.0)
    v13 = 0;
  else
    v13 = *((_QWORD *)this + 40);
  if ((v2 & 0x800) == 0)
    goto LABEL_80;
LABEL_39:
  if (*((double *)this + 39) == 0.0)
    v14 = 0;
  else
    v14 = *((_QWORD *)this + 39);
  if ((v2 & 0x20000) != 0)
  {
LABEL_43:
    v15 = *((_QWORD *)this + 45);
    if ((v2 & 0x10000) != 0)
      goto LABEL_44;
    goto LABEL_82;
  }
LABEL_81:
  v15 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_44:
    v16 = *((_QWORD *)this + 44);
    if ((v2 & 0x8000) != 0)
      goto LABEL_45;
    goto LABEL_83;
  }
LABEL_82:
  v16 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_45:
    v17 = *((_QWORD *)this + 43);
    if ((v2 & 0x4000) != 0)
      goto LABEL_46;
    goto LABEL_84;
  }
LABEL_83:
  v17 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_46:
    v18 = *((_QWORD *)this + 42);
    if ((v2 & 0x2000) != 0)
      goto LABEL_47;
    goto LABEL_85;
  }
LABEL_84:
  v18 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_47:
    v19 = *((_QWORD *)this + 41);
    if (v2 < 0)
      goto LABEL_48;
    goto LABEL_86;
  }
LABEL_85:
  v19 = 0;
  if (v2 < 0)
  {
LABEL_48:
    v20 = *((unsigned __int8 *)this + 395);
    if ((v2 & 4) != 0)
      goto LABEL_49;
LABEL_87:
    v21 = 0;
    if ((v2 & 8) != 0)
      goto LABEL_53;
LABEL_88:
    v22 = 0;
    if ((v2 & 0x100000) != 0)
      goto LABEL_57;
    goto LABEL_89;
  }
LABEL_86:
  v20 = 0;
  if ((v2 & 4) == 0)
    goto LABEL_87;
LABEL_49:
  if (*((double *)this + 30) == 0.0)
    v21 = 0;
  else
    v21 = *((_QWORD *)this + 30);
  if ((v2 & 8) == 0)
    goto LABEL_88;
LABEL_53:
  if (*((double *)this + 31) == 0.0)
    v22 = 0;
  else
    v22 = *((_QWORD *)this + 31);
  if ((v2 & 0x100000) != 0)
  {
LABEL_57:
    v23 = *((unsigned __int8 *)this + 384);
    if ((v2 & 0x400000) != 0)
      goto LABEL_58;
    goto LABEL_90;
  }
LABEL_89:
  v23 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_58:
    v24 = *((unsigned __int8 *)this + 386);
    if ((v2 & 0x40000000) != 0)
      goto LABEL_59;
    goto LABEL_91;
  }
LABEL_90:
  v24 = 0;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_59:
    v25 = *((unsigned __int8 *)this + 394);
    if ((v2 & 0x200000) != 0)
      goto LABEL_60;
    goto LABEL_92;
  }
LABEL_91:
  v25 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_60:
    v26 = *((unsigned __int8 *)this + 385);
    if ((v2 & 0x800000) != 0)
      goto LABEL_61;
    goto LABEL_93;
  }
LABEL_92:
  v26 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_61:
    v27 = *((unsigned __int8 *)this + 387);
    if ((v2 & 0x10000000) != 0)
      goto LABEL_62;
    goto LABEL_94;
  }
LABEL_93:
  v27 = 0;
  if ((v2 & 0x10000000) != 0)
  {
LABEL_62:
    v28 = *((unsigned __int8 *)this + 392);
    if ((v2 & 0x8000000) != 0)
      goto LABEL_63;
    goto LABEL_95;
  }
LABEL_94:
  v28 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_63:
    v29 = *((unsigned __int8 *)this + 391);
    if ((v2 & 0x20000000) != 0)
      goto LABEL_64;
    goto LABEL_96;
  }
LABEL_95:
  v29 = 0;
  if ((v2 & 0x20000000) != 0)
  {
LABEL_64:
    v30 = *((unsigned __int8 *)this + 393);
    if ((v2 & 0x2000000) != 0)
      goto LABEL_65;
LABEL_97:
    v31 = 0;
    if ((v2 & 0x4000000) != 0)
      goto LABEL_66;
LABEL_98:
    v32 = 0;
    goto LABEL_99;
  }
LABEL_96:
  v30 = 0;
  if ((v2 & 0x2000000) == 0)
    goto LABEL_97;
LABEL_65:
  v31 = *((unsigned __int8 *)this + 389);
  if ((v2 & 0x4000000) == 0)
    goto LABEL_98;
LABEL_66:
  v32 = *((unsigned __int8 *)this + 390);
LABEL_99:
  v33 = v4 ^ v3 ^ *(_QWORD *)&v46 ^ *(_QWORD *)&v45 ^ v44 ^ v43 ^ *(_QWORD *)&v42 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v34 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v35 = v34 ^ PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v36 = v33 ^ v35 ^ PBHashBytes(*((_QWORD *)this + 13), *((_QWORD *)this + 14) - *((_QWORD *)this + 13));
  v37 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v38 = v37 ^ PBHashBytes(*((_QWORD *)this + 16), *((_QWORD *)this + 17) - *((_QWORD *)this + 16));
  v39 = v38 ^ PBHashBytes(*((_QWORD *)this + 22), *((_QWORD *)this + 23) - *((_QWORD *)this + 22));
  v40 = v36 ^ v39 ^ PBHashBytes(*((_QWORD *)this + 19), *((_QWORD *)this + 20) - *((_QWORD *)this + 19));
  return v40 ^ PBHashBytes(*((_QWORD *)this + 25), *((_QWORD *)this + 26) - *((_QWORD *)this + 25));
}

uint64_t CMMsl::FallDistanceReplay::FallDistanceReplay(uint64_t this)
{
  *(_QWORD *)this = off_100350F38;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350F38;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CMMsl::FallDistanceReplay::~FallDistanceReplay(CMMsl::FallDistanceReplay *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::FallDistanceReplay::FallDistanceReplay(CMMsl::FallDistanceReplay *this, const CMMsl::FallDistanceReplay *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_100350F38;
  *((_DWORD *)this + 18) = 0;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *((_WORD *)this + 36) = 4;
    *((_QWORD *)this + 3) = v4;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *((_WORD *)this + 36) = v3;
    *((_QWORD *)this + 4) = v5;
    v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 36) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *((_WORD *)a2 + 36);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x200u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 17) = v7;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x100u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 16) = v4;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 36) = v3;
  *((_QWORD *)this + 5) = v8;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 36) = v3;
  *((_QWORD *)this + 6) = v9;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 36) = v3;
  *((_QWORD *)this + 1) = v10;
  v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x80u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 15) = v4;
  if ((*((_WORD *)a2 + 36) & 0x40) == 0)
    return *(float *)&v4;
LABEL_22:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 36) = v3 | 0x40;
  *((_DWORD *)this + 14) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::FallDistanceReplay::operator=(uint64_t a1, const CMMsl::FallDistanceReplay *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if ((const CMMsl::FallDistanceReplay *)a1 != a2)
  {
    CMMsl::FallDistanceReplay::FallDistanceReplay((CMMsl::FallDistanceReplay *)&v9, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v3;
    v4 = *(_QWORD *)(a1 + 68);
    *(_QWORD *)(a1 + 68) = v16;
    v16 = v4;
    LODWORD(v3) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    v15 = v3;
    v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    *(_QWORD *)&v7 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v14;
    v14 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDistanceReplay *a2, CMMsl::FallDistanceReplay *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v9;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  return result;
}

float CMMsl::FallDistanceReplay::FallDistanceReplay(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350F38;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  result = *(float *)(a2 + 56);
  *(float *)(a1 + 56) = result;
  return result;
}

uint64_t CMMsl::FallDistanceReplay::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void (**v11)(CMMsl::FallDistanceReplay *__hidden);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v11 = off_100350F38;
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(_DWORD *)(a2 + 64);
    v5 = *(_QWORD *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 72) = 0;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v13 = v7;
    v18 = *(_QWORD *)(a1 + 68);
    v17 = *(_DWORD *)(a1 + 64);
    v14 = *(_OWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 48);
    v8 = *(_OWORD *)(a1 + 8);
    v9 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 8) = v9;
    v12 = v8;
    *(_QWORD *)&v8 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v9 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 68) = v6;
    *(_DWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a1 + 56) = v9;
    v16 = v8;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::FallDistanceReplay::formatText(CMMsl::FallDistanceReplay *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "afterElevationMedian", *((float *)this + 14));
    v5 = *((_WORD *)this + 36);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "beforeElevationMedian", *((float *)this + 15));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "endTimestampOfWindow", *((_QWORD *)this + 1));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "impactTimestamp", *((_QWORD *)this + 2));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 3));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "pressureTimestamp", *((_QWORD *)this + 4));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "rangeOfElevationInWindow", *((float *)this + 16));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "startTimestampOfWindow", *((_QWORD *)this + 6));
    if ((*((_WORD *)this + 36) & 0x200) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "startTimestampOfLastInspectedWindow", *((_QWORD *)this + 5));
  v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 17));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDistanceReplay::readFrom(CMMsl::FallDistanceReplay *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  uint64_t result;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_122;
            case 2u:
              *((_WORD *)this + 36) |= 8u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_127;
                  }
                  v59 = v20++;
                  v60 = *(_BYTE *)(v21 + v59);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    v24 = 0;
LABEL_126:
                    v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
                goto LABEL_126;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)a2 + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_127;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              v24 = 0;
LABEL_127:
              *((_QWORD *)this + 4) = v24;
              goto LABEL_153;
            case 3u:
              *((_WORD *)this + 36) |= 2u;
              v26 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v27 = *(_QWORD *)a2;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    v30 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_132;
                  }
                  v63 = v26++;
                  v64 = *(_BYTE *)(v27 + v63);
                  *((_QWORD *)a2 + 1) = v26;
                  v30 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    v30 = 0;
LABEL_131:
                    v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v30 = 0;
                goto LABEL_131;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)a2 + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_132;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              v30 = 0;
LABEL_132:
              *((_QWORD *)this + 2) = v30;
              goto LABEL_153;
            case 4u:
              *((_WORD *)this + 36) |= 0x200u;
              v32 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v33 = *(_QWORD *)a2;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v36 = 0;
                if (v2 <= v32)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v32++;
                  v68 = *(_BYTE *)(v33 + v67);
                  *((_QWORD *)a2 + 1) = v32;
                  v36 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_136:
                    v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v36) = 0;
                goto LABEL_136;
              }
              v34 = 0;
              v35 = 0;
              v36 = 0;
              do
              {
                v2 = v32 + 1;
                *((_QWORD *)a2 + 1) = v32 + 1;
                v37 = *(_BYTE *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0)
                  goto LABEL_137;
                v34 += 7;
                v32 = v2;
                v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_137:
              *((_DWORD *)this + 17) = v36;
              goto LABEL_153;
            case 0xAu:
              *((_WORD *)this + 36) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_121;
            case 0xBu:
              *((_WORD *)this + 36) |= 0x10u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_141:
                    v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v43 = 0;
                goto LABEL_141;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_142;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_142:
              *((_QWORD *)this + 5) = v43;
              goto LABEL_153;
            case 0xCu:
              *((_WORD *)this + 36) |= 0x20u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_146:
                    v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v49 = 0;
                goto LABEL_146;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_147;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_147:
              *((_QWORD *)this + 6) = v49;
              goto LABEL_153;
            case 0xDu:
              *((_WORD *)this + 36) |= 1u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_151:
                    v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v55 = 0;
                goto LABEL_151;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_152;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_152:
              *((_QWORD *)this + 1) = v55;
LABEL_153:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x14u:
              *((_WORD *)this + 36) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_77;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_121;
            case 0x15u:
              *((_WORD *)this + 36) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_121:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_122:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_153;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_153;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDistanceReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 72);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 2u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 4u);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xAu);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0xBu);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 0xCu);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 0xDu);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 56), 0x15u);
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x14u);
  if ((*(_WORD *)(v3 + 72) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 56), 0x15u);
  return this;
}

BOOL CMMsl::FallDistanceReplay::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 72);
  v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x200) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 56) == *(float *)(a2 + 56);
  return v4;
}

uint64_t CMMsl::FallDistanceReplay::hash_value(CMMsl::FallDistanceReplay *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;

  v1 = *((_WORD *)this + 36);
  if ((v1 & 4) != 0)
  {
    v2 = *((double *)this + 3);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 8) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 4);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 2);
    if ((*((_WORD *)this + 36) & 0x200) != 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  v4 = 0;
  if ((*((_WORD *)this + 36) & 0x200) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 17);
    if ((*((_WORD *)this + 36) & 0x100) != 0)
      goto LABEL_6;
LABEL_24:
    v7 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_23:
  v5 = 0;
  if ((*((_WORD *)this + 36) & 0x100) == 0)
    goto LABEL_24;
LABEL_6:
  v6 = *((float *)this + 16);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_9:
    v8 = *((_QWORD *)this + 5);
    if ((v1 & 0x20) != 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_10:
    v9 = *((_QWORD *)this + 6);
    if ((v1 & 1) != 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_11:
    v10 = *((_QWORD *)this + 1);
    if ((v1 & 0x80) != 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_12:
    v11 = *((float *)this + 15);
    v12 = LODWORD(v11);
    if (v11 == 0.0)
      v12 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_29:
    v14 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
  }
LABEL_28:
  v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_29;
LABEL_15:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t this)
{
  *(_QWORD *)this = off_100350F70;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350F70;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::FallFalsePositiveSuppressionFeatures::~FallFalsePositiveSuppressionFeatures(CMMsl::FallFalsePositiveSuppressionFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t this, const CMMsl::FallFalsePositiveSuppressionFeatures *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)this = off_100350F70;
  *(_DWORD *)(this + 80) = 0;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *(_WORD *)(this + 80) = 4;
    *(_QWORD *)(this + 24) = v4;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 80) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 80) = v3;
    *(_QWORD *)(this + 8) = v6;
    v2 = *((_WORD *)a2 + 40);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 64) = v7;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 72) = v8;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 76) = v9;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 68) = v10;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 48) = v11;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 52) = v12;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 60) = v13;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *((_QWORD *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 80) = v3;
  *(_QWORD *)(this + 40) = v14;
  v2 = *((_WORD *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_28:
    v16 = *((_DWORD *)a2 + 14);
    *(_WORD *)(this + 80) = v3 | 0x80;
    *(_DWORD *)(this + 56) = v16;
    return this;
  }
LABEL_27:
  v15 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 80) = v3;
  *(_QWORD *)(this + 32) = v15;
  if ((*((_WORD *)a2 + 40) & 0x80) != 0)
    goto LABEL_28;
  return this;
}

CMMsl *CMMsl::FallFalsePositiveSuppressionFeatures::operator=(CMMsl *a1, const CMMsl::FallFalsePositiveSuppressionFeatures *a2)
{
  CMMsl::FallFalsePositiveSuppressionFeatures *v3;
  _BYTE v5[88];

  if (a1 != a2)
  {
    CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallFalsePositiveSuppressionFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallFalsePositiveSuppressionFeatures *a2, CMMsl::FallFalsePositiveSuppressionFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  float result;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  v8 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v8;
  v9 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  v11 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  return result;
}

float CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350F70;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  result = *(float *)(a2 + 52);
  *(float *)(a1 + 52) = result;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::FallFalsePositiveSuppressionFeatures::operator=(CMMsl *this, uint64_t a2, CMMsl::FallFalsePositiveSuppressionFeatures *a3)
{
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::FallFalsePositiveSuppressionFeatures *__hidden);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  if (this != (CMMsl *)a2)
  {
    v7 = off_100350F70;
    v17 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a2 + 80) = 0;
    v4 = *(_OWORD *)(a2 + 8);
    v14 = *(_DWORD *)(a2 + 64);
    v16 = *(_DWORD *)(a2 + 76);
    v15 = *(_QWORD *)(a2 + 68);
    v11 = *(_DWORD *)(a2 + 48);
    v12 = *(_DWORD *)(a2 + 52);
    v10 = *(_QWORD *)(a2 + 40);
    v5 = *(_OWORD *)(a2 + 24);
    v8 = v4;
    v9 = v5;
    v13 = *(_QWORD *)(a2 + 56);
    CMMsl::swap(this, (CMMsl::FallFalsePositiveSuppressionFeatures *)&v7, a3);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return this;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::formatText(CMMsl::FallFalsePositiveSuppressionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "aopTsImpact", *((_QWORD *)this + 1));
    v5 = *((_WORD *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "aopTsNow", *((_QWORD *)this + 2));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "aopTsSensor", *((_QWORD *)this + 3));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "nPeaks", *((_DWORD *)this + 12));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "normalizedIQR", *((float *)this + 13));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 14));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "repetitiveMotion", *((_DWORD *)this + 15));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "repetitiveMotionEndTs", *((_QWORD *)this + 4));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "repetitiveMotionStartTs", *((_QWORD *)this + 5));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "seq", *((_DWORD *)this + 16));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(a2, "sumHighQPeaksInHighFreqFFT", *((float *)this + 18));
    if ((*((_WORD *)this + 40) & 0x1000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "sumHighQPeaksInDecLowFreqFFT", *((float *)this + 17));
  v5 = *((_WORD *)this + 40);
  if ((v5 & 0x800) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x1000) != 0)
LABEL_14:
    PB::TextFormatter::format(a2, "sumHighQPeaksInLowFreqFFT", *((float *)this + 19));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::readFrom(CMMsl::FallFalsePositiveSuppressionFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 40) |= 4u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_168;
                  }
                  v77 = v20++;
                  v78 = *(_BYTE *)(v21 + v77);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_167:
                v2 = v77 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_168;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_168:
              *((_QWORD *)this + 3) = v24;
              goto LABEL_209;
            case 2u:
              *((_WORD *)this + 40) |= 2u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_173;
                  }
                  v81 = v27++;
                  v82 = *(_BYTE *)(v28 + v81);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_172:
                    v2 = v81 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_172;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_173;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_173:
              *((_QWORD *)this + 2) = v31;
              goto LABEL_209;
            case 3u:
              *((_WORD *)this + 40) |= 1u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_178;
                  }
                  v85 = v33++;
                  v86 = *(_BYTE *)(v34 + v85);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_177:
                    v2 = v85 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v37 = 0;
                goto LABEL_177;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_178;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_178:
              *((_QWORD *)this + 1) = v37;
              goto LABEL_209;
            case 4u:
              *((_WORD *)this + 40) |= 0x200u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_183;
                  }
                  v89 = v39++;
                  v90 = *(_BYTE *)(v40 + v89);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_182:
                    v2 = v89 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_182;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_183;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_183:
              *((_DWORD *)this + 16) = v43;
              goto LABEL_209;
            case 5u:
              *((_WORD *)this + 40) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_70;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_163;
            case 6u:
              *((_WORD *)this + 40) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_70;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_163;
            case 7u:
              *((_WORD *)this + 40) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_70;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_163;
            case 8u:
              *((_WORD *)this + 40) |= 0x20u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_188;
                  }
                  v93 = v45++;
                  v94 = *(_BYTE *)(v46 + v93);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_187:
                    v2 = v93 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_187;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_188;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_188:
              *((_DWORD *)this + 12) = v49;
              goto LABEL_209;
            case 9u:
              *((_WORD *)this + 40) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_163:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_70:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_209;
            case 0xAu:
              *((_WORD *)this + 40) |= 0x100u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_193;
                  }
                  v97 = v51++;
                  v98 = *(_BYTE *)(v52 + v97);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_192:
                    v2 = v97 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_192;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_193;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_193:
              *((_DWORD *)this + 15) = v55;
              goto LABEL_209;
            case 0xBu:
              *((_WORD *)this + 40) |= 0x10u;
              v57 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v58 = *(_QWORD *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    v61 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_198;
                  }
                  v101 = v57++;
                  v102 = *(_BYTE *)(v58 + v101);
                  *((_QWORD *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    v61 = 0;
LABEL_197:
                    v2 = v101 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v61 = 0;
                goto LABEL_197;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)a2 + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_198;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              v61 = 0;
LABEL_198:
              *((_QWORD *)this + 5) = v61;
              goto LABEL_209;
            case 0xCu:
              *((_WORD *)this + 40) |= 8u;
              v63 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v64 = *(_QWORD *)a2;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v103 = 0;
                v104 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    v67 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_203;
                  }
                  v105 = v63++;
                  v106 = *(_BYTE *)(v64 + v105);
                  *((_QWORD *)a2 + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0)
                    break;
                  v103 += 7;
                  v14 = v104++ > 8;
                  if (v14)
                  {
                    v67 = 0;
LABEL_202:
                    v2 = v105 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v67 = 0;
                goto LABEL_202;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)a2 + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_203;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              v67 = 0;
LABEL_203:
              *((_QWORD *)this + 4) = v67;
              goto LABEL_209;
            case 0xDu:
              *((_WORD *)this + 40) |= 0x80u;
              v69 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v70 = *(_QWORD *)a2;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v107 = 0;
                v108 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_208;
                  }
                  v109 = v69++;
                  v110 = *(_BYTE *)(v70 + v109);
                  *((_QWORD *)a2 + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0)
                    break;
                  v107 += 7;
                  v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_207:
                    v2 = v109 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v73) = 0;
                goto LABEL_207;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)a2 + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_208;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_208:
              *((_DWORD *)this + 14) = v73;
LABEL_209:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_209;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 80);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 24), 1u);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 3u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 4u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 5u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 6u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 7u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 8u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 9u);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0xAu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0xBu);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0xDu);
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0xCu);
  if ((*(_WORD *)(v3 + 80) & 0x80) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0xDu);
  return this;
}

BOOL CMMsl::FallFalsePositiveSuppressionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 80);
  v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x200) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0)
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  return v4;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(CMMsl::FallFalsePositiveSuppressionFeatures *this)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *((_WORD *)this + 40);
  if ((v1 & 4) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if ((v1 & 2) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 2);
      if ((v1 & 1) != 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 1);
    if ((*((_WORD *)this + 40) & 0x200) != 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  v4 = 0;
  if ((*((_WORD *)this + 40) & 0x200) != 0)
  {
LABEL_5:
    v5 = *((unsigned int *)this + 16);
    if ((*((_WORD *)this + 40) & 0x800) != 0)
      goto LABEL_6;
LABEL_27:
    v7 = 0;
    if ((*((_WORD *)this + 40) & 0x1000) != 0)
      goto LABEL_9;
LABEL_28:
    v9 = 0;
    if ((*((_WORD *)this + 40) & 0x400) != 0)
      goto LABEL_12;
LABEL_29:
    v11 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_26:
  v5 = 0;
  if ((*((_WORD *)this + 40) & 0x800) == 0)
    goto LABEL_27;
LABEL_6:
  v6 = *((float *)this + 18);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_WORD *)this + 40) & 0x1000) == 0)
    goto LABEL_28;
LABEL_9:
  v8 = *((float *)this + 19);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_WORD *)this + 40) & 0x400) == 0)
    goto LABEL_29;
LABEL_12:
  v10 = *((float *)this + 17);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_15:
    v12 = *((int *)this + 12);
    if ((v1 & 0x40) != 0)
      goto LABEL_16;
LABEL_31:
    v14 = 0;
    if ((*((_WORD *)this + 40) & 0x100) != 0)
      goto LABEL_19;
    goto LABEL_32;
  }
LABEL_30:
  v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_31;
LABEL_16:
  v13 = *((float *)this + 13);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 40) & 0x100) != 0)
  {
LABEL_19:
    v15 = *((int *)this + 15);
    if ((v1 & 0x10) != 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_32:
  v15 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_20:
    v16 = *((_QWORD *)this + 5);
    if ((v1 & 8) != 0)
      goto LABEL_21;
LABEL_34:
    v17 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_22;
LABEL_35:
    v18 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_33:
  v16 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_34;
LABEL_21:
  v17 = *((_QWORD *)this + 4);
  if ((v1 & 0x80) == 0)
    goto LABEL_35;
LABEL_22:
  v18 = *((unsigned int *)this + 14);
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
}

uint64_t CMMsl::FallMetaData::FallMetaData(uint64_t this)
{
  *(_QWORD *)this = off_100350FA8;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100350FA8;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CMMsl::FallMetaData::~FallMetaData(CMMsl::FallMetaData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FallMetaData::FallMetaData(uint64_t this, const CMMsl::FallMetaData *a2)
{
  int v2;
  int v3;
  int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;

  *(_QWORD *)this = off_100350FA8;
  *(_DWORD *)(this + 72) = 0;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_DWORD *)(this + 72) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_DWORD *)a2 + 18);
    if ((v2 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 70);
    v3 |= 0x20000u;
    *(_DWORD *)(this + 72) = v3;
    *(_BYTE *)(this + 70) = v5;
    v2 = *((_DWORD *)a2 + 18);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(_DWORD *)(this + 72) = v3;
    *(_DWORD *)(this + 12) = v6;
    v2 = *((_DWORD *)a2 + 18);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 60) = v7;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x4000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *((_DWORD *)a2 + 16);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 64) = v8;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 16) = v9;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *((_DWORD *)a2 + 7);
  v3 |= 0x20u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 28) = v10;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *((_DWORD *)a2 + 5);
  v3 |= 8u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 20) = v11;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 24) = v12;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 56) = v13;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x800u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 52) = v14;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *((_DWORD *)a2 + 12);
  v3 |= 0x400u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 48) = v15;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *((_DWORD *)a2 + 11);
  v3 |= 0x200u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 44) = v16;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *((_DWORD *)a2 + 8);
  v3 |= 0x40u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 32) = v17;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *((_DWORD *)a2 + 9);
  v3 |= 0x80u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 36) = v18;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x100u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 40) = v19;
  v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      return this;
LABEL_38:
    v21 = *((_BYTE *)a2 + 68);
    *(_DWORD *)(this + 72) = v3 | 0x8000;
    *(_BYTE *)(this + 68) = v21;
    return this;
  }
LABEL_37:
  v20 = *((_BYTE *)a2 + 69);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 72) = v3;
  *(_BYTE *)(this + 69) = v20;
  if ((*((_DWORD *)a2 + 18) & 0x8000) != 0)
    goto LABEL_38;
  return this;
}

CMMsl *CMMsl::FallMetaData::operator=(CMMsl *a1, const CMMsl::FallMetaData *a2)
{
  CMMsl::FallMetaData *v3;
  _BYTE v5[80];

  if (a1 != a2)
  {
    CMMsl::FallMetaData::FallMetaData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallMetaData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallMetaData *a2, CMMsl::FallMetaData *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float result;

  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  LOBYTE(v4) = *((_BYTE *)this + 70);
  *((_BYTE *)this + 70) = *((_BYTE *)a2 + 70);
  *((_BYTE *)a2 + 70) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  v11 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v11;
  v12 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  v13 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v13;
  v14 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v14;
  v15 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v15;
  v16 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v16;
  v17 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v17;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LOBYTE(v7) = *((_BYTE *)this + 69);
  *((_BYTE *)this + 69) = *((_BYTE *)a2 + 69);
  *((_BYTE *)a2 + 69) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 68);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v7;
  return result;
}

float CMMsl::FallMetaData::FallMetaData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100350FA8;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 70) = *(_BYTE *)(a2 + 70);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_BYTE *)(a1 + 69) = *(_BYTE *)(a2 + 69);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  return result;
}

CMMsl *CMMsl::FallMetaData::operator=(CMMsl *this, uint64_t a2, CMMsl::FallMetaData *a3)
{
  __int128 v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  int v15;

  if (this != (CMMsl *)a2)
  {
    v6[0] = off_100350FA8;
    v15 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(a2 + 72) = 0;
    v14 = *(_BYTE *)(a2 + 70);
    v6[1] = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 60);
    v10 = *(_DWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 48);
    v4 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = v4;
    v13 = *(_BYTE *)(a2 + 69);
    v12 = *(_BYTE *)(a2 + 68);
    CMMsl::swap(this, (CMMsl::FallMetaData *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::FallMetaData::formatText(CMMsl::FallMetaData *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "crownUpDown", *((_DWORD *)this + 2));
    v5 = *((_DWORD *)this + 18);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fallType", *((_DWORD *)this + 3));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "impactMaxAccelNormAlertThreshold", *((float *)this + 4));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingHeartRateThreshold", *((float *)this + 5));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *((float *)this + 6));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingStatsThreshold", *((float *)this + 7));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isADLImpact", *((_BYTE *)this + 68));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isFallDetectionFeatureEnabled", *((_BYTE *)this + 69));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isNearFall", *((_BYTE *)this + 70));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "metMinutePercentile90", *((float *)this + 8));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "metMinutePercentile95", *((float *)this + 9));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "metMinutePercentile98", *((float *)this + 10));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "metMinutePercentileActual", *((float *)this + 11));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "otherFallPosteriorRatioDetectionThreshold", *((float *)this + 12));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "slipFallPosteriorRatioDetectionThreshold", *((float *)this + 13));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(a2, "userAgeBucket", *((_DWORD *)this + 15));
    if ((*((_DWORD *)this + 18) & 0x4000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "tripFallPosteriorRatioDetectionThreshold", *((float *)this + 14));
  v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x2000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x4000) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallMetaData::readFrom(CMMsl::FallMetaData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 18) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_131;
                  }
                  v53 = v20++;
                  v54 = *(_BYTE *)(v21 + v53);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v24) = 0;
LABEL_130:
                v2 = v53 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_131;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_131:
              *((_DWORD *)this + 2) = v24;
              goto LABEL_147;
            case 2u:
              *((_DWORD *)this + 18) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 70) = v28;
              goto LABEL_147;
            case 3u:
              *((_DWORD *)this + 18) |= 2u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_136;
                  }
                  v57 = v29++;
                  v58 = *(_BYTE *)(v30 + v57);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_135:
                    v2 = v57 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v33) = 0;
                goto LABEL_135;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_136;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_136:
              *((_DWORD *)this + 3) = v33;
              goto LABEL_147;
            case 4u:
              *((_DWORD *)this + 18) |= 0x2000u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_141;
                  }
                  v61 = v35++;
                  v62 = *(_BYTE *)(v36 + v61);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_140:
                    v2 = v61 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v39) = 0;
                goto LABEL_140;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_141;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_141:
              *((_DWORD *)this + 15) = v39;
              goto LABEL_147;
            case 5u:
              *((_DWORD *)this + 18) |= 0x4000u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_146;
                  }
                  v65 = v41++;
                  v66 = *(_BYTE *)(v42 + v65);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_145:
                    v2 = v65 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v45) = 0;
                goto LABEL_145;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_146;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_146:
              *((_DWORD *)this + 16) = v45;
LABEL_147:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *((_DWORD *)this + 18) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 7u:
              *((_DWORD *)this + 18) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 8u:
              *((_DWORD *)this + 18) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 9u:
              *((_DWORD *)this + 18) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 0xAu:
              *((_DWORD *)this + 18) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 0xBu:
              *((_DWORD *)this + 18) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 0xCu:
              *((_DWORD *)this + 18) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 0xDu:
              *((_DWORD *)this + 18) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 0xEu:
              *((_DWORD *)this + 18) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 0xFu:
              *((_DWORD *)this + 18) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_86;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_126;
            case 0x10u:
              *((_DWORD *)this + 18) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_126:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_86:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_147;
            case 0x11u:
              *((_DWORD *)this + 18) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v48 = v47 != 0;
              }
              *((_BYTE *)this + 69) = v48;
              goto LABEL_147;
            case 0x12u:
              *((_DWORD *)this + 18) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v50 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v50 = v49 != 0;
              }
              *((_BYTE *)this + 68) = v50;
              goto LABEL_147;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_147;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallMetaData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 72);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 70), 2u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 3u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 4u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 5u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 6u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 7u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 8u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 9u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xAu);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xBu);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xCu);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xDu);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xEu);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xFu);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x10u);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 68), 0x12u);
  }
LABEL_36:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 69), 0x11u);
  if ((*(_DWORD *)(v3 + 72) & 0x8000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 68), 0x12u);
  return this;
}

BOOL CMMsl::FallMetaData::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 72);
  v3 = *(_DWORD *)(a2 + 72);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 70) != *(unsigned __int8 *)(a2 + 70))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 72) & 0x8000) == 0;
  if ((v2 & 0x8000) != 0)
    return (v3 & 0x8000) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  return v4;
}

uint64_t CMMsl::FallMetaData::hash_value(CMMsl::FallMetaData *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *((_DWORD *)this + 18);
  if ((v1 & 1) != 0)
  {
    v2 = *((int *)this + 2);
    if ((v1 & 0x20000) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 70);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_44;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v4 = *((int *)this + 3);
    if ((v1 & 0x2000) != 0)
      goto LABEL_5;
    goto LABEL_45;
  }
LABEL_44:
  v4 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_5:
    v5 = *((int *)this + 15);
    if ((v1 & 0x4000) != 0)
      goto LABEL_6;
    goto LABEL_46;
  }
LABEL_45:
  v5 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_6:
    v6 = *((int *)this + 16);
    if ((v1 & 4) != 0)
      goto LABEL_7;
LABEL_47:
    v8 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_10;
LABEL_48:
    v10 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_13;
LABEL_49:
    v12 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_16;
LABEL_50:
    v14 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_19;
LABEL_51:
    v16 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_22;
LABEL_52:
    v18 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_25;
LABEL_53:
    v20 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_28;
LABEL_54:
    v22 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_31;
LABEL_55:
    v24 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_34;
LABEL_56:
    v26 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_37;
LABEL_57:
    v28 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_40;
LABEL_58:
    v29 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_41;
LABEL_59:
    v30 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30;
  }
LABEL_46:
  v6 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_47;
LABEL_7:
  v7 = *((float *)this + 4);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_48;
LABEL_10:
  v9 = *((float *)this + 7);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_49;
LABEL_13:
  v11 = *((float *)this + 5);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_50;
LABEL_16:
  v13 = *((float *)this + 6);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_51;
LABEL_19:
  v15 = *((float *)this + 14);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_52;
LABEL_22:
  v17 = *((float *)this + 13);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_53;
LABEL_25:
  v19 = *((float *)this + 12);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_54;
LABEL_28:
  v21 = *((float *)this + 11);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_55;
LABEL_31:
  v23 = *((float *)this + 8);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_56;
LABEL_34:
  v25 = *((float *)this + 9);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_57;
LABEL_37:
  v27 = *((float *)this + 10);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_58;
LABEL_40:
  v29 = *((unsigned __int8 *)this + 69);
  if ((v1 & 0x8000) == 0)
    goto LABEL_59;
LABEL_41:
  v30 = *((unsigned __int8 *)this + 68);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30;
}

double CMMsl::FallSnippet::FallSnippet(CMMsl::FallSnippet *this)
{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_100350FE0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

{
  double result;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_100350FE0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

void CMMsl::FallSnippet::~FallSnippet(CMMsl::FallSnippet *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = off_100350FE0;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  PB::Base::~Base(this);
}

{
  CMMsl::FallSnippet::~FallSnippet(this);
  operator delete();
}

uint64_t CMMsl::FallSnippet::FallSnippet(uint64_t this, const CMMsl::FallSnippet *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100350FE0;
  *(_QWORD *)(this + 8) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_QWORD *)(this + 16) = 0;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_OWORD *)(this + 112) = 0u;
  *(_DWORD *)(this + 128) = 0;
  if ((*((_BYTE *)a2 + 128) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 3);
    *(_BYTE *)(this + 128) = 1;
    *(_QWORD *)(this + 24) = v2;
  }
  if (*((_QWORD *)a2 + 11))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 8))
    operator new();
  if (*((_QWORD *)a2 + 9))
    operator new();
  if (*((_QWORD *)a2 + 4))
    operator new();
  if (*((_QWORD *)a2 + 13))
    operator new();
  if (*((_QWORD *)a2 + 10))
    operator new();
  if (*((_QWORD *)a2 + 15))
    operator new();
  if (*((_QWORD *)a2 + 6))
    operator new();
  if (*((_QWORD *)a2 + 7))
    operator new();
  if (*((_QWORD *)a2 + 14))
    operator new();
  if (*((_QWORD *)a2 + 5))
    operator new();
  if (*((_QWORD *)a2 + 12))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::operator=(uint64_t a1, const CMMsl::FallSnippet *a2)
{
  CMMsl::FallSnippet *v3;
  _BYTE v5[136];

  if ((const CMMsl::FallSnippet *)a1 != a2)
  {
    CMMsl::FallSnippet::FallSnippet((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallSnippet *)v5, v3);
    CMMsl::FallSnippet::~FallSnippet((CMMsl::FallSnippet *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallSnippet *a2, CMMsl::FallSnippet *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_DWORD *)(this + 128);
  *(_DWORD *)(this + 128) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v7 = *(_QWORD *)(this + 16);
  v6 = *(_QWORD *)(this + 24);
  v8 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 24) = v8;
  *((_QWORD *)a2 + 2) = v7;
  *((_QWORD *)a2 + 3) = v6;
  v9 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *(_QWORD *)(this + 104);
  *(_QWORD *)(this + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  v13 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v13;
  v14 = *(_QWORD *)(this + 120);
  *(_QWORD *)(this + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v14;
  v15 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v15;
  v16 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v16;
  v17 = *(_QWORD *)(this + 112);
  *(_QWORD *)(this + 112) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v17;
  v18 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v18;
  v19 = *(_QWORD *)(this + 96);
  *(_QWORD *)(this + 96) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v19;
  return this;
}

uint64_t CMMsl::FallSnippet::FallSnippet(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = off_100350FE0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *v4;
  *v4 = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v17 = *v5;
  *v5 = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v19 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v23 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v27 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v29 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v31 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v30;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v33 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  return a1;
}

uint64_t CMMsl::FallSnippet::operator=(uint64_t a1, uint64_t a2)
{
  CMMsl::FallSnippet *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::FallSnippet::FallSnippet((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallSnippet *)v5, v3);
    CMMsl::FallSnippet::~FallSnippet((CMMsl::FallSnippet *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallSnippet::formatText(CMMsl::FallSnippet *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "accel100");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "accel800");
  if ((*((_BYTE *)this + 128) & 1) != 0)
    PB::TextFormatter::format(a2, "aopTimestamp", *((_QWORD *)this + 3));
  v7 = *((_QWORD *)this + 4);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "dm");
  v8 = *((_QWORD *)this + 5);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "dmAlwaysOn");
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "fallState");
  v10 = *((_QWORD *)this + 7);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "fallStats");
  v11 = *((_QWORD *)this + 8);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "gyro100");
  v12 = *((_QWORD *)this + 9);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "gyro200");
  v13 = *((_QWORD *)this + 10);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "heartRate");
  v14 = *((_QWORD *)this + 11);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "meta");
  v15 = *((_QWORD *)this + 12);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "odometerEntry");
  v16 = *((_QWORD *)this + 13);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, a2, "pressure");
  v17 = *((_QWORD *)this + 14);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "suppressionFeatures");
  v18 = *((_QWORD *)this + 15);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, a2, "wristState");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallSnippet::readFrom(CMMsl::FallSnippet *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 2u:
          *((_BYTE *)this + 128) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_60;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_56:
            v25 = 0;
            goto LABEL_60;
          }
          v30 = 0;
          v31 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          operator new();
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          operator new();
        case 0xAu:
          operator new();
        case 0xBu:
          operator new();
        case 0xCu:
          operator new();
        case 0xDu:
          operator new();
        case 0xEu:
          operator new();
        case 0xFu:
          operator new();
        case 0x10u:
          operator new();
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_45;
      }
      while (1)
      {
        if (v21 == v20)
        {
          v25 = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_60;
        }
        v32 = v20 + 1;
        v33 = *(_BYTE *)(v22 + v20);
        *((_QWORD *)a2 + 1) = v32;
        v25 |= (unint64_t)(v33 & 0x7F) << v30;
        if ((v33 & 0x80) == 0)
          break;
        v30 += 7;
        v20 = v32;
        v14 = v31++ > 8;
        if (v14)
          goto LABEL_56;
      }
      if (*((_BYTE *)a2 + 24))
        v25 = 0;
LABEL_60:
      *((_QWORD *)this + 3) = v25;
LABEL_45:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pressure::Pressure(uint64_t this)
{
  *(_QWORD *)this = off_100353AF8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353AF8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

_QWORD *CMMsl::StreamingHeartRateData::StreamingHeartRateData(_QWORD *this)
{
  *this = off_100354B28;
  this[1] = 0;
  return this;
}

{
  *this = off_100354B28;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::WatchOnWristState::WatchOnWristState(uint64_t this)
{
  *(_QWORD *)this = off_100355458;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355458;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::FallState::FallState(uint64_t this)
{
  *(_QWORD *)this = off_100351018;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351018;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

_QWORD *CMMsl::FallStats::FallStats(_QWORD *this)
{
  *this = off_100351050;
  this[27] = 0;
  return this;
}

{
  *this = off_100351050;
  this[27] = 0;
  return this;
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t this)
{
  *(_QWORD *)this = off_100352F28;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352F28;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::FallSnippet::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Base *v17;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 128) & 1) != 0)
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 24), 2u);
  v4 = (const PB::Base *)v3[11];
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 3u);
  v5 = (const PB::Base *)v3[1];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 4u);
  v6 = (const PB::Base *)v3[2];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6, 5u);
  v7 = (const PB::Base *)v3[8];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7, 6u);
  v8 = (const PB::Base *)v3[9];
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8, 7u);
  v9 = (const PB::Base *)v3[4];
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9, 8u);
  v10 = (const PB::Base *)v3[13];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10, 9u);
  v11 = (const PB::Base *)v3[10];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11, 0xAu);
  v12 = (const PB::Base *)v3[15];
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12, 0xBu);
  v13 = (const PB::Base *)v3[6];
  if (v13)
    this = PB::Writer::writeSubmessage(a2, v13, 0xCu);
  v14 = (const PB::Base *)v3[7];
  if (v14)
    this = PB::Writer::writeSubmessage(a2, v14, 0xDu);
  v15 = (const PB::Base *)v3[14];
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15, 0xEu);
  v16 = (const PB::Base *)v3[5];
  if (v16)
    this = PB::Writer::writeSubmessage(a2, v16, 0xFu);
  v17 = (const PB::Base *)v3[12];
  if (v17)
    return PB::Writer::writeSubmessage(a2, v17, 0x10u);
  return this;
}

BOOL CMMsl::FallSnippet::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 128) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 128) & 1) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 128) & 1) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a2 + 88);
  if (v4)
  {
    if (!v5 || !CMMsl::FallMetaData::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::Accel::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    if (!v9 || !CMMsl::Accel::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  if (v10)
  {
    if (!v11 || !CMMsl::Gyro::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a2 + 72);
  if (v12)
  {
    if (!v13 || !CMMsl::Gyro::operator==(v12, v13))
      return 0;
  }
  else if (v13)
  {
    return 0;
  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a2 + 32);
  if (v14)
  {
    if (!v15 || !CMMsl::DeviceMotion::operator==(v14, v15))
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a2 + 104);
  if (v16)
  {
    if (!v17 || !CMMsl::Pressure::operator==(v16, v17))
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a2 + 80);
  if (v18)
  {
    if (!v19)
      return 0;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      if (!v21 || !CMMsl::OnsetHeartRateData::operator==(v20, v21))
        return 0;
    }
    else if (v21)
    {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a2 + 120);
  if (v22)
  {
    if (!v23 || !CMMsl::WatchOnWristState::operator==(v22, v23))
      return 0;
  }
  else if (v23)
  {
    return 0;
  }
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(_QWORD *)(a2 + 48);
  if (v24)
  {
    if (!v25 || !CMMsl::FallState::operator==(v24, v25))
      return 0;
  }
  else if (v25)
  {
    return 0;
  }
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(a2 + 56);
  if (v26)
  {
    if (!v27 || !CMMsl::FallStats::operator==(v26, v27))
      return 0;
  }
  else if (v27)
  {
    return 0;
  }
  v28 = *(_QWORD *)(a1 + 112);
  v29 = *(_QWORD *)(a2 + 112);
  if (v28)
  {
    if (!v29 || !CMMsl::FallFalsePositiveSuppressionFeatures::operator==(v28, v29))
      return 0;
  }
  else if (v29)
  {
    return 0;
  }
  v30 = *(_QWORD *)(a1 + 40);
  v31 = *(_QWORD *)(a2 + 40);
  if (v30)
  {
    if (!v31 || !CMMsl::DeviceMotion::operator==(v30, v31))
      return 0;
  }
  else if (v31)
  {
    return 0;
  }
  v32 = *(_QWORD *)(a2 + 96);
  result = v32 == 0;
  if (!*(_QWORD *)(a1 + 96))
    return result;
  return v32 && CMMsl::OdometerWithAltitude::operator==(*(_QWORD *)(a1 + 96), v32);
}

BOOL CMMsl::Pressure::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 4) == 0;
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
    return (*(_BYTE *)(a2 + 24) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

BOOL CMMsl::StreamingHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WatchOnWristState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a2 + 37))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 38) != *(unsigned __int8 *)(a2 + 38))
      return 0;
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  return v4;
}

BOOL CMMsl::FallState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(unsigned __int8 *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
    return *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  else
    return ((v2 | v3) & 0x80u) == 0;
}

BOOL CMMsl::FallStats::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 216);
  v3 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208))
      return 0;
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204))
      return 0;
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212))
      return 0;
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200))
      return 0;
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148))
      return 0;
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  v4 = (*(_QWORD *)(a2 + 216) & 8) == 0;
  if ((v2 & 8) != 0)
    return (v3 & 8) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  return v4;
}

BOOL CMMsl::OdometerWithAltitude::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a2 + 72);
  if (v4)
  {
    if (!v5 || !CMMsl::Odometer::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 *)(a1 + 80);
  v7 = *(unsigned __int8 *)(a2 + 80);
  if ((v6 & 4) != 0)
  {
    if ((v7 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v7 & 4) != 0)
  {
    return 0;
  }
  if ((v6 & 8) != 0)
  {
    if ((v7 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v7 & 8) != 0)
  {
    return 0;
  }
  if ((v6 & 0x40) != 0)
  {
    if ((v7 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v7 & 0x40) != 0)
  {
    return 0;
  }
  if ((v6 & v7 & 0x80) != 0)
  {
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if (((v6 | v7) & 0x80) != 0)
  {
    return 0;
  }
  if ((v6 & 2) != 0)
  {
    if ((v7 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v7 & 2) != 0)
  {
    return 0;
  }
  if ((v6 & 1) != 0)
  {
    if ((v7 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v7 & 1) != 0)
  {
    return 0;
  }
  if ((v6 & 0x20) != 0)
  {
    if ((v7 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v7 & 0x20) != 0)
  {
    return 0;
  }
  result = (v7 & 0x10) == 0;
  if ((v6 & 0x10) == 0)
    return result;
  return (v7 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
}

unint64_t CMMsl::FallSnippet::hash_value(CMMsl::FallSnippet *this)
{
  uint64_t v2;
  CMMsl::FallMetaData *v3;
  uint64_t v4;
  CMMsl::Accel *v5;
  uint64_t v6;
  CMMsl::Accel *v7;
  uint64_t v8;
  CMMsl::Gyro *v9;
  uint64_t v10;
  CMMsl::Gyro *v11;
  uint64_t v12;
  CMMsl::DeviceMotion *v13;
  uint64_t v14;
  CMMsl::Pressure *v15;
  uint64_t v16;
  uint64_t v17;
  CMMsl::OnsetHeartRateData *v18;
  uint64_t v19;
  CMMsl::WatchOnWristState *v20;
  uint64_t v21;
  CMMsl::FallState *v22;
  uint64_t v23;
  CMMsl::FallStats *v24;
  uint64_t v25;
  CMMsl::FallFalsePositiveSuppressionFeatures *v26;
  uint64_t v27;
  CMMsl::DeviceMotion *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((*((_BYTE *)this + 128) & 1) != 0)
    v2 = *((_QWORD *)this + 3);
  else
    v2 = 0;
  v3 = (CMMsl::FallMetaData *)*((_QWORD *)this + 11);
  v36 = v2;
  if (v3)
    v4 = CMMsl::FallMetaData::hash_value(v3);
  else
    v4 = 0;
  v5 = (CMMsl::Accel *)*((_QWORD *)this + 1);
  v35 = v4;
  if (v5)
    v6 = CMMsl::Accel::hash_value(v5);
  else
    v6 = 0;
  v7 = (CMMsl::Accel *)*((_QWORD *)this + 2);
  v34 = v6;
  if (v7)
    v8 = CMMsl::Accel::hash_value(v7);
  else
    v8 = 0;
  v9 = (CMMsl::Gyro *)*((_QWORD *)this + 8);
  v33 = v8;
  if (v9)
    v10 = CMMsl::Gyro::hash_value(v9);
  else
    v10 = 0;
  v11 = (CMMsl::Gyro *)*((_QWORD *)this + 9);
  v32 = v10;
  if (v11)
    v12 = CMMsl::Gyro::hash_value(v11);
  else
    v12 = 0;
  v13 = (CMMsl::DeviceMotion *)*((_QWORD *)this + 4);
  if (v13)
    v14 = CMMsl::DeviceMotion::hash_value(v13);
  else
    v14 = 0;
  v15 = (CMMsl::Pressure *)*((_QWORD *)this + 13);
  if (v15)
    v16 = CMMsl::Pressure::hash_value(v15);
  else
    v16 = 0;
  v17 = *((_QWORD *)this + 10);
  if (v17 && (v18 = *(CMMsl::OnsetHeartRateData **)(v17 + 8)) != 0)
    v19 = CMMsl::OnsetHeartRateData::hash_value(v18);
  else
    v19 = 0;
  v20 = (CMMsl::WatchOnWristState *)*((_QWORD *)this + 15);
  if (v20)
    v21 = CMMsl::WatchOnWristState::hash_value(v20);
  else
    v21 = 0;
  v22 = (CMMsl::FallState *)*((_QWORD *)this + 6);
  if (v22)
    v23 = CMMsl::FallState::hash_value(v22);
  else
    v23 = 0;
  v24 = (CMMsl::FallStats *)*((_QWORD *)this + 7);
  if (v24)
    v25 = CMMsl::FallStats::hash_value(v24);
  else
    v25 = 0;
  v26 = (CMMsl::FallFalsePositiveSuppressionFeatures *)*((_QWORD *)this + 14);
  if (v26)
    v27 = CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(v26);
  else
    v27 = 0;
  v28 = (CMMsl::DeviceMotion *)*((_QWORD *)this + 5);
  if (v28)
    v29 = CMMsl::DeviceMotion::hash_value(v28);
  else
    v29 = 0;
  v30 = *((_QWORD *)this + 12);
  if (v30)
    v30 = CMMsl::OdometerWithAltitude::hash_value((CMMsl::OdometerWithAltitude *)v30);
  return v35 ^ v36 ^ v34 ^ v33 ^ v32 ^ v12 ^ v14 ^ v16 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30;
}

uint64_t CMMsl::FallSnippet::makeMeta(uint64_t this)
{
  if (!*(_QWORD *)(this + 88))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeAccel100(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeAccel800(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeGyro100(uint64_t this)
{
  if (!*(_QWORD *)(this + 64))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeGyro200(uint64_t this)
{
  if (!*(_QWORD *)(this + 72))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeDm(uint64_t this)
{
  if (!*(_QWORD *)(this + 32))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makePressure(uint64_t this)
{
  if (!*(_QWORD *)(this + 104))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeHeartRate(uint64_t this)
{
  if (!*(_QWORD *)(this + 80))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeWristState(uint64_t this)
{
  if (!*(_QWORD *)(this + 120))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeFallState(uint64_t this)
{
  if (!*(_QWORD *)(this + 48))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeFallStats(uint64_t this)
{
  if (!*(_QWORD *)(this + 56))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeSuppressionFeatures(uint64_t this)
{
  if (!*(_QWORD *)(this + 112))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeDmAlwaysOn(uint64_t this)
{
  if (!*(_QWORD *)(this + 40))
    operator new();
  return this;
}

uint64_t CMMsl::FallSnippet::makeOdometerEntry(uint64_t this)
{
  if (!*(_QWORD *)(this + 96))
    operator new();
  return this;
}

void CMMsl::FallState::~FallState(CMMsl::FallState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FallState::FallState(uint64_t this, const CMMsl::FallState *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;

  *(_QWORD *)this = off_100351018;
  *(_DWORD *)(this + 48) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 48) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *(_BYTE *)(this + 48) = v3;
    *(_QWORD *)(this + 8) = v5;
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(_BYTE *)(this + 48) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_BYTE *)(this + 48) = v3;
  *(_DWORD *)(this + 40) = v7;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_BYTE *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v8;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_BYTE *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v9;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      return this;
LABEL_18:
    v11 = *((_BYTE *)a2 + 44);
    *(_BYTE *)(this + 48) = v3 | 0x80;
    *(_BYTE *)(this + 44) = v11;
    return this;
  }
LABEL_17:
  v10 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_BYTE *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v10;
  if ((*((_BYTE *)a2 + 48) & 0x80) != 0)
    goto LABEL_18;
  return this;
}

uint64_t CMMsl::FallState::operator=(uint64_t a1, const CMMsl::FallState *a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if ((const CMMsl::FallState *)a1 != a2)
  {
    CMMsl::FallState::FallState((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v4;
    v10 = v6;
    LOBYTE(v5) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v12;
    v12 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallState *a2, CMMsl::FallState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v5) = *(_BYTE *)(this + 44);
  *(_BYTE *)(this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v5;
  return this;
}

uint64_t CMMsl::FallState::FallState(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_100351018;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(result + 44) = *(_BYTE *)(a2 + 44);
  return result;
}

{
  *(_QWORD *)result = off_100351018;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(result + 44) = *(_BYTE *)(a2 + 44);
  return result;
}

uint64_t CMMsl::FallState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void (**v10)(CMMsl::FallState *__hidden);
  __int128 v11;
  __int128 v12;
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    v10 = off_100351018;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_DWORD *)(a2 + 40);
    v5 = *(_BYTE *)(a2 + 44);
    v15 = *(_DWORD *)(a1 + 48);
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    v13 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v8;
    v11 = v6;
    v12 = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v5;
    v14 = v3;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::FallState::formatText(CMMsl::FallState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "aopTsNow", *((_QWORD *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "aopTsSensor", *((_QWORD *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "fallAlertSentFromReferee", *((_BYTE *)this + 44));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "isFall", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "response", *((_DWORD *)this + 9));
    if ((*((_BYTE *)this + 48) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "resolution", *((_DWORD *)this + 8));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x20) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x40) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallState::readFrom(CMMsl::FallState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  int v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)a2 + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 48) |= 2u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v20++;
                  v68 = *(_BYTE *)(v21 + v67);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_136:
                v3 = v67 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_137;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_137:
              *((_QWORD *)this + 2) = v24;
              goto LABEL_168;
            case 2u:
              *((_BYTE *)this + 48) |= 1u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v27++;
                  v72 = *(_BYTE *)(v28 + v71);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_141:
                    v3 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_141;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_142;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_142:
              *((_QWORD *)this + 1) = v31;
              goto LABEL_168;
            case 3u:
              *((_BYTE *)this + 48) |= 4u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v33++;
                  v76 = *(_BYTE *)(v34 + v75);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_146:
                    v3 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_146;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_147;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_147:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_168;
            case 4u:
              *((_BYTE *)this + 48) |= 0x40u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v39++;
                  v80 = *(_BYTE *)(v40 + v79);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_151:
                    v3 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_151;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_152;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_152:
              *((_DWORD *)this + 10) = v43;
              goto LABEL_168;
            case 5u:
              *((_BYTE *)this + 48) |= 0x20u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  v83 = v45++;
                  v84 = *(_BYTE *)(v46 + v83);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_156:
                    v3 = v83 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_156;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_157;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_157:
              *((_DWORD *)this + 9) = v49;
              goto LABEL_168;
            case 6u:
              *((_BYTE *)this + 48) |= 0x10u;
              v51 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v52 = *(_QWORD *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v85 = 0;
                v86 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_162;
                  }
                  v87 = v51++;
                  v88 = *(_BYTE *)(v52 + v87);
                  *((_QWORD *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0)
                    break;
                  v85 += 7;
                  v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_161:
                    v3 = v87 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v55) = 0;
                goto LABEL_161;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v3 = v51 + 1;
                *((_QWORD *)a2 + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_162;
                v53 += 7;
                v51 = v3;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_162:
              *((_DWORD *)this + 8) = v55;
              goto LABEL_168;
            case 7u:
              *((_BYTE *)this + 48) |= 8u;
              v57 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v58 = *(_QWORD *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v89 = 0;
                v90 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v3 = *((_QWORD *)a2 + 1);
                else
                  v3 = *((_QWORD *)a2 + 2);
                while (1)
                {
                  if (v3 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_167;
                  }
                  v91 = v57++;
                  v92 = *(_BYTE *)(v58 + v91);
                  *((_QWORD *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0)
                    break;
                  v89 += 7;
                  v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_166:
                    v3 = v91 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v61) = 0;
                goto LABEL_166;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v3 = v57 + 1;
                *((_QWORD *)a2 + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_167;
                v59 += 7;
                v57 = v3;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_167:
              *((_DWORD *)this + 7) = v61;
LABEL_168:
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            case 8u:
              *((_BYTE *)this + 48) |= 0x80u;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              if (v3 >= v2)
              {
                v64 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v63 = *(unsigned __int8 *)(*(_QWORD *)a2 + v3++);
                *((_QWORD *)a2 + 1) = v3;
                v64 = v63 != 0;
              }
              *((_BYTE *)this + 44) = v64;
              goto LABEL_168;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              goto LABEL_168;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 5u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 6u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 8u);
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 7u);
  if ((*(_BYTE *)(v3 + 48) & 0x80) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 8u);
  return this;
}

uint64_t CMMsl::FallState::hash_value(CMMsl::FallState *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 48) & 2) != 0)
  {
    v1 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 48) & 1) != 0)
    {
LABEL_3:
      v2 = *((_QWORD *)this + 1);
      if ((*((_BYTE *)this + 48) & 4) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 48) & 4) != 0)
  {
LABEL_4:
    v3 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 48) & 0x40) != 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 48) & 0x40) != 0)
  {
LABEL_5:
    v4 = *((unsigned int *)this + 10);
    if ((*((_BYTE *)this + 48) & 0x20) != 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v4 = 0;
  if ((*((_BYTE *)this + 48) & 0x20) != 0)
  {
LABEL_6:
    v5 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v5 = 0;
  if ((*((_BYTE *)this + 48) & 0x10) != 0)
  {
LABEL_7:
    v6 = *((unsigned int *)this + 8);
    if ((*((_BYTE *)this + 48) & 8) != 0)
      goto LABEL_8;
LABEL_16:
    v7 = 0;
    if ((*((_BYTE *)this + 48) & 0x80) != 0)
      goto LABEL_9;
LABEL_17:
    v8 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_15:
  v6 = 0;
  if ((*((_BYTE *)this + 48) & 8) == 0)
    goto LABEL_16;
LABEL_8:
  v7 = *((unsigned int *)this + 7);
  if ((*((_BYTE *)this + 48) & 0x80) == 0)
    goto LABEL_17;
LABEL_9:
  v8 = *((unsigned __int8 *)this + 44);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::FallStats::~FallStats(CMMsl::FallStats *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::FallStats::FallStats(CMMsl::FallStats *this, const CMMsl::FallStats *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)this = off_100351050;
  *((_QWORD *)this + 27) = 0;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x80000000) != 0)
  {
    v4 = *((_DWORD *)a2 + 36);
    v3 = 0x80000000;
    *((_QWORD *)this + 27) = 0x80000000;
    *((_DWORD *)this + 36) = v4;
    v2 = *((_QWORD *)a2 + 27);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 1);
    v3 |= 1uLL;
    *((_QWORD *)this + 27) = v3;
    *((_QWORD *)this + 1) = v5;
    v2 = *((_QWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2uLL;
    *((_QWORD *)this + 27) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *((_QWORD *)a2 + 27);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000000000) == 0)
        goto LABEL_9;
      goto LABEL_56;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 22);
  v3 |= 0x20000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 22) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  result = *((float *)a2 + 44);
  v3 |= 0x8000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 44) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  result = *((float *)a2 + 43);
  v3 |= 0x4000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 43) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  result = *((float *)a2 + 48);
  v3 |= 0x80000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 48) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  result = *((float *)a2 + 47);
  v3 |= 0x40000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 47) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  result = *((float *)a2 + 52);
  v3 |= 0x800000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 52) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  result = *((float *)a2 + 51);
  v3 |= 0x400000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 51) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  result = *((float *)a2 + 45);
  v3 |= 0x10000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 45) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  result = *((float *)a2 + 49);
  v3 |= 0x100000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 49) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  result = *((float *)a2 + 53);
  v3 |= 0x1000000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 53) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  result = *((float *)a2 + 21);
  v3 |= 0x10000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 21) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  result = *((float *)a2 + 42);
  v3 |= 0x2000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 42) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  result = *((float *)a2 + 46);
  v3 |= 0x20000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 46) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_21:
    if ((v2 & 4) == 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  result = *((float *)a2 + 50);
  v3 |= 0x200000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 50) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  v8 = *((_QWORD *)a2 + 3);
  v3 |= 4uLL;
  *((_QWORD *)this + 27) = v3;
  *((_QWORD *)this + 3) = v8;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  result = *((float *)a2 + 9);
  v3 |= 0x10uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 9) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  result = *((float *)a2 + 28);
  v3 |= 0x800000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 28) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  result = *((float *)a2 + 12);
  v3 |= 0x80uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 12) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  result = *((float *)a2 + 11);
  v3 |= 0x40uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 11) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  result = *((float *)a2 + 25);
  v3 |= 0x100000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 25) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x80000) == 0)
  {
LABEL_28:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  result = *((float *)a2 + 24);
  v3 |= 0x80000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 24) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  result = *((float *)a2 + 35);
  v3 |= 0x40000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 35) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_30:
    if ((v2 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  v9 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 17) = v9;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_31:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 19) = v10;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  v11 = *((_DWORD *)a2 + 37);
  v3 |= (unint64_t)&_mh_execute_header;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 37) = v11;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x100) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  v12 = *((_DWORD *)a2 + 41);
  v3 |= 0x1000000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 41) = v12;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_34:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 13) = v13;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800) == 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  result = *((float *)a2 + 38);
  v3 |= 0x200000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 38) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_36:
    if ((v2 & 0x400) == 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  result = *((float *)a2 + 16);
  v3 |= 0x800uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 16) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  result = *((float *)a2 + 15);
  v3 |= 0x400uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 15) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  result = *((float *)a2 + 26);
  v3 |= 0x200000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 26) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  result = *((float *)a2 + 23);
  v3 |= 0x40000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 23) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  result = *((float *)a2 + 34);
  v3 |= 0x20000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 34) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  result = *((float *)a2 + 40);
  v3 |= 0x800000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 40) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x8000) == 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  result = *((float *)a2 + 39);
  v3 |= 0x400000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 39) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_43:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  v14 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 20) = v14;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  result = *((float *)a2 + 33);
  v3 |= 0x10000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 33) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_46;
    goto LABEL_93;
  }
LABEL_92:
  result = *((float *)a2 + 31);
  v3 |= 0x4000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 31) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_94;
  }
LABEL_93:
  result = *((float *)a2 + 32);
  v3 |= 0x8000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 32) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_48;
    goto LABEL_95;
  }
LABEL_94:
  result = *((float *)a2 + 10);
  v3 |= 0x20uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 10) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_49;
    goto LABEL_96;
  }
LABEL_95:
  result = *((float *)a2 + 29);
  v3 |= 0x1000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 29) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x2000) == 0)
      goto LABEL_50;
    goto LABEL_97;
  }
LABEL_96:
  v15 = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *((_QWORD *)this + 27) = v3;
  *((_DWORD *)this + 30) = v15;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_50:
    if ((v2 & 0x200) == 0)
      goto LABEL_51;
    goto LABEL_98;
  }
LABEL_97:
  result = *((float *)a2 + 18);
  v3 |= 0x2000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 18) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x200) == 0)
  {
LABEL_51:
    if ((v2 & 0x400000) == 0)
      goto LABEL_52;
    goto LABEL_99;
  }
LABEL_98:
  result = *((float *)a2 + 14);
  v3 |= 0x200uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 14) = result;
  v2 = *((_QWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_52:
    if ((v2 & 8) == 0)
      return result;
LABEL_100:
    result = *((float *)a2 + 8);
    *((_QWORD *)this + 27) = v3 | 8;
    *((float *)this + 8) = result;
    return result;
  }
LABEL_99:
  result = *((float *)a2 + 27);
  v3 |= 0x400000uLL;
  *((_QWORD *)this + 27) = v3;
  *((float *)this + 27) = result;
  if ((*((_QWORD *)a2 + 27) & 8) != 0)
    goto LABEL_100;
  return result;
}

CMMsl *CMMsl::FallStats::operator=(CMMsl *a1, const CMMsl::FallStats *a2)
{
  CMMsl::FallStats *v3;
  _BYTE v5[224];

  if (a1 != a2)
  {
    CMMsl::FallStats::FallStats((CMMsl::FallStats *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallStats *a2, CMMsl::FallStats *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  float result;

  v3 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  v7 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v7;
  v8 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v8;
  v9 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v9;
  v10 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v10;
  v11 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v11;
  v12 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v12;
  v13 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v13;
  v14 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v14;
  v15 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v15;
  v16 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v16;
  v17 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v17;
  v18 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v18;
  v19 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v19;
  v20 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v20;
  v21 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v21;
  v22 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v22;
  v23 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v23;
  v24 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v24;
  v25 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v25;
  v26 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v26;
  v27 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v27;
  LODWORD(v20) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v20;
  LODWORD(v20) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v20;
  LODWORD(v20) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  LODWORD(v20) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v20;
  LODWORD(v20) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v20;
  v28 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v28;
  v29 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v29;
  v30 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v30;
  v31 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v31;
  v32 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v32;
  v33 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v33;
  v34 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v34;
  v35 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v35;
  LODWORD(v20) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v20;
  v36 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v36;
  v37 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v37;
  v38 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v38;
  v39 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v39;
  v40 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v40;
  LODWORD(v20) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v20;
  v41 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v41;
  v42 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v42;
  v43 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v43;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::FallStats::FallStats(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351050;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

CMMsl *CMMsl::FallStats::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FallStats *v3;
  _BYTE v5[224];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallStats::FallStats((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallStats::formatText(CMMsl::FallStats *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "abruptGravityChangeAngle", *((float *)this + 8));
    v5 = *((_QWORD *)this + 27);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelPathLength", *((float *)this + 9));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "accelPathLengthWithPeak", *((float *)this + 10));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "angleChangePostImpact", *((float *)this + 11));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "angleChangePreImpact", *((float *)this + 12));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "aopTsNow", *((_QWORD *)this + 1));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "aopTsSensor", *((_QWORD *)this + 2));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "crown", *((_DWORD *)this + 13));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "crownVariance", *((float *)this + 14));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "extrapolatedMaxAccelNorm", *((float *)this + 15));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "extrapolatedMaxMinusMin", *((float *)this + 16));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "fallType", *((_DWORD *)this + 17));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "gravityVariance", *((float *)this + 18));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "isFall", *((_DWORD *)this + 19));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "isNearFall", *((_DWORD *)this + 20));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "jerkVectorMagMax", *((float *)this + 21));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "magMax", *((float *)this + 22));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 23));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "maxAngleChangePostImpact", *((float *)this + 24));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "maxAngleChangePreImpact", *((float *)this + 25));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "maxMinusMin", *((float *)this + 26));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "medianAbsGravityY", *((float *)this + 27));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "minInertialZ", *((float *)this + 28));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "minInertialZHighFreq", *((float *)this + 29));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 30));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "pathLengthDecorrelation", *((float *)this + 31));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "pathLengthDelaySpread", *((float *)this + 32));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "pathLengthHarmonicMean", *((float *)this + 33));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "peakTimestamp", *((_QWORD *)this + 3));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "poseAtImpact", *((float *)this + 34));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "posteriorRatio", *((float *)this + 35));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "seq", *((_DWORD *)this + 36));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "simulated", *((_DWORD *)this + 37));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "sumDeltaAngles", *((float *)this + 38));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "swingAngle", *((float *)this + 39));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "tiltAngle", *((float *)this + 40));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "trialCount", *((_DWORD *)this + 41));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "xJerkScalarMagMax", *((float *)this + 42));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "xMax", *((float *)this + 43));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "xMin", *((float *)this + 44));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "xZCTime", *((float *)this + 45));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "yJerkScalarMagMax", *((float *)this + 46));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "yMax", *((float *)this + 47));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "yMin", *((float *)this + 48));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "yZCTime", *((float *)this + 49));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "zJerkScalarMagMax", *((float *)this + 50));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_49;
LABEL_99:
    PB::TextFormatter::format(a2, "zMin", *((float *)this + 52));
    if ((*((_QWORD *)this + 27) & 0x1000000000000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_50;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "zMax", *((float *)this + 51));
  v5 = *((_QWORD *)this + 27);
  if ((v5 & 0x800000000000) != 0)
    goto LABEL_99;
LABEL_49:
  if ((v5 & 0x1000000000000) != 0)
LABEL_50:
    PB::TextFormatter::format(a2, "zZCTime", *((float *)this + 53));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallStats::readFrom(CMMsl::FallStats *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;
  char v167;
  unsigned int v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  unint64_t v173;
  char v174;
  char v175;
  unsigned int v176;
  unint64_t v177;
  char v178;
  char v179;
  unsigned int v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_QWORD *)this + 27) |= 0x80000000uLL;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v147 = 0;
            v148 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)a2 + 1);
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_302;
              }
              v149 = v20 + 1;
              v150 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v149;
              v25 |= (unint64_t)(v150 & 0x7F) << v147;
              if ((v150 & 0x80) == 0)
              {
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_302;
              }
              v147 += 7;
              v20 = v149;
              v14 = v148++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v25) = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_221;
            }
          }
LABEL_302:
          *((_DWORD *)this + 36) = v25;
          goto LABEL_294;
        case 2u:
          *((_QWORD *)this + 27) |= 1uLL;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_306;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            v34 = 0;
            goto LABEL_306;
          }
          v151 = 0;
          v152 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v153 = v29 + 1;
              v154 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v153;
              v34 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                v29 = v153;
                v14 = v152++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v34 = 0;
            }
            break;
          }
LABEL_306:
          *((_QWORD *)this + 1) = v34;
          goto LABEL_294;
        case 3u:
          *((_QWORD *)this + 27) |= 2uLL;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_310;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            v42 = 0;
            goto LABEL_310;
          }
          v155 = 0;
          v156 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v38 == v37)
            {
              v42 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v157 = v37 + 1;
              v158 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)a2 + 1) = v157;
              v42 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                v37 = v157;
                v14 = v156++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v42 = 0;
            }
            break;
          }
LABEL_310:
          *((_QWORD *)this + 2) = v42;
          goto LABEL_294;
        case 4u:
          *((_QWORD *)this + 27) |= 0x20000uLL;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v45);
          goto LABEL_293;
        case 5u:
          *((_QWORD *)this + 27) |= 0x8000000000uLL;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 44) = *(_DWORD *)(*(_QWORD *)a2 + v46);
          goto LABEL_293;
        case 6u:
          *((_QWORD *)this + 27) |= 0x4000000000uLL;
          v47 = *((_QWORD *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 43) = *(_DWORD *)(*(_QWORD *)a2 + v47);
          goto LABEL_293;
        case 7u:
          *((_QWORD *)this + 27) |= 0x80000000000uLL;
          v48 = *((_QWORD *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 48) = *(_DWORD *)(*(_QWORD *)a2 + v48);
          goto LABEL_293;
        case 8u:
          *((_QWORD *)this + 27) |= 0x40000000000uLL;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 47) = *(_DWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_293;
        case 9u:
          *((_QWORD *)this + 27) |= 0x800000000000uLL;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 52) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_293;
        case 0xAu:
          *((_QWORD *)this + 27) |= 0x400000000000uLL;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 51) = *(_DWORD *)(*(_QWORD *)a2 + v51);
          goto LABEL_293;
        case 0xBu:
          *((_QWORD *)this + 27) |= 0x10000000000uLL;
          v52 = *((_QWORD *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 45) = *(_DWORD *)(*(_QWORD *)a2 + v52);
          goto LABEL_293;
        case 0xCu:
          *((_QWORD *)this + 27) |= 0x100000000000uLL;
          v53 = *((_QWORD *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 49) = *(_DWORD *)(*(_QWORD *)a2 + v53);
          goto LABEL_293;
        case 0xDu:
          *((_QWORD *)this + 27) |= 0x1000000000000uLL;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 53) = *(_DWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_293;
        case 0xEu:
          *((_QWORD *)this + 27) |= 0x10000uLL;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v55);
          goto LABEL_293;
        case 0xFu:
          *((_QWORD *)this + 27) |= 0x2000000000uLL;
          v56 = *((_QWORD *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 42) = *(_DWORD *)(*(_QWORD *)a2 + v56);
          goto LABEL_293;
        case 0x10u:
          *((_QWORD *)this + 27) |= 0x20000000000uLL;
          v57 = *((_QWORD *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 46) = *(_DWORD *)(*(_QWORD *)a2 + v57);
          goto LABEL_293;
        case 0x11u:
          *((_QWORD *)this + 27) |= 0x200000000000uLL;
          v58 = *((_QWORD *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 50) = *(_DWORD *)(*(_QWORD *)a2 + v58);
          goto LABEL_293;
        case 0x12u:
          *((_QWORD *)this + 27) |= 4uLL;
          v59 = *((_QWORD *)a2 + 1);
          v60 = *((_QWORD *)a2 + 2);
          v61 = *(_QWORD *)a2;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            do
            {
              v65 = v59 + 1;
              *((_QWORD *)a2 + 1) = v59 + 1;
              v66 = *(_BYTE *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0)
                goto LABEL_314;
              v62 += 7;
              v59 = v65;
              v14 = v63++ > 8;
            }
            while (!v14);
LABEL_242:
            v64 = 0;
            goto LABEL_314;
          }
          v159 = 0;
          v160 = 0;
          v64 = 0;
          if (v60 <= v59)
            v60 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v60 == v59)
            {
              v64 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v161 = v59 + 1;
              v162 = *(_BYTE *)(v61 + v59);
              *((_QWORD *)a2 + 1) = v161;
              v64 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                v59 = v161;
                v14 = v160++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v64 = 0;
            }
            break;
          }
LABEL_314:
          *((_QWORD *)this + 3) = v64;
          goto LABEL_294;
        case 0x13u:
          *((_QWORD *)this + 27) |= 0x10uLL;
          v67 = *((_QWORD *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v67);
          goto LABEL_293;
        case 0x14u:
          *((_QWORD *)this + 27) |= 0x800000uLL;
          v68 = *((_QWORD *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v68);
          goto LABEL_293;
        case 0x15u:
          *((_QWORD *)this + 27) |= 0x80uLL;
          v69 = *((_QWORD *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v69);
          goto LABEL_293;
        case 0x16u:
          *((_QWORD *)this + 27) |= 0x40uLL;
          v70 = *((_QWORD *)a2 + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v70);
          goto LABEL_293;
        case 0x17u:
          *((_QWORD *)this + 27) |= 0x100000uLL;
          v71 = *((_QWORD *)a2 + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v71);
          goto LABEL_293;
        case 0x18u:
          *((_QWORD *)this + 27) |= 0x80000uLL;
          v72 = *((_QWORD *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v72);
          goto LABEL_293;
        case 0x19u:
          *((_QWORD *)this + 27) |= 0x40000000uLL;
          v73 = *((_QWORD *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 35) = *(_DWORD *)(*(_QWORD *)a2 + v73);
          goto LABEL_293;
        case 0x1Au:
          *((_QWORD *)this + 27) |= 0x1000uLL;
          v74 = *((_QWORD *)a2 + 1);
          v75 = *((_QWORD *)a2 + 2);
          v76 = *(_QWORD *)a2;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v74 + 1;
              *((_QWORD *)a2 + 1) = v74 + 1;
              v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0)
                goto LABEL_318;
              v77 += 7;
              v74 = v80;
              v14 = v78++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v79) = 0;
            goto LABEL_318;
          }
          v163 = 0;
          v164 = 0;
          v79 = 0;
          if (v75 <= v74)
            v75 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v75 == v74)
            {
              LODWORD(v79) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v165 = v74 + 1;
              v166 = *(_BYTE *)(v76 + v74);
              *((_QWORD *)a2 + 1) = v165;
              v79 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                v74 = v165;
                v14 = v164++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v79) = 0;
            }
            break;
          }
LABEL_318:
          *((_DWORD *)this + 17) = v79;
          goto LABEL_294;
        case 0x1Bu:
          *((_QWORD *)this + 27) |= 0x4000uLL;
          v82 = *((_QWORD *)a2 + 1);
          v83 = *((_QWORD *)a2 + 2);
          v84 = *(_QWORD *)a2;
          if (v82 <= 0xFFFFFFFFFFFFFFF5 && v82 + 10 <= v83)
          {
            v85 = 0;
            v86 = 0;
            v87 = 0;
            do
            {
              v88 = v82 + 1;
              *((_QWORD *)a2 + 1) = v82 + 1;
              v89 = *(_BYTE *)(v84 + v82);
              v87 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0)
                goto LABEL_322;
              v85 += 7;
              v82 = v88;
              v14 = v86++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v87) = 0;
            goto LABEL_322;
          }
          v167 = 0;
          v168 = 0;
          v87 = 0;
          if (v83 <= v82)
            v83 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v83 == v82)
            {
              LODWORD(v87) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v169 = v82 + 1;
              v170 = *(_BYTE *)(v84 + v82);
              *((_QWORD *)a2 + 1) = v169;
              v87 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                v82 = v169;
                v14 = v168++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v87) = 0;
            }
            break;
          }
LABEL_322:
          *((_DWORD *)this + 19) = v87;
          goto LABEL_294;
        case 0x1Cu:
          *((_QWORD *)this + 27) |= (unint64_t)&_mh_execute_header;
          v90 = *((_QWORD *)a2 + 1);
          v91 = *((_QWORD *)a2 + 2);
          v92 = *(_QWORD *)a2;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            v93 = 0;
            v94 = 0;
            v95 = 0;
            do
            {
              v96 = v90 + 1;
              *((_QWORD *)a2 + 1) = v90 + 1;
              v97 = *(_BYTE *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0)
                goto LABEL_326;
              v93 += 7;
              v90 = v96;
              v14 = v94++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v95) = 0;
            goto LABEL_326;
          }
          v171 = 0;
          v172 = 0;
          v95 = 0;
          if (v91 <= v90)
            v91 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v173 = v90 + 1;
              v174 = *(_BYTE *)(v92 + v90);
              *((_QWORD *)a2 + 1) = v173;
              v95 |= (unint64_t)(v174 & 0x7F) << v171;
              if (v174 < 0)
              {
                v171 += 7;
                v90 = v173;
                v14 = v172++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v95) = 0;
            }
            break;
          }
LABEL_326:
          *((_DWORD *)this + 37) = v95;
          goto LABEL_294;
        case 0x1Du:
          *((_QWORD *)this + 27) |= 0x1000000000uLL;
          v98 = *((_QWORD *)a2 + 1);
          v99 = *((_QWORD *)a2 + 2);
          v100 = *(_QWORD *)a2;
          if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
          {
            v101 = 0;
            v102 = 0;
            v103 = 0;
            do
            {
              v104 = v98 + 1;
              *((_QWORD *)a2 + 1) = v98 + 1;
              v105 = *(_BYTE *)(v100 + v98);
              v103 |= (unint64_t)(v105 & 0x7F) << v101;
              if ((v105 & 0x80) == 0)
                goto LABEL_330;
              v101 += 7;
              v98 = v104;
              v14 = v102++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v103) = 0;
            goto LABEL_330;
          }
          v175 = 0;
          v176 = 0;
          v103 = 0;
          if (v99 <= v98)
            v99 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v99 == v98)
            {
              LODWORD(v103) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v177 = v98 + 1;
              v178 = *(_BYTE *)(v100 + v98);
              *((_QWORD *)a2 + 1) = v177;
              v103 |= (unint64_t)(v178 & 0x7F) << v175;
              if (v178 < 0)
              {
                v175 += 7;
                v98 = v177;
                v14 = v176++ > 8;
                if (v14)
                  goto LABEL_270;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v103) = 0;
            }
            break;
          }
LABEL_330:
          *((_DWORD *)this + 41) = v103;
          goto LABEL_294;
        case 0x1Eu:
          *((_QWORD *)this + 27) |= 0x100uLL;
          v106 = *((_QWORD *)a2 + 1);
          v107 = *((_QWORD *)a2 + 2);
          v108 = *(_QWORD *)a2;
          if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
          {
            v109 = 0;
            v110 = 0;
            v111 = 0;
            do
            {
              v112 = v106 + 1;
              *((_QWORD *)a2 + 1) = v106 + 1;
              v113 = *(_BYTE *)(v108 + v106);
              v111 |= (unint64_t)(v113 & 0x7F) << v109;
              if ((v113 & 0x80) == 0)
                goto LABEL_334;
              v109 += 7;
              v106 = v112;
              v14 = v110++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v111) = 0;
            goto LABEL_334;
          }
          v179 = 0;
          v180 = 0;
          v111 = 0;
          if (v107 <= v106)
            v107 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v107 == v106)
            {
              LODWORD(v111) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v181 = v106 + 1;
              v182 = *(_BYTE *)(v108 + v106);
              *((_QWORD *)a2 + 1) = v181;
              v111 |= (unint64_t)(v182 & 0x7F) << v179;
              if (v182 < 0)
              {
                v179 += 7;
                v106 = v181;
                v14 = v180++ > 8;
                if (v14)
                  goto LABEL_277;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v111) = 0;
            }
            break;
          }
LABEL_334:
          *((_DWORD *)this + 13) = v111;
          goto LABEL_294;
        case 0x1Fu:
          *((_QWORD *)this + 27) |= 0x200000000uLL;
          v114 = *((_QWORD *)a2 + 1);
          if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 38) = *(_DWORD *)(*(_QWORD *)a2 + v114);
          goto LABEL_293;
        case 0x20u:
          *((_QWORD *)this + 27) |= 0x800uLL;
          v115 = *((_QWORD *)a2 + 1);
          if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v115);
          goto LABEL_293;
        case 0x21u:
          *((_QWORD *)this + 27) |= 0x400uLL;
          v116 = *((_QWORD *)a2 + 1);
          if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v116);
          goto LABEL_293;
        case 0x22u:
          *((_QWORD *)this + 27) |= 0x200000uLL;
          v117 = *((_QWORD *)a2 + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v117);
          goto LABEL_293;
        case 0x23u:
          *((_QWORD *)this + 27) |= 0x40000uLL;
          v118 = *((_QWORD *)a2 + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v118);
          goto LABEL_293;
        case 0x24u:
          *((_QWORD *)this + 27) |= 0x20000000uLL;
          v119 = *((_QWORD *)a2 + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 34) = *(_DWORD *)(*(_QWORD *)a2 + v119);
          goto LABEL_293;
        case 0x25u:
          *((_QWORD *)this + 27) |= 0x800000000uLL;
          v120 = *((_QWORD *)a2 + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 40) = *(_DWORD *)(*(_QWORD *)a2 + v120);
          goto LABEL_293;
        case 0x26u:
          *((_QWORD *)this + 27) |= 0x400000000uLL;
          v121 = *((_QWORD *)a2 + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 39) = *(_DWORD *)(*(_QWORD *)a2 + v121);
          goto LABEL_293;
        case 0x27u:
          *((_QWORD *)this + 27) |= 0x8000uLL;
          v122 = *((_QWORD *)a2 + 1);
          v123 = *((_QWORD *)a2 + 2);
          v124 = *(_QWORD *)a2;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)a2 + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_338;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v127) = 0;
            goto LABEL_338;
          }
          v183 = 0;
          v184 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v123 == v122)
            {
              LODWORD(v127) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v185 = v122 + 1;
              v186 = *(_BYTE *)(v124 + v122);
              *((_QWORD *)a2 + 1) = v185;
              v127 |= (unint64_t)(v186 & 0x7F) << v183;
              if (v186 < 0)
              {
                v183 += 7;
                v122 = v185;
                v14 = v184++ > 8;
                if (v14)
                  goto LABEL_284;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v127) = 0;
            }
            break;
          }
LABEL_338:
          *((_DWORD *)this + 20) = v127;
          goto LABEL_294;
        case 0x28u:
          *((_QWORD *)this + 27) |= 0x10000000uLL;
          v130 = *((_QWORD *)a2 + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 33) = *(_DWORD *)(*(_QWORD *)a2 + v130);
          goto LABEL_293;
        case 0x29u:
          *((_QWORD *)this + 27) |= 0x4000000uLL;
          v131 = *((_QWORD *)a2 + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v131);
          goto LABEL_293;
        case 0x2Au:
          *((_QWORD *)this + 27) |= 0x8000000uLL;
          v132 = *((_QWORD *)a2 + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 32) = *(_DWORD *)(*(_QWORD *)a2 + v132);
          goto LABEL_293;
        case 0x2Bu:
          *((_QWORD *)this + 27) |= 0x20uLL;
          v133 = *((_QWORD *)a2 + 1);
          if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v133);
          goto LABEL_293;
        case 0x2Cu:
          *((_QWORD *)this + 27) |= 0x1000000uLL;
          v134 = *((_QWORD *)a2 + 1);
          if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v134);
          goto LABEL_293;
        case 0x2Du:
          *((_QWORD *)this + 27) |= 0x2000000uLL;
          v135 = *((_QWORD *)a2 + 1);
          v136 = *((_QWORD *)a2 + 2);
          v137 = *(_QWORD *)a2;
          if (v135 <= 0xFFFFFFFFFFFFFFF5 && v135 + 10 <= v136)
          {
            v138 = 0;
            v139 = 0;
            v140 = 0;
            do
            {
              v141 = v135 + 1;
              *((_QWORD *)a2 + 1) = v135 + 1;
              v142 = *(_BYTE *)(v137 + v135);
              v140 |= (unint64_t)(v142 & 0x7F) << v138;
              if ((v142 & 0x80) == 0)
                goto LABEL_342;
              v138 += 7;
              v135 = v141;
              v14 = v139++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v140) = 0;
            goto LABEL_342;
          }
          v187 = 0;
          v188 = 0;
          v140 = 0;
          if (v136 <= v135)
            v136 = *((_QWORD *)a2 + 1);
          break;
        case 0x2Eu:
          *((_QWORD *)this + 27) |= 0x2000uLL;
          v143 = *((_QWORD *)a2 + 1);
          if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v143);
          goto LABEL_293;
        case 0x2Fu:
          *((_QWORD *)this + 27) |= 0x200uLL;
          v144 = *((_QWORD *)a2 + 1);
          if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v144);
          goto LABEL_293;
        case 0x30u:
          *((_QWORD *)this + 27) |= 0x400000uLL;
          v145 = *((_QWORD *)a2 + 1);
          if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_214;
          *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v145);
          goto LABEL_293;
        case 0x31u:
          *((_QWORD *)this + 27) |= 8uLL;
          v146 = *((_QWORD *)a2 + 1);
          if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v146);
LABEL_293:
            *((_QWORD *)a2 + 1) += 4;
          }
          else
          {
LABEL_214:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_294;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_294;
      }
      while (1)
      {
        if (v136 == v135)
        {
          LODWORD(v140) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_342;
        }
        v189 = v135 + 1;
        v190 = *(_BYTE *)(v137 + v135);
        *((_QWORD *)a2 + 1) = v189;
        v140 |= (unint64_t)(v190 & 0x7F) << v187;
        if ((v190 & 0x80) == 0)
          break;
        v187 += 7;
        v135 = v189;
        v14 = v188++ > 8;
        if (v14)
          goto LABEL_291;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v140) = 0;
LABEL_342:
      *((_DWORD *)this + 30) = v140;
LABEL_294:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallStats::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(_QWORD *)(this + 216);
  if ((v4 & 0x80000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 144), 1u);
    v4 = *(_QWORD *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_53;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 2u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 3u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_6;
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 4u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_7;
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 5u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_8;
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 6u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_9;
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 7u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_10;
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 8u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 208), 9u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0xAu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_13;
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0xBu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_14;
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0xCu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 212), 0xDu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_16;
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xEu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_17;
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0xFu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x10u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x11u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 0x12u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x13u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x14u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x15u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x16u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x17u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x18u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x19u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0x1Au);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x1Bu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 0x1Cu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0)
      goto LABEL_31;
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 164), 0x1Du);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0x1Eu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0)
      goto LABEL_33;
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x1Fu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x20u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0)
      goto LABEL_35;
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x21u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0)
      goto LABEL_36;
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x22u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x23u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_38;
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x24u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_39;
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x25u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0)
      goto LABEL_40;
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x26u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_41;
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x27u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_42;
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x28u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_43;
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x29u);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x2Au);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_45;
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x2Bu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_46;
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x2Cu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0)
      goto LABEL_47;
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0x2Du);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0)
      goto LABEL_48;
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x2Eu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0)
      goto LABEL_49;
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x2Fu);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_49:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 32), 0x31u);
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x30u);
  if ((*(_QWORD *)(v3 + 216) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 32), 0x31u);
  return this;
}

uint64_t CMMsl::FallStats::hash_value(CMMsl::FallStats *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v1 = *((_QWORD *)this + 27);
  if ((v1 & 0x80000000) != 0)
  {
    v2 = *((unsigned int *)this + 36);
    if ((v1 & 1) != 0)
    {
LABEL_3:
      v108 = *((_QWORD *)this + 1);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_131;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
  }
  v108 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v107 = *((_QWORD *)this + 2);
    if ((v1 & 0x20000) != 0)
      goto LABEL_5;
LABEL_132:
    v106 = 0;
    if ((v1 & 0x8000000000) != 0)
      goto LABEL_8;
LABEL_133:
    v105 = 0;
    if ((v1 & 0x4000000000) != 0)
      goto LABEL_11;
LABEL_134:
    v104 = 0;
    if ((v1 & 0x80000000000) != 0)
      goto LABEL_14;
LABEL_135:
    v103 = 0;
    if ((v1 & 0x40000000000) != 0)
      goto LABEL_17;
LABEL_136:
    v102 = 0;
    if ((v1 & 0x800000000000) != 0)
      goto LABEL_20;
LABEL_137:
    v101 = 0;
    if ((v1 & 0x400000000000) != 0)
      goto LABEL_23;
LABEL_138:
    v100 = 0;
    if ((v1 & 0x10000000000) != 0)
      goto LABEL_26;
LABEL_139:
    v99 = 0;
    if ((v1 & 0x100000000000) != 0)
      goto LABEL_29;
LABEL_140:
    v98 = 0;
    if ((v1 & 0x1000000000000) != 0)
      goto LABEL_32;
LABEL_141:
    v97 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_35;
LABEL_142:
    v96 = 0;
    if ((v1 & 0x2000000000) != 0)
      goto LABEL_38;
LABEL_143:
    v95 = 0;
    if ((v1 & 0x20000000000) != 0)
      goto LABEL_41;
LABEL_144:
    v94 = 0;
    if ((v1 & 0x200000000000) != 0)
      goto LABEL_44;
LABEL_145:
    v93 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_47;
    goto LABEL_146;
  }
LABEL_131:
  v107 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_132;
LABEL_5:
  v3 = *((float *)this + 22);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  v106 = v4;
  if ((v1 & 0x8000000000) == 0)
    goto LABEL_133;
LABEL_8:
  v5 = *((float *)this + 44);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  v105 = v6;
  if ((v1 & 0x4000000000) == 0)
    goto LABEL_134;
LABEL_11:
  v7 = *((float *)this + 43);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  v104 = v8;
  if ((v1 & 0x80000000000) == 0)
    goto LABEL_135;
LABEL_14:
  v9 = *((float *)this + 48);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  v103 = v10;
  if ((v1 & 0x40000000000) == 0)
    goto LABEL_136;
LABEL_17:
  v11 = *((float *)this + 47);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  v102 = v12;
  if ((v1 & 0x800000000000) == 0)
    goto LABEL_137;
LABEL_20:
  v13 = *((float *)this + 52);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  v101 = v14;
  if ((v1 & 0x400000000000) == 0)
    goto LABEL_138;
LABEL_23:
  v15 = *((float *)this + 51);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  v100 = v16;
  if ((v1 & 0x10000000000) == 0)
    goto LABEL_139;
LABEL_26:
  v17 = *((float *)this + 45);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  v99 = v18;
  if ((v1 & 0x100000000000) == 0)
    goto LABEL_140;
LABEL_29:
  v19 = *((float *)this + 49);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  v98 = v20;
  if ((v1 & 0x1000000000000) == 0)
    goto LABEL_141;
LABEL_32:
  v21 = *((float *)this + 53);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  v97 = v22;
  if ((v1 & 0x10000) == 0)
    goto LABEL_142;
LABEL_35:
  v23 = *((float *)this + 21);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  v96 = v24;
  if ((v1 & 0x2000000000) == 0)
    goto LABEL_143;
LABEL_38:
  v25 = *((float *)this + 42);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  v95 = v26;
  if ((v1 & 0x20000000000) == 0)
    goto LABEL_144;
LABEL_41:
  v27 = *((float *)this + 46);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  v94 = v28;
  if ((v1 & 0x200000000000) == 0)
    goto LABEL_145;
LABEL_44:
  v29 = *((float *)this + 50);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  v93 = v30;
  if ((v1 & 4) != 0)
  {
LABEL_47:
    v92 = *((_QWORD *)this + 3);
    if ((v1 & 0x10) != 0)
      goto LABEL_48;
LABEL_147:
    v91 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_51;
LABEL_148:
    v90 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_54;
LABEL_149:
    v89 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_57;
LABEL_150:
    v88 = 0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_60;
LABEL_151:
    v87 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_63;
LABEL_152:
    v42 = 0;
    if ((v1 & 0x40000000) != 0)
      goto LABEL_67;
LABEL_153:
    v44 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_71;
    goto LABEL_154;
  }
LABEL_146:
  v92 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_147;
LABEL_48:
  v31 = *((float *)this + 9);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  v91 = v32;
  if ((v1 & 0x800000) == 0)
    goto LABEL_148;
LABEL_51:
  v33 = *((float *)this + 28);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  v90 = v34;
  if ((v1 & 0x80) == 0)
    goto LABEL_149;
LABEL_54:
  v35 = *((float *)this + 12);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  v89 = v36;
  if ((v1 & 0x40) == 0)
    goto LABEL_150;
LABEL_57:
  v37 = *((float *)this + 11);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  v88 = v38;
  if ((v1 & 0x100000) == 0)
    goto LABEL_151;
LABEL_60:
  v39 = *((float *)this + 25);
  v40 = LODWORD(v39);
  if (v39 == 0.0)
    v40 = 0;
  v87 = v40;
  if ((v1 & 0x80000) == 0)
    goto LABEL_152;
LABEL_63:
  v41 = *((float *)this + 24);
  if (v41 == 0.0)
    v42 = 0;
  else
    v42 = LODWORD(v41);
  if ((v1 & 0x40000000) == 0)
    goto LABEL_153;
LABEL_67:
  v43 = *((float *)this + 35);
  if (v43 == 0.0)
    v44 = 0;
  else
    v44 = LODWORD(v43);
  if ((v1 & 0x1000) != 0)
  {
LABEL_71:
    v45 = *((int *)this + 17);
    if ((v1 & 0x4000) != 0)
      goto LABEL_72;
    goto LABEL_155;
  }
LABEL_154:
  v45 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_72:
    v46 = *((unsigned int *)this + 19);
    if ((v1 & 0x100000000) != 0)
      goto LABEL_73;
    goto LABEL_156;
  }
LABEL_155:
  v46 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_73:
    v47 = *((unsigned int *)this + 37);
    if ((v1 & 0x1000000000) != 0)
      goto LABEL_74;
    goto LABEL_157;
  }
LABEL_156:
  v47 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_74:
    v48 = *((unsigned int *)this + 41);
    if ((v1 & 0x100) != 0)
      goto LABEL_75;
    goto LABEL_158;
  }
LABEL_157:
  v48 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_75:
    v49 = *((int *)this + 13);
    if ((v1 & 0x200000000) != 0)
      goto LABEL_76;
LABEL_159:
    v51 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_79;
LABEL_160:
    v53 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_82;
LABEL_161:
    v55 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_85;
LABEL_162:
    v57 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_88;
LABEL_163:
    v59 = 0;
    if ((v1 & 0x20000000) != 0)
      goto LABEL_91;
LABEL_164:
    v61 = 0;
    if ((v1 & 0x800000000) != 0)
      goto LABEL_94;
LABEL_165:
    v63 = 0;
    if ((v1 & 0x400000000) != 0)
      goto LABEL_97;
LABEL_166:
    v65 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_100;
    goto LABEL_167;
  }
LABEL_158:
  v49 = 0;
  if ((v1 & 0x200000000) == 0)
    goto LABEL_159;
LABEL_76:
  v50 = *((float *)this + 38);
  v51 = LODWORD(v50);
  if (v50 == 0.0)
    v51 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_160;
LABEL_79:
  v52 = *((float *)this + 16);
  v53 = LODWORD(v52);
  if (v52 == 0.0)
    v53 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_161;
LABEL_82:
  v54 = *((float *)this + 15);
  v55 = LODWORD(v54);
  if (v54 == 0.0)
    v55 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_162;
LABEL_85:
  v56 = *((float *)this + 26);
  v57 = LODWORD(v56);
  if (v56 == 0.0)
    v57 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_163;
LABEL_88:
  v58 = *((float *)this + 23);
  v59 = LODWORD(v58);
  if (v58 == 0.0)
    v59 = 0;
  if ((v1 & 0x20000000) == 0)
    goto LABEL_164;
LABEL_91:
  v60 = *((float *)this + 34);
  v61 = LODWORD(v60);
  if (v60 == 0.0)
    v61 = 0;
  if ((v1 & 0x800000000) == 0)
    goto LABEL_165;
LABEL_94:
  v62 = *((float *)this + 40);
  v63 = LODWORD(v62);
  if (v62 == 0.0)
    v63 = 0;
  if ((v1 & 0x400000000) == 0)
    goto LABEL_166;
LABEL_97:
  v64 = *((float *)this + 39);
  v65 = LODWORD(v64);
  if (v64 == 0.0)
    v65 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_100:
    v66 = *((unsigned int *)this + 20);
    if ((v1 & 0x10000000) != 0)
      goto LABEL_101;
LABEL_168:
    v68 = 0;
    if ((v1 & 0x4000000) != 0)
      goto LABEL_104;
LABEL_169:
    v70 = 0;
    if ((v1 & 0x8000000) != 0)
      goto LABEL_107;
LABEL_170:
    v72 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_110;
LABEL_171:
    v74 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_113;
LABEL_172:
    v76 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_116;
    goto LABEL_173;
  }
LABEL_167:
  v66 = 0;
  if ((v1 & 0x10000000) == 0)
    goto LABEL_168;
LABEL_101:
  v67 = *((float *)this + 33);
  v68 = LODWORD(v67);
  if (v67 == 0.0)
    v68 = 0;
  if ((v1 & 0x4000000) == 0)
    goto LABEL_169;
LABEL_104:
  v69 = *((float *)this + 31);
  v70 = LODWORD(v69);
  if (v69 == 0.0)
    v70 = 0;
  if ((v1 & 0x8000000) == 0)
    goto LABEL_170;
LABEL_107:
  v71 = *((float *)this + 32);
  v72 = LODWORD(v71);
  if (v71 == 0.0)
    v72 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_171;
LABEL_110:
  v73 = *((float *)this + 10);
  v74 = LODWORD(v73);
  if (v73 == 0.0)
    v74 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_172;
LABEL_113:
  v75 = *((float *)this + 29);
  v76 = LODWORD(v75);
  if (v75 == 0.0)
    v76 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_116:
    v77 = *((int *)this + 30);
    if ((v1 & 0x2000) != 0)
      goto LABEL_117;
LABEL_174:
    v79 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_120;
LABEL_175:
    v81 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_123;
    goto LABEL_176;
  }
LABEL_173:
  v77 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_174;
LABEL_117:
  v78 = *((float *)this + 18);
  v79 = LODWORD(v78);
  if (v78 == 0.0)
    v79 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_175;
LABEL_120:
  v80 = *((float *)this + 14);
  v81 = LODWORD(v80);
  if (v80 == 0.0)
    v81 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_123:
    v82 = *((float *)this + 27);
    v83 = LODWORD(v82);
    if (v82 == 0.0)
      v83 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_126;
LABEL_177:
    v85 = 0;
    return v108 ^ v2 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v42 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v51 ^ v53 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63 ^ v65 ^ v66 ^ v68 ^ v70 ^ v72 ^ v74 ^ v76 ^ v77 ^ v79 ^ v81 ^ v83 ^ v85;
  }
LABEL_176:
  v83 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_177;
LABEL_126:
  v84 = *((float *)this + 8);
  v85 = LODWORD(v84);
  if (v84 == 0.0)
    v85 = 0;
  return v108 ^ v2 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v42 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v51 ^ v53 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63 ^ v65 ^ v66 ^ v68 ^ v70 ^ v72 ^ v74 ^ v76 ^ v77 ^ v79 ^ v81 ^ v83 ^ v85;
}

void CMMsl::FirstStepFeatures::~FirstStepFeatures(CMMsl::FirstStepFeatures *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t this, const CMMsl::FirstStepFeatures *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = off_100351088;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    v3 = 2;
    *(_BYTE *)(this + 44) = 2;
    *(_QWORD *)(this + 16) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_QWORD *)a2 + 4);
    v3 |= 8u;
    *(_BYTE *)(this + 44) = v3;
    *(_QWORD *)(this + 32) = v6;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 10);
      *(_BYTE *)(this + 44) = v3 | 0x10;
      *(_DWORD *)(this + 40) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_BYTE *)(this + 44) = v3;
  *(_QWORD *)(this + 8) = v7;
  if ((*((_BYTE *)a2 + 44) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::FirstStepFeatures::operator=(uint64_t a1, const CMMsl::FirstStepFeatures *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  if ((const CMMsl::FirstStepFeatures *)a1 != a2)
  {
    CMMsl::FirstStepFeatures::FirstStepFeatures((uint64_t)&v6, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v9;
    v9 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FirstStepFeatures *a2, CMMsl::FirstStepFeatures *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  int v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

double CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100351088;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100351088;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::FirstStepFeatures::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::FirstStepFeatures *__hidden);
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v7 = off_100351088;
    v3 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 44) = 0;
    v9 = *(_OWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v3;
    v10 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::FirstStepFeatures::formatText(CMMsl::FirstStepFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "aggAccelZDelta", *((double *)this + 1));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "arcLength", *((double *)this + 2));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "firstLoftAngleDeg", *((double *)this + 4));
    if ((*((_BYTE *)this + 44) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "curveDistance", *((double *)this + 3));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "stepResult", *((_DWORD *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FirstStepFeatures::readFrom(CMMsl::FirstStepFeatures *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 2u:
              *((_BYTE *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((_BYTE *)this + 44) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((_BYTE *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_51:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *((_BYTE *)this + 44) |= 0x10u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *((_DWORD *)this + 10) = v25;
LABEL_57:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FirstStepFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  return this;
}

uint64_t CMMsl::FirstStepFeatures::hash_value(CMMsl::FirstStepFeatures *this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 44) & 2) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_3;
LABEL_16:
    v2 = 0.0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_6;
LABEL_17:
    v3 = 0.0;
    if ((*((_BYTE *)this + 44) & 1) != 0)
      goto LABEL_9;
    goto LABEL_18;
  }
  v1 = *((double *)this + 2);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_16;
LABEL_3:
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_17;
LABEL_6:
  v3 = *((double *)this + 4);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
LABEL_9:
    v4 = *((double *)this + 1);
    if (v4 == 0.0)
      v4 = 0.0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_12;
LABEL_19:
    v5 = 0;
    return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5;
  }
LABEL_18:
  v4 = 0.0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_19;
LABEL_12:
  v5 = *((int *)this + 10);
  return *(_QWORD *)&v2 ^ *(_QWORD *)&v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5;
}

uint64_t CMMsl::FitnessMachineData::FitnessMachineData(uint64_t this)
{
  *(_QWORD *)this = off_1003510C0;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003510C0;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

void CMMsl::FitnessMachineData::~FitnessMachineData(CMMsl::FitnessMachineData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::FitnessMachineData::FitnessMachineData(CMMsl::FitnessMachineData *this, const CMMsl::FitnessMachineData *a2)
{
  int v2;
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)this = off_1003510C0;
  *((_DWORD *)this + 44) = 0;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 = 8;
    *((_DWORD *)this + 44) = 8;
    *((double *)this + 4) = result;
    v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 5) = result;
    v2 = *((_DWORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 6) = result;
    v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v5 = *((_QWORD *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 44) = v3;
  *((_QWORD *)this + 17) = v5;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v6 = *((_QWORD *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 44) = v3;
  *((_QWORD *)this + 18) = v6;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v7 = *((_QWORD *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 44) = v3;
  *((_QWORD *)this + 19) = v7;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v8 = *((_DWORD *)a2 + 42);
  v3 |= 0x100000u;
  *((_DWORD *)this + 44) = v3;
  *((_DWORD *)this + 42) = v8;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200000) == 0)
  {
LABEL_22:
    if ((v2 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v3 |= 0x200000u;
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)this + 44) = v3;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_23:
    if ((v2 & 0x200) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_24:
    if ((v2 & 1) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_25:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_46:
    result = *((double *)a2 + 12);
    *((_DWORD *)this + 44) = v3 | 0x800;
    *((double *)this + 12) = result;
    return result;
  }
LABEL_45:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  if ((*((_DWORD *)a2 + 44) & 0x800) != 0)
    goto LABEL_46;
  return result;
}

CMMsl *CMMsl::FitnessMachineData::operator=(CMMsl *a1, const CMMsl::FitnessMachineData *a2)
{
  CMMsl::FitnessMachineData *v3;
  _BYTE v5[184];

  if (a1 != a2)
  {
    CMMsl::FitnessMachineData::FitnessMachineData((CMMsl::FitnessMachineData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FitnessMachineData *a2, CMMsl::FitnessMachineData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;

  v3 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v7;
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v9;
  v10 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v10;
  v11 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v11;
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v12;
  v13 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v13;
  v14 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v14;
  v15 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v15;
  v16 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v16;
  LODWORD(v15) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v15;
  v17 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v17;
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v18;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v19;
  LODWORD(v15) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v15;
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v20;
  v21 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v21;
  v22 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v22;
  result = *((double *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((double *)a2 + 12) = result;
  return result;
}

double CMMsl::FitnessMachineData::FitnessMachineData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003510C0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  return result;
}

CMMsl *CMMsl::FitnessMachineData::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FitnessMachineData *v3;
  _BYTE v5[184];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FitnessMachineData::FitnessMachineData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FitnessMachineData::formatText(CMMsl::FitnessMachineData *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "cadenceDeviceIdentification", *((double *)this + 1));
    v5 = *((_DWORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cadenceUpdateTime", *((double *)this + 2));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "elapsedTime", *((double *)this + 3));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "externalMachineType", *((_DWORD *)this + 42));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "inclination", *((double *)this + 4));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "instantaneousCadence", *((double *)this + 5));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "instantaneousPower", *((double *)this + 6));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "instantaneousSpeed", *((double *)this + 7));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "powerMeterIdentification", *((_DWORD *)this + 43));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "powerUpdateTime", *((double *)this + 8));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "resistanceLevel", *((double *)this + 9));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "speedDeviceIdentification", *((double *)this + 10));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "speedUpdateTime", *((double *)this + 11));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 12));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "totalDistance", *((double *)this + 14));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "totalElevationAscended", *((double *)this + 15));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "totalEnergy", *((double *)this + 16));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "totalFloorsClimbed", *((_QWORD *)this + 17));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(a2, "totalStrokeCount", *((_QWORD *)this + 19));
    if ((*((_DWORD *)this + 44) & 0x80000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "totalStrideCount", *((_QWORD *)this + 18));
  v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40000) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x80000) != 0)
LABEL_23:
    PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FitnessMachineData::readFrom(CMMsl::FitnessMachineData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 44) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 2u:
              *((_DWORD *)this + 44) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 3u:
              *((_DWORD *)this + 44) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 4u:
              *((_DWORD *)this + 44) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 5u:
              *((_DWORD *)this + 44) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 6u:
              *((_DWORD *)this + 44) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 7u:
              *((_DWORD *)this + 44) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 8u:
              *((_DWORD *)this + 44) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 9u:
              *((_DWORD *)this + 44) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 0xAu:
              *((_DWORD *)this + 44) |= 0x10000u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_156;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_155:
                    v2 = v53 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v25 = 0;
                goto LABEL_155;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_156;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_156:
              *((_QWORD *)this + 17) = v25;
              goto LABEL_147;
            case 0xBu:
              *((_DWORD *)this + 44) |= 0x20000u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_161;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_160:
                    v2 = v57 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_160;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_161;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_161:
              *((_QWORD *)this + 18) = v31;
              goto LABEL_147;
            case 0xCu:
              *((_DWORD *)this + 44) |= 0x40000u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_166;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_165:
                    v2 = v61 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v37 = 0;
                goto LABEL_165;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_166;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_166:
              *((_QWORD *)this + 19) = v37;
              goto LABEL_147;
            case 0xDu:
              *((_DWORD *)this + 44) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 0xEu:
              *((_DWORD *)this + 44) |= 0x100000u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_171;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_170:
                    v2 = v65 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_170;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_171;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_171:
              *((_DWORD *)this + 42) = v43;
              goto LABEL_147;
            case 0xFu:
              *((_DWORD *)this + 44) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 11) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 0x10u:
              *((_DWORD *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 0x11u:
              *((_DWORD *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 0x12u:
              *((_DWORD *)this + 44) |= 0x200000u;
              v45 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v46 = *(_QWORD *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_176;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_175:
                    v2 = v69 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v49) = 0;
                goto LABEL_175;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)a2 + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_176;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_176:
              *((_DWORD *)this + 43) = v49;
LABEL_147:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x13u:
              *((_DWORD *)this + 44) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 0x14u:
              *((_DWORD *)this + 44) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 0x15u:
              *((_DWORD *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_109;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_146;
            case 0x16u:
              *((_DWORD *)this + 44) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 12) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_146:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_109:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_147;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_147;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FitnessMachineData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 176);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 5u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 6u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 7u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 8u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 9u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 136), 0xAu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 144), 0xBu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 152), 0xCu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0xDu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0xEu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0xFu);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0x10u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x11u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0x12u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0x13u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x14u);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 1) == 0)
  {
LABEL_22:
    if ((v4 & 0x800) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 96), 0x16u);
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x15u);
  if ((*(_DWORD *)(v3 + 176) & 0x800) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 96), 0x16u);
  return this;
}

BOOL CMMsl::FitnessMachineData::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 176);
  v3 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_QWORD *)(a1 + 136) != *(_QWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_QWORD *)(a1 + 152) != *(_QWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 176) & 0x800) == 0;
  if ((v2 & 0x800) != 0)
    return (v3 & 0x800) != 0 && *(double *)(a1 + 96) == *(double *)(a2 + 96);
  return v4;
}

uint64_t CMMsl::FitnessMachineData::hash_value(CMMsl::FitnessMachineData *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v1 = *((_DWORD *)this + 44);
  if ((v1 & 8) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_59:
    v3 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_60:
    v4 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_61:
    v5 = 0.0;
    if ((v1 & 0x100) != 0)
      goto LABEL_12;
LABEL_62:
    v6 = 0.0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_15;
LABEL_63:
    v7 = 0.0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_18;
LABEL_64:
    v8 = 0.0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_21;
LABEL_65:
    v9 = 0.0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_24;
LABEL_66:
    v10 = 0.0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_27;
    goto LABEL_67;
  }
  v2 = *((double *)this + 4);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_59;
LABEL_3:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_60;
LABEL_6:
  v4 = *((double *)this + 6);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_61;
LABEL_9:
  v5 = *((double *)this + 7);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 0x100) == 0)
    goto LABEL_62;
LABEL_12:
  v6 = *((double *)this + 9);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_63;
LABEL_15:
  v7 = *((double *)this + 13);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_64;
LABEL_18:
  v8 = *((double *)this + 15);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_65;
LABEL_21:
  v9 = *((double *)this + 16);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_66;
LABEL_24:
  v10 = *((double *)this + 14);
  if (v10 == 0.0)
    v10 = 0.0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_27:
    v11 = *((_QWORD *)this + 17);
    if ((v1 & 0x20000) != 0)
      goto LABEL_28;
    goto LABEL_68;
  }
LABEL_67:
  v11 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_28:
    v12 = *((_QWORD *)this + 18);
    if ((v1 & 0x40000) != 0)
      goto LABEL_29;
    goto LABEL_69;
  }
LABEL_68:
  v12 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_29:
    v13 = *((_QWORD *)this + 19);
    if ((v1 & 0x80000) != 0)
      goto LABEL_30;
LABEL_70:
    v14 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_69:
  v13 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_70;
LABEL_30:
  v14 = *((double *)this + 20);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_33:
    v15 = *((unsigned int *)this + 42);
    if ((v1 & 0x400) != 0)
      goto LABEL_34;
LABEL_72:
    v16 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_37;
LABEL_73:
    v17 = 0.0;
    if ((v1 & 4) != 0)
      goto LABEL_40;
LABEL_74:
    v18 = 0.0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_43;
    goto LABEL_75;
  }
LABEL_71:
  v15 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_72;
LABEL_34:
  v16 = *((double *)this + 11);
  if (v16 == 0.0)
    v16 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_73;
LABEL_37:
  v17 = *((double *)this + 2);
  if (v17 == 0.0)
    v17 = 0.0;
  if ((v1 & 4) == 0)
    goto LABEL_74;
LABEL_40:
  v18 = *((double *)this + 3);
  if (v18 == 0.0)
    v18 = 0.0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_43:
    v19 = *((int *)this + 43);
    if ((v1 & 0x80) != 0)
      goto LABEL_44;
LABEL_76:
    v20 = 0.0;
    if ((v1 & 0x200) != 0)
      goto LABEL_47;
LABEL_77:
    v21 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_50;
    goto LABEL_78;
  }
LABEL_75:
  v19 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_76;
LABEL_44:
  v20 = *((double *)this + 8);
  if (v20 == 0.0)
    v20 = 0.0;
  if ((v1 & 0x200) == 0)
    goto LABEL_77;
LABEL_47:
  v21 = *((double *)this + 10);
  if (v21 == 0.0)
    v21 = 0.0;
  if ((v1 & 1) != 0)
  {
LABEL_50:
    v22 = *((double *)this + 1);
    if (v22 == 0.0)
      v22 = 0.0;
    if ((v1 & 0x800) != 0)
      goto LABEL_53;
LABEL_79:
    v23 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ *(_QWORD *)&v14 ^ v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23;
  }
LABEL_78:
  v22 = 0.0;
  if ((v1 & 0x800) == 0)
    goto LABEL_79;
LABEL_53:
  v23 = *((double *)this + 12);
  if (v23 == 0.0)
    v23 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ *(_QWORD *)&v10 ^ v11 ^ v12 ^ v13 ^ *(_QWORD *)&v14 ^ v15 ^ *(_QWORD *)&v16 ^ *(_QWORD *)&v17 ^ *(_QWORD *)&v18 ^ v19 ^ *(_QWORD *)&v20 ^ *(_QWORD *)&v21 ^ *(_QWORD *)&v22 ^ *(_QWORD *)&v23;
}

uint64_t CMMsl::FitnessMachineSample::FitnessMachineSample(uint64_t this)
{
  *(_QWORD *)this = off_1003510F8;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003510F8;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

void CMMsl::FitnessMachineSample::~FitnessMachineSample(CMMsl::FitnessMachineSample *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::FitnessMachineSample::FitnessMachineSample(CMMsl::FitnessMachineSample *this, const CMMsl::FitnessMachineSample *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)this = off_1003510F8;
  *((_DWORD *)this + 28) = 0;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    v3 = 4;
    *((_DWORD *)this + 28) = 4;
    *((_QWORD *)this + 3) = v4;
    v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 28) = v3;
    *((_QWORD *)this + 2) = v4;
    v2 = *((_DWORD *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 |= 1u;
    *((_DWORD *)this + 28) = v3;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x400000) == 0)
        goto LABEL_9;
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x400000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 27) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  v5 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 16) = v5;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  v6 = *((_DWORD *)a2 + 25);
  v3 |= 0x100000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 25) = v6;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 26) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 12) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 21) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x80000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 11) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 8) = v4;
  v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0)
      return *(float *)&v4;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 20) = v4;
  if ((*((_DWORD *)a2 + 28) & 0x10) == 0)
    return *(float *)&v4;
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 28) = v3 | 0x10;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FitnessMachineSample::operator=(CMMsl *a1, const CMMsl::FitnessMachineSample *a2)
{
  CMMsl::FitnessMachineSample *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::FitnessMachineSample::FitnessMachineSample((CMMsl::FitnessMachineSample *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FitnessMachineSample *a2, CMMsl::FitnessMachineSample *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  v8 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v8;
  LODWORD(v6) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v6;
  LODWORD(v6) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v6;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v6) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v6;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::FitnessMachineSample::FitnessMachineSample(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003510F8;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::FitnessMachineSample::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::FitnessMachineSample *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FitnessMachineSample::FitnessMachineSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FitnessMachineSample::formatText(CMMsl::FitnessMachineSample *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "averageCadence", *((float *)this + 8));
    v5 = *((_DWORD *)this + 28);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageHeartRate", *((float *)this + 9));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "averagePace", *((float *)this + 10));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "averagePower", *((float *)this + 11));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "averageSpeed", *((float *)this + 12));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "crossTrainerDistance", *((float *)this + 13));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "elapsedTime", *((double *)this + 1));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "elevationGain", *((float *)this + 14));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "energy", *((float *)this + 15));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "floors", *((_DWORD *)this + 16));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 2));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 17));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "indoorBikeDistance", *((float *)this + 18));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "instantaneousCadence", *((float *)this + 19));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "instantaneousHeartRate", *((float *)this + 20));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "instantaneousPace", *((float *)this + 21));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "instantaneousPower", *((float *)this + 22));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "instantaneousSpeed", *((float *)this + 23));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 3));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "resistanceLevel", *((float *)this + 24));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(a2, "strideCount", *((float *)this + 26));
    if ((*((_DWORD *)this + 28) & 0x400000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "stepCount", *((_DWORD *)this + 25));
  v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(a2, "treadmillDistance", *((float *)this + 27));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FitnessMachineSample::readFrom(CMMsl::FitnessMachineSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 28) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_33;
            case 2u:
              *((_DWORD *)this + 28) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_33;
            case 3u:
              *((_DWORD *)this + 28) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_33:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_118;
            case 4u:
              *((_DWORD *)this + 28) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 5u:
              *((_DWORD *)this + 28) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 6u:
              *((_DWORD *)this + 28) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 7u:
              *((_DWORD *)this + 28) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 8u:
              *((_DWORD *)this + 28) |= 0x800u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_128;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_127:
                    v2 = v35 + 1;
                    goto LABEL_128;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_127;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_128;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_128:
              *((_DWORD *)this + 16) = v25;
              goto LABEL_119;
            case 9u:
              *((_DWORD *)this + 28) |= 0x100000u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_133;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_132:
                    v2 = v39 + 1;
                    goto LABEL_133;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_132;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_133;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_133:
              *((_DWORD *)this + 25) = v31;
LABEL_119:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xAu:
              *((_DWORD *)this + 28) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0xBu:
              *((_DWORD *)this + 28) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0xCu:
              *((_DWORD *)this + 28) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0xDu:
              *((_DWORD *)this + 28) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0xEu:
              *((_DWORD *)this + 28) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0xFu:
              *((_DWORD *)this + 28) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0x10u:
              *((_DWORD *)this + 28) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0x11u:
              *((_DWORD *)this + 28) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0x12u:
              *((_DWORD *)this + 28) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0x13u:
              *((_DWORD *)this + 28) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0x14u:
              *((_DWORD *)this + 28) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0x15u:
              *((_DWORD *)this + 28) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0x16u:
              *((_DWORD *)this + 28) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_101;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_117;
            case 0x17u:
              *((_DWORD *)this + 28) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_117:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_118:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_101:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FitnessMachineSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 112);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 5u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 6u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 8u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 9u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xAu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xBu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xCu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xDu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xEu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xFu);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x10u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x11u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x12u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x13u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x14u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x15u);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36), 0x17u);
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x16u);
  if ((*(_DWORD *)(v3 + 112) & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36), 0x17u);
  return this;
}

BOOL CMMsl::FitnessMachineSample::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 112);
  v3 = *(_DWORD *)(a2 + 112);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 112) & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v4;
}

uint64_t CMMsl::FitnessMachineSample::hash_value(CMMsl::FitnessMachineSample *this)
{
  int v1;
  double v2;
  double v3;
  double v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;

  v1 = *((_DWORD *)this + 28);
  if ((v1 & 4) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_68:
    v3 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_6;
LABEL_69:
    v4 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_9;
LABEL_70:
    v6 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_12;
LABEL_71:
    v8 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_15;
LABEL_72:
    v10 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_18;
LABEL_73:
    v12 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_21;
    goto LABEL_74;
  }
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_68;
LABEL_3:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_69;
LABEL_6:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x400) == 0)
    goto LABEL_70;
LABEL_9:
  v5 = *((float *)this + 15);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_71;
LABEL_12:
  v7 = *((float *)this + 27);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_72;
LABEL_15:
  v9 = *((float *)this + 18);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_73;
LABEL_18:
  v11 = *((float *)this + 13);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_21:
    v13 = *((int *)this + 16);
    if ((v1 & 0x100000) != 0)
      goto LABEL_22;
    goto LABEL_75;
  }
LABEL_74:
  v13 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_22:
    v14 = *((int *)this + 25);
    if ((v1 & 0x200000) != 0)
      goto LABEL_23;
LABEL_76:
    v16 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_26;
LABEL_77:
    v18 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_29;
LABEL_78:
    v20 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_32;
LABEL_79:
    v22 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_35;
LABEL_80:
    v24 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_38;
LABEL_81:
    v26 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_41;
LABEL_82:
    v28 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_44;
LABEL_83:
    v30 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_47;
LABEL_84:
    v32 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_50;
LABEL_85:
    v34 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_53;
LABEL_86:
    v36 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_56;
LABEL_87:
    v38 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_59;
    goto LABEL_88;
  }
LABEL_75:
  v14 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_76;
LABEL_23:
  v15 = *((float *)this + 26);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_77;
LABEL_26:
  v17 = *((float *)this + 23);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_78;
LABEL_29:
  v19 = *((float *)this + 12);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_79;
LABEL_32:
  v21 = *((float *)this + 21);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_80;
LABEL_35:
  v23 = *((float *)this + 10);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_81;
LABEL_38:
  v25 = *((float *)this + 14);
  v26 = LODWORD(v25);
  if (v25 == 0.0)
    v26 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_82;
LABEL_41:
  v27 = *((float *)this + 17);
  v28 = LODWORD(v27);
  if (v27 == 0.0)
    v28 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_83;
LABEL_44:
  v29 = *((float *)this + 24);
  v30 = LODWORD(v29);
  if (v29 == 0.0)
    v30 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_84;
LABEL_47:
  v31 = *((float *)this + 22);
  v32 = LODWORD(v31);
  if (v31 == 0.0)
    v32 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_85;
LABEL_50:
  v33 = *((float *)this + 11);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_86;
LABEL_53:
  v35 = *((float *)this + 19);
  v36 = LODWORD(v35);
  if (v35 == 0.0)
    v36 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_87;
LABEL_56:
  v37 = *((float *)this + 8);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_59:
    v39 = *((float *)this + 20);
    v40 = LODWORD(v39);
    if (v39 == 0.0)
      v40 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_62;
LABEL_89:
    v42 = 0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42;
  }
LABEL_88:
  v40 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_89;
LABEL_62:
  v41 = *((float *)this + 9);
  v42 = LODWORD(v41);
  if (v41 == 0.0)
    v42 = 0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42;
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t this)
{
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_100351130;
  return this;
}

{
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_100351130;
  return this;
}

void CMMsl::FocusModes::~FocusModes(CMMsl::FocusModes *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_100351130;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_100011294((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

{
  CMMsl::FocusModes::~FocusModes(this);
  operator delete();
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t this, const CMMsl::FocusModes *a2)
{
  char v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  char v7;

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = off_100351130;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 4) != 0)
  {
    v4 = *((_DWORD *)a2 + 9);
    *(_BYTE *)(this + 48) |= 4u;
    *(_DWORD *)(this + 36) = v4;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else if ((*((_BYTE *)a2 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  v5 = *((_DWORD *)a2 + 8);
  *(_BYTE *)(this + 48) |= 2u;
  *(_DWORD *)(this + 32) = v5;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_8:
    if ((v2 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_15;
  }
LABEL_14:
  v6 = *((_DWORD *)a2 + 10);
  *(_BYTE *)(this + 48) |= 8u;
  *(_DWORD *)(this + 40) = v6;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return this;
    goto LABEL_10;
  }
LABEL_15:
  v7 = *((_BYTE *)a2 + 44);
  *(_BYTE *)(this + 48) |= 0x10u;
  *(_BYTE *)(this + 44) = v7;
  if ((*((_BYTE *)a2 + 48) & 1) == 0)
    return this;
LABEL_10:
  v3 = *((_QWORD *)a2 + 3);
  *(_BYTE *)(this + 48) |= 1u;
  *(_QWORD *)(this + 24) = v3;
  return this;
}

uint64_t CMMsl::FocusModes::operator=(uint64_t a1, const CMMsl::FocusModes *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;

  if ((const CMMsl::FocusModes *)a1 != a2)
  {
    CMMsl::FocusModes::FocusModes((uint64_t)v9, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v12;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v15;
    v15 = v6;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    LOBYTE(v7) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v14;
    v14 = v7;
    v11 = v3;
    v12 = v4;
    CMMsl::FocusModes::~FocusModes((CMMsl::FocusModes *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FocusModes *a2, CMMsl::FocusModes *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LOBYTE(v5) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v5;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_100351130;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *v4;
  *v4 = v6;
  if (v7)
    sub_100011294((uint64_t)v4, v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *v5;
  *v5 = v8;
  if (v9)
    sub_100011294(a1 + 16, v9);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t CMMsl::FocusModes::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;

  if (a1 != a2)
  {
    CMMsl::FocusModes::FocusModes((uint64_t)v9, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v3;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v12;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v5;
    v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v15;
    v15 = v6;
    v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    v13 = v7;
    LOBYTE(v7) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v14;
    v14 = v7;
    v11 = v3;
    v12 = v4;
    CMMsl::FocusModes::~FocusModes((CMMsl::FocusModes *)v9);
  }
  return a1;
}

uint64_t CMMsl::FocusModes::formatText(CMMsl::FocusModes *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "mode");
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "modeSemanticType", *((_DWORD *)this + 8));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)this + 48) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "modeUpdateReason", *((_DWORD *)this + 9));
  if ((*((_BYTE *)this + 48) & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "modeUpdateSource", *((_DWORD *)this + 10));
LABEL_7:
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format(a2, "semanticModeIdentifier");
  v6 = *((_BYTE *)this + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "starting", *((_BYTE *)this + 44));
    v6 = *((_BYTE *)this + 48);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FocusModes::readFrom(CMMsl::FocusModes *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *((_BYTE *)this + 48) |= 4u;
          v21 = *((_QWORD *)a2 + 1);
          v22 = *((_QWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_79;
              v24 += 7;
              v21 = v27;
              v14 = v25++ > 8;
            }
            while (!v14);
LABEL_58:
            LODWORD(v26) = 0;
            goto LABEL_79;
          }
          v50 = 0;
          v51 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v52 = v21 + 1;
              v53 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)a2 + 1) = v52;
              v26 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                v21 = v52;
                v14 = v51++ > 8;
                if (v14)
                  goto LABEL_58;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_79:
          *((_DWORD *)this + 9) = v26;
          goto LABEL_88;
        case 4u:
          *((_BYTE *)this + 48) |= 2u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_83;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_65:
            LODWORD(v34) = 0;
            goto LABEL_83;
          }
          v54 = 0;
          v55 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v56 = v29 + 1;
              v57 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)a2 + 1) = v56;
              v34 |= (unint64_t)(v57 & 0x7F) << v54;
              if (v57 < 0)
              {
                v54 += 7;
                v29 = v56;
                v14 = v55++ > 8;
                if (v14)
                  goto LABEL_65;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_83:
          *((_DWORD *)this + 8) = v34;
          goto LABEL_88;
        case 5u:
          *((_BYTE *)this + 48) |= 8u;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_87;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_72:
            LODWORD(v42) = 0;
            goto LABEL_87;
          }
          v58 = 0;
          v59 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          break;
        case 6u:
          *((_BYTE *)this + 48) |= 0x10u;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 >= *((_QWORD *)a2 + 2))
          {
            v48 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v46 = v45 + 1;
            v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v45);
            *((_QWORD *)a2 + 1) = v46;
            v48 = v47 != 0;
          }
          *((_BYTE *)this + 44) = v48;
          goto LABEL_88;
        case 7u:
          *((_BYTE *)this + 48) |= 1u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v49);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_88;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_88;
      }
      while (1)
      {
        if (v38 == v37)
        {
          LODWORD(v42) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_87;
        }
        v60 = v37 + 1;
        v61 = *(_BYTE *)(v39 + v37);
        *((_QWORD *)a2 + 1) = v60;
        v42 |= (unint64_t)(v61 & 0x7F) << v58;
        if ((v61 & 0x80) == 0)
          break;
        v58 += 7;
        v37 = v60;
        v14 = v59++ > 8;
        if (v14)
          goto LABEL_72;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v42) = 0;
LABEL_87:
      *((_DWORD *)this + 10) = v42;
LABEL_88:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FocusModes::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = this;
  v4 = *(_QWORD *)(this + 8);
  if (v4)
    this = PB::Writer::write(a2, v4, 1);
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
    this = PB::Writer::write(a2, v5, 2);
  v6 = *(_BYTE *)(v3 + 48);
  if ((v6 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 3u);
    v6 = *(_BYTE *)(v3 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  v6 = *(_BYTE *)(v3 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  v6 = *(_BYTE *)(v3 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_9:
    if ((v6 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 6u);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24), 7u);
  return this;
}

BOOL CMMsl::FocusModes::operator==(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  _BOOL8 result;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = *(unsigned __int8 **)(a2 + 8);
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = *(unsigned __int8 **)(a1 + 16);
  v12 = *(unsigned __int8 ***)(a2 + 16);
  if (v11)
  {
    if (!v12)
      return 0;
    v13 = v11[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v11[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v12[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = *(unsigned __int8 **)(a2 + 16);
    else
      v17 = *v12;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
        return 0;
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13)
          goto LABEL_35;
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 4) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 8) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 48) & 1) == 0;
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
}

unint64_t CMMsl::FocusModes::hash_value(CMMsl::FocusModes *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v12;
  char v13;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = sub_1000112DC((uint64_t)&v12, v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = sub_1000112DC((uint64_t)&v13, v4);
  else
    v5 = 0;
  if ((*((_BYTE *)this + 48) & 4) != 0)
  {
    v6 = *((unsigned int *)this + 9);
    if ((*((_BYTE *)this + 48) & 2) != 0)
    {
LABEL_9:
      v7 = *((int *)this + 8);
      if ((*((_BYTE *)this + 48) & 8) != 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else
  {
    v6 = 0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_9;
  }
  v7 = 0;
  if ((*((_BYTE *)this + 48) & 8) != 0)
  {
LABEL_10:
    v8 = *((int *)this + 10);
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v8 = 0;
  if ((*((_BYTE *)this + 48) & 0x10) != 0)
  {
LABEL_11:
    v9 = *((unsigned __int8 *)this + 44);
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_12;
LABEL_19:
    v10 = 0.0;
    return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10;
  }
LABEL_18:
  v9 = 0;
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_19;
LABEL_12:
  v10 = *((double *)this + 3);
  if (v10 == 0.0)
    v10 = 0.0;
  return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ *(_QWORD *)&v10;
}

double CMMsl::FrequencyResponse::FrequencyResponse(CMMsl::FrequencyResponse *this)
{
  double result;

  *(_QWORD *)this = off_100351168;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351168;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::FrequencyResponse::~FrequencyResponse(CMMsl::FrequencyResponse *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100351168;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::FrequencyResponse::~FrequencyResponse(this);
  operator delete();
}

CMMsl::FrequencyResponse *CMMsl::FrequencyResponse::FrequencyResponse(CMMsl::FrequencyResponse *this, const CMMsl::FrequencyResponse *a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = off_100351168;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 64) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 64) = 1;
    *((_QWORD *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::FrequencyResponse::operator=(uint64_t a1, const CMMsl::FrequencyResponse *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if ((const CMMsl::FrequencyResponse *)a1 != a2)
  {
    CMMsl::FrequencyResponse::FrequencyResponse((CMMsl::FrequencyResponse *)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::FrequencyResponse::~FrequencyResponse((CMMsl::FrequencyResponse *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FrequencyResponse *a2, CMMsl::FrequencyResponse *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::FrequencyResponse::FrequencyResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100351168;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::FrequencyResponse::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v9[8];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::FrequencyResponse::FrequencyResponse((uint64_t)v9, a2);
    v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v10 = v5;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v7;
    CMMsl::FrequencyResponse::~FrequencyResponse((CMMsl::FrequencyResponse *)v9);
  }
  return a1;
}

uint64_t CMMsl::FrequencyResponse::formatText(CMMsl::FrequencyResponse *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "freq", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "mag", v10);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FrequencyResponse::readFrom(CMMsl::FrequencyResponse *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  unint64_t v77;
  _BYTE v79[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark(a2, v79) & 1) != 0)
            return 0;
          v42 = *((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          while (v42 < v43 && !*((_BYTE *)a2 + 24))
          {
            v45 = (char *)*((_QWORD *)this + 2);
            v44 = *((_QWORD *)this + 3);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v10;
              v48 = (v45 - (_BYTE *)*v10) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                goto LABEL_128;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_100020E2C((uint64_t)v11, v51);
                v47 = (char *)*((_QWORD *)this + 1);
                v45 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[4 * v48];
              *(_DWORD *)v53 = 0;
              v46 = v53 + 4;
              while (v45 != v47)
              {
                v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((_QWORD *)this + 1) = v53;
              *((_QWORD *)this + 2) = v46;
              *((_QWORD *)this + 3) = &v52[4 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_DWORD *)v45 = 0;
              v46 = v45 + 4;
            }
            *((_QWORD *)this + 2) = v46;
            v55 = *((_QWORD *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_82;
            *(v46 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v55);
            v43 = *((_QWORD *)a2 + 2);
            v42 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v42;
          }
          goto LABEL_83;
        }
        v60 = (char *)*((_QWORD *)this + 2);
        v59 = *((_QWORD *)this + 3);
        if ((unint64_t)v60 >= v59)
        {
          v67 = (char *)*v10;
          v68 = (v60 - (_BYTE *)*v10) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
LABEL_128:
            sub_10000D5F8();
          v70 = v59 - (_QWORD)v67;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)sub_100020E2C((uint64_t)v11, v71);
            v67 = (char *)*((_QWORD *)this + 1);
            v60 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v72 = 0;
          }
          v75 = &v72[4 * v68];
          *(_DWORD *)v75 = 0;
          v58 = v75 + 4;
          while (v60 != v67)
          {
            v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *((_QWORD *)this + 1) = v75;
          *((_QWORD *)this + 2) = v58;
          *((_QWORD *)this + 3) = &v72[4 * v71];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_DWORD *)v60 = 0;
          v58 = v60 + 4;
        }
        *((_QWORD *)this + 2) = v58;
LABEL_114:
        v77 = *((_QWORD *)a2 + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_116:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v77);
        v27 = *((_QWORD *)a2 + 1) + 4;
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *((_BYTE *)this + 64) |= 1u;
        v26 = *((_QWORD *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)a2 + 2))
          goto LABEL_116;
        *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v26);
        v27 = *((_QWORD *)a2 + 1) + 8;
LABEL_118:
        *((_QWORD *)a2 + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark(a2, v79) & 1) != 0)
        return 0;
      v28 = *((_QWORD *)a2 + 1);
      v29 = *((_QWORD *)a2 + 2);
      while (v28 < v29 && !*((_BYTE *)a2 + 24))
      {
        v31 = (char *)*((_QWORD *)this + 5);
        v30 = *((_QWORD *)this + 6);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v8;
          v34 = (v31 - (_BYTE *)*v8) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            goto LABEL_127;
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)sub_100020E2C((uint64_t)v9, v37);
            v33 = (char *)*((_QWORD *)this + 4);
            v31 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = 0;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *((_QWORD *)this + 4) = v39;
          *((_QWORD *)this + 5) = v32;
          *((_QWORD *)this + 6) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = 0;
          v32 = v31 + 4;
        }
        *((_QWORD *)this + 5) = v32;
        v41 = *((_QWORD *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_82:
          *((_BYTE *)a2 + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v41);
        v29 = *((_QWORD *)a2 + 2);
        v28 = *((_QWORD *)a2 + 1) + 4;
        *((_QWORD *)a2 + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark(a2, v79);
      goto LABEL_119;
    }
    v57 = (char *)*((_QWORD *)this + 5);
    v56 = *((_QWORD *)this + 6);
    if ((unint64_t)v57 >= v56)
    {
      v61 = (char *)*v8;
      v62 = (v57 - (_BYTE *)*v8) >> 2;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62)
LABEL_127:
        sub_10000D5F8();
      v64 = v56 - (_QWORD)v61;
      if (v64 >> 1 > v63)
        v63 = v64 >> 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        v66 = (char *)sub_100020E2C((uint64_t)v9, v65);
        v61 = (char *)*((_QWORD *)this + 4);
        v57 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v66 = 0;
      }
      v73 = &v66[4 * v62];
      *(_DWORD *)v73 = 0;
      v58 = v73 + 4;
      while (v57 != v61)
      {
        v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *((_QWORD *)this + 4) = v73;
      *((_QWORD *)this + 5) = v58;
      *((_QWORD *)this + 6) = &v66[4 * v65];
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_DWORD *)v57 = 0;
      v58 = v57 + 4;
    }
    *((_QWORD *)this + 5) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t CMMsl::FrequencyResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 64) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  v4 = (float *)v3[1];
  v5 = (float *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v8 = (float *)v3[4];
  v7 = (float *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

BOOL CMMsl::FrequencyResponse::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 4;
  do
  {
    v9 = *v7++;
    result = *(float *)(v8 - 4) == v9;
    v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::FrequencyResponse::hash_value(CMMsl::FrequencyResponse *this)
{
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 64) & 1) != 0)
  {
    if (*((double *)this + 7) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 7);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1)) ^ v2;
  return v3 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
}

_QWORD *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(_QWORD *this)
{
  *this = off_1003511A0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003511A0;
  this[1] = 0;
  return this;
}

void CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification(CMMsl::FusedBioMotionClassification *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003511A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003511A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003511A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(_QWORD *this, const CMMsl::FusedBioMotionClassification *a2)
{
  *this = off_1003511A0;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::FusedBioMotionClassification *CMMsl::FusedBioMotionClassification::operator=(const CMMsl::FusedBioMotionClassification *a1, const CMMsl::FusedBioMotionClassification *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::FusedBioMotionClassification *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_1003511A0;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FusedBioMotionClassification *a2, CMMsl::FusedBioMotionClassification *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003511A0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003511A0;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::FusedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_1003511A0;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::FusedBioMotionClassification::formatText(CMMsl::FusedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FusedBioMotionClassification::readFrom(CMMsl::FusedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FusedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::FusedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  return result;
}

CMMsl::BioMotionClassification *CMMsl::FusedBioMotionClassification::hash_value(CMMsl::FusedBioMotionClassification *this)
{
  CMMsl::BioMotionClassification *result;

  result = (CMMsl::BioMotionClassification *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  return result;
}

uint64_t CMMsl::FusedBioMotionClassification::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::GaitCycleSegment::GaitCycleSegment(uint64_t this)
{
  *(_QWORD *)this = off_1003511D8;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003511D8;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

void CMMsl::GaitCycleSegment::~GaitCycleSegment(CMMsl::GaitCycleSegment *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::GaitCycleSegment::GaitCycleSegment(CMMsl::GaitCycleSegment *this, const CMMsl::GaitCycleSegment *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  *(_QWORD *)this = off_1003511D8;
  *((_DWORD *)this + 25) = 0;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 25) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 25) = v3;
    *((_QWORD *)this + 3) = v5;
    v2 = *((_DWORD *)a2 + 25);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 25) = v3;
    *((_QWORD *)this + 2) = v6;
    v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x10000) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 15);
  v3 |= 0x200u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 15) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = *((float *)a2 + 22);
  v3 |= 0x10000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 22) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = *((float *)a2 + 12);
  v3 |= 0x40u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 12) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = *((float *)a2 + 20);
  v3 |= 0x4000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 20) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = *((float *)a2 + 14);
  v3 |= 0x100u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 14) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = *((float *)a2 + 13);
  v3 |= 0x80u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 13) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = *((float *)a2 + 19);
  v3 |= 0x2000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 19) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = *((float *)a2 + 11);
  v3 |= 0x20u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 11) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x8000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = *((float *)a2 + 21);
  v3 |= 0x8000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 21) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = *((float *)a2 + 16);
  v3 |= 0x400u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 16) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  v8 = *((_BYTE *)a2 + 98);
  v3 |= 0x800000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 98) = v8;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = *((float *)a2 + 17);
  v3 |= 0x800u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 17) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  v9 = *((_BYTE *)a2 + 97);
  v3 |= 0x400000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 97) = v9;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  v10 = *((_BYTE *)a2 + 94);
  v3 |= 0x80000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 94) = v10;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_44:
  v11 = *((_BYTE *)a2 + 93);
  v3 |= 0x40000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 93) = v11;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_46;
  }
LABEL_45:
  v12 = *((_BYTE *)a2 + 95);
  v3 |= 0x100000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 95) = v12;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_46:
  result = *((float *)a2 + 10);
  v3 |= 0x10u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 10) = result;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v13 = *((_BYTE *)a2 + 96);
  v3 |= 0x200000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 96) = v13;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_49;
  }
LABEL_48:
  v14 = *((_BYTE *)a2 + 92);
  v3 |= 0x20000u;
  *((_DWORD *)this + 25) = v3;
  *((_BYTE *)this + 92) = v14;
  v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_50:
    result = *((float *)a2 + 18);
    *((_DWORD *)this + 25) = v3 | 0x1000;
    *((float *)this + 18) = result;
    return result;
  }
LABEL_49:
  v15 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 25) = v3;
  *((_QWORD *)this + 4) = v15;
  if ((*((_DWORD *)a2 + 25) & 0x1000) != 0)
    goto LABEL_50;
  return result;
}

CMMsl *CMMsl::GaitCycleSegment::operator=(CMMsl *a1, const CMMsl::GaitCycleSegment *a2)
{
  CMMsl::GaitCycleSegment *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    CMMsl::GaitCycleSegment::GaitCycleSegment((CMMsl::GaitCycleSegment *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegment *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GaitCycleSegment *a2, CMMsl::GaitCycleSegment *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  float result;

  v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  v8 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  v11 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v11;
  v12 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  v14 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v14;
  v15 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v15;
  v16 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v16;
  LOBYTE(v6) = *((_BYTE *)this + 98);
  *((_BYTE *)this + 98) = *((_BYTE *)a2 + 98);
  *((_BYTE *)a2 + 98) = v6;
  v17 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v17;
  LOBYTE(v6) = *((_BYTE *)this + 97);
  *((_BYTE *)this + 97) = *((_BYTE *)a2 + 97);
  *((_BYTE *)a2 + 97) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 94);
  *((_BYTE *)this + 94) = *((_BYTE *)a2 + 94);
  *((_BYTE *)a2 + 94) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 93);
  *((_BYTE *)this + 93) = *((_BYTE *)a2 + 93);
  *((_BYTE *)a2 + 93) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 95);
  *((_BYTE *)this + 95) = *((_BYTE *)a2 + 95);
  *((_BYTE *)a2 + 95) = v6;
  v18 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v18;
  LOBYTE(v6) = *((_BYTE *)this + 96);
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a2 + 96) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 92);
  *((_BYTE *)this + 92) = *((_BYTE *)a2 + 92);
  *((_BYTE *)a2 + 92) = v6;
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  return result;
}

float CMMsl::GaitCycleSegment::GaitCycleSegment(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003511D8;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 94) = *(_BYTE *)(a2 + 94);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_BYTE *)(a1 + 95) = *(_BYTE *)(a2 + 95);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  return result;
}

CMMsl *CMMsl::GaitCycleSegment::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GaitCycleSegment *v3;
  _BYTE v5[104];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitCycleSegment::GaitCycleSegment((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegment *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitCycleSegment::formatText(CMMsl::GaitCycleSegment *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbabilityEstimate", *((float *)this + 10));
    v5 = *((_DWORD *)this + 25);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cadence", *((float *)this + 11));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "doubleSupportEstimate", *((float *)this + 12));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "horizontalRotationRateMax", *((float *)this + 13));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "impulseMagnitude", *((float *)this + 14));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "impulseStartTime", *((_QWORD *)this + 1));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "isCadenceConcordant", *((_BYTE *)this + 92));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "isFeasibleWalkingSpeed", *((_BYTE *)this + 93));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isNotRunning", *((_BYTE *)this + 94));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isPendular", *((_BYTE *)this + 95));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isSufficientVerticalTwist", *((_BYTE *)this + 96));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isSwingStanceCycle", *((_BYTE *)this + 97));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "isValid", *((_BYTE *)this + 98));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "loftEndTime", *((_QWORD *)this + 2));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "loftMagnitude", *((float *)this + 15));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "loftStartTime", *((_QWORD *)this + 3));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "pendulumResidual", *((float *)this + 16));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "previousImpulseStartTime", *((_QWORD *)this + 4));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "rawLoftSpeed", *((float *)this + 17));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "sqrtMaxAbsLoftAccel", *((float *)this + 18));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "stanceProbability", *((float *)this + 19));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
LABEL_49:
    PB::TextFormatter::format(a2, "verticalRotationRateMean", *((float *)this + 21));
    if ((*((_DWORD *)this + 25) & 0x10000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_25;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "stepLengthEstimate", *((float *)this + 20));
  v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x8000) != 0)
    goto LABEL_49;
LABEL_24:
  if ((v5 & 0x10000) != 0)
LABEL_25:
    PB::TextFormatter::format(a2, "walkSpeedEstimate", *((float *)this + 22));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitCycleSegment::readFrom(CMMsl::GaitCycleSegment *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 25) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_153;
                  }
                  v61 = v20++;
                  v62 = *(_BYTE *)(v21 + v61);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_152:
                v2 = v61 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_153;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_153:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_169;
            case 2u:
              *((_DWORD *)this + 25) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_158;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_157:
                    v2 = v65 + 1;
                    goto LABEL_158;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v31 = 0;
                goto LABEL_157;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_158;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_158:
              *((_QWORD *)this + 3) = v31;
              goto LABEL_169;
            case 3u:
              *((_DWORD *)this + 25) |= 2u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_163;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_162:
                    v2 = v69 + 1;
                    goto LABEL_163;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v37 = 0;
                goto LABEL_162;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_163;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_163:
              *((_QWORD *)this + 2) = v37;
              goto LABEL_169;
            case 4u:
              *((_DWORD *)this + 25) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 5u:
              *((_DWORD *)this + 25) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 6u:
              *((_DWORD *)this + 25) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 7u:
              *((_DWORD *)this + 25) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 8u:
              *((_DWORD *)this + 25) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 9u:
              *((_DWORD *)this + 25) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 0xAu:
              *((_DWORD *)this + 25) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 0xBu:
              *((_DWORD *)this + 25) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 0xCu:
              *((_DWORD *)this + 25) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 0xDu:
              *((_DWORD *)this + 25) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 16) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 0xEu:
              *((_DWORD *)this + 25) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v40 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v40 = v39 != 0;
              }
              *((_BYTE *)this + 98) = v40;
              goto LABEL_169;
            case 0xFu:
              *((_DWORD *)this + 25) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 0x10u:
              *((_DWORD *)this + 25) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v42 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v42 = v41 != 0;
              }
              *((_BYTE *)this + 97) = v42;
              goto LABEL_169;
            case 0x11u:
              *((_DWORD *)this + 25) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v44 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v44 = v43 != 0;
              }
              *((_BYTE *)this + 94) = v44;
              goto LABEL_169;
            case 0x12u:
              *((_DWORD *)this + 25) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v46 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v46 = v45 != 0;
              }
              *((_BYTE *)this + 93) = v46;
              goto LABEL_169;
            case 0x13u:
              *((_DWORD *)this + 25) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v48 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v48 = v47 != 0;
              }
              *((_BYTE *)this + 95) = v48;
              goto LABEL_169;
            case 0x14u:
              *((_DWORD *)this + 25) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_104;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_148;
            case 0x15u:
              *((_DWORD *)this + 25) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v50 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v50 = v49 != 0;
              }
              *((_BYTE *)this + 96) = v50;
              goto LABEL_169;
            case 0x16u:
              *((_DWORD *)this + 25) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v52 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v52 = v51 != 0;
              }
              *((_BYTE *)this + 92) = v52;
              goto LABEL_169;
            case 0x17u:
              *((_DWORD *)this + 25) |= 8u;
              v53 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v54 = *(_QWORD *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_168;
                  }
                  v73 = v53++;
                  v74 = *(_BYTE *)(v54 + v73);
                  *((_QWORD *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_167:
                    v2 = v73 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v57 = 0;
                goto LABEL_167;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)a2 + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_168;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_168:
              *((_QWORD *)this + 4) = v57;
LABEL_169:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x18u:
              *((_DWORD *)this + 25) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_148:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_104:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_169;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_169;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitCycleSegment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 100);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 2u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 3u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 5u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 7u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 8u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 9u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xAu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xBu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xCu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xDu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 98), 0xEu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xFu);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 97), 0x10u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 94), 0x11u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 93), 0x12u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 95), 0x13u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x14u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 96), 0x15u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 92), 0x16u);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 72), 0x18u);
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x17u);
  if ((*(_DWORD *)(v3 + 100) & 0x1000) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 72), 0x18u);
  return this;
}

BOOL CMMsl::GaitCycleSegment::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 100);
  v3 = *(_DWORD *)(a2 + 100);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 98) != *(unsigned __int8 *)(a2 + 98))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 97) != *(unsigned __int8 *)(a2 + 97))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 94) != *(unsigned __int8 *)(a2 + 94))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 95) != *(unsigned __int8 *)(a2 + 95))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 96) != *(unsigned __int8 *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 100) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0)
    return (v3 & 0x1000) != 0 && *(float *)(a1 + 72) == *(float *)(a2 + 72);
  return v4;
}

uint64_t CMMsl::GaitCycleSegment::hash_value(CMMsl::GaitCycleSegment *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;

  v1 = *((_DWORD *)this + 25);
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 1);
    if ((v1 & 4) != 0)
    {
LABEL_3:
      v3 = *((_QWORD *)this + 3);
      if ((v1 & 2) != 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else
  {
    v2 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    v4 = *((_QWORD *)this + 2);
    if ((v1 & 0x200) != 0)
      goto LABEL_5;
LABEL_55:
    v6 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_8;
LABEL_56:
    v8 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_11;
LABEL_57:
    v10 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_14;
LABEL_58:
    v12 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_17;
LABEL_59:
    v14 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_20;
LABEL_60:
    v16 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_23;
LABEL_61:
    v18 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_26;
LABEL_62:
    v20 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_29;
LABEL_63:
    v22 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_32;
LABEL_64:
    v24 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_54:
  v4 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_55;
LABEL_5:
  v5 = *((float *)this + 15);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_56;
LABEL_8:
  v7 = *((float *)this + 22);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_57;
LABEL_11:
  v9 = *((float *)this + 12);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_58;
LABEL_14:
  v11 = *((float *)this + 20);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_59;
LABEL_17:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_60;
LABEL_20:
  v15 = *((float *)this + 13);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_61;
LABEL_23:
  v17 = *((float *)this + 19);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_62;
LABEL_26:
  v19 = *((float *)this + 11);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_63;
LABEL_29:
  v21 = *((float *)this + 21);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_64;
LABEL_32:
  v23 = *((float *)this + 16);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_35:
    v25 = *((unsigned __int8 *)this + 98);
    if ((v1 & 0x800) != 0)
      goto LABEL_36;
LABEL_66:
    v27 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_39;
    goto LABEL_67;
  }
LABEL_65:
  v25 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_66;
LABEL_36:
  v26 = *((float *)this + 17);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_39:
    v28 = *((unsigned __int8 *)this + 97);
    if ((v1 & 0x80000) != 0)
      goto LABEL_40;
    goto LABEL_68;
  }
LABEL_67:
  v28 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_40:
    v29 = *((unsigned __int8 *)this + 94);
    if ((v1 & 0x40000) != 0)
      goto LABEL_41;
    goto LABEL_69;
  }
LABEL_68:
  v29 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_41:
    v30 = *((unsigned __int8 *)this + 93);
    if ((v1 & 0x100000) != 0)
      goto LABEL_42;
    goto LABEL_70;
  }
LABEL_69:
  v30 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_42:
    v31 = *((unsigned __int8 *)this + 95);
    if ((v1 & 0x10) != 0)
      goto LABEL_43;
LABEL_71:
    v33 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_46;
    goto LABEL_72;
  }
LABEL_70:
  v31 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_71;
LABEL_43:
  v32 = *((float *)this + 10);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_46:
    v34 = *((unsigned __int8 *)this + 96);
    if ((v1 & 0x20000) != 0)
      goto LABEL_47;
    goto LABEL_73;
  }
LABEL_72:
  v34 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_47:
    v35 = *((unsigned __int8 *)this + 92);
    if ((v1 & 8) != 0)
      goto LABEL_48;
    goto LABEL_74;
  }
LABEL_73:
  v35 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_48:
    v36 = *((_QWORD *)this + 4);
    if ((v1 & 0x1000) != 0)
      goto LABEL_49;
LABEL_75:
    v38 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
  }
LABEL_74:
  v36 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_75;
LABEL_49:
  v37 = *((float *)this + 18);
  v38 = LODWORD(v37);
  if (v37 == 0.0)
    v38 = 0;
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
}

uint64_t CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t this)
{
  *(_QWORD *)this = off_100351210;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351210;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

void CMMsl::GaitCycleSegmentationState::~GaitCycleSegmentationState(CMMsl::GaitCycleSegmentationState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t this, const CMMsl::GaitCycleSegmentationState *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)this = off_100351210;
  *(_DWORD *)(this + 116) = 0;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) != 0)
  {
    v4 = *((_QWORD *)a2 + 8);
    v3 = 128;
    *(_DWORD *)(this + 116) = 128;
    *(_QWORD *)(this + 64) = v4;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *((_BYTE *)a2 + 114);
    v3 |= 0x100000u;
    *(_DWORD *)(this + 116) = v3;
    *(_BYTE *)(this + 114) = v5;
    v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *((_BYTE *)a2 + 113);
    v3 |= 0x80000u;
    *(_DWORD *)(this + 116) = v3;
    *(_BYTE *)(this + 113) = v6;
    v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_BYTE *)a2 + 115);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 115) = v7;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *((_BYTE *)a2 + 112);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 116) = v3;
  *(_BYTE *)(this + 112) = v8;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 24) = v9;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 16) = v10;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *((_QWORD *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 8) = v11;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v12 = *((_QWORD *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 48) = v12;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v13 = *((_QWORD *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 56) = v13;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v14 = *((_DWORD *)a2 + 23);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 92) = v14;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v15 = *((_DWORD *)a2 + 26);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 104) = v15;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v16 = *((_DWORD *)a2 + 22);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 88) = v16;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v17 = *((_DWORD *)a2 + 21);
  v3 |= 0x800u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 84) = v17;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 100) = v18;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  v19 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 76) = v19;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  v20 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 80) = v20;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v21 = *((_DWORD *)a2 + 24);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 96) = v21;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  v22 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 72) = v22;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  v23 = *((_DWORD *)a2 + 27);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 108) = v23;
  v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x10) == 0)
      return this;
LABEL_46:
    v25 = *((_QWORD *)a2 + 5);
    *(_DWORD *)(this + 116) = v3 | 0x10;
    *(_QWORD *)(this + 40) = v25;
    return this;
  }
LABEL_45:
  v24 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 116) = v3;
  *(_QWORD *)(this + 32) = v24;
  if ((*((_DWORD *)a2 + 29) & 0x10) != 0)
    goto LABEL_46;
  return this;
}

CMMsl *CMMsl::GaitCycleSegmentationState::operator=(CMMsl *a1, const CMMsl::GaitCycleSegmentationState *a2)
{
  CMMsl::GaitCycleSegmentationState *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegmentationState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GaitCycleSegmentationState *a2, CMMsl::GaitCycleSegmentationState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  LOBYTE(v3) = *((_BYTE *)this + 114);
  *((_BYTE *)this + 114) = *((_BYTE *)a2 + 114);
  *((_BYTE *)a2 + 114) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 113);
  *((_BYTE *)this + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a2 + 113) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 115);
  *((_BYTE *)this + 115) = *((_BYTE *)a2 + 115);
  *((_BYTE *)a2 + 115) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v3;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  result = *((float *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((float *)a2 + 27) = result;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  return result;
}

float CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351210;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 115) = *(_BYTE *)(a2 + 115);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(float *)(a2 + 108);
  *(float *)(a1 + 108) = result;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::GaitCycleSegmentationState::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GaitCycleSegmentationState *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegmentationState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitCycleSegmentationState::formatText(CMMsl::GaitCycleSegmentationState *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "curImpulseStartTime", *((_QWORD *)this + 1));
    v5 = *((_DWORD *)this + 29);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "curLoftEndTime", *((_QWORD *)this + 2));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "curLoftStartTime", *((_QWORD *)this + 3));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 18));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "currentHorzRotRateMax", *((float *)this + 19));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "currentImpulseMagnitude", *((float *)this + 20));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "currentLoftMagnitude", *((float *)this + 21));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "currentMax", *((float *)this + 22));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "currentMin", *((float *)this + 23));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "currentWalkSpeedEstimate", *((float *)this + 24));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "firstLoft", *((_BYTE *)this + 112));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "impulseStartTimeWalkingSpeed", *((_QWORD *)this + 4));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "impulseStopTimeWalkingSpeed", *((_QWORD *)this + 5));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "lastZeroTime", *((_QWORD *)this + 6));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "loftEndDetected", *((_BYTE *)this + 113));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "loftStartDetected", *((_BYTE *)this + 114));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "prevLoftStartTime", *((_QWORD *)this + 7));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "previousHorzRotRateMax", *((float *)this + 25));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "previousMax", *((float *)this + 26));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(a2, "vertRotationRateMean", *((float *)this + 27));
    if ((*((_DWORD *)this + 29) & 0x200000) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x200000) != 0)
LABEL_23:
    PB::TextFormatter::format(a2, "waitingToConfirmLoft", *((_BYTE *)this + 115));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitCycleSegmentationState::readFrom(CMMsl::GaitCycleSegmentationState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 29) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_173;
            case 2u:
              *((_DWORD *)this + 29) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v22 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v22 = v21 != 0;
              }
              *((_BYTE *)this + 114) = v22;
              goto LABEL_209;
            case 3u:
              *((_DWORD *)this + 29) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v24 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v24 = v23 != 0;
              }
              *((_BYTE *)this + 113) = v24;
              goto LABEL_209;
            case 4u:
              *((_DWORD *)this + 29) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v26 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v26 = v25 != 0;
              }
              *((_BYTE *)this + 115) = v26;
              goto LABEL_209;
            case 5u:
              *((_DWORD *)this + 29) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 112) = v28;
              goto LABEL_209;
            case 6u:
              *((_DWORD *)this + 29) |= 4u;
              v29 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v30 = *(_QWORD *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    v33 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_178;
                  }
                  v73 = v29++;
                  v74 = *(_BYTE *)(v30 + v73);
                  *((_QWORD *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v33 = 0;
LABEL_177:
                    v2 = v73 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v33 = 0;
                goto LABEL_177;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)a2 + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_178;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              v33 = 0;
LABEL_178:
              *((_QWORD *)this + 3) = v33;
              goto LABEL_209;
            case 7u:
              *((_DWORD *)this + 29) |= 2u;
              v35 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v36 = *(_QWORD *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    v39 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_183;
                  }
                  v77 = v35++;
                  v78 = *(_BYTE *)(v36 + v77);
                  *((_QWORD *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v39 = 0;
LABEL_182:
                    v2 = v77 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v39 = 0;
                goto LABEL_182;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)a2 + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_183;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              v39 = 0;
LABEL_183:
              *((_QWORD *)this + 2) = v39;
              goto LABEL_209;
            case 8u:
              *((_DWORD *)this + 29) |= 1u;
              v41 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v42 = *(_QWORD *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_188;
                  }
                  v81 = v41++;
                  v82 = *(_BYTE *)(v42 + v81);
                  *((_QWORD *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_187:
                    v2 = v81 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v45 = 0;
                goto LABEL_187;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)a2 + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_188;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_188:
              *((_QWORD *)this + 1) = v45;
              goto LABEL_209;
            case 9u:
              *((_DWORD *)this + 29) |= 0x20u;
              v47 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v48 = *(_QWORD *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_193;
                  }
                  v85 = v47++;
                  v86 = *(_BYTE *)(v48 + v85);
                  *((_QWORD *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_192:
                    v2 = v85 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v51 = 0;
                goto LABEL_192;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)a2 + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_193;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_193:
              *((_QWORD *)this + 6) = v51;
              goto LABEL_209;
            case 0xAu:
              *((_DWORD *)this + 29) |= 0x40u;
              v53 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v54 = *(_QWORD *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_198;
                  }
                  v89 = v53++;
                  v90 = *(_BYTE *)(v54 + v89);
                  *((_QWORD *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_197:
                    v2 = v89 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v57 = 0;
                goto LABEL_197;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)a2 + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_198;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_198:
              *((_QWORD *)this + 7) = v57;
              goto LABEL_209;
            case 0xBu:
              *((_DWORD *)this + 29) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0xCu:
              *((_DWORD *)this + 29) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0xDu:
              *((_DWORD *)this + 29) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0xEu:
              *((_DWORD *)this + 29) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0xFu:
              *((_DWORD *)this + 29) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0x10u:
              *((_DWORD *)this + 29) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0x11u:
              *((_DWORD *)this + 29) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0x12u:
              *((_DWORD *)this + 29) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0x13u:
              *((_DWORD *)this + 29) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_99;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_172;
            case 0x14u:
              *((_DWORD *)this + 29) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_172:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_173:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_99:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_209;
            case 0x15u:
              *((_DWORD *)this + 29) |= 8u;
              v59 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v60 = *(_QWORD *)a2;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    v63 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_203;
                  }
                  v93 = v59++;
                  v94 = *(_BYTE *)(v60 + v93);
                  *((_QWORD *)a2 + 1) = v59;
                  v63 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    v63 = 0;
LABEL_202:
                    v2 = v93 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v63 = 0;
                goto LABEL_202;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)a2 + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_203;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              v63 = 0;
LABEL_203:
              *((_QWORD *)this + 4) = v63;
              goto LABEL_209;
            case 0x16u:
              *((_DWORD *)this + 29) |= 0x10u;
              v65 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v66 = *(_QWORD *)a2;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v69 = 0;
                if (v2 <= v65)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v65)
                  {
                    v69 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_208;
                  }
                  v97 = v65++;
                  v98 = *(_BYTE *)(v66 + v97);
                  *((_QWORD *)a2 + 1) = v65;
                  v69 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    v69 = 0;
LABEL_207:
                    v2 = v97 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v69 = 0;
                goto LABEL_207;
              }
              v67 = 0;
              v68 = 0;
              v69 = 0;
              do
              {
                v2 = v65 + 1;
                *((_QWORD *)a2 + 1) = v65 + 1;
                v70 = *(_BYTE *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0)
                  goto LABEL_208;
                v67 += 7;
                v65 = v2;
                v14 = v68++ > 8;
              }
              while (!v14);
              v69 = 0;
LABEL_208:
              *((_QWORD *)this + 5) = v69;
LABEL_209:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_209;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitCycleSegmentationState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 116);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 114), 2u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 113), 3u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 115), 4u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 112), 5u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 24), 6u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 16), 7u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 8), 8u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 48), 9u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 56), 0xAu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xBu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xCu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xDu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xEu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xFu);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x10u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x11u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x12u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x13u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x14u);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0x16u);
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 32), 0x15u);
  if ((*(_DWORD *)(v3 + 116) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2, *(_QWORD *)(v3 + 40), 0x16u);
  return this;
}

BOOL CMMsl::GaitCycleSegmentationState::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 116);
  v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 115) != *(unsigned __int8 *)(a2 + 115))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 116) & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
  return v4;
}

uint64_t CMMsl::GaitCycleSegmentationState::hash_value(CMMsl::GaitCycleSegmentationState *this)
{
  int v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *((_DWORD *)this + 29);
  if ((v1 & 0x80) != 0)
  {
    v2 = *((double *)this + 8);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      v3 = *((unsigned __int8 *)this + 114);
      if ((v1 & 0x80000) != 0)
        goto LABEL_4;
      goto LABEL_48;
    }
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    v4 = *((unsigned __int8 *)this + 113);
    if ((v1 & 0x200000) != 0)
      goto LABEL_5;
    goto LABEL_49;
  }
LABEL_48:
  v4 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_5:
    v5 = *((unsigned __int8 *)this + 115);
    if ((v1 & 0x40000) != 0)
      goto LABEL_6;
    goto LABEL_50;
  }
LABEL_49:
  v5 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_6:
    v6 = *((unsigned __int8 *)this + 112);
    if ((v1 & 4) != 0)
      goto LABEL_7;
    goto LABEL_51;
  }
LABEL_50:
  v6 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_7:
    v7 = *((_QWORD *)this + 3);
    if ((v1 & 2) != 0)
      goto LABEL_8;
    goto LABEL_52;
  }
LABEL_51:
  v7 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_8:
    v8 = *((_QWORD *)this + 2);
    if ((v1 & 1) != 0)
      goto LABEL_9;
    goto LABEL_53;
  }
LABEL_52:
  v8 = 0;
  if ((v1 & 1) != 0)
  {
LABEL_9:
    v9 = *((_QWORD *)this + 1);
    if ((v1 & 0x20) != 0)
      goto LABEL_10;
    goto LABEL_54;
  }
LABEL_53:
  v9 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_10:
    v10 = *((_QWORD *)this + 6);
    if ((v1 & 0x40) != 0)
      goto LABEL_11;
    goto LABEL_55;
  }
LABEL_54:
  v10 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_11:
    v11 = *((_QWORD *)this + 7);
    if ((v1 & 0x2000) != 0)
      goto LABEL_12;
LABEL_56:
    v13 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_15;
LABEL_57:
    v15 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_18;
LABEL_58:
    v17 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_21;
LABEL_59:
    v19 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_24;
LABEL_60:
    v21 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_27;
LABEL_61:
    v23 = 0;
    if ((v1 & 0x400) != 0)
      goto LABEL_30;
LABEL_62:
    v25 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_33;
LABEL_63:
    v27 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_36;
LABEL_64:
    v29 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_39;
LABEL_65:
    v31 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_42;
LABEL_66:
    v32 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_43;
LABEL_67:
    v33 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33;
  }
LABEL_55:
  v11 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_56;
LABEL_12:
  v12 = *((float *)this + 23);
  v13 = LODWORD(v12);
  if (v12 == 0.0)
    v13 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_57;
LABEL_15:
  v14 = *((float *)this + 26);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_58;
LABEL_18:
  v16 = *((float *)this + 22);
  v17 = LODWORD(v16);
  if (v16 == 0.0)
    v17 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_59;
LABEL_21:
  v18 = *((float *)this + 21);
  v19 = LODWORD(v18);
  if (v18 == 0.0)
    v19 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_60;
LABEL_24:
  v20 = *((float *)this + 25);
  v21 = LODWORD(v20);
  if (v20 == 0.0)
    v21 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_61;
LABEL_27:
  v22 = *((float *)this + 19);
  v23 = LODWORD(v22);
  if (v22 == 0.0)
    v23 = 0;
  if ((v1 & 0x400) == 0)
    goto LABEL_62;
LABEL_30:
  v24 = *((float *)this + 20);
  v25 = LODWORD(v24);
  if (v24 == 0.0)
    v25 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_63;
LABEL_33:
  v26 = *((float *)this + 24);
  v27 = LODWORD(v26);
  if (v26 == 0.0)
    v27 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_64;
LABEL_36:
  v28 = *((float *)this + 18);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_65;
LABEL_39:
  v30 = *((float *)this + 27);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_66;
LABEL_42:
  v32 = *((_QWORD *)this + 4);
  if ((v1 & 0x10) == 0)
    goto LABEL_67;
LABEL_43:
  v33 = *((_QWORD *)this + 5);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33;
}

uint64_t CMMsl::GaitEventsHKResult::GaitEventsHKResult(uint64_t this)
{
  *(_QWORD *)this = off_100351248;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351248;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

void CMMsl::GaitEventsHKResult::~GaitEventsHKResult(CMMsl::GaitEventsHKResult *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::GaitEventsHKResult::GaitEventsHKResult(CMMsl::GaitEventsHKResult *this, const CMMsl::GaitEventsHKResult *a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  char v6;

  *(_QWORD *)this = off_100351248;
  *((_DWORD *)this + 19) = 0;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 4) != 0)
  {
    result = *((double *)a2 + 3);
    v3 = 4;
    *((_WORD *)this + 38) = 4;
    *((double *)this + 3) = result;
    v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_WORD *)this + 38) = v3;
    *((double *)this + 5) = result;
    v2 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_WORD *)this + 38) = v3;
    *((double *)this + 4) = result;
    v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 1) = result;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v5 = *((_BYTE *)a2 + 73);
  v3 |= 0x200u;
  *((_WORD *)this + 38) = v3;
  *((_BYTE *)this + 73) = v5;
  v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      return result;
LABEL_22:
    result = *((double *)a2 + 2);
    *((_WORD *)this + 38) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_21:
  v6 = *((_BYTE *)a2 + 72);
  v3 |= 0x100u;
  *((_WORD *)this + 38) = v3;
  *((_BYTE *)this + 72) = v6;
  if ((*((_WORD *)a2 + 38) & 2) != 0)
    goto LABEL_22;
  return result;
}

uint64_t CMMsl::GaitEventsHKResult::operator=(uint64_t a1, const CMMsl::GaitEventsHKResult *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  int v16;

  if ((const CMMsl::GaitEventsHKResult *)a1 != a2)
  {
    CMMsl::GaitEventsHKResult::GaitEventsHKResult((CMMsl::GaitEventsHKResult *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v16;
    v16 = v3;
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    v13 = v6;
    LOBYTE(v3) = *(_BYTE *)(a1 + 73);
    *(_BYTE *)(a1 + 73) = v15;
    v15 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 72);
    *(_BYTE *)(a1 + 72) = v14;
    v14 = v3;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsHKResult *a2, CMMsl::GaitEventsHKResult *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  LOBYTE(v3) = *((_BYTE *)this + 73);
  *((_BYTE *)this + 73) = *((_BYTE *)a2 + 73);
  *((_BYTE *)a2 + 73) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 72);
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  *((_BYTE *)a2 + 72) = v3;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::GaitEventsHKResult::GaitEventsHKResult(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100351248;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::GaitEventsHKResult::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int16 v4;
  __int16 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void (**v12)(CMMsl::GaitEventsHKResult *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  int v18;

  if (a1 != a2)
  {
    v12 = off_100351248;
    v3 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(a2 + 76) = 0;
    v4 = *(_WORD *)(a2 + 72);
    v18 = *(_DWORD *)(a1 + 76);
    v14 = *(_OWORD *)(a1 + 24);
    v15 = *(_OWORD *)(a1 + 40);
    v16 = *(_OWORD *)(a1 + 56);
    v5 = *(_WORD *)(a1 + 72);
    *(_WORD *)(a1 + 72) = v4;
    v17 = v5;
    v6 = *(_OWORD *)(a1 + 8);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_OWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 76) = v3;
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 40) = v9;
    *(_OWORD *)(a1 + 56) = v10;
    *(_OWORD *)(a1 + 8) = v7;
    v13 = v6;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsHKResult::formatText(CMMsl::GaitEventsHKResult *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 38);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "emptyField2", *((double *)this + 1));
    v5 = *((_WORD *)this + 38);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*((_WORD *)this + 38) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "emptyField3", *((_BYTE *)this + 72));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 2));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "hasValidGroundContactTime", *((_BYTE *)this + 73));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "leftGroundContactTime", *((double *)this + 3));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "leftGroundContactTimePercentage", *((double *)this + 4));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "rightGroundContactTime", *((double *)this + 5));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(a2, "windowEndTime", *((double *)this + 7));
    if ((*((_WORD *)this + 38) & 0x80) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "rightGroundContactTimePercentage", *((double *)this + 6));
  v5 = *((_WORD *)this + 38);
  if ((v5 & 0x40) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x80) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsHKResult::readFrom(CMMsl::GaitEventsHKResult *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 38) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_57;
        case 2u:
          *((_WORD *)this + 38) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_57;
        case 3u:
          *((_WORD *)this + 38) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_57;
        case 4u:
          *((_WORD *)this + 38) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_57;
        case 5u:
          *((_WORD *)this + 38) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_57;
        case 6u:
          *((_WORD *)this + 38) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_57;
        case 7u:
          *((_WORD *)this + 38) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_49;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_57;
        case 8u:
          *((_WORD *)this + 38) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v21 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v21 = v20 != 0;
          }
          *((_BYTE *)this + 73) = v21;
          break;
        case 9u:
          *((_WORD *)this + 38) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 >= *((_QWORD *)a2 + 2))
          {
            v24 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
            *((_QWORD *)a2 + 1) = v2;
            v24 = v23 != 0;
          }
          *((_BYTE *)this + 72) = v24;
          break;
        case 0xAu:
          *((_WORD *)this + 38) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
          {
LABEL_49:
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_57:
            v2 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsHKResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 76);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 4u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 73), 8u);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0xAu);
  }
LABEL_20:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 72), 9u);
  if ((*(_WORD *)(v3 + 76) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 0xAu);
  return this;
}

BOOL CMMsl::GaitEventsHKResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 76) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0)
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v4;
}

uint64_t CMMsl::GaitEventsHKResult::hash_value(CMMsl::GaitEventsHKResult *this)
{
  __int16 v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v1 = *((_WORD *)this + 38);
  if ((v1 & 4) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_29:
    v3 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_6;
LABEL_30:
    v4 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_31:
    v5 = 0.0;
    if ((v1 & 1) != 0)
      goto LABEL_12;
LABEL_32:
    v6 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_15;
LABEL_33:
    v7 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_18;
LABEL_34:
    v8 = 0.0;
    if ((*((_WORD *)this + 38) & 0x200) != 0)
      goto LABEL_21;
    goto LABEL_35;
  }
  v2 = *((double *)this + 3);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_29;
LABEL_3:
  v3 = *((double *)this + 5);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_30;
LABEL_6:
  v4 = *((double *)this + 4);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_31;
LABEL_9:
  v5 = *((double *)this + 6);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 1) == 0)
    goto LABEL_32;
LABEL_12:
  v6 = *((double *)this + 1);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_33;
LABEL_15:
  v7 = *((double *)this + 8);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_34;
LABEL_18:
  v8 = *((double *)this + 7);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((*((_WORD *)this + 38) & 0x200) != 0)
  {
LABEL_21:
    v9 = *((unsigned __int8 *)this + 73);
    if ((*((_WORD *)this + 38) & 0x100) != 0)
      goto LABEL_22;
    goto LABEL_36;
  }
LABEL_35:
  v9 = 0;
  if ((*((_WORD *)this + 38) & 0x100) != 0)
  {
LABEL_22:
    v10 = *((unsigned __int8 *)this + 72);
    if ((v1 & 2) != 0)
      goto LABEL_23;
LABEL_37:
    v11 = 0.0;
    return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10 ^ *(_QWORD *)&v11;
  }
LABEL_36:
  v10 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_37;
LABEL_23:
  v11 = *((double *)this + 2);
  if (v11 == 0.0)
    v11 = 0.0;
  return *(_QWORD *)&v3 ^ *(_QWORD *)&v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ v9 ^ v10 ^ *(_QWORD *)&v11;
}

uint64_t CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(uint64_t this)
{
  *(_QWORD *)this = off_100351280;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351280;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

void CMMsl::GaitEventsModelOutput::~GaitEventsModelOutput(CMMsl::GaitEventsModelOutput *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(CMMsl::GaitEventsModelOutput *this, const CMMsl::GaitEventsModelOutput *a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  double result;
  int v6;
  char v7;
  char v8;
  int v9;
  int v10;

  *(_QWORD *)this = off_100351280;
  *((_DWORD *)this + 22) = 0;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x800) != 0)
  {
    v4 = *((_BYTE *)a2 + 84);
    v3 = 2048;
    *((_WORD *)this + 44) = 2048;
    *((_BYTE *)this + 84) = v4;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 1) = result;
    v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 6) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v6 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 19) = v6;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v7 = *((_BYTE *)a2 + 85);
  v3 |= 0x1000u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 85) = v7;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *((_BYTE *)a2 + 86);
  v3 |= 0x2000u;
  *((_WORD *)this + 44) = v3;
  *((_BYTE *)this + 86) = v8;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v9;
  v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      return result;
LABEL_30:
    result = *((double *)a2 + 3);
    *((_WORD *)this + 44) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_29:
  v10 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 18) = v10;
  if ((*((_WORD *)a2 + 44) & 4) != 0)
    goto LABEL_30;
  return result;
}

CMMsl *CMMsl::GaitEventsModelOutput::operator=(CMMsl *a1, const CMMsl::GaitEventsModelOutput *a2)
{
  CMMsl::GaitEventsModelOutput *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::GaitEventsModelOutput::GaitEventsModelOutput((CMMsl::GaitEventsModelOutput *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitEventsModelOutput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsModelOutput *a2, CMMsl::GaitEventsModelOutput *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 84);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a2 + 84) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v11;
  LOBYTE(v11) = *((_BYTE *)this + 85);
  *((_BYTE *)this + 85) = *((_BYTE *)a2 + 85);
  *((_BYTE *)a2 + 85) = v11;
  LOBYTE(v11) = *((_BYTE *)this + 86);
  *((_BYTE *)this + 86) = *((_BYTE *)a2 + 86);
  *((_BYTE *)a2 + 86) = v11;
  v12 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v12;
  v13 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v13;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100351280;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::GaitEventsModelOutput::operator=(CMMsl *this, uint64_t a2, CMMsl::GaitEventsModelOutput *a3)
{
  void (**v5)(CMMsl::GaitEventsModelOutput *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  char v12;
  __int16 v13;
  int v14;

  if (this != (CMMsl *)a2)
  {
    v5 = off_100351280;
    v14 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 88) = 0;
    v12 = *(_BYTE *)(a2 + 84);
    v6 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 56);
    v13 = *(_WORD *)(a2 + 85);
    v11 = *(_DWORD *)(a2 + 80);
    v10 = *(_QWORD *)(a2 + 72);
    v7 = *(_OWORD *)(a2 + 24);
    CMMsl::swap(this, (CMMsl::GaitEventsModelOutput *)&v5, a3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return this;
}

uint64_t CMMsl::GaitEventsModelOutput::formatText(CMMsl::GaitEventsModelOutput *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "crownOrientation", *((_DWORD *)this + 18));
    v5 = *((_WORD *)this + 44);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 1));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "initialContactTime", *((double *)this + 2));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isSuccessful", *((_BYTE *)this + 84));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isValidSide", *((_BYTE *)this + 85));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isValidToeOff", *((_BYTE *)this + 86));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "meanRotationZ", *((double *)this + 3));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "relativeInitialContactTime", *((double *)this + 4));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "relativeToeOffTime", *((double *)this + 5));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "stepSide", *((_DWORD *)this + 19));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "toeOffTime", *((double *)this + 6));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 8));
    if ((*((_WORD *)this + 44) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "windowEndTime", *((double *)this + 7));
  v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x400) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "wristOrientation", *((_DWORD *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsModelOutput::readFrom(CMMsl::GaitEventsModelOutput *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 44) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v21 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v21 = v20 != 0;
              }
              *((_BYTE *)this + 84) = v21;
              goto LABEL_119;
            case 2u:
              *((_WORD *)this + 44) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 3u:
              *((_WORD *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 4u:
              *((_WORD *)this + 44) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 6) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 5u:
              *((_WORD *)this + 44) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 6u:
              *((_WORD *)this + 44) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 5) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 7u:
              *((_WORD *)this + 44) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 8u:
              *((_WORD *)this + 44) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_74;
              *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_103;
            case 9u:
              *((_WORD *)this + 44) |= 0x200u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  v47 = v23++;
                  v48 = *(_BYTE *)(v24 + v47);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_107:
                    v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_107;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_108;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_108:
              *((_DWORD *)this + 19) = v27;
              goto LABEL_119;
            case 0xAu:
              *((_WORD *)this + 44) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v30 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v30 = v29 != 0;
              }
              *((_BYTE *)this + 85) = v30;
              goto LABEL_119;
            case 0xBu:
              *((_WORD *)this + 44) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v32 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v32 = v31 != 0;
              }
              *((_BYTE *)this + 86) = v32;
              goto LABEL_119;
            case 0xCu:
              *((_WORD *)this + 44) |= 0x400u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_113;
                  }
                  v51 = v33++;
                  v52 = *(_BYTE *)(v34 + v51);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_112;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_113;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *((_DWORD *)this + 20) = v37;
              goto LABEL_119;
            case 0xDu:
              *((_WORD *)this + 44) |= 0x100u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_118;
                  }
                  v55 = v39++;
                  v56 = *(_BYTE *)(v40 + v55);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_117;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_118;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *((_DWORD *)this + 18) = v43;
LABEL_119:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *((_WORD *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_103:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsModelOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 84), 1u);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 4u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 5u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 8u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 9u);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 85), 0xAu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 86), 0xBu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xCu);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 24), 0xEu);
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xDu);
  if ((*(_WORD *)(v3 + 88) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 24), 0xEu);
  return this;
}

BOOL CMMsl::GaitEventsModelOutput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 88);
  v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 86) != *(unsigned __int8 *)(a2 + 86))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  return v4;
}

uint64_t CMMsl::GaitEventsModelOutput::hash_value(CMMsl::GaitEventsModelOutput *this)
{
  __int16 v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;

  v1 = *((_WORD *)this + 44);
  if ((v1 & 0x800) == 0)
  {
    v2 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_3;
LABEL_33:
    v3 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_6;
LABEL_34:
    v4 = 0.0;
    if ((v1 & 0x20) != 0)
      goto LABEL_9;
LABEL_35:
    v5 = 0.0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
LABEL_36:
    v6 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_15;
LABEL_37:
    v7 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_18;
LABEL_38:
    v8 = 0.0;
    if ((v1 & 0x40) != 0)
      goto LABEL_21;
LABEL_39:
    v9 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0)
      goto LABEL_24;
    goto LABEL_40;
  }
  v2 = *((unsigned __int8 *)this + 84);
  if ((v1 & 1) == 0)
    goto LABEL_33;
LABEL_3:
  v3 = *((double *)this + 1);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_34;
LABEL_6:
  v4 = *((double *)this + 2);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((v1 & 0x20) == 0)
    goto LABEL_35;
LABEL_9:
  v5 = *((double *)this + 6);
  if (v5 == 0.0)
    v5 = 0.0;
  if ((v1 & 8) == 0)
    goto LABEL_36;
LABEL_12:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_37;
LABEL_15:
  v7 = *((double *)this + 5);
  if (v7 == 0.0)
    v7 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_38;
LABEL_18:
  v8 = *((double *)this + 8);
  if (v8 == 0.0)
    v8 = 0.0;
  if ((v1 & 0x40) == 0)
    goto LABEL_39;
LABEL_21:
  v9 = *((double *)this + 7);
  if (v9 == 0.0)
    v9 = 0.0;
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_24:
    v10 = *((unsigned int *)this + 19);
    if ((*((_WORD *)this + 44) & 0x1000) != 0)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_40:
  v10 = 0;
  if ((*((_WORD *)this + 44) & 0x1000) != 0)
  {
LABEL_25:
    v11 = *((unsigned __int8 *)this + 85);
    if ((*((_WORD *)this + 44) & 0x2000) != 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  v11 = 0;
  if ((*((_WORD *)this + 44) & 0x2000) != 0)
  {
LABEL_26:
    v12 = *((unsigned __int8 *)this + 86);
    if ((*((_WORD *)this + 44) & 0x400) != 0)
      goto LABEL_27;
    goto LABEL_43;
  }
LABEL_42:
  v12 = 0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_27:
    v13 = *((int *)this + 20);
    if ((*((_WORD *)this + 44) & 0x100) != 0)
      goto LABEL_28;
    goto LABEL_44;
  }
LABEL_43:
  v13 = 0;
  if ((*((_WORD *)this + 44) & 0x100) != 0)
  {
LABEL_28:
    v14 = *((int *)this + 18);
    if ((v1 & 4) != 0)
      goto LABEL_29;
LABEL_45:
    v15 = 0.0;
    return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
  }
LABEL_44:
  v14 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_45;
LABEL_29:
  v15 = *((double *)this + 3);
  if (v15 == 0.0)
    v15 = 0.0;
  return *(_QWORD *)&v3 ^ v2 ^ *(_QWORD *)&v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6 ^ *(_QWORD *)&v7 ^ *(_QWORD *)&v8 ^ *(_QWORD *)&v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(_QWORD *)&v15;
}

uint64_t CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(uint64_t this)
{
  *(_QWORD *)this = off_1003512B8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003512B8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::GaitEventsStrideAggregation::~GaitEventsStrideAggregation(CMMsl::GaitEventsStrideAggregation *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(CMMsl::GaitEventsStrideAggregation *this, const CMMsl::GaitEventsStrideAggregation *a2)
{
  char v2;
  char v3;
  char v4;
  double result;
  int v6;

  *(_QWORD *)this = off_1003512B8;
  *((_DWORD *)this + 12) = 0;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x20) != 0)
  {
    v4 = *((_BYTE *)a2 + 44);
    v3 = 32;
    *((_BYTE *)this + 48) = 32;
    *((_BYTE *)this + 44) = v4;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 48) & 1) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 1) = result;
    v2 = *((_BYTE *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_BYTE *)this + 48) = v3;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_BYTE *)this + 48) = v3;
  *((double *)this + 3) = result;
  v2 = *((_BYTE *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      return result;
LABEL_14:
    result = *((double *)a2 + 4);
    *((_BYTE *)this + 48) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
LABEL_13:
  v6 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *((_BYTE *)this + 48) = v3;
  *((_DWORD *)this + 10) = v6;
  if ((*((_BYTE *)a2 + 48) & 8) != 0)
    goto LABEL_14;
  return result;
}

uint64_t CMMsl::GaitEventsStrideAggregation::operator=(uint64_t a1, const CMMsl::GaitEventsStrideAggregation *a2)
{
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  int v11;
  char v12;
  int v13;

  if ((const CMMsl::GaitEventsStrideAggregation *)a1 != a2)
  {
    CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation((CMMsl::GaitEventsStrideAggregation *)v8, a2);
    v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    v13 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v12;
    v12 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    v11 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    v9 = v4;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsStrideAggregation *a2, CMMsl::GaitEventsStrideAggregation *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003512B8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003512B8;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::GaitEventsStrideAggregation::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;
  void (**v13)(CMMsl::GaitEventsStrideAggregation *__hidden);
  __int128 v14;
  __int128 v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v13 = off_1003512B8;
    v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    v4 = *(_BYTE *)(a2 + 44);
    v5 = *(_DWORD *)(a2 + 40);
    v18 = *(_DWORD *)(a1 + 48);
    v6 = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v4;
    v17 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v5;
    v16 = v9;
    v10 = *(_OWORD *)(a1 + 24);
    v11 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 24) = v11;
    v14 = v7;
    v15 = v10;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsStrideAggregation::formatText(CMMsl::GaitEventsStrideAggregation *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 1));
    v5 = *((_BYTE *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "initialContactTime", *((double *)this + 2));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "isSuccessful", *((_BYTE *)this + 44));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "toeOffTime", *((double *)this + 3));
    if ((*((_BYTE *)this + 48) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "stepSide", *((_DWORD *)this + 10));
  v5 = *((_BYTE *)this + 48);
  if ((v5 & 4) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsStrideAggregation::readFrom(CMMsl::GaitEventsStrideAggregation *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 48) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v21 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v21 = v20 != 0;
              }
              *((_BYTE *)this + 44) = v21;
              goto LABEL_61;
            case 2u:
              *((_BYTE *)this + 48) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_55;
            case 3u:
              *((_BYTE *)this + 48) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_55;
            case 4u:
              *((_BYTE *)this + 48) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_44;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_55;
            case 5u:
              *((_BYTE *)this + 48) |= 0x10u;
              v23 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v24 = *(_QWORD *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_60;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_59:
                    v2 = v31 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v27) = 0;
                goto LABEL_59;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)a2 + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_60;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_60:
              *((_DWORD *)this + 10) = v27;
LABEL_61:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *((_BYTE *)this + 48) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_55:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_44:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_61;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_61;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsStrideAggregation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 48);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(this + 44), 1u);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 32), 6u);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  if ((*(_BYTE *)(v3 + 48) & 8) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 32), 6u);
  return this;
}

BOOL CMMsl::GaitEventsStrideAggregation::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 48) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 48) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 48) & 8) == 0;
  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
    return (*(_BYTE *)(a2 + 48) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::GaitEventsStrideAggregation::hash_value(CMMsl::GaitEventsStrideAggregation *this)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;

  if ((*((_BYTE *)this + 48) & 0x20) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 48) & 1) != 0)
      goto LABEL_3;
LABEL_17:
    v2 = 0.0;
    if ((*((_BYTE *)this + 48) & 2) != 0)
      goto LABEL_6;
LABEL_18:
    v3 = 0.0;
    if ((*((_BYTE *)this + 48) & 4) != 0)
      goto LABEL_9;
LABEL_19:
    v4 = 0.0;
    if ((*((_BYTE *)this + 48) & 0x10) != 0)
      goto LABEL_12;
    goto LABEL_20;
  }
  v1 = *((unsigned __int8 *)this + 44);
  if ((*((_BYTE *)this + 48) & 1) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 48) & 2) == 0)
    goto LABEL_18;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  if ((*((_BYTE *)this + 48) & 4) == 0)
    goto LABEL_19;
LABEL_9:
  v4 = *((double *)this + 3);
  if (v4 == 0.0)
    v4 = 0.0;
  if ((*((_BYTE *)this + 48) & 0x10) != 0)
  {
LABEL_12:
    v5 = *((unsigned int *)this + 10);
    if ((*((_BYTE *)this + 48) & 8) != 0)
      goto LABEL_13;
LABEL_21:
    v6 = 0.0;
    return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6;
  }
LABEL_20:
  v5 = 0;
  if ((*((_BYTE *)this + 48) & 8) == 0)
    goto LABEL_21;
LABEL_13:
  v6 = *((double *)this + 4);
  if (v6 == 0.0)
    v6 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3 ^ *(_QWORD *)&v4 ^ v5 ^ *(_QWORD *)&v6;
}

uint64_t CMMsl::GeomagneticData::GeomagneticData(uint64_t this)
{
  *(_QWORD *)this = off_1003512F0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003512F0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::GeomagneticData::~GeomagneticData(CMMsl::GeomagneticData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::GeomagneticData::GeomagneticData(CMMsl::GeomagneticData *this, const CMMsl::GeomagneticData *a2)
{
  __int16 v2;
  __int16 v3;
  float result;

  *(_QWORD *)this = off_1003512F0;
  *((_DWORD *)this + 13) = 0;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x20) != 0)
  {
    result = *((float *)a2 + 7);
    v3 = 32;
    *((_WORD *)this + 26) = 32;
    *((float *)this + 7) = result;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 8);
    v3 |= 0x40u;
    *((_WORD *)this + 26) = v3;
    *((float *)this + 8) = result;
    v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 |= 1u;
    *((_WORD *)this + 26) = v3;
    *((float *)this + 2) = result;
    v2 = *((_WORD *)a2 + 26);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 3) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *((float *)a2 + 10);
  v3 |= 0x100u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 10) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *((float *)a2 + 11);
  v3 |= 0x200u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 11) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 12) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *((float *)a2 + 9);
  v3 |= 0x80u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 9) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 5) = result;
  v2 = *((_WORD *)a2 + 26);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *((float *)a2 + 6);
    *((_WORD *)this + 26) = v3 | 0x10;
    *((float *)this + 6) = result;
    return result;
  }
LABEL_23:
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 4) = result;
  if ((*((_WORD *)a2 + 26) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

CMMsl *CMMsl::GeomagneticData::operator=(CMMsl *a1, const CMMsl::GeomagneticData *a2)
{
  CMMsl::GeomagneticData *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::GeomagneticData::GeomagneticData((CMMsl::GeomagneticData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GeomagneticData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GeomagneticData *a2, CMMsl::GeomagneticData *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float result;

  v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  v6 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  v7 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  v9 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  v11 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v11;
  v12 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v12;
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GeomagneticData::GeomagneticData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003512F0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::GeomagneticData::operator=(CMMsl *this, uint64_t a2, CMMsl::GeomagneticData *a3)
{
  __int128 v4;
  void (**v6)(CMMsl::GeomagneticData *__hidden);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v6 = off_1003512F0;
    v11 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_DWORD *)(a2 + 48);
    v4 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 8);
    v8 = v4;
    CMMsl::swap(this, (CMMsl::GeomagneticData *)&v6, a3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return this;
}

uint64_t CMMsl::GeomagneticData::formatText(CMMsl::GeomagneticData *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 26);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "altitude", *((float *)this + 2));
    v5 = *((_WORD *)this + 26);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "decimalYear", *((float *)this + 3));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "declination", *((float *)this + 4));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 5));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 6));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "latitude", *((float *)this + 7));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "longitude", *((float *)this + 8));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "magnitude", *((float *)this + 9));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(a2, "y", *((float *)this + 11));
    if ((*((_WORD *)this + 26) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "x", *((float *)this + 10));
  v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "z", *((float *)this + 12));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GeomagneticData::readFrom(CMMsl::GeomagneticData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 26) |= 0x20u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 2u:
          *((_WORD *)this + 26) |= 0x40u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 3u:
          *((_WORD *)this + 26) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 4u:
          *((_WORD *)this + 26) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 5u:
          *((_WORD *)this + 26) |= 0x100u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 6u:
          *((_WORD *)this + 26) |= 0x200u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 7u:
          *((_WORD *)this + 26) |= 0x400u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 8u:
          *((_WORD *)this + 26) |= 0x80u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 9u:
          *((_WORD *)this + 26) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 0xAu:
          *((_WORD *)this + 26) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_54;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_58;
        case 0xBu:
          *((_WORD *)this + 26) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_58:
            v2 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_54:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GeomagneticData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 52);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28), 1u);
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 2u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 8), 3u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 4u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 6u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 7u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 8u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 9u);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 0xBu);
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xAu);
  if ((*(_WORD *)(v3 + 52) & 0x10) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 0xBu);
  return this;
}

BOOL CMMsl::GeomagneticData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 52);
  v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v4;
}

uint64_t CMMsl::GeomagneticData::hash_value(CMMsl::GeomagneticData *this)
{
  __int16 v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;

  v1 = *((_WORD *)this + 26);
  if ((v1 & 0x20) == 0)
  {
    v2 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_3;
LABEL_36:
    v4 = 0;
    if ((v1 & 1) != 0)
      goto LABEL_6;
LABEL_37:
    v6 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_9;
LABEL_38:
    v8 = 0;
    if ((*((_WORD *)this + 26) & 0x100) != 0)
      goto LABEL_12;
LABEL_39:
    v10 = 0;
    if ((*((_WORD *)this + 26) & 0x200) != 0)
      goto LABEL_15;
LABEL_40:
    v12 = 0;
    if ((*((_WORD *)this + 26) & 0x400) != 0)
      goto LABEL_18;
LABEL_41:
    v14 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_21;
LABEL_42:
    v16 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_43:
    v18 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_27;
    goto LABEL_44;
  }
  v23 = *((float *)this + 7);
  v2 = LODWORD(v23);
  if (v23 == 0.0)
    v2 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_36;
LABEL_3:
  v3 = *((float *)this + 8);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 1) == 0)
    goto LABEL_37;
LABEL_6:
  v5 = *((float *)this + 2);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_38;
LABEL_9:
  v7 = *((float *)this + 3);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((*((_WORD *)this + 26) & 0x100) == 0)
    goto LABEL_39;
LABEL_12:
  v9 = *((float *)this + 10);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((*((_WORD *)this + 26) & 0x200) == 0)
    goto LABEL_40;
LABEL_15:
  v11 = *((float *)this + 11);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 26) & 0x400) == 0)
    goto LABEL_41;
LABEL_18:
  v13 = *((float *)this + 12);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_42;
LABEL_21:
  v15 = *((float *)this + 9);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_43;
LABEL_24:
  v17 = *((float *)this + 5);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_27:
    v19 = *((float *)this + 4);
    v20 = LODWORD(v19);
    if (v19 == 0.0)
      v20 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_30;
LABEL_45:
    v22 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22;
  }
LABEL_44:
  v20 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_45;
LABEL_30:
  v21 = *((float *)this + 6);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(uint64_t this)
{
  *(_QWORD *)this = off_100351328;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351328;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::GnssAvailabilityPredictorData::~GnssAvailabilityPredictorData(CMMsl::GnssAvailabilityPredictorData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(CMMsl::GnssAvailabilityPredictorData *this, const CMMsl::GnssAvailabilityPredictorData *a2)
{
  char v2;
  char v3;
  double result;
  int v5;
  int v6;

  *(_QWORD *)this = off_100351328;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    v3 = 2;
    *((_BYTE *)this + 32) = 2;
    *((double *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 7) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((double *)a2 + 1);
    *((_BYTE *)this + 32) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 6) = v6;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::operator=(uint64_t a1, const CMMsl::GnssAvailabilityPredictorData *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::GnssAvailabilityPredictorData *)a1 != a2)
  {
    CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData((CMMsl::GnssAvailabilityPredictorData *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GnssAvailabilityPredictorData *a2, CMMsl::GnssAvailabilityPredictorData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100351328;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100351328;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void (**v8)(CMMsl::GnssAvailabilityPredictorData *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = off_100351328;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::formatText(CMMsl::GnssAvailabilityPredictorData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "measSource", *((_DWORD *)this + 6));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "stateProbability", *((double *)this + 1));
      if ((*((_BYTE *)this + 32) & 2) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 7));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GnssAvailabilityPredictorData::readFrom(CMMsl::GnssAvailabilityPredictorData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_43;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_59;
            case 2u:
              *((_BYTE *)this + 32) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_64;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    v2 = v35 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_63;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_64;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *((_DWORD *)this + 7) = v25;
              goto LABEL_70;
            case 3u:
              *((_BYTE *)this + 32) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_69;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    v2 = v39 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_68;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_69;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *((_DWORD *)this + 6) = v31;
LABEL_70:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *((_BYTE *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_59:
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_70;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  }
LABEL_8:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  return this;
}

BOOL CMMsl::GnssAvailabilityPredictorData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::hash_value(CMMsl::GnssAvailabilityPredictorData *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    v1 = *((double *)this + 2);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 7);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 6);
    if ((*((_BYTE *)this + 32) & 1) != 0)
      goto LABEL_5;
LABEL_13:
    v4 = 0.0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ *(_QWORD *)&v4;
  }
LABEL_12:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    goto LABEL_13;
LABEL_5:
  v4 = *((double *)this + 1);
  if (v4 == 0.0)
    v4 = 0.0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ *(_QWORD *)&v4;
}

double CMMsl::GnssLeechLocationData::GnssLeechLocationData(CMMsl::GnssLeechLocationData *this)
{
  double result;

  *(_QWORD *)this = off_100351360;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351360;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  return result;
}

void CMMsl::GnssLeechLocationData::~GnssLeechLocationData(CMMsl::GnssLeechLocationData *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_100351360;
  v2 = (void **)((char *)this + 24);
  v3 = (void **)((char *)this + 120);
  sub_1002394A8(&v3);
  v3 = (void **)((char *)this + 96);
  sub_1002394A8(&v3);
  v3 = (void **)((char *)this + 72);
  sub_1002394A8(&v3);
  v3 = (void **)((char *)this + 48);
  sub_1002394A8(&v3);
  v3 = v2;
  sub_1002394A8(&v3);
  PB::Base::~Base(this);
}

{
  CMMsl::GnssLeechLocationData::~GnssLeechLocationData(this);
  operator delete();
}

uint64_t CMMsl::GnssLeechLocationData::GnssLeechLocationData(uint64_t this, const CMMsl::GnssLeechLocationData *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_100351360;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_DWORD *)(this + 152) = 0;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_QWORD *)(this + 136) = 0;
  if ((*((_BYTE *)a2 + 152) & 4) != 0)
  {
    v2 = *((_QWORD *)a2 + 18);
    *(_BYTE *)(this + 152) = 4;
    *(_QWORD *)(this + 144) = v2;
  }
  if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 13))
    sub_1000D684C();
  if (*((_QWORD *)a2 + 9) != *((_QWORD *)a2 + 10))
    sub_1000D684C();
  if (*((_QWORD *)a2 + 15) != *((_QWORD *)a2 + 16))
    sub_1000D684C();
  if (*((_QWORD *)a2 + 6) != *((_QWORD *)a2 + 7))
    sub_1000D684C();
  if (*((_QWORD *)a2 + 3) != *((_QWORD *)a2 + 4))
    sub_1000D684C();
  v3 = *((_BYTE *)a2 + 152);
  if ((v3 & 2) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 152) |= 2u;
    *(_QWORD *)(this + 16) = v4;
    v3 = *((_BYTE *)a2 + 152);
  }
  if ((v3 & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 152) |= 1u;
    *(_QWORD *)(this + 8) = v5;
  }
  return this;
}

void sub_1000D684C()
{
  operator new();
}

void sub_1000D6980(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

CMMsl *CMMsl::GnssLeechLocationData::operator=(CMMsl *a1, const CMMsl::GnssLeechLocationData *a2)
{
  CMMsl::GnssLeechLocationData *v3;
  _BYTE v5[160];

  if (a1 != a2)
  {
    CMMsl::GnssLeechLocationData::GnssLeechLocationData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GnssLeechLocationData *)v5, v3);
    CMMsl::GnssLeechLocationData::~GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GnssLeechLocationData *a2, CMMsl::GnssLeechLocationData *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v4;
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v5;
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v6;
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v7;
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v9;
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v10;
  v11 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v11;
  v12 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v12;
  v13 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v13;
  v14 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v14;
  v15 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v15;
  v16 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v16;
  v17 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v17;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v18;
  v19 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v19;
  v20 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v20;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::GnssLeechLocationData::GnssLeechLocationData(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;

  *(_QWORD *)a1 = off_100351360;
  v4 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 120) = 0u;
  v6 = (_OWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 72) = 0u;
  v7 = (_OWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  sub_100239524((_QWORD *)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  sub_100239524((_QWORD *)(a1 + 72));
  *v7 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  sub_100239524((_QWORD *)(a1 + 120));
  *v6 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  sub_100239524(v4);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  sub_100239524((_QWORD *)(a1 + 24));
  *v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

CMMsl *CMMsl::GnssLeechLocationData::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GnssLeechLocationData *v3;
  _BYTE v5[160];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GnssLeechLocationData::GnssLeechLocationData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GnssLeechLocationData *)v5, v3);
    CMMsl::GnssLeechLocationData::~GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5);
  }
  return a1;
}

uint64_t CMMsl::GnssLeechLocationData::formatText(CMMsl::GnssLeechLocationData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 152);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "lifespan", *((double *)this + 1));
    v5 = *((_BYTE *)this + 152);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "machTime", *((double *)this + 2));
  v6 = (uint64_t *)*((_QWORD *)this + 3);
  v7 = (uint64_t *)*((_QWORD *)this + 4);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "satInfoBeidou");
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  v10 = (uint64_t *)*((_QWORD *)this + 7);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "satInfoGalileo");
  }
  v12 = (uint64_t *)*((_QWORD *)this + 9);
  v13 = (uint64_t *)*((_QWORD *)this + 10);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "satInfoGlonass");
  }
  v15 = (uint64_t *)*((_QWORD *)this + 12);
  v16 = (uint64_t *)*((_QWORD *)this + 13);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "satInfoGps");
  }
  v18 = (uint64_t *)*((_QWORD *)this + 15);
  v19 = (uint64_t *)*((_QWORD *)this + 16);
  while (v18 != v19)
  {
    v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, a2, "satInfoQzss");
  }
  if ((*((_BYTE *)this + 152) & 4) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 18));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GnssLeechLocationData::readFrom(CMMsl::GnssLeechLocationData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 152) |= 4u;
              v20 = *((_QWORD *)a2 + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_37;
              *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v20);
              goto LABEL_39;
            case 2u:
              sub_1000D7124();
            case 3u:
              sub_1000D7124();
            case 4u:
              sub_1000D7124();
            case 5u:
              sub_1000D7124();
            case 6u:
              sub_1000D7124();
            case 7u:
              *((_BYTE *)this + 152) |= 2u;
              v23 = *((_QWORD *)a2 + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_37;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v23);
              goto LABEL_39;
            case 8u:
              *((_BYTE *)this + 152) |= 1u;
              v21 = *((_QWORD *)a2 + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_37:
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v21);
LABEL_39:
                *((_QWORD *)a2 + 1) += 8;
              }
LABEL_40:
              v2 = *((_QWORD *)a2 + 1);
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((_BYTE *)a2 + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              goto LABEL_40;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

void sub_1000D7124()
{
  operator new();
}

void sub_1000D725C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GnssLeechLocationData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base **v10;
  const PB::Base **v11;
  const PB::Base *v12;
  const PB::Base **v13;
  const PB::Base **v14;
  const PB::Base *v15;
  const PB::Base **v16;
  const PB::Base **v17;
  const PB::Base *v18;
  char v19;

  v3 = this;
  if ((*(_BYTE *)(this + 152) & 4) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 144), 1u);
  v4 = *(const PB::Base ***)(v3 + 96);
  v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 2u);
  }
  v7 = *(const PB::Base ***)(v3 + 72);
  v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9, 3u);
  }
  v10 = *(const PB::Base ***)(v3 + 120);
  v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::writeSubmessage(a2, v12, 4u);
  }
  v13 = *(const PB::Base ***)(v3 + 48);
  v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    v15 = *v13++;
    this = PB::Writer::writeSubmessage(a2, v15, 5u);
  }
  v16 = *(const PB::Base ***)(v3 + 24);
  v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    v18 = *v16++;
    this = PB::Writer::writeSubmessage(a2, v18, 6u);
  }
  v19 = *(_BYTE *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 7u);
    v19 = *(_BYTE *)(v3 + 152);
  }
  if ((v19 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 8), 8u);
  return this;
}

BOOL CMMsl::GnssLeechLocationData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 152) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 152) & 4) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 152) & 4) != 0)
  {
    return 0;
  }
  result = sub_1000D7480((uint64_t *)(a1 + 96), a2 + 96);
  if (result)
  {
    result = sub_1000D7480((uint64_t *)(a1 + 72), a2 + 72);
    if (result)
    {
      result = sub_1000D7480((uint64_t *)(a1 + 120), a2 + 120);
      if (result)
      {
        result = sub_1000D7480((uint64_t *)(a1 + 48), a2 + 48);
        if (result)
        {
          result = sub_1000D7480((uint64_t *)(a1 + 24), a2 + 24);
          if (result)
          {
            if ((*(_BYTE *)(a1 + 152) & 2) != 0)
            {
              if ((*(_BYTE *)(a2 + 152) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
                return 0;
            }
            else if ((*(_BYTE *)(a2 + 152) & 2) != 0)
            {
              return 0;
            }
            result = (*(_BYTE *)(a2 + 152) & 1) == 0;
            if ((*(_BYTE *)(a1 + 152) & 1) == 0)
              return result;
            return (*(_BYTE *)(a2 + 152) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1000D7480(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::SatelliteInfo::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::GnssLeechLocationData::hash_value(CMMsl::GnssLeechLocationData *this)
{
  char v2;
  uint64_t v3;
  CMMsl::SatelliteInfo **v4;
  CMMsl::SatelliteInfo **v5;
  uint64_t v6;
  CMMsl::SatelliteInfo *v7;
  CMMsl::SatelliteInfo **v8;
  CMMsl::SatelliteInfo **v9;
  uint64_t v10;
  CMMsl::SatelliteInfo *v11;
  CMMsl::SatelliteInfo **v12;
  CMMsl::SatelliteInfo **v13;
  uint64_t v14;
  CMMsl::SatelliteInfo *v15;
  CMMsl::SatelliteInfo **v16;
  CMMsl::SatelliteInfo **v17;
  uint64_t v18;
  CMMsl::SatelliteInfo *v19;
  CMMsl::SatelliteInfo **v20;
  CMMsl::SatelliteInfo **v21;
  uint64_t v22;
  CMMsl::SatelliteInfo *v23;
  double v24;
  double v25;

  v2 = *((_BYTE *)this + 152);
  if ((v2 & 4) != 0)
  {
    if (*((double *)this + 18) == 0.0)
      v3 = 0;
    else
      v3 = *((_QWORD *)this + 18);
  }
  else
  {
    v3 = 0;
  }
  v4 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 12);
  v5 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 13);
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      v6 ^= CMMsl::SatelliteInfo::hash_value(v7);
    }
    while (v4 != v5);
  }
  v8 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 9);
  v9 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 10);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = *v8++;
      v10 ^= CMMsl::SatelliteInfo::hash_value(v11);
    }
    while (v8 != v9);
  }
  v12 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 15);
  v13 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 16);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12++;
      v14 ^= CMMsl::SatelliteInfo::hash_value(v15);
    }
    while (v12 != v13);
  }
  v16 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 6);
  v17 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 7);
  if (v16 == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *v16++;
      v18 ^= CMMsl::SatelliteInfo::hash_value(v19);
    }
    while (v16 != v17);
  }
  v20 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 3);
  v21 = (CMMsl::SatelliteInfo **)*((_QWORD *)this + 4);
  if (v20 == v21)
  {
    v22 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_30;
LABEL_35:
    v24 = *((double *)this + 2);
    if (v24 == 0.0)
      v24 = 0.0;
    if ((v2 & 1) != 0)
      goto LABEL_31;
LABEL_38:
    v25 = 0.0;
    return v6 ^ v3 ^ v10 ^ v14 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ v18 ^ v22;
  }
  v22 = 0;
  do
  {
    v23 = *v20++;
    v22 ^= CMMsl::SatelliteInfo::hash_value(v23);
  }
  while (v20 != v21);
  if ((v2 & 2) != 0)
    goto LABEL_35;
LABEL_30:
  v24 = 0.0;
  if ((v2 & 1) == 0)
    goto LABEL_38;
LABEL_31:
  v25 = *((double *)this + 1);
  if (v25 == 0.0)
    v25 = 0.0;
  return v6 ^ v3 ^ v10 ^ v14 ^ *(_QWORD *)&v24 ^ *(_QWORD *)&v25 ^ v18 ^ v22;
}

uint64_t CMMsl::GravityConstraints::GravityConstraints(uint64_t this)
{
  *(_QWORD *)this = off_100351398;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351398;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::GravityConstraints::~GravityConstraints(CMMsl::GravityConstraints *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::GravityConstraints::GravityConstraints(CMMsl::GravityConstraints *this, const CMMsl::GravityConstraints *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_100351398;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 7) = v4;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((_DWORD *)this + 5) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return *(float *)&v4;
      goto LABEL_12;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((_BYTE *)this + 32) = v3;
  *((_DWORD *)this + 4) = v4;
  if ((*((_BYTE *)a2 + 32) & 8) == 0)
    return *(float *)&v4;
LABEL_12:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 32) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::GravityConstraints::operator=(uint64_t a1, const CMMsl::GravityConstraints *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::GravityConstraints *)a1 != a2)
  {
    CMMsl::GravityConstraints::GravityConstraints((CMMsl::GravityConstraints *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GravityConstraints *a2, CMMsl::GravityConstraints *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GravityConstraints::GravityConstraints(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351398;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100351398;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::GravityConstraints::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_100351398;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GravityConstraints::formatText(CMMsl::GravityConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "gyroMaxMean", *((float *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "magnitudeDiffUnity", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "maxAccelStdAxis", *((float *)this + 7));
    if ((*((_BYTE *)this + 32) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "magnitudeVar", *((float *)this + 6));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GravityConstraints::readFrom(CMMsl::GravityConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_41;
        case 2u:
          *((_BYTE *)this + 32) |= 0x10u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 3u:
          *((_BYTE *)this + 32) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 4u:
          *((_BYTE *)this + 32) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_38;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_40;
        case 5u:
          *((_BYTE *)this + 32) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_40:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_41:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GravityConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  return this;
}

BOOL CMMsl::GravityConstraints::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 8) == 0;
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
    return (*(_BYTE *)(a2 + 32) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::GravityConstraints::hash_value(CMMsl::GravityConstraints *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_3;
LABEL_18:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_6;
LABEL_19:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_9;
    goto LABEL_20;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 32) & 0x10) == 0)
    goto LABEL_18;
LABEL_3:
  v2 = *((float *)this + 7);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_19;
LABEL_6:
  v4 = *((float *)this + 5);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_9:
    v6 = *((float *)this + 4);
    v7 = LODWORD(v6);
    if (v6 == 0.0)
      v7 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_12;
LABEL_21:
    v9 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9;
  }
LABEL_20:
  v7 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_21;
LABEL_12:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v9;
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t this)
{
  *(_QWORD *)this = off_1003513D0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003513D0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::GravityCorrection::~GravityCorrection(CMMsl::GravityCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003513D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003513D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003513D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t this, const CMMsl::GravityCorrection *a2)
{
  char v2;

  *(_QWORD *)this = off_1003513D0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v2 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) |= 1u;
    *(_BYTE *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::GravityCorrection::operator=(uint64_t a1, const CMMsl::GravityCorrection *a2)
{
  int v3;
  uint64_t v4;
  void (**v6)(CMMsl::GravityCorrection *__hidden);
  uint64_t v7;
  char v8;
  int v9;

  if ((const CMMsl::GravityCorrection *)a1 != a2)
  {
    CMMsl::GravityCorrection::GravityCorrection((uint64_t)&v6, a2);
    v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    v9 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v6 = off_1003513D0;
    v7 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::GravityCorrection *a2, CMMsl::GravityCorrection *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LOBYTE(v4) = *(_BYTE *)(this + 16);
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1003513D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1003513D0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GravityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    v9[0] = off_1003513D0;
    v9[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GravityCorrection::formatText(CMMsl::GravityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "isAvgGrav", *((_BYTE *)this + 16));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GravityCorrection::readFrom(CMMsl::GravityCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 >= *((_QWORD *)a2 + 2))
        {
          v24 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v22 = v21 + 1;
          v23 = *(unsigned __int8 *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) = v22;
          v24 = v23 != 0;
        }
        *((_BYTE *)this + 16) = v24;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GravityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::GravityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

unint64_t CMMsl::GravityCorrection::hash_value(CMMsl::GravityCorrection *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((unsigned __int8 *)this + 16);
  else
    v3 = 0;
  return v3 ^ v2;
}

uint64_t CMMsl::GravityCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

void CMMsl::Gyro::~Gyro(CMMsl::Gyro *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::Gyro::Gyro(uint64_t this, const CMMsl::Gyro *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  int v12;

  *(_QWORD *)this = off_100351408;
  *(_DWORD *)(this + 44) = 0;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 44) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 22);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 44) = v3;
    *(_DWORD *)(this + 28) = v5;
    v2 = *((_WORD *)a2 + 22);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 44) = v3;
    *(_DWORD *)(this + 32) = v6;
    v2 = *((_WORD *)a2 + 22);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v7;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 24) = v8;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 20) = v9;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *((_BYTE *)a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(this + 44) = v3;
  *(_BYTE *)(this + 40) = v10;
  v2 = *((_WORD *)a2 + 22);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      return this;
LABEL_20:
    v12 = *((_DWORD *)a2 + 4);
    *(_WORD *)(this + 44) = v3 | 2;
    *(_DWORD *)(this + 16) = v12;
    return this;
  }
LABEL_19:
  v11 = *((_BYTE *)a2 + 41);
  v3 |= 0x100u;
  *(_WORD *)(this + 44) = v3;
  *(_BYTE *)(this + 41) = v11;
  if ((*((_WORD *)a2 + 22) & 2) != 0)
    goto LABEL_20;
  return this;
}

uint64_t CMMsl::Gyro::operator=(uint64_t a1, const CMMsl::Gyro *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  int v19;

  if ((const CMMsl::Gyro *)a1 != a2)
  {
    CMMsl::Gyro::Gyro((uint64_t)&v11, a2);
    v3 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = v15;
    v15 = v3;
    v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    v16 = v4;
    v5 = v13;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v5;
    v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    v19 = v8;
    v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v14;
    v14 = v9;
    LOBYTE(v9) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v17;
    v17 = v9;
    LOBYTE(v9) = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = v18;
    v18 = v9;
    v12 = v6;
    v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Gyro *a2, CMMsl::Gyro *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;
  int v7;
  int v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 41);
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v7;
  v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::Gyro::Gyro(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351408;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100351408;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Gyro::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  int v21;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_DWORD *)(a2 + 36);
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_BYTE *)(a2 + 40);
    v7 = *(_BYTE *)(a2 + 41);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
    v17 = v10;
    LODWORD(v10) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v4;
    v15[0] = off_100351408;
    v21 = *(_DWORD *)(a1 + 44);
    v18 = v10;
    v16 = *(_DWORD *)(a1 + 24);
    v11 = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = v6;
    v19 = v11;
    v12 = *(_BYTE *)(a1 + 41);
    *(_BYTE *)(a1 + 41) = v7;
    v20 = v12;
    v13 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 16) = v13;
    v15[1] = v8;
    v15[2] = v9;
    PB::Base::~Base((PB::Base *)v15);
  }
  return a1;
}

uint64_t CMMsl::Gyro::formatText(CMMsl::Gyro *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 22);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 4));
    v5 = *((_WORD *)this + 22);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleNumMod3", *((_DWORD *)this + 5));
  v5 = *((_WORD *)this + 22);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "subType", *((_DWORD *)this + 6));
  v5 = *((_WORD *)this + 22);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_WORD *)this + 22);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "triggerEnabled", *((_BYTE *)this + 40));
  v5 = *((_WORD *)this + 22);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "triggerOn", *((_BYTE *)this + 41));
  v5 = *((_WORD *)this + 22);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(a2, "y", *((float *)this + 8));
    if ((*((_WORD *)this + 22) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "x", *((float *)this + 7));
  v5 = *((_WORD *)this + 22);
  if ((v5 & 0x20) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x40) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "z", *((float *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Gyro::readFrom(CMMsl::Gyro *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 22) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_88;
            case 2u:
              *((_WORD *)this + 22) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_87;
            case 3u:
              *((_WORD *)this + 22) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_87;
            case 4u:
              *((_WORD *)this + 22) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_87:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_88:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *((_WORD *)this + 22) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v45 = v21++;
                  v46 = *(_BYTE *)(v22 + v45);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    v2 = v45 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_92;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_93;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_104;
            case 6u:
              *((_WORD *)this + 22) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v49 = v27++;
                  v50 = *(_BYTE *)(v28 + v49);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_97:
                    v2 = v49 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_97;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_98;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_104;
            case 7u:
              *((_WORD *)this + 22) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 40) = v34;
              goto LABEL_104;
            case 8u:
              *((_WORD *)this + 22) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v36 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v36 = v35 != 0;
              }
              *((_BYTE *)this + 41) = v36;
              goto LABEL_104;
            case 9u:
              *((_WORD *)this + 22) |= 2u;
              v37 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v38 = *(_QWORD *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v53 = v37++;
                  v54 = *(_BYTE *)(v38 + v53);
                  *((_QWORD *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_102:
                    v2 = v53 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v41) = 0;
                goto LABEL_102;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)a2 + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_103;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_103:
              *((_DWORD *)this + 4) = v41;
LABEL_104:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Gyro::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 4u);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 6u);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 7u);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 9u);
  }
LABEL_18:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 41), 8u);
  if ((*(_WORD *)(v3 + 44) & 2) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 9u);
  return this;
}

uint64_t CMMsl::Gyro::hash_value(CMMsl::Gyro *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *((_WORD *)this + 22);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_3;
LABEL_20:
    v4 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_6;
LABEL_21:
    v6 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_9;
LABEL_22:
    v8 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_12;
    goto LABEL_23;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_20;
LABEL_3:
  v3 = *((float *)this + 7);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_21;
LABEL_6:
  v5 = *((float *)this + 8);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_22;
LABEL_9:
  v7 = *((float *)this + 9);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_12:
    v9 = *((unsigned int *)this + 6);
    if ((v1 & 4) != 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_13:
    v10 = *((unsigned int *)this + 5);
    if ((v1 & 0x80) != 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    v11 = *((unsigned __int8 *)this + 40);
    if ((*((_WORD *)this + 22) & 0x100) != 0)
      goto LABEL_15;
LABEL_26:
    v12 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_16;
LABEL_27:
    v13 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_25:
  v11 = 0;
  if ((*((_WORD *)this + 22) & 0x100) == 0)
    goto LABEL_26;
LABEL_15:
  v12 = *((unsigned __int8 *)this + 41);
  if ((v1 & 2) == 0)
    goto LABEL_27;
LABEL_16:
  v13 = *((int *)this + 4);
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

uint64_t CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t this)
{
  *(_QWORD *)this = off_100351440;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351440;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::GyroBiasAndVariance::~GyroBiasAndVariance(CMMsl::GyroBiasAndVariance *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t this, const CMMsl::GyroBiasAndVariance *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  *(_QWORD *)this = off_100351440;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 36) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 12) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 16) = v6;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 24) = v7;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x20u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 28) = v8;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return this;
LABEL_16:
    v10 = *((_DWORD *)a2 + 5);
    *(_BYTE *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 20) = v10;
    return this;
  }
LABEL_15:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x40u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 32) = v9;
  if ((*((_BYTE *)a2 + 36) & 8) != 0)
    goto LABEL_16;
  return this;
}

uint64_t CMMsl::GyroBiasAndVariance::operator=(uint64_t a1, const CMMsl::GyroBiasAndVariance *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE v10[8];
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if ((const CMMsl::GyroBiasAndVariance *)a1 != a2)
  {
    CMMsl::GyroBiasAndVariance::GyroBiasAndVariance((uint64_t)v10, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v11;
    v11 = v4;
    v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v12;
    v12 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v14;
    v14 = v6;
    v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v15;
    v15 = v7;
    v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    v13 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasAndVariance *a2, CMMsl::GyroBiasAndVariance *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;
  int v10;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  return result;
}

float CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351440;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100351440;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::GyroBiasAndVariance::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD v13[2];
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  if (a1 != a2)
  {
    v13[0] = off_100351440;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 32);
    v6 = *(_DWORD *)(a2 + 20);
    v18 = *(_DWORD *)(a1 + 36);
    v7 = *(_QWORD *)(a2 + 8);
    v13[1] = *(_QWORD *)(a1 + 8);
    v14 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 36) = v3;
    *(_QWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v9;
    v16 = v8;
    v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v5;
    v17 = v10;
    v11 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v6;
    v15 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasAndVariance::formatText(CMMsl::GyroBiasAndVariance *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "biasX", *((float *)this + 2));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 3));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 4));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "doingBiasEstimation", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(a2, "varianceY", *((float *)this + 7));
    if ((*((_BYTE *)this + 36) & 0x40) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "varianceX", *((float *)this + 6));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(a2, "varianceZ", *((float *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroBiasAndVariance::readFrom(CMMsl::GyroBiasAndVariance *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 36) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_57;
            case 2u:
              *((_BYTE *)this + 36) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_57;
            case 3u:
              *((_BYTE *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_57;
            case 4u:
              *((_BYTE *)this + 36) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_57;
            case 5u:
              *((_BYTE *)this + 36) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_41;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_57;
            case 6u:
              *((_BYTE *)this + 36) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_57:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_41:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_63;
            case 7u:
              *((_BYTE *)this + 36) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_62;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_61:
                    v2 = v29 + 1;
                    goto LABEL_62;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_61;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_62;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_62:
              *((_DWORD *)this + 5) = v25;
LABEL_63:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_63;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasAndVariance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 5u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 7u);
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 6u);
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 7u);
  return this;
}

BOOL CMMsl::GyroBiasAndVariance::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x40) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 8) == 0;
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
    return (*(_BYTE *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return v2;
}

uint64_t CMMsl::GyroBiasAndVariance::hash_value(CMMsl::GyroBiasAndVariance *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;

  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_3;
LABEL_22:
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_6;
LABEL_23:
    v5 = 0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_9;
LABEL_24:
    v7 = 0;
    if ((*((_BYTE *)this + 36) & 0x20) != 0)
      goto LABEL_12;
LABEL_25:
    v9 = 0;
    if ((*((_BYTE *)this + 36) & 0x40) != 0)
      goto LABEL_15;
    goto LABEL_26;
  }
  v13 = *((float *)this + 2);
  v1 = LODWORD(v13);
  if (v13 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 36) & 2) == 0)
    goto LABEL_22;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 36) & 4) == 0)
    goto LABEL_23;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_24;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 36) & 0x20) == 0)
    goto LABEL_25;
LABEL_12:
  v8 = *((float *)this + 7);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 36) & 0x40) != 0)
  {
LABEL_15:
    v10 = *((float *)this + 8);
    v11 = LODWORD(v10);
    if (v10 == 0.0)
      v11 = 0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_18;
LABEL_27:
    v12 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12;
  }
LABEL_26:
  v11 = 0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_27;
LABEL_18:
  v12 = *((int *)this + 5);
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12;
}

double CMMsl::GyroBiasConstraints::GyroBiasConstraints(CMMsl::GyroBiasConstraints *this)
{
  double result;

  *(_QWORD *)this = off_100351478;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351478;
  *((_DWORD *)this + 29) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::GyroBiasConstraints::~GyroBiasConstraints(CMMsl::GyroBiasConstraints *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_100351478;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::GyroBiasConstraints::~GyroBiasConstraints(this);
  operator delete();
}

CMMsl::GyroBiasConstraints *CMMsl::GyroBiasConstraints::GyroBiasConstraints(CMMsl::GyroBiasConstraints *this, const CMMsl::GyroBiasConstraints *a2)
{
  char *v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;

  *(_QWORD *)this = off_100351478;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v6 = *((_BYTE *)a2 + 116);
  if ((v6 & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 13);
    v7 = 1;
    *((_BYTE *)this + 116) = 1;
    *((_QWORD *)this + 13) = v8;
    v6 = *((_BYTE *)a2 + 116);
    if ((v6 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if ((*((_BYTE *)a2 + 116) & 4) != 0)
  {
LABEL_5:
    v9 = *((_BYTE *)a2 + 113);
    v7 |= 4u;
    *((_BYTE *)this + 116) = v7;
    *((_BYTE *)this + 113) = v9;
    v6 = *((_BYTE *)a2 + 116);
  }
LABEL_6:
  if ((v6 & 2) != 0)
  {
    v10 = *((_BYTE *)a2 + 112);
    *((_BYTE *)this + 116) = v7 | 2;
    *((_BYTE *)this + 112) = v10;
  }
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    sub_100020CE4((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::GyroBiasConstraints::operator=(CMMsl *a1, const CMMsl::GyroBiasConstraints *a2)
{
  CMMsl::GyroBiasConstraints *v3;
  _BYTE v5[120];

  if (a1 != a2)
  {
    CMMsl::GyroBiasConstraints::GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasConstraints *)v5, v3);
    CMMsl::GyroBiasConstraints::~GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GyroBiasConstraints *a2, CMMsl::GyroBiasConstraints *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  result = *((double *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((double *)a2 + 13) = result;
  LOBYTE(v3) = *((_BYTE *)this + 113);
  *((_BYTE *)this + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a2 + 113) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 112);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a2 + 112) = v3;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v8;
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v11;
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v12;
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v13;
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v14;
  v15 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v15;
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v16;
  return result;
}

uint64_t CMMsl::GyroBiasConstraints::GyroBiasConstraints(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100351478;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  sub_100239458(a1 + 80, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

CMMsl *CMMsl::GyroBiasConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GyroBiasConstraints *v3;
  _BYTE v5[120];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroBiasConstraints::GyroBiasConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasConstraints *)v5, v3);
    CMMsl::GyroBiasConstraints::~GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasConstraints::formatText(CMMsl::GyroBiasConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "accelVariance", v7);
  }
  if ((*((_BYTE *)this + 116) & 2) != 0)
    PB::TextFormatter::format(a2, "allowRelaxedGyroMean", *((_BYTE *)this + 112));
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "gyroMean", v10);
  }
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "gyroVariance", v13);
  }
  if ((*((_BYTE *)this + 116) & 4) != 0)
    PB::TextFormatter::format(a2, "stillOnAll", *((_BYTE *)this + 113));
  v14 = (float *)*((_QWORD *)this + 10);
  v15 = (float *)*((_QWORD *)this + 11);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "temperatureBias", v16);
  }
  if ((*((_BYTE *)this + 116) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasConstraints::readFrom(CMMsl::GyroBiasConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  unint64_t v132;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  _BYTE v138[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (void **)((char *)this + 80);
    v136 = (char *)this + 96;
    v137 = (char *)this + 24;
    v10 = (void **)((char *)this + 56);
    v11 = (void **)((char *)this + 32);
    v134 = (char *)this + 48;
    v135 = (char *)this + 72;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 116) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_204;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_206;
        case 2u:
          *((_BYTE *)this + 116) |= 4u;
          v27 = *((_QWORD *)a2 + 1);
          if (v27 >= *((_QWORD *)a2 + 2))
          {
            v30 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v28 = v27 + 1;
            v29 = *(unsigned __int8 *)(*(_QWORD *)a2 + v27);
            *((_QWORD *)a2 + 1) = v28;
            v30 = v29 != 0;
          }
          *((_BYTE *)this + 113) = v30;
          goto LABEL_207;
        case 3u:
          *((_BYTE *)this + 116) |= 2u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 >= *((_QWORD *)a2 + 2))
          {
            v34 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v32 = v31 + 1;
            v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v31);
            *((_QWORD *)a2 + 1) = v32;
            v34 = v33 != 0;
          }
          *((_BYTE *)this + 112) = v34;
          goto LABEL_207;
        case 4u:
          if (v24 != 2)
          {
            v92 = (char *)*((_QWORD *)this + 5);
            v91 = *((_QWORD *)this + 6);
            if ((unint64_t)v92 >= v91)
            {
              v100 = (char *)*v11;
              v101 = (v92 - (_BYTE *)*v11) >> 2;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 62)
LABEL_215:
                sub_10000D5F8();
              v103 = v91 - (_QWORD)v100;
              if (v103 >> 1 > v102)
                v102 = v103 >> 1;
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                v104 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v104 = v102;
              if (v104)
              {
                v105 = (char *)sub_100020E2C((uint64_t)v134, v104);
                v100 = (char *)*((_QWORD *)this + 4);
                v92 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v105 = 0;
              }
              v124 = &v105[4 * v101];
              *(_DWORD *)v124 = 0;
              v93 = v124 + 4;
              while (v92 != v100)
              {
                v125 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v124 - 1) = v125;
                v124 -= 4;
              }
              *((_QWORD *)this + 4) = v124;
              *((_QWORD *)this + 5) = v93;
              *((_QWORD *)this + 6) = &v105[4 * v104];
              if (v100)
                operator delete(v100);
            }
            else
            {
              *(_DWORD *)v92 = 0;
              v93 = v92 + 4;
            }
            *((_QWORD *)this + 5) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark(a2, v138) & 1) != 0)
            return 0;
          v35 = *((_QWORD *)a2 + 1);
          v36 = *((_QWORD *)a2 + 2);
          while (v35 < v36 && !*((_BYTE *)a2 + 24))
          {
            v38 = (char *)*((_QWORD *)this + 5);
            v37 = *((_QWORD *)this + 6);
            if ((unint64_t)v38 >= v37)
            {
              v40 = (char *)*v11;
              v41 = (v38 - (_BYTE *)*v11) >> 2;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62)
                goto LABEL_215;
              v43 = v37 - (_QWORD)v40;
              if (v43 >> 1 > v42)
                v42 = v43 >> 1;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                v44 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44)
              {
                v45 = (char *)sub_100020E2C((uint64_t)v134, v44);
                v40 = (char *)*((_QWORD *)this + 4);
                v38 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[4 * v41];
              *(_DWORD *)v46 = 0;
              v39 = v46 + 4;
              while (v38 != v40)
              {
                v47 = *((_DWORD *)v38 - 1);
                v38 -= 4;
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              *((_QWORD *)this + 4) = v46;
              *((_QWORD *)this + 5) = v39;
              *((_QWORD *)this + 6) = &v45[4 * v44];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_DWORD *)v38 = 0;
              v39 = v38 + 4;
            }
            *((_QWORD *)this + 5) = v39;
            v48 = *((_QWORD *)a2 + 1);
            if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_128;
            *(v39 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v48);
            v36 = *((_QWORD *)a2 + 2);
            v35 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v35;
          }
          goto LABEL_129;
        case 5u:
          if (v24 != 2)
          {
            v95 = (char *)*((_QWORD *)this + 8);
            v94 = *((_QWORD *)this + 9);
            if ((unint64_t)v95 >= v94)
            {
              v106 = (char *)*v10;
              v107 = (v95 - (_BYTE *)*v10) >> 2;
              v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62)
LABEL_216:
                sub_10000D5F8();
              v109 = v94 - (_QWORD)v106;
              if (v109 >> 1 > v108)
                v108 = v109 >> 1;
              if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
                v110 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v110 = v108;
              if (v110)
              {
                v111 = (char *)sub_100020E2C((uint64_t)v135, v110);
                v106 = (char *)*((_QWORD *)this + 7);
                v95 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v111 = 0;
              }
              v126 = &v111[4 * v107];
              *(_DWORD *)v126 = 0;
              v93 = v126 + 4;
              while (v95 != v106)
              {
                v127 = *((_DWORD *)v95 - 1);
                v95 -= 4;
                *((_DWORD *)v126 - 1) = v127;
                v126 -= 4;
              }
              *((_QWORD *)this + 7) = v126;
              *((_QWORD *)this + 8) = v93;
              *((_QWORD *)this + 9) = &v111[4 * v110];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *(_DWORD *)v95 = 0;
              v93 = v95 + 4;
            }
            *((_QWORD *)this + 8) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark(a2, v138) & 1) != 0)
            return 0;
          v49 = *((_QWORD *)a2 + 1);
          v50 = *((_QWORD *)a2 + 2);
          while (v49 < v50 && !*((_BYTE *)a2 + 24))
          {
            v52 = (char *)*((_QWORD *)this + 8);
            v51 = *((_QWORD *)this + 9);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v10;
              v55 = (v52 - (_BYTE *)*v10) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
                goto LABEL_216;
              v57 = v51 - (_QWORD)v54;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)sub_100020E2C((uint64_t)v135, v58);
                v54 = (char *)*((_QWORD *)this + 7);
                v52 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *((_QWORD *)this + 7) = v60;
              *((_QWORD *)this + 8) = v53;
              *((_QWORD *)this + 9) = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *((_QWORD *)this + 8) = v53;
            v62 = *((_QWORD *)a2 + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_128;
            *(v53 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v62);
            v50 = *((_QWORD *)a2 + 2);
            v49 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v49;
          }
          goto LABEL_129;
        case 6u:
          if (v24 != 2)
          {
            v97 = (char *)*((_QWORD *)this + 11);
            v96 = *((_QWORD *)this + 12);
            if ((unint64_t)v97 >= v96)
            {
              v112 = (char *)*v9;
              v113 = (v97 - (_BYTE *)*v9) >> 2;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 62)
LABEL_217:
                sub_10000D5F8();
              v115 = v96 - (_QWORD)v112;
              if (v115 >> 1 > v114)
                v114 = v115 >> 1;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                v116 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              if (v116)
              {
                v117 = (char *)sub_100020E2C((uint64_t)v136, v116);
                v112 = (char *)*((_QWORD *)this + 10);
                v97 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v117 = 0;
              }
              v128 = &v117[4 * v113];
              *(_DWORD *)v128 = 0;
              v93 = v128 + 4;
              while (v97 != v112)
              {
                v129 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }
              *((_QWORD *)this + 10) = v128;
              *((_QWORD *)this + 11) = v93;
              *((_QWORD *)this + 12) = &v117[4 * v116];
              if (v112)
                operator delete(v112);
            }
            else
            {
              *(_DWORD *)v97 = 0;
              v93 = v97 + 4;
            }
            *((_QWORD *)this + 11) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark(a2, v138) & 1) != 0)
            return 0;
          v63 = *((_QWORD *)a2 + 1);
          v64 = *((_QWORD *)a2 + 2);
          while (v63 < v64 && !*((_BYTE *)a2 + 24))
          {
            v66 = (char *)*((_QWORD *)this + 11);
            v65 = *((_QWORD *)this + 12);
            if ((unint64_t)v66 >= v65)
            {
              v68 = (char *)*v9;
              v69 = (v66 - (_BYTE *)*v9) >> 2;
              v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 62)
                goto LABEL_217;
              v71 = v65 - (_QWORD)v68;
              if (v71 >> 1 > v70)
                v70 = v71 >> 1;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                v72 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v72 = v70;
              if (v72)
              {
                v73 = (char *)sub_100020E2C((uint64_t)v136, v72);
                v68 = (char *)*((_QWORD *)this + 10);
                v66 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v73 = 0;
              }
              v74 = &v73[4 * v69];
              *(_DWORD *)v74 = 0;
              v67 = v74 + 4;
              while (v66 != v68)
              {
                v75 = *((_DWORD *)v66 - 1);
                v66 -= 4;
                *((_DWORD *)v74 - 1) = v75;
                v74 -= 4;
              }
              *((_QWORD *)this + 10) = v74;
              *((_QWORD *)this + 11) = v67;
              *((_QWORD *)this + 12) = &v73[4 * v72];
              if (v68)
                operator delete(v68);
            }
            else
            {
              *(_DWORD *)v66 = 0;
              v67 = v66 + 4;
            }
            *((_QWORD *)this + 11) = v67;
            v76 = *((_QWORD *)a2 + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_128;
            *(v67 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v76);
            v64 = *((_QWORD *)a2 + 2);
            v63 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v63;
          }
          goto LABEL_129;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v138) & 1) != 0)
              return 0;
            v77 = *((_QWORD *)a2 + 1);
            v78 = *((_QWORD *)a2 + 2);
            while (v77 < v78 && !*((_BYTE *)a2 + 24))
            {
              v80 = (char *)*((_QWORD *)this + 2);
              v79 = *((_QWORD *)this + 3);
              if ((unint64_t)v80 >= v79)
              {
                v82 = (char *)*v8;
                v83 = (v80 - (_BYTE *)*v8) >> 2;
                v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 62)
                  goto LABEL_218;
                v85 = v79 - (_QWORD)v82;
                if (v85 >> 1 > v84)
                  v84 = v85 >> 1;
                if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
                  v86 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v86 = v84;
                if (v86)
                {
                  v87 = (char *)sub_100020E2C((uint64_t)v137, v86);
                  v82 = (char *)*((_QWORD *)this + 1);
                  v80 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v87 = 0;
                }
                v88 = &v87[4 * v83];
                *(_DWORD *)v88 = 0;
                v81 = v88 + 4;
                while (v80 != v82)
                {
                  v89 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *((_DWORD *)v88 - 1) = v89;
                  v88 -= 4;
                }
                *((_QWORD *)this + 1) = v88;
                *((_QWORD *)this + 2) = v81;
                *((_QWORD *)this + 3) = &v87[4 * v86];
                if (v82)
                  operator delete(v82);
              }
              else
              {
                *(_DWORD *)v80 = 0;
                v81 = v80 + 4;
              }
              *((_QWORD *)this + 2) = v81;
              v90 = *((_QWORD *)a2 + 1);
              if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_128:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v81 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v90);
              v78 = *((_QWORD *)a2 + 2);
              v77 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v77;
            }
LABEL_129:
            PB::Reader::recallMark(a2, v138);
          }
          else
          {
            v99 = (char *)*((_QWORD *)this + 2);
            v98 = *((_QWORD *)this + 3);
            if ((unint64_t)v99 >= v98)
            {
              v118 = (char *)*v8;
              v119 = (v99 - (_BYTE *)*v8) >> 2;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 62)
LABEL_218:
                sub_10000D5F8();
              v121 = v98 - (_QWORD)v118;
              if (v121 >> 1 > v120)
                v120 = v121 >> 1;
              if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                v122 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v122 = v120;
              if (v122)
              {
                v123 = (char *)sub_100020E2C((uint64_t)v137, v122);
                v118 = (char *)*((_QWORD *)this + 1);
                v99 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v123 = 0;
              }
              v130 = &v123[4 * v119];
              *(_DWORD *)v130 = 0;
              v93 = v130 + 4;
              while (v99 != v118)
              {
                v131 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }
              *((_QWORD *)this + 1) = v130;
              *((_QWORD *)this + 2) = v93;
              *((_QWORD *)this + 3) = &v123[4 * v122];
              if (v118)
                operator delete(v118);
            }
            else
            {
              *(_DWORD *)v99 = 0;
              v93 = v99 + 4;
            }
            *((_QWORD *)this + 2) = v93;
LABEL_202:
            v132 = *((_QWORD *)a2 + 1);
            if (v132 <= 0xFFFFFFFFFFFFFFFBLL && v132 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v93 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v132);
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_206:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_204:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_207:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_207;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  v3 = this;
  v4 = *(_BYTE *)(this + 116);
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(this + 116) & 4) == 0)
      goto LABEL_3;
LABEL_19:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 113), 2u);
    if ((*(_BYTE *)(v3 + 116) & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  this = PB::Writer::write(a2, *(double *)(this + 104), 1u);
  v4 = *(_BYTE *)(v3 + 116);
  if ((v4 & 4) != 0)
    goto LABEL_19;
LABEL_3:
  if ((v4 & 2) != 0)
LABEL_4:
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 112), 3u);
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  v11 = *(float **)(v3 + 80);
  v12 = *(float **)(v3 + 88);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 6u);
  }
  v15 = *(float **)(v3 + 8);
  v14 = *(float **)(v3 + 16);
  while (v15 != v14)
  {
    v16 = *v15++;
    this = PB::Writer::write(a2, v16, 7u);
  }
  return this;
}

BOOL CMMsl::GyroBiasConstraints::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  _BOOL8 result;
  BOOL v17;

  if ((*(_BYTE *)(a1 + 116) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 4) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 116) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 116) & 2) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 116) & 2) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 56);
  v5 = *(float **)(a1 + 64);
  v7 = *(float **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 64) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 80);
  v8 = *(float **)(a1 + 88);
  v10 = *(float **)(a2 + 80);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 88) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = *(float **)(a2 + 8);
  if (v11 - v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v13)
    return 0;
  if (v12 == v11)
    return 1;
  v14 = v12 + 4;
  do
  {
    v15 = *v13++;
    result = *(float *)(v14 - 4) == v15;
    v17 = *(float *)(v14 - 4) != v15 || v14 == v11;
    v14 += 4;
  }
  while (!v17);
  return result;
}

uint64_t CMMsl::GyroBiasConstraints::hash_value(CMMsl::GyroBiasConstraints *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 116) & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_BYTE *)this + 116) & 4) != 0)
      goto LABEL_3;
LABEL_8:
    v3 = 0;
    if ((*((_BYTE *)this + 116) & 2) != 0)
      goto LABEL_4;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v2 = *((double *)this + 13);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_BYTE *)this + 116) & 4) == 0)
    goto LABEL_8;
LABEL_3:
  v3 = *((unsigned __int8 *)this + 113);
  if ((*((_BYTE *)this + 116) & 2) == 0)
    goto LABEL_9;
LABEL_4:
  v4 = *((unsigned __int8 *)this + 112);
LABEL_10:
  v5 = v3 ^ *(_QWORD *)&v2 ^ v4 ^ PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v6 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v7 = v5 ^ v6 ^ PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  return v7 ^ PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t this)
{
  *(_QWORD *)this = off_1003514B0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003514B0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::GyroBiasCorrection::~GyroBiasCorrection(CMMsl::GyroBiasCorrection *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003514B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003514B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1003514B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t this, const CMMsl::GyroBiasCorrection *a2)
{
  int v2;

  *(_QWORD *)this = off_1003514B0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 4);
    *(_BYTE *)(this + 20) |= 1u;
    *(_DWORD *)(this + 16) = v2;
  }
  return this;
}

const CMMsl::GyroBiasCorrection *CMMsl::GyroBiasCorrection::operator=(const CMMsl::GyroBiasCorrection *a1, const CMMsl::GyroBiasCorrection *a2)
{
  uint64_t v3;
  uint64_t v4;
  void (**v6)(CMMsl::GyroBiasCorrection *__hidden);
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    CMMsl::GyroBiasCorrection::GyroBiasCorrection((uint64_t)&v6, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v7;
    v4 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v8;
    v8 = v4;
    v6 = off_1003514B0;
    v7 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::GyroBiasCorrection *a2, CMMsl::GyroBiasCorrection *a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1003514B0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1003514B0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GyroBiasCorrection::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    v8[2] = v6;
    v8[0] = off_1003514B0;
    v8[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasCorrection::formatText(CMMsl::GyroBiasCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    PB::TextFormatter::format(a2, "axis", *((_DWORD *)this + 4));
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "correction");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroBiasCorrection::readFrom(CMMsl::GyroBiasCorrection *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v26;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::GyroBiasCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 20) & 1) == 0;
  if ((*(_BYTE *)(a1 + 20) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

unint64_t CMMsl::GyroBiasCorrection::hash_value(CMMsl::GyroBiasCorrection *this)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  if ((*((_BYTE *)this + 20) & 1) != 0)
    v3 = *((int *)this + 4);
  else
    v3 = 0;
  return v3 ^ v2;
}

uint64_t CMMsl::GyroBiasCorrection::makeCorrection(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

double CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this)
{
  double result;

  *(_QWORD *)this = off_1003514E8;
  *((_DWORD *)this + 23) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003514E8;
  *((_DWORD *)this + 23) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_1003514E8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError(this);
  operator delete();
}

CMMsl::GyroBiasEstimateError *CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this, const CMMsl::GyroBiasEstimateError *a2)
{
  char *v4;
  uint64_t v5;
  int v6;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = off_1003514E8;
  *((_DWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if ((*((_BYTE *)a2 + 92) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 10);
    *((_BYTE *)this + 92) = 1;
    *((_QWORD *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  }
  if ((*((_BYTE *)a2 + 92) & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 22);
    *((_BYTE *)this + 92) |= 2u;
    *((_DWORD *)this + 22) = v6;
  }
  return this;
}

CMMsl *CMMsl::GyroBiasEstimateError::operator=(CMMsl *a1, const CMMsl::GyroBiasEstimateError *a2)
{
  CMMsl::GyroBiasEstimateError *v3;
  _BYTE v5[96];

  if (a1 != a2)
  {
    CMMsl::GyroBiasEstimateError::GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasEstimateError *)v5, v3);
    CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasEstimateError *a2, CMMsl::GyroBiasEstimateError *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v7;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v12;
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
  result = *((float *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((float *)a2 + 22) = result;
  return result;
}

uint64_t CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1003514E8;
  v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(v5, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::GyroBiasEstimateError::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::GyroBiasEstimateError *v3;
  _BYTE v5[96];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroBiasEstimateError::GyroBiasEstimateError((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasEstimateError *)v5, v3);
    CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasEstimateError::formatText(CMMsl::GyroBiasEstimateError *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "dynamicBiasEstimate", v7);
  }
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "estimateErrorMetric", v10);
  }
  if ((*((_BYTE *)this + 92) & 2) != 0)
    PB::TextFormatter::format(a2, "rawGyroTemperature", *((float *)this + 22));
  v11 = (float *)*((_QWORD *)this + 7);
  v12 = (float *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "subFitError", v13);
  }
  if ((*((_BYTE *)this + 92) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasEstimateError::readFrom(CMMsl::GyroBiasEstimateError *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  int v96;
  char *v97;
  int v98;
  char *v99;
  int v100;
  unint64_t v101;
  char *v103;
  char *v104;
  _BYTE v105[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 56);
    v9 = (void **)((char *)this + 32);
    v103 = (char *)this + 48;
    v104 = (char *)this + 72;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 92) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_158;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_161;
        case 2u:
          if (v24 != 2)
          {
            v71 = (char *)*((_QWORD *)this + 2);
            v70 = *((_QWORD *)this + 3);
            if ((unint64_t)v71 >= v70)
            {
              v77 = (char *)*v10;
              v78 = (v71 - (_BYTE *)*v10) >> 2;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 62)
LABEL_170:
                sub_10000D5F8();
              v80 = v70 - (_QWORD)v77;
              if (v80 >> 1 > v79)
                v79 = v80 >> 1;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                v81 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)sub_100020E2C((uint64_t)v11, v81);
                v77 = (char *)*((_QWORD *)this + 1);
                v71 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v82 = 0;
              }
              v95 = &v82[4 * v78];
              *(_DWORD *)v95 = 0;
              v72 = v95 + 4;
              while (v71 != v77)
              {
                v96 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *((_DWORD *)v95 - 1) = v96;
                v95 -= 4;
              }
              *((_QWORD *)this + 1) = v95;
              *((_QWORD *)this + 2) = v72;
              *((_QWORD *)this + 3) = &v82[4 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_DWORD *)v71 = 0;
              v72 = v71 + 4;
            }
            *((_QWORD *)this + 2) = v72;
            goto LABEL_156;
          }
          if ((PB::Reader::placeMark(a2, v105) & 1) != 0)
            return 0;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          while (v27 < v28 && !*((_BYTE *)a2 + 24))
          {
            v30 = (char *)*((_QWORD *)this + 2);
            v29 = *((_QWORD *)this + 3);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_170;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_100020E2C((uint64_t)v11, v36);
                v32 = (char *)*((_QWORD *)this + 1);
                v30 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((_QWORD *)this + 1) = v38;
              *((_QWORD *)this + 2) = v31;
              *((_QWORD *)this + 3) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *((_QWORD *)this + 2) = v31;
            v40 = *((_QWORD *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_109;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v40);
            v28 = *((_QWORD *)a2 + 2);
            v27 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v27;
          }
          goto LABEL_110;
        case 3u:
          if (v24 != 2)
          {
            v74 = (char *)*((_QWORD *)this + 5);
            v73 = *((_QWORD *)this + 6);
            if ((unint64_t)v74 >= v73)
            {
              v83 = (char *)*v9;
              v84 = (v74 - (_BYTE *)*v9) >> 2;
              v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 62)
LABEL_171:
                sub_10000D5F8();
              v86 = v73 - (_QWORD)v83;
              if (v86 >> 1 > v85)
                v85 = v86 >> 1;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
                v87 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v87 = v85;
              if (v87)
              {
                v88 = (char *)sub_100020E2C((uint64_t)v103, v87);
                v83 = (char *)*((_QWORD *)this + 4);
                v74 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v88 = 0;
              }
              v97 = &v88[4 * v84];
              *(_DWORD *)v97 = 0;
              v72 = v97 + 4;
              while (v74 != v83)
              {
                v98 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v97 - 1) = v98;
                v97 -= 4;
              }
              *((_QWORD *)this + 4) = v97;
              *((_QWORD *)this + 5) = v72;
              *((_QWORD *)this + 6) = &v88[4 * v87];
              if (v83)
                operator delete(v83);
            }
            else
            {
              *(_DWORD *)v74 = 0;
              v72 = v74 + 4;
            }
            *((_QWORD *)this + 5) = v72;
            goto LABEL_156;
          }
          if ((PB::Reader::placeMark(a2, v105) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 5);
            v43 = *((_QWORD *)this + 6);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v9;
              v47 = (v44 - (_BYTE *)*v9) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_171;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v103, v50);
                v46 = (char *)*((_QWORD *)this + 4);
                v44 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 4) = v52;
              *((_QWORD *)this + 5) = v45;
              *((_QWORD *)this + 6) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 5) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_109;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_110;
        case 4u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v105) & 1) != 0)
              return 0;
            v55 = *((_QWORD *)a2 + 1);
            v56 = *((_QWORD *)a2 + 2);
            while (v55 < v56 && !*((_BYTE *)a2 + 24))
            {
              v58 = (char *)*((_QWORD *)this + 8);
              v57 = *((_QWORD *)this + 9);
              if ((unint64_t)v58 >= v57)
              {
                v60 = (char *)*v8;
                v61 = (v58 - (_BYTE *)*v8) >> 2;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62)
                  goto LABEL_172;
                v63 = v57 - (_QWORD)v60;
                if (v63 >> 1 > v62)
                  v62 = v63 >> 1;
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                  v64 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v64 = v62;
                if (v64)
                {
                  v65 = (char *)sub_100020E2C((uint64_t)v104, v64);
                  v60 = (char *)*((_QWORD *)this + 7);
                  v58 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v65 = 0;
                }
                v66 = &v65[4 * v61];
                *(_DWORD *)v66 = 0;
                v59 = v66 + 4;
                while (v58 != v60)
                {
                  v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *((_QWORD *)this + 7) = v66;
                *((_QWORD *)this + 8) = v59;
                *((_QWORD *)this + 9) = &v65[4 * v64];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *(_DWORD *)v58 = 0;
                v59 = v58 + 4;
              }
              *((_QWORD *)this + 8) = v59;
              v68 = *((_QWORD *)a2 + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_109:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v68);
              v56 = *((_QWORD *)a2 + 2);
              v55 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v55;
            }
LABEL_110:
            PB::Reader::recallMark(a2, v105);
          }
          else
          {
            v76 = (char *)*((_QWORD *)this + 8);
            v75 = *((_QWORD *)this + 9);
            if ((unint64_t)v76 >= v75)
            {
              v89 = (char *)*v8;
              v90 = (v76 - (_BYTE *)*v8) >> 2;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 62)
LABEL_172:
                sub_10000D5F8();
              v92 = v75 - (_QWORD)v89;
              if (v92 >> 1 > v91)
                v91 = v92 >> 1;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
                v93 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v93 = v91;
              if (v93)
              {
                v94 = (char *)sub_100020E2C((uint64_t)v104, v93);
                v89 = (char *)*((_QWORD *)this + 7);
                v76 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v94 = 0;
              }
              v99 = &v94[4 * v90];
              *(_DWORD *)v99 = 0;
              v72 = v99 + 4;
              while (v76 != v89)
              {
                v100 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v99 - 1) = v100;
                v99 -= 4;
              }
              *((_QWORD *)this + 7) = v99;
              *((_QWORD *)this + 8) = v72;
              *((_QWORD *)this + 9) = &v94[4 * v93];
              if (v89)
                operator delete(v89);
            }
            else
            {
              *(_DWORD *)v76 = 0;
              v72 = v76 + 4;
            }
            *((_QWORD *)this + 8) = v72;
LABEL_156:
            v101 = *((_QWORD *)a2 + 1);
            if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v72 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v101);
LABEL_160:
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_161:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_158:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_162:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 5u:
          *((_BYTE *)this + 92) |= 2u;
          v69 = *((_QWORD *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_158;
          *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v69);
          goto LABEL_160;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_162;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasEstimateError::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;

  v3 = this;
  if ((*(_BYTE *)(this + 92) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(float **)(v3 + 56);
  v11 = *(float **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  if ((*(_BYTE *)(v3 + 92) & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 88), 5u);
  return this;
}

BOOL CMMsl::GyroBiasEstimateError::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  _BOOL8 v11;

  if ((*(_BYTE *)(a1 + 92) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 92) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 92) & 1) != 0)
  {
    return 0;
  }
  v3 = *(float **)(a1 + 8);
  v2 = *(float **)(a1 + 16);
  v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 32);
  v5 = *(float **)(a1 + 40);
  v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(float **)(a1 + 56);
  v8 = *(float **)(a1 + 64);
  v10 = *(float **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v11 = (*(_BYTE *)(a2 + 92) & 2) == 0;
  if ((*(_BYTE *)(a1 + 92) & 2) != 0)
    return (*(_BYTE *)(a2 + 92) & 2) != 0 && *(float *)(a1 + 88) == *(float *)(a2 + 88);
  return v11;
}

uint64_t CMMsl::GyroBiasEstimateError::hash_value(CMMsl::GyroBiasEstimateError *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  if ((*((_BYTE *)this + 92) & 1) != 0)
  {
    if (*((double *)this + 10) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 10);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v4 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v5 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  if ((*((_BYTE *)this + 92) & 2) != 0)
  {
    v7 = *((float *)this + 22);
    v6 = LODWORD(v7);
    if (v7 == 0.0)
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6;
}

double CMMsl::GyroBiasFit::GyroBiasFit(CMMsl::GyroBiasFit *this)
{
  double result;

  *(_QWORD *)this = off_100351520;
  *((_DWORD *)this + 15) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351520;
  *((_DWORD *)this + 15) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::GyroBiasFit::~GyroBiasFit(CMMsl::GyroBiasFit *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100351520;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::GyroBiasFit::~GyroBiasFit(this);
  operator delete();
}

CMMsl::GyroBiasFit *CMMsl::GyroBiasFit::GyroBiasFit(CMMsl::GyroBiasFit *this, const CMMsl::GyroBiasFit *a2)
{
  char *v4;
  int v5;

  *(_QWORD *)this = off_100351520;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v5 = *((_DWORD *)a2 + 14);
    *((_BYTE *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v5;
  }
  return this;
}

uint64_t CMMsl::GyroBiasFit::operator=(uint64_t a1, const CMMsl::GyroBiasFit *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;

  if ((const CMMsl::GyroBiasFit *)a1 != a2)
  {
    CMMsl::GyroBiasFit::GyroBiasFit((CMMsl::GyroBiasFit *)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v13;
    v13 = v7;
    CMMsl::GyroBiasFit::~GyroBiasFit((CMMsl::GyroBiasFit *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasFit *a2, CMMsl::GyroBiasFit *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  return result;
}

uint64_t CMMsl::GyroBiasFit::GyroBiasFit(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100351520;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::GyroBiasFit::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  int v14;

  if (a1 != a2)
  {
    CMMsl::GyroBiasFit::GyroBiasFit((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v14;
    v14 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    v12 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v13;
    v13 = v7;
    CMMsl::GyroBiasFit::~GyroBiasFit((CMMsl::GyroBiasFit *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasFit::formatText(CMMsl::GyroBiasFit *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "intercept", v7);
  }
  if ((*((_BYTE *)this + 60) & 1) != 0)
    PB::TextFormatter::format(a2, "lastMiniCal", *((float *)this + 14));
  v8 = (float *)*((_QWORD *)this + 4);
  v9 = (float *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "slope", v10);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasFit::readFrom(CMMsl::GyroBiasFit *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  char *v74;
  int v75;
  unint64_t v76;
  _BYTE v78[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark(a2, v78) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v8;
              v47 = (v44 - (_BYTE *)*v8) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_128;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v9, v50);
                v46 = (char *)*((_QWORD *)this + 1);
                v44 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 1) = v52;
              *((_QWORD *)this + 2) = v45;
              *((_QWORD *)this + 3) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 2) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
            {
LABEL_82:
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_83;
        }
        v59 = (char *)*((_QWORD *)this + 2);
        v58 = *((_QWORD *)this + 3);
        if ((unint64_t)v59 >= v58)
        {
          v66 = (char *)*v8;
          v67 = (v59 - (_BYTE *)*v8) >> 2;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62)
LABEL_128:
            sub_10000D5F8();
          v69 = v58 - (_QWORD)v66;
          if (v69 >> 1 > v68)
            v68 = v69 >> 1;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
            v70 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)sub_100020E2C((uint64_t)v9, v70);
            v66 = (char *)*((_QWORD *)this + 1);
            v59 = (char *)*((_QWORD *)this + 2);
          }
          else
          {
            v71 = 0;
          }
          v74 = &v71[4 * v67];
          *(_DWORD *)v74 = 0;
          v57 = v74 + 4;
          while (v59 != v66)
          {
            v75 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *((_QWORD *)this + 1) = v74;
          *((_QWORD *)this + 2) = v57;
          *((_QWORD *)this + 3) = &v71[4 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_DWORD *)v59 = 0;
          v57 = v59 + 4;
        }
        *((_QWORD *)this + 2) = v57;
LABEL_114:
        v76 = *((_QWORD *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_116;
        *(v57 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v76);
LABEL_118:
        *((_QWORD *)a2 + 1) += 4;
        goto LABEL_119;
      }
      if ((_DWORD)v25 == 1)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark(a2, v78) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          while (v26 < v27 && !*((_BYTE *)a2 + 24))
          {
            v29 = (char *)*((_QWORD *)this + 5);
            v28 = *((_QWORD *)this + 6);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_127;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_100020E2C((uint64_t)v11, v35);
                v31 = (char *)*((_QWORD *)this + 4);
                v29 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[4 * v32];
              *(_DWORD *)v37 = 0;
              v30 = v37 + 4;
              while (v29 != v31)
              {
                v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *((_QWORD *)this + 4) = v37;
              *((_QWORD *)this + 5) = v30;
              *((_QWORD *)this + 6) = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = 0;
              v30 = v29 + 4;
            }
            *((_QWORD *)this + 5) = v30;
            v39 = *((_QWORD *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_82;
            *(v30 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v39);
            v27 = *((_QWORD *)a2 + 2);
            v26 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v26;
          }
LABEL_83:
          PB::Reader::recallMark(a2, v78);
          goto LABEL_119;
        }
        v56 = (char *)*((_QWORD *)this + 5);
        v55 = *((_QWORD *)this + 6);
        if ((unint64_t)v56 >= v55)
        {
          v60 = (char *)*v10;
          v61 = (v56 - (_BYTE *)*v10) >> 2;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62)
LABEL_127:
            sub_10000D5F8();
          v63 = v55 - (_QWORD)v60;
          if (v63 >> 1 > v62)
            v62 = v63 >> 1;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
            v64 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
          {
            v65 = (char *)sub_100020E2C((uint64_t)v11, v64);
            v60 = (char *)*((_QWORD *)this + 4);
            v56 = (char *)*((_QWORD *)this + 5);
          }
          else
          {
            v65 = 0;
          }
          v72 = &v65[4 * v61];
          *(_DWORD *)v72 = 0;
          v57 = v72 + 4;
          while (v56 != v60)
          {
            v73 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v72 - 1) = v73;
            v72 -= 4;
          }
          *((_QWORD *)this + 4) = v72;
          *((_QWORD *)this + 5) = v57;
          *((_QWORD *)this + 6) = &v65[4 * v64];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_DWORD *)v56 = 0;
          v57 = v56 + 4;
        }
        *((_QWORD *)this + 5) = v57;
        goto LABEL_114;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    *((_BYTE *)this + 60) |= 1u;
    v40 = *((_QWORD *)a2 + 1);
    if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)a2 + 2))
    {
LABEL_116:
      *((_BYTE *)a2 + 24) = 1;
      goto LABEL_119;
    }
    *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v40);
    goto LABEL_118;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasFit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = this;
  v4 = *(float **)(this + 32);
  v5 = *(float **)(this + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 56), 3u);
  return this;
}

BOOL CMMsl::GyroBiasFit::operator==(uint64_t a1, uint64_t a2)
{
  float *v2;
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  _BOOL8 v8;

  v3 = *(float **)(a1 + 32);
  v2 = *(float **)(a1 + 40);
  v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(float **)(a1 + 8);
  v5 = *(float **)(a1 + 16);
  v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v8 = (*(_BYTE *)(a2 + 60) & 1) == 0;
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    return (*(_BYTE *)(a2 + 60) & 1) != 0 && *(float *)(a1 + 56) == *(float *)(a2 + 56);
  return v8;
}

uint64_t CMMsl::GyroBiasFit::hash_value(CMMsl::GyroBiasFit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;

  v2 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 60) & 1) != 0)
  {
    v5 = *((float *)this + 14);
    v4 = LODWORD(v5);
    if (v5 == 0.0)
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  return v3 ^ v2 ^ v4;
}

_QWORD *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(_QWORD *this)
{
  *this = off_100351558;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100351558;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::GyroCalibrationDataFactory::~GyroCalibrationDataFactory(CMMsl::GyroCalibrationDataFactory *this)
{
  void **v2;

  *(_QWORD *)this = off_100351558;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100351558;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100351558;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(_QWORD *this, const CMMsl::GyroCalibrationDataFactory *a2)
{
  this[1] = 0;
  *this = off_100351558;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_1000DD538();
  return this;
}

void sub_1000DD538()
{
  operator new();
}

void sub_1000DD66C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataFactory::operator=(uint64_t a1, const CMMsl::GyroCalibrationDataFactory *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::GyroCalibrationDataFactory *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::GyroCalibrationDataFactory *)a1 != a2)
  {
    CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_100351558;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::GyroCalibrationDataFactory *a2, CMMsl::GyroCalibrationDataFactory *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_100351558;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_100351558;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataFactory::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::GyroCalibrationDataFactory *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_100351558;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_100351558;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataFactory::formatText(CMMsl::GyroCalibrationDataFactory *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "sample");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationDataFactory::readFrom(CMMsl::GyroCalibrationDataFactory *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_1000DDAAC();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1000DDAAC()
{
  operator new();
}

void sub_1000DDBE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataFactory::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::GyroCalibrationDataFactory::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1000DDC54((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_1000DDC54(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::GyroCalibrationSample::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::GyroCalibrationDataFactory::hash_value(CMMsl::GyroCalibrationDataFactory *this)
{
  CMMsl::GyroCalibrationSample **v1;
  CMMsl::GyroCalibrationSample **v2;
  uint64_t v3;
  CMMsl::GyroCalibrationSample *v4;

  v1 = (CMMsl::GyroCalibrationSample **)*((_QWORD *)this + 1);
  v2 = (CMMsl::GyroCalibrationSample **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::GyroCalibrationSample::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

_QWORD *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(_QWORD *this)
{
  *this = off_100351590;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100351590;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::GyroCalibrationDataNonlinearNonFactory::~GyroCalibrationDataNonlinearNonFactory(CMMsl::GyroCalibrationDataNonlinearNonFactory *this)
{
  void **v2;

  *(_QWORD *)this = off_100351590;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100351590;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_100351590;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(_QWORD *this, const CMMsl::GyroCalibrationDataNonlinearNonFactory *a2)
{
  this[1] = 0;
  *this = off_100351590;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_1000DDE8C();
  return this;
}

void sub_1000DDE8C()
{
  operator new();
}

void sub_1000DDFC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::operator=(uint64_t a1, const CMMsl::GyroCalibrationDataNonlinearNonFactory *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::GyroCalibrationDataNonlinearNonFactory *__hidden);
  __int128 v7;
  uint64_t v8;
  void **v9;

  if ((const CMMsl::GyroCalibrationDataNonlinearNonFactory *)a1 != a2)
  {
    CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    v6 = off_100351590;
    v9 = (void **)&v7;
    sub_1002394A8(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::GyroCalibrationDataNonlinearNonFactory *a2, CMMsl::GyroCalibrationDataNonlinearNonFactory *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  return this;
}

_QWORD *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;

  *a1 = off_100351590;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *a1 = off_100351590;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  v4 = a1 + 1;
  sub_100239524(a1 + 1);
  *v4 = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(CMMsl::GyroCalibrationDataNonlinearNonFactory *__hidden);
  __int128 v10;
  uint64_t v11;
  void **v12;

  if (a1 != a2)
  {
    v9 = off_100351590;
    v10 = 0uLL;
    v11 = 0;
    sub_100239524(&v10);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v10 = v6;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    v12 = (void **)&v10;
    v9 = off_100351590;
    sub_1002394A8(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::formatText(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "sample");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::readFrom(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        sub_1000DE400();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1000DE400()
{
  operator new();
}

void sub_1000DE538(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    v5 = *v2++;
  return this;
}

BOOL CMMsl::GyroCalibrationDataNonlinearNonFactory::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1000DE5A8((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_1000DE5A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::GyroCalibrationSampleNonlinear::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::hash_value(CMMsl::GyroCalibrationDataNonlinearNonFactory *this)
{
  CMMsl::GyroCalibrationSampleNonlinear **v1;
  CMMsl::GyroCalibrationSampleNonlinear **v2;
  uint64_t v3;
  CMMsl::GyroCalibrationSampleNonlinear *v4;

  v1 = (CMMsl::GyroCalibrationSampleNonlinear **)*((_QWORD *)this + 1);
  v2 = (CMMsl::GyroCalibrationSampleNonlinear **)*((_QWORD *)this + 2);
  if (v1 == v2)
    return 0;
  v3 = 0;
  do
  {
    v4 = *v1++;
    v3 ^= CMMsl::GyroCalibrationSampleNonlinear::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::GyroCalibrationSample::GyroCalibrationSample(uint64_t this)
{
  *(_QWORD *)this = off_1003515C8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003515C8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroCalibrationSample::~GyroCalibrationSample(CMMsl::GyroCalibrationSample *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::GyroCalibrationSample::GyroCalibrationSample(CMMsl::GyroCalibrationSample *this, const CMMsl::GyroCalibrationSample *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = off_1003515C8;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 24) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    v3 |= 2u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 5);
    *((_BYTE *)this + 24) = v3 | 8;
    *((float *)this + 5) = result;
    return result;
  }
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 4) = result;
  if ((*((_BYTE *)a2 + 24) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::GyroCalibrationSample::operator=(uint64_t a1, const CMMsl::GyroCalibrationSample *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const CMMsl::GyroCalibrationSample *)a1 != a2)
  {
    CMMsl::GyroCalibrationSample::GyroCalibrationSample((CMMsl::GyroCalibrationSample *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroCalibrationSample *a2, CMMsl::GyroCalibrationSample *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::GyroCalibrationSample::GyroCalibrationSample(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003515C8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003515C8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::GyroCalibrationSample::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::GyroCalibrationSample *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_1003515C8;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationSample::formatText(CMMsl::GyroCalibrationSample *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationSample::readFrom(CMMsl::GyroCalibrationSample *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 24) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((_BYTE *)this + 24) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 24) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 24) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroCalibrationSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 24) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  return this;
}

BOOL CMMsl::GyroCalibrationSample::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 8) == 0;
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
    return (*(_BYTE *)(a2 + 24) & 8) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

uint64_t CMMsl::GyroCalibrationSample::hash_value(CMMsl::GyroCalibrationSample *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t this)
{
  *(_QWORD *)this = off_100351600;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351600;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear(CMMsl::GyroCalibrationSampleNonlinear *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351600;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351600;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351600;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t this, const CMMsl::GyroCalibrationSampleNonlinear *a2)
{
  uint64_t v2;

  *(_QWORD *)this = off_100351600;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
    v2 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(this + 24) |= 1u;
    *(_QWORD *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::operator=(uint64_t a1, const CMMsl::GyroCalibrationSampleNonlinear *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (**v7)(CMMsl::GyroCalibrationSampleNonlinear *__hidden);
  uint64_t v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::GyroCalibrationSampleNonlinear *)a1 != a2)
  {
    CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear((uint64_t)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v5;
    v7 = off_100351600;
    v8 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GyroCalibrationSampleNonlinear *a2, CMMsl::GyroCalibrationSampleNonlinear *a3)
{
  int v3;
  uint64_t v4;
  double result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100351600;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100351600;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    v10[2] = v8;
    v10[0] = off_100351600;
    v10[1] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::formatText(CMMsl::GyroCalibrationSampleNonlinear *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  if ((*((_BYTE *)this + 24) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::readFrom(CMMsl::GyroCalibrationSampleNonlinear *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v21);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        if ((_DWORD)v20 == 1)
          operator new();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::GyroCalibrationSampleNonlinear::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::GyroCalibrationSample::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t CMMsl::GyroCalibrationSampleNonlinear::hash_value(CMMsl::GyroCalibrationSampleNonlinear *this)
{
  unint64_t v2;
  double v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v2 = CMMsl::GyroCalibrationSample::hash_value((CMMsl::GyroCalibrationSample *)v2);
  if ((*((_BYTE *)this + 24) & 1) != 0)
  {
    v3 = *((double *)this + 2);
    if (v3 == 0.0)
      v3 = 0.0;
  }
  else
  {
    v3 = 0.0;
  }
  return *(_QWORD *)&v3 ^ v2;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::GyroCompass::GyroCompass(uint64_t this)
{
  *(_QWORD *)this = off_100351638;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351638;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::GyroCompass::~GyroCompass(CMMsl::GyroCompass *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::GyroCompass::GyroCompass(uint64_t this, const CMMsl::GyroCompass *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)this = off_100351638;
  *(_DWORD *)(this + 60) = 0;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 60) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 11);
    v3 |= 0x100u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 44) = v5;
    v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x200u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 48) = v6;
    v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v7;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v8;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v9;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 56) = v10;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 16) = v11;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 24) = v12;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 28) = v13;
  v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      return this;
LABEL_26:
    v15 = *((_DWORD *)a2 + 5);
    *(_WORD *)(this + 60) = v3 | 4;
    *(_DWORD *)(this + 20) = v15;
    return this;
  }
LABEL_25:
  v14 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 32) = v14;
  if ((*((_WORD *)a2 + 30) & 4) != 0)
    goto LABEL_26;
  return this;
}

CMMsl *CMMsl::GyroCompass::operator=(CMMsl *a1, const CMMsl::GyroCompass *a2)
{
  CMMsl::GyroCompass *v3;
  _BYTE v5[64];

  if (a1 != a2)
  {
    CMMsl::GyroCompass::GyroCompass((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroCompass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroCompass *a2, CMMsl::GyroCompass *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  return result;
}

float CMMsl::GyroCompass::GyroCompass(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351638;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

CMMsl *CMMsl::GyroCompass::operator=(CMMsl *this, uint64_t a2, CMMsl::GyroCompass *a3)
{
  _QWORD v5[2];
  int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  int v10;
  int v11;

  if (this != (CMMsl *)a2)
  {
    v5[0] = off_100351638;
    v11 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = 0;
    v5[1] = *(_QWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a2 + 40);
    v10 = *(_DWORD *)(a2 + 56);
    v6 = *(_DWORD *)(a2 + 16);
    v8 = *(_OWORD *)(a2 + 24);
    v7 = *(_DWORD *)(a2 + 20);
    CMMsl::swap(this, (CMMsl::GyroCompass *)v5, a3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return this;
}

uint64_t CMMsl::GyroCompass::formatText(CMMsl::GyroCompass *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 4));
    v5 = *((_WORD *)this + 30);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "calibrationLevel", *((_DWORD *)this + 5));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 6));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 7));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 8));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 9));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 10));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 11));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 12));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_WORD *)this + 30) & 0x800) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 13));
  v5 = *((_WORD *)this + 30);
  if ((v5 & 1) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 14));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCompass::readFrom(CMMsl::GyroCompass *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_73;
            case 2u:
              *((_WORD *)this + 30) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 3u:
              *((_WORD *)this + 30) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 4u:
              *((_WORD *)this + 30) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 5u:
              *((_WORD *)this + 30) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 6u:
              *((_WORD *)this + 30) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 7u:
              *((_WORD *)this + 30) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 8u:
              *((_WORD *)this + 30) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 9u:
              *((_WORD *)this + 30) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 0xAu:
              *((_WORD *)this + 30) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_72;
            case 0xBu:
              *((_WORD *)this + 30) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_72:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_73:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_56:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_79;
            case 0xCu:
              *((_WORD *)this + 30) |= 4u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_78;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_77:
                    v2 = v29 + 1;
                    goto LABEL_78;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_77;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_78;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_78:
              *((_DWORD *)this + 5) = v25;
LABEL_79:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_79;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroCompass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 60);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 2u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 4u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 6u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 7u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 8u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 9u);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xAu);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 0xCu);
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xBu);
  if ((*(_WORD *)(v3 + 60) & 4) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 0xCu);
  return this;
}

BOOL CMMsl::GyroCompass::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 60);
  v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 60) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  return v4;
}

uint64_t CMMsl::GyroCompass::hash_value(CMMsl::GyroCompass *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *((_WORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0)
      goto LABEL_3;
LABEL_37:
    v4 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0)
      goto LABEL_6;
LABEL_38:
    v6 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0)
      goto LABEL_9;
LABEL_39:
    v8 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_12;
LABEL_40:
    v10 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_15;
LABEL_41:
    v12 = 0;
    if ((*((_WORD *)this + 30) & 0x800) != 0)
      goto LABEL_18;
LABEL_42:
    v14 = 0;
    if ((v1 & 2) != 0)
      goto LABEL_21;
LABEL_43:
    v16 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_24;
LABEL_44:
    v18 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_27;
LABEL_45:
    v20 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_30;
    goto LABEL_46;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((*((_WORD *)this + 30) & 0x100) == 0)
    goto LABEL_37;
LABEL_3:
  v3 = *((float *)this + 11);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((*((_WORD *)this + 30) & 0x200) == 0)
    goto LABEL_38;
LABEL_6:
  v5 = *((float *)this + 12);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((*((_WORD *)this + 30) & 0x400) == 0)
    goto LABEL_39;
LABEL_9:
  v7 = *((float *)this + 13);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_40;
LABEL_12:
  v9 = *((float *)this + 10);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_41;
LABEL_15:
  v11 = *((float *)this + 9);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((*((_WORD *)this + 30) & 0x800) == 0)
    goto LABEL_42;
LABEL_18:
  v13 = *((float *)this + 14);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_43;
LABEL_21:
  v15 = *((float *)this + 4);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_44;
LABEL_24:
  v17 = *((float *)this + 6);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_45;
LABEL_27:
  v19 = *((float *)this + 7);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_30:
    v21 = *((float *)this + 8);
    v22 = LODWORD(v21);
    if (v21 == 0.0)
      v22 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_33;
LABEL_47:
    v23 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23;
  }
LABEL_46:
  v22 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_47;
LABEL_33:
  v23 = *((int *)this + 5);
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23;
}

uint64_t CMMsl::GyroDt::GyroDt(uint64_t this)
{
  *(_QWORD *)this = off_100351670;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351670;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::GyroDt::~GyroDt(CMMsl::GyroDt *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::GyroDt::GyroDt(CMMsl::GyroDt *this, const CMMsl::GyroDt *a2)
{
  float result;

  *(_QWORD *)this = off_100351670;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)this = off_100351670;
  *((_DWORD *)this + 3) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::GyroDt::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  void (**v7)(CMMsl::GyroDt *__hidden);
  int v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_100351670;
    v3 = *(_DWORD *)(a2 + 8);
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_BYTE *)(a2 + 12) & 1;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::GyroDt *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8 = off_100351670;
    v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_DWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    v10 = v5;
    v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroDt *a2, CMMsl::GyroDt *a3)
{
  int v3;
  float result;

  v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::GyroDt::GyroDt(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351670;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100351670;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::GyroDt::formatText(CMMsl::GyroDt *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "dt", *((float *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroDt::readFrom(CMMsl::GyroDt *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroDt::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::GyroDt::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

float CMMsl::GyroDt::hash_value(CMMsl::GyroDt *this)
{
  float result;

  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((float *)this + 2);
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(uint64_t this)
{
  *(_QWORD *)this = off_1003516A8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003516A8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroFactoryCalibrationData::~GyroFactoryCalibrationData(CMMsl::GyroFactoryCalibrationData *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(CMMsl::GyroFactoryCalibrationData *this, const CMMsl::GyroFactoryCalibrationData *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = off_1003516A8;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 24) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    v3 |= 2u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 5);
    *((_BYTE *)this + 24) = v3 | 8;
    *((float *)this + 5) = result;
    return result;
  }
  result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 4) = result;
  if ((*((_BYTE *)a2 + 24) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::operator=(uint64_t a1, const CMMsl::GyroFactoryCalibrationData *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const CMMsl::GyroFactoryCalibrationData *)a1 != a2)
  {
    CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData((CMMsl::GyroFactoryCalibrationData *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroFactoryCalibrationData *a2, CMMsl::GyroFactoryCalibrationData *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003516A8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003516A8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(CMMsl::GyroFactoryCalibrationData *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = off_1003516A8;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroFactoryCalibrationData::formatText(CMMsl::GyroFactoryCalibrationData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroFactoryCalibrationData::readFrom(CMMsl::GyroFactoryCalibrationData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 24) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((_BYTE *)this + 24) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 24) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 24) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroFactoryCalibrationData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  if ((*(_BYTE *)(v3 + 24) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  return this;
}

BOOL CMMsl::GyroFactoryCalibrationData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 8) == 0;
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
    return (*(_BYTE *)(a2 + 24) & 8) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  return v2;
}

uint64_t CMMsl::GyroFactoryCalibrationData::hash_value(CMMsl::GyroFactoryCalibrationData *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 2);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 4);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroGps::GyroGps(uint64_t this)
{
  *(_QWORD *)this = off_1003516E0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003516E0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::GyroGps::~GyroGps(CMMsl::GyroGps *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::GyroGps::GyroGps(CMMsl::GyroGps *this, const CMMsl::GyroGps *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)this = off_1003516E0;
  *((_DWORD *)this + 7) = 0;
  v2 = *((_BYTE *)a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 28) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    v2 = *((_BYTE *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((_BYTE *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((_BYTE *)a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((_BYTE *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::GyroGps::operator=(uint64_t a1, const CMMsl::GyroGps *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::GyroGps *)a1 != a2)
  {
    CMMsl::GyroGps::GyroGps((CMMsl::GyroGps *)&v9, a2);
    v3 = v11;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v3;
    v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    v13 = v6;
    v10 = v4;
    v11 = v5;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroGps *a2, CMMsl::GyroGps *a3)
{
  int v3;
  uint64_t v4;
  float result;

  v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GyroGps::GyroGps(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003516E0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003516E0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::GyroGps::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v9[3];
  int v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    v4 = *(_DWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v9[0] = off_1003516E0;
    v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    v9[2] = v6;
    v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GyroGps::formatText(CMMsl::GyroGps *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    v5 = *((_BYTE *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "y", *((float *)this + 5));
      if ((*((_BYTE *)this + 28) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  v5 = *((_BYTE *)this + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroGps::readFrom(CMMsl::GyroGps *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 28) |= 1u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((_BYTE *)this + 28) |= 2u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((_BYTE *)this + 28) |= 4u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_35;
          *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((_BYTE *)this + 28) |= 8u;
          v2 = *((_QWORD *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_37:
            v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_38:
            *((_QWORD *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)a2 + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          break;
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroGps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 28);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  return this;
}

BOOL CMMsl::GyroGps::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

uint64_t CMMsl::GyroGps::hash_value(CMMsl::GyroGps *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 28) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 28) & 2) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 4) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 28) & 2) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 28) & 4) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 28) & 8) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 28) & 8) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 6);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t this)
{
  *(_QWORD *)this = off_100351718;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351718;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::GyroOscarEmu::~GyroOscarEmu(CMMsl::GyroOscarEmu *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t this, const CMMsl::GyroOscarEmu *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)this = off_100351718;
  *(_DWORD *)(this + 36) = 0;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 36) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 36) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 20) = v5;
    v2 = *((_BYTE *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    v2 = *((_BYTE *)a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 28) = v7;
  v2 = *((_BYTE *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return this;
LABEL_14:
    v9 = *((_BYTE *)a2 + 32);
    *(_BYTE *)(this + 36) = v3 | 0x20;
    *(_BYTE *)(this + 32) = v9;
    return this;
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 36) = v3;
  *(_DWORD *)(this + 16) = v8;
  if ((*((_BYTE *)a2 + 36) & 0x20) != 0)
    goto LABEL_14;
  return this;
}

uint64_t CMMsl::GyroOscarEmu::operator=(uint64_t a1, const CMMsl::GyroOscarEmu *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  int v14;

  if ((const CMMsl::GyroOscarEmu *)a1 != a2)
  {
    CMMsl::GyroOscarEmu::GyroOscarEmu((uint64_t)v8, a2);
    v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v14;
    v14 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_QWORD *)(a1 + 20);
    *(_QWORD *)(a1 + 20) = v11;
    v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    v12 = v4;
    v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    v10 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v13;
    v13 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroOscarEmu *a2, CMMsl::GyroOscarEmu *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;

  v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  LOBYTE(v6) = *((_BYTE *)this + 32);
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  *((_BYTE *)a2 + 32) = v6;
  return result;
}

float CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351718;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100351718;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

uint64_t CMMsl::GyroOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;

  if (a1 != a2)
  {
    v13[0] = off_100351718;
    v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 28);
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_BYTE *)(a2 + 32);
    v18 = *(_DWORD *)(a1 + 36);
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v13[1] = v8;
    v9 = *(_QWORD *)(a1 + 20);
    v10 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) = v3;
    *(_QWORD *)(a1 + 20) = v10;
    v15 = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    v16 = v9;
    v11 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    v14 = v11;
    LOBYTE(v11) = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v7;
    v17 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::GyroOscarEmu::formatText(CMMsl::GyroOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "fsync", *((_BYTE *)this + 32));
    v5 = *((_BYTE *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleNum", *((_DWORD *)this + 4));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "y", *((float *)this + 6));
    if ((*((_BYTE *)this + 36) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  v5 = *((_BYTE *)this + 36);
  if ((v5 & 8) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x10) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroOscarEmu::readFrom(CMMsl::GyroOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 36) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_56;
            case 2u:
              *((_BYTE *)this + 36) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_55;
            case 3u:
              *((_BYTE *)this + 36) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_35;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_55;
            case 4u:
              *((_BYTE *)this + 36) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_55:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_56:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_62;
            case 5u:
              *((_BYTE *)this + 36) |= 2u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_61;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_60:
                    v2 = v31 + 1;
                    goto LABEL_61;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_60;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_61;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_61:
              *((_DWORD *)this + 4) = v25;
LABEL_62:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *((_BYTE *)this + 36) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v28 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v28 = v27 != 0;
              }
              *((_BYTE *)this + 32) = v28;
              goto LABEL_62;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_62;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 36);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 32), 6u);
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
  if ((*(_BYTE *)(v3 + 36) & 0x20) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 32), 6u);
  return this;
}

BOOL CMMsl::GyroOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 36) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 36) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 36) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 36) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 36) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  return v2;
}

uint64_t CMMsl::GyroOscarEmu::hash_value(CMMsl::GyroOscarEmu *this)
{
  double v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 36) & 4) != 0)
      goto LABEL_3;
LABEL_17:
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 8) != 0)
      goto LABEL_6;
LABEL_18:
    v5 = 0;
    if ((*((_BYTE *)this + 36) & 0x10) != 0)
      goto LABEL_9;
LABEL_19:
    v7 = 0;
    if ((*((_BYTE *)this + 36) & 2) != 0)
      goto LABEL_12;
LABEL_20:
    v8 = 0;
    if ((*((_BYTE *)this + 36) & 0x20) != 0)
      goto LABEL_13;
LABEL_21:
    v9 = 0;
    return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8 ^ v9;
  }
  v1 = *((double *)this + 1);
  if (v1 == 0.0)
    v1 = 0.0;
  if ((*((_BYTE *)this + 36) & 4) == 0)
    goto LABEL_17;
LABEL_3:
  v2 = *((float *)this + 5);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 36) & 8) == 0)
    goto LABEL_18;
LABEL_6:
  v4 = *((float *)this + 6);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 36) & 0x10) == 0)
    goto LABEL_19;
LABEL_9:
  v6 = *((float *)this + 7);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 36) & 2) == 0)
    goto LABEL_20;
LABEL_12:
  v8 = *((unsigned int *)this + 4);
  if ((*((_BYTE *)this + 36) & 0x20) == 0)
    goto LABEL_21;
LABEL_13:
  v9 = *((unsigned __int8 *)this + 32);
  return v3 ^ *(_QWORD *)&v1 ^ v5 ^ v7 ^ v8 ^ v9;
}

uint64_t CMMsl::GyroTemperature::GyroTemperature(uint64_t this)
{
  *(_QWORD *)this = off_100351750;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351750;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::GyroTemperature::~GyroTemperature(CMMsl::GyroTemperature *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::GyroTemperature::GyroTemperature(uint64_t this, const CMMsl::GyroTemperature *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = off_100351750;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = off_100351750;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
    v3 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 1) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

float *CMMsl::GyroTemperature::operator=(float *a1, uint64_t a2, float a3)
{
  int v3;
  char v5;
  char v6;
  int v7;
  int v8;
  int v9;
  void (**v11)(CMMsl::GyroTemperature *__hidden);
  int v12;
  int v13;
  int v14;

  if (a1 != (float *)a2)
  {
    v11 = off_100351750;
    v14 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 2) != 0)
    {
      a3 = *(float *)(a2 + 12);
      LOBYTE(v14) = 2;
      v6 = 3;
      if ((v5 & 1) != 0)
      {
LABEL_6:
        v3 = *(_DWORD *)(a2 + 8);
        LOBYTE(v14) = v6;
      }
    }
    else
    {
      v6 = 1;
      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        goto LABEL_6;
    }
    v7 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v14;
    v14 = v7;
    v8 = *((_DWORD *)a1 + 3);
    a1[3] = a3;
    v13 = v8;
    v9 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroTemperature *a2, CMMsl::GyroTemperature *a3)
{
  int v3;
  float result;
  int v5;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return result;
}

float CMMsl::GyroTemperature::GyroTemperature(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351750;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100351750;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

_DWORD *CMMsl::GyroTemperature::operator=(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void (**v10)(CMMsl::GyroTemperature *__hidden);
  int v11;
  int v12;
  int v13;

  if (a1 != a2)
  {
    v10 = off_100351750;
    v3 = a2[4];
    a2[4] = 0;
    v4 = a2[3];
    v5 = a2[2];
    v6 = a1[4];
    a1[4] = v3;
    v13 = v6;
    v7 = a1[3];
    a1[3] = v4;
    v12 = v7;
    v8 = a1[2];
    a1[2] = v5;
    v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::GyroTemperature::formatText(CMMsl::GyroTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroTemperature::readFrom(CMMsl::GyroTemperature *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v22 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_47;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v25) = 0;
LABEL_46:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v25;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12), 1u);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 2u);
  return this;
}

BOOL CMMsl::GyroTemperature::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 1) == 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return (*(_BYTE *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return v2;
}

uint64_t CMMsl::GyroTemperature::hash_value(CMMsl::GyroTemperature *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;

  if ((*((_BYTE *)this + 16) & 2) != 0)
  {
    v3 = *((float *)this + 3);
    v1 = LODWORD(v3);
    if (v3 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 16) & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((int *)this + 2);
  return v2 ^ v1;
}

uint64_t CMMsl::HIDShower::HIDShower(uint64_t this)
{
  *(_QWORD *)this = off_100351788;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351788;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::HIDShower::~HIDShower(CMMsl::HIDShower *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::HIDShower::HIDShower(uint64_t this, const CMMsl::HIDShower *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_100351788;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_100351788;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::HIDShower::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = off_100351788;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HIDShower *a2, CMMsl::HIDShower *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::HIDShower::HIDShower(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100351788;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100351788;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::HIDShower::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_100351788;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HIDShower::formatText(CMMsl::HIDShower *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "inShower", *((_BYTE *)this + 16));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HIDShower::readFrom(CMMsl::HIDShower *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HIDShower::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::HIDShower::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::HIDShower::hash_value(CMMsl::HIDShower *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::HapticModuleState::HapticModuleState(uint64_t this)
{
  *(_QWORD *)this = off_1003517C0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003517C0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::HapticModuleState::~HapticModuleState(CMMsl::HapticModuleState *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::HapticModuleState::HapticModuleState(uint64_t this, const CMMsl::HapticModuleState *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1003517C0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1003517C0;
  *(_DWORD *)(this + 20) = 0;
  if ((*((_BYTE *)a2 + 20) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 1);
    *(_BYTE *)(this + 20) = 1;
    *(_QWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 20) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *((_BYTE *)a2 + 16);
    *(_BYTE *)(this + 20) = v2;
    *(_BYTE *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::HapticModuleState::operator=(uint64_t a1, uint64_t a2, double a3)
{
  char v3;
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  int v12;

  if (a1 != a2)
  {
    v10[0] = off_1003517C0;
    v12 = 0;
    v5 = *(_BYTE *)(a2 + 20);
    if ((v5 & 1) != 0)
    {
      a3 = *(double *)(a2 + 8);
      LOBYTE(v12) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v3 = *(_BYTE *)(a2 + 16);
        LOBYTE(v12) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v12;
    v12 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(double *)(a1 + 8) = a3;
    v10[1] = v8;
    LOBYTE(v7) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v3;
    v11 = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HapticModuleState *a2, CMMsl::HapticModuleState *a3)
{
  int v3;
  double result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  result = *((double *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v3;
  return result;
}

double CMMsl::HapticModuleState::HapticModuleState(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1003517C0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_1003517C0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::HapticModuleState::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_1003517C0;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_BYTE *)(a2 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    v11 = v6;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v5;
    v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HapticModuleState::formatText(CMMsl::HapticModuleState *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "hapticOn", *((_BYTE *)this + 16));
    v5 = *((_BYTE *)this + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HapticModuleState::readFrom(CMMsl::HapticModuleState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 >= *((_QWORD *)a2 + 2))
        {
          v22 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
          *((_QWORD *)a2 + 1) = v2;
          v22 = v21 != 0;
        }
        *((_BYTE *)this + 16) = v22;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
          v2 = *((_QWORD *)a2 + 1) + 8;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
      }
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HapticModuleState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 16), 2u);
  return this;
}

BOOL CMMsl::HapticModuleState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::HapticModuleState::hash_value(CMMsl::HapticModuleState *this)
{
  double v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    return v2 ^ *(_QWORD *)&v1;
  }
  v1 = 0.0;
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(_QWORD *)&v1;
}

uint64_t CMMsl::HarmonicMetrics::HarmonicMetrics(uint64_t this)
{
  *(_QWORD *)this = off_1003517F8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003517F8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::HarmonicMetrics::~HarmonicMetrics(CMMsl::HarmonicMetrics *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::HarmonicMetrics::HarmonicMetrics(CMMsl::HarmonicMetrics *this, const CMMsl::HarmonicMetrics *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  float result;

  *(_QWORD *)this = off_1003517F8;
  *((_DWORD *)this + 11) = 0;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 44) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)a2 + 44) & 0x80) == 0)
      goto LABEL_6;
  }
  result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 10) = result;
  v2 = *((_BYTE *)a2 + 44);
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((float *)a2 + 4);
    v3 |= 2u;
    *((_BYTE *)this + 44) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 5);
  v3 |= 4u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 5) = result;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  result = *((float *)a2 + 6);
  v3 |= 8u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 6) = result;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 7) = result;
  v2 = *((_BYTE *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_18:
    result = *((float *)a2 + 9);
    *((_BYTE *)this + 44) = v3 | 0x40;
    *((float *)this + 9) = result;
    return result;
  }
LABEL_17:
  result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((_BYTE *)this + 44) = v3;
  *((float *)this + 8) = result;
  if ((*((_BYTE *)a2 + 44) & 0x40) != 0)
    goto LABEL_18;
  return result;
}

uint64_t CMMsl::HarmonicMetrics::operator=(uint64_t a1, const CMMsl::HarmonicMetrics *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;

  if ((const CMMsl::HarmonicMetrics *)a1 != a2)
  {
    CMMsl::HarmonicMetrics::HarmonicMetrics((CMMsl::HarmonicMetrics *)&v8, a2);
    v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    v13 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v9 = v4;
    v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    v10 = v6;
    *(_QWORD *)&v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::HarmonicMetrics *a2, CMMsl::HarmonicMetrics *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float result;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::HarmonicMetrics::HarmonicMetrics(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_1003517F8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_1003517F8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::HarmonicMetrics::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_DWORD *)(a2 + 40);
    v15 = *(_DWORD *)(a1 + 44);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v11[0] = off_1003517F8;
    v11[1] = v6;
    v14 = *(_DWORD *)(a1 + 40);
    v7 = *(_OWORD *)(a2 + 16);
    v12 = *(_OWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = v9;
    v13 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::HarmonicMetrics::formatText(CMMsl::HarmonicMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 4));
    v5 = *((_BYTE *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*((_BYTE *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 5));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 6));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 7));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 8));
  v5 = *((_BYTE *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(a2, "thetaAPDirRad", *((float *)this + 10));
    if ((*((_BYTE *)this + 44) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 9));
  v5 = *((_BYTE *)this + 44);
  if (v5 < 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 1) != 0)
LABEL_9:
    PB::TextFormatter::format(a2, "timestamp", *((_QWORD *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HarmonicMetrics::readFrom(CMMsl::HarmonicMetrics *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 44) |= 1u;
              v20 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v21 = *(_QWORD *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_65;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  v24 = 0;
LABEL_64:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)a2 + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_65;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_65:
              *((_QWORD *)this + 1) = v24;
              goto LABEL_66;
            case 2u:
              *((_BYTE *)this + 44) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_60;
            case 3u:
              *((_BYTE *)this + 44) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_60;
            case 4u:
              *((_BYTE *)this + 44) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_60;
            case 5u:
              *((_BYTE *)this + 44) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_60;
            case 6u:
              *((_BYTE *)this + 44) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_60;
            case 7u:
              *((_BYTE *)this + 44) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_51;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_60;
            case 8u:
              *((_BYTE *)this + 44) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_60:
                v2 = *((_QWORD *)a2 + 1) + 4;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_66;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
LABEL_66:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::HarmonicMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(this + 44) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 2u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 36), 8u);
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 36), 8u);
  return this;
}

BOOL CMMsl::HarmonicMetrics::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(unsigned __int8 *)(a1 + 44);
  v3 = *(unsigned __int8 *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  return v4;
}

uint64_t CMMsl::HarmonicMetrics::hash_value(CMMsl::HarmonicMetrics *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;

  if ((*((_BYTE *)this + 44) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 44) & 0x80) != 0)
      goto LABEL_3;
LABEL_25:
    v3 = 0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_6;
LABEL_26:
    v5 = 0;
    if ((*((_BYTE *)this + 44) & 4) != 0)
      goto LABEL_9;
LABEL_27:
    v7 = 0;
    if ((*((_BYTE *)this + 44) & 8) != 0)
      goto LABEL_12;
LABEL_28:
    v9 = 0;
    if ((*((_BYTE *)this + 44) & 0x10) != 0)
      goto LABEL_15;
LABEL_29:
    v11 = 0;
    if ((*((_BYTE *)this + 44) & 0x20) != 0)
      goto LABEL_18;
    goto LABEL_30;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 44) & 0x80) == 0)
    goto LABEL_25;
LABEL_3:
  v2 = *((float *)this + 10);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 44) & 2) == 0)
    goto LABEL_26;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 44) & 4) == 0)
    goto LABEL_27;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 44) & 8) == 0)
    goto LABEL_28;
LABEL_12:
  v8 = *((float *)this + 6);
  v9 = LODWORD(v8);
  if (v8 == 0.0)
    v9 = 0;
  if ((*((_BYTE *)this + 44) & 0x10) == 0)
    goto LABEL_29;
LABEL_15:
  v10 = *((float *)this + 7);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  if ((*((_BYTE *)this + 44) & 0x20) != 0)
  {
LABEL_18:
    v12 = *((float *)this + 8);
    v13 = LODWORD(v12);
    if (v12 == 0.0)
      v13 = 0;
    if ((*((_BYTE *)this + 44) & 0x40) != 0)
      goto LABEL_21;
LABEL_31:
    v15 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_30:
  v13 = 0;
  if ((*((_BYTE *)this + 44) & 0x40) == 0)
    goto LABEL_31;
LABEL_21:
  v14 = *((float *)this + 9);
  v15 = LODWORD(v14);
  if (v14 == 0.0)
    v15 = 0;
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

double CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  double result;

  *(_QWORD *)this = off_100351830;
  *((_QWORD *)this + 21) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351830;
  *((_QWORD *)this + 21) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_100351830;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate(this);
  operator delete();
}

CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2)
{
  char *v4;
  char *v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = off_100351830;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_WORD *)a2 + 86) & 0x10) != 0)
  {
    v7 = *((_QWORD *)a2 + 17);
    *((_WORD *)this + 86) = 16;
    *((_QWORD *)this + 17) = v7;
    v6 = 272;
    if ((*((_WORD *)a2 + 86) & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 256;
  if ((*((_WORD *)a2 + 86) & 0x100) != 0)
  {
LABEL_5:
    v8 = *((_DWORD *)a2 + 42);
    *((_WORD *)this + 86) = v6;
    *((_DWORD *)this + 42) = v8;
  }
LABEL_6:
  if (this != a2)
  {
    sub_100239350((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 3);
    sub_100239350(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  v9 = *((_WORD *)a2 + 86);
  if ((v9 & 2) != 0)
  {
    v10 = *((_QWORD *)a2 + 14);
    *((_WORD *)this + 86) |= 2u;
    *((_QWORD *)this + 14) = v10;
    v9 = *((_WORD *)a2 + 86);
  }
  if ((v9 & 1) != 0)
  {
    v11 = *((_QWORD *)a2 + 13);
    *((_WORD *)this + 86) |= 1u;
    *((_QWORD *)this + 13) = v11;
  }
  if (this != a2)
  {
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  }
  v12 = *((_WORD *)a2 + 86);
  if ((v12 & 0x80) != 0)
  {
    v15 = *((_QWORD *)a2 + 20);
    *((_WORD *)this + 86) |= 0x80u;
    *((_QWORD *)this + 20) = v15;
    v12 = *((_WORD *)a2 + 86);
    if ((v12 & 0x20) == 0)
    {
LABEL_16:
      if ((v12 & 0x40) == 0)
        goto LABEL_17;
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x20) == 0)
  {
    goto LABEL_16;
  }
  v16 = *((_QWORD *)a2 + 18);
  *((_WORD *)this + 86) |= 0x20u;
  *((_QWORD *)this + 18) = v16;
  v12 = *((_WORD *)a2 + 86);
  if ((v12 & 0x40) == 0)
  {
LABEL_17:
    if ((v12 & 8) == 0)
      goto LABEL_18;
LABEL_24:
    v18 = *((_QWORD *)a2 + 16);
    *((_WORD *)this + 86) |= 8u;
    *((_QWORD *)this + 16) = v18;
    if ((*((_WORD *)a2 + 86) & 4) == 0)
      return this;
    goto LABEL_19;
  }
LABEL_23:
  v17 = *((_QWORD *)a2 + 19);
  *((_WORD *)this + 86) |= 0x40u;
  *((_QWORD *)this + 19) = v17;
  v12 = *((_WORD *)a2 + 86);
  if ((v12 & 8) != 0)
    goto LABEL_24;
LABEL_18:
  if ((v12 & 4) != 0)
  {
LABEL_19:
    v13 = *((_QWORD *)a2 + 15);
    *((_WORD *)this + 86) |= 4u;
    *((_QWORD *)this + 15) = v13;
  }
  return this;
}

CMMsl *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator=(CMMsl *a1, const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2)
{
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *v3;
  _BYTE v5[176];

  if (a1 != a2)
  {
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, a2);
    CMMsl::swap(a1, (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, v3);
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2, CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;

  v3 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v3;
  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v4;
  v5 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v7;
  v8 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v8;
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v12;
  v13 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v17;
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v18;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v19;
  v20 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v20;
  v21 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v21;
  v22 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v22;
  v23 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v23;
  result = *((double *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((double *)a2 + 15) = result;
  return result;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_100351830;
  v4 = a1 + 32;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a2 + 172) = 0;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_100239458(a1 + 80, (__n128 *)(a2 + 80));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  sub_100239458(v4, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

CMMsl *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *v3;
  _BYTE v5[176];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, v3);
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5);
  }
  return a1;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::formatText(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  __int16 v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  __int16 v19;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 86);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "covTraceAfterCorrection", *((double *)this + 13));
    v5 = *((_WORD *)this + 86);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "covTraceBeforeCorrection", *((double *)this + 14));
  v6 = (double *)*((_QWORD *)this + 1);
  v7 = (double *)*((_QWORD *)this + 2);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(a2, "dX", v8);
  }
  v9 = *((_WORD *)this + 86);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 15));
    v9 = *((_WORD *)this + 86);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x100) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "lidAngleDeg", *((double *)this + 16));
  if ((*((_WORD *)this + 86) & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(a2, "measurementUpdateType", *((_DWORD *)this + 42));
LABEL_11:
  v10 = (double *)*((_QWORD *)this + 4);
  v11 = (double *)*((_QWORD *)this + 5);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(a2, "residual", v12);
  }
  v13 = (double *)*((_QWORD *)this + 7);
  v14 = (double *)*((_QWORD *)this + 8);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(a2, "stateQfbAfterCorrection", v15);
  }
  v16 = (double *)*((_QWORD *)this + 10);
  v17 = (double *)*((_QWORD *)this + 11);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(a2, "stateQfbBeforeCorrection", v18);
  }
  v19 = *((_WORD *)this + 86);
  if ((v19 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
    v19 = *((_WORD *)this + 86);
    if ((v19 & 0x20) == 0)
    {
LABEL_19:
      if ((v19 & 0x40) == 0)
        goto LABEL_20;
LABEL_28:
      PB::TextFormatter::format(a2, "wAuxFaceNormMeanDps", *((double *)this + 19));
      if ((*((_WORD *)this + 86) & 0x80) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_21;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_19;
  }
  PB::TextFormatter::format(a2, "wAuxBudNormMeanDps", *((double *)this + 18));
  v19 = *((_WORD *)this + 86);
  if ((v19 & 0x40) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v19 & 0x80) != 0)
LABEL_21:
    PB::TextFormatter::format(a2, "wSrcNormMeanDps", *((double *)this + 20));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::readFrom(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char *v102;
  _QWORD *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  _BYTE v149[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (void **)((char *)this + 32);
    v147 = (char *)this + 48;
    v148 = (char *)this + 24;
    v10 = (void **)((char *)this + 56);
    v11 = (void **)((char *)this + 80);
    v145 = (char *)this + 96;
    v146 = (char *)this + 72;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_WORD *)this + 86) |= 0x10u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_235;
          *((_QWORD *)this + 17) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_237;
        case 2u:
          *((_WORD *)this + 86) |= 0x100u;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          v28 = *(_QWORD *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)a2 + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_204;
              v29 += 7;
              v26 = v32;
              v18 = v30++ > 8;
            }
            while (!v18);
LABEL_160:
            LODWORD(v31) = 0;
            goto LABEL_204;
          }
          v97 = 0;
          v98 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v99 = v26 + 1;
              v100 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)a2 + 1) = v99;
              v31 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v26 = v99;
                v18 = v98++ > 8;
                if (v18)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_204:
          *((_DWORD *)this + 42) = v31;
          goto LABEL_238;
        case 3u:
          if (v24 != 2)
          {
            v102 = (char *)*((_QWORD *)this + 11);
            v101 = *((_QWORD *)this + 12);
            if ((unint64_t)v102 >= v101)
            {
              v110 = (char *)*v11;
              v111 = (v102 - (_BYTE *)*v11) >> 3;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 61)
LABEL_248:
                sub_10000D5F8();
              v113 = v101 - (_QWORD)v110;
              if (v113 >> 2 > v112)
                v112 = v113 >> 2;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_10000D60C((uint64_t)v145, v114);
                v110 = (char *)*((_QWORD *)this + 10);
                v102 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v115 = 0;
              }
              v134 = &v115[8 * v111];
              *(_QWORD *)v134 = 0;
              v103 = v134 + 8;
              while (v102 != v110)
              {
                v135 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v134 - 1) = v135;
                v134 -= 8;
              }
              *((_QWORD *)this + 10) = v134;
              *((_QWORD *)this + 11) = v103;
              *((_QWORD *)this + 12) = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_QWORD *)v102 = 0;
              v103 = v102 + 8;
            }
            *((_QWORD *)this + 11) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark(a2, v149) & 1) != 0)
            return 0;
          v34 = *((_QWORD *)a2 + 1);
          v35 = *((_QWORD *)a2 + 2);
          while (v34 < v35 && !*((_BYTE *)a2 + 24))
          {
            v37 = (char *)*((_QWORD *)this + 11);
            v36 = *((_QWORD *)this + 12);
            if ((unint64_t)v37 >= v36)
            {
              v39 = (char *)*v11;
              v40 = (v37 - (_BYTE *)*v11) >> 3;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61)
                goto LABEL_248;
              v42 = v36 - (_QWORD)v39;
              if (v42 >> 2 > v41)
                v41 = v42 >> 2;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v43 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)sub_10000D60C((uint64_t)v145, v43);
                v39 = (char *)*((_QWORD *)this + 10);
                v37 = (char *)*((_QWORD *)this + 11);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[8 * v40];
              *(_QWORD *)v45 = 0;
              v38 = v45 + 8;
              while (v37 != v39)
              {
                v46 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v45 - 1) = v46;
                v45 -= 8;
              }
              *((_QWORD *)this + 10) = v45;
              *((_QWORD *)this + 11) = v38;
              *((_QWORD *)this + 12) = &v44[8 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_QWORD *)v37 = 0;
              v38 = v37 + 8;
            }
            *((_QWORD *)this + 11) = v38;
            v47 = *((_QWORD *)a2 + 1);
            if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_152;
            *(v38 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v47);
            v35 = *((_QWORD *)a2 + 2);
            v34 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v34;
          }
          goto LABEL_153;
        case 4u:
          if (v24 != 2)
          {
            v105 = (char *)*((_QWORD *)this + 8);
            v104 = *((_QWORD *)this + 9);
            if ((unint64_t)v105 >= v104)
            {
              v116 = (char *)*v10;
              v117 = (v105 - (_BYTE *)*v10) >> 3;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 61)
LABEL_249:
                sub_10000D5F8();
              v119 = v104 - (_QWORD)v116;
              if (v119 >> 2 > v118)
                v118 = v119 >> 2;
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v118;
              if (v120)
              {
                v121 = (char *)sub_10000D60C((uint64_t)v146, v120);
                v116 = (char *)*((_QWORD *)this + 7);
                v105 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v121 = 0;
              }
              v136 = &v121[8 * v117];
              *(_QWORD *)v136 = 0;
              v103 = v136 + 8;
              while (v105 != v116)
              {
                v137 = *((_QWORD *)v105 - 1);
                v105 -= 8;
                *((_QWORD *)v136 - 1) = v137;
                v136 -= 8;
              }
              *((_QWORD *)this + 7) = v136;
              *((_QWORD *)this + 8) = v103;
              *((_QWORD *)this + 9) = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_QWORD *)v105 = 0;
              v103 = v105 + 8;
            }
            *((_QWORD *)this + 8) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark(a2, v149) & 1) != 0)
            return 0;
          v48 = *((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
          while (v48 < v49 && !*((_BYTE *)a2 + 24))
          {
            v51 = (char *)*((_QWORD *)this + 8);
            v50 = *((_QWORD *)this + 9);
            if ((unint64_t)v51 >= v50)
            {
              v53 = (char *)*v10;
              v54 = (v51 - (_BYTE *)*v10) >> 3;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61)
                goto LABEL_249;
              v56 = v50 - (_QWORD)v53;
              if (v56 >> 2 > v55)
                v55 = v56 >> 2;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (char *)sub_10000D60C((uint64_t)v146, v57);
                v53 = (char *)*((_QWORD *)this + 7);
                v51 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v58 = 0;
              }
              v59 = &v58[8 * v54];
              *(_QWORD *)v59 = 0;
              v52 = v59 + 8;
              while (v51 != v53)
              {
                v60 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *((_QWORD *)v59 - 1) = v60;
                v59 -= 8;
              }
              *((_QWORD *)this + 7) = v59;
              *((_QWORD *)this + 8) = v52;
              *((_QWORD *)this + 9) = &v58[8 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *(_QWORD *)v51 = 0;
              v52 = v51 + 8;
            }
            *((_QWORD *)this + 8) = v52;
            v61 = *((_QWORD *)a2 + 1);
            if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_152;
            *(v52 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v61);
            v49 = *((_QWORD *)a2 + 2);
            v48 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v48;
          }
          goto LABEL_153;
        case 5u:
          *((_WORD *)this + 86) |= 2u;
          v62 = *((_QWORD *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_235;
          *((_QWORD *)this + 14) = *(_QWORD *)(*(_QWORD *)a2 + v62);
          goto LABEL_237;
        case 6u:
          *((_WORD *)this + 86) |= 1u;
          v63 = *((_QWORD *)a2 + 1);
          if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_235;
          *((_QWORD *)this + 13) = *(_QWORD *)(*(_QWORD *)a2 + v63);
          goto LABEL_237;
        case 7u:
          if (v24 != 2)
          {
            v107 = (char *)*((_QWORD *)this + 5);
            v106 = *((_QWORD *)this + 6);
            if ((unint64_t)v107 >= v106)
            {
              v122 = (char *)*v9;
              v123 = (v107 - (_BYTE *)*v9) >> 3;
              v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 61)
LABEL_250:
                sub_10000D5F8();
              v125 = v106 - (_QWORD)v122;
              if (v125 >> 2 > v124)
                v124 = v125 >> 2;
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v124;
              if (v126)
              {
                v127 = (char *)sub_10000D60C((uint64_t)v147, v126);
                v122 = (char *)*((_QWORD *)this + 4);
                v107 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v127 = 0;
              }
              v138 = &v127[8 * v123];
              *(_QWORD *)v138 = 0;
              v103 = v138 + 8;
              while (v107 != v122)
              {
                v139 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v138 - 1) = v139;
                v138 -= 8;
              }
              *((_QWORD *)this + 4) = v138;
              *((_QWORD *)this + 5) = v103;
              *((_QWORD *)this + 6) = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *(_QWORD *)v107 = 0;
              v103 = v107 + 8;
            }
            *((_QWORD *)this + 5) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark(a2, v149) & 1) != 0)
            return 0;
          v64 = *((_QWORD *)a2 + 1);
          v65 = *((_QWORD *)a2 + 2);
          while (v64 < v65 && !*((_BYTE *)a2 + 24))
          {
            v67 = (char *)*((_QWORD *)this + 5);
            v66 = *((_QWORD *)this + 6);
            if ((unint64_t)v67 >= v66)
            {
              v69 = (char *)*v9;
              v70 = (v67 - (_BYTE *)*v9) >> 3;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61)
                goto LABEL_250;
              v72 = v66 - (_QWORD)v69;
              if (v72 >> 2 > v71)
                v71 = v72 >> 2;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                v73 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                v74 = (char *)sub_10000D60C((uint64_t)v147, v73);
                v69 = (char *)*((_QWORD *)this + 4);
                v67 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v74 = 0;
              }
              v75 = &v74[8 * v70];
              *(_QWORD *)v75 = 0;
              v68 = v75 + 8;
              while (v67 != v69)
              {
                v76 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              *((_QWORD *)this + 4) = v75;
              *((_QWORD *)this + 5) = v68;
              *((_QWORD *)this + 6) = &v74[8 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_QWORD *)v67 = 0;
              v68 = v67 + 8;
            }
            *((_QWORD *)this + 5) = v68;
            v77 = *((_QWORD *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_152;
            *(v68 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v77);
            v65 = *((_QWORD *)a2 + 2);
            v64 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v64;
          }
          goto LABEL_153;
        case 8u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v149) & 1) != 0)
              return 0;
            v78 = *((_QWORD *)a2 + 1);
            v79 = *((_QWORD *)a2 + 2);
            while (v78 < v79 && !*((_BYTE *)a2 + 24))
            {
              v81 = (char *)*((_QWORD *)this + 2);
              v80 = *((_QWORD *)this + 3);
              if ((unint64_t)v81 >= v80)
              {
                v83 = (char *)*v8;
                v84 = (v81 - (_BYTE *)*v8) >> 3;
                v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 61)
                  goto LABEL_251;
                v86 = v80 - (_QWORD)v83;
                if (v86 >> 2 > v85)
                  v85 = v86 >> 2;
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
                  v87 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v87 = v85;
                if (v87)
                {
                  v88 = (char *)sub_10000D60C((uint64_t)v148, v87);
                  v83 = (char *)*((_QWORD *)this + 1);
                  v81 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v88 = 0;
                }
                v89 = &v88[8 * v84];
                *(_QWORD *)v89 = 0;
                v82 = v89 + 8;
                while (v81 != v83)
                {
                  v90 = *((_QWORD *)v81 - 1);
                  v81 -= 8;
                  *((_QWORD *)v89 - 1) = v90;
                  v89 -= 8;
                }
                *((_QWORD *)this + 1) = v89;
                *((_QWORD *)this + 2) = v82;
                *((_QWORD *)this + 3) = &v88[8 * v87];
                if (v83)
                  operator delete(v83);
              }
              else
              {
                *(_QWORD *)v81 = 0;
                v82 = v81 + 8;
              }
              *((_QWORD *)this + 2) = v82;
              v91 = *((_QWORD *)a2 + 1);
              if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_152:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v82 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v91);
              v79 = *((_QWORD *)a2 + 2);
              v78 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v78;
            }
LABEL_153:
            PB::Reader::recallMark(a2, v149);
          }
          else
          {
            v109 = (char *)*((_QWORD *)this + 2);
            v108 = *((_QWORD *)this + 3);
            if ((unint64_t)v109 >= v108)
            {
              v128 = (char *)*v8;
              v129 = (v109 - (_BYTE *)*v8) >> 3;
              v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 61)
LABEL_251:
                sub_10000D5F8();
              v131 = v108 - (_QWORD)v128;
              if (v131 >> 2 > v130)
                v130 = v131 >> 2;
              if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v130;
              if (v132)
              {
                v133 = (char *)sub_10000D60C((uint64_t)v148, v132);
                v128 = (char *)*((_QWORD *)this + 1);
                v109 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v133 = 0;
              }
              v140 = &v133[8 * v129];
              *(_QWORD *)v140 = 0;
              v103 = v140 + 8;
              while (v109 != v128)
              {
                v141 = *((_QWORD *)v109 - 1);
                v109 -= 8;
                *((_QWORD *)v140 - 1) = v141;
                v140 -= 8;
              }
              *((_QWORD *)this + 1) = v140;
              *((_QWORD *)this + 2) = v103;
              *((_QWORD *)this + 3) = &v133[8 * v132];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *(_QWORD *)v109 = 0;
              v103 = v109 + 8;
            }
            *((_QWORD *)this + 2) = v103;
LABEL_233:
            v142 = *((_QWORD *)a2 + 1);
            if (v142 <= 0xFFFFFFFFFFFFFFF7 && v142 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v103 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v142);
LABEL_237:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_235:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_238:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 9u:
          *((_WORD *)this + 86) |= 0x80u;
          v92 = *((_QWORD *)a2 + 1);
          if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_235;
          *((_QWORD *)this + 20) = *(_QWORD *)(*(_QWORD *)a2 + v92);
          goto LABEL_237;
        case 0xAu:
          *((_WORD *)this + 86) |= 0x20u;
          v93 = *((_QWORD *)a2 + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_235;
          *((_QWORD *)this + 18) = *(_QWORD *)(*(_QWORD *)a2 + v93);
          goto LABEL_237;
        case 0xBu:
          *((_WORD *)this + 86) |= 0x40u;
          v94 = *((_QWORD *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_235;
          *((_QWORD *)this + 19) = *(_QWORD *)(*(_QWORD *)a2 + v94);
          goto LABEL_237;
        case 0xCu:
          *((_WORD *)this + 86) |= 8u;
          v95 = *((_QWORD *)a2 + 1);
          if (v95 > 0xFFFFFFFFFFFFFFF7 || v95 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_235;
          *((_QWORD *)this + 16) = *(_QWORD *)(*(_QWORD *)a2 + v95);
          goto LABEL_237;
        case 0xDu:
          *((_WORD *)this + 86) |= 4u;
          v96 = *((_QWORD *)a2 + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_235;
          *((_QWORD *)this + 15) = *(_QWORD *)(*(_QWORD *)a2 + v96);
          goto LABEL_237;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_238;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  __int16 v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  __int16 v18;

  v3 = this;
  v4 = *(_WORD *)(this + 172);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 136), 1u);
    v4 = *(_WORD *)(v3 + 172);
  }
  if ((v4 & 0x100) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 2u);
  v5 = *(double **)(v3 + 80);
  v6 = *(double **)(v3 + 88);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  v8 = *(double **)(v3 + 56);
  v9 = *(double **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 4u);
  }
  v11 = *(_WORD *)(v3 + 172);
  if ((v11 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 112), 5u);
    v11 = *(_WORD *)(v3 + 172);
  }
  if ((v11 & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(v3 + 104), 6u);
  v12 = *(double **)(v3 + 32);
  v13 = *(double **)(v3 + 40);
  while (v12 != v13)
  {
    v14 = *v12++;
    this = PB::Writer::write(a2, v14, 7u);
  }
  v15 = *(double **)(v3 + 8);
  v16 = *(double **)(v3 + 16);
  while (v15 != v16)
  {
    v17 = *v15++;
    this = PB::Writer::write(a2, v17, 8u);
  }
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 160), 9u);
    v18 = *(_WORD *)(v3 + 172);
    if ((v18 & 0x20) == 0)
    {
LABEL_23:
      if ((v18 & 0x40) == 0)
        goto LABEL_24;
      goto LABEL_29;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_23;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0xAu);
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x40) == 0)
  {
LABEL_24:
    if ((v18 & 8) == 0)
      goto LABEL_25;
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0xBu);
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 8) == 0)
  {
LABEL_25:
    if ((v18 & 4) == 0)
      return this;
    return PB::Writer::write(a2, *(double *)(v3 + 120), 0xDu);
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xCu);
  if ((*(_WORD *)(v3 + 172) & 4) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 120), 0xDu);
  return this;
}

BOOL CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  _BOOL8 v16;

  v2 = *(_WORD *)(a1 + 172);
  v3 = *(_WORD *)(a2 + 172);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 172) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 172) & 0x100) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 172) & 0x100) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 80);
  v4 = *(double **)(a1 + 88);
  v6 = *(double **)(a2 + 80);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 88) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(double **)(a1 + 56);
  v7 = *(double **)(a1 + 64);
  v9 = *(double **)(a2 + 56);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 64) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v11 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  v12 = *(double **)(a2 + 32);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 40) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  v14 = *(double **)(a1 + 8);
  v13 = *(double **)(a1 + 16);
  v15 = *(double **)(a2 + 8);
  if ((char *)v13 - (char *)v14 != *(_QWORD *)(a2 + 16) - (_QWORD)v15)
    return 0;
  while (v14 != v13)
  {
    if (*v14 != *v15)
      return 0;
    ++v14;
    ++v15;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v16 = (v3 & 4) == 0;
  if ((v2 & 4) != 0)
    return (v3 & 4) != 0 && *(double *)(a1 + 120) == *(double *)(a2 + 120);
  return v16;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::hash_value(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;

  if ((*((_WORD *)this + 86) & 0x10) != 0)
  {
    if (*((double *)this + 17) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 17);
    if ((*((_WORD *)this + 86) & 0x100) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_WORD *)this + 86) & 0x100) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 42);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = PBHashBytes(*((_QWORD *)this + 10), *((_QWORD *)this + 11) - *((_QWORD *)this + 10));
  v5 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  v6 = *((_WORD *)this + 86);
  if ((v6 & 2) != 0)
  {
    if (*((double *)this + 14) == 0.0)
      v7 = 0;
    else
      v7 = *((_QWORD *)this + 14);
    if ((v6 & 1) != 0)
      goto LABEL_11;
LABEL_18:
    v8 = 0;
    goto LABEL_19;
  }
  v7 = 0;
  if ((v6 & 1) == 0)
    goto LABEL_18;
LABEL_11:
  if (*((double *)this + 13) == 0.0)
    v8 = 0;
  else
    v8 = *((_QWORD *)this + 13);
LABEL_19:
  v9 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v10 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v11 = *((_WORD *)this + 86);
  if ((v11 & 0x80) == 0)
  {
    v12 = 0.0;
    if ((v11 & 0x20) != 0)
      goto LABEL_21;
LABEL_36:
    v13 = 0.0;
    if ((v11 & 0x40) != 0)
      goto LABEL_24;
LABEL_37:
    v14 = 0.0;
    if ((v11 & 8) != 0)
      goto LABEL_27;
    goto LABEL_38;
  }
  v12 = *((double *)this + 20);
  if (v12 == 0.0)
    v12 = 0.0;
  if ((v11 & 0x20) == 0)
    goto LABEL_36;
LABEL_21:
  v13 = *((double *)this + 18);
  if (v13 == 0.0)
    v13 = 0.0;
  if ((v11 & 0x40) == 0)
    goto LABEL_37;
LABEL_24:
  v14 = *((double *)this + 19);
  if (v14 == 0.0)
    v14 = 0.0;
  if ((v11 & 8) != 0)
  {
LABEL_27:
    v15 = *((double *)this + 16);
    if (v15 == 0.0)
      v15 = 0.0;
    if ((v11 & 4) != 0)
      goto LABEL_30;
LABEL_39:
    v16 = 0.0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16;
  }
LABEL_38:
  v15 = 0.0;
  if ((v11 & 4) == 0)
    goto LABEL_39;
LABEL_30:
  v16 = *((double *)this + 15);
  if (v16 == 0.0)
    v16 = 0.0;
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ *(_QWORD *)&v12 ^ *(_QWORD *)&v13 ^ *(_QWORD *)&v14 ^ *(_QWORD *)&v15 ^ *(_QWORD *)&v16;
}

double CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  double result;

  *(_QWORD *)this = off_100351868;
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351868;
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_100351868;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate(this);
  operator delete();
}

CMMsl::HeadToHeadsetTransformationEstimate *CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this, const CMMsl::HeadToHeadsetTransformationEstimate *a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_100351868;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((_BYTE *)a2 + 80) & 4) != 0)
  {
    v5 = *((_QWORD *)a2 + 9);
    *((_BYTE *)this + 80) = 4;
    *((_QWORD *)this + 9) = v5;
  }
  if (this != a2)
  {
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  }
  v6 = *((_BYTE *)a2 + 80);
  if ((v6 & 2) != 0)
  {
    v7 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 80) |= 2u;
    *((_QWORD *)this + 8) = v7;
    v6 = *((_BYTE *)a2 + 80);
  }
  if ((v6 & 1) != 0)
  {
    v8 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 80) |= 1u;
    *((_QWORD *)this + 7) = v8;
  }
  return this;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::operator=(uint64_t a1, const CMMsl::HeadToHeadsetTransformationEstimate *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if ((const CMMsl::HeadToHeadsetTransformationEstimate *)a1 != a2)
  {
    CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v15 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v7;
    v13 = v5;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v14 = v8;
    CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeadToHeadsetTransformationEstimate *a2, CMMsl::HeadToHeadsetTransformationEstimate *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  result = *((double *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100351868;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (a1 != a2)
  {
    CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate((uint64_t)v10, a2);
    v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v15;
    v15 = v4;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    v12 = v7;
    v13 = v5;
    v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    v14 = v8;
    CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10);
  }
  return a1;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::formatText(CMMsl::HeadToHeadsetTransformationEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 80) & 1) != 0)
    PB::TextFormatter::format(a2, "lastUpdateTimestamp", *((double *)this + 7));
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "stateCov", v7);
  }
  if ((*((_BYTE *)this + 80) & 2) != 0)
    PB::TextFormatter::format(a2, "stateCovTrace", *((double *)this + 8));
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "stateQfb", v10);
  }
  if ((*((_BYTE *)this + 80) & 4) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::HeadToHeadsetTransformationEstimate::readFrom(CMMsl::HeadToHeadsetTransformationEstimate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE v79[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 80) |= 4u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_120;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          goto LABEL_122;
        case 2u:
          if (v24 != 2)
          {
            v57 = (char *)*((_QWORD *)this + 5);
            v56 = *((_QWORD *)this + 6);
            if ((unint64_t)v57 >= v56)
            {
              v61 = (char *)*v10;
              v62 = (v57 - (_BYTE *)*v10) >> 3;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61)
LABEL_131:
                sub_10000D5F8();
              v64 = v56 - (_QWORD)v61;
              if (v64 >> 2 > v63)
                v63 = v64 >> 2;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_10000D60C((uint64_t)v11, v65);
                v61 = (char *)*((_QWORD *)this + 4);
                v57 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v66 = 0;
              }
              v73 = &v66[8 * v62];
              *(_QWORD *)v73 = 0;
              v58 = v73 + 8;
              while (v57 != v61)
              {
                v74 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v73 - 1) = v74;
                v73 -= 8;
              }
              *((_QWORD *)this + 4) = v73;
              *((_QWORD *)this + 5) = v58;
              *((_QWORD *)this + 6) = &v66[8 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_QWORD *)v57 = 0;
              v58 = v57 + 8;
            }
            *((_QWORD *)this + 5) = v58;
            goto LABEL_118;
          }
          if ((PB::Reader::placeMark(a2, v79) & 1) != 0)
            return 0;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          while (v26 < v27 && !*((_BYTE *)a2 + 24))
          {
            v29 = (char *)*((_QWORD *)this + 5);
            v28 = *((_QWORD *)this + 6);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_131;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_10000D60C((uint64_t)v11, v35);
                v31 = (char *)*((_QWORD *)this + 4);
                v29 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((_QWORD *)this + 4) = v37;
              *((_QWORD *)this + 5) = v30;
              *((_QWORD *)this + 6) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *((_QWORD *)this + 5) = v30;
            v39 = *((_QWORD *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_86;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v39);
            v27 = *((_QWORD *)a2 + 2);
            v26 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v26;
          }
          goto LABEL_87;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v79) & 1) != 0)
              return 0;
            v40 = *((_QWORD *)a2 + 1);
            v41 = *((_QWORD *)a2 + 2);
            while (v40 < v41 && !*((_BYTE *)a2 + 24))
            {
              v43 = (char *)*((_QWORD *)this + 2);
              v42 = *((_QWORD *)this + 3);
              if ((unint64_t)v43 >= v42)
              {
                v45 = (char *)*v8;
                v46 = (v43 - (_BYTE *)*v8) >> 3;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_132;
                v48 = v42 - (_QWORD)v45;
                if (v48 >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v50 = (char *)sub_10000D60C((uint64_t)v9, v49);
                  v45 = (char *)*((_QWORD *)this + 1);
                  v43 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v50 = 0;
                }
                v51 = &v50[8 * v46];
                *(_QWORD *)v51 = 0;
                v44 = v51 + 8;
                while (v43 != v45)
                {
                  v52 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *((_QWORD *)this + 1) = v51;
                *((_QWORD *)this + 2) = v44;
                *((_QWORD *)this + 3) = &v50[8 * v49];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_QWORD *)v43 = 0;
                v44 = v43 + 8;
              }
              *((_QWORD *)this + 2) = v44;
              v53 = *((_QWORD *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_86:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v53);
              v41 = *((_QWORD *)a2 + 2);
              v40 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v40;
            }
LABEL_87:
            PB::Reader::recallMark(a2, v79);
          }
          else
          {
            v60 = (char *)*((_QWORD *)this + 2);
            v59 = *((_QWORD *)this + 3);
            if ((unint64_t)v60 >= v59)
            {
              v67 = (char *)*v8;
              v68 = (v60 - (_BYTE *)*v8) >> 3;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 61)
LABEL_132:
                sub_10000D5F8();
              v70 = v59 - (_QWORD)v67;
              if (v70 >> 2 > v69)
                v69 = v70 >> 2;
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                v71 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v71 = v69;
              if (v71)
              {
                v72 = (char *)sub_10000D60C((uint64_t)v9, v71);
                v67 = (char *)*((_QWORD *)this + 1);
                v60 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v72 = 0;
              }
              v75 = &v72[8 * v68];
              *(_QWORD *)v75 = 0;
              v58 = v75 + 8;
              while (v60 != v67)
              {
                v76 = *((_QWORD *)v60 - 1);
                v60 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              *((_QWORD *)this + 1) = v75;
              *((_QWORD *)this + 2) = v58;
              *((_QWORD *)this + 3) = &v72[8 * v71];
              if (v67)
                operator delete(v67);
            }
            else
            {
              *(_QWORD *)v60 = 0;
              v58 = v60 + 8;
            }
            *((_QWORD *)this + 2) = v58;
LABEL_118:
            v77 = *((_QWORD *)a2 + 1);
            if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v58 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v77);
LABEL_122:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_120:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_123:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 80) |= 2u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_120;
          *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v54);
          goto LABEL_122;
        case 5u:
          *((_BYTE *)this + 80) |= 1u;
          v55 = *((_QWORD *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_120;
          *((_QWORD *)this + 7) = *(_QWORD *)(*(_QWORD *)a2 + v55);
          goto LABEL_122;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_123;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  char v10;

  v3 = this;
  if ((*(_BYTE *)(this + 80) & 4) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 72), 1u);
  v4 = *(double **)(v3 + 32);
  v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  v7 = *(double **)(v3 + 8);
  v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  v10 = *(_BYTE *)(v3 + 80);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 64), 4u);
    v10 = *(_BYTE *)(v3 + 80);
  }
  if ((v10 & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 56), 5u);
  return this;
}

BOOL CMMsl::HeadToHeadsetTransformationEstimate::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  _BOOL8 v8;

  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 80) & 4) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 8);
  v5 = *(double **)(a1 + 16);
  v7 = *(double **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  if ((*(_BYTE *)(a1 + 80) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 80) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 80) & 2) != 0)
  {
    return 0;
  }
  v8 = (*(_BYTE *)(a2 + 80) & 1) == 0;
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    return (*(_BYTE *)(a2 + 80) & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  return v8;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::hash_value(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;

  if ((*((_BYTE *)this + 80) & 4) != 0)
  {
    if (*((double *)this + 9) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 9);
  }
  else
  {
    v2 = 0;
  }
  v3 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v4 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 80) & 2) != 0)
  {
    v5 = *((double *)this + 8);
    if (v5 == 0.0)
      v5 = 0.0;
    if ((*((_BYTE *)this + 80) & 1) != 0)
      goto LABEL_8;
LABEL_14:
    v6 = 0.0;
    return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
  }
  v5 = 0.0;
  if ((*((_BYTE *)this + 80) & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v6 = *((double *)this + 7);
  if (v6 == 0.0)
    v6 = 0.0;
  return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5 ^ *(_QWORD *)&v6;
}

_QWORD *CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(_QWORD *this)
{
  *this = off_1003518A0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003518A0;
  this[1] = 0;
  return this;
}

void CMMsl::HeadTrackingBehaviorUpdate::~HeadTrackingBehaviorUpdate(CMMsl::HeadTrackingBehaviorUpdate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(uint64_t this, const CMMsl::HeadTrackingBehaviorUpdate *a2)
{
  int v2;

  *(_QWORD *)this = off_1003518A0;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = off_1003518A0;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003518A0;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003518A0;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HeadTrackingBehaviorUpdate *a2, CMMsl::HeadTrackingBehaviorUpdate *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_1003518A0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_1003518A0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::formatText(CMMsl::HeadTrackingBehaviorUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "trackingBehavior", *((_DWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::readFrom(CMMsl::HeadTrackingBehaviorUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::HeadTrackingBehaviorUpdate::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::hash_value(CMMsl::HeadTrackingBehaviorUpdate *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

_QWORD *CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(_QWORD *this)
{
  *this = off_1003518D8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003518D8;
  this[1] = 0;
  return this;
}

void CMMsl::HeadTrackingClientModeUpdate::~HeadTrackingClientModeUpdate(CMMsl::HeadTrackingClientModeUpdate *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(uint64_t this, const CMMsl::HeadTrackingClientModeUpdate *a2)
{
  int v2;

  *(_QWORD *)this = off_1003518D8;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(_QWORD *)this = off_1003518D8;
  *(_QWORD *)(this + 8) = 0;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003518D8;
    v3 = *(unsigned __int8 *)(a2 + 12);
    v4 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003518D8;
    v3 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HeadTrackingClientModeUpdate *a2, CMMsl::HeadTrackingClientModeUpdate *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_1003518D8;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_1003518D8;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::formatText(CMMsl::HeadTrackingClientModeUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 12) & 1) != 0)
    PB::TextFormatter::format(a2, "clientMode", *((_DWORD *)this + 2));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::readFrom(CMMsl::HeadTrackingClientModeUpdate *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 12) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)a2 + 1);
          else
            v2 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)a2 + 1);
        v3 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  if ((*(_BYTE *)(this + 12) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  return this;
}

BOOL CMMsl::HeadTrackingClientModeUpdate::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::hash_value(CMMsl::HeadTrackingClientModeUpdate *this)
{
  if ((*((_BYTE *)this + 12) & 1) != 0)
    return *((int *)this + 2);
  else
    return 0;
}

uint64_t CMMsl::HeartRateReference::HeartRateReference(uint64_t this)
{
  *(_QWORD *)this = off_100351910;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351910;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::HeartRateReference::~HeartRateReference(CMMsl::HeartRateReference *this)
{
  PB::Base::~Base(this);
  operator delete();
}

double CMMsl::HeartRateReference::HeartRateReference(CMMsl::HeartRateReference *this, const CMMsl::HeartRateReference *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  double result;

  *(_QWORD *)this = off_100351910;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((double *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *((double *)a2 + 2);
    *((_BYTE *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::HeartRateReference::operator=(uint64_t a1, uint64_t a2, double a3, double a4)
{
  void (**v5)(CMMsl::HeartRateReference *__hidden);
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[2];
  __int128 v13;
  int v14;

  if (a1 != a2)
  {
    v5 = off_100351910;
    v12[0] = off_100351910;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 32);
    if ((v6 & 1) != 0)
    {
      v5 = *(void (***)(CMMsl::HeartRateReference *__hidden))(a2 + 8);
      v7 = 1;
      LOBYTE(v14) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        a3 = *(double *)(a2 + 24);
        v7 |= 4u;
        LOBYTE(v14) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 32) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      a4 = *(double *)(a2 + 16);
      LOBYTE(v14) = v7 | 2;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v14;
    v14 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    v12[1] = v9;
    v10 = *(_OWORD *)(a1 + 16);
    *(double *)(a1 + 16) = a4;
    *(double *)(a1 + 24) = a3;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeartRateReference *a2, CMMsl::HeartRateReference *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::HeartRateReference::HeartRateReference(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100351910;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100351910;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::HeartRateReference::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[0] = off_100351910;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HeartRateReference::formatText(CMMsl::HeartRateReference *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 2));
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "bpm", *((_QWORD *)this + 1));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeartRateReference::readFrom(CMMsl::HeartRateReference *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  for (i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)a2 + 24))
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)a2 + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((_BYTE *)this + 32) |= 2u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_47:
        v2 = *((_QWORD *)a2 + 1) + 8;
        *((_QWORD *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *((_BYTE *)this + 32) |= 1u;
          v21 = *((_QWORD *)a2 + 1);
          v2 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v28 = 0;
            v29 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)a2 + 1);
            while (1)
            {
              if (v2 == v21)
              {
                v25 = 0;
                *((_BYTE *)a2 + 24) = 1;
                goto LABEL_52;
              }
              v30 = v21++;
              v31 = *(_BYTE *)(v22 + v30);
              *((_QWORD *)a2 + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0)
                break;
              v28 += 7;
              v14 = v29++ > 8;
              if (v14)
              {
                v25 = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)a2 + 24))
              v25 = 0;
LABEL_51:
            v2 = v30 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)a2 + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                v25 = 0;
                break;
              }
            }
          }
LABEL_52:
          *((_QWORD *)this + 1) = v25;
        }
        else
        {
          result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((_BYTE *)this + 32) |= 4u;
      v2 = *((_QWORD *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
      {
        *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)a2 + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::HeartRateReference::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_QWORD *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
    }
  }
  else if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  return this;
}

BOOL CMMsl::HeartRateReference::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 2) == 0;
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    return (*(_BYTE *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

uint64_t CMMsl::HeartRateReference::hash_value(CMMsl::HeartRateReference *this)
{
  uint64_t v1;
  double v2;
  double v3;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 32) & 4) != 0)
    {
LABEL_3:
      v2 = *((double *)this + 3);
      if (v2 == 0.0)
        v2 = 0.0;
      if ((*((_BYTE *)this + 32) & 2) != 0)
        goto LABEL_6;
LABEL_11:
      v3 = 0.0;
      return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_3;
  }
  v2 = 0.0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_11;
LABEL_6:
  v3 = *((double *)this + 2);
  if (v3 == 0.0)
    v3 = 0.0;
  return *(_QWORD *)&v2 ^ v1 ^ *(_QWORD *)&v3;
}

_QWORD *CMMsl::HgAccel::HgAccel(_QWORD *this)
{
  *this = off_100351948;
  this[1] = 0;
  return this;
}

{
  *this = off_100351948;
  this[1] = 0;
  return this;
}

void CMMsl::HgAccel::~HgAccel(CMMsl::HgAccel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351948;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351948;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351948;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::HgAccel::HgAccel(_QWORD *this, const CMMsl::HgAccel *a2)
{
  *this = off_100351948;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::HgAccel *CMMsl::HgAccel::operator=(const CMMsl::HgAccel *a1, const CMMsl::HgAccel *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::HgAccel *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::HgAccel::HgAccel(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100351948;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HgAccel *a2, CMMsl::HgAccel *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::HgAccel::HgAccel(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100351948;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100351948;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::HgAccel::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100351948;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::HgAccel::formatText(CMMsl::HgAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HgAccel::readFrom(CMMsl::HgAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HgAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::HgAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

CMMsl::Accel *CMMsl::HgAccel::hash_value(CMMsl::HgAccel *this)
{
  CMMsl::Accel *result;

  result = (CMMsl::Accel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  return result;
}

uint64_t CMMsl::HgAccel::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::ISPPacket::ISPPacket(uint64_t this)
{
  *(_QWORD *)this = off_100351980;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351980;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

void CMMsl::ISPPacket::~ISPPacket(CMMsl::ISPPacket *this)
{
  PB::Base::~Base(this);
  operator delete();
}

float CMMsl::ISPPacket::ISPPacket(CMMsl::ISPPacket *this, const CMMsl::ISPPacket *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)this = off_100351980;
  *((_DWORD *)this + 32) = 0;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *((_DWORD *)this + 32) = 1;
    *((_QWORD *)this + 1) = v4;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 26);
    v3 |= 0x100000u;
    *((_DWORD *)this + 32) = v3;
    *((_DWORD *)this + 26) = v4;
    v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 27);
    v3 |= 0x200000u;
    *((_DWORD *)this + 32) = v3;
    *((_DWORD *)this + 27) = v4;
    v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x80000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x400000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 28) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x80000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 25) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x10000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 22) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x20000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 23) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x40000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 24) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x8000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 21) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x800u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 17) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x1000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 18) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x2000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 19) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  v4 = *((_QWORD *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 32) = v3;
  *((_QWORD *)this + 4) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v5 = *((_DWORD *)a2 + 16);
  v3 |= 0x400u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 16) = v5;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v4 = *((_QWORD *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 32) = v3;
  *((_QWORD *)this + 2) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 13) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 14) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x200u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 15) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x4000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 20) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x800000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 29) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 30) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v2 & 4) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 31) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_27:
    if ((v2 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  v4 = *((_QWORD *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 32) = v3;
  *((_QWORD *)this + 3) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_28:
    if ((v2 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 10) = v4;
  v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 11) = v4;
  if ((*((_DWORD *)a2 + 32) & 0x40) == 0)
    return *(float *)&v4;
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 32) = v3 | 0x40;
  *((_DWORD *)this + 12) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::ISPPacket::operator=(CMMsl *a1, const CMMsl::ISPPacket *a2)
{
  CMMsl::ISPPacket *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::ISPPacket::ISPPacket((CMMsl::ISPPacket *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ISPPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ISPPacket *a2, CMMsl::ISPPacket *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  LODWORD(v7) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  LODWORD(v7) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v7;
  LODWORD(v7) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v7;
  LODWORD(v7) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v7;
  LODWORD(v7) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  LODWORD(v8) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::ISPPacket::ISPPacket(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351980;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::ISPPacket::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::ISPPacket *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ISPPacket::ISPPacket((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ISPPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ISPPacket::formatText(CMMsl::ISPPacket *this, PB::TextFormatter *a2, const char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "accelUnfilteredX", *((float *)this + 10));
    v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelUnfilteredY", *((float *)this + 11));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "accelUnfilteredZ", *((float *)this + 12));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "accelX", *((float *)this + 13));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "accelY", *((float *)this + 14));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "accelZ", *((float *)this + 15));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "flags", *((_DWORD *)this + 16));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "gravityX", *((float *)this + 17));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "gravityY", *((float *)this + 18));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "gravityZ", *((float *)this + 19));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gyroBiasErrorEstimate", *((float *)this + 20));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "quaternionPredictedW", *((float *)this + 21));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "quaternionPredictedX", *((float *)this + 22));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "quaternionPredictedY", *((float *)this + 23));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "quaternionPredictedZ", *((float *)this + 24));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 25));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 26));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 27));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 28));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 29));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 30));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 1) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 31));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if ((v5 & 2) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(a2, "timestampAccelUnfiltered", *((double *)this + 3));
    if ((*((_DWORD *)this + 32) & 8) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "timestampAccel", *((double *)this + 2));
  v5 = *((_DWORD *)this + 32);
  if ((v5 & 4) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 8) != 0)
LABEL_27:
    PB::TextFormatter::format(a2, "timestampPrediction", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ISPPacket::readFrom(CMMsl::ISPPacket *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 2u:
              *((_DWORD *)this + 32) |= 0x100000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 26) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 3u:
              *((_DWORD *)this + 32) |= 0x200000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 27) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 4u:
              *((_DWORD *)this + 32) |= 0x400000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 28) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 5u:
              *((_DWORD *)this + 32) |= 0x80000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 6u:
              *((_DWORD *)this + 32) |= 0x10000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 22) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 7u:
              *((_DWORD *)this + 32) |= 0x20000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 23) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 8u:
              *((_DWORD *)this + 32) |= 0x40000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 9u:
              *((_DWORD *)this + 32) |= 0x8000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0xAu:
              *((_DWORD *)this + 32) |= 0x800u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 17) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0xBu:
              *((_DWORD *)this + 32) |= 0x1000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 18) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0xCu:
              *((_DWORD *)this + 32) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 19) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0xDu:
              *((_DWORD *)this + 32) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 0xEu:
              *((_DWORD *)this + 32) |= 0x400u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_126;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_125:
                    v2 = v29 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_125;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_126;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_126:
              *((_DWORD *)this + 16) = v25;
LABEL_117:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *((_DWORD *)this + 32) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_QWORD *)this + 2) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_97;
            case 0x10u:
              *((_DWORD *)this + 32) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x11u:
              *((_DWORD *)this + 32) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 14) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x12u:
              *((_DWORD *)this + 32) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 15) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x13u:
              *((_DWORD *)this + 32) |= 0x4000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x14u:
              *((_DWORD *)this + 32) |= 0x800000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 29) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x15u:
              *((_DWORD *)this + 32) |= 0x1000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 30) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x16u:
              *((_DWORD *)this + 32) |= 0x2000000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 31) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x17u:
              *((_DWORD *)this + 32) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v2);
LABEL_97:
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_116;
            case 0x18u:
              *((_DWORD *)this + 32) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x19u:
              *((_DWORD *)this + 32) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_106;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_115;
            case 0x1Au:
              *((_DWORD *)this + 32) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_115:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_116:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_106:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_117;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ISPPacket::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 128);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 2u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 3u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 4u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 5u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 6u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 7u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 8u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 9u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xAu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xBu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xCu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xDu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0xEu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xFu);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x10u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x11u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x12u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x13u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x14u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x15u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v4 & 4) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x16u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x17u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x18u);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_26:
    if ((v4 & 0x40) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 48), 0x1Au);
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x19u);
  if ((*(_DWORD *)(v3 + 128) & 0x40) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 48), 0x1Au);
  return this;
}

BOOL CMMsl::ISPPacket::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 v4;

  v2 = *(_DWORD *)(a1 + 128);
  v3 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v4 = (*(_DWORD *)(a2 + 128) & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  return v4;
}

uint64_t CMMsl::ISPPacket::hash_value(CMMsl::ISPPacket *this)
{
  int v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  double v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;

  v1 = *((_DWORD *)this + 32);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 0x100000) != 0)
      goto LABEL_3;
LABEL_79:
    v4 = 0;
    if ((v1 & 0x200000) != 0)
      goto LABEL_6;
LABEL_80:
    v6 = 0;
    if ((v1 & 0x400000) != 0)
      goto LABEL_9;
LABEL_81:
    v8 = 0;
    if ((v1 & 0x80000) != 0)
      goto LABEL_12;
LABEL_82:
    v10 = 0;
    if ((v1 & 0x10000) != 0)
      goto LABEL_15;
LABEL_83:
    v12 = 0;
    if ((v1 & 0x20000) != 0)
      goto LABEL_18;
LABEL_84:
    v14 = 0;
    if ((v1 & 0x40000) != 0)
      goto LABEL_21;
LABEL_85:
    v16 = 0;
    if ((v1 & 0x8000) != 0)
      goto LABEL_24;
LABEL_86:
    v18 = 0;
    if ((v1 & 0x800) != 0)
      goto LABEL_27;
LABEL_87:
    v20 = 0;
    if ((v1 & 0x1000) != 0)
      goto LABEL_30;
LABEL_88:
    v22 = 0;
    if ((v1 & 0x2000) != 0)
      goto LABEL_33;
LABEL_89:
    v24 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_36;
LABEL_90:
    v25 = 0.0;
    if ((v1 & 0x400) != 0)
      goto LABEL_39;
    goto LABEL_91;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 0x100000) == 0)
    goto LABEL_79;
LABEL_3:
  v3 = *((float *)this + 26);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 0x200000) == 0)
    goto LABEL_80;
LABEL_6:
  v5 = *((float *)this + 27);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 0x400000) == 0)
    goto LABEL_81;
LABEL_9:
  v7 = *((float *)this + 28);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x80000) == 0)
    goto LABEL_82;
LABEL_12:
  v9 = *((float *)this + 25);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x10000) == 0)
    goto LABEL_83;
LABEL_15:
  v11 = *((float *)this + 22);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x20000) == 0)
    goto LABEL_84;
LABEL_18:
  v13 = *((float *)this + 23);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((v1 & 0x40000) == 0)
    goto LABEL_85;
LABEL_21:
  v15 = *((float *)this + 24);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((v1 & 0x8000) == 0)
    goto LABEL_86;
LABEL_24:
  v17 = *((float *)this + 21);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((v1 & 0x800) == 0)
    goto LABEL_87;
LABEL_27:
  v19 = *((float *)this + 17);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x1000) == 0)
    goto LABEL_88;
LABEL_30:
  v21 = *((float *)this + 18);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((v1 & 0x2000) == 0)
    goto LABEL_89;
LABEL_33:
  v23 = *((float *)this + 19);
  v24 = LODWORD(v23);
  if (v23 == 0.0)
    v24 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_90;
LABEL_36:
  v25 = *((double *)this + 4);
  if (v25 == 0.0)
    v25 = 0.0;
  if ((v1 & 0x400) != 0)
  {
LABEL_39:
    v26 = *((unsigned int *)this + 16);
    if ((v1 & 2) != 0)
      goto LABEL_40;
LABEL_92:
    v27 = 0.0;
    if ((v1 & 0x80) != 0)
      goto LABEL_43;
LABEL_93:
    v29 = 0;
    if ((v1 & 0x100) != 0)
      goto LABEL_46;
LABEL_94:
    v31 = 0;
    if ((v1 & 0x200) != 0)
      goto LABEL_49;
LABEL_95:
    v33 = 0;
    if ((v1 & 0x4000) != 0)
      goto LABEL_52;
LABEL_96:
    v35 = 0;
    if ((v1 & 0x800000) != 0)
      goto LABEL_55;
LABEL_97:
    v37 = 0;
    if ((v1 & 0x1000000) != 0)
      goto LABEL_58;
LABEL_98:
    v39 = 0;
    if ((v1 & 0x2000000) != 0)
      goto LABEL_61;
LABEL_99:
    v41 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_64;
LABEL_100:
    v42 = 0.0;
    if ((v1 & 0x10) != 0)
      goto LABEL_67;
LABEL_101:
    v44 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_70;
    goto LABEL_102;
  }
LABEL_91:
  v26 = 0;
  if ((v1 & 2) == 0)
    goto LABEL_92;
LABEL_40:
  v27 = *((double *)this + 2);
  if (v27 == 0.0)
    v27 = 0.0;
  if ((v1 & 0x80) == 0)
    goto LABEL_93;
LABEL_43:
  v28 = *((float *)this + 13);
  v29 = LODWORD(v28);
  if (v28 == 0.0)
    v29 = 0;
  if ((v1 & 0x100) == 0)
    goto LABEL_94;
LABEL_46:
  v30 = *((float *)this + 14);
  v31 = LODWORD(v30);
  if (v30 == 0.0)
    v31 = 0;
  if ((v1 & 0x200) == 0)
    goto LABEL_95;
LABEL_49:
  v32 = *((float *)this + 15);
  v33 = LODWORD(v32);
  if (v32 == 0.0)
    v33 = 0;
  if ((v1 & 0x4000) == 0)
    goto LABEL_96;
LABEL_52:
  v34 = *((float *)this + 20);
  v35 = LODWORD(v34);
  if (v34 == 0.0)
    v35 = 0;
  if ((v1 & 0x800000) == 0)
    goto LABEL_97;
LABEL_55:
  v36 = *((float *)this + 29);
  v37 = LODWORD(v36);
  if (v36 == 0.0)
    v37 = 0;
  if ((v1 & 0x1000000) == 0)
    goto LABEL_98;
LABEL_58:
  v38 = *((float *)this + 30);
  v39 = LODWORD(v38);
  if (v38 == 0.0)
    v39 = 0;
  if ((v1 & 0x2000000) == 0)
    goto LABEL_99;
LABEL_61:
  v40 = *((float *)this + 31);
  v41 = LODWORD(v40);
  if (v40 == 0.0)
    v41 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_100;
LABEL_64:
  v42 = *((double *)this + 3);
  if (v42 == 0.0)
    v42 = 0.0;
  if ((v1 & 0x10) == 0)
    goto LABEL_101;
LABEL_67:
  v43 = *((float *)this + 10);
  v44 = LODWORD(v43);
  if (v43 == 0.0)
    v44 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_70:
    v45 = *((float *)this + 11);
    v46 = LODWORD(v45);
    if (v45 == 0.0)
      v46 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_73;
LABEL_103:
    v48 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ *(_QWORD *)&v25 ^ v26 ^ *(_QWORD *)&v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ *(_QWORD *)&v42 ^ v44 ^ v46 ^ v48;
  }
LABEL_102:
  v46 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_103;
LABEL_73:
  v47 = *((float *)this + 12);
  v48 = LODWORD(v47);
  if (v47 == 0.0)
    v48 = 0;
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ *(_QWORD *)&v25 ^ v26 ^ *(_QWORD *)&v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ *(_QWORD *)&v42 ^ v44 ^ v46 ^ v48;
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t this)
{
  *(_QWORD *)this = off_1003519B8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003519B8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::InEarAdditionalState::~InEarAdditionalState(CMMsl::InEarAdditionalState *this)
{
  void **v2;

  *(_QWORD *)this = off_1003519B8;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1003519B8;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1003519B8;
  v2 = (void **)((char *)this + 8);
  sub_1002394A8(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t this, const CMMsl::InEarAdditionalState *a2)
{
  int v2;

  *(_QWORD *)this = off_1003519B8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    sub_100062ACC();
  if ((*((_BYTE *)a2 + 36) & 1) != 0)
  {
    v2 = *((_DWORD *)a2 + 8);
    *(_BYTE *)(this + 36) |= 1u;
    *(_DWORD *)(this + 32) = v2;
  }
  return this;
}

uint64_t CMMsl::InEarAdditionalState::operator=(uint64_t a1, const CMMsl::InEarAdditionalState *a2)
{
  __int128 v3;
  uint64_t v4;
  void (**v6)(CMMsl::InEarAdditionalState *__hidden);
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  if ((const CMMsl::InEarAdditionalState *)a1 != a2)
  {
    CMMsl::InEarAdditionalState::InEarAdditionalState((uint64_t)&v6, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    *(_QWORD *)&v3 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v9;
    v9 = v3;
    v6 = off_1003519B8;
    v10 = (void **)&v7;
    sub_1002394A8(&v10);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::InEarAdditionalState *a2, CMMsl::InEarAdditionalState *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  LODWORD(v6) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return this;
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;

  *(_QWORD *)a1 = off_1003519B8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  sub_100239524((_QWORD *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

{
  _OWORD *v4;

  *(_QWORD *)a1 = off_1003519B8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  sub_100239524((_QWORD *)(a1 + 8));
  *v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::InEarAdditionalState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  void (**v11)(CMMsl::InEarAdditionalState *__hidden);
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  if (a1 != a2)
  {
    v11 = off_1003519B8;
    v12 = 0uLL;
    v13 = 0;
    HIDWORD(v14) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    sub_100239524(&v12);
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_DWORD *)(a2 + 32);
    v7 = HIDWORD(v14);
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v12 = v8;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v13 = v9;
    *(_QWORD *)&v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v6;
    *(_DWORD *)(a1 + 36) = v7;
    v14 = v5;
    v11 = off_1003519B8;
    v15 = (void **)&v12;
    sub_1002394A8(&v15);
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::InEarAdditionalState::formatText(CMMsl::InEarAdditionalState *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 36) & 1) != 0)
    PB::TextFormatter::format(a2, "lastSampleId", *((_DWORD *)this + 8));
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "slowOptical");
  }
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarAdditionalState::readFrom(CMMsl::InEarAdditionalState *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 36) |= 1u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v30 = 0;
          v31 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_43;
            }
            v32 = v21 + 1;
            v33 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0)
              break;
            v30 += 7;
            v21 = v32;
            v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_39;
          }
        }
LABEL_43:
        *((_DWORD *)this + 8) = v26;
      }
      else
      {
        if ((_DWORD)v20 == 1)
          sub_100063B60();
        result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarAdditionalState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(const PB::Base ***)(this + 8);
  v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 2u);
  return this;
}

BOOL CMMsl::InEarAdditionalState::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_100063F68((uint64_t *)(a1 + 8), a2 + 8);
  if (result)
  {
    result = (*(_BYTE *)(a2 + 36) & 1) == 0;
    if ((*(_BYTE *)(a1 + 36) & 1) != 0)
      return (*(_BYTE *)(a2 + 36) & 1) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return result;
}

uint64_t CMMsl::InEarAdditionalState::hash_value(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = sub_1000640C0((uint64_t)&v5, this + 1);
  if ((*((_BYTE *)this + 36) & 1) != 0)
    v3 = *((unsigned int *)this + 8);
  else
    v3 = 0;
  return v3 ^ v2;
}

double CMMsl::InEarBaseline::InEarBaseline(CMMsl::InEarBaseline *this)
{
  double result;

  *(_QWORD *)this = off_1003519F0;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 15) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003519F0;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 15) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

void CMMsl::InEarBaseline::~InEarBaseline(CMMsl::InEarBaseline *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = off_1003519F0;
  v4 = (void **)((char *)this + 24);
  sub_1002394A8(&v4);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarBaseline::~InEarBaseline(this);
  operator delete();
}

uint64_t CMMsl::InEarBaseline::InEarBaseline(uint64_t this, const CMMsl::InEarBaseline *a2)
{
  char v2;
  int v3;
  int v4;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)this = off_1003519F0;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_DWORD *)(this + 52) = 0;
  *(_DWORD *)(this + 60) = 0;
  *(_QWORD *)(this + 40) = 0;
  if ((*((_BYTE *)a2 + 60) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 12);
    *(_BYTE *)(this + 60) = 1;
    *(_DWORD *)(this + 48) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 60) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 60) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 13);
    *(_BYTE *)(this + 60) = v2;
    *(_DWORD *)(this + 52) = v4;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 3) != *((_QWORD *)a2 + 4))
    sub_100062ACC();
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  v5 = *((_BYTE *)a2 + 60);
  if ((v5 & 4) != 0)
  {
    v6 = *((_BYTE *)a2 + 56);
    *(_BYTE *)(this + 60) |= 4u;
    *(_BYTE *)(this + 56) = v6;
    v5 = *((_BYTE *)a2 + 60);
  }
  if ((v5 & 8) != 0)
  {
    v7 = *((_BYTE *)a2 + 57);
    *(_BYTE *)(this + 60) |= 8u;
    *(_BYTE *)(this + 57) = v7;
  }
  return this;
}

uint64_t CMMsl::InEarBaseline::operator=(uint64_t a1, const CMMsl::InEarBaseline *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;

  if ((const CMMsl::InEarBaseline *)a1 != a2)
  {
    CMMsl::InEarBaseline::InEarBaseline((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v14;
    v14 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a1 + 57) = v15;
    v15 = v6;
    CMMsl::InEarBaseline::~InEarBaseline((CMMsl::InEarBaseline *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarBaseline *a2, CMMsl::InEarBaseline *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  result = *((double *)a2 + 6);
  v5 = *((_QWORD *)this + 6);
  *((double *)this + 6) = result;
  *((_QWORD *)a2 + 6) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v7;
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v8;
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v9;
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 56);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *((_BYTE *)a2 + 56) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 57);
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  *((_BYTE *)a2 + 57) = v10;
  return result;
}

uint64_t CMMsl::InEarBaseline::InEarBaseline(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1003519F0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  sub_100239524((_QWORD *)(a1 + 24));
  *v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *v4;
  *v4 = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t CMMsl::InEarBaseline::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;

  if (a1 != a2)
  {
    CMMsl::InEarBaseline::InEarBaseline((uint64_t)&v9, a2);
    v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v16;
    v16 = v3;
    v4 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v13;
    v13 = v4;
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    v11 = v5;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    v12 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    LOBYTE(v6) = *(_BYTE *)(a1 + 56);
    *(_BYTE *)(a1 + 56) = v14;
    v14 = v6;
    LOBYTE(v6) = *(_BYTE *)(a1 + 57);
    *(_BYTE *)(a1 + 57) = v15;
    v15 = v6;
    CMMsl::InEarBaseline::~InEarBaseline((CMMsl::InEarBaseline *)&v9);
  }
  return a1;
}

uint64_t CMMsl::InEarBaseline::formatText(CMMsl::InEarBaseline *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "conchaMinAccepted", *((_BYTE *)this + 56));
    v5 = *((_BYTE *)this + 60);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 12));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "newOpenLid");
  v7 = *((_QWORD *)this + 2);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "oldOpenLid");
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  v9 = (uint64_t *)*((_QWORD *)this + 4);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "optical");
  }
  v11 = *((_BYTE *)this + 60);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 13));
    v11 = *((_BYTE *)this + 60);
  }
  if ((v11 & 8) != 0)
    PB::TextFormatter::format(a2, "tragusMinAccepted", *((_BYTE *)this + 57));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarBaseline::readFrom(CMMsl::InEarBaseline *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 60) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_66;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_51:
            LODWORD(v25) = 0;
            goto LABEL_66;
          }
          v45 = 0;
          v46 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v47 = v20 + 1;
              v48 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v47;
              v25 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                v20 = v47;
                v14 = v46++ > 8;
                if (v14)
                  goto LABEL_51;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_66:
          *((_DWORD *)this + 12) = v25;
          goto LABEL_71;
        case 2u:
          *((_BYTE *)this + 60) |= 2u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_70;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_58:
            LODWORD(v34) = 0;
            goto LABEL_70;
          }
          v49 = 0;
          v50 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          break;
        case 3u:
          sub_100063B60();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          *((_BYTE *)this + 60) |= 4u;
          v37 = *((_QWORD *)a2 + 1);
          if (v37 >= *((_QWORD *)a2 + 2))
          {
            v40 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)a2 + v37);
            *((_QWORD *)a2 + 1) = v38;
            v40 = v39 != 0;
          }
          *((_BYTE *)this + 56) = v40;
          goto LABEL_71;
        case 7u:
          *((_BYTE *)this + 60) |= 8u;
          v41 = *((_QWORD *)a2 + 1);
          if (v41 >= *((_QWORD *)a2 + 2))
          {
            v44 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v42 = v41 + 1;
            v43 = *(unsigned __int8 *)(*(_QWORD *)a2 + v41);
            *((_QWORD *)a2 + 1) = v42;
            v44 = v43 != 0;
          }
          *((_BYTE *)this + 57) = v44;
          goto LABEL_71;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_71;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_70;
        }
        v51 = v29 + 1;
        v52 = *(_BYTE *)(v31 + v29);
        *((_QWORD *)a2 + 1) = v51;
        v34 |= (unint64_t)(v52 & 0x7F) << v49;
        if ((v52 & 0x80) == 0)
          break;
        v49 += 7;
        v29 = v51;
        v14 = v50++ > 8;
        if (v14)
          goto LABEL_58;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v34) = 0;
LABEL_70:
      *((_DWORD *)this + 13) = v34;
LABEL_71:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarBaseline::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  char v10;

  v3 = this;
  v4 = *(_BYTE *)(this + 60);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 48), 1u);
    v4 = *(_BYTE *)(v3 + 60);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 2u);
  v5 = *(const PB::Base ***)(v3 + 24);
  v6 = *(const PB::Base ***)(v3 + 32);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7, 3u);
  }
  v8 = *(const PB::Base **)(v3 + 16);
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8, 4u);
  v9 = *(const PB::Base **)(v3 + 8);
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9, 5u);
  v10 = *(_BYTE *)(v3 + 60);
  if ((v10 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 56), 6u);
    v10 = *(_BYTE *)(v3 + 60);
  }
  if ((v10 & 8) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 57), 7u);
  return this;
}

BOOL CMMsl::InEarBaseline::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 1) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 2) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  result = sub_100063F68((uint64_t *)(a1 + 24), a2 + 24);
  if (!result)
    return result;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    if (!v6 || !CMMsl::ClefMeasurement::operator==(v5, v6))
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    if (!v8 || !CMMsl::ClefMeasurement::operator==(v7, v8))
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 60) & 4) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    return 0;
  }
  result = (*(_BYTE *)(a2 + 60) & 8) == 0;
  if ((*(_BYTE *)(a1 + 60) & 8) == 0)
    return result;
  return (*(_BYTE *)(a2 + 60) & 8) != 0 && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57);
}

uint64_t CMMsl::InEarBaseline::hash_value(CMMsl::InEarBaseline *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  float v7;
  float v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  float v16;
  float v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;

  if ((*((_BYTE *)this + 60) & 1) != 0)
  {
    v2 = *((unsigned int *)this + 12);
    if ((*((_BYTE *)this + 60) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 60) & 2) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 13);
      goto LABEL_6;
    }
  }
  v3 = 0;
LABEL_6:
  v4 = sub_1000640C0((uint64_t)&v26, (uint64_t **)this + 3);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *(_BYTE *)(v5 + 16);
    v7 = *(float *)(v5 + 8);
    v8 = *(float *)(v5 + 12);
    v9 = v7 == 0.0 || (v6 & 1) == 0;
    v10 = LODWORD(v7);
    if (v9)
      v10 = 0;
    v11 = v6 & 2;
    v12 = v8 == 0.0 || v11 == 0;
    v13 = LODWORD(v8);
    if (v12)
      v13 = 0;
    v5 = v13 ^ v10;
  }
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    v15 = *(_BYTE *)(v14 + 16);
    v16 = *(float *)(v14 + 8);
    v17 = *(float *)(v14 + 12);
    v18 = v16 == 0.0 || (v15 & 1) == 0;
    v19 = LODWORD(v16);
    if (v18)
      v19 = 0;
    v20 = v15 & 2;
    v21 = v17 == 0.0 || v20 == 0;
    v22 = LODWORD(v17);
    if (v21)
      v22 = 0;
    v14 = v22 ^ v19;
  }
  if ((*((_BYTE *)this + 60) & 4) != 0)
  {
    v23 = *((unsigned __int8 *)this + 56);
    if ((*((_BYTE *)this + 60) & 8) != 0)
      goto LABEL_32;
LABEL_34:
    v24 = 0;
    return v3 ^ v2 ^ v5 ^ v4 ^ v14 ^ v23 ^ v24;
  }
  v23 = 0;
  if ((*((_BYTE *)this + 60) & 8) == 0)
    goto LABEL_34;
LABEL_32:
  v24 = *((unsigned __int8 *)this + 57);
  return v3 ^ v2 ^ v5 ^ v4 ^ v14 ^ v23 ^ v24;
}

uint64_t CMMsl::InEarBaseline::makeOldOpenLid(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

uint64_t CMMsl::InEarBaseline::makeNewOpenLid(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::InEarBaselining::InEarBaselining(uint64_t this)
{
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)this = off_100351A28;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)this = off_100351A28;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::InEarBaselining::~InEarBaselining(CMMsl::InEarBaselining *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100351A28;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarBaselining::~InEarBaselining(this);
  operator delete();
}

uint64_t CMMsl::InEarBaselining::InEarBaselining(uint64_t this, const CMMsl::InEarBaselining *a2)
{
  char v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_100351A28;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  if ((*((_BYTE *)a2 + 56) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 4);
    *(_BYTE *)(this + 56) = 1;
    *(_QWORD *)(this + 32) = v3;
    v2 = 9;
    if ((*((_BYTE *)a2 + 56) & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 8;
  if ((*((_BYTE *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 12);
    *(_BYTE *)(this + 56) = v2;
    *(_DWORD *)(this + 48) = v4;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 3))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  v5 = *((_BYTE *)a2 + 56);
  if ((v5 & 2) != 0)
  {
    v7 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(this + 56) |= 2u;
    *(_DWORD *)(this + 40) = v7;
    v5 = *((_BYTE *)a2 + 56);
    if ((v5 & 0x10) == 0)
    {
LABEL_14:
      if ((v5 & 4) == 0)
        return this;
      goto LABEL_15;
    }
  }
  else if ((*((_BYTE *)a2 + 56) & 0x10) == 0)
  {
    goto LABEL_14;
  }
  v8 = *((_DWORD *)a2 + 13);
  *(_BYTE *)(this + 56) |= 0x10u;
  *(_DWORD *)(this + 52) = v8;
  if ((*((_BYTE *)a2 + 56) & 4) == 0)
    return this;
LABEL_15:
  v6 = *((_DWORD *)a2 + 11);
  *(_BYTE *)(this + 56) |= 4u;
  *(_DWORD *)(this + 44) = v6;
  return this;
}

uint64_t CMMsl::InEarBaselining::operator=(uint64_t a1, const CMMsl::InEarBaselining *a2)
{
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if ((const CMMsl::InEarBaselining *)a1 != a2)
  {
    CMMsl::InEarBaselining::InEarBaselining((uint64_t)&v11, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v3;
    v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v17;
    v17 = v4;
    *(_QWORD *)&v3 = v15;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v3;
    v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v18;
    v18 = v7;
    v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v9;
    v14 = v5;
    v15 = v6;
    CMMsl::InEarBaselining::~InEarBaselining((CMMsl::InEarBaselining *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InEarBaselining *a2, CMMsl::InEarBaselining *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float result;

  v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

uint64_t CMMsl::InEarBaselining::InEarBaselining(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_100351A28;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

uint64_t CMMsl::InEarBaselining::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  if (a1 != a2)
  {
    CMMsl::InEarBaselining::InEarBaselining((uint64_t)&v11, a2);
    v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v3;
    v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v17;
    v17 = v4;
    *(_QWORD *)&v3 = v15;
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v3;
    v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v18;
    v18 = v7;
    v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v13;
    v13 = v9;
    v14 = v5;
    v15 = v6;
    CMMsl::InEarBaselining::~InEarBaselining((CMMsl::InEarBaselining *)&v11);
  }
  return a1;
}

uint64_t CMMsl::InEarBaselining::formatText(CMMsl::InEarBaselining *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "baseline");
  v6 = *((_BYTE *)this + 56);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "conchaOpenResponse", *((float *)this + 10));
    v6 = *((_BYTE *)this + 56);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(a2, "filter", *((float *)this + 11));
  v7 = *((_QWORD *)this + 2);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "lastBaseline");
  if ((*((_BYTE *)this + 56) & 8) != 0)
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 12));
  v8 = *((_QWORD *)this + 3);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "minimum");
  v9 = *((_BYTE *)this + 56);
  if ((v9 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "rho", *((float *)this + 13));
    v9 = *((_BYTE *)this + 56);
  }
  if ((v9 & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarBaselining::readFrom(CMMsl::InEarBaselining *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 56) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_45;
          *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v20);
          v21 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_55;
        case 2u:
          *((_BYTE *)this + 56) |= 8u;
          v23 = *((_QWORD *)a2 + 1);
          v24 = *((_QWORD *)a2 + 2);
          v25 = *(_QWORD *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)a2 + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_59;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v28) = 0;
            goto LABEL_59;
          }
          v34 = 0;
          v35 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)a2 + 1);
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          *((_BYTE *)this + 56) |= 2u;
          v31 = *((_QWORD *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_45;
          *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v31);
          goto LABEL_54;
        case 7u:
          *((_BYTE *)this + 56) |= 0x10u;
          v32 = *((_QWORD *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_45;
          *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v32);
          goto LABEL_54;
        case 8u:
          *((_BYTE *)this + 56) |= 4u;
          v33 = *((_QWORD *)a2 + 1);
          if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *((_QWORD *)a2 + 2))
          {
            *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v33);
LABEL_54:
            v21 = *((_QWORD *)a2 + 1) + 4;
LABEL_55:
            *((_QWORD *)a2 + 1) = v21;
          }
          else
          {
LABEL_45:
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_60;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_60;
      }
      while (1)
      {
        if (v24 == v23)
        {
          LODWORD(v28) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_59;
        }
        v36 = v23 + 1;
        v37 = *(_BYTE *)(v25 + v23);
        *((_QWORD *)a2 + 1) = v36;
        v28 |= (unint64_t)(v37 & 0x7F) << v34;
        if ((v37 & 0x80) == 0)
          break;
        v34 += 7;
        v23 = v36;
        v14 = v35++ > 8;
        if (v14)
          goto LABEL_52;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v28) = 0;
LABEL_59:
      *((_DWORD *)this + 12) = v28;
LABEL_60:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarBaselining::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  char v8;

  v3 = this;
  v4 = *(_BYTE *)(this + 56);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 56);
  }
  if ((v4 & 8) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7, 5u);
  v8 = *(_BYTE *)(v3 + 56);
  if ((v8 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
    v8 = *(_BYTE *)(v3 + 56);
    if ((v8 & 0x10) == 0)
    {
LABEL_13:
      if ((v8 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 44), 8u);
    }
  }
  else if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  if ((*(_BYTE *)(v3 + 56) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 44), 8u);
  return this;
}

BOOL CMMsl::InEarBaselining::operator==(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  v4 = *(_BYTE *)(a1 + 56);
  v5 = *(_BYTE *)(a2 + 56);
  if ((v4 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    if (!v11 || !CMMsl::ClefMeasurement::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  result = (v5 & 4) == 0;
  if ((v4 & 4) == 0)
    return result;
  return (v5 & 4) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
}

uint64_t CMMsl::InEarBaselining::hash_value(CMMsl::InEarBaselining *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  float v5;
  float v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  float v23;
  float v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;

  if ((*((_BYTE *)this + 56) & 1) != 0)
  {
    v1 = *((double *)this + 4);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 56) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 12);
      goto LABEL_8;
    }
  }
  v2 = 0;
LABEL_8:
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 16);
    v5 = *(float *)(v3 + 8);
    v6 = *(float *)(v3 + 12);
    v7 = v5 == 0.0 || (v4 & 1) == 0;
    v8 = LODWORD(v5);
    if (v7)
      v8 = 0;
    v9 = v4 & 2;
    v10 = v6 == 0.0 || v9 == 0;
    v11 = LODWORD(v6);
    if (v10)
      v11 = 0;
    v3 = v11 ^ v8;
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + 16);
    v14 = *(float *)(v12 + 8);
    v15 = *(float *)(v12 + 12);
    v16 = v14 == 0.0 || (v13 & 1) == 0;
    v17 = LODWORD(v14);
    if (v16)
      v17 = 0;
    v18 = v13 & 2;
    v19 = v15 == 0.0 || v18 == 0;
    v20 = LODWORD(v15);
    if (v19)
      v20 = 0;
    v12 = v20 ^ v17;
  }
  v21 = *((_QWORD *)this + 2);
  if (v21)
  {
    v22 = *(_BYTE *)(v21 + 16);
    v23 = *(float *)(v21 + 8);
    v24 = *(float *)(v21 + 12);
    v25 = v23 == 0.0 || (v22 & 1) == 0;
    v26 = LODWORD(v23);
    if (v25)
      v26 = 0;
    v27 = v22 & 2;
    v28 = v24 == 0.0 || v27 == 0;
    v29 = LODWORD(v24);
    if (v28)
      v29 = 0;
    v21 = v29 ^ v26;
  }
  if ((*((_BYTE *)this + 56) & 2) != 0)
  {
    v35 = *((float *)this + 10);
    v30 = LODWORD(v35);
    if (v35 == 0.0)
      v30 = 0;
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
    {
LABEL_46:
      v31 = *((float *)this + 13);
      v32 = LODWORD(v31);
      if (v31 == 0.0)
        v32 = 0;
      if ((*((_BYTE *)this + 56) & 4) != 0)
        goto LABEL_49;
LABEL_56:
      v34 = 0;
      return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v12 ^ v21 ^ v30 ^ v32 ^ v34;
    }
  }
  else
  {
    v30 = 0;
    if ((*((_BYTE *)this + 56) & 0x10) != 0)
      goto LABEL_46;
  }
  v32 = 0;
  if ((*((_BYTE *)this + 56) & 4) == 0)
    goto LABEL_56;
LABEL_49:
  v33 = *((float *)this + 11);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v12 ^ v21 ^ v30 ^ v32 ^ v34;
}

uint64_t CMMsl::InEarBaselining::makeMinimum(uint64_t this)
{
  if (!*(_QWORD *)(this + 24))
    operator new();
  return this;
}

uint64_t CMMsl::InEarBaselining::makeBaseline(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::InEarBaselining::makeLastBaseline(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

uint64_t CMMsl::InEarConstraints::InEarConstraints(uint64_t this)
{
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_100351A60;
  return this;
}

{
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_100351A60;
  return this;
}

void CMMsl::InEarConstraints::~InEarConstraints(CMMsl::InEarConstraints *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_100351A60;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarConstraints::~InEarConstraints(this);
  operator delete();
}

uint64_t CMMsl::InEarConstraints::InEarConstraints(uint64_t this, const CMMsl::InEarConstraints *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  *(_QWORD *)this = off_100351A60;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 16) = 0;
  v2 = *((_WORD *)a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 3);
    *(_WORD *)(this + 48) = 1;
    *(_QWORD *)(this + 24) = v4;
    v3 = 3;
    if ((*((_WORD *)a2 + 24) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 2;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 8);
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 32) = v5;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x80) != 0)
  {
    v8 = *((_BYTE *)a2 + 41);
    *(_WORD *)(this + 48) |= 0x80u;
    *(_BYTE *)(this + 41) = v8;
    v6 = *((_WORD *)a2 + 24);
    if ((v6 & 0x20) == 0)
    {
LABEL_12:
      if ((v6 & 4) == 0)
        goto LABEL_13;
      goto LABEL_23;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_12;
  }
  v9 = *((_BYTE *)a2 + 39);
  *(_WORD *)(this + 48) |= 0x20u;
  *(_BYTE *)(this + 39) = v9;
  v6 = *((_WORD *)a2 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_13:
    if ((v6 & 8) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *((_BYTE *)a2 + 36);
  *(_WORD *)(this + 48) |= 4u;
  *(_BYTE *)(this + 36) = v10;
  v6 = *((_WORD *)a2 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_14:
    if ((v6 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *((_BYTE *)a2 + 37);
  *(_WORD *)(this + 48) |= 8u;
  *(_BYTE *)(this + 37) = v11;
  v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_15:
    if ((v6 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *((_BYTE *)a2 + 40);
  *(_WORD *)(this + 48) |= 0x40u;
  *(_BYTE *)(this + 40) = v12;
  v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x200) == 0)
  {
LABEL_16:
    if ((v6 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *((_BYTE *)a2 + 43);
  *(_WORD *)(this + 48) |= 0x200u;
  *(_BYTE *)(this + 43) = v13;
  v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x100) == 0)
  {
LABEL_17:
    if ((v6 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  v14 = *((_BYTE *)a2 + 42);
  *(_WORD *)(this + 48) |= 0x100u;
  *(_BYTE *)(this + 42) = v14;
  v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_18:
    if ((v6 & 0x400) == 0)
      return this;
    goto LABEL_19;
  }
LABEL_28:
  v15 = *((_BYTE *)a2 + 38);
  *(_WORD *)(this + 48) |= 0x10u;
  *(_BYTE *)(this + 38) = v15;
  if ((*((_WORD *)a2 + 24) & 0x400) == 0)
    return this;
LABEL_19:
  v7 = *((_BYTE *)a2 + 44);
  *(_WORD *)(this + 48) |= 0x400u;
  *(_BYTE *)(this + 44) = v7;
  return this;
}

CMMsl *CMMsl::InEarConstraints::operator=(CMMsl *a1, const CMMsl::InEarConstraints *a2)
{
  CMMsl::InEarConstraints *v3;
  _BYTE v5[56];

  if (a1 != a2)
  {
    CMMsl::InEarConstraints::InEarConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarConstraints *)v5, v3);
    CMMsl::InEarConstraints::~InEarConstraints((CMMsl::InEarConstraints *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarConstraints *a2, CMMsl::InEarConstraints *a3)
{
  int v3;
  double result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  result = *((double *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((double *)a2 + 3) = result;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 41);
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 39);
  *((_BYTE *)this + 39) = *((_BYTE *)a2 + 39);
  *((_BYTE *)a2 + 39) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 36);
  *((_BYTE *)this + 36) = *((_BYTE *)a2 + 36);
  *((_BYTE *)a2 + 36) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 37);
  *((_BYTE *)this + 37) = *((_BYTE *)a2 + 37);
  *((_BYTE *)a2 + 37) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 43);
  *((_BYTE *)this + 43) = *((_BYTE *)a2 + 43);
  *((_BYTE *)a2 + 43) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 42);
  *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a2 + 42) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 38);
  *((_BYTE *)this + 38) = *((_BYTE *)a2 + 38);
  *((_BYTE *)a2 + 38) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 44);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a2 + 44) = v7;
  return result;
}

uint64_t CMMsl::InEarConstraints::InEarConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_100351A60;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 39);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  return a1;
}

CMMsl *CMMsl::InEarConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::InEarConstraints *v3;
  _BYTE v5[56];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarConstraints::InEarConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarConstraints *)v5, v3);
    CMMsl::InEarConstraints::~InEarConstraints((CMMsl::InEarConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarConstraints::formatText(CMMsl::InEarConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 24);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "above", *((_BYTE *)this + 36));
    v5 = *((_WORD *)this + 24);
  }
  if ((v5 & 8) != 0)
    PB::TextFormatter::format(a2, "below", *((_BYTE *)this + 37));
  v6 = *((_QWORD *)this + 1);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "current");
  v7 = *((_WORD *)this + 24);
  if ((v7 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 8));
    v7 = *((_WORD *)this + 24);
    if ((v7 & 0x10) == 0)
    {
LABEL_9:
      if ((v7 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_23;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "moving", *((_BYTE *)this + 38));
  v7 = *((_WORD *)this + 24);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "partialin", *((_BYTE *)this + 39));
  if ((*((_WORD *)this + 24) & 0x40) != 0)
LABEL_11:
    PB::TextFormatter::format(a2, "stable", *((_BYTE *)this + 40));
LABEL_12:
  v8 = *((_QWORD *)this + 2);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "threshold");
  v9 = *((_WORD *)this + 24);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
    v9 = *((_WORD *)this + 24);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "upright", *((_BYTE *)this + 41));
  v9 = *((_WORD *)this + 24);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0)
      goto LABEL_18;
LABEL_28:
    PB::TextFormatter::format(a2, "vertical", *((_BYTE *)this + 43));
    if ((*((_WORD *)this + 24) & 0x400) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_19;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "upsidedown", *((_BYTE *)this + 42));
  v9 = *((_WORD *)this + 24);
  if ((v9 & 0x200) != 0)
    goto LABEL_28;
LABEL_18:
  if ((v9 & 0x400) != 0)
LABEL_19:
    PB::TextFormatter::format(a2, "walking", *((_BYTE *)this + 44));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarConstraints::readFrom(CMMsl::InEarConstraints *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  BOOL v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 24) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 3) = *(_QWORD *)(*(_QWORD *)a2 + v20);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_84;
        case 2u:
          *((_WORD *)this + 24) |= 2u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_83;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_60:
            LODWORD(v27) = 0;
            goto LABEL_83;
          }
          v66 = 0;
          v67 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          *((_WORD *)this + 24) |= 0x80u;
          v30 = *((_QWORD *)a2 + 1);
          if (v30 >= *((_QWORD *)a2 + 2))
          {
            v33 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v31 = v30 + 1;
            v32 = *(unsigned __int8 *)(*(_QWORD *)a2 + v30);
            *((_QWORD *)a2 + 1) = v31;
            v33 = v32 != 0;
          }
          *((_BYTE *)this + 41) = v33;
          goto LABEL_84;
        case 6u:
          *((_WORD *)this + 24) |= 0x20u;
          v34 = *((_QWORD *)a2 + 1);
          if (v34 >= *((_QWORD *)a2 + 2))
          {
            v37 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v35 = v34 + 1;
            v36 = *(unsigned __int8 *)(*(_QWORD *)a2 + v34);
            *((_QWORD *)a2 + 1) = v35;
            v37 = v36 != 0;
          }
          *((_BYTE *)this + 39) = v37;
          goto LABEL_84;
        case 7u:
          *((_WORD *)this + 24) |= 4u;
          v38 = *((_QWORD *)a2 + 1);
          if (v38 >= *((_QWORD *)a2 + 2))
          {
            v41 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v39 = v38 + 1;
            v40 = *(unsigned __int8 *)(*(_QWORD *)a2 + v38);
            *((_QWORD *)a2 + 1) = v39;
            v41 = v40 != 0;
          }
          *((_BYTE *)this + 36) = v41;
          goto LABEL_84;
        case 8u:
          *((_WORD *)this + 24) |= 8u;
          v42 = *((_QWORD *)a2 + 1);
          if (v42 >= *((_QWORD *)a2 + 2))
          {
            v45 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v43 = v42 + 1;
            v44 = *(unsigned __int8 *)(*(_QWORD *)a2 + v42);
            *((_QWORD *)a2 + 1) = v43;
            v45 = v44 != 0;
          }
          *((_BYTE *)this + 37) = v45;
          goto LABEL_84;
        case 9u:
          *((_WORD *)this + 24) |= 0x40u;
          v46 = *((_QWORD *)a2 + 1);
          if (v46 >= *((_QWORD *)a2 + 2))
          {
            v49 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v47 = v46 + 1;
            v48 = *(unsigned __int8 *)(*(_QWORD *)a2 + v46);
            *((_QWORD *)a2 + 1) = v47;
            v49 = v48 != 0;
          }
          *((_BYTE *)this + 40) = v49;
          goto LABEL_84;
        case 0xAu:
          *((_WORD *)this + 24) |= 0x200u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 >= *((_QWORD *)a2 + 2))
          {
            v53 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v51 = v50 + 1;
            v52 = *(unsigned __int8 *)(*(_QWORD *)a2 + v50);
            *((_QWORD *)a2 + 1) = v51;
            v53 = v52 != 0;
          }
          *((_BYTE *)this + 43) = v53;
          goto LABEL_84;
        case 0xBu:
          *((_WORD *)this + 24) |= 0x100u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 >= *((_QWORD *)a2 + 2))
          {
            v57 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v55 = v54 + 1;
            v56 = *(unsigned __int8 *)(*(_QWORD *)a2 + v54);
            *((_QWORD *)a2 + 1) = v55;
            v57 = v56 != 0;
          }
          *((_BYTE *)this + 42) = v57;
          goto LABEL_84;
        case 0xCu:
          *((_WORD *)this + 24) |= 0x10u;
          v58 = *((_QWORD *)a2 + 1);
          if (v58 >= *((_QWORD *)a2 + 2))
          {
            v61 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v59 = v58 + 1;
            v60 = *(unsigned __int8 *)(*(_QWORD *)a2 + v58);
            *((_QWORD *)a2 + 1) = v59;
            v61 = v60 != 0;
          }
          *((_BYTE *)this + 38) = v61;
          goto LABEL_84;
        case 0xDu:
          *((_WORD *)this + 24) |= 0x400u;
          v62 = *((_QWORD *)a2 + 1);
          if (v62 >= *((_QWORD *)a2 + 2))
          {
            v65 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v63 = v62 + 1;
            v64 = *(unsigned __int8 *)(*(_QWORD *)a2 + v62);
            *((_QWORD *)a2 + 1) = v63;
            v65 = v64 != 0;
          }
          *((_BYTE *)this + 44) = v65;
          goto LABEL_84;
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_84;
      }
      while (1)
      {
        if (v23 == v22)
        {
          LODWORD(v27) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_83;
        }
        v68 = v22 + 1;
        v69 = *(_BYTE *)(v24 + v22);
        *((_QWORD *)a2 + 1) = v68;
        v27 |= (unint64_t)(v69 & 0x7F) << v66;
        if ((v69 & 0x80) == 0)
          break;
        v66 += 7;
        v22 = v68;
        v14 = v67++ > 8;
        if (v14)
          goto LABEL_60;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v27) = 0;
LABEL_83:
      *((_DWORD *)this + 8) = v27;
LABEL_84:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;
  const PB::Base *v5;
  const PB::Base *v6;
  __int16 v7;

  v3 = this;
  v4 = *(_WORD *)(this + 48);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(_WORD *)(v3 + 48);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 2u);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  v6 = *(const PB::Base **)(v3 + 16);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 41), 5u);
    v7 = *(_WORD *)(v3 + 48);
    if ((v7 & 0x20) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0)
        goto LABEL_12;
      goto LABEL_21;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 39), 6u);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 36), 7u);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 37), 8u);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x40) == 0)
  {
LABEL_14:
    if ((v7 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 40), 9u);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x200) == 0)
  {
LABEL_15:
    if ((v7 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 43), 0xAu);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x100) == 0)
  {
LABEL_16:
    if ((v7 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 42), 0xBu);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x10) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 0xDu);
  }
LABEL_26:
  this = PB::Writer::write(a2, *(_BYTE *)(v3 + 38), 0xCu);
  if ((*(_WORD *)(v3 + 48) & 0x400) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 44), 0xDu);
  return this;
}

BOOL CMMsl::InEarConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v4 = *(_WORD *)(a1 + 48);
  v5 = *(_WORD *)(a2 + 48);
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
      return 0;
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41))
      return 0;
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 39) != *(unsigned __int8 *)(a2 + 39))
      return 0;
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36))
      return 0;
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a2 + 37))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
      return 0;
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 43) != *(unsigned __int8 *)(a2 + 43))
      return 0;
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v4 & 0x100) != 0)
  {
    if ((v5 & 0x100) == 0 || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(a2 + 42))
      return 0;
  }
  else if ((v5 & 0x100) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 38) != *(unsigned __int8 *)(a2 + 38))
      return 0;
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  result = (v5 & 0x400) == 0;
  if ((v4 & 0x400) == 0)
    return result;
  return (v5 & 0x400) != 0 && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
}

uint64_t CMMsl::InEarConstraints::hash_value(CMMsl::InEarConstraints *this)
{
  __int16 v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  float v6;
  float v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  float v15;
  float v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *((_WORD *)this + 24);
  if ((v1 & 1) != 0)
  {
    v2 = *((double *)this + 3);
    if (v2 == 0.0)
      v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 8);
      goto LABEL_8;
    }
  }
  v3 = 0;
LABEL_8:
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_BYTE *)(v4 + 16);
    v6 = *(float *)(v4 + 8);
    v7 = *(float *)(v4 + 12);
    v8 = v6 == 0.0 || (v5 & 1) == 0;
    v9 = LODWORD(v6);
    if (v8)
      v9 = 0;
    v10 = v5 & 2;
    v11 = v7 == 0.0 || v10 == 0;
    v12 = LODWORD(v7);
    if (v11)
      v12 = 0;
    v4 = v12 ^ v9;
  }
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    v14 = *(_BYTE *)(v13 + 16);
    v15 = *(float *)(v13 + 8);
    v16 = *(float *)(v13 + 12);
    v17 = v15 == 0.0 || (v14 & 1) == 0;
    v18 = LODWORD(v15);
    if (v17)
      v18 = 0;
    v19 = v14 & 2;
    v20 = v16 == 0.0 || v19 == 0;
    v21 = LODWORD(v16);
    if (v20)
      v21 = 0;
    v13 = v21 ^ v18;
  }
  if ((v1 & 0x80) != 0)
  {
    v22 = *((unsigned __int8 *)this + 41);
    if ((v1 & 0x20) != 0)
    {
LABEL_34:
      v23 = *((unsigned __int8 *)this + 39);
      if ((v1 & 4) != 0)
        goto LABEL_35;
      goto LABEL_44;
    }
  }
  else
  {
    v22 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_34;
  }
  v23 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_35:
    v24 = *((unsigned __int8 *)this + 36);
    if ((v1 & 8) != 0)
      goto LABEL_36;
    goto LABEL_45;
  }
LABEL_44:
  v24 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_36:
    v25 = *((unsigned __int8 *)this + 37);
    if ((v1 & 0x40) != 0)
      goto LABEL_37;
    goto LABEL_46;
  }
LABEL_45:
  v25 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_37:
    v26 = *((unsigned __int8 *)this + 40);
    if ((*((_WORD *)this + 24) & 0x200) != 0)
      goto LABEL_38;
    goto LABEL_47;
  }
LABEL_46:
  v26 = 0;
  if ((*((_WORD *)this + 24) & 0x200) != 0)
  {
LABEL_38:
    v27 = *((unsigned __int8 *)this + 43);
    if ((*((_WORD *)this + 24) & 0x100) != 0)
      goto LABEL_39;
    goto LABEL_48;
  }
LABEL_47:
  v27 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_39:
    v28 = *((unsigned __int8 *)this + 42);
    if ((v1 & 0x10) != 0)
      goto LABEL_40;
LABEL_49:
    v29 = 0;
    if ((*((_WORD *)this + 24) & 0x400) != 0)
      goto LABEL_41;
LABEL_50:
    v30 = 0;
    return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v13 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
  }
LABEL_48:
  v28 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_49;
LABEL_40:
  v29 = *((unsigned __int8 *)this + 38);
  if ((*((_WORD *)this + 24) & 0x400) == 0)
    goto LABEL_50;
LABEL_41:
  v30 = *((unsigned __int8 *)this + 44);
  return v3 ^ *(_QWORD *)&v2 ^ v4 ^ v13 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
}

uint64_t CMMsl::InEarConstraints::makeCurrent(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::InEarConstraints::makeThreshold(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

uint64_t CMMsl::InEarOpenLid::InEarOpenLid(uint64_t this)
{
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)this = off_100351A98;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)this = off_100351A98;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::InEarOpenLid::~InEarOpenLid(CMMsl::InEarOpenLid *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_100351A98;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarOpenLid::~InEarOpenLid(this);
  operator delete();
}

uint64_t CMMsl::InEarOpenLid::InEarOpenLid(uint64_t this, const CMMsl::InEarOpenLid *a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = off_100351A98;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v3 = *((_QWORD *)a2 + 4);
    *(_BYTE *)(this + 44) = 1;
    *(_QWORD *)(this + 32) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 44) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 10);
    *(_BYTE *)(this + 44) = v2;
    *(_DWORD *)(this + 40) = v4;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 3))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  return this;
}

uint64_t CMMsl::InEarOpenLid::operator=(uint64_t a1, const CMMsl::InEarOpenLid *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((const CMMsl::InEarOpenLid *)a1 != a2)
  {
    CMMsl::InEarOpenLid::InEarOpenLid((uint64_t)&v9, a2);
    v3 = v13;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v3;
    v12 = v4;
    v13 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    CMMsl::InEarOpenLid::~InEarOpenLid((CMMsl::InEarOpenLid *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarOpenLid *a2, CMMsl::InEarOpenLid *a3)
{
  int v3;
  double result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  result = *((double *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((double *)a2 + 4) = result;
  v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  return result;
}

uint64_t CMMsl::InEarOpenLid::InEarOpenLid(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_100351A98;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t CMMsl::InEarOpenLid::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    CMMsl::InEarOpenLid::InEarOpenLid((uint64_t)&v9, a2);
    v3 = v13;
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v3;
    v12 = v4;
    v13 = v5;
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    v11 = v6;
    v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    v10 = v7;
    CMMsl::InEarOpenLid::~InEarOpenLid((CMMsl::InEarOpenLid *)&v9);
  }
  return a1;
}

uint64_t CMMsl::InEarOpenLid::formatText(CMMsl::InEarOpenLid *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "current");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "last");
  if ((*((_BYTE *)this + 44) & 2) != 0)
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 10));
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "minimum");
  if ((*((_BYTE *)this + 44) & 1) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarOpenLid::readFrom(CMMsl::InEarOpenLid *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 44) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 4) = *(_QWORD *)(*(_QWORD *)a2 + v20);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_49;
        case 2u:
          *((_BYTE *)this + 44) |= 2u;
          v22 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          v24 = *(_QWORD *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)a2 + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_48;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_43:
            LODWORD(v27) = 0;
            goto LABEL_48;
          }
          v30 = 0;
          v31 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)a2 + 1);
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_49;
      }
      while (1)
      {
        if (v23 == v22)
        {
          LODWORD(v27) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_48;
        }
        v32 = v22 + 1;
        v33 = *(_BYTE *)(v24 + v22);
        *((_QWORD *)a2 + 1) = v32;
        v27 |= (unint64_t)(v33 & 0x7F) << v30;
        if ((v33 & 0x80) == 0)
          break;
        v30 += 7;
        v22 = v32;
        v14 = v31++ > 8;
        if (v14)
          goto LABEL_43;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v27) = 0;
LABEL_48:
      *((_DWORD *)this + 10) = v27;
LABEL_49:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarOpenLid::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;

  v3 = this;
  v4 = *(_BYTE *)(this + 44);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    v4 = *(_BYTE *)(v3 + 44);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 2u);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    return PB::Writer::writeSubmessage(a2, v7, 5u);
  return this;
}

BOOL CMMsl::InEarOpenLid::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (!v5 || !CMMsl::ClefMeasurement::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a2 + 16);
  result = v8 == 0;
  if (!*(_QWORD *)(a1 + 16))
    return result;
  return v8 && CMMsl::ClefMeasurement::operator==(*(_QWORD *)(a1 + 16), v8);
}

uint64_t CMMsl::InEarOpenLid::hash_value(CMMsl::InEarOpenLid *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  float v5;
  float v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  float v23;
  float v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v1 = *((double *)this + 4);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 44) & 2) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 10);
      goto LABEL_8;
    }
  }
  v2 = 0;
LABEL_8:
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 16);
    v5 = *(float *)(v3 + 8);
    v6 = *(float *)(v3 + 12);
    v7 = v5 == 0.0 || (v4 & 1) == 0;
    v8 = LODWORD(v5);
    if (v7)
      v8 = 0;
    v9 = v4 & 2;
    v10 = v6 == 0.0 || v9 == 0;
    v11 = LODWORD(v6);
    if (v10)
      v11 = 0;
    v3 = v11 ^ v8;
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + 16);
    v14 = *(float *)(v12 + 8);
    v15 = *(float *)(v12 + 12);
    v16 = v14 == 0.0 || (v13 & 1) == 0;
    v17 = LODWORD(v14);
    if (v16)
      v17 = 0;
    v18 = v13 & 2;
    v19 = v15 == 0.0 || v18 == 0;
    v20 = LODWORD(v15);
    if (v19)
      v20 = 0;
    v12 = v20 ^ v17;
  }
  v21 = *((_QWORD *)this + 2);
  if (v21)
  {
    v22 = *(_BYTE *)(v21 + 16);
    v23 = *(float *)(v21 + 8);
    v24 = *(float *)(v21 + 12);
    v25 = v23 == 0.0 || (v22 & 1) == 0;
    v26 = LODWORD(v23);
    if (v25)
      v26 = 0;
    v27 = v22 & 2;
    v28 = v24 == 0.0 || v27 == 0;
    v29 = LODWORD(v24);
    if (v28)
      v29 = 0;
    v21 = v29 ^ v26;
  }
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v12 ^ v21;
}

uint64_t CMMsl::InEarOpenLid::makeMinimum(uint64_t this)
{
  if (!*(_QWORD *)(this + 24))
    operator new();
  return this;
}

uint64_t CMMsl::InEarOpenLid::makeCurrent(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

uint64_t CMMsl::InEarOpenLid::makeLast(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

double CMMsl::InEarOptical::InEarOptical(CMMsl::InEarOptical *this)
{
  double result;

  *(_QWORD *)this = off_100351AD0;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351AD0;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

void CMMsl::InEarOptical::~InEarOptical(CMMsl::InEarOptical *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = off_100351AD0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::InEarOptical::~InEarOptical(this);
  operator delete();
}

CMMsl::InEarOptical *CMMsl::InEarOptical::InEarOptical(CMMsl::InEarOptical *this, const CMMsl::InEarOptical *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  char v9;
  int v10;
  int v11;
  int v13;
  int v14;
  char v15;

  *(_QWORD *)this = off_100351AD0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if ((*((_BYTE *)a2 + 108) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 9);
    *((_BYTE *)this + 108) = 1;
    *((_QWORD *)this + 9) = v5;
    v4 = 9;
    if ((*((_BYTE *)a2 + 108) & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 8;
  if ((*((_BYTE *)a2 + 108) & 8) != 0)
  {
LABEL_5:
    v6 = *((_DWORD *)a2 + 22);
    *((_BYTE *)this + 108) = v4;
    *((_DWORD *)this + 22) = v6;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 7))
    operator new();
  if (*((_QWORD *)a2 + 8))
    operator new();
  if (this != a2)
    sub_100020CE4((char *)this + 8, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  v7 = *((_BYTE *)a2 + 108);
  if ((v7 & 0x40) != 0)
  {
    v13 = *((_DWORD *)a2 + 25);
    *((_BYTE *)this + 108) |= 0x40u;
    *((_DWORD *)this + 25) = v13;
    v7 = *((_BYTE *)a2 + 108);
    if ((v7 & 0x20) == 0)
    {
LABEL_14:
      if ((v7 & 0x80) == 0)
        goto LABEL_15;
      goto LABEL_26;
    }
  }
  else if ((*((_BYTE *)a2 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }
  v14 = *((_DWORD *)a2 + 24);
  *((_BYTE *)this + 108) |= 0x20u;
  *((_DWORD *)this + 24) = v14;
  v7 = *((_BYTE *)a2 + 108);
  if ((v7 & 0x80) == 0)
  {
LABEL_15:
    if ((v7 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_26:
  v15 = *((_BYTE *)a2 + 104);
  *((_BYTE *)this + 108) |= 0x80u;
  *((_BYTE *)this + 104) = v15;
  if ((*((_BYTE *)a2 + 108) & 0x10) != 0)
  {
LABEL_16:
    v8 = *((_DWORD *)a2 + 23);
    *((_BYTE *)this + 108) |= 0x10u;
    *((_DWORD *)this + 23) = v8;
  }
LABEL_17:
  if (this != a2)
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
  v9 = *((_BYTE *)a2 + 108);
  if ((v9 & 2) != 0)
  {
    v10 = *((_DWORD *)a2 + 20);
    *((_BYTE *)this + 108) |= 2u;
    *((_DWORD *)this + 20) = v10;
    v9 = *((_BYTE *)a2 + 108);
  }
  if ((v9 & 4) != 0)
  {
    v11 = *((_DWORD *)a2 + 21);
    *((_BYTE *)this + 108) |= 4u;
    *((_DWORD *)this + 21) = v11;
  }
  return this;
}

CMMsl *CMMsl::InEarOptical::operator=(CMMsl *a1, const CMMsl::InEarOptical *a2)
{
  CMMsl::InEarOptical *v3;
  _BYTE v5[112];

  if (a1 != a2)
  {
    CMMsl::InEarOptical::InEarOptical((CMMsl::InEarOptical *)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarOptical *)v5, v3);
    CMMsl::InEarOptical::~InEarOptical((CMMsl::InEarOptical *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InEarOptical *a2, CMMsl::InEarOptical *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float result;

  v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LOBYTE(v9) = *((_BYTE *)this + 104);
  *((_BYTE *)this + 104) = *((_BYTE *)a2 + 104);
  *((_BYTE *)a2 + 104) = v9;
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

uint64_t CMMsl::InEarOptical::InEarOptical(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_100351AD0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_DWORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_100239458(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  return a1;
}

CMMsl *CMMsl::InEarOptical::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::InEarOptical *v3;
  _BYTE v5[112];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarOptical::InEarOptical((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarOptical *)v5, v3);
    CMMsl::InEarOptical::~InEarOptical((CMMsl::InEarOptical *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarOptical::formatText(CMMsl::InEarOptical *this, PB::TextFormatter *a2, const char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float *v11;
  float *v12;
  float v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (float *)*((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "acceleration", v7);
  }
  if ((*((_BYTE *)this + 108) & 2) != 0)
    PB::TextFormatter::format(a2, "correlation", *((float *)this + 20));
  v8 = *((_QWORD *)this + 7);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "current");
  if ((*((_BYTE *)this + 108) & 4) != 0)
    PB::TextFormatter::format(a2, "deltatip", *((float *)this + 21));
  v9 = *((_QWORD *)this + 8);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "instability");
  v10 = *((_BYTE *)this + 108);
  if ((v10 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 22));
    v10 = *((_BYTE *)this + 108);
    if ((v10 & 0x10) == 0)
    {
LABEL_13:
      if ((v10 & 0x20) == 0)
        goto LABEL_14;
      goto LABEL_22;
    }
  }
  else if ((*((_BYTE *)this + 108) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 23));
  v10 = *((_BYTE *)this + 108);
  if ((v10 & 0x20) == 0)
  {
LABEL_14:
    if ((v10 & 1) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "tilt", *((float *)this + 24));
  v10 = *((_BYTE *)this + 108);
  if ((v10 & 1) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0)
      goto LABEL_16;
LABEL_24:
    PB::TextFormatter::format(a2, "tip", *((float *)this + 25));
    if ((*((_BYTE *)this + 108) & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_25;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  v10 = *((_BYTE *)this + 108);
  if ((v10 & 0x40) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x80) == 0)
    goto LABEL_17;
LABEL_25:
  PB::TextFormatter::format(a2, "upright", *((_BYTE *)this + 104));
LABEL_17:
  v11 = (float *)*((_QWORD *)this + 4);
  v12 = (float *)*((_QWORD *)this + 5);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "variance", v13);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InEarOptical::readFrom(CMMsl::InEarOptical *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char *v84;
  _DWORD *v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  int v105;
  char *v106;
  int v107;
  unint64_t v108;
  _BYTE v111[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 32);
    v9 = (char *)this + 48;
    v10 = (void **)((char *)this + 8);
    v11 = (char *)this + 24;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 108) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_168;
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v25);
          v26 = *((_QWORD *)a2 + 1) + 8;
          goto LABEL_171;
        case 2u:
          *((_BYTE *)this + 108) |= 8u;
          v27 = *((_QWORD *)a2 + 1);
          v28 = *((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)a2 + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_148;
              v30 += 7;
              v27 = v33;
              v18 = v31++ > 8;
            }
            while (!v18);
LABEL_113:
            LODWORD(v32) = 0;
            goto LABEL_148;
          }
          v79 = 0;
          v80 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v81 = v27 + 1;
              v82 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)a2 + 1) = v81;
              v32 |= (unint64_t)(v82 & 0x7F) << v79;
              if (v82 < 0)
              {
                v79 += 7;
                v27 = v81;
                v18 = v80++ > 8;
                if (v18)
                  goto LABEL_113;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_148:
          *((_DWORD *)this + 22) = v32;
          goto LABEL_172;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          if (v24 != 2)
          {
            v84 = (char *)*((_QWORD *)this + 2);
            v83 = *((_QWORD *)this + 3);
            if ((unint64_t)v84 >= v83)
            {
              v92 = (char *)*v10;
              v93 = (v84 - (_BYTE *)*v10) >> 2;
              v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62)
LABEL_183:
                sub_10000D5F8();
              v95 = v83 - (_QWORD)v92;
              if (v95 >> 1 > v94)
                v94 = v95 >> 1;
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                v96 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v96 = v94;
              if (v96)
              {
                v97 = (char *)sub_100020E2C((uint64_t)v11, v96);
                v92 = (char *)*((_QWORD *)this + 1);
                v84 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v97 = 0;
              }
              v104 = &v97[4 * v93];
              *(_DWORD *)v104 = 0;
              v85 = v104 + 4;
              while (v84 != v92)
              {
                v105 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              *((_QWORD *)this + 1) = v104;
              *((_QWORD *)this + 2) = v85;
              *((_QWORD *)this + 3) = &v97[4 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_DWORD *)v84 = 0;
              v85 = v84 + 4;
            }
            *((_QWORD *)this + 2) = v85;
            goto LABEL_166;
          }
          if ((PB::Reader::placeMark(a2, v111) & 1) != 0)
            return 0;
          v35 = *((_QWORD *)a2 + 1);
          v36 = *((_QWORD *)a2 + 2);
          while (v35 < v36 && !*((_BYTE *)a2 + 24))
          {
            v38 = (char *)*((_QWORD *)this + 2);
            v37 = *((_QWORD *)this + 3);
            if ((unint64_t)v38 >= v37)
            {
              v40 = (char *)*v10;
              v41 = (v38 - (_BYTE *)*v10) >> 2;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62)
                goto LABEL_183;
              v43 = v37 - (_QWORD)v40;
              if (v43 >> 1 > v42)
                v42 = v43 >> 1;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                v44 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44)
              {
                v45 = (char *)sub_100020E2C((uint64_t)v11, v44);
                v40 = (char *)*((_QWORD *)this + 1);
                v38 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[4 * v41];
              *(_DWORD *)v46 = 0;
              v39 = v46 + 4;
              while (v38 != v40)
              {
                v47 = *((_DWORD *)v38 - 1);
                v38 -= 4;
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              *((_QWORD *)this + 1) = v46;
              *((_QWORD *)this + 2) = v39;
              *((_QWORD *)this + 3) = &v45[4 * v44];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_DWORD *)v38 = 0;
              v39 = v38 + 4;
            }
            *((_QWORD *)this + 2) = v39;
            v48 = *((_QWORD *)a2 + 1);
            if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_127;
            *(v39 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v48);
            v36 = *((_QWORD *)a2 + 2);
            v35 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v35;
          }
          goto LABEL_37;
        case 6u:
          *((_BYTE *)this + 108) |= 0x40u;
          v49 = *((_QWORD *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_168;
          *((_DWORD *)this + 25) = *(_DWORD *)(*(_QWORD *)a2 + v49);
          goto LABEL_170;
        case 7u:
          *((_BYTE *)this + 108) |= 0x20u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_168;
          *((_DWORD *)this + 24) = *(_DWORD *)(*(_QWORD *)a2 + v50);
          goto LABEL_170;
        case 8u:
          *((_BYTE *)this + 108) |= 0x80u;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 >= *((_QWORD *)a2 + 2))
          {
            v54 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v52 = v51 + 1;
            v53 = *(unsigned __int8 *)(*(_QWORD *)a2 + v51);
            *((_QWORD *)a2 + 1) = v52;
            v54 = v53 != 0;
          }
          *((_BYTE *)this + 104) = v54;
          goto LABEL_172;
        case 9u:
          *((_BYTE *)this + 108) |= 0x10u;
          v55 = *((_QWORD *)a2 + 1);
          v56 = *((_QWORD *)a2 + 2);
          v57 = *(_QWORD *)a2;
          if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
          {
            v58 = 0;
            v59 = 0;
            v60 = 0;
            do
            {
              v61 = v55 + 1;
              *((_QWORD *)a2 + 1) = v55 + 1;
              v62 = *(_BYTE *)(v57 + v55);
              v60 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0)
                goto LABEL_151;
              v58 += 7;
              v55 = v61;
              v18 = v59++ > 8;
            }
            while (!v18);
LABEL_124:
            LODWORD(v60) = 0;
            goto LABEL_151;
          }
          v86 = 0;
          v87 = 0;
          v60 = 0;
          if (v56 <= v55)
            v56 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v56 == v55)
            {
              LODWORD(v60) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v88 = v55 + 1;
              v89 = *(_BYTE *)(v57 + v55);
              *((_QWORD *)a2 + 1) = v88;
              v60 |= (unint64_t)(v89 & 0x7F) << v86;
              if (v89 < 0)
              {
                v86 += 7;
                v55 = v88;
                v18 = v87++ > 8;
                if (v18)
                  goto LABEL_124;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v60) = 0;
            }
            break;
          }
LABEL_151:
          *((_DWORD *)this + 23) = v60;
          goto LABEL_172;
        case 0xAu:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v111) & 1) != 0)
              return 0;
            v63 = *((_QWORD *)a2 + 1);
            v64 = *((_QWORD *)a2 + 2);
            while (v63 < v64 && !*((_BYTE *)a2 + 24))
            {
              v66 = (char *)*((_QWORD *)this + 5);
              v65 = *((_QWORD *)this + 6);
              if ((unint64_t)v66 >= v65)
              {
                v68 = (char *)*v8;
                v69 = (v66 - (_BYTE *)*v8) >> 2;
                v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 62)
                  goto LABEL_182;
                v71 = v65 - (_QWORD)v68;
                if (v71 >> 1 > v70)
                  v70 = v71 >> 1;
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                  v72 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v72 = v70;
                if (v72)
                {
                  v73 = (char *)sub_100020E2C((uint64_t)v9, v72);
                  v68 = (char *)*((_QWORD *)this + 4);
                  v66 = (char *)*((_QWORD *)this + 5);
                }
                else
                {
                  v73 = 0;
                }
                v74 = &v73[4 * v69];
                *(_DWORD *)v74 = 0;
                v67 = v74 + 4;
                while (v66 != v68)
                {
                  v75 = *((_DWORD *)v66 - 1);
                  v66 -= 4;
                  *((_DWORD *)v74 - 1) = v75;
                  v74 -= 4;
                }
                *((_QWORD *)this + 4) = v74;
                *((_QWORD *)this + 5) = v67;
                *((_QWORD *)this + 6) = &v73[4 * v72];
                if (v68)
                  operator delete(v68);
              }
              else
              {
                *(_DWORD *)v66 = 0;
                v67 = v66 + 4;
              }
              *((_QWORD *)this + 5) = v67;
              v76 = *((_QWORD *)a2 + 1);
              if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_127:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v67 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v76);
              v64 = *((_QWORD *)a2 + 2);
              v63 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v63;
            }
LABEL_37:
            PB::Reader::recallMark(a2, v111);
          }
          else
          {
            v91 = (char *)*((_QWORD *)this + 5);
            v90 = *((_QWORD *)this + 6);
            if ((unint64_t)v91 >= v90)
            {
              v98 = (char *)*v8;
              v99 = (v91 - (_BYTE *)*v8) >> 2;
              v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 62)
LABEL_182:
                sub_10000D5F8();
              v101 = v90 - (_QWORD)v98;
              if (v101 >> 1 > v100)
                v100 = v101 >> 1;
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                v102 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v102 = v100;
              if (v102)
              {
                v103 = (char *)sub_100020E2C((uint64_t)v9, v102);
                v98 = (char *)*((_QWORD *)this + 4);
                v91 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v103 = 0;
              }
              v106 = &v103[4 * v99];
              *(_DWORD *)v106 = 0;
              v85 = v106 + 4;
              while (v91 != v98)
              {
                v107 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v106 - 1) = v107;
                v106 -= 4;
              }
              *((_QWORD *)this + 4) = v106;
              *((_QWORD *)this + 5) = v85;
              *((_QWORD *)this + 6) = &v103[4 * v102];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *(_DWORD *)v91 = 0;
              v85 = v91 + 4;
            }
            *((_QWORD *)this + 5) = v85;
LABEL_166:
            v108 = *((_QWORD *)a2 + 1);
            if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v85 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v108);
LABEL_170:
              v26 = *((_QWORD *)a2 + 1) + 4;
LABEL_171:
              *((_QWORD *)a2 + 1) = v26;
            }
            else
            {
LABEL_168:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_172:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0xBu:
          *((_BYTE *)this + 108) |= 2u;
          v77 = *((_QWORD *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_168;
          *((_DWORD *)this + 20) = *(_DWORD *)(*(_QWORD *)a2 + v77);
          goto LABEL_170;
        case 0xCu:
          *((_BYTE *)this + 108) |= 4u;
          v78 = *((_QWORD *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)a2 + 2))
            goto LABEL_168;
          *((_DWORD *)this + 21) = *(_DWORD *)(*(_QWORD *)a2 + v78);
          goto LABEL_170;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_172;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarOptical::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  float *v7;
  float *v8;
  float v9;
  char v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  v3 = this;
  v4 = *(_BYTE *)(this + 108);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72), 1u);
    v4 = *(_BYTE *)(v3 + 108);
  }
  if ((v4 & 8) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 2u);
  v5 = *(const PB::Base **)(v3 + 56);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  v6 = *(const PB::Base **)(v3 + 64);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 5u);
  }
  v10 = *(_BYTE *)(v3 + 108);
  if ((v10 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 100), 6u);
    v10 = *(_BYTE *)(v3 + 108);
    if ((v10 & 0x20) == 0)
    {
LABEL_14:
      if ((v10 & 0x80) == 0)
        goto LABEL_15;
LABEL_26:
      this = PB::Writer::write(a2, *(_BYTE *)(v3 + 104), 8u);
      if ((*(_BYTE *)(v3 + 108) & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(v3 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 7u);
  v10 = *(_BYTE *)(v3 + 108);
  if (v10 < 0)
    goto LABEL_26;
LABEL_15:
  if ((v10 & 0x10) != 0)
LABEL_16:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 9u);
LABEL_17:
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 0xAu);
  }
  v14 = *(_BYTE *)(v3 + 108);
  if ((v14 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
    v14 = *(_BYTE *)(v3 + 108);
  }
  if ((v14 & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 84), 0xCu);
  return this;
}

BOOL CMMsl::InEarOptical::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  _BOOL8 result;

  v4 = *(unsigned __int8 *)(a1 + 108);
  v5 = *(unsigned __int8 *)(a2 + 108);
  if ((v4 & 1) != 0)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v5 & 1) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a2 + 64);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v11 = *(float **)(a1 + 8);
  v10 = *(float **)(a1 + 16);
  v12 = *(float **)(a2 + 8);
  if ((char *)v10 - (char *)v11 == *(_QWORD *)(a2 + 16) - (_QWORD)v12)
  {
    while (v11 != v10)
    {
      if (*v11 != *v12)
        return 0;
      ++v11;
      ++v12;
    }
    if ((v4 & 0x40) != 0)
    {
      if ((v5 & 0x40) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
        return 0;
    }
    else if ((v5 & 0x40) != 0)
    {
      return 0;
    }
    if ((v4 & 0x20) != 0)
    {
      if ((v5 & 0x20) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
        return 0;
    }
    else if ((v5 & 0x20) != 0)
    {
      return 0;
    }
    if ((v4 & v5 & 0x80) != 0)
    {
      if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
        return 0;
    }
    else if (((v4 | v5) & 0x80) != 0)
    {
      return 0;
    }
    if ((v4 & 0x10) != 0)
    {
      if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
        return 0;
    }
    else if ((v5 & 0x10) != 0)
    {
      return 0;
    }
    v14 = *(float **)(a1 + 32);
    v13 = *(float **)(a1 + 40);
    v15 = *(float **)(a2 + 32);
    if ((char *)v13 - (char *)v14 == *(_QWORD *)(a2 + 40) - (_QWORD)v15)
    {
      while (v14 != v13)
      {
        if (*v14 != *v15)
          return 0;
        ++v14;
        ++v15;
      }
      if ((v4 & 2) != 0)
      {
        if ((v5 & 2) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80))
          return 0;
      }
      else if ((v5 & 2) != 0)
      {
        return 0;
      }
      result = (v5 & 4) == 0;
      if ((v4 & 4) == 0)
        return result;
      if ((v5 & 4) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84))
        return 1;
    }
  }
  return 0;
}

uint64_t CMMsl::InEarOptical::hash_value(CMMsl::InEarOptical *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  float v6;
  float v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  float v16;
  float v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;

  if ((*((_BYTE *)this + 108) & 1) != 0)
  {
    if (*((double *)this + 9) == 0.0)
      v2 = 0;
    else
      v2 = *((_QWORD *)this + 9);
    if ((*((_BYTE *)this + 108) & 8) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 108) & 8) != 0)
    {
LABEL_3:
      v3 = *((unsigned int *)this + 22);
      goto LABEL_9;
    }
  }
  v3 = 0;
LABEL_9:
  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    v5 = *(_BYTE *)(v4 + 16);
    v6 = *(float *)(v4 + 8);
    v7 = *(float *)(v4 + 12);
    v8 = v6 == 0.0 || (v5 & 1) == 0;
    v9 = LODWORD(v6);
    if (v8)
      v9 = 0;
    v10 = v5 & 2;
    v11 = v7 == 0.0 || v10 == 0;
    v12 = LODWORD(v7);
    if (v11)
      v12 = 0;
    v13 = v12 ^ v9;
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_QWORD *)this + 8);
  if (v14)
  {
    v15 = *(_BYTE *)(v14 + 16);
    v16 = *(float *)(v14 + 8);
    v17 = *(float *)(v14 + 12);
    v18 = v16 == 0.0 || (v15 & 1) == 0;
    v19 = LODWORD(v16);
    if (v18)
      v19 = 0;
    v20 = v15 & 2;
    v21 = v17 == 0.0 || v20 == 0;
    v22 = LODWORD(v17);
    if (v21)
      v22 = 0;
    v23 = v22 ^ v19;
  }
  else
  {
    v23 = 0;
  }
  v24 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  if ((*((_BYTE *)this + 108) & 0x40) == 0)
  {
    v25 = 0;
    if ((*((_BYTE *)this + 108) & 0x20) != 0)
      goto LABEL_37;
LABEL_47:
    v27 = 0;
    if ((*((_BYTE *)this + 108) & 0x80) != 0)
      goto LABEL_41;
LABEL_48:
    v28 = 0;
    if ((*((_BYTE *)this + 108) & 0x10) != 0)
      goto LABEL_42;
    goto LABEL_49;
  }
  v30 = *((float *)this + 25);
  if (v30 == 0.0)
    v25 = 0;
  else
    v25 = LODWORD(v30);
  if ((*((_BYTE *)this + 108) & 0x20) == 0)
    goto LABEL_47;
LABEL_37:
  v26 = *((float *)this + 24);
  if (v26 == 0.0)
    v27 = 0;
  else
    v27 = LODWORD(v26);
  if ((*((_BYTE *)this + 108) & 0x80) == 0)
    goto LABEL_48;
LABEL_41:
  v28 = *((unsigned __int8 *)this + 104);
  if ((*((_BYTE *)this + 108) & 0x10) != 0)
  {
LABEL_42:
    v29 = *((int *)this + 23);
    goto LABEL_50;
  }
LABEL_49:
  v29 = 0;
LABEL_50:
  v31 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  if ((*((_BYTE *)this + 108) & 2) != 0)
  {
    v35 = *((float *)this + 20);
    v32 = LODWORD(v35);
    if (v35 == 0.0)
      v32 = 0;
    if ((*((_BYTE *)this + 108) & 4) != 0)
      goto LABEL_52;
LABEL_58:
    v34 = 0;
    return v3 ^ v2 ^ v13 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v24 ^ v31 ^ v32 ^ v34;
  }
  v32 = 0;
  if ((*((_BYTE *)this + 108) & 4) == 0)
    goto LABEL_58;
LABEL_52:
  v33 = *((float *)this + 21);
  v34 = LODWORD(v33);
  if (v33 == 0.0)
    v34 = 0;
  return v3 ^ v2 ^ v13 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v24 ^ v31 ^ v32 ^ v34;
}

uint64_t CMMsl::InEarOptical::makeCurrent(uint64_t this)
{
  if (!*(_QWORD *)(this + 56))
    operator new();
  return this;
}

uint64_t CMMsl::InEarOptical::makeInstability(uint64_t this)
{
  if (!*(_QWORD *)(this + 64))
    operator new();
  return this;
}

uint64_t CMMsl::InEarSession::InEarSession(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_100351B08;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_100351B08;
  return this;
}

void CMMsl::InEarSession::~InEarSession(CMMsl::InEarSession *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_100351B08;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

{
  CMMsl::InEarSession::~InEarSession(this);
  operator delete();
}

uint64_t CMMsl::InEarSession::InEarSession(uint64_t this, const CMMsl::InEarSession *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = off_100351B08;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 6);
    *(_BYTE *)(this + 32) = 1;
    *(_DWORD *)(this + 24) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 32) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 7);
    *(_BYTE *)(this + 32) = v2;
    *(_DWORD *)(this + 28) = v4;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

uint64_t CMMsl::InEarSession::operator=(uint64_t a1, const CMMsl::InEarSession *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const CMMsl::InEarSession *)a1 != a2)
  {
    CMMsl::InEarSession::InEarSession((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    CMMsl::InEarSession::~InEarSession((CMMsl::InEarSession *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarSession *a2, CMMsl::InEarSession *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  result = *((double *)a2 + 3);
  v5 = *((_QWORD *)this + 3);
  *((double *)this + 3) = result;
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  return result;
}

uint64_t CMMsl::InEarSession::InEarSession(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = off_100351B08;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

uint64_t CMMsl::InEarSession::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if (a1 != a2)
  {
    CMMsl::InEarSession::InEarSession((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v5;
    CMMsl::InEarSession::~InEarSession((CMMsl::InEarSession *)v7);
  }
  return a1;
}

uint64_t CMMsl::InEarSession::formatText(CMMsl::InEarSession *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(a2, a3);
  if ((*((_BYTE *)this + 32) & 1) != 0)
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "maximum");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "minimum");
  if ((*((_BYTE *)this + 32) & 2) != 0)
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarSession::readFrom(CMMsl::InEarSession *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 32) |= 1u;
          v20 = *((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v22 = *(_QWORD *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = v20 + 1;
              *((_QWORD *)a2 + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                goto LABEL_57;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
            }
            while (!v14);
LABEL_46:
            LODWORD(v25) = 0;
            goto LABEL_57;
          }
          v37 = 0;
          v38 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v39 = v20 + 1;
              v40 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)a2 + 1) = v39;
              v25 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                v20 = v39;
                v14 = v38++ > 8;
                if (v14)
                  goto LABEL_46;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v25) = 0;
            }
            break;
          }
LABEL_57:
          *((_DWORD *)this + 6) = v25;
          goto LABEL_62;
        case 2u:
          *((_BYTE *)this + 32) |= 2u;
          v29 = *((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          v31 = *(_QWORD *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)a2 + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_61;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_53:
            LODWORD(v34) = 0;
            goto LABEL_61;
          }
          v41 = 0;
          v42 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)a2 + 1);
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        default:
          result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!(_DWORD)result)
            return result;
          goto LABEL_62;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_61;
        }
        v43 = v29 + 1;
        v44 = *(_BYTE *)(v31 + v29);
        *((_QWORD *)a2 + 1) = v43;
        v34 |= (unint64_t)(v44 & 0x7F) << v41;
        if ((v44 & 0x80) == 0)
          break;
        v41 += 7;
        v29 = v43;
        v14 = v42++ > 8;
        if (v14)
          goto LABEL_53;
      }
      if (*((_BYTE *)a2 + 24))
        LODWORD(v34) = 0;
LABEL_61:
      *((_DWORD *)this + 7) = v34;
LABEL_62:
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarSession::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(a2, v6, 4u);
  return this;
}

BOOL CMMsl::InEarSession::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::ClefMeasurement::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a2 + 8);
  result = v6 == 0;
  if (!*(_QWORD *)(a1 + 8))
    return result;
  return v6 && CMMsl::ClefMeasurement::operator==(*(_QWORD *)(a1 + 8), v6);
}

uint64_t CMMsl::InEarSession::hash_value(CMMsl::InEarSession *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  float v5;
  float v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float v14;
  float v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((unsigned int *)this + 6);
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
    {
LABEL_3:
      v2 = *((int *)this + 7);
      goto LABEL_6;
    }
  }
  v2 = 0;
LABEL_6:
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(_BYTE *)(v3 + 16);
    v5 = *(float *)(v3 + 8);
    v6 = *(float *)(v3 + 12);
    v7 = v5 == 0.0 || (v4 & 1) == 0;
    v8 = LODWORD(v5);
    if (v7)
      v8 = 0;
    v9 = v4 & 2;
    v10 = v6 == 0.0 || v9 == 0;
    v11 = LODWORD(v6);
    if (v10)
      v11 = 0;
    v3 = v11 ^ v8;
  }
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + 16);
    v14 = *(float *)(v12 + 8);
    v15 = *(float *)(v12 + 12);
    v16 = v14 == 0.0 || (v13 & 1) == 0;
    v17 = LODWORD(v14);
    if (v16)
      v17 = 0;
    v18 = v13 & 2;
    v19 = v15 == 0.0 || v18 == 0;
    v20 = LODWORD(v15);
    if (v19)
      v20 = 0;
    v12 = v20 ^ v17;
  }
  return v2 ^ v1 ^ v3 ^ v12;
}

uint64_t CMMsl::InEarSession::makeMinimum(uint64_t this)
{
  if (!*(_QWORD *)(this + 16))
    operator new();
  return this;
}

uint64_t CMMsl::InEarSession::makeMaximum(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

double CMMsl::InEarTransition::InEarTransition(CMMsl::InEarTransition *this)
{
  double result;

  *(_QWORD *)this = off_100351B40;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351B40;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  return result;
}

void CMMsl::InEarTransition::~InEarTransition(CMMsl::InEarTransition *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::InEarTransition::InEarTransition(uint64_t this, const CMMsl::InEarTransition *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = off_100351B40;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 28) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_BYTE *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return this;
LABEL_12:
      v8 = *((_DWORD *)a2 + 7);
      *(_BYTE *)(this + 32) = v3 | 0x10;
      *(_DWORD *)(this + 28) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_BYTE *)(this + 32) = v3;
  *(_DWORD *)(this + 16) = v7;
  if ((*((_BYTE *)a2 + 32) & 0x10) != 0)
    goto LABEL_12;
  return this;
}

uint64_t CMMsl::InEarTransition::operator=(uint64_t a1, const CMMsl::InEarTransition *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;
  int v10;

  if ((const CMMsl::InEarTransition *)a1 != a2)
  {
    CMMsl::InEarTransition::InEarTransition((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarTransition *a2, CMMsl::InEarTransition *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  double result;
  uint64_t v7;
  int v8;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  result = *((double *)a2 + 2);
  v7 = *((_QWORD *)this + 2);
  *((double *)this + 2) = result;
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  return result;
}

double CMMsl::InEarTransition::InEarTransition(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_100351B40;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100351B40;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::InEarTransition::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _QWORD v9[2];
  __int128 v10;
  int v11;

  if (a1 != a2)
  {
    v9[0] = off_100351B40;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    v9[1] = v5;
    v6 = *(_OWORD *)(a1 + 16);
    v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::InEarTransition::formatText(CMMsl::InEarTransition *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "eventTag", *((_DWORD *)this + 4));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((_BYTE *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "from", *((_DWORD *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    if ((*((_BYTE *)this + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "to", *((_DWORD *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarTransition::readFrom(CMMsl::InEarTransition *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_BYTE *)this + 32) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)a2 + 2))
              {
                *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
                v2 = *((_QWORD *)a2 + 1) + 8;
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 2u:
              *((_BYTE *)this + 32) |= 8u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_87:
                    v2 = v47 + 1;
                    goto LABEL_88;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_87;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_88;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_88:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_104;
            case 3u:
              *((_BYTE *)this + 32) |= 4u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_104;
            case 4u:
              *((_BYTE *)this + 32) |= 2u;
              v33 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v34 = *(_QWORD *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)a2 + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 4) = v37;
              goto LABEL_104;
            case 5u:
              *((_BYTE *)this + 32) |= 0x10u;
              v39 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v40 = *(_QWORD *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)a2 + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 7) = v43;
LABEL_104:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return this;
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 5u);
  }
LABEL_10:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 4u);
  if ((*(_BYTE *)(v3 + 32) & 0x10) != 0)
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 5u);
  return this;
}

BOOL CMMsl::InEarTransition::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 32) & 0x10) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  return v2;
}

uint64_t CMMsl::InEarTransition::hash_value(CMMsl::InEarTransition *this)
{
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v1 = *((double *)this + 1);
    if (v1 == 0.0)
      v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 6);
      if ((*((_BYTE *)this + 32) & 4) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v1 = 0.0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_3;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
LABEL_4:
    v3 = *((int *)this + 5);
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_5;
LABEL_12:
    v4 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_6;
LABEL_13:
    v5 = 0;
    return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_11:
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_12;
LABEL_5:
  v4 = *((int *)this + 4);
  if ((*((_BYTE *)this + 32) & 0x10) == 0)
    goto LABEL_13;
LABEL_6:
  v5 = *((int *)this + 7);
  return v2 ^ *(_QWORD *)&v1 ^ v3 ^ v4 ^ v5;
}

double CMMsl::InEarTransitionEntry::InEarTransitionEntry(CMMsl::InEarTransitionEntry *this)
{
  double result;

  *(_QWORD *)this = off_100351B78;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351B78;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void CMMsl::InEarTransitionEntry::~InEarTransitionEntry(CMMsl::InEarTransitionEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = off_100351B78;
  v6 = (void **)((char *)this + 96);
  sub_1002394A8(&v6);
  v6 = (void **)((char *)this + 72);
  sub_1002394A8(&v6);
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::InEarTransitionEntry::~InEarTransitionEntry(this);
  operator delete();
}

CMMsl::InEarTransitionEntry *CMMsl::InEarTransitionEntry::InEarTransitionEntry(CMMsl::InEarTransitionEntry *this, const CMMsl::InEarTransitionEntry *a2)
{
  char *v4;
  char v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_QWORD *)this = off_100351B78;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if ((*((_BYTE *)a2 + 132) & 1) != 0)
  {
    v6 = *((_DWORD *)a2 + 30);
    *((_BYTE *)this + 132) = 1;
    *((_DWORD *)this + 30) = v6;
    v5 = 3;
    if ((*((_BYTE *)a2 + 132) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 2;
  if ((*((_BYTE *)a2 + 132) & 2) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 31);
    *((_BYTE *)this + 132) = v5;
    *((_DWORD *)this + 31) = v7;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 9) != *((_QWORD *)a2 + 10))
    sub_100062ACC();
  if (this != a2)
  {
    sub_100020CE4((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
    sub_100020CE4(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 2);
  }
  if (*((_QWORD *)a2 + 8))
    operator new();
  if (*((_QWORD *)a2 + 7))
    operator new();
  v8 = *((_BYTE *)a2 + 132);
  if ((v8 & 8) != 0)
  {
    v9 = *((_BYTE *)a2 + 129);
    *((_BYTE *)this + 132) |= 8u;
    *((_BYTE *)this + 129) = v9;
    v8 = *((_BYTE *)a2 + 132);
  }
  if ((v8 & 4) != 0)
  {
    v10 = *((_BYTE *)a2 + 128);
    *((_BYTE *)this + 132) |= 4u;
    *((_BYTE *)this + 128) = v10;
  }
  if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 13))
    sub_1000F1148();
  return this;
}

void sub_1000F1148()
{
  operator new();
}

void sub_1000F12BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

CMMsl *CMMsl::InEarTransitionEntry::operator=(CMMsl *a1, const CMMsl::InEarTransitionEntry *a2)
{
  CMMsl::InEarTransitionEntry *v3;
  _BYTE v5[136];

  if (a1 != a2)
  {
    CMMsl::InEarTransitionEntry::InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarTransitionEntry *)v5, v3);
    CMMsl::InEarTransitionEntry::~InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarTransitionEntry *a2, CMMsl::InEarTransitionEntry *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  result = *((double *)a2 + 15);
  v5 = *((_QWORD *)this + 15);
  *((double *)this + 15) = result;
  *((_QWORD *)a2 + 15) = v5;
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v6;
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v7;
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v8;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v9;
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v10;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v11;
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v12;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v13;
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v14;
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v15;
  v16 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 129);
  *((_BYTE *)this + 129) = *((_BYTE *)a2 + 129);
  *((_BYTE *)a2 + 129) = v16;
  LOBYTE(v16) = *((_BYTE *)this + 128);
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  *((_BYTE *)a2 + 128) = v16;
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v17;
  v18 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v18;
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v19;
  return result;
}

uint64_t CMMsl::InEarTransitionEntry::InEarTransitionEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_100351B78;
  v4 = a1 + 32;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_OWORD *)(a1 + 72) = 0u;
  v6 = (_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  sub_100239524((_QWORD *)(a1 + 72));
  *v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  sub_100239458(v4, (__n128 *)(a2 + 32));
  v7 = sub_100239458(v5, (__n128 *)(a2 + 8));
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  if (v9)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v9 + 8))(v9, v7);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  if (v11)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 8))(v11, v7);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  sub_100239524((_QWORD *)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  return a1;
}

CMMsl *CMMsl::InEarTransitionEntry::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::InEarTransitionEntry *v3;
  _BYTE v5[136];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarTransitionEntry::InEarTransitionEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarTransitionEntry *)v5, v3);
    CMMsl::InEarTransitionEntry::~InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarTransitionEntry::formatText(CMMsl::InEarTransitionEntry *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 7);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "baseline");
  if ((*((_BYTE *)this + 132) & 1) != 0)
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 30));
  v6 = *((_QWORD *)this + 8);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "minimum");
  v7 = (uint64_t *)*((_QWORD *)this + 9);
  v8 = (uint64_t *)*((_QWORD *)this + 10);
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "optical");
  }
  v10 = *((_BYTE *)this + 132);
  if ((v10 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "ringBufferUpdated", *((_BYTE *)this + 128));
    v10 = *((_BYTE *)this + 132);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 2) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((*((_BYTE *)this + 132) & 8) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "runningMinAccepted", *((_BYTE *)this + 129));
  if ((*((_BYTE *)this + 132) & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 31));
LABEL_13:
  v11 = (uint64_t *)*((_QWORD *)this + 12);
  v12 = (uint64_t *)*((_QWORD *)this + 13);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "temp");
  }
  v14 = (float *)*((_QWORD *)this + 1);
  v15 = (float *)*((_QWORD *)this + 2);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(a2, "tilt", v16);
  }
  v17 = (float *)*((_QWORD *)this + 4);
  v18 = (float *)*((_QWORD *)this + 5);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(a2, "tip", v19);
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InEarTransitionEntry::readFrom(CMMsl::InEarTransitionEntry *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  BOOL v76;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  char *v87;
  _DWORD *v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  int v104;
  char *v105;
  int v106;
  unint64_t v107;
  _BYTE v109[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 8);
    v9 = (char *)this + 24;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_BYTE *)this + 132) |= 1u;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          v27 = *(_QWORD *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)a2 + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_144;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_107:
            LODWORD(v30) = 0;
            goto LABEL_144;
          }
          v78 = 0;
          v79 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v80 = v25 + 1;
              v81 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)a2 + 1) = v80;
              v30 |= (unint64_t)(v81 & 0x7F) << v78;
              if (v81 < 0)
              {
                v78 += 7;
                v25 = v80;
                v18 = v79++ > 8;
                if (v18)
                  goto LABEL_107;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v30) = 0;
            }
            break;
          }
LABEL_144:
          *((_DWORD *)this + 30) = v30;
          goto LABEL_96;
        case 2u:
          *((_BYTE *)this + 132) |= 2u;
          v33 = *((_QWORD *)a2 + 1);
          v34 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_147;
              v36 += 7;
              v33 = v39;
              v18 = v37++ > 8;
            }
            while (!v18);
LABEL_114:
            LODWORD(v38) = 0;
            goto LABEL_147;
          }
          v82 = 0;
          v83 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v84 = v33 + 1;
              v85 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)a2 + 1) = v84;
              v38 |= (unint64_t)(v85 & 0x7F) << v82;
              if (v85 < 0)
              {
                v82 += 7;
                v33 = v84;
                v18 = v83++ > 8;
                if (v18)
                  goto LABEL_114;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v38) = 0;
            }
            break;
          }
LABEL_147:
          *((_DWORD *)this + 31) = v38;
          goto LABEL_96;
        case 3u:
          sub_100063B60();
        case 4u:
          if (v24 != 2)
          {
            v87 = (char *)*((_QWORD *)this + 5);
            v86 = *((_QWORD *)this + 6);
            if ((unint64_t)v87 >= v86)
            {
              v91 = (char *)*v10;
              v92 = (v87 - (_BYTE *)*v10) >> 2;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 62)
LABEL_171:
                sub_10000D5F8();
              v94 = v86 - (_QWORD)v91;
              if (v94 >> 1 > v93)
                v93 = v94 >> 1;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                v95 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v95 = v93;
              if (v95)
              {
                v96 = (char *)sub_100020E2C((uint64_t)v11, v95);
                v91 = (char *)*((_QWORD *)this + 4);
                v87 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v96 = 0;
              }
              v103 = &v96[4 * v92];
              *(_DWORD *)v103 = 0;
              v88 = v103 + 4;
              while (v87 != v91)
              {
                v104 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v103 - 1) = v104;
                v103 -= 4;
              }
              *((_QWORD *)this + 4) = v103;
              *((_QWORD *)this + 5) = v88;
              *((_QWORD *)this + 6) = &v96[4 * v95];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *(_DWORD *)v87 = 0;
              v88 = v87 + 4;
            }
            *((_QWORD *)this + 5) = v88;
            goto LABEL_162;
          }
          if ((PB::Reader::placeMark(a2, v109) & 1) != 0)
            return 0;
          v41 = *((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          while (v41 < v42 && !*((_BYTE *)a2 + 24))
          {
            v44 = (char *)*((_QWORD *)this + 5);
            v43 = *((_QWORD *)this + 6);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_171;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_100020E2C((uint64_t)v11, v50);
                v46 = (char *)*((_QWORD *)this + 4);
                v44 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((_QWORD *)this + 4) = v52;
              *((_QWORD *)this + 5) = v45;
              *((_QWORD *)this + 6) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *((_QWORD *)this + 5) = v45;
            v54 = *((_QWORD *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)a2 + 2))
              goto LABEL_123;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v54);
            v42 = *((_QWORD *)a2 + 2);
            v41 = *((_QWORD *)a2 + 1) + 4;
            *((_QWORD *)a2 + 1) = v41;
          }
          goto LABEL_95;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v109) & 1) != 0)
              return 0;
            v55 = *((_QWORD *)a2 + 1);
            v56 = *((_QWORD *)a2 + 2);
            while (v55 < v56 && !*((_BYTE *)a2 + 24))
            {
              v58 = (char *)*((_QWORD *)this + 2);
              v57 = *((_QWORD *)this + 3);
              if ((unint64_t)v58 >= v57)
              {
                v60 = (char *)*v8;
                v61 = (v58 - (_BYTE *)*v8) >> 2;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62)
                  goto LABEL_172;
                v63 = v57 - (_QWORD)v60;
                if (v63 >> 1 > v62)
                  v62 = v63 >> 1;
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                  v64 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v64 = v62;
                if (v64)
                {
                  v65 = (char *)sub_100020E2C((uint64_t)v9, v64);
                  v60 = (char *)*((_QWORD *)this + 1);
                  v58 = (char *)*((_QWORD *)this + 2);
                }
                else
                {
                  v65 = 0;
                }
                v66 = &v65[4 * v61];
                *(_DWORD *)v66 = 0;
                v59 = v66 + 4;
                while (v58 != v60)
                {
                  v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *((_QWORD *)this + 1) = v66;
                *((_QWORD *)this + 2) = v59;
                *((_QWORD *)this + 3) = &v65[4 * v64];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *(_DWORD *)v58 = 0;
                v59 = v58 + 4;
              }
              *((_QWORD *)this + 2) = v59;
              v68 = *((_QWORD *)a2 + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)a2 + 2))
              {
LABEL_123:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v68);
              v56 = *((_QWORD *)a2 + 2);
              v55 = *((_QWORD *)a2 + 1) + 4;
              *((_QWORD *)a2 + 1) = v55;
            }
LABEL_95:
            PB::Reader::recallMark(a2, v109);
          }
          else
          {
            v90 = (char *)*((_QWORD *)this + 2);
            v89 = *((_QWORD *)this + 3);
            if ((unint64_t)v90 >= v89)
            {
              v97 = (char *)*v8;
              v98 = (v90 - (_BYTE *)*v8) >> 2;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 62)
LABEL_172:
                sub_10000D5F8();
              v100 = v89 - (_QWORD)v97;
              if (v100 >> 1 > v99)
                v99 = v100 >> 1;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
                v101 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)sub_100020E2C((uint64_t)v9, v101);
                v97 = (char *)*((_QWORD *)this + 1);
                v90 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v102 = 0;
              }
              v105 = &v102[4 * v98];
              *(_DWORD *)v105 = 0;
              v88 = v105 + 4;
              while (v90 != v97)
              {
                v106 = *((_DWORD *)v90 - 1);
                v90 -= 4;
                *((_DWORD *)v105 - 1) = v106;
                v105 -= 4;
              }
              *((_QWORD *)this + 1) = v105;
              *((_QWORD *)this + 2) = v88;
              *((_QWORD *)this + 3) = &v102[4 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_DWORD *)v90 = 0;
              v88 = v90 + 4;
            }
            *((_QWORD *)this + 2) = v88;
LABEL_162:
            v107 = *((_QWORD *)a2 + 1);
            if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((_QWORD *)a2 + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(_QWORD *)a2 + v107);
              *((_QWORD *)a2 + 1) += 4;
            }
            else
            {
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_96:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          operator new();
        case 7u:
          operator new();
        case 8u:
          *((_BYTE *)this + 132) |= 8u;
          v69 = *((_QWORD *)a2 + 1);
          if (v69 >= *((_QWORD *)a2 + 2))
          {
            v72 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v70 = v69 + 1;
            v71 = *(unsigned __int8 *)(*(_QWORD *)a2 + v69);
            *((_QWORD *)a2 + 1) = v70;
            v72 = v71 != 0;
          }
          *((_BYTE *)this + 129) = v72;
          goto LABEL_96;
        case 9u:
          *((_BYTE *)this + 132) |= 4u;
          v73 = *((_QWORD *)a2 + 1);
          if (v73 >= *((_QWORD *)a2 + 2))
          {
            v76 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v74 = v73 + 1;
            v75 = *(unsigned __int8 *)(*(_QWORD *)a2 + v73);
            *((_QWORD *)a2 + 1) = v74;
            v76 = v75 != 0;
          }
          *((_BYTE *)this + 128) = v76;
          goto LABEL_96;
        case 0xAu:
          sub_1000F2030();
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1000F2030()
{
  operator new();
}

void sub_1000F2168(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::InEarTransitionEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  const PB::Base *v14;
  const PB::Base *v15;
  char v16;
  const PB::Base **v17;
  const PB::Base **v18;
  const PB::Base *v19;

  v3 = this;
  v4 = *(_BYTE *)(this + 132);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 120), 1u);
    v4 = *(_BYTE *)(v3 + 132);
  }
  if ((v4 & 2) != 0)
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 2u);
  v5 = *(const PB::Base ***)(v3 + 72);
  v6 = *(const PB::Base ***)(v3 + 80);
  while (v5 != v6)
  {
    v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7, 3u);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    this = PB::Writer::write(a2, v10, 4u);
  }
  v11 = *(float **)(v3 + 8);
  v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    v13 = *v11++;
    this = PB::Writer::write(a2, v13, 5u);
  }
  v14 = *(const PB::Base **)(v3 + 64);
  if (v14)
    this = PB::Writer::writeSubmessage(a2, v14, 6u);
  v15 = *(const PB::Base **)(v3 + 56);
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15, 7u);
  v16 = *(_BYTE *)(v3 + 132);
  if ((v16 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 129), 8u);
    v16 = *(_BYTE *)(v3 + 132);
  }
  if ((v16 & 4) != 0)
    this = PB::Writer::write(a2, *(_BYTE *)(v3 + 128), 9u);
  v18 = *(const PB::Base ***)(v3 + 96);
  v17 = *(const PB::Base ***)(v3 + 104);
  while (v18 != v17)
  {
    v19 = *v18++;
    this = PB::Writer::writeSubmessage(a2, v19, 0xAu);
  }
  return this;
}

BOOL CMMsl::InEarTransitionEntry::operator==(uint64_t a1, uint64_t a2)
{
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(a1 + 132) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 132) & 1) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 132) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 132) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 132) & 2) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 132) & 2) != 0)
  {
    return 0;
  }
  if (!sub_100063F68((uint64_t *)(a1 + 72), a2 + 72))
    return 0;
  v5 = *(float **)(a1 + 32);
  v4 = *(float **)(a1 + 40);
  v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  if (v10)
  {
    if (!v11 || !CMMsl::ClefMeasurement::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    if (!v13 || !CMMsl::ClefMeasurement::operator==(v12, v13))
      return 0;
LABEL_30:
    if ((*(_BYTE *)(a1 + 132) & 8) != 0)
    {
      if ((*(_BYTE *)(a2 + 132) & 8) == 0 || *(unsigned __int8 *)(a1 + 129) != *(unsigned __int8 *)(a2 + 129))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 132) & 8) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 132) & 4) != 0)
    {
      if ((*(_BYTE *)(a2 + 132) & 4) == 0 || *(unsigned __int8 *)(a1 + 128) != *(unsigned __int8 *)(a2 + 128))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 132) & 4) != 0)
    {
      return 0;
    }
    return sub_1000F2444((uint64_t *)(a1 + 96), a2 + 96);
  }
  if (!v13)
    goto LABEL_30;
  return 0;
}

BOOL sub_1000F2444(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  v5 = v2 + 8;
  do
  {
    v6 = *v4++;
    result = CMMsl::ClefTemperature::operator==(*(_QWORD *)(v5 - 8), v6);
    v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::InEarTransitionEntry::hash_value(CMMsl::InEarTransitionEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  float v9;
  float v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  float v18;
  float v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  char v29;

  if ((*((_BYTE *)this + 132) & 1) != 0)
  {
    v2 = *((unsigned int *)this + 30);
    if ((*((_BYTE *)this + 132) & 2) != 0)
      goto LABEL_3;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 132) & 2) != 0)
    {
LABEL_3:
      v3 = *((int *)this + 31);
      goto LABEL_6;
    }
  }
  v3 = 0;
LABEL_6:
  v4 = sub_1000640C0((uint64_t)&v29, (uint64_t **)this + 9);
  v5 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v6 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v7 = *((_QWORD *)this + 8);
  if (v7)
  {
    v8 = *(_BYTE *)(v7 + 16);
    v9 = *(float *)(v7 + 8);
    v10 = *(float *)(v7 + 12);
    v11 = v9 == 0.0 || (v8 & 1) == 0;
    v12 = LODWORD(v9);
    if (v11)
      v12 = 0;
    v13 = v8 & 2;
    v14 = v10 == 0.0 || v13 == 0;
    v15 = LODWORD(v10);
    if (v14)
      v15 = 0;
    v7 = v15 ^ v12;
  }
  v16 = *((_QWORD *)this + 7);
  if (v16)
  {
    v17 = *(_BYTE *)(v16 + 16);
    v18 = *(float *)(v16 + 8);
    v19 = *(float *)(v16 + 12);
    v20 = v18 == 0.0 || (v17 & 1) == 0;
    v21 = LODWORD(v18);
    if (v20)
      v21 = 0;
    v22 = v17 & 2;
    v23 = v19 == 0.0 || v22 == 0;
    v24 = LODWORD(v19);
    if (v23)
      v24 = 0;
    v16 = v24 ^ v21;
  }
  if ((*((_BYTE *)this + 132) & 8) != 0)
  {
    v25 = *((unsigned __int8 *)this + 129);
    if ((*((_BYTE *)this + 132) & 4) != 0)
      goto LABEL_32;
LABEL_34:
    v26 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v16 ^ v25 ^ v26 ^ sub_1000F2604((uint64_t)&v28, (uint64_t **)this + 12);
  }
  v25 = 0;
  if ((*((_BYTE *)this + 132) & 4) == 0)
    goto LABEL_34;
LABEL_32:
  v26 = *((unsigned __int8 *)this + 128);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v16 ^ v25 ^ v26 ^ sub_1000F2604((uint64_t)&v28, (uint64_t **)this + 12);
}

uint64_t sub_1000F2604(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  result = 0;
  do
  {
    v5 = *v2++;
    v6 = *(_BYTE *)(v5 + 16);
    v8 = *(int *)(v5 + 8);
    v7 = *(int *)(v5 + 12);
    if ((v6 & 1) == 0)
      v8 = 0;
    if ((v6 & 2) == 0)
      v7 = 0;
    result ^= v8 ^ v7;
  }
  while (v2 != v3);
  return result;
}

uint64_t CMMsl::InEarTransitionEntry::makeMinimum(uint64_t this)
{
  if (!*(_QWORD *)(this + 64))
    operator new();
  return this;
}

uint64_t CMMsl::InEarTransitionEntry::makeBaseline(uint64_t this)
{
  if (!*(_QWORD *)(this + 56))
    operator new();
  return this;
}

uint64_t CMMsl::InertialOdometry::InertialOdometry(uint64_t this)
{
  *(_QWORD *)this = off_100351BB0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351BB0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

void CMMsl::InertialOdometry::~InertialOdometry(CMMsl::InertialOdometry *this)
{
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::InertialOdometry::InertialOdometry(uint64_t this, const CMMsl::InertialOdometry *a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;

  *(_QWORD *)this = off_100351BB0;
  *(_DWORD *)(this + 68) = 0;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_WORD *)(this + 68) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 20) = v6;
    v2 = *((_WORD *)a2 + 34);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 24) = v7;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v8;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v9;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v10;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v11;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v12;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v13;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v14 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v14;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v15 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v15;
  v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      return this;
LABEL_30:
    v17 = *((_BYTE *)a2 + 64);
    *(_WORD *)(this + 68) = v3 | 0x2000;
    *(_BYTE *)(this + 64) = v17;
    return this;
  }
LABEL_29:
  v16 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v16;
  if ((*((_WORD *)a2 + 34) & 0x2000) != 0)
    goto LABEL_30;
  return this;
}

CMMsl *CMMsl::InertialOdometry::operator=(CMMsl *a1, const CMMsl::InertialOdometry *a2)
{
  CMMsl::InertialOdometry *v3;
  _BYTE v5[72];

  if (a1 != a2)
  {
    CMMsl::InertialOdometry::InertialOdometry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InertialOdometry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InertialOdometry *a2, CMMsl::InertialOdometry *a3)
{
  int v3;
  uint64_t v4;
  float result;
  int v6;
  int v7;

  v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  v6 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v7;
  return result;
}

float CMMsl::InertialOdometry::InertialOdometry(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100351BB0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return result;
}

CMMsl *CMMsl::InertialOdometry::operator=(CMMsl *this, uint64_t a2, CMMsl::InertialOdometry *a3)
{
  __int128 v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;

  if (this != (CMMsl *)a2)
  {
    v6[0] = off_100351BB0;
    v12 = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(a2 + 68) = 0;
    v6[1] = *(_QWORD *)(a2 + 8);
    v4 = *(_OWORD *)(a2 + 32);
    v7 = *(_OWORD *)(a2 + 16);
    v8 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a2 + 56);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = v4;
    v11 = *(_BYTE *)(a2 + 64);
    CMMsl::swap(this, (CMMsl::InertialOdometry *)v6, a3);
    PB::Base::~Base((PB::Base *)v6);
  }
  return this;
}

uint64_t CMMsl::InertialOdometry::formatText(CMMsl::InertialOdometry *this, PB::TextFormatter *a2, const char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_WORD *)this + 34);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "deltaPositionX", *((float *)this + 4));
    v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaPositionY", *((float *)this + 5));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "deltaPositionZ", *((float *)this + 6));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "deltaVelocityX", *((float *)this + 7));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "deltaVelocityY", *((float *)this + 8));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "deltaVelocityZ", *((float *)this + 9));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isBIO", *((_BYTE *)this + 64));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 10));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 11));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 12));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 13));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(a2, "staticFlag", *((_DWORD *)this + 15));
    if ((*((_WORD *)this + 34) & 1) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "referenceFrame", *((_DWORD *)this + 14));
  v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 1) != 0)
LABEL_15:
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InertialOdometry::readFrom(CMMsl::InertialOdometry *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 1u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_QWORD *)this + 1) = *(_QWORD *)(*(_QWORD *)a2 + v2);
              v2 = *((_QWORD *)a2 + 1) + 8;
              goto LABEL_91;
            case 2u:
              *((_WORD *)this + 34) |= 2u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 3u:
              *((_WORD *)this + 34) |= 4u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 4u:
              *((_WORD *)this + 34) |= 8u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 5u:
              *((_WORD *)this + 34) |= 0x10u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 6u:
              *((_WORD *)this + 34) |= 0x20u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 8) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 7u:
              *((_WORD *)this + 34) |= 0x40u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 9) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 8u:
              *((_WORD *)this + 34) |= 0x100u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 11) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 9u:
              *((_WORD *)this + 34) |= 0x200u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 12) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 0xAu:
              *((_WORD *)this + 34) |= 0x400u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
                goto LABEL_56;
              *((_DWORD *)this + 13) = *(_DWORD *)(*(_QWORD *)a2 + v2);
              goto LABEL_90;
            case 0xBu:
              *((_WORD *)this + 34) |= 0x80u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_90:
                v2 = *((_QWORD *)a2 + 1) + 4;
LABEL_91:
                *((_QWORD *)a2 + 1) = v2;
              }
              else
              {
LABEL_56:
                *((_BYTE *)a2 + 24) = 1;
              }
              goto LABEL_102;
            case 0xCu:
              *((_WORD *)this + 34) |= 0x800u;
              v21 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v22 = *(_QWORD *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_96;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_95:
                    v2 = v37 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v25) = 0;
                goto LABEL_95;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)a2 + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_96;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_96:
              *((_DWORD *)this + 14) = v25;
              goto LABEL_102;
            case 0xDu:
              *((_WORD *)this + 34) |= 0x1000u;
              v27 = *((_QWORD *)a2 + 1);
              v2 = *((_QWORD *)a2 + 2);
              v28 = *(_QWORD *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)a2 + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)a2 + 24) = 1;
                    goto LABEL_101;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_100:
                    v2 = v41 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)a2 + 24))
                  LODWORD(v31) = 0;
                goto LABEL_100;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)a2 + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_101;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_101:
              *((_DWORD *)this + 15) = v31;
LABEL_102:
              v3 = *((_QWORD *)a2 + 2);
              v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *((_WORD *)this + 34) |= 0x2000u;
              v2 = *((_QWORD *)a2 + 1);
              if (v2 >= *((_QWORD *)a2 + 2))
              {
                v34 = 0;
                *((_BYTE *)a2 + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)a2 + v2++);
                *((_QWORD *)a2 + 1) = v2;
                v34 = v33 != 0;
              }
              *((_BYTE *)this + 64) = v34;
              goto LABEL_102;
            default:
              result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)a2 + 1);
              goto LABEL_102;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::InertialOdometry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  __int16 v4;

  v3 = this;
  v4 = *(_WORD *)(this + 68);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 5u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 6u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 7u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 8u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 9u);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xAu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xBu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0xCu);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return this;
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 64), 0xEu);
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0xDu);
  if ((*(_WORD *)(v3 + 68) & 0x2000) != 0)
    return PB::Writer::write(a2, *(_BYTE *)(v3 + 64), 0xEu);
  return this;
}

BOOL CMMsl::InertialOdometry::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 68);
  v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x2000) == 0;
  if ((*(_WORD *)(a1 + 68) & 0x2000) != 0)
    return (*(_WORD *)(a2 + 68) & 0x2000) != 0 && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
  return v4;
}

uint64_t CMMsl::InertialOdometry::hash_value(CMMsl::InertialOdometry *this)
{
  __int16 v1;
  double v2;
  float v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    v2 = 0.0;
    if ((v1 & 2) != 0)
      goto LABEL_3;
LABEL_39:
    v4 = 0;
    if ((v1 & 4) != 0)
      goto LABEL_6;
LABEL_40:
    v6 = 0;
    if ((v1 & 8) != 0)
      goto LABEL_9;
LABEL_41:
    v8 = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_12;
LABEL_42:
    v10 = 0;
    if ((v1 & 0x20) != 0)
      goto LABEL_15;
LABEL_43:
    v12 = 0;
    if ((v1 & 0x40) != 0)
      goto LABEL_18;
LABEL_44:
    v14 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0)
      goto LABEL_21;
LABEL_45:
    v16 = 0;
    if ((*((_WORD *)this + 34) & 0x200) != 0)
      goto LABEL_24;
LABEL_46:
    v18 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0)
      goto LABEL_27;
LABEL_47:
    v20 = 0;
    if ((v1 & 0x80) != 0)
      goto LABEL_30;
LABEL_48:
    v22 = 0;
    if ((*((_WORD *)this + 34) & 0x800) != 0)
      goto LABEL_33;
    goto LABEL_49;
  }
  v2 = *((double *)this + 1);
  if (v2 == 0.0)
    v2 = 0.0;
  if ((v1 & 2) == 0)
    goto LABEL_39;
LABEL_3:
  v3 = *((float *)this + 4);
  v4 = LODWORD(v3);
  if (v3 == 0.0)
    v4 = 0;
  if ((v1 & 4) == 0)
    goto LABEL_40;
LABEL_6:
  v5 = *((float *)this + 5);
  v6 = LODWORD(v5);
  if (v5 == 0.0)
    v6 = 0;
  if ((v1 & 8) == 0)
    goto LABEL_41;
LABEL_9:
  v7 = *((float *)this + 6);
  v8 = LODWORD(v7);
  if (v7 == 0.0)
    v8 = 0;
  if ((v1 & 0x10) == 0)
    goto LABEL_42;
LABEL_12:
  v9 = *((float *)this + 7);
  v10 = LODWORD(v9);
  if (v9 == 0.0)
    v10 = 0;
  if ((v1 & 0x20) == 0)
    goto LABEL_43;
LABEL_15:
  v11 = *((float *)this + 8);
  v12 = LODWORD(v11);
  if (v11 == 0.0)
    v12 = 0;
  if ((v1 & 0x40) == 0)
    goto LABEL_44;
LABEL_18:
  v13 = *((float *)this + 9);
  v14 = LODWORD(v13);
  if (v13 == 0.0)
    v14 = 0;
  if ((*((_WORD *)this + 34) & 0x100) == 0)
    goto LABEL_45;
LABEL_21:
  v15 = *((float *)this + 11);
  v16 = LODWORD(v15);
  if (v15 == 0.0)
    v16 = 0;
  if ((*((_WORD *)this + 34) & 0x200) == 0)
    goto LABEL_46;
LABEL_24:
  v17 = *((float *)this + 12);
  v18 = LODWORD(v17);
  if (v17 == 0.0)
    v18 = 0;
  if ((*((_WORD *)this + 34) & 0x400) == 0)
    goto LABEL_47;
LABEL_27:
  v19 = *((float *)this + 13);
  v20 = LODWORD(v19);
  if (v19 == 0.0)
    v20 = 0;
  if ((v1 & 0x80) == 0)
    goto LABEL_48;
LABEL_30:
  v21 = *((float *)this + 10);
  v22 = LODWORD(v21);
  if (v21 == 0.0)
    v22 = 0;
  if ((*((_WORD *)this + 34) & 0x800) != 0)
  {
LABEL_33:
    v23 = *((unsigned int *)this + 14);
    if ((*((_WORD *)this + 34) & 0x1000) != 0)
      goto LABEL_34;
LABEL_50:
    v24 = 0;
    if ((*((_WORD *)this + 34) & 0x2000) != 0)
      goto LABEL_35;
LABEL_51:
    v25 = 0;
    return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25;
  }
LABEL_49:
  v23 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) == 0)
    goto LABEL_50;
LABEL_34:
  v24 = *((unsigned int *)this + 15);
  if ((*((_WORD *)this + 34) & 0x2000) == 0)
    goto LABEL_51;
LABEL_35:
  v25 = *((unsigned __int8 *)this + 64);
  return v4 ^ *(_QWORD *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25;
}

double CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  double result;

  *(_QWORD *)this = off_100351BE8;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351BE8;
  *((_DWORD *)this + 22) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = off_100351BE8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

{
  CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure(this);
  operator delete();
}

CMMsl::InitialHistoricalMeanSeaLevelPressure *CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(CMMsl::InitialHistoricalMeanSeaLevelPressure *this, const CMMsl::InitialHistoricalMeanSeaLevelPressure *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  v5 = (char *)this + 56;
  *(_QWORD *)this = off_100351BE8;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  if (this != a2)
  {
    sub_100239350((char *)this + 32, *((char **)a2 + 4), *((_QWORD *)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
    sub_100239350(v4, *((char **)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
    sub_100239350(v5, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3);
  }
  if ((*((_BYTE *)a2 + 88) & 1) != 0)
  {
    v6 = *((_QWORD *)a2 + 10);
    *((_BYTE *)this + 88) |= 1u;
    *((_QWORD *)this + 10) = v6;
  }
  return this;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::operator=(uint64_t a1, const CMMsl::InitialHistoricalMeanSeaLevelPressure *a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if ((const CMMsl::InitialHistoricalMeanSeaLevelPressure *)a1 != a2)
  {
    CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure((CMMsl::InitialHistoricalMeanSeaLevelPressure *)&v11, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    v18 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    v15 = v7;
    v8 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    v17 = v9;
    CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure((CMMsl::InitialHistoricalMeanSeaLevelPressure *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InitialHistoricalMeanSeaLevelPressure *a2, CMMsl::InitialHistoricalMeanSeaLevelPressure *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v6;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v7;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v8;
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v9;
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v10;
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v11;
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v12;
  result = *((double *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((double *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_100351BE8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  sub_100239458(a1 + 32, (__n128 *)(a2 + 32));
  sub_100239458(a1 + 8, (__n128 *)(a2 + 8));
  sub_100239458(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (a1 != a2)
  {
    CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure((uint64_t)&v11, a2);
    v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    v18 = v3;
    v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    v14 = v4;
    v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    v12 = v5;
    v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    v13 = v6;
    v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    v15 = v7;
    v8 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;
    v16 = v8;
    v9 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v17;
    v17 = v9;
    CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure((CMMsl::InitialHistoricalMeanSeaLevelPressure *)&v11);
  }
  return a1;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::formatText(CMMsl::InitialHistoricalMeanSeaLevelPressure *this, PB::TextFormatter *a2, const char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = (double *)*((_QWORD *)this + 1);
  v6 = (double *)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(a2, "historicalMeanSeaLevelPressure", v7);
  }
  v8 = (double *)*((_QWORD *)this + 4);
  v9 = (double *)*((_QWORD *)this + 5);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(a2, "historicalTimestamp", v10);
  }
  v11 = (double *)*((_QWORD *)this + 7);
  v12 = (double *)*((_QWORD *)this + 8);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(a2, "historicalUncertainty", v13);
  }
  if ((*((_BYTE *)this + 88) & 1) != 0)
    PB::TextFormatter::format(a2, "refreshTime", *((double *)this + 10));
  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InitialHistoricalMeanSeaLevelPressure::readFrom(CMMsl::InitialHistoricalMeanSeaLevelPressure *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v101;
  char *v102;
  _BYTE v103[16];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)((char *)this + 56);
    v9 = (void **)((char *)this + 8);
    v101 = (char *)this + 24;
    v102 = (char *)this + 72;
    v10 = (void **)((char *)this + 32);
    v11 = (char *)this + 48;
    while (1)
    {
      v12 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            v69 = (char *)*((_QWORD *)this + 5);
            v68 = *((_QWORD *)this + 6);
            if ((unint64_t)v69 >= v68)
            {
              v75 = (char *)*v10;
              v76 = (v69 - (_BYTE *)*v10) >> 3;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 61)
LABEL_166:
                sub_10000D5F8();
              v78 = v68 - (_QWORD)v75;
              if (v78 >> 2 > v77)
                v77 = v78 >> 2;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_10000D60C((uint64_t)v11, v79);
                v75 = (char *)*((_QWORD *)this + 4);
                v69 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v80 = 0;
              }
              v93 = &v80[8 * v76];
              *(_QWORD *)v93 = 0;
              v70 = v93 + 8;
              while (v69 != v75)
              {
                v94 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *((_QWORD *)v93 - 1) = v94;
                v93 -= 8;
              }
              *((_QWORD *)this + 4) = v93;
              *((_QWORD *)this + 5) = v70;
              *((_QWORD *)this + 6) = &v80[8 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v69 = 0;
              v70 = v69 + 8;
            }
            *((_QWORD *)this + 5) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
            return 0;
          v25 = *((_QWORD *)a2 + 1);
          v26 = *((_QWORD *)a2 + 2);
          while (v25 < v26 && !*((_BYTE *)a2 + 24))
          {
            v28 = (char *)*((_QWORD *)this + 5);
            v27 = *((_QWORD *)this + 6);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*v10;
              v31 = (v28 - (_BYTE *)*v10) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_166;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)sub_10000D60C((uint64_t)v11, v34);
                v30 = (char *)*((_QWORD *)this + 4);
                v28 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[8 * v31];
              *(_QWORD *)v36 = 0;
              v29 = v36 + 8;
              while (v28 != v30)
              {
                v37 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v36 - 1) = v37;
                v36 -= 8;
              }
              *((_QWORD *)this + 4) = v36;
              *((_QWORD *)this + 5) = v29;
              *((_QWORD *)this + 6) = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v28 = 0;
              v29 = v28 + 8;
            }
            *((_QWORD *)this + 5) = v29;
            v38 = *((_QWORD *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_106;
            *(v29 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v38);
            v26 = *((_QWORD *)a2 + 2);
            v25 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v25;
          }
          goto LABEL_107;
        case 2u:
          if (v24 != 2)
          {
            v72 = (char *)*((_QWORD *)this + 2);
            v71 = *((_QWORD *)this + 3);
            if ((unint64_t)v72 >= v71)
            {
              v81 = (char *)*v9;
              v82 = (v72 - (_BYTE *)*v9) >> 3;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 61)
LABEL_167:
                sub_10000D5F8();
              v84 = v71 - (_QWORD)v81;
              if (v84 >> 2 > v83)
                v83 = v84 >> 2;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                v85 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v86 = (char *)sub_10000D60C((uint64_t)v101, v85);
                v81 = (char *)*((_QWORD *)this + 1);
                v72 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v86 = 0;
              }
              v95 = &v86[8 * v82];
              *(_QWORD *)v95 = 0;
              v70 = v95 + 8;
              while (v72 != v81)
              {
                v96 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v95 - 1) = v96;
                v95 -= 8;
              }
              *((_QWORD *)this + 1) = v95;
              *((_QWORD *)this + 2) = v70;
              *((_QWORD *)this + 3) = &v86[8 * v85];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *(_QWORD *)v72 = 0;
              v70 = v72 + 8;
            }
            *((_QWORD *)this + 2) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
            return 0;
          v39 = *((_QWORD *)a2 + 1);
          v40 = *((_QWORD *)a2 + 2);
          while (v39 < v40 && !*((_BYTE *)a2 + 24))
          {
            v42 = (char *)*((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 3);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v9;
              v45 = (v42 - (_BYTE *)*v9) >> 3;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61)
                goto LABEL_167;
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_10000D60C((uint64_t)v101, v48);
                v44 = (char *)*((_QWORD *)this + 1);
                v42 = (char *)*((_QWORD *)this + 2);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[8 * v45];
              *(_QWORD *)v50 = 0;
              v43 = v50 + 8;
              while (v42 != v44)
              {
                v51 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v50 - 1) = v51;
                v50 -= 8;
              }
              *((_QWORD *)this + 1) = v50;
              *((_QWORD *)this + 2) = v43;
              *((_QWORD *)this + 3) = &v49[8 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_QWORD *)v42 = 0;
              v43 = v42 + 8;
            }
            *((_QWORD *)this + 2) = v43;
            v52 = *((_QWORD *)a2 + 1);
            if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)a2 + 2))
              goto LABEL_106;
            *(v43 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v52);
            v40 = *((_QWORD *)a2 + 2);
            v39 = *((_QWORD *)a2 + 1) + 8;
            *((_QWORD *)a2 + 1) = v39;
          }
          goto LABEL_107;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark(a2, v103) & 1) != 0)
              return 0;
            v53 = *((_QWORD *)a2 + 1);
            v54 = *((_QWORD *)a2 + 2);
            while (v53 < v54 && !*((_BYTE *)a2 + 24))
            {
              v56 = (char *)*((_QWORD *)this + 8);
              v55 = *((_QWORD *)this + 9);
              if ((unint64_t)v56 >= v55)
              {
                v58 = (char *)*v8;
                v59 = (v56 - (_BYTE *)*v8) >> 3;
                v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 61)
                  goto LABEL_168;
                v61 = v55 - (_QWORD)v58;
                if (v61 >> 2 > v60)
                  v60 = v61 >> 2;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                  v62 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v62 = v60;
                if (v62)
                {
                  v63 = (char *)sub_10000D60C((uint64_t)v102, v62);
                  v58 = (char *)*((_QWORD *)this + 7);
                  v56 = (char *)*((_QWORD *)this + 8);
                }
                else
                {
                  v63 = 0;
                }
                v64 = &v63[8 * v59];
                *(_QWORD *)v64 = 0;
                v57 = v64 + 8;
                while (v56 != v58)
                {
                  v65 = *((_QWORD *)v56 - 1);
                  v56 -= 8;
                  *((_QWORD *)v64 - 1) = v65;
                  v64 -= 8;
                }
                *((_QWORD *)this + 7) = v64;
                *((_QWORD *)this + 8) = v57;
                *((_QWORD *)this + 9) = &v63[8 * v62];
                if (v58)
                  operator delete(v58);
              }
              else
              {
                *(_QWORD *)v56 = 0;
                v57 = v56 + 8;
              }
              *((_QWORD *)this + 8) = v57;
              v66 = *((_QWORD *)a2 + 1);
              if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)a2 + 2))
              {
LABEL_106:
                *((_BYTE *)a2 + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v66);
              v54 = *((_QWORD *)a2 + 2);
              v53 = *((_QWORD *)a2 + 1) + 8;
              *((_QWORD *)a2 + 1) = v53;
            }
LABEL_107:
            PB::Reader::recallMark(a2, v103);
          }
          else
          {
            v74 = (char *)*((_QWORD *)this + 8);
            v73 = *((_QWORD *)this + 9);
            if ((unint64_t)v74 >= v73)
            {
              v87 = (char *)*v8;
              v88 = (v74 - (_BYTE *)*v8) >> 3;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
LABEL_168:
                sub_10000D5F8();
              v90 = v73 - (_QWORD)v87;
              if (v90 >> 2 > v89)
                v89 = v90 >> 2;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v92 = (char *)sub_10000D60C((uint64_t)v102, v91);
                v87 = (char *)*((_QWORD *)this + 7);
                v74 = (char *)*((_QWORD *)this + 8);
              }
              else
              {
                v92 = 0;
              }
              v97 = &v92[8 * v88];
              *(_QWORD *)v97 = 0;
              v70 = v97 + 8;
              while (v74 != v87)
              {
                v98 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *((_QWORD *)v97 - 1) = v98;
                v97 -= 8;
              }
              *((_QWORD *)this + 7) = v97;
              *((_QWORD *)this + 8) = v70;
              *((_QWORD *)this + 9) = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *(_QWORD *)v74 = 0;
              v70 = v74 + 8;
            }
            *((_QWORD *)this + 8) = v70;
LABEL_153:
            v99 = *((_QWORD *)a2 + 1);
            if (v99 <= 0xFFFFFFFFFFFFFFF7 && v99 + 8 <= *((_QWORD *)a2 + 2))
            {
              *(v70 - 1) = *(_QWORD *)(*(_QWORD *)a2 + v99);
LABEL_157:
              *((_QWORD *)a2 + 1) += 8;
            }
            else
            {
LABEL_155:
              *((_BYTE *)a2 + 24) = 1;
            }
          }
LABEL_158:
          v2 = *((_QWORD *)a2 + 1);
          v3 = *((_QWORD *)a2 + 2);
          v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((_BYTE *)a2 + 24))
            return v4 == 0;
          break;
        case 4u:
          *((_BYTE *)this + 88) |= 1u;
          v67 = *((_QWORD *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)a2 + 2))
            goto LABEL_155;
          *((_QWORD *)this + 10) = *(_QWORD *)(*(_QWORD *)a2 + v67);
          goto LABEL_157;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0)
            return 0;
          goto LABEL_158;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;

  v3 = this;
  v4 = *(double **)(this + 32);
  v5 = *(double **)(this + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  v7 = *(double **)(v3 + 8);
  v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  v10 = *(double **)(v3 + 56);
  v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    this = PB::Writer::write(a2, v12, 3u);
  }
  if ((*(_BYTE *)(v3 + 88) & 1) != 0)
    return PB::Writer::write(a2, *(double *)(v3 + 80), 4u);
  return this;
}

BOOL CMMsl::InitialHistoricalMeanSeaLevelPressure::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  _BOOL8 v11;

  v3 = *(double **)(a1 + 32);
  v2 = *(double **)(a1 + 40);
  v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 40) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 8);
  v5 = *(double **)(a1 + 16);
  v7 = *(double **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 16) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 56);
  v8 = *(double **)(a1 + 64);
  v10 = *(double **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v11 = (*(_BYTE *)(a2 + 88) & 1) == 0;
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    return (*(_BYTE *)(a2 + 88) & 1) != 0 && *(double *)(a1 + 80) == *(double *)(a2 + 80);
  return v11;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::hash_value(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;

  v2 = PBHashBytes(*((_QWORD *)this + 4), *((_QWORD *)this + 5) - *((_QWORD *)this + 4));
  v3 = PBHashBytes(*((_QWORD *)this + 1), *((_QWORD *)this + 2) - *((_QWORD *)this + 1));
  v4 = PBHashBytes(*((_QWORD *)this + 7), *((_QWORD *)this + 8) - *((_QWORD *)this + 7));
  if ((*((_BYTE *)this + 88) & 1) != 0)
  {
    v5 = *((double *)this + 10);
    if (v5 == 0.0)
      v5 = 0.0;
  }
  else
  {
    v5 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(_QWORD *)&v5;
}

_QWORD *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(_QWORD *this)
{
  *this = off_100351C20;
  this[1] = 0;
  return this;
}

{
  *this = off_100351C20;
  this[1] = 0;
  return this;
}

void CMMsl::InterpolatedAccessoryAccel::~InterpolatedAccessoryAccel(CMMsl::InterpolatedAccessoryAccel *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351C20;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351C20;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_100351C20;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  operator delete();
}

_QWORD *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(_QWORD *this, const CMMsl::InterpolatedAccessoryAccel *a2)
{
  *this = off_100351C20;
  this[1] = 0;
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

const CMMsl::InterpolatedAccessoryAccel *CMMsl::InterpolatedAccessoryAccel::operator=(const CMMsl::InterpolatedAccessoryAccel *a1, const CMMsl::InterpolatedAccessoryAccel *a2)
{
  uint64_t v3;
  void (**v5)(CMMsl::InterpolatedAccessoryAccel *__hidden);
  uint64_t v6;

  if (a1 != a2)
  {
    CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(&v5, a2);
    v3 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v6;
    v5 = off_100351C20;
    v6 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    PB::Base::~Base((PB::Base *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::InterpolatedAccessoryAccel *a2, CMMsl::InterpolatedAccessoryAccel *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

_QWORD *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100351C20;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_100351C20;
  a1[1] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v4 = a1[1];
  a1[1] = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    v6[0] = off_100351C20;
    v6[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::formatText(CMMsl::InterpolatedAccessoryAccel *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "super");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InterpolatedAccessoryAccel::readFrom(CMMsl::InterpolatedAccessoryAccel *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1)
        operator new();
      result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(this + 8);
  if (v2)
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  return this;
}

BOOL CMMsl::InterpolatedAccessoryAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::AccessoryAccel::operator==(v2, v3);
  return result;
}

CMMsl::AccessoryAccel *CMMsl::InterpolatedAccessoryAccel::hash_value(CMMsl::InterpolatedAccessoryAccel *this)
{
  CMMsl::AccessoryAccel *result;

  result = (CMMsl::AccessoryAccel *)*((_QWORD *)this + 1);
  if (result)
    return (CMMsl::AccessoryAccel *)CMMsl::AccessoryAccel::hash_value(result);
  return result;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::makeSuper(uint64_t this)
{
  if (!*(_QWORD *)(this + 8))
    operator new();
  return this;
}

_QWORD *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(_QWORD *this)
{
  *this = off_100351C58;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100351C58;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData(CMMsl::IntersiloNSCodingData *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_100351C58;
  v4 = *((_QWORD *)this + 3);
  v2 = (_QWORD *)((char *)this + 24);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_100011294((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    sub_100011294((uint64_t)this + 16, v5);
  sub_1002395C4((void ***)this + 1, 0);
  PB::Base::~Base(this);
}

{
  CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData(this);
  operator delete();
}

_QWORD *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(_QWORD *this, const CMMsl::IntersiloNSCodingData *a2)
{
  *this = off_100351C58;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 3))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  return this;
}

uint64_t CMMsl::IntersiloNSCodingData::operator=(uint64_t a1, const CMMsl::IntersiloNSCodingData *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((const CMMsl::IntersiloNSCodingData *)a1 != a2)
  {
    CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData((CMMsl::IntersiloNSCodingData *)&v6);
  }
  return a1;
}

_QWORD *CMMsl::swap(_QWORD *this, CMMsl::IntersiloNSCodingData *a2, CMMsl::IntersiloNSCodingData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  return this;
}

_QWORD *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(_QWORD *a1, _QWORD *a2)
{
  void ***v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  *a1 = off_100351C58;
  a1[1] = 0;
  v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  v6 = a1 + 3;
  v7 = a2[2];
  a2[2] = 0;
  v8 = *v5;
  *v5 = v7;
  if (v8)
    sub_100011294((uint64_t)v5, v8);
  v9 = a2[3];
  a2[3] = 0;
  v10 = *v6;
  *v6 = v9;
  if (v10)
    sub_100011294((uint64_t)(a1 + 3), v10);
  v11 = (void **)a2[1];
  a2[1] = 0;
  sub_1002395C4(v4, v11);
  return a1;
}

uint64_t CMMsl::IntersiloNSCodingData::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if ((_QWORD *)a1 != a2)
  {
    CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(&v6, a2);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData((CMMsl::IntersiloNSCodingData *)&v6);
  }
  return a1;
}

uint64_t CMMsl::IntersiloNSCodingData::formatText(CMMsl::IntersiloNSCodingData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format(a2, "codedInvocation");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format(a2, "fromName");
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format(a2, "toName");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::IntersiloNSCodingData::readFrom(CMMsl::IntersiloNSCodingData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v7 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v12 = *(_BYTE *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          break;
        v8 += 7;
        v2 = v11;
        if (v9++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v10 >> 3;
      if ((v10 >> 3) == 4)
        operator new();
      if ((_DWORD)v19 == 3)
        operator new();
      if ((_DWORD)v19 == 2)
        operator new();
      result = PB::Reader::skip(a2, v19, v10 & 7, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v10 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v16 = v2 + 1;
      v17 = *(_BYTE *)(v7 + v2);
      *((_QWORD *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0)
        goto LABEL_20;
      v14 += 7;
      v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        v10 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::IntersiloNSCodingData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  v4 = *(_QWORD *)(this + 16);
  if (v4)
    this = PB::Writer::write(a2, v4, 2);
  v5 = *(_QWORD *)(v3 + 24);
  if (v5)
    this = PB::Writer::write(a2, v5, 3);
  v6 = *(_QWORD *)(v3 + 8);
  if (v6)
    return PB::Writer::write(a2, v6, 4);
  return this;
}

BOOL CMMsl::IntersiloNSCodingData::operator==(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;

  v4 = (unsigned __int8 *)a1[2];
  v5 = (unsigned __int8 **)a2[2];
  if (v4)
  {
    if (!v5)
      return 0;
    v6 = v4[23];
    if ((v6 & 0x80u) == 0)
      v7 = (unsigned __int8 *)v4[23];
    else
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = v5[1];
    if (v7 != v8)
      return 0;
    if (v9 >= 0)
      v10 = (unsigned __int8 *)a2[2];
    else
      v10 = *v5;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((_QWORD *)v4 + 1)))
        return 0;
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6)
          goto LABEL_18;
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  v11 = (unsigned __int8 *)a1[3];
  v12 = (unsigned __int8 **)a2[3];
  if (!v11)
  {
    if (!v12)
      goto LABEL_35;
    return 0;
  }
  if (!v12)
    return 0;
  v13 = v11[23];
  if ((v13 & 0x80u) == 0)
    v14 = (unsigned __int8 *)v11[23];
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
  v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
  v16 = (char)v15;
  if ((char)v15 < 0)
    v15 = v12[1];
  if (v14 != v15)
    return 0;
  if (v16 >= 0)
    v17 = (unsigned __int8 *)a2[3];
  else
    v17 = *v12;
  if ((v13 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v11, v17, *((_QWORD *)v11 + 1)))
      goto LABEL_35;
    return 0;
  }
  if (v11[23])
  {
    while (*v11 == *v17)
    {
      ++v11;
      ++v17;
      if (!--v13)
        goto LABEL_35;
    }
    return 0;
  }
LABEL_35:
  if (a1[1])
  {
    if (!a2[1])
      return 0;
    if ((PB::Data::operator==() & 1) != 0)
      return 1;
    if (a1[1])
      return 0;
  }
  return a2[1] == 0;
}

unint64_t CMMsl::IntersiloNSCodingData::hash_value(CMMsl::IntersiloNSCodingData *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v9;
  char v10;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    v3 = sub_1000112DC((uint64_t)&v9, v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = sub_1000112DC((uint64_t)&v10, v4);
  else
    v5 = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  if (v6)
    v7 = PBHashBytes(*v6, v6[1]);
  else
    v7 = 0;
  return v5 ^ v3 ^ v7;
}

CMMsl::Item *CMMsl::Item::Item(CMMsl::Item *this)
{
  *(_QWORD *)this = off_100351C90;
  bzero((char *)this + 8, 0x260uLL);
  bzero((char *)this + 624, 0xBB4uLL);
  return this;
}

{
  *(_QWORD *)this = off_100351C90;
  bzero((char *)this + 8, 0x260uLL);
  bzero((char *)this + 624, 0xBB4uLL);
  return this;
}

void CMMsl::Item::~Item(CMMsl::Item *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;

  *(_QWORD *)this = off_100351C90;
  v2 = *((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 450);
  *((_QWORD *)this + 450) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 445);
  *((_QWORD *)this + 445) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = *((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = *((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = *((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = *((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = *((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = *((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = *((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = *((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = *((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = *((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = *((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = *((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = *((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = *((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = *((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = *((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = *((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = *((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = *((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = *((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = *((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = *((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = *((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = *((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = *((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  v107 = *((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = *((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  v109 = *((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  v110 = *((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  v111 = *((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = 0;
  if (v112)
    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
  v113 = *((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  v115 = *((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  v116 = *((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = *((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = *((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = *((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = *((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  v121 = *((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  v123 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  v125 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = *((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  v127 = *((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  v129 = *((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = *((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = *((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = *((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  v133 = *((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  v134 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v134)
    (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
  v135 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = *((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  v137 = *((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = *((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v138)
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  v139 = *((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  v140 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  v141 = *((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v142)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  v143 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  v144 = *((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v144)
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  v145 = *((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  v146 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  v147 = *((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = *((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v148)
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  v149 = *((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = *((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v150)
    (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  v151 = *((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = *((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v152)
    (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
  v153 = *((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = *((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v154)
    (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  v155 = *((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = *((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v156)
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
  v157 = *((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  v158 = *((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v158)
    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
  v159 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  v160 = *((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v160)
    (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  v161 = *((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = *((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
  v163 = *((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = *((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
  v165 = *((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v166 = *((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
  v167 = *((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v167)
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
  v168 = *((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = 0;
  if (v168)
    (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
  v169 = *((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = *((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v170)
    (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
  v171 = *((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = *((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = 0;
  if (v172)
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
  v173 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  v175 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v177 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  v179 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v179)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  v180 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v180)
    (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
  v181 = *((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  v182 = *((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v182)
    (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
  v183 = *((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = *((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = 0;
  if (v184)
    (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
  v185 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  v186 = *((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v186)
    (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
  v187 = *((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = *((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  v189 = *((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = *((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v190)
    (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
  v191 = *((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  v192 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v192)
    (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
  v193 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  v194 = *((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  v195 = *((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  v196 = *((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v196)
    (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
  v197 = *((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  v198 = *((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v198)
    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
  v199 = *((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v199)
    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
  v200 = *((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  v201 = *((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = *((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v202)
    (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
  v203 = *((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v204)
    (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
  v205 = *((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = *((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v206)
    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  v207 = *((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  v209 = *((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  v210 = *((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v210)
    (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
  v211 = *((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = *((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v212)
    (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
  v213 = *((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  v214 = *((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = 0;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  v215 = *((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = *((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v216)
    (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
  v217 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v217)
    (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  v218 = *((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v218)
    (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
  v219 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v219)
    (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  v220 = *((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v220)
    (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
  v221 = *((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  v222 = *((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = 0;
  if (v222)
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
  v223 = *((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v223)
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
  v224 = *((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v224)
    (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  v225 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v225)
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  v226 = *((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v226)
    (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
  v227 = *((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = *((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v228)
    (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
  v229 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v229)
    (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
  v230 = *((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v230)
    (*(void (**)(uint64_t))(*(_QWORD *)v230 + 8))(v230);
  v231 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v231)
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  v232 = *((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v232)
    (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
  v233 = *((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v233)
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  v234 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  v235 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v235)
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
  v236 = *((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v236)
    (*(void (**)(uint64_t))(*(_QWORD *)v236 + 8))(v236);
  v237 = *((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = *((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v238)
    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
  v239 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  v240 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v240)
    (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  v241 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = *((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v242)
    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
  v243 = *((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  v244 = *((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  v245 = *((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v245)
    (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  v246 = *((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = 0;
  if (v246)
    (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
  v247 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  v248 = *((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = 0;
  if (v248)
    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
  v249 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  v250 = *((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v250)
    (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
  v251 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  v252 = *((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v252)
    (*(void (**)(uint64_t))(*(_QWORD *)v252 + 8))(v252);
  v253 = *((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  v254 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v254)
    (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
  v255 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  v256 = *((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v256)
    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
  v257 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  v258 = *((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v258)
    (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
  v259 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v259)
    (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  v260 = *((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v260)
    (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
  v261 = *((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = *((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v262)
    (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
  v263 = *((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = *((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v264)
    (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
  v265 = *((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = *((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v266)
    (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
  v267 = *((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v268)
    (*(void (**)(uint64_t))(*(_QWORD *)v268 + 8))(v268);
  v269 = *((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v270)
    (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
  v271 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v272)
    (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
  v273 = *((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v274)
    (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
  v275 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v276)
    (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
  v277 = *((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  v279 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v280 = *((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v280)
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
  v281 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v282)
    (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
  v283 = *((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v283)
    (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
  v284 = *((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v284)
    (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
  v285 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v286 = *((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v286)
    (*(void (**)(uint64_t))(*(_QWORD *)v286 + 8))(v286);
  v287 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v288)
    (*(void (**)(uint64_t))(*(_QWORD *)v288 + 8))(v288);
  v289 = *((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  v290 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v290)
    (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
  v291 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v291)
    (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
  v292 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v292)
    (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
  v293 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v294)
    (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  v295 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  v296 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v296)
    (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
  v297 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  v298 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v298)
    (*(void (**)(uint64_t))(*(_QWORD *)v298 + 8))(v298);
  v299 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v300)
    (*(void (**)(uint64_t))(*(_QWORD *)v300 + 8))(v300);
  v301 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  v302 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v302)
    (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
  v303 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v303)
    (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  v304 = *((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v304)
    (*(void (**)(uint64_t))(*(_QWORD *)v304 + 8))(v304);
  v305 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  v306 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v306)
    (*(void (**)(uint64_t))(*(_QWORD *)v306 + 8))(v306);
  v307 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v307)
    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
  v308 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v308)
    (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
  v309 = *((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v309)
    (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  v310 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v310)
    (*(void (**)(uint64_t))(*(_QWORD *)v310 + 8))(v310);
  v311 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  v312 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v312)
    (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
  v313 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  v314 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v314)
    (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
  v315 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v315)
    (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
  v316 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v316)
    (*(void (**)(uint64_t))(*(_QWORD *)v316 + 8))(v316);
  v317 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v317)
    (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
  v318 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v318)
    (*(void (**)(uint64_t))(*(_QWORD *)v318 + 8))(v318);
  v319 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v319)
    (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
  v320 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v320)
    (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
  v321 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = *((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v322)
    (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
  v323 = *((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v323)
    (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
  v324 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v324)
    (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
  v325 = *((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v325)
    (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
  v326 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v326)
    (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
  v327 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v327)
    (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
  v328 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v328)
    (*(void (**)(uint64_t))(*(_QWORD *)v328 + 8))(v328);
  v329 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  v330 = *((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v330)
    (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
  v331 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  v332 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v332)
    (*(void (**)(uint64_t))(*(_QWORD *)v332 + 8))(v332);
  v333 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v333)
    (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
  v334 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v334)
    (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
  v335 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v335)
    (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  v336 = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v336)
    (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
  v337 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  v338 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v338)
    (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
  v339 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v339)
    (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
  v340 = *((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v340)
    (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
  v341 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  v342 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v342)
    (*(void (**)(uint64_t))(*(_QWORD *)v342 + 8))(v342);
  v343 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v343)
    (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  v344 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v344)
    (*(void (**)(uint64_t))(*(_QWORD *)v344 + 8))(v344);
  v345 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v345)
    (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
  v346 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v346)
    (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
  v347 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v347)
    (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
  v348 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v348)
    (*(void (**)(uint64_t))(*(_QWORD *)v348 + 8))(v348);
  v349 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v349)
    (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  v350 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v350)
    (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
  v351 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v351)
    (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
  v352 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v352)
    (*(void (**)(uint64_t))(*(_QWORD *)v352 + 8))(v352);
  v353 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v353)
    (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
  v354 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v354)
    (*(void (**)(uint64_t))(*(_QWORD *)v354 + 8))(v354);
  v355 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v355)
    (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
  v356 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v356)
    (*(void (**)(uint64_t))(*(_QWORD *)v356 + 8))(v356);
  v357 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v357)
    (*(void (**)(uint64_t))(*(_QWORD *)v357 + 8))(v357);
  v358 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v358)
    (*(void (**)(uint64_t))(*(_QWORD *)v358 + 8))(v358);
  v359 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v359)
    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359);
  v360 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v360)
    (*(void (**)(uint64_t))(*(_QWORD *)v360 + 8))(v360);
  v361 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v361)
    (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
  v362 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v362)
    (*(void (**)(uint64_t))(*(_QWORD *)v362 + 8))(v362);
  v363 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v363)
    (*(void (**)(uint64_t))(*(_QWORD *)v363 + 8))(v363);
  v364 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v364)
    (*(void (**)(uint64_t))(*(_QWORD *)v364 + 8))(v364);
  v365 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v365)
    (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
  v366 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v366)
    (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
  v367 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v367)
    (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
  v368 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v368)
    (*(void (**)(uint64_t))(*(_QWORD *)v368 + 8))(v368);
  v369 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v369)
    (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
  v370 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v370)
    (*(void (**)(uint64_t))(*(_QWORD *)v370 + 8))(v370);
  v371 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v371)
    (*(void (**)(uint64_t))(*(_QWORD *)v371 + 8))(v371);
  v372 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v372)
    (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
  v373 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v373)
    (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
  v374 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v374)
    (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
  v375 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v375)
    (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
  v376 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v376)
    (*(void (**)(uint64_t))(*(_QWORD *)v376 + 8))(v376);
  v377 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v377)
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
  v378 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v378)
    (*(void (**)(uint64_t))(*(_QWORD *)v378 + 8))(v378);
  v379 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v379)
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  v380 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v380)
    (*(void (**)(uint64_t))(*(_QWORD *)v380 + 8))(v380);
  v381 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v381)
    (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
  v382 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v382)
    (*(void (**)(uint64_t))(*(_QWORD *)v382 + 8))(v382);
  v383 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v383)
    (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
  v384 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v384)
    (*(void (**)(uint64_t))(*(_QWORD *)v384 + 8))(v384);
  v385 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v385)
    (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
  v386 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v386)
    (*(void (**)(uint64_t))(*(_QWORD *)v386 + 8))(v386);
  v387 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v387)
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
  v388 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v388)
    (*(void (**)(uint64_t))(*(_QWORD *)v388 + 8))(v388);
  v389 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v389)
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
  v390 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v390)
    (*(void (**)(uint64_t))(*(_QWORD *)v390 + 8))(v390);
  v391 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v391)
    (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
  v392 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v392)
    (*(void (**)(uint64_t))(*(_QWORD *)v392 + 8))(v392);
  v393 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v393)
    (*(void (**)(uint64_t))(*(_QWORD *)v393 + 8))(v393);
  v394 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v394)
    (*(void (**)(uint64_t))(*(_QWORD *)v394 + 8))(v394);
  v395 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v395)
    (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
  v396 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v396)
    (*(void (**)(uint64_t))(*(_QWORD *)v396 + 8))(v396);
  v397 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v397)
    (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
  v398 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v398)
    (*(void (**)(uint64_t))(*(_QWORD *)v398 + 8))(v398);
  v399 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v399)
    (*(void (**)(uint64_t))(*(_QWORD *)v399 + 8))(v399);
  v400 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v400)
    (*(void (**)(uint64_t))(*(_QWORD *)v400 + 8))(v400);
  v401 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v401)
    (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  v402 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v402)
    (*(void (**)(uint64_t))(*(_QWORD *)v402 + 8))(v402);
  v403 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v403)
    (*(void (**)(uint64_t))(*(_QWORD *)v403 + 8))(v403);
  v404 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v404)
    (*(void (**)(uint64_t))(*(_QWORD *)v404 + 8))(v404);
  v405 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  v406 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v406)
    (*(void (**)(uint64_t))(*(_QWORD *)v406 + 8))(v406);
  v407 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v407)
    (*(void (**)(uint64_t))(*(_QWORD *)v407 + 8))(v407);
  v408 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v408)
    (*(void (**)(uint64_t))(*(_QWORD *)v408 + 8))(v408);
  v409 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v409)
    (*(void (**)(uint64_t))(*(_QWORD *)v409 + 8))(v409);
  v410 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v410)
    (*(void (**)(uint64_t))(*(_QWORD *)v410 + 8))(v410);
  v411 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v411)
    (*(void (**)(uint64_t))(*(_QWORD *)v411 + 8))(v411);
  v412 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v412)
    (*(void (**)(uint64_t))(*(_QWORD *)v412 + 8))(v412);
  v413 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v413)
    (*(void (**)(uint64_t))(*(_QWORD *)v413 + 8))(v413);
  v414 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v414)
    (*(void (**)(uint64_t))(*(_QWORD *)v414 + 8))(v414);
  v415 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v415)
    (*(void (**)(uint64_t))(*(_QWORD *)v415 + 8))(v415);
  v416 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v416)
    (*(void (**)(uint64_t))(*(_QWORD *)v416 + 8))(v416);
  v417 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v417)
    (*(void (**)(uint64_t))(*(_QWORD *)v417 + 8))(v417);
  v418 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v418)
    (*(void (**)(uint64_t))(*(_QWORD *)v418 + 8))(v418);
  v419 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v419)
    (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
  v420 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v420)
    (*(void (**)(uint64_t))(*(_QWORD *)v420 + 8))(v420);
  v421 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v421)
    (*(void (**)(uint64_t))(*(_QWORD *)v421 + 8))(v421);
  v422 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v422)
    (*(void (**)(uint64_t))(*(_QWORD *)v422 + 8))(v422);
  v423 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  v424 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v424)
    (*(void (**)(uint64_t))(*(_QWORD *)v424 + 8))(v424);
  v425 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v425)
    (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
  v426 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v426)
    (*(void (**)(uint64_t))(*(_QWORD *)v426 + 8))(v426);
  v427 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v427)
    (*(void (**)(uint64_t))(*(_QWORD *)v427 + 8))(v427);
  v428 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v428)
    (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  v429 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v429)
    (*(void (**)(uint64_t))(*(_QWORD *)v429 + 8))(v429);
  v430 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v430)
    (*(void (**)(uint64_t))(*(_QWORD *)v430 + 8))(v430);
  v431 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v431)
    (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
  v432 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v432)
    (*(void (**)(uint64_t))(*(_QWORD *)v432 + 8))(v432);
  v433 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v433)
    (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
  v434 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v434)
    (*(void (**)(uint64_t))(*(_QWORD *)v434 + 8))(v434);
  v435 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v435)
    (*(void (**)(uint64_t))(*(_QWORD *)v435 + 8))(v435);
  v436 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v436)
    (*(void (**)(uint64_t))(*(_QWORD *)v436 + 8))(v436);
  v437 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v437)
    (*(void (**)(uint64_t))(*(_QWORD *)v437 + 8))(v437);
  v438 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v438)
    (*(void (**)(uint64_t))(*(_QWORD *)v438 + 8))(v438);
  v439 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v439)
    (*(void (**)(uint64_t))(*(_QWORD *)v439 + 8))(v439);
  v440 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v440)
    (*(void (**)(uint64_t))(*(_QWORD *)v440 + 8))(v440);
  v441 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v441)
    (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  v442 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v442)
    (*(void (**)(uint64_t))(*(_QWORD *)v442 + 8))(v442);
  v443 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v443)
    (*(void (**)(uint64_t))(*(_QWORD *)v443 + 8))(v443);
  v444 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v444)
    (*(void (**)(uint64_t))(*(_QWORD *)v444 + 8))(v444);
  v445 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v445)
    (*(void (**)(uint64_t))(*(_QWORD *)v445 + 8))(v445);
  v446 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v446)
    (*(void (**)(uint64_t))(*(_QWORD *)v446 + 8))(v446);
  v447 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v447)
    (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
  v448 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v448)
    (*(void (**)(uint64_t))(*(_QWORD *)v448 + 8))(v448);
  v449 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v449)
    (*(void (**)(uint64_t))(*(_QWORD *)v449 + 8))(v449);
  v450 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v450)
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  v451 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v451)
    (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
  PB::Base::~Base(this);
}

{
  CMMsl::Item::~Item(this);
  operator delete();
}

CMMsl::Item *CMMsl::Item::Item(CMMsl::Item *this, const CMMsl::Item *a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)this = off_100351C90;
  v4 = (char *)this + 624;
  bzero((char *)this + 8, 0x260uLL);
  bzero(v4, 0xBB4uLL);
  if ((*((_BYTE *)a2 + 3616) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 77);
    *((_BYTE *)this + 3616) = 1;
    *((_QWORD *)this + 77) = v5;
  }
  if (*((_QWORD *)a2 + 146))
    operator new();
  if (*((_QWORD *)a2 + 145))
    operator new();
  if (*((_QWORD *)a2 + 142))
    operator new();
  if (*((_QWORD *)a2 + 141))
    operator new();
  if (*((_QWORD *)a2 + 85))
    operator new();
  if (*((_QWORD *)a2 + 84))
    operator new();
  if (*((_QWORD *)a2 + 91))
    operator new();
  if (*((_QWORD *)a2 + 90))
    operator new();
  if (*((_QWORD *)a2 + 180))
    operator new();
  if (*((_QWORD *)a2 + 95))
    operator new();
  if (*((_QWORD *)a2 + 11))
    operator new();
  if (*((_QWORD *)a2 + 18))
    operator new();
  if (*((_QWORD *)a2 + 27))
    operator new();
  if (*((_QWORD *)a2 + 431))
    operator new();
  if (*((_QWORD *)a2 + 434))
    operator new();
  if (*((_QWORD *)a2 + 436))
    operator new();
  if (*((_QWORD *)a2 + 440))
    operator new();
  if (*((_QWORD *)a2 + 444))
    operator new();
  if (*((_QWORD *)a2 + 442))
    operator new();
  if (*((_QWORD *)a2 + 448))
    operator new();
  if (*((_QWORD *)a2 + 415))
    operator new();
  if (*((_QWORD *)a2 + 68))
    operator new();
  if (*((_QWORD *)a2 + 69))
    operator new();
  if (*((_QWORD *)a2 + 70))
    operator new();
  if (*((_QWORD *)a2 + 67))
    operator new();
  if (*((_QWORD *)a2 + 71))
    operator new();
  if (*((_QWORD *)a2 + 439))
    operator new();
  if (*((_QWORD *)a2 + 288))
    operator new();
  if (*((_QWORD *)a2 + 340))
    operator new();
  if (*((_QWORD *)a2 + 446))
    operator new();
  if (*((_QWORD *)a2 + 425))
    operator new();
  if (*((_QWORD *)a2 + 76))
    operator new();
  if (*((_QWORD *)a2 + 427))
    operator new();
  if (*((_QWORD *)a2 + 176))
    operator new();
  if (*((_QWORD *)a2 + 174))
    operator new();
  if (*((_QWORD *)a2 + 169))
    operator new();
  if (*((_QWORD *)a2 + 28))
    operator new();
  if (*((_QWORD *)a2 + 29))
    operator new();
  if (*((_QWORD *)a2 + 34))
    operator new();
  if (*((_QWORD *)a2 + 114))
    operator new();
  if (*((_QWORD *)a2 + 447))
    operator new();
  if (*((_QWORD *)a2 + 443))
    operator new();
  if (*((_QWORD *)a2 + 168))
    operator new();
  if (*((_QWORD *)a2 + 16))
    operator new();
  if (*((_QWORD *)a2 + 410))
    operator new();
  if (*((_QWORD *)a2 + 44))
    operator new();
  if (*((_QWORD *)a2 + 407))
    operator new();
  if (*((_QWORD *)a2 + 235))
    operator new();
  if (*((_QWORD *)a2 + 125))
    operator new();
  if (*((_QWORD *)a2 + 10))
    operator new();
  if (*((_QWORD *)a2 + 259))
    operator new();
  if (*((_QWORD *)a2 + 379))
    operator new();
  if (*((_QWORD *)a2 + 245))
    operator new();
  if (*((_QWORD *)a2 + 89))
    operator new();
  if (*((_QWORD *)a2 + 408))
    operator new();
  if (*((_QWORD *)a2 + 356))
    operator new();
  if (*((_QWORD *)a2 + 409))
    operator new();
  if (*((_QWORD *)a2 + 414))
    operator new();
  if (*((_QWORD *)a2 + 219))
    operator new();
  if (*((_QWORD *)a2 + 194))
    operator new();
  if (*((_QWORD *)a2 + 166))
    operator new();
  if (*((_QWORD *)a2 + 215))
    operator new();
  if (*((_QWORD *)a2 + 397))
    operator new();
  if (*((_QWORD *)a2 + 210))
    operator new();
  if (*((_QWORD *)a2 + 398))
    operator new();
  if (*((_QWORD *)a2 + 47))
    operator new();
  if (*((_QWORD *)a2 + 391))
    operator new();
  if (*((_QWORD *)a2 + 46))
    operator new();
  if (*((_QWORD *)a2 + 392))
    operator new();
  if (*((_QWORD *)a2 + 432))
    operator new();
  if (*((_QWORD *)a2 + 37))
    operator new();
  if (*((_QWORD *)a2 + 430))
    operator new();
  if (*((_QWORD *)a2 + 411))
    operator new();
  if (*((_QWORD *)a2 + 155))
    operator new();
  if (*((_QWORD *)a2 + 367))
    operator new();
  if (*((_QWORD *)a2 + 131))
    operator new();
  if (*((_QWORD *)a2 + 109))
    operator new();
  if (*((_QWORD *)a2 + 4))
    operator new();
  if (*((_QWORD *)a2 + 253))
    operator new();
  if (*((_QWORD *)a2 + 248))
    operator new();
  if (*((_QWORD *)a2 + 62))
    operator new();
  if (*((_QWORD *)a2 + 217))
    operator new();
  if (*((_QWORD *)a2 + 333))
    operator new();
  if (*((_QWORD *)a2 + 183))
    operator new();
  if (*((_QWORD *)a2 + 88))
    operator new();
  if (*((_QWORD *)a2 + 151))
    operator new();
  if (*((_QWORD *)a2 + 152))
    operator new();
  if (*((_QWORD *)a2 + 150))
    operator new();
  if (*((_QWORD *)a2 + 149))
    operator new();
  if (*((_QWORD *)a2 + 59))
    operator new();
  if (*((_QWORD *)a2 + 132))
    operator new();
  if (*((_QWORD *)a2 + 247))
    operator new();
  if (*((_QWORD *)a2 + 236))
    operator new();
  if (*((_QWORD *)a2 + 304))
    operator new();
  if (*((_QWORD *)a2 + 305))
    operator new();
  if (*((_QWORD *)a2 + 63))
    operator new();
  if (*((_QWORD *)a2 + 184))
    operator new();
  if (*((_QWORD *)a2 + 87))
    operator new();
  if (*((_QWORD *)a2 + 318))
    operator new();
  if (*((_QWORD *)a2 + 416))
    operator new();
  if (*((_QWORD *)a2 + 238))
    operator new();
  if (*((_QWORD *)a2 + 239))
    operator new();
  if (*((_QWORD *)a2 + 317))
    operator new();
  if (*((_QWORD *)a2 + 441))
    operator new();
  if (*((_QWORD *)a2 + 435))
    operator new();
  if (*((_QWORD *)a2 + 332))
    operator new();
  if (*((_QWORD *)a2 + 73))
    operator new();
  if (*((_QWORD *)a2 + 60))
    operator new();
  if (*((_QWORD *)a2 + 61))
    operator new();
  if (*((_QWORD *)a2 + 266))
    operator new();
  if (*((_QWORD *)a2 + 299))
    operator new();
  if (*((_QWORD *)a2 + 300))
    operator new();
  if (*((_QWORD *)a2 + 48))
    operator new();
  if (*((_QWORD *)a2 + 393))
    operator new();
  if (*((_QWORD *)a2 + 43))
    operator new();
  if (*((_QWORD *)a2 + 58))
    operator new();
  if (*((_QWORD *)a2 + 64))
    operator new();
  if (*((_QWORD *)a2 + 420))
    operator new();
  if (*((_QWORD *)a2 + 375))
    operator new();
  if (*((_QWORD *)a2 + 370))
    operator new();
  if (*((_QWORD *)a2 + 373))
    operator new();
  if (*((_QWORD *)a2 + 372))
    operator new();
  if (*((_QWORD *)a2 + 376))
    operator new();
  if (*((_QWORD *)a2 + 377))
    operator new();
  if (*((_QWORD *)a2 + 371))
    operator new();
  if (*((_QWORD *)a2 + 242))
    operator new();
  if (*((_QWORD *)a2 + 445))
    operator new();
  if (*((_QWORD *)a2 + 230))
    operator new();
  if (*((_QWORD *)a2 + 24))
    operator new();
  if (*((_QWORD *)a2 + 380))
    operator new();
  if (*((_QWORD *)a2 + 381))
    operator new();
  if (*((_QWORD *)a2 + 363))
    operator new();
  if (*((_QWORD *)a2 + 92))
    operator new();
  if (*((_QWORD *)a2 + 111))
    operator new();
  if (*((_QWORD *)a2 + 57))
    operator new();
  if (*((_QWORD *)a2 + 234))
    operator new();
  if (*((_QWORD *)a2 + 56))
    operator new();
  if (*((_QWORD *)a2 + 308))
    operator new();
  if (*((_QWORD *)a2 + 130))
    operator new();
  if (*((_QWORD *)a2 + 98))
    operator new();
  if (*((_QWORD *)a2 + 1))
    operator new();
  if (*((_QWORD *)a2 + 2))
    operator new();
  if (*((_QWORD *)a2 + 40))
    operator new();
  if (*((_QWORD *)a2 + 231))
    operator new();
  if (*((_QWORD *)a2 + 406))
    operator new();
  if (*((_QWORD *)a2 + 343))
    operator new();
  if (*((_QWORD *)a2 + 450))
    operator new();
  if (*((_QWORD *)a2 + 449))
    operator new();
  if (*((_QWORD *)a2 + 45))
    operator new();
  if (*((_QWORD *)a2 + 281))
    operator new();
  if (*((_QWORD *)a2 + 303))
    operator new();
  if (*((_QWORD *)a2 + 229))
    operator new();
  if (*((_QWORD *)a2 + 232))
    operator new();
  if (*((_QWORD *)a2 + 344))
    operator new();
  if (*((_QWORD *)a2 + 51))
    operator new();
  if (*((_QWORD *)a2 + 52))
    operator new();
  if (*((_QWORD *)a2 + 250))
    operator new();
  if (*((_QWORD *)a2 + 269))
    operator new();
  if (*((_QWORD *)a2 + 9))
    operator new();
  if (*((_QWORD *)a2 + 104))
    operator new();
  if (*((_QWORD *)a2 + 282))
    operator new();
  if (*((_QWORD *)a2 + 136))
    operator new();
  if (*((_QWORD *)a2 + 137))
    operator new();
  if (*((_QWORD *)a2 + 135))
    operator new();
  if (*((_QWORD *)a2 + 112))
    operator new();
  if (*((_QWORD *)a2 + 433))
    operator new();
  if (*((_QWORD *)a2 + 386))
    operator new();
  if (*((_QWORD *)a2 + 346))
    operator new();
  if (*((_QWORD *)a2 + 327))
    operator new();
  if (*((_QWORD *)a2 + 224))
    operator new();
  if (*((_QWORD *)a2 + 225))
    operator new();
  if (*((_QWORD *)a2 + 38))
    operator new();
  if (*((_QWORD *)a2 + 223))
    operator new();
  if (*((_QWORD *)a2 + 417))
    operator new();
  if (*((_QWORD *)a2 + 325))
    operator new();
  if (*((_QWORD *)a2 + 54))
    operator new();
  if (*((_QWORD *)a2 + 339))
    operator new();
  if (*((_QWORD *)a2 + 226))
    operator new();
  if (*((_QWORD *)a2 + 222))
    operator new();
  if (*((_QWORD *)a2 + 50))
    operator new();
  if (*((_QWORD *)a2 + 55))
    operator new();
  if (*((_QWORD *)a2 + 165))
    operator new();
  if (*((_QWORD *)a2 + 362))
    operator new();
  if (*((_QWORD *)a2 + 365))
    operator new();
  if (*((_QWORD *)a2 + 364))
    operator new();
  if (*((_QWORD *)a2 + 129))
    operator new();
  if (*((_QWORD *)a2 + 424))
    operator new();
  if (*((_QWORD *)a2 + 115))
    operator new();
  if (*((_QWORD *)a2 + 421))
    operator new();
  if (*((_QWORD *)a2 + 422))
    operator new();
  if (*((_QWORD *)a2 + 395))
    operator new();
  if (*((_QWORD *)a2 + 139))
    operator new();
  if (*((_QWORD *)a2 + 140))
    operator new();
  if (*((_QWORD *)a2 + 243))
    operator new();
  if (*((_QWORD *)a2 + 128))
    operator new();
  if (*((_QWORD *)a2 + 438))
    operator new();
  if (*((_QWORD *)a2 + 14))
    operator new();
  if (*((_QWORD *)a2 + 291))
    operator new();
  if (*((_QWORD *)a2 + 177))
    operator new();
  if (*((_QWORD *)a2 + 301))
    operator new();
  if (*((_QWORD *)a2 + 302))
    operator new();
  if (*((_QWORD *)a2 + 290))
    operator new();
  if (*((_QWORD *)a2 + 108))
    operator new();
  if (*((_QWORD *)a2 + 178))
    operator new();
  if (*((_QWORD *)a2 + 428))
    operator new();
  if (*((_QWORD *)a2 + 294))
    operator new();
  if (*((_QWORD *)a2 + 297))
    operator new();
  if (*((_QWORD *)a2 + 159))
    operator new();
  if (*((_QWORD *)a2 + 374))
    operator new();
  if (*((_QWORD *)a2 + 296))
    operator new();
  if (*((_QWORD *)a2 + 246))
    operator new();
  if (*((_QWORD *)a2 + 423))
    operator new();
  if (*((_QWORD *)a2 + 22))
    operator new();
  if (*((_QWORD *)a2 + 26))
    operator new();
  if (*((_QWORD *)a2 + 254))
    operator new();
  if (*((_QWORD *)a2 + 97))
    operator new();
  if (*((_QWORD *)a2 + 306))
    operator new();
  if (*((_QWORD *)a2 + 307))
    operator new();
  if (*((_QWORD *)a2 + 167))
    operator new();
  if (*((_QWORD *)a2 + 437))
    operator new();
  if (*((_QWORD *)a2 + 384))
    operator new();
  if (*((_QWORD *)a2 + 396))
    operator new();
  if (*((_QWORD *)a2 + 3))
    operator new();
  if (*((_QWORD *)a2 + 5))
    operator new();
  if (*((_QWORD *)a2 + 8))
    operator new();
  if (*((_QWORD *)a2 + 6))
    operator new();
  if (*((_QWORD *)a2 + 143))
    operator new();
  if (*((_QWORD *)a2 + 157))
    operator new();
  if (*((_QWORD *)a2 + 158))
    operator new();
  if (*((_QWORD *)a2 + 144))
    operator new();
  if (*((_QWORD *)a2 + 148))
    operator new();
  if (*((_QWORD *)a2 + 154))
    operator new();
  if (*((_QWORD *)a2 + 240))
    operator new();
  if (*((_QWORD *)a2 + 80))
    operator new();
  if (*((_QWORD *)a2 + 81))
    operator new();
  if (*((_QWORD *)a2 + 153))
    operator new();
  if (*((_QWORD *)a2 + 82))
    operator new();
  if (*((_QWORD *)a2 + 316))
    operator new();
  if (*((_QWORD *)a2 + 323))
    operator new();
  if (*((_QWORD *)a2 + 319))
    operator new();
  if (*((_QWORD *)a2 + 324))
    operator new();
  if (*((_QWORD *)a2 + 394))
    operator new();
  if (*((_QWORD *)a2 + 93))
    operator new();
  if (*((_QWORD *)a2 + 256))
    operator new();
  if (*((_QWORD *)a2 + 7))
    operator new();
  if (*((_QWORD *)a2 + 156))
    operator new();
  if (*((_QWORD *)a2 + 322))
    operator new();
  if (*((_QWORD *)a2 + 49))
    operator new();
  if (*((_QWORD *)a2 + 355))
    operator new();
  if (*((_QWORD *)a2 + 233))
    operator new();
  if (*((_QWORD *)a2 + 252))
    operator new();
  if (*((_QWORD *)a2 + 110))
    operator new();
  if (*((_QWORD *)a2 + 263))
    operator new();
  if (*((_QWORD *)a2 + 262))
    operator new();
  if (*((_QWORD *)a2 + 66))
    operator new();
  if (*((_QWORD *)a2 + 429))
    operator new();
  if (*((_QWORD *)a2 + 267))
    operator new();
  if (*((_QWORD *)a2 + 383))
    operator new();
  if (*((_QWORD *)a2 + 106))
    operator new();
  if (*((_QWORD *)a2 + 79))
    operator new();
  if (*((_QWORD *)a2 + 251))
    operator new();
  if (*((_QWORD *)a2 + 258))
    operator new();
  if (*((_QWORD *)a2 + 385))
    operator new();
  if (*((_QWORD *)a2 + 75))
    operator new();
  if (*((_QWORD *)a2 + 264))
    operator new();
  if (*((_QWORD *)a2 + 244))
    operator new();
  if (*((_QWORD *)a2 + 126))
    operator new();
  if (*((_QWORD *)a2 + 53))
    operator new();
  if (*((_QWORD *)a2 + 402))
    operator new();
  if (*((_QWORD *)a2 + 378))
    operator new();
  if (*((_QWORD *)a2 + 426))
    operator new();
  if (*((_QWORD *)a2 + 257))
    operator new();
  if (*((_QWORD *)a2 + 255))
    operator new();
  if (*((_QWORD *)a2 + 265))
    operator new();
  if (*((_QWORD *)a2 + 321))
    operator new();
  if (*((_QWORD *)a2 + 175))
    operator new();
  if (*((_QWORD *)a2 + 78))
    operator new();
  if (*((_QWORD *)a2 + 36))
    operator new();
  if (*((_QWORD *)a2 + 173))
    operator new();
  if (*((_QWORD *)a2 + 171))
    operator new();
  if (*((_QWORD *)a2 + 172))
    operator new();
  if (*((_QWORD *)a2 + 170))
    operator new();
  if (*((_QWORD *)a2 + 15))
    operator new();
  if (*((_QWORD *)a2 + 12))
    operator new();
  if (*((_QWORD *)a2 + 30))
    operator new();
  if (*((_QWORD *)a2 + 390))
    operator new();
  if (*((_QWORD *)a2 + 389))
    operator new();
  if (*((_QWORD *)a2 + 105))
    operator new();
  if (*((_QWORD *)a2 + 35))
    operator new();
  if (*((_QWORD *)a2 + 138))
    operator new();
  if (*((_QWORD *)a2 + 336))
    operator new();
  if (*((_QWORD *)a2 + 338))
    operator new();
  if (*((_QWORD *)a2 + 337))
    operator new();
  if (*((_QWORD *)a2 + 451))
    operator new();
  if (*((_QWORD *)a2 + 41))
    operator new();
  if (*((_QWORD *)a2 + 315))
    operator new();
  if (*((_QWORD *)a2 + 261))
    operator new();
  if (*((_QWORD *)a2 + 260))
    operator new();
  if (*((_QWORD *)a2 + 65))
    operator new();
  if (*((_QWORD *)a2 + 20))
    operator new();
  if (*((_QWORD *)a2 + 21))
    operator new();
  if (*((_QWORD *)a2 + 19))
    operator new();
  if (*((_QWORD *)a2 + 133))
    operator new();
  if (*((_QWORD *)a2 + 134))
    operator new();
  if (*((_QWORD *)a2 + 83))
    operator new();
  if (*((_QWORD *)a2 + 413))
    operator new();
  if (*((_QWORD *)a2 + 412))
    operator new();
  if (*((_QWORD *)a2 + 25))
    operator new();
  if (*((_QWORD *)a2 + 119))
    operator new();
  if (*((_QWORD *)a2 + 120))
    operator new();
  if (*((_QWORD *)a2 + 121))
    operator new();
  if (*((_QWORD *)a2 + 117))
    operator new();
  if (*((_QWORD *)a2 + 124))
    operator new();
  if (*((_QWORD *)a2 + 17))
    operator new();
  if (*((_QWORD *)a2 + 335))
    operator new();
  if (*((_QWORD *)a2 + 334))
    operator new();
  if (*((_QWORD *)a2 + 94))
    operator new();
  if (*((_QWORD *)a2 + 118))
    operator new();
  if (*((_QWORD *)a2 + 419))
    operator new();
  if (*((_QWORD *)a2 + 23))
    operator new();
  if (*((_QWORD *)a2 + 122))
    operator new();
  if (*((_QWORD *)a2 + 147))
    operator new();
  if (*((_QWORD *)a2 + 382))
    operator new();
  if (*((_QWORD *)a2 + 127))
    operator new();
  if (*((_QWORD *)a2 + 33))
    operator new();
  if (*((_QWORD *)a2 + 358))
    operator new();
  if (*((_QWORD *)a2 + 361))
    operator new();
  if (*((_QWORD *)a2 + 359))
    operator new();
  if (*((_QWORD *)a2 + 360))
    operator new();
  if (*((_QWORD *)a2 + 366))
    operator new();
  if (*((_QWORD *)a2 + 123))
    operator new();
  if (*((_QWORD *)a2 + 182))
    operator new();
  if (*((_QWORD *)a2 + 320))
    operator new();
  if (*((_QWORD *)a2 + 249))
    operator new();
  if (*((_QWORD *)a2 + 116))
    operator new();
  if (*((_QWORD *)a2 + 228))
    operator new();
  if (*((_QWORD *)a2 + 102))
    operator new();
  if (*((_QWORD *)a2 + 100))
    operator new();
  if (*((_QWORD *)a2 + 101))
    operator new();
  if (*((_QWORD *)a2 + 99))
    operator new();
  if (*((_QWORD *)a2 + 268))
    operator new();
  if (*((_QWORD *)a2 + 191))
    operator new();
  if (*((_QWORD *)a2 + 192))
    operator new();
  if (*((_QWORD *)a2 + 195))
    operator new();
  if (*((_QWORD *)a2 + 206))
    operator new();
  if (*((_QWORD *)a2 + 221))
    operator new();
  if (*((_QWORD *)a2 + 220))
    operator new();
  if (*((_QWORD *)a2 + 204))
    operator new();
  if (*((_QWORD *)a2 + 164))
    operator new();
  if (*((_QWORD *)a2 + 163))
    operator new();
  if (*((_QWORD *)a2 + 190))
    operator new();
  if (*((_QWORD *)a2 + 193))
    operator new();
  if (*((_QWORD *)a2 + 207))
    operator new();
  if (*((_QWORD *)a2 + 208))
    operator new();
  if (*((_QWORD *)a2 + 212))
    operator new();
  if (*((_QWORD *)a2 + 200))
    operator new();
  if (*((_QWORD *)a2 + 198))
    operator new();
  if (*((_QWORD *)a2 + 213))
    operator new();
  if (*((_QWORD *)a2 + 199))
    operator new();
  if (*((_QWORD *)a2 + 209))
    operator new();
  if (*((_QWORD *)a2 + 96))
    operator new();
  if (*((_QWORD *)a2 + 403))
    operator new();
  if (*((_QWORD *)a2 + 162))
    operator new();
  if (*((_QWORD *)a2 + 404))
    operator new();
  if (*((_QWORD *)a2 + 405))
    operator new();
  if (*((_QWORD *)a2 + 341))
    operator new();
  if (*((_QWORD *)a2 + 342))
    operator new();
  if (*((_QWORD *)a2 + 345))
    operator new();
  if (*((_QWORD *)a2 + 350))
    operator new();
  if (*((_QWORD *)a2 + 348))
    operator new();
  if (*((_QWORD *)a2 + 214))
    operator new();
  if (*((_QWORD *)a2 + 203))
    operator new();
  if (*((_QWORD *)a2 + 347))
    operator new();
  if (*((_QWORD *)a2 + 181))
    operator new();
  if (*((_QWORD *)a2 + 197))
    operator new();
  if (*((_QWORD *)a2 + 205))
    operator new();
  if (*((_QWORD *)a2 + 160))
    operator new();
  if (*((_QWORD *)a2 + 74))
    operator new();
  if (*((_QWORD *)a2 + 292))
    operator new();
  if (*((_QWORD *)a2 + 86))
    operator new();
  if (*((_QWORD *)a2 + 107))
    operator new();
  if (*((_QWORD *)a2 + 400))
    operator new();
  if (*((_QWORD *)a2 + 326))
    operator new();
  if (*((_QWORD *)a2 + 216))
    operator new();
  if (*((_QWORD *)a2 + 418))
    operator new();
  if (*((_QWORD *)a2 + 196))
    operator new();
  if (*((_QWORD *)a2 + 349))
    operator new();
  if (*((_QWORD *)a2 + 387))
    operator new();
  if (*((_QWORD *)a2 + 289))
    operator new();
  if (*((_QWORD *)a2 + 237))
    operator new();
  if (*((_QWORD *)a2 + 283))
    operator new();
  if (*((_QWORD *)a2 + 284))
    operator new();
  if (*((_QWORD *)a2 + 285))
    operator new();
  if (*((_QWORD *)a2 + 270))
    operator new();
  if (*((_QWORD *)a2 + 287))
    operator new();
  if (*((_QWORD *)a2 + 227))
    operator new();
  if (*((_QWORD *)a2 + 401))
    operator new();
  if (*((_QWORD *)a2 + 279))
    operator new();
  if (*((_QWORD *)a2 + 280))
    operator new();
  if (*((_QWORD *)a2 + 399))
    operator new();
  if (*((_QWORD *)a2 + 388))
    operator new();
  if (*((_QWORD *)a2 + 103))
    operator new();
  if (*((_QWORD *)a2 + 218))
    operator new();
  if (*((_QWORD *)a2 + 357))
    operator new();
  if (*((_QWORD *)a2 + 278))
    operator new();
  if (*((_QWORD *)a2 + 272))
    operator new();
  if (*((_QWORD *)a2 + 271))
    operator new();
  if (*((_QWORD *)a2 + 275))
    operator new();
  if (*((_QWORD *)a2 + 13))
    operator new();
  if (*((_QWORD *)a2 + 286))
    operator new();
  if (*((_QWORD *)a2 + 309))
    operator new();
  if (*((_QWORD *)a2 + 312))
    operator new();
  if (*((_QWORD *)a2 + 211))
    operator new();
  if (*((_QWORD *)a2 + 313))
    operator new();
  if (*((_QWORD *)a2 + 310))
    operator new();
  if (*((_QWORD *)a2 + 277))
    operator new();
  if (*((_QWORD *)a2 + 72))
    operator new();
  if (*((_QWORD *)a2 + 276))
    operator new();
  if (*((_QWORD *)a2 + 293))
    operator new();
  if (*((_QWORD *)a2 + 241))
    operator new();
  if (*((_QWORD *)a2 + 188))
    operator new();
  if (*((_QWORD *)a2 + 189))
    operator new();
  if (*((_QWORD *)a2 + 311))
    operator new();
  if (*((_QWORD *)a2 + 274))
    operator new();
  if (*((_QWORD *)a2 + 273))
    operator new();
  if (*((_QWORD *)a2 + 202))
    operator new();
  if (*((_QWORD *)a2 + 201))
    operator new();
  if (*((_QWORD *)a2 + 314))
    operator new();
  if (*((_QWORD *)a2 + 39))
    operator new();
  if (*((_QWORD *)a2 + 113))
    operator new();
  if (*((_QWORD *)a2 + 295))
    operator new();
  if (*((_QWORD *)a2 + 298))
    operator new();
  if (*((_QWORD *)a2 + 32))
    operator new();
  if (*((_QWORD *)a2 + 31))
    operator new();
  if (*((_QWORD *)a2 + 352))
    operator new();
  if (*((_QWORD *)a2 + 351))
    operator new();
  if (*((_QWORD *)a2 + 328))
    operator new();
  if (*((_QWORD *)a2 + 329))
    operator new();
  if (*((_QWORD *)a2 + 331))
    operator new();
  if (*((_QWORD *)a2 + 161))
    operator new();
  if (*((_QWORD *)a2 + 330))
    operator new();
  if (*((_QWORD *)a2 + 42))
    operator new();
  if (*((_QWORD *)a2 + 185))
    operator new();
  if (*((_QWORD *)a2 + 186))
    operator new();
  if (*((_QWORD *)a2 + 187))
    operator new();
  if (*((_QWORD *)a2 + 353))
    operator new();
  if (*((_QWORD *)a2 + 354))
    operator new();
  if (*((_QWORD *)a2 + 368))
    operator new();
  if (*((_QWORD *)a2 + 369))
    operator new();
  if (*((_QWORD *)a2 + 179))
    operator new();
  return this;
}

float CMMsl::MovementStats::MovementStats(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = off_100352DA0;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + 8) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352DA0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100352DA0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SignalEnvironment::SignalEnvironment(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = off_100354498;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100354498;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100354498;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::SignificantUserInteraction::SignificantUserInteraction(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_1003544D0;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = off_1003544D0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_1003544D0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = off_1003547E0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = 2;
    *(_DWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = off_100352940;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100352940;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100352940;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

double CMMsl::PencilTipForce::PencilTipForce(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  *(_QWORD *)a1 = off_100353740;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
    *(double *)(a1 + 8) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353740;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353740;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::Timestamp::Timestamp(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = off_100354D58;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = 2;
    *(_DWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = off_100354D58;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100354D58;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = off_100352860;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100352860;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100352860;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = off_100353938;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100353938;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100353938;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

double CMMsl::PDRImpulse::PDRImpulse(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)a1 = off_100353270;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353270;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353270;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PDRAlgType::PDRAlgType(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = off_100352FD0;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100352FD0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100352FD0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_100352668;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = off_1003525F8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = off_1003526A0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::KeyboardAttached::KeyboardAttached(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = off_1003525C0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = off_100355538;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = off_1003553E8;
  *(_DWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 2;
    *(_QWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 24) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t CMMsl::Prox::Prox(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_100353CF0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = off_100354D90;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_100354460;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = off_100355068;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100355068;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100355068;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = off_100355490;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = off_100352D30;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100352D30;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100352D30;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

float CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)a1 = off_100353C10;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = 1;
    *(_QWORD *)(a1 + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353C10;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353C10;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_100354620;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

double CMMsl::SpatialEvent::SpatialEvent(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)a1 = off_100354818;
  *(_QWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354818;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100354818;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::Orientation::Orientation(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_100352F98;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = off_100352550;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(_QWORD *)result = off_100352550;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

{
  *(_QWORD *)result = off_100352550;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = off_1003550A0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = off_1003550A0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_1003550A0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_1003528D0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = off_1003528D0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_1003528D0;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

float CMMsl::PDRFenceReference::PDRFenceReference(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_100353200;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 8) = v3;
  v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  return *(float *)&v3;
}

{
  float result;

  *(_QWORD *)a1 = off_100353200;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = off_100353200;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

double CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  *(_QWORD *)a1 = off_100353970;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 2;
    *(double *)(a1 + 16) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353970;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = off_100353970;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PeerState::PeerState(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_1003535F0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = off_1003539E0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_100354348;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = off_100354348;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_100354348;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KData1::KData1(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = off_100351D70;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

{
  *(_QWORD *)result = off_100351D70;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(_QWORD *)result = off_100351D70;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

CMMsl *CMMsl::Item::operator=(CMMsl *a1, const CMMsl::Item *a2)
{
  CMMsl::Item *v3;
  _BYTE v5[3624];

  if (a1 != a2)
  {
    CMMsl::Item::Item((CMMsl::Item *)v5, a2);
    CMMsl::swap(a1, (CMMsl::Item *)v5, v3);
    CMMsl::Item::~Item((CMMsl::Item *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Item *a2, CMMsl::Item *a3)
{
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;

  v3 = *((_DWORD *)this + 904);
  *((_DWORD *)this + 904) = *((_DWORD *)a2 + 904);
  *((_DWORD *)a2 + 904) = v3;
  result = *((double *)this + 77);
  *((_QWORD *)this + 77) = *((_QWORD *)a2 + 77);
  *((double *)a2 + 77) = result;
  v5 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = *((_QWORD *)a2 + 146);
  *((_QWORD *)a2 + 146) = v5;
  v6 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = *((_QWORD *)a2 + 145);
  *((_QWORD *)a2 + 145) = v6;
  v7 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = *((_QWORD *)a2 + 142);
  *((_QWORD *)a2 + 142) = v7;
  v8 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = *((_QWORD *)a2 + 141);
  *((_QWORD *)a2 + 141) = v8;
  v9 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = *((_QWORD *)a2 + 85);
  *((_QWORD *)a2 + 85) = v9;
  v10 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = *((_QWORD *)a2 + 84);
  *((_QWORD *)a2 + 84) = v10;
  v11 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = *((_QWORD *)a2 + 91);
  *((_QWORD *)a2 + 91) = v11;
  v12 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = *((_QWORD *)a2 + 90);
  *((_QWORD *)a2 + 90) = v12;
  v13 = *((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = *((_QWORD *)a2 + 180);
  *((_QWORD *)a2 + 180) = v13;
  v14 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = *((_QWORD *)a2 + 95);
  *((_QWORD *)a2 + 95) = v14;
  v15 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v15;
  v16 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v16;
  v17 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
  *((_QWORD *)a2 + 27) = v17;
  v18 = *((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = *((_QWORD *)a2 + 431);
  *((_QWORD *)a2 + 431) = v18;
  v19 = *((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = *((_QWORD *)a2 + 434);
  *((_QWORD *)a2 + 434) = v19;
  v20 = *((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = *((_QWORD *)a2 + 436);
  *((_QWORD *)a2 + 436) = v20;
  v21 = *((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = *((_QWORD *)a2 + 440);
  *((_QWORD *)a2 + 440) = v21;
  v22 = *((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = *((_QWORD *)a2 + 444);
  *((_QWORD *)a2 + 444) = v22;
  v23 = *((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = *((_QWORD *)a2 + 442);
  *((_QWORD *)a2 + 442) = v23;
  v24 = *((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = *((_QWORD *)a2 + 448);
  *((_QWORD *)a2 + 448) = v24;
  v25 = *((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = *((_QWORD *)a2 + 415);
  *((_QWORD *)a2 + 415) = v25;
  v26 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = *((_QWORD *)a2 + 68);
  *((_QWORD *)a2 + 68) = v26;
  v27 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = *((_QWORD *)a2 + 69);
  *((_QWORD *)a2 + 69) = v27;
  v28 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = *((_QWORD *)a2 + 70);
  *((_QWORD *)a2 + 70) = v28;
  v29 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = *((_QWORD *)a2 + 67);
  *((_QWORD *)a2 + 67) = v29;
  v30 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = *((_QWORD *)a2 + 71);
  *((_QWORD *)a2 + 71) = v30;
  v31 = *((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = *((_QWORD *)a2 + 439);
  *((_QWORD *)a2 + 439) = v31;
  v32 = *((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = *((_QWORD *)a2 + 288);
  *((_QWORD *)a2 + 288) = v32;
  v33 = *((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = *((_QWORD *)a2 + 340);
  *((_QWORD *)a2 + 340) = v33;
  v34 = *((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = *((_QWORD *)a2 + 446);
  *((_QWORD *)a2 + 446) = v34;
  v35 = *((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = *((_QWORD *)a2 + 425);
  *((_QWORD *)a2 + 425) = v35;
  v36 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = *((_QWORD *)a2 + 76);
  *((_QWORD *)a2 + 76) = v36;
  v37 = *((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = *((_QWORD *)a2 + 427);
  *((_QWORD *)a2 + 427) = v37;
  v38 = *((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = *((_QWORD *)a2 + 176);
  *((_QWORD *)a2 + 176) = v38;
  v39 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = *((_QWORD *)a2 + 174);
  *((_QWORD *)a2 + 174) = v39;
  v40 = *((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = *((_QWORD *)a2 + 169);
  *((_QWORD *)a2 + 169) = v40;
  v41 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v41;
  v42 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = v42;
  v43 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
  *((_QWORD *)a2 + 34) = v43;
  v44 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = *((_QWORD *)a2 + 114);
  *((_QWORD *)a2 + 114) = v44;
  v45 = *((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = *((_QWORD *)a2 + 447);
  *((_QWORD *)a2 + 447) = v45;
  v46 = *((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = *((_QWORD *)a2 + 443);
  *((_QWORD *)a2 + 443) = v46;
  v47 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = *((_QWORD *)a2 + 168);
  *((_QWORD *)a2 + 168) = v47;
  v48 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v48;
  v49 = *((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = *((_QWORD *)a2 + 410);
  *((_QWORD *)a2 + 410) = v49;
  v50 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
  *((_QWORD *)a2 + 44) = v50;
  v51 = *((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = *((_QWORD *)a2 + 407);
  *((_QWORD *)a2 + 407) = v51;
  v52 = *((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = *((_QWORD *)a2 + 235);
  *((_QWORD *)a2 + 235) = v52;
  v53 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = *((_QWORD *)a2 + 125);
  *((_QWORD *)a2 + 125) = v53;
  v54 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v54;
  v55 = *((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = *((_QWORD *)a2 + 259);
  *((_QWORD *)a2 + 259) = v55;
  v56 = *((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = *((_QWORD *)a2 + 379);
  *((_QWORD *)a2 + 379) = v56;
  v57 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = *((_QWORD *)a2 + 245);
  *((_QWORD *)a2 + 245) = v57;
  v58 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = *((_QWORD *)a2 + 89);
  *((_QWORD *)a2 + 89) = v58;
  v59 = *((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = *((_QWORD *)a2 + 408);
  *((_QWORD *)a2 + 408) = v59;
  v60 = *((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = *((_QWORD *)a2 + 356);
  *((_QWORD *)a2 + 356) = v60;
  v61 = *((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = *((_QWORD *)a2 + 409);
  *((_QWORD *)a2 + 409) = v61;
  v62 = *((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = *((_QWORD *)a2 + 414);
  *((_QWORD *)a2 + 414) = v62;
  v63 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = *((_QWORD *)a2 + 219);
  *((_QWORD *)a2 + 219) = v63;
  v64 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = *((_QWORD *)a2 + 194);
  *((_QWORD *)a2 + 194) = v64;
  v65 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = *((_QWORD *)a2 + 166);
  *((_QWORD *)a2 + 166) = v65;
  v66 = *((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = *((_QWORD *)a2 + 215);
  *((_QWORD *)a2 + 215) = v66;
  v67 = *((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = *((_QWORD *)a2 + 397);
  *((_QWORD *)a2 + 397) = v67;
  v68 = *((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = *((_QWORD *)a2 + 210);
  *((_QWORD *)a2 + 210) = v68;
  v69 = *((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = *((_QWORD *)a2 + 398);
  *((_QWORD *)a2 + 398) = v69;
  v70 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
  *((_QWORD *)a2 + 47) = v70;
  v71 = *((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = *((_QWORD *)a2 + 391);
  *((_QWORD *)a2 + 391) = v71;
  v72 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
  *((_QWORD *)a2 + 46) = v72;
  v73 = *((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = *((_QWORD *)a2 + 392);
  *((_QWORD *)a2 + 392) = v73;
  v74 = *((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = *((_QWORD *)a2 + 432);
  *((_QWORD *)a2 + 432) = v74;
  v75 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = *((_QWORD *)a2 + 37);
  *((_QWORD *)a2 + 37) = v75;
  v76 = *((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = *((_QWORD *)a2 + 430);
  *((_QWORD *)a2 + 430) = v76;
  v77 = *((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = *((_QWORD *)a2 + 411);
  *((_QWORD *)a2 + 411) = v77;
  v78 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = *((_QWORD *)a2 + 155);
  *((_QWORD *)a2 + 155) = v78;
  v79 = *((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = *((_QWORD *)a2 + 367);
  *((_QWORD *)a2 + 367) = v79;
  v80 = *((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = *((_QWORD *)a2 + 131);
  *((_QWORD *)a2 + 131) = v80;
  v81 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = *((_QWORD *)a2 + 109);
  *((_QWORD *)a2 + 109) = v81;
  v82 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v82;
  v83 = *((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = *((_QWORD *)a2 + 253);
  *((_QWORD *)a2 + 253) = v83;
  v84 = *((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = *((_QWORD *)a2 + 248);
  *((_QWORD *)a2 + 248) = v84;
  v85 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = *((_QWORD *)a2 + 62);
  *((_QWORD *)a2 + 62) = v85;
  v86 = *((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = *((_QWORD *)a2 + 217);
  *((_QWORD *)a2 + 217) = v86;
  v87 = *((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = *((_QWORD *)a2 + 333);
  *((_QWORD *)a2 + 333) = v87;
  v88 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = *((_QWORD *)a2 + 183);
  *((_QWORD *)a2 + 183) = v88;
  v89 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = *((_QWORD *)a2 + 88);
  *((_QWORD *)a2 + 88) = v89;
  v90 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = *((_QWORD *)a2 + 151);
  *((_QWORD *)a2 + 151) = v90;
  v91 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = *((_QWORD *)a2 + 152);
  *((_QWORD *)a2 + 152) = v91;
  v92 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = *((_QWORD *)a2 + 150);
  *((_QWORD *)a2 + 150) = v92;
  v93 = *((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = *((_QWORD *)a2 + 149);
  *((_QWORD *)a2 + 149) = v93;
  v94 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = *((_QWORD *)a2 + 59);
  *((_QWORD *)a2 + 59) = v94;
  v95 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = *((_QWORD *)a2 + 132);
  *((_QWORD *)a2 + 132) = v95;
  v96 = *((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = *((_QWORD *)a2 + 247);
  *((_QWORD *)a2 + 247) = v96;
  v97 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = *((_QWORD *)a2 + 236);
  *((_QWORD *)a2 + 236) = v97;
  v98 = *((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = *((_QWORD *)a2 + 304);
  *((_QWORD *)a2 + 304) = v98;
  v99 = *((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = *((_QWORD *)a2 + 305);
  *((_QWORD *)a2 + 305) = v99;
  v100 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = *((_QWORD *)a2 + 63);
  *((_QWORD *)a2 + 63) = v100;
  v101 = *((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = *((_QWORD *)a2 + 184);
  *((_QWORD *)a2 + 184) = v101;
  v102 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = *((_QWORD *)a2 + 87);
  *((_QWORD *)a2 + 87) = v102;
  v103 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = *((_QWORD *)a2 + 318);
  *((_QWORD *)a2 + 318) = v103;
  v104 = *((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = *((_QWORD *)a2 + 416);
  *((_QWORD *)a2 + 416) = v104;
  v105 = *((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = *((_QWORD *)a2 + 238);
  *((_QWORD *)a2 + 238) = v105;
  v106 = *((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = *((_QWORD *)a2 + 239);
  *((_QWORD *)a2 + 239) = v106;
  v107 = *((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = *((_QWORD *)a2 + 317);
  *((_QWORD *)a2 + 317) = v107;
  v108 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = *((_QWORD *)a2 + 441);
  *((_QWORD *)a2 + 441) = v108;
  v109 = *((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = *((_QWORD *)a2 + 435);
  *((_QWORD *)a2 + 435) = v109;
  v110 = *((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = *((_QWORD *)a2 + 332);
  *((_QWORD *)a2 + 332) = v110;
  v111 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = *((_QWORD *)a2 + 73);
  *((_QWORD *)a2 + 73) = v111;
  v112 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = *((_QWORD *)a2 + 60);
  *((_QWORD *)a2 + 60) = v112;
  v113 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = *((_QWORD *)a2 + 61);
  *((_QWORD *)a2 + 61) = v113;
  v114 = *((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = *((_QWORD *)a2 + 266);
  *((_QWORD *)a2 + 266) = v114;
  v115 = *((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = *((_QWORD *)a2 + 299);
  *((_QWORD *)a2 + 299) = v115;
  v116 = *((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = *((_QWORD *)a2 + 300);
  *((_QWORD *)a2 + 300) = v116;
  v117 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = *((_QWORD *)a2 + 48);
  *((_QWORD *)a2 + 48) = v117;
  v118 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = *((_QWORD *)a2 + 393);
  *((_QWORD *)a2 + 393) = v118;
  v119 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = v119;
  v120 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = *((_QWORD *)a2 + 58);
  *((_QWORD *)a2 + 58) = v120;
  v121 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = *((_QWORD *)a2 + 64);
  *((_QWORD *)a2 + 64) = v121;
  v122 = *((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = *((_QWORD *)a2 + 420);
  *((_QWORD *)a2 + 420) = v122;
  v123 = *((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = *((_QWORD *)a2 + 375);
  *((_QWORD *)a2 + 375) = v123;
  v124 = *((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = *((_QWORD *)a2 + 370);
  *((_QWORD *)a2 + 370) = v124;
  v125 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = *((_QWORD *)a2 + 373);
  *((_QWORD *)a2 + 373) = v125;
  v126 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = *((_QWORD *)a2 + 372);
  *((_QWORD *)a2 + 372) = v126;
  v127 = *((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = *((_QWORD *)a2 + 376);
  *((_QWORD *)a2 + 376) = v127;
  v128 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = *((_QWORD *)a2 + 377);
  *((_QWORD *)a2 + 377) = v128;
  v129 = *((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = *((_QWORD *)a2 + 371);
  *((_QWORD *)a2 + 371) = v129;
  v130 = *((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = *((_QWORD *)a2 + 242);
  *((_QWORD *)a2 + 242) = v130;
  v131 = *((_QWORD *)this + 445);
  *((_QWORD *)this + 445) = *((_QWORD *)a2 + 445);
  *((_QWORD *)a2 + 445) = v131;
  v132 = *((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = *((_QWORD *)a2 + 230);
  *((_QWORD *)a2 + 230) = v132;
  v133 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = v133;
  v134 = *((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = *((_QWORD *)a2 + 380);
  *((_QWORD *)a2 + 380) = v134;
  v135 = *((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = *((_QWORD *)a2 + 381);
  *((_QWORD *)a2 + 381) = v135;
  v136 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = *((_QWORD *)a2 + 363);
  *((_QWORD *)a2 + 363) = v136;
  v137 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = *((_QWORD *)a2 + 92);
  *((_QWORD *)a2 + 92) = v137;
  v138 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = *((_QWORD *)a2 + 111);
  *((_QWORD *)a2 + 111) = v138;
  v139 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = *((_QWORD *)a2 + 57);
  *((_QWORD *)a2 + 57) = v139;
  v140 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = *((_QWORD *)a2 + 234);
  *((_QWORD *)a2 + 234) = v140;
  v141 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = *((_QWORD *)a2 + 56);
  *((_QWORD *)a2 + 56) = v141;
  v142 = *((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = *((_QWORD *)a2 + 308);
  *((_QWORD *)a2 + 308) = v142;
  v143 = *((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = *((_QWORD *)a2 + 130);
  *((_QWORD *)a2 + 130) = v143;
  v144 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = *((_QWORD *)a2 + 98);
  *((_QWORD *)a2 + 98) = v144;
  v145 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v145;
  v146 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v146;
  v147 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v147;
  v148 = *((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = *((_QWORD *)a2 + 231);
  *((_QWORD *)a2 + 231) = v148;
  v149 = *((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = *((_QWORD *)a2 + 406);
  *((_QWORD *)a2 + 406) = v149;
  v150 = *((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = *((_QWORD *)a2 + 343);
  *((_QWORD *)a2 + 343) = v150;
  v151 = *((_QWORD *)this + 450);
  *((_QWORD *)this + 450) = *((_QWORD *)a2 + 450);
  *((_QWORD *)a2 + 450) = v151;
  v152 = *((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = *((_QWORD *)a2 + 449);
  *((_QWORD *)a2 + 449) = v152;
  v153 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = *((_QWORD *)a2 + 45);
  *((_QWORD *)a2 + 45) = v153;
  v154 = *((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = *((_QWORD *)a2 + 281);
  *((_QWORD *)a2 + 281) = v154;
  v155 = *((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = *((_QWORD *)a2 + 303);
  *((_QWORD *)a2 + 303) = v155;
  v156 = *((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = *((_QWORD *)a2 + 229);
  *((_QWORD *)a2 + 229) = v156;
  v157 = *((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = *((_QWORD *)a2 + 232);
  *((_QWORD *)a2 + 232) = v157;
  v158 = *((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = *((_QWORD *)a2 + 344);
  *((_QWORD *)a2 + 344) = v158;
  v159 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = *((_QWORD *)a2 + 51);
  *((_QWORD *)a2 + 51) = v159;
  v160 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = *((_QWORD *)a2 + 52);
  *((_QWORD *)a2 + 52) = v160;
  v161 = *((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = *((_QWORD *)a2 + 250);
  *((_QWORD *)a2 + 250) = v161;
  v162 = *((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = *((_QWORD *)a2 + 269);
  *((_QWORD *)a2 + 269) = v162;
  v163 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v163;
  v164 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = *((_QWORD *)a2 + 104);
  *((_QWORD *)a2 + 104) = v164;
  v165 = *((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = *((_QWORD *)a2 + 282);
  *((_QWORD *)a2 + 282) = v165;
  v166 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = *((_QWORD *)a2 + 136);
  *((_QWORD *)a2 + 136) = v166;
  v167 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = *((_QWORD *)a2 + 137);
  *((_QWORD *)a2 + 137) = v167;
  v168 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = *((_QWORD *)a2 + 135);
  *((_QWORD *)a2 + 135) = v168;
  v169 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = *((_QWORD *)a2 + 112);
  *((_QWORD *)a2 + 112) = v169;
  v170 = *((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = *((_QWORD *)a2 + 433);
  *((_QWORD *)a2 + 433) = v170;
  v171 = *((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = *((_QWORD *)a2 + 386);
  *((_QWORD *)a2 + 386) = v171;
  v172 = *((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = *((_QWORD *)a2 + 346);
  *((_QWORD *)a2 + 346) = v172;
  v173 = *((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = *((_QWORD *)a2 + 327);
  *((_QWORD *)a2 + 327) = v173;
  v174 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = *((_QWORD *)a2 + 224);
  *((_QWORD *)a2 + 224) = v174;
  v175 = *((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = *((_QWORD *)a2 + 225);
  *((_QWORD *)a2 + 225) = v175;
  v176 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = v176;
  v177 = *((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = *((_QWORD *)a2 + 223);
  *((_QWORD *)a2 + 223) = v177;
  v178 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = *((_QWORD *)a2 + 417);
  *((_QWORD *)a2 + 417) = v178;
  v179 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = *((_QWORD *)a2 + 325);
  *((_QWORD *)a2 + 325) = v179;
  v180 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = *((_QWORD *)a2 + 54);
  *((_QWORD *)a2 + 54) = v180;
  v181 = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = *((_QWORD *)a2 + 339);
  *((_QWORD *)a2 + 339) = v181;
  v182 = *((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = *((_QWORD *)a2 + 226);
  *((_QWORD *)a2 + 226) = v182;
  v183 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = *((_QWORD *)a2 + 222);
  *((_QWORD *)a2 + 222) = v183;
  v184 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = *((_QWORD *)a2 + 50);
  *((_QWORD *)a2 + 50) = v184;
  v185 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = *((_QWORD *)a2 + 55);
  *((_QWORD *)a2 + 55) = v185;
  v186 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = *((_QWORD *)a2 + 165);
  *((_QWORD *)a2 + 165) = v186;
  v187 = *((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = *((_QWORD *)a2 + 362);
  *((_QWORD *)a2 + 362) = v187;
  v188 = *((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = *((_QWORD *)a2 + 365);
  *((_QWORD *)a2 + 365) = v188;
  v189 = *((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = *((_QWORD *)a2 + 364);
  *((_QWORD *)a2 + 364) = v189;
  v190 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = *((_QWORD *)a2 + 129);
  *((_QWORD *)a2 + 129) = v190;
  v191 = *((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = *((_QWORD *)a2 + 424);
  *((_QWORD *)a2 + 424) = v191;
  v192 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = *((_QWORD *)a2 + 115);
  *((_QWORD *)a2 + 115) = v192;
  v193 = *((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = *((_QWORD *)a2 + 421);
  *((_QWORD *)a2 + 421) = v193;
  v194 = *((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = *((_QWORD *)a2 + 422);
  *((_QWORD *)a2 + 422) = v194;
  v195 = *((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = *((_QWORD *)a2 + 395);
  *((_QWORD *)a2 + 395) = v195;
  v196 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = *((_QWORD *)a2 + 139);
  *((_QWORD *)a2 + 139) = v196;
  v197 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = *((_QWORD *)a2 + 140);
  *((_QWORD *)a2 + 140) = v197;
  v198 = *((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = *((_QWORD *)a2 + 243);
  *((_QWORD *)a2 + 243) = v198;
  v199 = *((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = *((_QWORD *)a2 + 128);
  *((_QWORD *)a2 + 128) = v199;
  v200 = *((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = *((_QWORD *)a2 + 438);
  *((_QWORD *)a2 + 438) = v200;
  v201 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v201;
  v202 = *((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = *((_QWORD *)a2 + 291);
  *((_QWORD *)a2 + 291) = v202;
  v203 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = *((_QWORD *)a2 + 177);
  *((_QWORD *)a2 + 177) = v203;
  v204 = *((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = *((_QWORD *)a2 + 301);
  *((_QWORD *)a2 + 301) = v204;
  v205 = *((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = *((_QWORD *)a2 + 302);
  *((_QWORD *)a2 + 302) = v205;
  v206 = *((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = *((_QWORD *)a2 + 290);
  *((_QWORD *)a2 + 290) = v206;
  v207 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = *((_QWORD *)a2 + 108);
  *((_QWORD *)a2 + 108) = v207;
  v208 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = *((_QWORD *)a2 + 178);
  *((_QWORD *)a2 + 178) = v208;
  v209 = *((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = *((_QWORD *)a2 + 428);
  *((_QWORD *)a2 + 428) = v209;
  v210 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = *((_QWORD *)a2 + 294);
  *((_QWORD *)a2 + 294) = v210;
  v211 = *((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = *((_QWORD *)a2 + 297);
  *((_QWORD *)a2 + 297) = v211;
  v212 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = *((_QWORD *)a2 + 159);
  *((_QWORD *)a2 + 159) = v212;
  v213 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = *((_QWORD *)a2 + 374);
  *((_QWORD *)a2 + 374) = v213;
  v214 = *((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = *((_QWORD *)a2 + 296);
  *((_QWORD *)a2 + 296) = v214;
  v215 = *((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = *((_QWORD *)a2 + 246);
  *((_QWORD *)a2 + 246) = v215;
  v216 = *((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = *((_QWORD *)a2 + 423);
  *((_QWORD *)a2 + 423) = v216;
  v217 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
  *((_QWORD *)a2 + 22) = v217;
  v218 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v218;
  v219 = *((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = *((_QWORD *)a2 + 254);
  *((_QWORD *)a2 + 254) = v219;
  v220 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = *((_QWORD *)a2 + 97);
  *((_QWORD *)a2 + 97) = v220;
  v221 = *((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = *((_QWORD *)a2 + 306);
  *((_QWORD *)a2 + 306) = v221;
  v222 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = *((_QWORD *)a2 + 307);
  *((_QWORD *)a2 + 307) = v222;
  v223 = *((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = *((_QWORD *)a2 + 167);
  *((_QWORD *)a2 + 167) = v223;
  v224 = *((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = *((_QWORD *)a2 + 437);
  *((_QWORD *)a2 + 437) = v224;
  v225 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = *((_QWORD *)a2 + 384);
  *((_QWORD *)a2 + 384) = v225;
  v226 = *((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = *((_QWORD *)a2 + 396);
  *((_QWORD *)a2 + 396) = v226;
  v227 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v227;
  v228 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v228;
  v229 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v229;
  v230 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v230;
  v231 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = *((_QWORD *)a2 + 143);
  *((_QWORD *)a2 + 143) = v231;
  v232 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = *((_QWORD *)a2 + 157);
  *((_QWORD *)a2 + 157) = v232;
  v233 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = *((_QWORD *)a2 + 158);
  *((_QWORD *)a2 + 158) = v233;
  v234 = *((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = *((_QWORD *)a2 + 144);
  *((_QWORD *)a2 + 144) = v234;
  v235 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = *((_QWORD *)a2 + 148);
  *((_QWORD *)a2 + 148) = v235;
  v236 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = *((_QWORD *)a2 + 154);
  *((_QWORD *)a2 + 154) = v236;
  v237 = *((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = *((_QWORD *)a2 + 240);
  *((_QWORD *)a2 + 240) = v237;
  v238 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = *((_QWORD *)a2 + 80);
  *((_QWORD *)a2 + 80) = v238;
  v239 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = *((_QWORD *)a2 + 81);
  *((_QWORD *)a2 + 81) = v239;
  v240 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = *((_QWORD *)a2 + 153);
  *((_QWORD *)a2 + 153) = v240;
  v241 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = *((_QWORD *)a2 + 82);
  *((_QWORD *)a2 + 82) = v241;
  v242 = *((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = *((_QWORD *)a2 + 316);
  *((_QWORD *)a2 + 316) = v242;
  v243 = *((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = *((_QWORD *)a2 + 323);
  *((_QWORD *)a2 + 323) = v243;
  v244 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = *((_QWORD *)a2 + 319);
  *((_QWORD *)a2 + 319) = v244;
  v245 = *((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = *((_QWORD *)a2 + 324);
  *((_QWORD *)a2 + 324) = v245;
  v246 = *((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = *((_QWORD *)a2 + 394);
  *((_QWORD *)a2 + 394) = v246;
  v247 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = *((_QWORD *)a2 + 93);
  *((_QWORD *)a2 + 93) = v247;
  v248 = *((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = *((_QWORD *)a2 + 256);
  *((_QWORD *)a2 + 256) = v248;
  v249 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v249;
  v250 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = *((_QWORD *)a2 + 156);
  *((_QWORD *)a2 + 156) = v250;
  v251 = *((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = *((_QWORD *)a2 + 322);
  *((_QWORD *)a2 + 322) = v251;
  v252 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = *((_QWORD *)a2 + 49);
  *((_QWORD *)a2 + 49) = v252;
  v253 = *((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = *((_QWORD *)a2 + 355);
  *((_QWORD *)a2 + 355) = v253;
  v254 = *((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = *((_QWORD *)a2 + 233);
  *((_QWORD *)a2 + 233) = v254;
  v255 = *((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = *((_QWORD *)a2 + 252);
  *((_QWORD *)a2 + 252) = v255;
  v256 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = *((_QWORD *)a2 + 110);
  *((_QWORD *)a2 + 110) = v256;
  v257 = *((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = *((_QWORD *)a2 + 263);
  *((_QWORD *)a2 + 263) = v257;
  v258 = *((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = *((_QWORD *)a2 + 262);
  *((_QWORD *)a2 + 262) = v258;
  v259 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = *((_QWORD *)a2 + 66);
  *((_QWORD *)a2 + 66) = v259;
  v260 = *((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = *((_QWORD *)a2 + 429);
  *((_QWORD *)a2 + 429) = v260;
  v261 = *((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = *((_QWORD *)a2 + 267);
  *((_QWORD *)a2 + 267) = v261;
  v262 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = *((_QWORD *)a2 + 383);
  *((_QWORD *)a2 + 383) = v262;
  v263 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = *((_QWORD *)a2 + 106);
  *((_QWORD *)a2 + 106) = v263;
  v264 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = *((_QWORD *)a2 + 79);
  *((_QWORD *)a2 + 79) = v264;
  v265 = *((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = *((_QWORD *)a2 + 251);
  *((_QWORD *)a2 + 251) = v265;
  v266 = *((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = *((_QWORD *)a2 + 258);
  *((_QWORD *)a2 + 258) = v266;
  v267 = *((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = *((_QWORD *)a2 + 385);
  *((_QWORD *)a2 + 385) = v267;
  v268 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = *((_QWORD *)a2 + 75);
  *((_QWORD *)a2 + 75) = v268;
  v269 = *((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = *((_QWORD *)a2 + 264);
  *((_QWORD *)a2 + 264) = v269;
  v270 = *((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = *((_QWORD *)a2 + 244);
  *((_QWORD *)a2 + 244) = v270;
  v271 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = *((_QWORD *)a2 + 126);
  *((_QWORD *)a2 + 126) = v271;
  v272 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
  *((_QWORD *)a2 + 53) = v272;
  v273 = *((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = *((_QWORD *)a2 + 402);
  *((_QWORD *)a2 + 402) = v273;
  v274 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = *((_QWORD *)a2 + 378);
  *((_QWORD *)a2 + 378) = v274;
  v275 = *((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = *((_QWORD *)a2 + 426);
  *((_QWORD *)a2 + 426) = v275;
  v276 = *((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = *((_QWORD *)a2 + 257);
  *((_QWORD *)a2 + 257) = v276;
  v277 = *((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = *((_QWORD *)a2 + 255);
  *((_QWORD *)a2 + 255) = v277;
  v278 = *((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = *((_QWORD *)a2 + 265);
  *((_QWORD *)a2 + 265) = v278;
  v279 = *((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = *((_QWORD *)a2 + 321);
  *((_QWORD *)a2 + 321) = v279;
  v280 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = *((_QWORD *)a2 + 175);
  *((_QWORD *)a2 + 175) = v280;
  v281 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = *((_QWORD *)a2 + 78);
  *((_QWORD *)a2 + 78) = v281;
  v282 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 36) = v282;
  v283 = *((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = *((_QWORD *)a2 + 173);
  *((_QWORD *)a2 + 173) = v283;
  v284 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = *((_QWORD *)a2 + 171);
  *((_QWORD *)a2 + 171) = v284;
  v285 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = *((_QWORD *)a2 + 172);
  *((_QWORD *)a2 + 172) = v285;
  v286 = *((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = *((_QWORD *)a2 + 170);
  *((_QWORD *)a2 + 170) = v286;
  v287 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v287;
  v288 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v288;
  v289 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v289;
  v290 = *((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = *((_QWORD *)a2 + 390);
  *((_QWORD *)a2 + 390) = v290;
  v291 = *((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = *((_QWORD *)a2 + 389);
  *((_QWORD *)a2 + 389) = v291;
  v292 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = *((_QWORD *)a2 + 105);
  *((_QWORD *)a2 + 105) = v292;
  v293 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v293;
  v294 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = *((_QWORD *)a2 + 138);
  *((_QWORD *)a2 + 138) = v294;
  v295 = *((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = *((_QWORD *)a2 + 336);
  *((_QWORD *)a2 + 336) = v295;
  v296 = *((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = *((_QWORD *)a2 + 338);
  *((_QWORD *)a2 + 338) = v296;
  v297 = *((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = *((_QWORD *)a2 + 337);
  *((_QWORD *)a2 + 337) = v297;
  v298 = *((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = *((_QWORD *)a2 + 451);
  *((_QWORD *)a2 + 451) = v298;
  v299 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
  *((_QWORD *)a2 + 41) = v299;
  v300 = *((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = *((_QWORD *)a2 + 315);
  *((_QWORD *)a2 + 315) = v300;
  v301 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = *((_QWORD *)a2 + 261);
  *((_QWORD *)a2 + 261) = v301;
  v302 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = *((_QWORD *)a2 + 260);
  *((_QWORD *)a2 + 260) = v302;
  v303 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = *((_QWORD *)a2 + 65);
  *((_QWORD *)a2 + 65) = v303;
  v304 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v304;
  v305 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = v305;
  v306 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 19) = v306;
  v307 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = *((_QWORD *)a2 + 133);
  *((_QWORD *)a2 + 133) = v307;
  v308 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = *((_QWORD *)a2 + 134);
  *((_QWORD *)a2 + 134) = v308;
  v309 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = *((_QWORD *)a2 + 83);
  *((_QWORD *)a2 + 83) = v309;
  v310 = *((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = *((_QWORD *)a2 + 413);
  *((_QWORD *)a2 + 413) = v310;
  v311 = *((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = *((_QWORD *)a2 + 412);
  *((_QWORD *)a2 + 412) = v311;
  v312 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v312;
  v313 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = *((_QWORD *)a2 + 119);
  *((_QWORD *)a2 + 119) = v313;
  v314 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = *((_QWORD *)a2 + 120);
  *((_QWORD *)a2 + 120) = v314;
  v315 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = *((_QWORD *)a2 + 121);
  *((_QWORD *)a2 + 121) = v315;
  v316 = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = *((_QWORD *)a2 + 117);
  *((_QWORD *)a2 + 117) = v316;
  v317 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = *((_QWORD *)a2 + 124);
  *((_QWORD *)a2 + 124) = v317;
  v318 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v318;
  v319 = *((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = *((_QWORD *)a2 + 335);
  *((_QWORD *)a2 + 335) = v319;
  v320 = *((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = *((_QWORD *)a2 + 334);
  *((_QWORD *)a2 + 334) = v320;
  v321 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = *((_QWORD *)a2 + 94);
  *((_QWORD *)a2 + 94) = v321;
  v322 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = *((_QWORD *)a2 + 118);
  *((_QWORD *)a2 + 118) = v322;
  v323 = *((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = *((_QWORD *)a2 + 419);
  *((_QWORD *)a2 + 419) = v323;
  v324 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v324;
  v325 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = *((_QWORD *)a2 + 122);
  *((_QWORD *)a2 + 122) = v325;
  v326 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = *((_QWORD *)a2 + 147);
  *((_QWORD *)a2 + 147) = v326;
  v327 = *((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = *((_QWORD *)a2 + 382);
  *((_QWORD *)a2 + 382) = v327;
  v328 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = *((_QWORD *)a2 + 127);
  *((_QWORD *)a2 + 127) = v328;
  v329 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v329;
  v330 = *((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = *((_QWORD *)a2 + 358);
  *((_QWORD *)a2 + 358) = v330;
  v331 = *((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = *((_QWORD *)a2 + 361);
  *((_QWORD *)a2 + 361) = v331;
  v332 = *((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = *((_QWORD *)a2 + 359);
  *((_QWORD *)a2 + 359) = v332;
  v333 = *((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = *((_QWORD *)a2 + 360);
  *((_QWORD *)a2 + 360) = v333;
  v334 = *((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = *((_QWORD *)a2 + 366);
  *((_QWORD *)a2 + 366) = v334;
  v335 = *((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = *((_QWORD *)a2 + 123);
  *((_QWORD *)a2 + 123) = v335;
  v336 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = *((_QWORD *)a2 + 182);
  *((_QWORD *)a2 + 182) = v336;
  v337 = *((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = *((_QWORD *)a2 + 320);
  *((_QWORD *)a2 + 320) = v337;
  v338 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = *((_QWORD *)a2 + 249);
  *((_QWORD *)a2 + 249) = v338;
  v339 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = *((_QWORD *)a2 + 116);
  *((_QWORD *)a2 + 116) = v339;
  v340 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = *((_QWORD *)a2 + 228);
  *((_QWORD *)a2 + 228) = v340;
  v341 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = *((_QWORD *)a2 + 102);
  *((_QWORD *)a2 + 102) = v341;
  v342 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = *((_QWORD *)a2 + 100);
  *((_QWORD *)a2 + 100) = v342;
  v343 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = *((_QWORD *)a2 + 101);
  *((_QWORD *)a2 + 101) = v343;
  v344 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = *((_QWORD *)a2 + 99);
  *((_QWORD *)a2 + 99) = v344;
  v345 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = *((_QWORD *)a2 + 268);
  *((_QWORD *)a2 + 268) = v345;
  v346 = *((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = *((_QWORD *)a2 + 191);
  *((_QWORD *)a2 + 191) = v346;
  v347 = *((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = *((_QWORD *)a2 + 192);
  *((_QWORD *)a2 + 192) = v347;
  v348 = *((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = *((_QWORD *)a2 + 195);
  *((_QWORD *)a2 + 195) = v348;
  v349 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = *((_QWORD *)a2 + 206);
  *((_QWORD *)a2 + 206) = v349;
  v350 = *((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = *((_QWORD *)a2 + 221);
  *((_QWORD *)a2 + 221) = v350;
  v351 = *((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = *((_QWORD *)a2 + 220);
  *((_QWORD *)a2 + 220) = v351;
  v352 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = *((_QWORD *)a2 + 204);
  *((_QWORD *)a2 + 204) = v352;
  v353 = *((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = *((_QWORD *)a2 + 164);
  *((_QWORD *)a2 + 164) = v353;
  v354 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = *((_QWORD *)a2 + 163);
  *((_QWORD *)a2 + 163) = v354;
  v355 = *((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = *((_QWORD *)a2 + 190);
  *((_QWORD *)a2 + 190) = v355;
  v356 = *((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = *((_QWORD *)a2 + 193);
  *((_QWORD *)a2 + 193) = v356;
  v357 = *((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = *((_QWORD *)a2 + 207);
  *((_QWORD *)a2 + 207) = v357;
  v358 = *((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = *((_QWORD *)a2 + 208);
  *((_QWORD *)a2 + 208) = v358;
  v359 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = *((_QWORD *)a2 + 212);
  *((_QWORD *)a2 + 212) = v359;
  v360 = *((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = *((_QWORD *)a2 + 200);
  *((_QWORD *)a2 + 200) = v360;
  v361 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = *((_QWORD *)a2 + 198);
  *((_QWORD *)a2 + 198) = v361;
  v362 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = *((_QWORD *)a2 + 213);
  *((_QWORD *)a2 + 213) = v362;
  v363 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = *((_QWORD *)a2 + 199);
  *((_QWORD *)a2 + 199) = v363;
  v364 = *((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = *((_QWORD *)a2 + 209);
  *((_QWORD *)a2 + 209) = v364;
  v365 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = *((_QWORD *)a2 + 96);
  *((_QWORD *)a2 + 96) = v365;
  v366 = *((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = *((_QWORD *)a2 + 403);
  *((_QWORD *)a2 + 403) = v366;
  v367 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = *((_QWORD *)a2 + 162);
  *((_QWORD *)a2 + 162) = v367;
  v368 = *((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = *((_QWORD *)a2 + 404);
  *((_QWORD *)a2 + 404) = v368;
  v369 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = *((_QWORD *)a2 + 405);
  *((_QWORD *)a2 + 405) = v369;
  v370 = *((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = *((_QWORD *)a2 + 341);
  *((_QWORD *)a2 + 341) = v370;
  v371 = *((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = *((_QWORD *)a2 + 342);
  *((_QWORD *)a2 + 342) = v371;
  v372 = *((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = *((_QWORD *)a2 + 345);
  *((_QWORD *)a2 + 345) = v372;
  v373 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = *((_QWORD *)a2 + 350);
  *((_QWORD *)a2 + 350) = v373;
  v374 = *((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = *((_QWORD *)a2 + 348);
  *((_QWORD *)a2 + 348) = v374;
  v375 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = *((_QWORD *)a2 + 214);
  *((_QWORD *)a2 + 214) = v375;
  v376 = *((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = *((_QWORD *)a2 + 203);
  *((_QWORD *)a2 + 203) = v376;
  v377 = *((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = *((_QWORD *)a2 + 347);
  *((_QWORD *)a2 + 347) = v377;
  v378 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = *((_QWORD *)a2 + 181);
  *((_QWORD *)a2 + 181) = v378;
  v379 = *((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = *((_QWORD *)a2 + 197);
  *((_QWORD *)a2 + 197) = v379;
  v380 = *((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = *((_QWORD *)a2 + 205);
  *((_QWORD *)a2 + 205) = v380;
  v381 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = *((_QWORD *)a2 + 160);
  *((_QWORD *)a2 + 160) = v381;
  v382 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = *((_QWORD *)a2 + 74);
  *((_QWORD *)a2 + 74) = v382;
  v383 = *((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = *((_QWORD *)a2 + 292);
  *((_QWORD *)a2 + 292) = v383;
  v384 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = *((_QWORD *)a2 + 86);
  *((_QWORD *)a2 + 86) = v384;
  v385 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = *((_QWORD *)a2 + 107);
  *((_QWORD *)a2 + 107) = v385;
  v386 = *((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = *((_QWORD *)a2 + 400);
  *((_QWORD *)a2 + 400) = v386;
  v387 = *((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = *((_QWORD *)a2 + 326);
  *((_QWORD *)a2 + 326) = v387;
  v388 = *((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = *((_QWORD *)a2 + 216);
  *((_QWORD *)a2 + 216) = v388;
  v389 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = *((_QWORD *)a2 + 418);
  *((_QWORD *)a2 + 418) = v389;
  v390 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = *((_QWORD *)a2 + 196);
  *((_QWORD *)a2 + 196) = v390;
  v391 = *((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = *((_QWORD *)a2 + 349);
  *((_QWORD *)a2 + 349) = v391;
  v392 = *((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = *((_QWORD *)a2 + 387);
  *((_QWORD *)a2 + 387) = v392;
  v393 = *((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = *((_QWORD *)a2 + 289);
  *((_QWORD *)a2 + 289) = v393;
  v394 = *((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = *((_QWORD *)a2 + 237);
  *((_QWORD *)a2 + 237) = v394;
  v395 = *((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = *((_QWORD *)a2 + 283);
  *((_QWORD *)a2 + 283) = v395;
  v396 = *((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = *((_QWORD *)a2 + 284);
  *((_QWORD *)a2 + 284) = v396;
  v397 = *((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = *((_QWORD *)a2 + 285);
  *((_QWORD *)a2 + 285) = v397;
  v398 = *((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = *((_QWORD *)a2 + 270);
  *((_QWORD *)a2 + 270) = v398;
  v399 = *((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = *((_QWORD *)a2 + 287);
  *((_QWORD *)a2 + 287) = v399;
  v400 = *((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = *((_QWORD *)a2 + 227);
  *((_QWORD *)a2 + 227) = v400;
  v401 = *((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = *((_QWORD *)a2 + 401);
  *((_QWORD *)a2 + 401) = v401;
  v402 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = *((_QWORD *)a2 + 279);
  *((_QWORD *)a2 + 279) = v402;
  v403 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = *((_QWORD *)a2 + 280);
  *((_QWORD *)a2 + 280) = v403;
  v404 = *((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = *((_QWORD *)a2 + 399);
  *((_QWORD *)a2 + 399) = v404;
  v405 = *((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = *((_QWORD *)a2 + 388);
  *((_QWORD *)a2 + 388) = v405;
  v406 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = *((_QWORD *)a2 + 103);
  *((_QWORD *)a2 + 103) = v406;
  v407 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = *((_QWORD *)a2 + 218);
  *((_QWORD *)a2 + 218) = v407;
  v408 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = *((_QWORD *)a2 + 357);
  *((_QWORD *)a2 + 357) = v408;
  v409 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = *((_QWORD *)a2 + 278);
  *((_QWORD *)a2 + 278) = v409;
  v410 = *((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = *((_QWORD *)a2 + 272);
  *((_QWORD *)a2 + 272) = v410;
  v411 = *((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = *((_QWORD *)a2 + 271);
  *((_QWORD *)a2 + 271) = v411;
  v412 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = *((_QWORD *)a2 + 275);
  *((_QWORD *)a2 + 275) = v412;
  v413 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v413;
  v414 = *((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = *((_QWORD *)a2 + 286);
  *((_QWORD *)a2 + 286) = v414;
  v415 = *((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = *((_QWORD *)a2 + 309);
  *((_QWORD *)a2 + 309) = v415;
  v416 = *((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = *((_QWORD *)a2 + 312);
  *((_QWORD *)a2 + 312) = v416;
  v417 = *((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = *((_QWORD *)a2 + 211);
  *((_QWORD *)a2 + 211) = v417;
  v418 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = *((_QWORD *)a2 + 313);
  *((_QWORD *)a2 + 313) = v418;
  v419 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = *((_QWORD *)a2 + 310);
  *((_QWORD *)a2 + 310) = v419;
  v420 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = *((_QWORD *)a2 + 277);
  *((_QWORD *)a2 + 277) = v420;
  v421 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = *((_QWORD *)a2 + 72);
  *((_QWORD *)a2 + 72) = v421;
  v422 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = *((_QWORD *)a2 + 276);
  *((_QWORD *)a2 + 276) = v422;
  v423 = *((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = *((_QWORD *)a2 + 293);
  *((_QWORD *)a2 + 293) = v423;
  v424 = *((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = *((_QWORD *)a2 + 241);
  *((_QWORD *)a2 + 241) = v424;
  v425 = *((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = *((_QWORD *)a2 + 188);
  *((_QWORD *)a2 + 188) = v425;
  v426 = *((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = *((_QWORD *)a2 + 189);
  *((_QWORD *)a2 + 189) = v426;
  v427 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = *((_QWORD *)a2 + 311);
  *((_QWORD *)a2 + 311) = v427;
  v428 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = *((_QWORD *)a2 + 274);
  *((_QWORD *)a2 + 274) = v428;
  v429 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = *((_QWORD *)a2 + 273);
  *((_QWORD *)a2 + 273) = v429;
  v430 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = *((_QWORD *)a2 + 202);
  *((_QWORD *)a2 + 202) = v430;
  v431 = *((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = *((_QWORD *)a2 + 201);
  *((_QWORD *)a2 + 201) = v431;
  v432 = *((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = *((_QWORD *)a2 + 314);
  *((_QWORD *)a2 + 314) = v432;
  v433 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 39);
  *((_QWORD *)a2 + 39) = v433;
  v434 = *((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = *((_QWORD *)a2 + 113);
  *((_QWORD *)a2 + 113) = v434;
  v435 = *((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = *((_QWORD *)a2 + 295);
  *((_QWORD *)a2 + 295) = v435;
  v436 = *((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = *((_QWORD *)a2 + 298);
  *((_QWORD *)a2 + 298) = v436;
  v437 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = v437;
  v438 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = v438;
  v439 = *((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = *((_QWORD *)a2 + 352);
  *((_QWORD *)a2 + 352) = v439;
  v440 = *((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = *((_QWORD *)a2 + 351);
  *((_QWORD *)a2 + 351) = v440;
  v441 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = *((_QWORD *)a2 + 328);
  *((_QWORD *)a2 + 328) = v441;
  v442 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = *((_QWORD *)a2 + 329);
  *((_QWORD *)a2 + 329) = v442;
  v443 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = *((_QWORD *)a2 + 331);
  *((_QWORD *)a2 + 331) = v443;
  v444 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = *((_QWORD *)a2 + 161);
  *((_QWORD *)a2 + 161) = v444;
  v445 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = *((_QWORD *)a2 + 330);
  *((_QWORD *)a2 + 330) = v445;
  v446 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
  *((_QWORD *)a2 + 42) = v446;
  v447 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = *((_QWORD *)a2 + 185);
  *((_QWORD *)a2 + 185) = v447;
  v448 = *((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = *((_QWORD *)a2 + 186);
  *((_QWORD *)a2 + 186) = v448;
  v449 = *((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = *((_QWORD *)a2 + 187);
  *((_QWORD *)a2 + 187) = v449;
  v450 = *((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = *((_QWORD *)a2 + 353);
  *((_QWORD *)a2 + 353) = v450;
  v451 = *((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = *((_QWORD *)a2 + 354);
  *((_QWORD *)a2 + 354) = v451;
  v452 = *((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = *((_QWORD *)a2 + 368);
  *((_QWORD *)a2 + 368) = v452;
  v453 = *((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = *((_QWORD *)a2 + 369);
  *((_QWORD *)a2 + 369) = v453;
  v454 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = *((_QWORD *)a2 + 179);
  *((_QWORD *)a2 + 179) = v454;
  return result;
}

uint64_t CMMsl::Item::Item(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;

  *(_QWORD *)a1 = off_100351C90;
  v4 = (uint64_t *)(a1 + 8);
  v5 = (uint64_t *)(a1 + 624);
  bzero((void *)(a1 + 8), 0x260uLL);
  bzero(v5, 0xBB0uLL);
  *(_DWORD *)(a1 + 3616) = *(_DWORD *)(a2 + 3616);
  *(_DWORD *)(a2 + 3616) = 0;
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  v6 = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a2 + 1168) = 0;
  v7 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 1160);
  *(_QWORD *)(a2 + 1160) = 0;
  v9 = *(_QWORD *)(a1 + 1160);
  *(_QWORD *)(a1 + 1160) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(a2 + 1136) = 0;
  v11 = *(_QWORD *)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a2 + 1128);
  *(_QWORD *)(a2 + 1128) = 0;
  v13 = *(_QWORD *)(a1 + 1128);
  *(_QWORD *)(a1 + 1128) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a2 + 680) = 0;
  v15 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a1 + 680) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a2 + 672) = 0;
  v17 = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 672) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a2 + 728) = 0;
  v19 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(a1 + 728) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a2 + 720);
  *(_QWORD *)(a2 + 720) = 0;
  v21 = *(_QWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 720) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a2 + 1440);
  *(_QWORD *)(a2 + 1440) = 0;
  v23 = *(_QWORD *)(a1 + 1440);
  *(_QWORD *)(a1 + 1440) = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a2 + 760) = 0;
  v25 = *(_QWORD *)(a1 + 760);
  *(_QWORD *)(a1 + 760) = v24;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v27 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  v29 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  v31 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = v30;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *(_QWORD *)(a2 + 3448);
  *(_QWORD *)(a2 + 3448) = 0;
  v33 = *(_QWORD *)(a1 + 3448);
  *(_QWORD *)(a1 + 3448) = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(a2 + 3472);
  *(_QWORD *)(a2 + 3472) = 0;
  v35 = *(_QWORD *)(a1 + 3472);
  *(_QWORD *)(a1 + 3472) = v34;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(a2 + 3488);
  *(_QWORD *)(a2 + 3488) = 0;
  v37 = *(_QWORD *)(a1 + 3488);
  *(_QWORD *)(a1 + 3488) = v36;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *(_QWORD *)(a2 + 3520);
  *(_QWORD *)(a2 + 3520) = 0;
  v39 = *(_QWORD *)(a1 + 3520);
  *(_QWORD *)(a1 + 3520) = v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *(_QWORD *)(a2 + 3552);
  *(_QWORD *)(a2 + 3552) = 0;
  v41 = *(_QWORD *)(a1 + 3552);
  *(_QWORD *)(a1 + 3552) = v40;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *(_QWORD *)(a2 + 3536);
  *(_QWORD *)(a2 + 3536) = 0;
  v43 = *(_QWORD *)(a1 + 3536);
  *(_QWORD *)(a1 + 3536) = v42;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *(_QWORD *)(a2 + 3584);
  *(_QWORD *)(a2 + 3584) = 0;
  v45 = *(_QWORD *)(a1 + 3584);
  *(_QWORD *)(a1 + 3584) = v44;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(_QWORD *)(a2 + 3320);
  *(_QWORD *)(a2 + 3320) = 0;
  v47 = *(_QWORD *)(a1 + 3320);
  *(_QWORD *)(a1 + 3320) = v46;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = 0;
  v49 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v48;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a2 + 552) = 0;
  v51 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = v50;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 560) = 0;
  v53 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 560) = v52;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a2 + 536) = 0;
  v55 = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 536) = v54;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a2 + 568) = 0;
  v57 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = v56;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(_QWORD *)(a2 + 3512);
  *(_QWORD *)(a2 + 3512) = 0;
  v59 = *(_QWORD *)(a1 + 3512);
  *(_QWORD *)(a1 + 3512) = v58;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *(_QWORD *)(a2 + 2304);
  *(_QWORD *)(a2 + 2304) = 0;
  v61 = *(_QWORD *)(a1 + 2304);
  *(_QWORD *)(a1 + 2304) = v60;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *(_QWORD *)(a2 + 2720);
  *(_QWORD *)(a2 + 2720) = 0;
  v63 = *(_QWORD *)(a1 + 2720);
  *(_QWORD *)(a1 + 2720) = v62;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *(_QWORD *)(a2 + 3568);
  *(_QWORD *)(a2 + 3568) = 0;
  v65 = *(_QWORD *)(a1 + 3568);
  *(_QWORD *)(a1 + 3568) = v64;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *(_QWORD *)(a2 + 3400);
  *(_QWORD *)(a2 + 3400) = 0;
  v67 = *(_QWORD *)(a1 + 3400);
  *(_QWORD *)(a1 + 3400) = v66;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a2 + 608) = 0;
  v69 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)(a1 + 608) = v68;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *(_QWORD *)(a2 + 3416);
  *(_QWORD *)(a2 + 3416) = 0;
  v71 = *(_QWORD *)(a1 + 3416);
  *(_QWORD *)(a1 + 3416) = v70;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *(_QWORD *)(a2 + 1408);
  *(_QWORD *)(a2 + 1408) = 0;
  v73 = *(_QWORD *)(a1 + 1408);
  *(_QWORD *)(a1 + 1408) = v72;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *(_QWORD *)(a2 + 1392);
  *(_QWORD *)(a2 + 1392) = 0;
  v75 = *(_QWORD *)(a1 + 1392);
  *(_QWORD *)(a1 + 1392) = v74;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *(_QWORD *)(a2 + 1352);
  *(_QWORD *)(a2 + 1352) = 0;
  v77 = *(_QWORD *)(a1 + 1352);
  *(_QWORD *)(a1 + 1352) = v76;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = 0;
  v79 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v78;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  v81 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v80;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  v83 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v82;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = *(_QWORD *)(a2 + 912);
  *(_QWORD *)(a2 + 912) = 0;
  v85 = *(_QWORD *)(a1 + 912);
  *(_QWORD *)(a1 + 912) = v84;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = *(_QWORD *)(a2 + 3576);
  *(_QWORD *)(a2 + 3576) = 0;
  v87 = *(_QWORD *)(a1 + 3576);
  *(_QWORD *)(a1 + 3576) = v86;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = *(_QWORD *)(a2 + 3544);
  *(_QWORD *)(a2 + 3544) = 0;
  v89 = *(_QWORD *)(a1 + 3544);
  *(_QWORD *)(a1 + 3544) = v88;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = *(_QWORD *)(a2 + 1344);
  *(_QWORD *)(a2 + 1344) = 0;
  v91 = *(_QWORD *)(a1 + 1344);
  *(_QWORD *)(a1 + 1344) = v90;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  v93 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v92;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = *(_QWORD *)(a2 + 3280);
  *(_QWORD *)(a2 + 3280) = 0;
  v95 = *(_QWORD *)(a1 + 3280);
  *(_QWORD *)(a1 + 3280) = v94;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a2 + 352) = 0;
  v97 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v96;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = *(_QWORD *)(a2 + 3256);
  *(_QWORD *)(a2 + 3256) = 0;
  v99 = *(_QWORD *)(a1 + 3256);
  *(_QWORD *)(a1 + 3256) = v98;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = *(_QWORD *)(a2 + 1880);
  *(_QWORD *)(a2 + 1880) = 0;
  v101 = *(_QWORD *)(a1 + 1880);
  *(_QWORD *)(a1 + 1880) = v100;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = *(_QWORD *)(a2 + 1000);
  *(_QWORD *)(a2 + 1000) = 0;
  v103 = *(_QWORD *)(a1 + 1000);
  *(_QWORD *)(a1 + 1000) = v102;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v105 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v104;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = *(_QWORD *)(a2 + 2072);
  *(_QWORD *)(a2 + 2072) = 0;
  v107 = *(_QWORD *)(a1 + 2072);
  *(_QWORD *)(a1 + 2072) = v106;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = *(_QWORD *)(a2 + 3032);
  *(_QWORD *)(a2 + 3032) = 0;
  v109 = *(_QWORD *)(a1 + 3032);
  *(_QWORD *)(a1 + 3032) = v108;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  v110 = *(_QWORD *)(a2 + 1960);
  *(_QWORD *)(a2 + 1960) = 0;
  v111 = *(_QWORD *)(a1 + 1960);
  *(_QWORD *)(a1 + 1960) = v110;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *(_QWORD *)(a2 + 712);
  *(_QWORD *)(a2 + 712) = 0;
  v113 = *(_QWORD *)(a1 + 712);
  *(_QWORD *)(a1 + 712) = v112;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = *(_QWORD *)(a2 + 3264);
  *(_QWORD *)(a2 + 3264) = 0;
  v115 = *(_QWORD *)(a1 + 3264);
  *(_QWORD *)(a1 + 3264) = v114;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  v116 = *(_QWORD *)(a2 + 2848);
  *(_QWORD *)(a2 + 2848) = 0;
  v117 = *(_QWORD *)(a1 + 2848);
  *(_QWORD *)(a1 + 2848) = v116;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = *(_QWORD *)(a2 + 3272);
  *(_QWORD *)(a2 + 3272) = 0;
  v119 = *(_QWORD *)(a1 + 3272);
  *(_QWORD *)(a1 + 3272) = v118;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = *(_QWORD *)(a2 + 3312);
  *(_QWORD *)(a2 + 3312) = 0;
  v121 = *(_QWORD *)(a1 + 3312);
  *(_QWORD *)(a1 + 3312) = v120;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = *(_QWORD *)(a2 + 1752);
  *(_QWORD *)(a2 + 1752) = 0;
  v123 = *(_QWORD *)(a1 + 1752);
  *(_QWORD *)(a1 + 1752) = v122;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = *(_QWORD *)(a2 + 1552);
  *(_QWORD *)(a2 + 1552) = 0;
  v125 = *(_QWORD *)(a1 + 1552);
  *(_QWORD *)(a1 + 1552) = v124;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(a2 + 1328) = 0;
  v127 = *(_QWORD *)(a1 + 1328);
  *(_QWORD *)(a1 + 1328) = v126;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = *(_QWORD *)(a2 + 1720);
  *(_QWORD *)(a2 + 1720) = 0;
  v129 = *(_QWORD *)(a1 + 1720);
  *(_QWORD *)(a1 + 1720) = v128;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = *(_QWORD *)(a2 + 3176);
  *(_QWORD *)(a2 + 3176) = 0;
  v131 = *(_QWORD *)(a1 + 3176);
  *(_QWORD *)(a1 + 3176) = v130;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = *(_QWORD *)(a2 + 1680);
  *(_QWORD *)(a2 + 1680) = 0;
  v133 = *(_QWORD *)(a1 + 1680);
  *(_QWORD *)(a1 + 1680) = v132;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  v134 = *(_QWORD *)(a2 + 3184);
  *(_QWORD *)(a2 + 3184) = 0;
  v135 = *(_QWORD *)(a1 + 3184);
  *(_QWORD *)(a1 + 3184) = v134;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a2 + 376) = 0;
  v137 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v136;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = *(_QWORD *)(a2 + 3128);
  *(_QWORD *)(a2 + 3128) = 0;
  v139 = *(_QWORD *)(a1 + 3128);
  *(_QWORD *)(a1 + 3128) = v138;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  v140 = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 368) = 0;
  v141 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v140;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = *(_QWORD *)(a2 + 3136);
  *(_QWORD *)(a2 + 3136) = 0;
  v143 = *(_QWORD *)(a1 + 3136);
  *(_QWORD *)(a1 + 3136) = v142;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  v144 = *(_QWORD *)(a2 + 3456);
  *(_QWORD *)(a2 + 3456) = 0;
  v145 = *(_QWORD *)(a1 + 3456);
  *(_QWORD *)(a1 + 3456) = v144;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  v146 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  v147 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v146;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = *(_QWORD *)(a2 + 3440);
  *(_QWORD *)(a2 + 3440) = 0;
  v149 = *(_QWORD *)(a1 + 3440);
  *(_QWORD *)(a1 + 3440) = v148;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = *(_QWORD *)(a2 + 3288);
  *(_QWORD *)(a2 + 3288) = 0;
  v151 = *(_QWORD *)(a1 + 3288);
  *(_QWORD *)(a1 + 3288) = v150;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = *(_QWORD *)(a2 + 1240);
  *(_QWORD *)(a2 + 1240) = 0;
  v153 = *(_QWORD *)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = v152;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = *(_QWORD *)(a2 + 2936);
  *(_QWORD *)(a2 + 2936) = 0;
  v155 = *(_QWORD *)(a1 + 2936);
  *(_QWORD *)(a1 + 2936) = v154;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(a2 + 1048) = 0;
  v157 = *(_QWORD *)(a1 + 1048);
  *(_QWORD *)(a1 + 1048) = v156;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  v158 = *(_QWORD *)(a2 + 872);
  *(_QWORD *)(a2 + 872) = 0;
  v159 = *(_QWORD *)(a1 + 872);
  *(_QWORD *)(a1 + 872) = v158;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  v160 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v161 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v160;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = *(_QWORD *)(a2 + 2024);
  *(_QWORD *)(a2 + 2024) = 0;
  v163 = *(_QWORD *)(a1 + 2024);
  *(_QWORD *)(a1 + 2024) = v162;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = *(_QWORD *)(a2 + 1984);
  *(_QWORD *)(a2 + 1984) = 0;
  v165 = *(_QWORD *)(a1 + 1984);
  *(_QWORD *)(a1 + 1984) = v164;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v166 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 496) = 0;
  v167 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v166;
  if (v167)
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
  v168 = *(_QWORD *)(a2 + 1736);
  *(_QWORD *)(a2 + 1736) = 0;
  v169 = *(_QWORD *)(a1 + 1736);
  *(_QWORD *)(a1 + 1736) = v168;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = *(_QWORD *)(a2 + 2664);
  *(_QWORD *)(a2 + 2664) = 0;
  v171 = *(_QWORD *)(a1 + 2664);
  *(_QWORD *)(a1 + 2664) = v170;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = *(_QWORD *)(a2 + 1464);
  *(_QWORD *)(a2 + 1464) = 0;
  v173 = *(_QWORD *)(a1 + 1464);
  *(_QWORD *)(a1 + 1464) = v172;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a2 + 704) = 0;
  v175 = *(_QWORD *)(a1 + 704);
  *(_QWORD *)(a1 + 704) = v174;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *(_QWORD *)(a2 + 1208);
  *(_QWORD *)(a2 + 1208) = 0;
  v177 = *(_QWORD *)(a1 + 1208);
  *(_QWORD *)(a1 + 1208) = v176;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = *(_QWORD *)(a2 + 1216);
  *(_QWORD *)(a2 + 1216) = 0;
  v179 = *(_QWORD *)(a1 + 1216);
  *(_QWORD *)(a1 + 1216) = v178;
  if (v179)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  v180 = *(_QWORD *)(a2 + 1200);
  *(_QWORD *)(a2 + 1200) = 0;
  v181 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = v180;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  v182 = *(_QWORD *)(a2 + 1192);
  *(_QWORD *)(a2 + 1192) = 0;
  v183 = *(_QWORD *)(a1 + 1192);
  *(_QWORD *)(a1 + 1192) = v182;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a2 + 472) = 0;
  v185 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = v184;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  v186 = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a2 + 1056) = 0;
  v187 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = v186;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = *(_QWORD *)(a2 + 1976);
  *(_QWORD *)(a2 + 1976) = 0;
  v189 = *(_QWORD *)(a1 + 1976);
  *(_QWORD *)(a1 + 1976) = v188;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = *(_QWORD *)(a2 + 1888);
  *(_QWORD *)(a2 + 1888) = 0;
  v191 = *(_QWORD *)(a1 + 1888);
  *(_QWORD *)(a1 + 1888) = v190;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  v192 = *(_QWORD *)(a2 + 2432);
  *(_QWORD *)(a2 + 2432) = 0;
  v193 = *(_QWORD *)(a1 + 2432);
  *(_QWORD *)(a1 + 2432) = v192;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  v194 = *(_QWORD *)(a2 + 2440);
  *(_QWORD *)(a2 + 2440) = 0;
  v195 = *(_QWORD *)(a1 + 2440);
  *(_QWORD *)(a1 + 2440) = v194;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  v196 = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a2 + 504) = 0;
  v197 = *(_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 504) = v196;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  v198 = *(_QWORD *)(a2 + 1472);
  *(_QWORD *)(a2 + 1472) = 0;
  v199 = *(_QWORD *)(a1 + 1472);
  *(_QWORD *)(a1 + 1472) = v198;
  if (v199)
    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
  v200 = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a2 + 696) = 0;
  v201 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = v200;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = *(_QWORD *)(a2 + 2544);
  *(_QWORD *)(a2 + 2544) = 0;
  v203 = *(_QWORD *)(a1 + 2544);
  *(_QWORD *)(a1 + 2544) = v202;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = *(_QWORD *)(a2 + 3328);
  *(_QWORD *)(a2 + 3328) = 0;
  v205 = *(_QWORD *)(a1 + 3328);
  *(_QWORD *)(a1 + 3328) = v204;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = *(_QWORD *)(a2 + 1904);
  *(_QWORD *)(a2 + 1904) = 0;
  v207 = *(_QWORD *)(a1 + 1904);
  *(_QWORD *)(a1 + 1904) = v206;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = *(_QWORD *)(a2 + 1912);
  *(_QWORD *)(a2 + 1912) = 0;
  v209 = *(_QWORD *)(a1 + 1912);
  *(_QWORD *)(a1 + 1912) = v208;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  v210 = *(_QWORD *)(a2 + 2536);
  *(_QWORD *)(a2 + 2536) = 0;
  v211 = *(_QWORD *)(a1 + 2536);
  *(_QWORD *)(a1 + 2536) = v210;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = *(_QWORD *)(a2 + 3528);
  *(_QWORD *)(a2 + 3528) = 0;
  v213 = *(_QWORD *)(a1 + 3528);
  *(_QWORD *)(a1 + 3528) = v212;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  v214 = *(_QWORD *)(a2 + 3480);
  *(_QWORD *)(a2 + 3480) = 0;
  v215 = *(_QWORD *)(a1 + 3480);
  *(_QWORD *)(a1 + 3480) = v214;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = *(_QWORD *)(a2 + 2656);
  *(_QWORD *)(a2 + 2656) = 0;
  v217 = *(_QWORD *)(a1 + 2656);
  *(_QWORD *)(a1 + 2656) = v216;
  if (v217)
    (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  v218 = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a2 + 584) = 0;
  v219 = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a1 + 584) = v218;
  if (v219)
    (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  v220 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a2 + 480) = 0;
  v221 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = v220;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  v222 = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a2 + 488) = 0;
  v223 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v222;
  if (v223)
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
  v224 = *(_QWORD *)(a2 + 2128);
  *(_QWORD *)(a2 + 2128) = 0;
  v225 = *(_QWORD *)(a1 + 2128);
  *(_QWORD *)(a1 + 2128) = v224;
  if (v225)
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  v226 = *(_QWORD *)(a2 + 2392);
  *(_QWORD *)(a2 + 2392) = 0;
  v227 = *(_QWORD *)(a1 + 2392);
  *(_QWORD *)(a1 + 2392) = v226;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = *(_QWORD *)(a2 + 2400);
  *(_QWORD *)(a2 + 2400) = 0;
  v229 = *(_QWORD *)(a1 + 2400);
  *(_QWORD *)(a1 + 2400) = v228;
  if (v229)
    (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
  v230 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a2 + 384) = 0;
  v231 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v230;
  if (v231)
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  v232 = *(_QWORD *)(a2 + 3144);
  *(_QWORD *)(a2 + 3144) = 0;
  v233 = *(_QWORD *)(a1 + 3144);
  *(_QWORD *)(a1 + 3144) = v232;
  if (v233)
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  v234 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a2 + 344) = 0;
  v235 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v234;
  if (v235)
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
  v236 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 464) = 0;
  v237 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = v236;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  v239 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v238;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  v240 = *(_QWORD *)(a2 + 3360);
  *(_QWORD *)(a2 + 3360) = 0;
  v241 = *(_QWORD *)(a1 + 3360);
  *(_QWORD *)(a1 + 3360) = v240;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = *(_QWORD *)(a2 + 3000);
  *(_QWORD *)(a2 + 3000) = 0;
  v243 = *(_QWORD *)(a1 + 3000);
  *(_QWORD *)(a1 + 3000) = v242;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  v244 = *(_QWORD *)(a2 + 2960);
  *(_QWORD *)(a2 + 2960) = 0;
  v245 = *(_QWORD *)(a1 + 2960);
  *(_QWORD *)(a1 + 2960) = v244;
  if (v245)
    (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  v246 = *(_QWORD *)(a2 + 2984);
  *(_QWORD *)(a2 + 2984) = 0;
  v247 = *(_QWORD *)(a1 + 2984);
  *(_QWORD *)(a1 + 2984) = v246;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  v248 = *(_QWORD *)(a2 + 2976);
  *(_QWORD *)(a2 + 2976) = 0;
  v249 = *(_QWORD *)(a1 + 2976);
  *(_QWORD *)(a1 + 2976) = v248;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  v250 = *(_QWORD *)(a2 + 3008);
  *(_QWORD *)(a2 + 3008) = 0;
  v251 = *(_QWORD *)(a1 + 3008);
  *(_QWORD *)(a1 + 3008) = v250;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  v252 = *(_QWORD *)(a2 + 3016);
  *(_QWORD *)(a2 + 3016) = 0;
  v253 = *(_QWORD *)(a1 + 3016);
  *(_QWORD *)(a1 + 3016) = v252;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  v254 = *(_QWORD *)(a2 + 2968);
  *(_QWORD *)(a2 + 2968) = 0;
  v255 = *(_QWORD *)(a1 + 2968);
  *(_QWORD *)(a1 + 2968) = v254;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  v256 = *(_QWORD *)(a2 + 1936);
  *(_QWORD *)(a2 + 1936) = 0;
  v257 = *(_QWORD *)(a1 + 1936);
  *(_QWORD *)(a1 + 1936) = v256;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  v258 = *(_QWORD *)(a2 + 3560);
  *(_QWORD *)(a2 + 3560) = 0;
  v259 = *(_QWORD *)(a1 + 3560);
  *(_QWORD *)(a1 + 3560) = v258;
  if (v259)
    (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  v260 = *(_QWORD *)(a2 + 1840);
  *(_QWORD *)(a2 + 1840) = 0;
  v261 = *(_QWORD *)(a1 + 1840);
  *(_QWORD *)(a1 + 1840) = v260;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v263 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v262;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = *(_QWORD *)(a2 + 3040);
  *(_QWORD *)(a2 + 3040) = 0;
  v265 = *(_QWORD *)(a1 + 3040);
  *(_QWORD *)(a1 + 3040) = v264;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = *(_QWORD *)(a2 + 3048);
  *(_QWORD *)(a2 + 3048) = 0;
  v267 = *(_QWORD *)(a1 + 3048);
  *(_QWORD *)(a1 + 3048) = v266;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = *(_QWORD *)(a2 + 2904);
  *(_QWORD *)(a2 + 2904) = 0;
  v269 = *(_QWORD *)(a1 + 2904);
  *(_QWORD *)(a1 + 2904) = v268;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a2 + 736) = 0;
  v271 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a1 + 736) = v270;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a2 + 888) = 0;
  v273 = *(_QWORD *)(a1 + 888);
  *(_QWORD *)(a1 + 888) = v272;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a2 + 456) = 0;
  v275 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = v274;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = *(_QWORD *)(a2 + 1872);
  *(_QWORD *)(a2 + 1872) = 0;
  v277 = *(_QWORD *)(a1 + 1872);
  *(_QWORD *)(a1 + 1872) = v276;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a2 + 448) = 0;
  v279 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v278;
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v280 = *(_QWORD *)(a2 + 2464);
  *(_QWORD *)(a2 + 2464) = 0;
  v281 = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2464) = v280;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = *(_QWORD *)(a2 + 1040);
  *(_QWORD *)(a2 + 1040) = 0;
  v283 = *(_QWORD *)(a1 + 1040);
  *(_QWORD *)(a1 + 1040) = v282;
  if (v283)
    (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
  v284 = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a2 + 784) = 0;
  v285 = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a1 + 784) = v284;
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v286 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v287 = *v4;
  *v4 = v286;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v289 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v288;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  v290 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  v291 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v290;
  if (v291)
    (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
  v292 = *(_QWORD *)(a2 + 1848);
  *(_QWORD *)(a2 + 1848) = 0;
  v293 = *(_QWORD *)(a1 + 1848);
  *(_QWORD *)(a1 + 1848) = v292;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = *(_QWORD *)(a2 + 3248);
  *(_QWORD *)(a2 + 3248) = 0;
  v295 = *(_QWORD *)(a1 + 3248);
  *(_QWORD *)(a1 + 3248) = v294;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  v296 = *(_QWORD *)(a2 + 2744);
  *(_QWORD *)(a2 + 2744) = 0;
  v297 = *(_QWORD *)(a1 + 2744);
  *(_QWORD *)(a1 + 2744) = v296;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  v298 = *(_QWORD *)(a2 + 3600);
  *(_QWORD *)(a2 + 3600) = 0;
  v299 = *(_QWORD *)(a1 + 3600);
  *(_QWORD *)(a1 + 3600) = v298;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = *(_QWORD *)(a2 + 3592);
  *(_QWORD *)(a2 + 3592) = 0;
  v301 = *(_QWORD *)(a1 + 3592);
  *(_QWORD *)(a1 + 3592) = v300;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  v302 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = 0;
  v303 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = v302;
  if (v303)
    (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  v304 = *(_QWORD *)(a2 + 2248);
  *(_QWORD *)(a2 + 2248) = 0;
  v305 = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 2248) = v304;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  v306 = *(_QWORD *)(a2 + 2424);
  *(_QWORD *)(a2 + 2424) = 0;
  v307 = *(_QWORD *)(a1 + 2424);
  *(_QWORD *)(a1 + 2424) = v306;
  if (v307)
    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
  v308 = *(_QWORD *)(a2 + 1832);
  *(_QWORD *)(a2 + 1832) = 0;
  v309 = *(_QWORD *)(a1 + 1832);
  *(_QWORD *)(a1 + 1832) = v308;
  if (v309)
    (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  v310 = *(_QWORD *)(a2 + 1856);
  *(_QWORD *)(a2 + 1856) = 0;
  v311 = *(_QWORD *)(a1 + 1856);
  *(_QWORD *)(a1 + 1856) = v310;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  v312 = *(_QWORD *)(a2 + 2752);
  *(_QWORD *)(a2 + 2752) = 0;
  v313 = *(_QWORD *)(a1 + 2752);
  *(_QWORD *)(a1 + 2752) = v312;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  v314 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a2 + 408) = 0;
  v315 = *(_QWORD *)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v314;
  if (v315)
    (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
  v316 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  v317 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = v316;
  if (v317)
    (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
  v318 = *(_QWORD *)(a2 + 2000);
  *(_QWORD *)(a2 + 2000) = 0;
  v319 = *(_QWORD *)(a1 + 2000);
  *(_QWORD *)(a1 + 2000) = v318;
  if (v319)
    (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
  v320 = *(_QWORD *)(a2 + 2152);
  *(_QWORD *)(a2 + 2152) = 0;
  v321 = *(_QWORD *)(a1 + 2152);
  *(_QWORD *)(a1 + 2152) = v320;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v323 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v322;
  if (v323)
    (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
  v324 = *(_QWORD *)(a2 + 832);
  *(_QWORD *)(a2 + 832) = 0;
  v325 = *(_QWORD *)(a1 + 832);
  *(_QWORD *)(a1 + 832) = v324;
  if (v325)
    (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
  v326 = *(_QWORD *)(a2 + 2256);
  *(_QWORD *)(a2 + 2256) = 0;
  v327 = *(_QWORD *)(a1 + 2256);
  *(_QWORD *)(a1 + 2256) = v326;
  if (v327)
    (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
  v328 = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(a2 + 1088) = 0;
  v329 = *(_QWORD *)(a1 + 1088);
  *(_QWORD *)(a1 + 1088) = v328;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  v330 = *(_QWORD *)(a2 + 1096);
  *(_QWORD *)(a2 + 1096) = 0;
  v331 = *(_QWORD *)(a1 + 1096);
  *(_QWORD *)(a1 + 1096) = v330;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  v332 = *(_QWORD *)(a2 + 1080);
  *(_QWORD *)(a2 + 1080) = 0;
  v333 = *(_QWORD *)(a1 + 1080);
  *(_QWORD *)(a1 + 1080) = v332;
  if (v333)
    (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
  v334 = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(a2 + 896) = 0;
  v335 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = v334;
  if (v335)
    (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  v336 = *(_QWORD *)(a2 + 3464);
  *(_QWORD *)(a2 + 3464) = 0;
  v337 = *(_QWORD *)(a1 + 3464);
  *(_QWORD *)(a1 + 3464) = v336;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  v338 = *(_QWORD *)(a2 + 3088);
  *(_QWORD *)(a2 + 3088) = 0;
  v339 = *(_QWORD *)(a1 + 3088);
  *(_QWORD *)(a1 + 3088) = v338;
  if (v339)
    (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
  v340 = *(_QWORD *)(a2 + 2768);
  *(_QWORD *)(a2 + 2768) = 0;
  v341 = *(_QWORD *)(a1 + 2768);
  *(_QWORD *)(a1 + 2768) = v340;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  v342 = *(_QWORD *)(a2 + 2616);
  *(_QWORD *)(a2 + 2616) = 0;
  v343 = *(_QWORD *)(a1 + 2616);
  *(_QWORD *)(a1 + 2616) = v342;
  if (v343)
    (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  v344 = *(_QWORD *)(a2 + 1792);
  *(_QWORD *)(a2 + 1792) = 0;
  v345 = *(_QWORD *)(a1 + 1792);
  *(_QWORD *)(a1 + 1792) = v344;
  if (v345)
    (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
  v346 = *(_QWORD *)(a2 + 1800);
  *(_QWORD *)(a2 + 1800) = 0;
  v347 = *(_QWORD *)(a1 + 1800);
  *(_QWORD *)(a1 + 1800) = v346;
  if (v347)
    (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
  v348 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  v349 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v348;
  if (v349)
    (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  v350 = *(_QWORD *)(a2 + 1784);
  *(_QWORD *)(a2 + 1784) = 0;
  v351 = *(_QWORD *)(a1 + 1784);
  *(_QWORD *)(a1 + 1784) = v350;
  if (v351)
    (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
  v352 = *(_QWORD *)(a2 + 3336);
  *(_QWORD *)(a2 + 3336) = 0;
  v353 = *(_QWORD *)(a1 + 3336);
  *(_QWORD *)(a1 + 3336) = v352;
  if (v353)
    (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
  v354 = *(_QWORD *)(a2 + 2600);
  *(_QWORD *)(a2 + 2600) = 0;
  v355 = *(_QWORD *)(a1 + 2600);
  *(_QWORD *)(a1 + 2600) = v354;
  if (v355)
    (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
  v356 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 432) = 0;
  v357 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = v356;
  if (v357)
    (*(void (**)(uint64_t))(*(_QWORD *)v357 + 8))(v357);
  v358 = *(_QWORD *)(a2 + 2712);
  *(_QWORD *)(a2 + 2712) = 0;
  v359 = *(_QWORD *)(a1 + 2712);
  *(_QWORD *)(a1 + 2712) = v358;
  if (v359)
    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359);
  v360 = *(_QWORD *)(a2 + 1808);
  *(_QWORD *)(a2 + 1808) = 0;
  v361 = *(_QWORD *)(a1 + 1808);
  *(_QWORD *)(a1 + 1808) = v360;
  if (v361)
    (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
  v362 = *(_QWORD *)(a2 + 1776);
  *(_QWORD *)(a2 + 1776) = 0;
  v363 = *(_QWORD *)(a1 + 1776);
  *(_QWORD *)(a1 + 1776) = v362;
  if (v363)
    (*(void (**)(uint64_t))(*(_QWORD *)v363 + 8))(v363);
  v364 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 400) = 0;
  v365 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v364;
  if (v365)
    (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
  v366 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = 0;
  v367 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v366;
  if (v367)
    (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
  v368 = *(_QWORD *)(a2 + 1320);
  *(_QWORD *)(a2 + 1320) = 0;
  v369 = *(_QWORD *)(a1 + 1320);
  *(_QWORD *)(a1 + 1320) = v368;
  if (v369)
    (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
  v370 = *(_QWORD *)(a2 + 2896);
  *(_QWORD *)(a2 + 2896) = 0;
  v371 = *(_QWORD *)(a1 + 2896);
  *(_QWORD *)(a1 + 2896) = v370;
  if (v371)
    (*(void (**)(uint64_t))(*(_QWORD *)v371 + 8))(v371);
  v372 = *(_QWORD *)(a2 + 2920);
  *(_QWORD *)(a2 + 2920) = 0;
  v373 = *(_QWORD *)(a1 + 2920);
  *(_QWORD *)(a1 + 2920) = v372;
  if (v373)
    (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
  v374 = *(_QWORD *)(a2 + 2912);
  *(_QWORD *)(a2 + 2912) = 0;
  v375 = *(_QWORD *)(a1 + 2912);
  *(_QWORD *)(a1 + 2912) = v374;
  if (v375)
    (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
  v376 = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(a2 + 1032) = 0;
  v377 = *(_QWORD *)(a1 + 1032);
  *(_QWORD *)(a1 + 1032) = v376;
  if (v377)
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
  v378 = *(_QWORD *)(a2 + 3392);
  *(_QWORD *)(a2 + 3392) = 0;
  v379 = *(_QWORD *)(a1 + 3392);
  *(_QWORD *)(a1 + 3392) = v378;
  if (v379)
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  v380 = *(_QWORD *)(a2 + 920);
  *(_QWORD *)(a2 + 920) = 0;
  v381 = *(_QWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 920) = v380;
  if (v381)
    (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
  v382 = *(_QWORD *)(a2 + 3368);
  *(_QWORD *)(a2 + 3368) = 0;
  v383 = *(_QWORD *)(a1 + 3368);
  *(_QWORD *)(a1 + 3368) = v382;
  if (v383)
    (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
  v384 = *(_QWORD *)(a2 + 3376);
  *(_QWORD *)(a2 + 3376) = 0;
  v385 = *(_QWORD *)(a1 + 3376);
  *(_QWORD *)(a1 + 3376) = v384;
  if (v385)
    (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
  v386 = *(_QWORD *)(a2 + 3160);
  *(_QWORD *)(a2 + 3160) = 0;
  v387 = *(_QWORD *)(a1 + 3160);
  *(_QWORD *)(a1 + 3160) = v386;
  if (v387)
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
  v388 = *(_QWORD *)(a2 + 1112);
  *(_QWORD *)(a2 + 1112) = 0;
  v389 = *(_QWORD *)(a1 + 1112);
  *(_QWORD *)(a1 + 1112) = v388;
  if (v389)
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
  v390 = *(_QWORD *)(a2 + 1120);
  *(_QWORD *)(a2 + 1120) = 0;
  v391 = *(_QWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = v390;
  if (v391)
    (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
  v392 = *(_QWORD *)(a2 + 1944);
  *(_QWORD *)(a2 + 1944) = 0;
  v393 = *(_QWORD *)(a1 + 1944);
  *(_QWORD *)(a1 + 1944) = v392;
  if (v393)
    (*(void (**)(uint64_t))(*(_QWORD *)v393 + 8))(v393);
  v394 = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a2 + 1024) = 0;
  v395 = *(_QWORD *)(a1 + 1024);
  *(_QWORD *)(a1 + 1024) = v394;
  if (v395)
    (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
  v396 = *(_QWORD *)(a2 + 3504);
  *(_QWORD *)(a2 + 3504) = 0;
  v397 = *(_QWORD *)(a1 + 3504);
  *(_QWORD *)(a1 + 3504) = v396;
  if (v397)
    (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
  v398 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v399 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v398;
  if (v399)
    (*(void (**)(uint64_t))(*(_QWORD *)v399 + 8))(v399);
  v400 = *(_QWORD *)(a2 + 2328);
  *(_QWORD *)(a2 + 2328) = 0;
  v401 = *(_QWORD *)(a1 + 2328);
  *(_QWORD *)(a1 + 2328) = v400;
  if (v401)
    (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  v402 = *(_QWORD *)(a2 + 1416);
  *(_QWORD *)(a2 + 1416) = 0;
  v403 = *(_QWORD *)(a1 + 1416);
  *(_QWORD *)(a1 + 1416) = v402;
  if (v403)
    (*(void (**)(uint64_t))(*(_QWORD *)v403 + 8))(v403);
  v404 = *(_QWORD *)(a2 + 2408);
  *(_QWORD *)(a2 + 2408) = 0;
  v405 = *(_QWORD *)(a1 + 2408);
  *(_QWORD *)(a1 + 2408) = v404;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  v406 = *(_QWORD *)(a2 + 2416);
  *(_QWORD *)(a2 + 2416) = 0;
  v407 = *(_QWORD *)(a1 + 2416);
  *(_QWORD *)(a1 + 2416) = v406;
  if (v407)
    (*(void (**)(uint64_t))(*(_QWORD *)v407 + 8))(v407);
  v408 = *(_QWORD *)(a2 + 2320);
  *(_QWORD *)(a2 + 2320) = 0;
  v409 = *(_QWORD *)(a1 + 2320);
  *(_QWORD *)(a1 + 2320) = v408;
  if (v409)
    (*(void (**)(uint64_t))(*(_QWORD *)v409 + 8))(v409);
  v410 = *(_QWORD *)(a2 + 864);
  *(_QWORD *)(a2 + 864) = 0;
  v411 = *(_QWORD *)(a1 + 864);
  *(_QWORD *)(a1 + 864) = v410;
  if (v411)
    (*(void (**)(uint64_t))(*(_QWORD *)v411 + 8))(v411);
  v412 = *(_QWORD *)(a2 + 1424);
  *(_QWORD *)(a2 + 1424) = 0;
  v413 = *(_QWORD *)(a1 + 1424);
  *(_QWORD *)(a1 + 1424) = v412;
  if (v413)
    (*(void (**)(uint64_t))(*(_QWORD *)v413 + 8))(v413);
  v414 = *(_QWORD *)(a2 + 3424);
  *(_QWORD *)(a2 + 3424) = 0;
  v415 = *(_QWORD *)(a1 + 3424);
  *(_QWORD *)(a1 + 3424) = v414;
  if (v415)
    (*(void (**)(uint64_t))(*(_QWORD *)v415 + 8))(v415);
  v416 = *(_QWORD *)(a2 + 2352);
  *(_QWORD *)(a2 + 2352) = 0;
  v417 = *(_QWORD *)(a1 + 2352);
  *(_QWORD *)(a1 + 2352) = v416;
  if (v417)
    (*(void (**)(uint64_t))(*(_QWORD *)v417 + 8))(v417);
  v418 = *(_QWORD *)(a2 + 2376);
  *(_QWORD *)(a2 + 2376) = 0;
  v419 = *(_QWORD *)(a1 + 2376);
  *(_QWORD *)(a1 + 2376) = v418;
  if (v419)
    (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
  v420 = *(_QWORD *)(a2 + 1272);
  *(_QWORD *)(a2 + 1272) = 0;
  v421 = *(_QWORD *)(a1 + 1272);
  *(_QWORD *)(a1 + 1272) = v420;
  if (v421)
    (*(void (**)(uint64_t))(*(_QWORD *)v421 + 8))(v421);
  v422 = *(_QWORD *)(a2 + 2992);
  *(_QWORD *)(a2 + 2992) = 0;
  v423 = *(_QWORD *)(a1 + 2992);
  *(_QWORD *)(a1 + 2992) = v422;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  v424 = *(_QWORD *)(a2 + 2368);
  *(_QWORD *)(a2 + 2368) = 0;
  v425 = *(_QWORD *)(a1 + 2368);
  *(_QWORD *)(a1 + 2368) = v424;
  if (v425)
    (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
  v426 = *(_QWORD *)(a2 + 1968);
  *(_QWORD *)(a2 + 1968) = 0;
  v427 = *(_QWORD *)(a1 + 1968);
  *(_QWORD *)(a1 + 1968) = v426;
  if (v427)
    (*(void (**)(uint64_t))(*(_QWORD *)v427 + 8))(v427);
  v428 = *(_QWORD *)(a2 + 3384);
  *(_QWORD *)(a2 + 3384) = 0;
  v429 = *(_QWORD *)(a1 + 3384);
  *(_QWORD *)(a1 + 3384) = v428;
  if (v429)
    (*(void (**)(uint64_t))(*(_QWORD *)v429 + 8))(v429);
  v430 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  v431 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v430;
  if (v431)
    (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
  v432 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  v433 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v432;
  if (v433)
    (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
  v434 = *(_QWORD *)(a2 + 2032);
  *(_QWORD *)(a2 + 2032) = 0;
  v435 = *(_QWORD *)(a1 + 2032);
  *(_QWORD *)(a1 + 2032) = v434;
  if (v435)
    (*(void (**)(uint64_t))(*(_QWORD *)v435 + 8))(v435);
  v436 = *(_QWORD *)(a2 + 776);
  *(_QWORD *)(a2 + 776) = 0;
  v437 = *(_QWORD *)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v436;
  if (v437)
    (*(void (**)(uint64_t))(*(_QWORD *)v437 + 8))(v437);
  v438 = *(_QWORD *)(a2 + 2448);
  *(_QWORD *)(a2 + 2448) = 0;
  v439 = *(_QWORD *)(a1 + 2448);
  *(_QWORD *)(a1 + 2448) = v438;
  if (v439)
    (*(void (**)(uint64_t))(*(_QWORD *)v439 + 8))(v439);
  v440 = *(_QWORD *)(a2 + 2456);
  *(_QWORD *)(a2 + 2456) = 0;
  v441 = *(_QWORD *)(a1 + 2456);
  *(_QWORD *)(a1 + 2456) = v440;
  if (v441)
    (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  v442 = *(_QWORD *)(a2 + 1336);
  *(_QWORD *)(a2 + 1336) = 0;
  v443 = *(_QWORD *)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = v442;
  if (v443)
    (*(void (**)(uint64_t))(*(_QWORD *)v443 + 8))(v443);
  v444 = *(_QWORD *)(a2 + 3496);
  *(_QWORD *)(a2 + 3496) = 0;
  v445 = *(_QWORD *)(a1 + 3496);
  *(_QWORD *)(a1 + 3496) = v444;
  if (v445)
    (*(void (**)(uint64_t))(*(_QWORD *)v445 + 8))(v445);
  v446 = *(_QWORD *)(a2 + 3072);
  *(_QWORD *)(a2 + 3072) = 0;
  v447 = *(_QWORD *)(a1 + 3072);
  *(_QWORD *)(a1 + 3072) = v446;
  if (v447)
    (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
  v448 = *(_QWORD *)(a2 + 3168);
  *(_QWORD *)(a2 + 3168) = 0;
  v449 = *(_QWORD *)(a1 + 3168);
  *(_QWORD *)(a1 + 3168) = v448;
  if (v449)
    (*(void (**)(uint64_t))(*(_QWORD *)v449 + 8))(v449);
  v450 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v451 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v450;
  if (v451)
    (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
  v452 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v453 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v452;
  if (v453)
    (*(void (**)(uint64_t))(*(_QWORD *)v453 + 8))(v453);
  v454 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v455 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v454;
  if (v455)
    (*(void (**)(uint64_t))(*(_QWORD *)v455 + 8))(v455);
  v456 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v457 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v456;
  if (v457)
    (*(void (**)(uint64_t))(*(_QWORD *)v457 + 8))(v457);
  v458 = *(_QWORD *)(a2 + 1144);
  *(_QWORD *)(a2 + 1144) = 0;
  v459 = *(_QWORD *)(a1 + 1144);
  *(_QWORD *)(a1 + 1144) = v458;
  if (v459)
    (*(void (**)(uint64_t))(*(_QWORD *)v459 + 8))(v459);
  v460 = *(_QWORD *)(a2 + 1256);
  *(_QWORD *)(a2 + 1256) = 0;
  v461 = *(_QWORD *)(a1 + 1256);
  *(_QWORD *)(a1 + 1256) = v460;
  if (v461)
    (*(void (**)(uint64_t))(*(_QWORD *)v461 + 8))(v461);
  v462 = *(_QWORD *)(a2 + 1264);
  *(_QWORD *)(a2 + 1264) = 0;
  v463 = *(_QWORD *)(a1 + 1264);
  *(_QWORD *)(a1 + 1264) = v462;
  if (v463)
    (*(void (**)(uint64_t))(*(_QWORD *)v463 + 8))(v463);
  v464 = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a2 + 1152) = 0;
  v465 = *(_QWORD *)(a1 + 1152);
  *(_QWORD *)(a1 + 1152) = v464;
  if (v465)
    (*(void (**)(uint64_t))(*(_QWORD *)v465 + 8))(v465);
  v466 = *(_QWORD *)(a2 + 1184);
  *(_QWORD *)(a2 + 1184) = 0;
  v467 = *(_QWORD *)(a1 + 1184);
  *(_QWORD *)(a1 + 1184) = v466;
  if (v467)
    (*(void (**)(uint64_t))(*(_QWORD *)v467 + 8))(v467);
  v468 = *(_QWORD *)(a2 + 1232);
  *(_QWORD *)(a2 + 1232) = 0;
  v469 = *(_QWORD *)(a1 + 1232);
  *(_QWORD *)(a1 + 1232) = v468;
  if (v469)
    (*(void (**)(uint64_t))(*(_QWORD *)v469 + 8))(v469);
  v470 = *(_QWORD *)(a2 + 1920);
  *(_QWORD *)(a2 + 1920) = 0;
  v471 = *(_QWORD *)(a1 + 1920);
  *(_QWORD *)(a1 + 1920) = v470;
  if (v471)
    (*(void (**)(uint64_t))(*(_QWORD *)v471 + 8))(v471);
  v472 = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a2 + 640) = 0;
  v473 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 640) = v472;
  if (v473)
    (*(void (**)(uint64_t))(*(_QWORD *)v473 + 8))(v473);
  v474 = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a2 + 648) = 0;
  v475 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = v474;
  if (v475)
    (*(void (**)(uint64_t))(*(_QWORD *)v475 + 8))(v475);
  v476 = *(_QWORD *)(a2 + 1224);
  *(_QWORD *)(a2 + 1224) = 0;
  v477 = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = v476;
  if (v477)
    (*(void (**)(uint64_t))(*(_QWORD *)v477 + 8))(v477);
  v478 = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a2 + 656) = 0;
  v479 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 656) = v478;
  if (v479)
    (*(void (**)(uint64_t))(*(_QWORD *)v479 + 8))(v479);
  v480 = *(_QWORD *)(a2 + 2528);
  *(_QWORD *)(a2 + 2528) = 0;
  v481 = *(_QWORD *)(a1 + 2528);
  *(_QWORD *)(a1 + 2528) = v480;
  if (v481)
    (*(void (**)(uint64_t))(*(_QWORD *)v481 + 8))(v481);
  v482 = *(_QWORD *)(a2 + 2584);
  *(_QWORD *)(a2 + 2584) = 0;
  v483 = *(_QWORD *)(a1 + 2584);
  *(_QWORD *)(a1 + 2584) = v482;
  if (v483)
    (*(void (**)(uint64_t))(*(_QWORD *)v483 + 8))(v483);
  v484 = *(_QWORD *)(a2 + 2552);
  *(_QWORD *)(a2 + 2552) = 0;
  v485 = *(_QWORD *)(a1 + 2552);
  *(_QWORD *)(a1 + 2552) = v484;
  if (v485)
    (*(void (**)(uint64_t))(*(_QWORD *)v485 + 8))(v485);
  v486 = *(_QWORD *)(a2 + 2592);
  *(_QWORD *)(a2 + 2592) = 0;
  v487 = *(_QWORD *)(a1 + 2592);
  *(_QWORD *)(a1 + 2592) = v486;
  if (v487)
    (*(void (**)(uint64_t))(*(_QWORD *)v487 + 8))(v487);
  v488 = *(_QWORD *)(a2 + 3152);
  *(_QWORD *)(a2 + 3152) = 0;
  v489 = *(_QWORD *)(a1 + 3152);
  *(_QWORD *)(a1 + 3152) = v488;
  if (v489)
    (*(void (**)(uint64_t))(*(_QWORD *)v489 + 8))(v489);
  v490 = *(_QWORD *)(a2 + 744);
  *(_QWORD *)(a2 + 744) = 0;
  v491 = *(_QWORD *)(a1 + 744);
  *(_QWORD *)(a1 + 744) = v490;
  if (v491)
    (*(void (**)(uint64_t))(*(_QWORD *)v491 + 8))(v491);
  v492 = *(_QWORD *)(a2 + 2048);
  *(_QWORD *)(a2 + 2048) = 0;
  v493 = *(_QWORD *)(a1 + 2048);
  *(_QWORD *)(a1 + 2048) = v492;
  if (v493)
    (*(void (**)(uint64_t))(*(_QWORD *)v493 + 8))(v493);
  v494 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v495 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v494;
  if (v495)
    (*(void (**)(uint64_t))(*(_QWORD *)v495 + 8))(v495);
  v496 = *(_QWORD *)(a2 + 1248);
  *(_QWORD *)(a2 + 1248) = 0;
  v497 = *(_QWORD *)(a1 + 1248);
  *(_QWORD *)(a1 + 1248) = v496;
  if (v497)
    (*(void (**)(uint64_t))(*(_QWORD *)v497 + 8))(v497);
  v498 = *(_QWORD *)(a2 + 2576);
  *(_QWORD *)(a2 + 2576) = 0;
  v499 = *(_QWORD *)(a1 + 2576);
  *(_QWORD *)(a1 + 2576) = v498;
  if (v499)
    (*(void (**)(uint64_t))(*(_QWORD *)v499 + 8))(v499);
  v500 = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a2 + 392) = 0;
  v501 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v500;
  if (v501)
    (*(void (**)(uint64_t))(*(_QWORD *)v501 + 8))(v501);
  v502 = *(_QWORD *)(a2 + 2840);
  *(_QWORD *)(a2 + 2840) = 0;
  v503 = *(_QWORD *)(a1 + 2840);
  *(_QWORD *)(a1 + 2840) = v502;
  if (v503)
    (*(void (**)(uint64_t))(*(_QWORD *)v503 + 8))(v503);
  v504 = *(_QWORD *)(a2 + 1864);
  *(_QWORD *)(a2 + 1864) = 0;
  v505 = *(_QWORD *)(a1 + 1864);
  *(_QWORD *)(a1 + 1864) = v504;
  if (v505)
    (*(void (**)(uint64_t))(*(_QWORD *)v505 + 8))(v505);
  v506 = *(_QWORD *)(a2 + 2016);
  *(_QWORD *)(a2 + 2016) = 0;
  v507 = *(_QWORD *)(a1 + 2016);
  *(_QWORD *)(a1 + 2016) = v506;
  if (v507)
    (*(void (**)(uint64_t))(*(_QWORD *)v507 + 8))(v507);
  v508 = *(_QWORD *)(a2 + 880);
  *(_QWORD *)(a2 + 880) = 0;
  v509 = *(_QWORD *)(a1 + 880);
  *(_QWORD *)(a1 + 880) = v508;
  if (v509)
    (*(void (**)(uint64_t))(*(_QWORD *)v509 + 8))(v509);
  v510 = *(_QWORD *)(a2 + 2104);
  *(_QWORD *)(a2 + 2104) = 0;
  v511 = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 2104) = v510;
  if (v511)
    (*(void (**)(uint64_t))(*(_QWORD *)v511 + 8))(v511);
  v512 = *(_QWORD *)(a2 + 2096);
  *(_QWORD *)(a2 + 2096) = 0;
  v513 = *(_QWORD *)(a1 + 2096);
  *(_QWORD *)(a1 + 2096) = v512;
  if (v513)
    (*(void (**)(uint64_t))(*(_QWORD *)v513 + 8))(v513);
  v514 = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a2 + 528) = 0;
  v515 = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 528) = v514;
  if (v515)
    (*(void (**)(uint64_t))(*(_QWORD *)v515 + 8))(v515);
  v516 = *(_QWORD *)(a2 + 3432);
  *(_QWORD *)(a2 + 3432) = 0;
  v517 = *(_QWORD *)(a1 + 3432);
  *(_QWORD *)(a1 + 3432) = v516;
  if (v517)
    (*(void (**)(uint64_t))(*(_QWORD *)v517 + 8))(v517);
  v518 = *(_QWORD *)(a2 + 2136);
  *(_QWORD *)(a2 + 2136) = 0;
  v519 = *(_QWORD *)(a1 + 2136);
  *(_QWORD *)(a1 + 2136) = v518;
  if (v519)
    (*(void (**)(uint64_t))(*(_QWORD *)v519 + 8))(v519);
  v520 = *(_QWORD *)(a2 + 3064);
  *(_QWORD *)(a2 + 3064) = 0;
  v521 = *(_QWORD *)(a1 + 3064);
  *(_QWORD *)(a1 + 3064) = v520;
  if (v521)
    (*(void (**)(uint64_t))(*(_QWORD *)v521 + 8))(v521);
  v522 = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a2 + 848) = 0;
  v523 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a1 + 848) = v522;
  if (v523)
    (*(void (**)(uint64_t))(*(_QWORD *)v523 + 8))(v523);
  v524 = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a2 + 632) = 0;
  v525 = *(_QWORD *)(a1 + 632);
  *(_QWORD *)(a1 + 632) = v524;
  if (v525)
    (*(void (**)(uint64_t))(*(_QWORD *)v525 + 8))(v525);
  v526 = *(_QWORD *)(a2 + 2008);
  *(_QWORD *)(a2 + 2008) = 0;
  v527 = *(_QWORD *)(a1 + 2008);
  *(_QWORD *)(a1 + 2008) = v526;
  if (v527)
    (*(void (**)(uint64_t))(*(_QWORD *)v527 + 8))(v527);
  v528 = *(_QWORD *)(a2 + 2064);
  *(_QWORD *)(a2 + 2064) = 0;
  v529 = *(_QWORD *)(a1 + 2064);
  *(_QWORD *)(a1 + 2064) = v528;
  if (v529)
    (*(void (**)(uint64_t))(*(_QWORD *)v529 + 8))(v529);
  v530 = *(_QWORD *)(a2 + 3080);
  *(_QWORD *)(a2 + 3080) = 0;
  v531 = *(_QWORD *)(a1 + 3080);
  *(_QWORD *)(a1 + 3080) = v530;
  if (v531)
    (*(void (**)(uint64_t))(*(_QWORD *)v531 + 8))(v531);
  v532 = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a2 + 600) = 0;
  v533 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = v532;
  if (v533)
    (*(void (**)(uint64_t))(*(_QWORD *)v533 + 8))(v533);
  v534 = *(_QWORD *)(a2 + 2112);
  *(_QWORD *)(a2 + 2112) = 0;
  v535 = *(_QWORD *)(a1 + 2112);
  *(_QWORD *)(a1 + 2112) = v534;
  if (v535)
    (*(void (**)(uint64_t))(*(_QWORD *)v535 + 8))(v535);
  v536 = *(_QWORD *)(a2 + 1952);
  *(_QWORD *)(a2 + 1952) = 0;
  v537 = *(_QWORD *)(a1 + 1952);
  *(_QWORD *)(a1 + 1952) = v536;
  if (v537)
    (*(void (**)(uint64_t))(*(_QWORD *)v537 + 8))(v537);
  v538 = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(a2 + 1008) = 0;
  v539 = *(_QWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1008) = v538;
  if (v539)
    (*(void (**)(uint64_t))(*(_QWORD *)v539 + 8))(v539);
  v540 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 424) = 0;
  v541 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v540;
  if (v541)
    (*(void (**)(uint64_t))(*(_QWORD *)v541 + 8))(v541);
  v542 = *(_QWORD *)(a2 + 3216);
  *(_QWORD *)(a2 + 3216) = 0;
  v543 = *(_QWORD *)(a1 + 3216);
  *(_QWORD *)(a1 + 3216) = v542;
  if (v543)
    (*(void (**)(uint64_t))(*(_QWORD *)v543 + 8))(v543);
  v544 = *(_QWORD *)(a2 + 3024);
  *(_QWORD *)(a2 + 3024) = 0;
  v545 = *(_QWORD *)(a1 + 3024);
  *(_QWORD *)(a1 + 3024) = v544;
  if (v545)
    (*(void (**)(uint64_t))(*(_QWORD *)v545 + 8))(v545);
  v546 = *(_QWORD *)(a2 + 3408);
  *(_QWORD *)(a2 + 3408) = 0;
  v547 = *(_QWORD *)(a1 + 3408);
  *(_QWORD *)(a1 + 3408) = v546;
  if (v547)
    (*(void (**)(uint64_t))(*(_QWORD *)v547 + 8))(v547);
  v548 = *(_QWORD *)(a2 + 2056);
  *(_QWORD *)(a2 + 2056) = 0;
  v549 = *(_QWORD *)(a1 + 2056);
  *(_QWORD *)(a1 + 2056) = v548;
  if (v549)
    (*(void (**)(uint64_t))(*(_QWORD *)v549 + 8))(v549);
  v550 = *(_QWORD *)(a2 + 2040);
  *(_QWORD *)(a2 + 2040) = 0;
  v551 = *(_QWORD *)(a1 + 2040);
  *(_QWORD *)(a1 + 2040) = v550;
  if (v551)
    (*(void (**)(uint64_t))(*(_QWORD *)v551 + 8))(v551);
  v552 = *(_QWORD *)(a2 + 2120);
  *(_QWORD *)(a2 + 2120) = 0;
  v553 = *(_QWORD *)(a1 + 2120);
  *(_QWORD *)(a1 + 2120) = v552;
  if (v553)
    (*(void (**)(uint64_t))(*(_QWORD *)v553 + 8))(v553);
  v554 = *(_QWORD *)(a2 + 2568);
  *(_QWORD *)(a2 + 2568) = 0;
  v555 = *(_QWORD *)(a1 + 2568);
  *(_QWORD *)(a1 + 2568) = v554;
  if (v555)
    (*(void (**)(uint64_t))(*(_QWORD *)v555 + 8))(v555);
  v556 = *(_QWORD *)(a2 + 1400);
  *(_QWORD *)(a2 + 1400) = 0;
  v557 = *(_QWORD *)(a1 + 1400);
  *(_QWORD *)(a1 + 1400) = v556;
  if (v557)
    (*(void (**)(uint64_t))(*(_QWORD *)v557 + 8))(v557);
  v558 = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a2 + 624) = 0;
  v559 = *v5;
  *v5 = v558;
  if (v559)
    (*(void (**)(uint64_t))(*(_QWORD *)v559 + 8))(v559);
  v560 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  v561 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v560;
  if (v561)
    (*(void (**)(uint64_t))(*(_QWORD *)v561 + 8))(v561);
  v562 = *(_QWORD *)(a2 + 1384);
  *(_QWORD *)(a2 + 1384) = 0;
  v563 = *(_QWORD *)(a1 + 1384);
  *(_QWORD *)(a1 + 1384) = v562;
  if (v563)
    (*(void (**)(uint64_t))(*(_QWORD *)v563 + 8))(v563);
  v564 = *(_QWORD *)(a2 + 1368);
  *(_QWORD *)(a2 + 1368) = 0;
  v565 = *(_QWORD *)(a1 + 1368);
  *(_QWORD *)(a1 + 1368) = v564;
  if (v565)
    (*(void (**)(uint64_t))(*(_QWORD *)v565 + 8))(v565);
  v566 = *(_QWORD *)(a2 + 1376);
  *(_QWORD *)(a2 + 1376) = 0;
  v567 = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = v566;
  if (v567)
    (*(void (**)(uint64_t))(*(_QWORD *)v567 + 8))(v567);
  v568 = *(_QWORD *)(a2 + 1360);
  *(_QWORD *)(a2 + 1360) = 0;
  v569 = *(_QWORD *)(a1 + 1360);
  *(_QWORD *)(a1 + 1360) = v568;
  if (v569)
    (*(void (**)(uint64_t))(*(_QWORD *)v569 + 8))(v569);
  v570 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v571 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v570;
  if (v571)
    (*(void (**)(uint64_t))(*(_QWORD *)v571 + 8))(v571);
  v572 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v573 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v572;
  if (v573)
    (*(void (**)(uint64_t))(*(_QWORD *)v573 + 8))(v573);
  v574 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;
  v575 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v574;
  if (v575)
    (*(void (**)(uint64_t))(*(_QWORD *)v575 + 8))(v575);
  v576 = *(_QWORD *)(a2 + 3120);
  *(_QWORD *)(a2 + 3120) = 0;
  v577 = *(_QWORD *)(a1 + 3120);
  *(_QWORD *)(a1 + 3120) = v576;
  if (v577)
    (*(void (**)(uint64_t))(*(_QWORD *)v577 + 8))(v577);
  v578 = *(_QWORD *)(a2 + 3112);
  *(_QWORD *)(a2 + 3112) = 0;
  v579 = *(_QWORD *)(a1 + 3112);
  *(_QWORD *)(a1 + 3112) = v578;
  if (v579)
    (*(void (**)(uint64_t))(*(_QWORD *)v579 + 8))(v579);
  v580 = *(_QWORD *)(a2 + 840);
  *(_QWORD *)(a2 + 840) = 0;
  v581 = *(_QWORD *)(a1 + 840);
  *(_QWORD *)(a1 + 840) = v580;
  if (v581)
    (*(void (**)(uint64_t))(*(_QWORD *)v581 + 8))(v581);
  v582 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  v583 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v582;
  if (v583)
    (*(void (**)(uint64_t))(*(_QWORD *)v583 + 8))(v583);
  v584 = *(_QWORD *)(a2 + 1104);
  *(_QWORD *)(a2 + 1104) = 0;
  v585 = *(_QWORD *)(a1 + 1104);
  *(_QWORD *)(a1 + 1104) = v584;
  if (v585)
    (*(void (**)(uint64_t))(*(_QWORD *)v585 + 8))(v585);
  v586 = *(_QWORD *)(a2 + 2688);
  *(_QWORD *)(a2 + 2688) = 0;
  v587 = *(_QWORD *)(a1 + 2688);
  *(_QWORD *)(a1 + 2688) = v586;
  if (v587)
    (*(void (**)(uint64_t))(*(_QWORD *)v587 + 8))(v587);
  v588 = *(_QWORD *)(a2 + 2704);
  *(_QWORD *)(a2 + 2704) = 0;
  v589 = *(_QWORD *)(a1 + 2704);
  *(_QWORD *)(a1 + 2704) = v588;
  if (v589)
    (*(void (**)(uint64_t))(*(_QWORD *)v589 + 8))(v589);
  v590 = *(_QWORD *)(a2 + 2696);
  *(_QWORD *)(a2 + 2696) = 0;
  v591 = *(_QWORD *)(a1 + 2696);
  *(_QWORD *)(a1 + 2696) = v590;
  if (v591)
    (*(void (**)(uint64_t))(*(_QWORD *)v591 + 8))(v591);
  v592 = *(_QWORD *)(a2 + 3608);
  *(_QWORD *)(a2 + 3608) = 0;
  v593 = *(_QWORD *)(a1 + 3608);
  *(_QWORD *)(a1 + 3608) = v592;
  if (v593)
    (*(void (**)(uint64_t))(*(_QWORD *)v593 + 8))(v593);
  v594 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a2 + 328) = 0;
  v595 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v594;
  if (v595)
    (*(void (**)(uint64_t))(*(_QWORD *)v595 + 8))(v595);
  v596 = *(_QWORD *)(a2 + 2520);
  *(_QWORD *)(a2 + 2520) = 0;
  v597 = *(_QWORD *)(a1 + 2520);
  *(_QWORD *)(a1 + 2520) = v596;
  if (v597)
    (*(void (**)(uint64_t))(*(_QWORD *)v597 + 8))(v597);
  v598 = *(_QWORD *)(a2 + 2088);
  *(_QWORD *)(a2 + 2088) = 0;
  v599 = *(_QWORD *)(a1 + 2088);
  *(_QWORD *)(a1 + 2088) = v598;
  if (v599)
    (*(void (**)(uint64_t))(*(_QWORD *)v599 + 8))(v599);
  v600 = *(_QWORD *)(a2 + 2080);
  *(_QWORD *)(a2 + 2080) = 0;
  v601 = *(_QWORD *)(a1 + 2080);
  *(_QWORD *)(a1 + 2080) = v600;
  if (v601)
    (*(void (**)(uint64_t))(*(_QWORD *)v601 + 8))(v601);
  v602 = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  v603 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 520) = v602;
  if (v603)
    (*(void (**)(uint64_t))(*(_QWORD *)v603 + 8))(v603);
  v604 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  v605 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v604;
  if (v605)
    (*(void (**)(uint64_t))(*(_QWORD *)v605 + 8))(v605);
  v606 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v607 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v606;
  if (v607)
    (*(void (**)(uint64_t))(*(_QWORD *)v607 + 8))(v607);
  v608 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v609 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v608;
  if (v609)
    (*(void (**)(uint64_t))(*(_QWORD *)v609 + 8))(v609);
  v610 = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a2 + 1064) = 0;
  v611 = *(_QWORD *)(a1 + 1064);
  *(_QWORD *)(a1 + 1064) = v610;
  if (v611)
    (*(void (**)(uint64_t))(*(_QWORD *)v611 + 8))(v611);
  v612 = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = 0;
  v613 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1072) = v612;
  if (v613)
    (*(void (**)(uint64_t))(*(_QWORD *)v613 + 8))(v613);
  v614 = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a2 + 664) = 0;
  v615 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 664) = v614;
  if (v615)
    (*(void (**)(uint64_t))(*(_QWORD *)v615 + 8))(v615);
  v616 = *(_QWORD *)(a2 + 3304);
  *(_QWORD *)(a2 + 3304) = 0;
  v617 = *(_QWORD *)(a1 + 3304);
  *(_QWORD *)(a1 + 3304) = v616;
  if (v617)
    (*(void (**)(uint64_t))(*(_QWORD *)v617 + 8))(v617);
  v618 = *(_QWORD *)(a2 + 3296);
  *(_QWORD *)(a2 + 3296) = 0;
  v619 = *(_QWORD *)(a1 + 3296);
  *(_QWORD *)(a1 + 3296) = v618;
  if (v619)
    (*(void (**)(uint64_t))(*(_QWORD *)v619 + 8))(v619);
  v620 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  v621 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v620;
  if (v621)
    (*(void (**)(uint64_t))(*(_QWORD *)v621 + 8))(v621);
  v622 = *(_QWORD *)(a2 + 952);
  *(_QWORD *)(a2 + 952) = 0;
  v623 = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 952) = v622;
  if (v623)
    (*(void (**)(uint64_t))(*(_QWORD *)v623 + 8))(v623);
  v624 = *(_QWORD *)(a2 + 960);
  *(_QWORD *)(a2 + 960) = 0;
  v625 = *(_QWORD *)(a1 + 960);
  *(_QWORD *)(a1 + 960) = v624;
  if (v625)
    (*(void (**)(uint64_t))(*(_QWORD *)v625 + 8))(v625);
  v626 = *(_QWORD *)(a2 + 968);
  *(_QWORD *)(a2 + 968) = 0;
  v627 = *(_QWORD *)(a1 + 968);
  *(_QWORD *)(a1 + 968) = v626;
  if (v627)
    (*(void (**)(uint64_t))(*(_QWORD *)v627 + 8))(v627);
  v628 = *(_QWORD *)(a2 + 936);
  *(_QWORD *)(a2 + 936) = 0;
  v629 = *(_QWORD *)(a1 + 936);
  *(_QWORD *)(a1 + 936) = v628;
  if (v629)
    (*(void (**)(uint64_t))(*(_QWORD *)v629 + 8))(v629);
  v630 = *(_QWORD *)(a2 + 992);
  *(_QWORD *)(a2 + 992) = 0;
  v631 = *(_QWORD *)(a1 + 992);
  *(_QWORD *)(a1 + 992) = v630;
  if (v631)
    (*(void (**)(uint64_t))(*(_QWORD *)v631 + 8))(v631);
  v632 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v633 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v632;
  if (v633)
    (*(void (**)(uint64_t))(*(_QWORD *)v633 + 8))(v633);
  v634 = *(_QWORD *)(a2 + 2680);
  *(_QWORD *)(a2 + 2680) = 0;
  v635 = *(_QWORD *)(a1 + 2680);
  *(_QWORD *)(a1 + 2680) = v634;
  if (v635)
    (*(void (**)(uint64_t))(*(_QWORD *)v635 + 8))(v635);
  v636 = *(_QWORD *)(a2 + 2672);
  *(_QWORD *)(a2 + 2672) = 0;
  v637 = *(_QWORD *)(a1 + 2672);
  *(_QWORD *)(a1 + 2672) = v636;
  if (v637)
    (*(void (**)(uint64_t))(*(_QWORD *)v637 + 8))(v637);
  v638 = *(_QWORD *)(a2 + 752);
  *(_QWORD *)(a2 + 752) = 0;
  v639 = *(_QWORD *)(a1 + 752);
  *(_QWORD *)(a1 + 752) = v638;
  if (v639)
    (*(void (**)(uint64_t))(*(_QWORD *)v639 + 8))(v639);
  v640 = *(_QWORD *)(a2 + 944);
  *(_QWORD *)(a2 + 944) = 0;
  v641 = *(_QWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 944) = v640;
  if (v641)
    (*(void (**)(uint64_t))(*(_QWORD *)v641 + 8))(v641);
  v642 = *(_QWORD *)(a2 + 3352);
  *(_QWORD *)(a2 + 3352) = 0;
  v643 = *(_QWORD *)(a1 + 3352);
  *(_QWORD *)(a1 + 3352) = v642;
  if (v643)
    (*(void (**)(uint64_t))(*(_QWORD *)v643 + 8))(v643);
  v644 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  v645 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v644;
  if (v645)
    (*(void (**)(uint64_t))(*(_QWORD *)v645 + 8))(v645);
  v646 = *(_QWORD *)(a2 + 976);
  *(_QWORD *)(a2 + 976) = 0;
  v647 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)(a1 + 976) = v646;
  if (v647)
    (*(void (**)(uint64_t))(*(_QWORD *)v647 + 8))(v647);
  v648 = *(_QWORD *)(a2 + 1176);
  *(_QWORD *)(a2 + 1176) = 0;
  v649 = *(_QWORD *)(a1 + 1176);
  *(_QWORD *)(a1 + 1176) = v648;
  if (v649)
    (*(void (**)(uint64_t))(*(_QWORD *)v649 + 8))(v649);
  v650 = *(_QWORD *)(a2 + 3056);
  *(_QWORD *)(a2 + 3056) = 0;
  v651 = *(_QWORD *)(a1 + 3056);
  *(_QWORD *)(a1 + 3056) = v650;
  if (v651)
    (*(void (**)(uint64_t))(*(_QWORD *)v651 + 8))(v651);
  v652 = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(a2 + 1016) = 0;
  v653 = *(_QWORD *)(a1 + 1016);
  *(_QWORD *)(a1 + 1016) = v652;
  if (v653)
    (*(void (**)(uint64_t))(*(_QWORD *)v653 + 8))(v653);
  v654 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  v655 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v654;
  if (v655)
    (*(void (**)(uint64_t))(*(_QWORD *)v655 + 8))(v655);
  v656 = *(_QWORD *)(a2 + 2864);
  *(_QWORD *)(a2 + 2864) = 0;
  v657 = *(_QWORD *)(a1 + 2864);
  *(_QWORD *)(a1 + 2864) = v656;
  if (v657)
    (*(void (**)(uint64_t))(*(_QWORD *)v657 + 8))(v657);
  v658 = *(_QWORD *)(a2 + 2888);
  *(_QWORD *)(a2 + 2888) = 0;
  v659 = *(_QWORD *)(a1 + 2888);
  *(_QWORD *)(a1 + 2888) = v658;
  if (v659)
    (*(void (**)(uint64_t))(*(_QWORD *)v659 + 8))(v659);
  v660 = *(_QWORD *)(a2 + 2872);
  *(_QWORD *)(a2 + 2872) = 0;
  v661 = *(_QWORD *)(a1 + 2872);
  *(_QWORD *)(a1 + 2872) = v660;
  if (v661)
    (*(void (**)(uint64_t))(*(_QWORD *)v661 + 8))(v661);
  v662 = *(_QWORD *)(a2 + 2880);
  *(_QWORD *)(a2 + 2880) = 0;
  v663 = *(_QWORD *)(a1 + 2880);
  *(_QWORD *)(a1 + 2880) = v662;
  if (v663)
    (*(void (**)(uint64_t))(*(_QWORD *)v663 + 8))(v663);
  v664 = *(_QWORD *)(a2 + 2928);
  *(_QWORD *)(a2 + 2928) = 0;
  v665 = *(_QWORD *)(a1 + 2928);
  *(_QWORD *)(a1 + 2928) = v664;
  if (v665)
    (*(void (**)(uint64_t))(*(_QWORD *)v665 + 8))(v665);
  v666 = *(_QWORD *)(a2 + 984);
  *(_QWORD *)(a2 + 984) = 0;
  v667 = *(_QWORD *)(a1 + 984);
  *(_QWORD *)(a1 + 984) = v666;
  if (v667)
    (*(void (**)(uint64_t))(*(_QWORD *)v667 + 8))(v667);
  v668 = *(_QWORD *)(a2 + 1456);
  *(_QWORD *)(a2 + 1456) = 0;
  v669 = *(_QWORD *)(a1 + 1456);
  *(_QWORD *)(a1 + 1456) = v668;
  if (v669)
    (*(void (**)(uint64_t))(*(_QWORD *)v669 + 8))(v669);
  v670 = *(_QWORD *)(a2 + 2560);
  *(_QWORD *)(a2 + 2560) = 0;
  v671 = *(_QWORD *)(a1 + 2560);
  *(_QWORD *)(a1 + 2560) = v670;
  if (v671)
    (*(void (**)(uint64_t))(*(_QWORD *)v671 + 8))(v671);
  v672 = *(_QWORD *)(a2 + 1992);
  *(_QWORD *)(a2 + 1992) = 0;
  v673 = *(_QWORD *)(a1 + 1992);
  *(_QWORD *)(a1 + 1992) = v672;
  if (v673)
    (*(void (**)(uint64_t))(*(_QWORD *)v673 + 8))(v673);
  v674 = *(_QWORD *)(a2 + 928);
  *(_QWORD *)(a2 + 928) = 0;
  v675 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)(a1 + 928) = v674;
  if (v675)
    (*(void (**)(uint64_t))(*(_QWORD *)v675 + 8))(v675);
  v676 = *(_QWORD *)(a2 + 1824);
  *(_QWORD *)(a2 + 1824) = 0;
  v677 = *(_QWORD *)(a1 + 1824);
  *(_QWORD *)(a1 + 1824) = v676;
  if (v677)
    (*(void (**)(uint64_t))(*(_QWORD *)v677 + 8))(v677);
  v678 = *(_QWORD *)(a2 + 816);
  *(_QWORD *)(a2 + 816) = 0;
  v679 = *(_QWORD *)(a1 + 816);
  *(_QWORD *)(a1 + 816) = v678;
  if (v679)
    (*(void (**)(uint64_t))(*(_QWORD *)v679 + 8))(v679);
  v680 = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a2 + 800) = 0;
  v681 = *(_QWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 800) = v680;
  if (v681)
    (*(void (**)(uint64_t))(*(_QWORD *)v681 + 8))(v681);
  v682 = *(_QWORD *)(a2 + 808);
  *(_QWORD *)(a2 + 808) = 0;
  v683 = *(_QWORD *)(a1 + 808);
  *(_QWORD *)(a1 + 808) = v682;
  if (v683)
    (*(void (**)(uint64_t))(*(_QWORD *)v683 + 8))(v683);
  v684 = *(_QWORD *)(a2 + 792);
  *(_QWORD *)(a2 + 792) = 0;
  v685 = *(_QWORD *)(a1 + 792);
  *(_QWORD *)(a1 + 792) = v684;
  if (v685)
    (*(void (**)(uint64_t))(*(_QWORD *)v685 + 8))(v685);
  v686 = *(_QWORD *)(a2 + 2144);
  *(_QWORD *)(a2 + 2144) = 0;
  v687 = *(_QWORD *)(a1 + 2144);
  *(_QWORD *)(a1 + 2144) = v686;
  if (v687)
    (*(void (**)(uint64_t))(*(_QWORD *)v687 + 8))(v687);
  v688 = *(_QWORD *)(a2 + 1528);
  *(_QWORD *)(a2 + 1528) = 0;
  v689 = *(_QWORD *)(a1 + 1528);
  *(_QWORD *)(a1 + 1528) = v688;
  if (v689)
    (*(void (**)(uint64_t))(*(_QWORD *)v689 + 8))(v689);
  v690 = *(_QWORD *)(a2 + 1536);
  *(_QWORD *)(a2 + 1536) = 0;
  v691 = *(_QWORD *)(a1 + 1536);
  *(_QWORD *)(a1 + 1536) = v690;
  if (v691)
    (*(void (**)(uint64_t))(*(_QWORD *)v691 + 8))(v691);
  v692 = *(_QWORD *)(a2 + 1560);
  *(_QWORD *)(a2 + 1560) = 0;
  v693 = *(_QWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1560) = v692;
  if (v693)
    (*(void (**)(uint64_t))(*(_QWORD *)v693 + 8))(v693);
  v694 = *(_QWORD *)(a2 + 1648);
  *(_QWORD *)(a2 + 1648) = 0;
  v695 = *(_QWORD *)(a1 + 1648);
  *(_QWORD *)(a1 + 1648) = v694;
  if (v695)
    (*(void (**)(uint64_t))(*(_QWORD *)v695 + 8))(v695);
  v696 = *(_QWORD *)(a2 + 1768);
  *(_QWORD *)(a2 + 1768) = 0;
  v697 = *(_QWORD *)(a1 + 1768);
  *(_QWORD *)(a1 + 1768) = v696;
  if (v697)
    (*(void (**)(uint64_t))(*(_QWORD *)v697 + 8))(v697);
  v698 = *(_QWORD *)(a2 + 1760);
  *(_QWORD *)(a2 + 1760) = 0;
  v699 = *(_QWORD *)(a1 + 1760);
  *(_QWORD *)(a1 + 1760) = v698;
  if (v699)
    (*(void (**)(uint64_t))(*(_QWORD *)v699 + 8))(v699);
  v700 = *(_QWORD *)(a2 + 1632);
  *(_QWORD *)(a2 + 1632) = 0;
  v701 = *(_QWORD *)(a1 + 1632);
  *(_QWORD *)(a1 + 1632) = v700;
  if (v701)
    (*(void (**)(uint64_t))(*(_QWORD *)v701 + 8))(v701);
  v702 = *(_QWORD *)(a2 + 1312);
  *(_QWORD *)(a2 + 1312) = 0;
  v703 = *(_QWORD *)(a1 + 1312);
  *(_QWORD *)(a1 + 1312) = v702;
  if (v703)
    (*(void (**)(uint64_t))(*(_QWORD *)v703 + 8))(v703);
  v704 = *(_QWORD *)(a2 + 1304);
  *(_QWORD *)(a2 + 1304) = 0;
  v705 = *(_QWORD *)(a1 + 1304);
  *(_QWORD *)(a1 + 1304) = v704;
  if (v705)
    (*(void (**)(uint64_t))(*(_QWORD *)v705 + 8))(v705);
  v706 = *(_QWORD *)(a2 + 1520);
  *(_QWORD *)(a2 + 1520) = 0;
  v707 = *(_QWORD *)(a1 + 1520);
  *(_QWORD *)(a1 + 1520) = v706;
  if (v707)
    (*(void (**)(uint64_t))(*(_QWORD *)v707 + 8))(v707);
  v708 = *(_QWORD *)(a2 + 1544);
  *(_QWORD *)(a2 + 1544) = 0;
  v709 = *(_QWORD *)(a1 + 1544);
  *(_QWORD *)(a1 + 1544) = v708;
  if (v709)
    (*(void (**)(uint64_t))(*(_QWORD *)v709 + 8))(v709);
  v710 = *(_QWORD *)(a2 + 1656);
  *(_QWORD *)(a2 + 1656) = 0;
  v711 = *(_QWORD *)(a1 + 1656);
  *(_QWORD *)(a1 + 1656) = v710;
  if (v711)
    (*(void (**)(uint64_t))(*(_QWORD *)v711 + 8))(v711);
  v712 = *(_QWORD *)(a2 + 1664);
  *(_QWORD *)(a2 + 1664) = 0;
  v713 = *(_QWORD *)(a1 + 1664);
  *(_QWORD *)(a1 + 1664) = v712;
  if (v713)
    (*(void (**)(uint64_t))(*(_QWORD *)v713 + 8))(v713);
  v714 = *(_QWORD *)(a2 + 1696);
  *(_QWORD *)(a2 + 1696) = 0;
  v715 = *(_QWORD *)(a1 + 1696);
  *(_QWORD *)(a1 + 1696) = v714;
  if (v715)
    (*(void (**)(uint64_t))(*(_QWORD *)v715 + 8))(v715);
  v716 = *(_QWORD *)(a2 + 1600);
  *(_QWORD *)(a2 + 1600) = 0;
  v717 = *(_QWORD *)(a1 + 1600);
  *(_QWORD *)(a1 + 1600) = v716;
  if (v717)
    (*(void (**)(uint64_t))(*(_QWORD *)v717 + 8))(v717);
  v718 = *(_QWORD *)(a2 + 1584);
  *(_QWORD *)(a2 + 1584) = 0;
  v719 = *(_QWORD *)(a1 + 1584);
  *(_QWORD *)(a1 + 1584) = v718;
  if (v719)
    (*(void (**)(uint64_t))(*(_QWORD *)v719 + 8))(v719);
  v720 = *(_QWORD *)(a2 + 1704);
  *(_QWORD *)(a2 + 1704) = 0;
  v721 = *(_QWORD *)(a1 + 1704);
  *(_QWORD *)(a1 + 1704) = v720;
  if (v721)
    (*(void (**)(uint64_t))(*(_QWORD *)v721 + 8))(v721);
  v722 = *(_QWORD *)(a2 + 1592);
  *(_QWORD *)(a2 + 1592) = 0;
  v723 = *(_QWORD *)(a1 + 1592);
  *(_QWORD *)(a1 + 1592) = v722;
  if (v723)
    (*(void (**)(uint64_t))(*(_QWORD *)v723 + 8))(v723);
  v724 = *(_QWORD *)(a2 + 1672);
  *(_QWORD *)(a2 + 1672) = 0;
  v725 = *(_QWORD *)(a1 + 1672);
  *(_QWORD *)(a1 + 1672) = v724;
  if (v725)
    (*(void (**)(uint64_t))(*(_QWORD *)v725 + 8))(v725);
  v726 = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a2 + 768) = 0;
  v727 = *(_QWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 768) = v726;
  if (v727)
    (*(void (**)(uint64_t))(*(_QWORD *)v727 + 8))(v727);
  v728 = *(_QWORD *)(a2 + 3224);
  *(_QWORD *)(a2 + 3224) = 0;
  v729 = *(_QWORD *)(a1 + 3224);
  *(_QWORD *)(a1 + 3224) = v728;
  if (v729)
    (*(void (**)(uint64_t))(*(_QWORD *)v729 + 8))(v729);
  v730 = *(_QWORD *)(a2 + 1296);
  *(_QWORD *)(a2 + 1296) = 0;
  v731 = *(_QWORD *)(a1 + 1296);
  *(_QWORD *)(a1 + 1296) = v730;
  if (v731)
    (*(void (**)(uint64_t))(*(_QWORD *)v731 + 8))(v731);
  v732 = *(_QWORD *)(a2 + 3232);
  *(_QWORD *)(a2 + 3232) = 0;
  v733 = *(_QWORD *)(a1 + 3232);
  *(_QWORD *)(a1 + 3232) = v732;
  if (v733)
    (*(void (**)(uint64_t))(*(_QWORD *)v733 + 8))(v733);
  v734 = *(_QWORD *)(a2 + 3240);
  *(_QWORD *)(a2 + 3240) = 0;
  v735 = *(_QWORD *)(a1 + 3240);
  *(_QWORD *)(a1 + 3240) = v734;
  if (v735)
    (*(void (**)(uint64_t))(*(_QWORD *)v735 + 8))(v735);
  v736 = *(_QWORD *)(a2 + 2728);
  *(_QWORD *)(a2 + 2728) = 0;
  v737 = *(_QWORD *)(a1 + 2728);
  *(_QWORD *)(a1 + 2728) = v736;
  if (v737)
    (*(void (**)(uint64_t))(*(_QWORD *)v737 + 8))(v737);
  v738 = *(_QWORD *)(a2 + 2736);
  *(_QWORD *)(a2 + 2736) = 0;
  v739 = *(_QWORD *)(a1 + 2736);
  *(_QWORD *)(a1 + 2736) = v738;
  if (v739)
    (*(void (**)(uint64_t))(*(_QWORD *)v739 + 8))(v739);
  v740 = *(_QWORD *)(a2 + 2760);
  *(_QWORD *)(a2 + 2760) = 0;
  v741 = *(_QWORD *)(a1 + 2760);
  *(_QWORD *)(a1 + 2760) = v740;
  if (v741)
    (*(void (**)(uint64_t))(*(_QWORD *)v741 + 8))(v741);
  v742 = *(_QWORD *)(a2 + 2800);
  *(_QWORD *)(a2 + 2800) = 0;
  v743 = *(_QWORD *)(a1 + 2800);
  *(_QWORD *)(a1 + 2800) = v742;
  if (v743)
    (*(void (**)(uint64_t))(*(_QWORD *)v743 + 8))(v743);
  v744 = *(_QWORD *)(a2 + 2784);
  *(_QWORD *)(a2 + 2784) = 0;
  v745 = *(_QWORD *)(a1 + 2784);
  *(_QWORD *)(a1 + 2784) = v744;
  if (v745)
    (*(void (**)(uint64_t))(*(_QWORD *)v745 + 8))(v745);
  v746 = *(_QWORD *)(a2 + 1712);
  *(_QWORD *)(a2 + 1712) = 0;
  v747 = *(_QWORD *)(a1 + 1712);
  *(_QWORD *)(a1 + 1712) = v746;
  if (v747)
    (*(void (**)(uint64_t))(*(_QWORD *)v747 + 8))(v747);
  v748 = *(_QWORD *)(a2 + 1624);
  *(_QWORD *)(a2 + 1624) = 0;
  v749 = *(_QWORD *)(a1 + 1624);
  *(_QWORD *)(a1 + 1624) = v748;
  if (v749)
    (*(void (**)(uint64_t))(*(_QWORD *)v749 + 8))(v749);
  v750 = *(_QWORD *)(a2 + 2776);
  *(_QWORD *)(a2 + 2776) = 0;
  v751 = *(_QWORD *)(a1 + 2776);
  *(_QWORD *)(a1 + 2776) = v750;
  if (v751)
    (*(void (**)(uint64_t))(*(_QWORD *)v751 + 8))(v751);
  v752 = *(_QWORD *)(a2 + 1448);
  *(_QWORD *)(a2 + 1448) = 0;
  v753 = *(_QWORD *)(a1 + 1448);
  *(_QWORD *)(a1 + 1448) = v752;
  if (v753)
    (*(void (**)(uint64_t))(*(_QWORD *)v753 + 8))(v753);
  v754 = *(_QWORD *)(a2 + 1576);
  *(_QWORD *)(a2 + 1576) = 0;
  v755 = *(_QWORD *)(a1 + 1576);
  *(_QWORD *)(a1 + 1576) = v754;
  if (v755)
    (*(void (**)(uint64_t))(*(_QWORD *)v755 + 8))(v755);
  v756 = *(_QWORD *)(a2 + 1640);
  *(_QWORD *)(a2 + 1640) = 0;
  v757 = *(_QWORD *)(a1 + 1640);
  *(_QWORD *)(a1 + 1640) = v756;
  if (v757)
    (*(void (**)(uint64_t))(*(_QWORD *)v757 + 8))(v757);
  v758 = *(_QWORD *)(a2 + 1280);
  *(_QWORD *)(a2 + 1280) = 0;
  v759 = *(_QWORD *)(a1 + 1280);
  *(_QWORD *)(a1 + 1280) = v758;
  if (v759)
    (*(void (**)(uint64_t))(*(_QWORD *)v759 + 8))(v759);
  v760 = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a2 + 592) = 0;
  v761 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a1 + 592) = v760;
  if (v761)
    (*(void (**)(uint64_t))(*(_QWORD *)v761 + 8))(v761);
  v762 = *(_QWORD *)(a2 + 2336);
  *(_QWORD *)(a2 + 2336) = 0;
  v763 = *(_QWORD *)(a1 + 2336);
  *(_QWORD *)(a1 + 2336) = v762;
  if (v763)
    (*(void (**)(uint64_t))(*(_QWORD *)v763 + 8))(v763);
  v764 = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a2 + 688) = 0;
  v765 = *(_QWORD *)(a1 + 688);
  *(_QWORD *)(a1 + 688) = v764;
  if (v765)
    (*(void (**)(uint64_t))(*(_QWORD *)v765 + 8))(v765);
  v766 = *(_QWORD *)(a2 + 856);
  *(_QWORD *)(a2 + 856) = 0;
  v767 = *(_QWORD *)(a1 + 856);
  *(_QWORD *)(a1 + 856) = v766;
  if (v767)
    (*(void (**)(uint64_t))(*(_QWORD *)v767 + 8))(v767);
  v768 = *(_QWORD *)(a2 + 3200);
  *(_QWORD *)(a2 + 3200) = 0;
  v769 = *(_QWORD *)(a1 + 3200);
  *(_QWORD *)(a1 + 3200) = v768;
  if (v769)
    (*(void (**)(uint64_t))(*(_QWORD *)v769 + 8))(v769);
  v770 = *(_QWORD *)(a2 + 2608);
  *(_QWORD *)(a2 + 2608) = 0;
  v771 = *(_QWORD *)(a1 + 2608);
  *(_QWORD *)(a1 + 2608) = v770;
  if (v771)
    (*(void (**)(uint64_t))(*(_QWORD *)v771 + 8))(v771);
  v772 = *(_QWORD *)(a2 + 1728);
  *(_QWORD *)(a2 + 1728) = 0;
  v773 = *(_QWORD *)(a1 + 1728);
  *(_QWORD *)(a1 + 1728) = v772;
  if (v773)
    (*(void (**)(uint64_t))(*(_QWORD *)v773 + 8))(v773);
  v774 = *(_QWORD *)(a2 + 3344);
  *(_QWORD *)(a2 + 3344) = 0;
  v775 = *(_QWORD *)(a1 + 3344);
  *(_QWORD *)(a1 + 3344) = v774;
  if (v775)
    (*(void (**)(uint64_t))(*(_QWORD *)v775 + 8))(v775);
  v776 = *(_QWORD *)(a2 + 1568);
  *(_QWORD *)(a2 + 1568) = 0;
  v777 = *(_QWORD *)(a1 + 1568);
  *(_QWORD *)(a1 + 1568) = v776;
  if (v777)
    (*(void (**)(uint64_t))(*(_QWORD *)v777 + 8))(v777);
  v778 = *(_QWORD *)(a2 + 2792);
  *(_QWORD *)(a2 + 2792) = 0;
  v779 = *(_QWORD *)(a1 + 2792);
  *(_QWORD *)(a1 + 2792) = v778;
  if (v779)
    (*(void (**)(uint64_t))(*(_QWORD *)v779 + 8))(v779);
  v780 = *(_QWORD *)(a2 + 3096);
  *(_QWORD *)(a2 + 3096) = 0;
  v781 = *(_QWORD *)(a1 + 3096);
  *(_QWORD *)(a1 + 3096) = v780;
  if (v781)
    (*(void (**)(uint64_t))(*(_QWORD *)v781 + 8))(v781);
  v782 = *(_QWORD *)(a2 + 2312);
  *(_QWORD *)(a2 + 2312) = 0;
  v783 = *(_QWORD *)(a1 + 2312);
  *(_QWORD *)(a1 + 2312) = v782;
  if (v783)
    (*(void (**)(uint64_t))(*(_QWORD *)v783 + 8))(v783);
  v784 = *(_QWORD *)(a2 + 1896);
  *(_QWORD *)(a2 + 1896) = 0;
  v785 = *(_QWORD *)(a1 + 1896);
  *(_QWORD *)(a1 + 1896) = v784;
  if (v785)
    (*(void (**)(uint64_t))(*(_QWORD *)v785 + 8))(v785);
  v786 = *(_QWORD *)(a2 + 2264);
  *(_QWORD *)(a2 + 2264) = 0;
  v787 = *(_QWORD *)(a1 + 2264);
  *(_QWORD *)(a1 + 2264) = v786;
  if (v787)
    (*(void (**)(uint64_t))(*(_QWORD *)v787 + 8))(v787);
  v788 = *(_QWORD *)(a2 + 2272);
  *(_QWORD *)(a2 + 2272) = 0;
  v789 = *(_QWORD *)(a1 + 2272);
  *(_QWORD *)(a1 + 2272) = v788;
  if (v789)
    (*(void (**)(uint64_t))(*(_QWORD *)v789 + 8))(v789);
  v790 = *(_QWORD *)(a2 + 2280);
  *(_QWORD *)(a2 + 2280) = 0;
  v791 = *(_QWORD *)(a1 + 2280);
  *(_QWORD *)(a1 + 2280) = v790;
  if (v791)
    (*(void (**)(uint64_t))(*(_QWORD *)v791 + 8))(v791);
  v792 = *(_QWORD *)(a2 + 2160);
  *(_QWORD *)(a2 + 2160) = 0;
  v793 = *(_QWORD *)(a1 + 2160);
  *(_QWORD *)(a1 + 2160) = v792;
  if (v793)
    (*(void (**)(uint64_t))(*(_QWORD *)v793 + 8))(v793);
  v794 = *(_QWORD *)(a2 + 2296);
  *(_QWORD *)(a2 + 2296) = 0;
  v795 = *(_QWORD *)(a1 + 2296);
  *(_QWORD *)(a1 + 2296) = v794;
  if (v795)
    (*(void (**)(uint64_t))(*(_QWORD *)v795 + 8))(v795);
  v796 = *(_QWORD *)(a2 + 1816);
  *(_QWORD *)(a2 + 1816) = 0;
  v797 = *(_QWORD *)(a1 + 1816);
  *(_QWORD *)(a1 + 1816) = v796;
  if (v797)
    (*(void (**)(uint64_t))(*(_QWORD *)v797 + 8))(v797);
  v798 = *(_QWORD *)(a2 + 3208);
  *(_QWORD *)(a2 + 3208) = 0;
  v799 = *(_QWORD *)(a1 + 3208);
  *(_QWORD *)(a1 + 3208) = v798;
  if (v799)
    (*(void (**)(uint64_t))(*(_QWORD *)v799 + 8))(v799);
  v800 = *(_QWORD *)(a2 + 2232);
  *(_QWORD *)(a2 + 2232) = 0;
  v801 = *(_QWORD *)(a1 + 2232);
  *(_QWORD *)(a1 + 2232) = v800;
  if (v801)
    (*(void (**)(uint64_t))(*(_QWORD *)v801 + 8))(v801);
  v802 = *(_QWORD *)(a2 + 2240);
  *(_QWORD *)(a2 + 2240) = 0;
  v803 = *(_QWORD *)(a1 + 2240);
  *(_QWORD *)(a1 + 2240) = v802;
  if (v803)
    (*(void (**)(uint64_t))(*(_QWORD *)v803 + 8))(v803);
  v804 = *(_QWORD *)(a2 + 3192);
  *(_QWORD *)(a2 + 3192) = 0;
  v805 = *(_QWORD *)(a1 + 3192);
  *(_QWORD *)(a1 + 3192) = v804;
  if (v805)
    (*(void (**)(uint64_t))(*(_QWORD *)v805 + 8))(v805);
  v806 = *(_QWORD *)(a2 + 3104);
  *(_QWORD *)(a2 + 3104) = 0;
  v807 = *(_QWORD *)(a1 + 3104);
  *(_QWORD *)(a1 + 3104) = v806;
  if (v807)
    (*(void (**)(uint64_t))(*(_QWORD *)v807 + 8))(v807);
  v808 = *(_QWORD *)(a2 + 824);
  *(_QWORD *)(a2 + 824) = 0;
  v809 = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a1 + 824) = v808;
  if (v809)
    (*(void (**)(uint64_t))(*(_QWORD *)v809 + 8))(v809);
  v810 = *(_QWORD *)(a2 + 1744);
  *(_QWORD *)(a2 + 1744) = 0;
  v811 = *(_QWORD *)(a1 + 1744);
  *(_QWORD *)(a1 + 1744) = v810;
  if (v811)
    (*(void (**)(uint64_t))(*(_QWORD *)v811 + 8))(v811);
  v812 = *(_QWORD *)(a2 + 2856);
  *(_QWORD *)(a2 + 2856) = 0;
  v813 = *(_QWORD *)(a1 + 2856);
  *(_QWORD *)(a1 + 2856) = v812;
  if (v813)
    (*(void (**)(uint64_t))(*(_QWORD *)v813 + 8))(v813);
  v814 = *(_QWORD *)(a2 + 2224);
  *(_QWORD *)(a2 + 2224) = 0;
  v815 = *(_QWORD *)(a1 + 2224);
  *(_QWORD *)(a1 + 2224) = v814;
  if (v815)
    (*(void (**)(uint64_t))(*(_QWORD *)v815 + 8))(v815);
  v816 = *(_QWORD *)(a2 + 2176);
  *(_QWORD *)(a2 + 2176) = 0;
  v817 = *(_QWORD *)(a1 + 2176);
  *(_QWORD *)(a1 + 2176) = v816;
  if (v817)
    (*(void (**)(uint64_t))(*(_QWORD *)v817 + 8))(v817);
  v818 = *(_QWORD *)(a2 + 2168);
  *(_QWORD *)(a2 + 2168) = 0;
  v819 = *(_QWORD *)(a1 + 2168);
  *(_QWORD *)(a1 + 2168) = v818;
  if (v819)
    (*(void (**)(uint64_t))(*(_QWORD *)v819 + 8))(v819);
  v820 = *(_QWORD *)(a2 + 2200);
  *(_QWORD *)(a2 + 2200) = 0;
  v821 = *(_QWORD *)(a1 + 2200);
  *(_QWORD *)(a1 + 2200) = v820;
  if (v821)
    (*(void (**)(uint64_t))(*(_QWORD *)v821 + 8))(v821);
  v822 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  v823 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v822;
  if (v823)
    (*(void (**)(uint64_t))(*(_QWORD *)v823 + 8))(v823);
  v824 = *(_QWORD *)(a2 + 2288);
  *(_QWORD *)(a2 + 2288) = 0;
  v825 = *(_QWORD *)(a1 + 2288);
  *(_QWORD *)(a1 + 2288) = v824;
  if (v825)
    (*(void (**)(uint64_t))(*(_QWORD *)v825 + 8))(v825);
  v826 = *(_QWORD *)(a2 + 2472);
  *(_QWORD *)(a2 + 2472) = 0;
  v827 = *(_QWORD *)(a1 + 2472);
  *(_QWORD *)(a1 + 2472) = v826;
  if (v827)
    (*(void (**)(uint64_t))(*(_QWORD *)v827 + 8))(v827);
  v828 = *(_QWORD *)(a2 + 2496);
  *(_QWORD *)(a2 + 2496) = 0;
  v829 = *(_QWORD *)(a1 + 2496);
  *(_QWORD *)(a1 + 2496) = v828;
  if (v829)
    (*(void (**)(uint64_t))(*(_QWORD *)v829 + 8))(v829);
  v830 = *(_QWORD *)(a2 + 1688);
  *(_QWORD *)(a2 + 1688) = 0;
  v831 = *(_QWORD *)(a1 + 1688);
  *(_QWORD *)(a1 + 1688) = v830;
  if (v831)
    (*(void (**)(uint64_t))(*(_QWORD *)v831 + 8))(v831);
  v832 = *(_QWORD *)(a2 + 2504);
  *(_QWORD *)(a2 + 2504) = 0;
  v833 = *(_QWORD *)(a1 + 2504);
  *(_QWORD *)(a1 + 2504) = v832;
  if (v833)
    (*(void (**)(uint64_t))(*(_QWORD *)v833 + 8))(v833);
  v834 = *(_QWORD *)(a2 + 2480);
  *(_QWORD *)(a2 + 2480) = 0;
  v835 = *(_QWORD *)(a1 + 2480);
  *(_QWORD *)(a1 + 2480) = v834;
  if (v835)
    (*(void (**)(uint64_t))(*(_QWORD *)v835 + 8))(v835);
  v836 = *(_QWORD *)(a2 + 2216);
  *(_QWORD *)(a2 + 2216) = 0;
  v837 = *(_QWORD *)(a1 + 2216);
  *(_QWORD *)(a1 + 2216) = v836;
  if (v837)
    (*(void (**)(uint64_t))(*(_QWORD *)v837 + 8))(v837);
  v838 = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a2 + 576) = 0;
  v839 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v838;
  if (v839)
    (*(void (**)(uint64_t))(*(_QWORD *)v839 + 8))(v839);
  v840 = *(_QWORD *)(a2 + 2208);
  *(_QWORD *)(a2 + 2208) = 0;
  v841 = *(_QWORD *)(a1 + 2208);
  *(_QWORD *)(a1 + 2208) = v840;
  if (v841)
    (*(void (**)(uint64_t))(*(_QWORD *)v841 + 8))(v841);
  v842 = *(_QWORD *)(a2 + 2344);
  *(_QWORD *)(a2 + 2344) = 0;
  v843 = *(_QWORD *)(a1 + 2344);
  *(_QWORD *)(a1 + 2344) = v842;
  if (v843)
    (*(void (**)(uint64_t))(*(_QWORD *)v843 + 8))(v843);
  v844 = *(_QWORD *)(a2 + 1928);
  *(_QWORD *)(a2 + 1928) = 0;
  v845 = *(_QWORD *)(a1 + 1928);
  *(_QWORD *)(a1 + 1928) = v844;
  if (v845)
    (*(void (**)(uint64_t))(*(_QWORD *)v845 + 8))(v845);
  v846 = *(_QWORD *)(a2 + 1504);
  *(_QWORD *)(a2 + 1504) = 0;
  v847 = *(_QWORD *)(a1 + 1504);
  *(_QWORD *)(a1 + 1504) = v846;
  if (v847)
    (*(void (**)(uint64_t))(*(_QWORD *)v847 + 8))(v847);
  v848 = *(_QWORD *)(a2 + 1512);
  *(_QWORD *)(a2 + 1512) = 0;
  v849 = *(_QWORD *)(a1 + 1512);
  *(_QWORD *)(a1 + 1512) = v848;
  if (v849)
    (*(void (**)(uint64_t))(*(_QWORD *)v849 + 8))(v849);
  v850 = *(_QWORD *)(a2 + 2488);
  *(_QWORD *)(a2 + 2488) = 0;
  v851 = *(_QWORD *)(a1 + 2488);
  *(_QWORD *)(a1 + 2488) = v850;
  if (v851)
    (*(void (**)(uint64_t))(*(_QWORD *)v851 + 8))(v851);
  v852 = *(_QWORD *)(a2 + 2192);
  *(_QWORD *)(a2 + 2192) = 0;
  v853 = *(_QWORD *)(a1 + 2192);
  *(_QWORD *)(a1 + 2192) = v852;
  if (v853)
    (*(void (**)(uint64_t))(*(_QWORD *)v853 + 8))(v853);
  v854 = *(_QWORD *)(a2 + 2184);
  *(_QWORD *)(a2 + 2184) = 0;
  v855 = *(_QWORD *)(a1 + 2184);
  *(_QWORD *)(a1 + 2184) = v854;
  if (v855)
    (*(void (**)(uint64_t))(*(_QWORD *)v855 + 8))(v855);
  v856 = *(_QWORD *)(a2 + 1616);
  *(_QWORD *)(a2 + 1616) = 0;
  v857 = *(_QWORD *)(a1 + 1616);
  *(_QWORD *)(a1 + 1616) = v856;
  if (v857)
    (*(void (**)(uint64_t))(*(_QWORD *)v857 + 8))(v857);
  v858 = *(_QWORD *)(a2 + 1608);
  *(_QWORD *)(a2 + 1608) = 0;
  v859 = *(_QWORD *)(a1 + 1608);
  *(_QWORD *)(a1 + 1608) = v858;
  if (v859)
    (*(void (**)(uint64_t))(*(_QWORD *)v859 + 8))(v859);
  v860 = *(_QWORD *)(a2 + 2512);
  *(_QWORD *)(a2 + 2512) = 0;
  v861 = *(_QWORD *)(a1 + 2512);
  *(_QWORD *)(a1 + 2512) = v860;
  if (v861)
    (*(void (**)(uint64_t))(*(_QWORD *)v861 + 8))(v861);
  v862 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;
  v863 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v862;
  if (v863)
    (*(void (**)(uint64_t))(*(_QWORD *)v863 + 8))(v863);
  v864 = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(a2 + 904) = 0;
  v865 = *(_QWORD *)(a1 + 904);
  *(_QWORD *)(a1 + 904) = v864;
  if (v865)
    (*(void (**)(uint64_t))(*(_QWORD *)v865 + 8))(v865);
  v866 = *(_QWORD *)(a2 + 2360);
  *(_QWORD *)(a2 + 2360) = 0;
  v867 = *(_QWORD *)(a1 + 2360);
  *(_QWORD *)(a1 + 2360) = v866;
  if (v867)
    (*(void (**)(uint64_t))(*(_QWORD *)v867 + 8))(v867);
  v868 = *(_QWORD *)(a2 + 2384);
  *(_QWORD *)(a2 + 2384) = 0;
  v869 = *(_QWORD *)(a1 + 2384);
  *(_QWORD *)(a1 + 2384) = v868;
  if (v869)
    (*(void (**)(uint64_t))(*(_QWORD *)v869 + 8))(v869);
  v870 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  v871 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v870;
  if (v871)
    (*(void (**)(uint64_t))(*(_QWORD *)v871 + 8))(v871);
  v872 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;
  v873 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v872;
  if (v873)
    (*(void (**)(uint64_t))(*(_QWORD *)v873 + 8))(v873);
  v874 = *(_QWORD *)(a2 + 2816);
  *(_QWORD *)(a2 + 2816) = 0;
  v875 = *(_QWORD *)(a1 + 2816);
  *(_QWORD *)(a1 + 2816) = v874;
  if (v875)
    (*(void (**)(uint64_t))(*(_QWORD *)v875 + 8))(v875);
  v876 = *(_QWORD *)(a2 + 2808);
  *(_QWORD *)(a2 + 2808) = 0;
  v877 = *(_QWORD *)(a1 + 2808);
  *(_QWORD *)(a1 + 2808) = v876;
  if (v877)
    (*(void (**)(uint64_t))(*(_QWORD *)v877 + 8))(v877);
  v878 = *(_QWORD *)(a2 + 2624);
  *(_QWORD *)(a2 + 2624) = 0;
  v879 = *(_QWORD *)(a1 + 2624);
  *(_QWORD *)(a1 + 2624) = v878;
  if (v879)
    (*(void (**)(uint64_t))(*(_QWORD *)v879 + 8))(v879);
  v880 = *(_QWORD *)(a2 + 2632);
  *(_QWORD *)(a2 + 2632) = 0;
  v881 = *(_QWORD *)(a1 + 2632);
  *(_QWORD *)(a1 + 2632) = v880;
  if (v881)
    (*(void (**)(uint64_t))(*(_QWORD *)v881 + 8))(v881);
  v882 = *(_QWORD *)(a2 + 2648);
  *(_QWORD *)(a2 + 2648) = 0;
  v883 = *(_QWORD *)(a1 + 2648);
  *(_QWORD *)(a1 + 2648) = v882;
  if (v883)
    (*(void (**)(uint64_t))(*(_QWORD *)v883 + 8))(v883);
  v884 = *(_QWORD *)(a2 + 1288);
  *(_QWORD *)(a2 + 1288) = 0;
  v885 = *(_QWORD *)(a1 + 1288);
  *(_QWORD *)(a1 + 1288) = v884;
  if (v885)
    (*(void (**)(uint64_t))(*(_QWORD *)v885 + 8))(v885);
  v886 = *(_QWORD *)(a2 + 2640);
  *(_QWORD *)(a2 + 2640) = 0;
  v887 = *(_QWORD *)(a1 + 2640);
  *(_QWORD *)(a1 + 2640) = v886;
  if (v887)
    (*(void (**)(uint64_t))(*(_QWORD *)v887 + 8))(v887);
  v888 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  v889 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v888;
  if (v889)
    (*(void (**)(uint64_t))(*(_QWORD *)v889 + 8))(v889);
  v890 = *(_QWORD *)(a2 + 1480);
  *(_QWORD *)(a2 + 1480) = 0;
  v891 = *(_QWORD *)(a1 + 1480);
  *(_QWORD *)(a1 + 1480) = v890;
  if (v891)
    (*(void (**)(uint64_t))(*(_QWORD *)v891 + 8))(v891);
  v892 = *(_QWORD *)(a2 + 1488);
  *(_QWORD *)(a2 + 1488) = 0;
  v893 = *(_QWORD *)(a1 + 1488);
  *(_QWORD *)(a1 + 1488) = v892;
  if (v893)
    (*(void (**)(uint64_t))(*(_QWORD *)v893 + 8))(v893);
  v894 = *(_QWORD *)(a2 + 1496);
  *(_QWORD *)(a2 + 1496) = 0;
  v895 = *(_QWORD *)(a1 + 1496);
  *(_QWORD *)(a1 + 1496) = v894;
  if (v895)
    (*(void (**)(uint64_t))(*(_QWORD *)v895 + 8))(v895);
  v896 = *(_QWORD *)(a2 + 2824);
  *(_QWORD *)(a2 + 2824) = 0;
  v897 = *(_QWORD *)(a1 + 2824);
  *(_QWORD *)(a1 + 2824) = v896;
  if (v897)
    (*(void (**)(uint64_t))(*(_QWORD *)v897 + 8))(v897);
  v898 = *(_QWORD *)(a2 + 2832);
  *(_QWORD *)(a2 + 2832) = 0;
  v899 = *(_QWORD *)(a1 + 2832);
  *(_QWORD *)(a1 + 2832) = v898;
  if (v899)
    (*(void (**)(uint64_t))(*(_QWORD *)v899 + 8))(v899);
  v900 = *(_QWORD *)(a2 + 2944);
  *(_QWORD *)(a2 + 2944) = 0;
  v901 = *(_QWORD *)(a1 + 2944);
  *(_QWORD *)(a1 + 2944) = v900;
  if (v901)
    (*(void (**)(uint64_t))(*(_QWORD *)v901 + 8))(v901);
  v902 = *(_QWORD *)(a2 + 2952);
  *(_QWORD *)(a2 + 2952) = 0;
  v903 = *(_QWORD *)(a1 + 2952);
  *(_QWORD *)(a1 + 2952) = v902;
  if (v903)
    (*(void (**)(uint64_t))(*(_QWORD *)v903 + 8))(v903);
  v904 = *(_QWORD *)(a2 + 1432);
  *(_QWORD *)(a2 + 1432) = 0;
  v905 = *(_QWORD *)(a1 + 1432);
  *(_QWORD *)(a1 + 1432) = v904;
  if (v905)
    (*(void (**)(uint64_t))(*(_QWORD *)v905 + 8))(v905);
  return a1;
}

CMMsl *CMMsl::Item::operator=(CMMsl *a1, uint64_t a2)
{
  CMMsl::Item *v3;
  _BYTE v5[3624];

  if (a1 != (CMMsl *)a2)
  {
    CMMsl::Item::Item((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Item *)v5, v3);
    CMMsl::Item::~Item((CMMsl::Item *)v5);
  }
  return a1;
}

uint64_t CMMsl::Item::formatText(CMMsl::Item *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "aPSleep");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "aPWake");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "accel");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "accel800");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "accelBatch");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "accelGesture");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "accelGps");
  v12 = *((_QWORD *)this + 8);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, a2, "accelOscarEmu");
  v13 = *((_QWORD *)this + 9);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, a2, "accelTNBFrame");
  v14 = *((_QWORD *)this + 10);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "accelerometerPace");
  v15 = *((_QWORD *)this + 11);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "accessoryAccel");
  v16 = *((_QWORD *)this + 12);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, a2, "accessoryAccelConfig");
  v17 = *((_QWORD *)this + 13);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "accessoryActivityAsleepConfidenceEpoch");
  v18 = *((_QWORD *)this + 14);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, a2, "accessoryActivityStateUpdate");
  v19 = *((_QWORD *)this + 15);
  if (v19)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v19 + 32))(v19, a2, "accessoryConfig");
  v20 = *((_QWORD *)this + 16);
  if (v20)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, a2, "accessoryDeviceMotion");
  v21 = *((_QWORD *)this + 17);
  if (v21)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v21 + 32))(v21, a2, "accessoryDeviceMotionConfig");
  v22 = *((_QWORD *)this + 18);
  if (v22)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v22 + 32))(v22, a2, "accessoryGyro");
  v23 = *((_QWORD *)this + 19);
  if (v23)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v23 + 32))(v23, a2, "accessoryGyroCachedBias");
  v24 = *((_QWORD *)this + 20);
  if (v24)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v24 + 32))(v24, a2, "accessoryGyroConfig");
  v25 = *((_QWORD *)this + 21);
  if (v25)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v25 + 32))(v25, a2, "accessoryGyroGYTT");
  v26 = *((_QWORD *)this + 22);
  if (v26)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v26 + 32))(v26, a2, "accessoryHeartRate");
  v27 = *((_QWORD *)this + 23);
  if (v27)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v27 + 32))(v27, a2, "accessoryInEarStatus");
  v28 = *((_QWORD *)this + 24);
  if (v28)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v28 + 32))(v28, a2, "accessoryMagnetometer");
  v29 = *((_QWORD *)this + 25);
  if (v29)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v29 + 32))(v29, a2, "accessoryMagnetometerConfig");
  v30 = *((_QWORD *)this + 26);
  if (v30)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v30 + 32))(v30, a2, "accessoryPPG");
  v31 = *((_QWORD *)this + 27);
  if (v31)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v31 + 32))(v31, a2, "accessoryProx");
  v32 = *((_QWORD *)this + 28);
  if (v32)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v32 + 32))(v32, a2, "accessoryProxSensorDrop");
  v33 = *((_QWORD *)this + 29);
  if (v33)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v33 + 32))(v33, a2, "accessoryProxTempComp");
  v34 = *((_QWORD *)this + 30);
  if (v34)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v34 + 32))(v34, a2, "accessoryProximityConfig");
  v35 = *((_QWORD *)this + 31);
  if (v35)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v35 + 32))(v35, a2, "accessorySleepStateConfidenceEpoch");
  v36 = *((_QWORD *)this + 32);
  if (v36)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v36 + 32))(v36, a2, "accessorySleepStateUpdate");
  v37 = *((_QWORD *)this + 33);
  if (v37)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v37 + 32))(v37, a2, "accessoryStepDetectorDebug");
  v38 = *((_QWORD *)this + 34);
  if (v38)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v38 + 32))(v38, a2, "accessoryWake");
  v39 = *((_QWORD *)this + 35);
  if (v39)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v39 + 32))(v39, a2, "accessoryWakeDebug");
  v40 = *((_QWORD *)this + 36);
  if (v40)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v40 + 32))(v40, a2, "airpodEvent");
  v41 = *((_QWORD *)this + 37);
  if (v41)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v41 + 32))(v41, a2, "alsData");
  v42 = *((_QWORD *)this + 38);
  if (v42)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v42 + 32))(v42, a2, "alsPhone");
  v43 = *((_QWORD *)this + 39);
  if (v43)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v43 + 32))(v43, a2, "altimeter");
  v44 = *((_QWORD *)this + 40);
  if (v44)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v44 + 32))(v44, a2, "altimeterKF");
  v45 = *((_QWORD *)this + 41);
  if (v45)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v45 + 32))(v45, a2, "anchorCorrection");
  v46 = *((_QWORD *)this + 42);
  if (v46)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v46 + 32))(v46, a2, "anchorMotionCorrespondence");
  v47 = *((_QWORD *)this + 43);
  if (v47)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v47 + 32))(v47, a2, "appleCV3DSLAMState");
  v48 = *((_QWORD *)this + 44);
  if (v48)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v48 + 32))(v48, a2, "arSessionState");
  v49 = *((_QWORD *)this + 45);
  if (v49)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v49 + 32))(v49, a2, "arkitWorldPose");
  v50 = *((_QWORD *)this + 46);
  if (v50)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v50 + 32))(v50, a2, "audioAccessoryDeviceMotion");
  v51 = *((_QWORD *)this + 47);
  if (v51)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v51 + 32))(v51, a2, "auxiliaryDeviceMotion");
  v52 = *((_QWORD *)this + 48);
  if (v52)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v52 + 32))(v52, a2, "averagedALSData");
  v53 = *((_QWORD *)this + 49);
  if (v53)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v53 + 32))(v53, a2, "bTConnection");
  v54 = *((_QWORD *)this + 50);
  if (v54)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v54 + 32))(v54, a2, "backlightState");
  v55 = *((_QWORD *)this + 51);
  if (v55)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v55 + 32))(v55, a2, "basebandCompassCoex");
  v56 = *((_QWORD *)this + 52);
  if (v56)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v56 + 32))(v56, a2, "basebandCompassCoexConstraints");
  v57 = *((_QWORD *)this + 53);
  if (v57)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v57 + 32))(v57, a2, "basebandSpeed");
  v58 = *((_QWORD *)this + 54);
  if (v58)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v58 + 32))(v58, a2, "baselineResetCheck");
  v59 = *((_QWORD *)this + 55);
  if (v59)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v59 + 32))(v59, a2, "batchedLocationFromOdometer");
  v60 = *((_QWORD *)this + 56);
  if (v60)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v60 + 32))(v60, a2, "batterySaverModeStatus");
  v61 = *((_QWORD *)this + 57);
  if (v61)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v61 + 32))(v61, a2, "batteryStatus");
  v62 = *((_QWORD *)this + 58);
  if (v62)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v62 + 32))(v62, a2, "bioMotionAnchorPose");
  v63 = *((_QWORD *)this + 59);
  if (v63)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v63 + 32))(v63, a2, "bioMotionClassification");
  v64 = *((_QWORD *)this + 60);
  if (v64)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v64 + 32))(v64, a2, "bioMotionLinkLengthFitParameters");
  v65 = *((_QWORD *)this + 61);
  if (v65)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v65 + 32))(v65, a2, "bioMotionOnlineLinkLengthUpdate");
  v66 = *((_QWORD *)this + 62);
  if (v66)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v66 + 32))(v66, a2, "bioMotionPose");
  v67 = *((_QWORD *)this + 63);
  if (v67)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v67 + 32))(v67, a2, "bioMotionPredictedPose");
  v68 = *((_QWORD *)this + 64);
  if (v68)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v68 + 32))(v68, a2, "bioMotionPropagatedAnchor");
  v69 = *((_QWORD *)this + 65);
  if (v69)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v69 + 32))(v69, a2, "bleedToZeroCorrection");
  v70 = *((_QWORD *)this + 66);
  if (v70)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v70 + 32))(v70, a2, "bodyMetrics");
  v71 = *((_QWORD *)this + 67);
  if (v71)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v71 + 32))(v71, a2, "braveHeartAccel");
  v72 = *((_QWORD *)this + 68);
  if (v72)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v72 + 32))(v72, a2, "braveHeartDeviceMotion");
  v73 = *((_QWORD *)this + 69);
  if (v73)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v73 + 32))(v73, a2, "braveHeartNatalieData");
  v74 = *((_QWORD *)this + 70);
  if (v74)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v74 + 32))(v74, a2, "braveHeartVO2MaxInput");
  v75 = *((_QWORD *)this + 71);
  if (v75)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v75 + 32))(v75, a2, "braveHeartWorkoutEvent");
  v76 = *((_QWORD *)this + 72);
  if (v76)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v76 + 32))(v76, a2, "bumpToWakeState");
  v77 = *((_QWORD *)this + 73);
  if (v77)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v77 + 32))(v77, a2, "cV3DPredictedPose");
  v78 = *((_QWORD *)this + 74);
  if (v78)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v78 + 32))(v78, a2, "calorimetryMETsConsumed");
  v79 = *((_QWORD *)this + 75);
  if (v79)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v79 + 32))(v79, a2, "calorimetryPauseEvent");
  v80 = *((_QWORD *)this + 76);
  if (v80)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v80 + 32))(v80, a2, "catherineHealthKitData");
  if ((*((_BYTE *)this + 3616) & 1) != 0)
    PB::TextFormatter::format(a2, "cftime", *((double *)this + 77));
  v81 = *((_QWORD *)this + 78);
  if (v81)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v81 + 32))(v81, a2, "clefCalibration");
  v82 = *((_QWORD *)this + 79);
  if (v82)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v82 + 32))(v82, a2, "coarseElevationChange");
  v83 = *((_QWORD *)this + 80);
  if (v83)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v83 + 32))(v83, a2, "compass");
  v84 = *((_QWORD *)this + 81);
  if (v84)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v84 + 32))(v84, a2, "compassAlignment");
  v85 = *((_QWORD *)this + 82);
  if (v85)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v85 + 32))(v85, a2, "compassCalibration");
  v86 = *((_QWORD *)this + 83);
  if (v86)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v86 + 32))(v86, a2, "compassCalibrationAttempt");
  v87 = *((_QWORD *)this + 84);
  if (v87)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v87 + 32))(v87, a2, "compassConstraints");
  v88 = *((_QWORD *)this + 85);
  if (v88)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v88 + 32))(v88, a2, "compassCorrection");
  v89 = *((_QWORD *)this + 86);
  if (v89)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v89 + 32))(v89, a2, "complexHandMotion");
  v90 = *((_QWORD *)this + 87);
  if (v90)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v90 + 32))(v90, a2, "constrainedIntegratorModelPredictedPose");
  v91 = *((_QWORD *)this + 88);
  if (v91)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v91 + 32))(v91, a2, "constrainedIntegratorPose");
  v92 = *((_QWORD *)this + 89);
  if (v92)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v92 + 32))(v92, a2, "coprocessorReplyGaitMetrics");
  v93 = *((_QWORD *)this + 90);
  if (v93)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v93 + 32))(v93, a2, "courseConstraints");
  v94 = *((_QWORD *)this + 91);
  if (v94)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v94 + 32))(v94, a2, "courseCorrection");
  v95 = *((_QWORD *)this + 92);
  if (v95)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v95 + 32))(v95, a2, "cvWatchCalories");
  v96 = *((_QWORD *)this + 93);
  if (v96)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v96 + 32))(v96, a2, "deviceMotion");
  v97 = *((_QWORD *)this + 94);
  if (v97)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v97 + 32))(v97, a2, "deviceMotionAlwaysOn");
  v98 = *((_QWORD *)this + 95);
  if (v98)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v98 + 32))(v98, a2, "deviceMotionCovariance");
  v99 = *((_QWORD *)this + 96);
  if (v99)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v99 + 32))(v99, a2, "directionOfTravelMetrics");
  v100 = *((_QWORD *)this + 97);
  if (v100)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v100 + 32))(v100, a2, "displacingState");
  v101 = *((_QWORD *)this + 98);
  if (v101)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v101 + 32))(v101, a2, "displayStatus");
  v102 = *((_QWORD *)this + 99);
  if (v102)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v102 + 32))(v102, a2, "dopplerDebugRecord");
  v103 = *((_QWORD *)this + 100);
  if (v103)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v103 + 32))(v103, a2, "dopplerProximityEvent");
  v104 = *((_QWORD *)this + 101);
  if (v104)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v104 + 32))(v104, a2, "dopplerRawDataInput");
  v105 = *((_QWORD *)this + 102);
  if (v105)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v105 + 32))(v105, a2, "dopplerSample");
  v106 = *((_QWORD *)this + 103);
  if (v106)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v106 + 32))(v106, a2, "dotEstimatorHandSwing");
  v107 = *((_QWORD *)this + 104);
  if (v107)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v107 + 32))(v107, a2, "dotEstimatorWithTNB");
  v108 = *((_QWORD *)this + 105);
  if (v108)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v108 + 32))(v108, a2, "doubleTap");
  v109 = *((_QWORD *)this + 106);
  if (v109)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v109 + 32))(v109, a2, "elevationChange");
  v110 = *((_QWORD *)this + 107);
  if (v110)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v110 + 32))(v110, a2, "elevationGradeEstimator");
  v111 = *((_QWORD *)this + 108);
  if (v111)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v111 + 32))(v111, a2, "elevationThreshold");
  v112 = *((_QWORD *)this + 109);
  if (v112)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v112 + 32))(v112, a2, "emergencyState");
  v113 = *((_QWORD *)this + 110);
  if (v113)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v113 + 32))(v113, a2, "enhancedDeviceMotion");
  v114 = *((_QWORD *)this + 111);
  if (v114)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v114 + 32))(v114, a2, "faceBlendShapeCoefficientsSample");
  v115 = *((_QWORD *)this + 112);
  if (v115)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v115 + 32))(v115, a2, "faceCovered");
  v116 = *((_QWORD *)this + 113);
  if (v116)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v116 + 32))(v116, a2, "faceDownDetection");
  v117 = *((_QWORD *)this + 114);
  if (v117)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v117 + 32))(v117, a2, "facePose");
  v118 = *((_QWORD *)this + 115);
  if (v118)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v118 + 32))(v118, a2, "facePoseSynchronized");
  v119 = *((_QWORD *)this + 116);
  if (v119)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v119 + 32))(v119, a2, "fallDetectionActivityClassifierReplay");
  v120 = *((_QWORD *)this + 117);
  if (v120)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v120 + 32))(v120, a2, "fallDetectionDetector");
  v121 = *((_QWORD *)this + 118);
  if (v121)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v121 + 32))(v121, a2, "fallDetectionGyroControllerReplay");
  v122 = *((_QWORD *)this + 119);
  if (v122)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v122 + 32))(v122, a2, "fallDetectionReferee");
  v123 = *((_QWORD *)this + 120);
  if (v123)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v123 + 32))(v123, a2, "fallDetectionReplay");
  v124 = *((_QWORD *)this + 121);
  if (v124)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v124 + 32))(v124, a2, "fallDetectionStateMachine");
  v125 = *((_QWORD *)this + 122);
  if (v125)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v125 + 32))(v125, a2, "fallDetectionWristStateReplay");
  v126 = *((_QWORD *)this + 123);
  if (v126)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v126 + 32))(v126, a2, "fallDistanceReplay");
  v127 = *((_QWORD *)this + 124);
  if (v127)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v127 + 32))(v127, a2, "fallFalsePositiveSuppressionFeatures");
  v128 = *((_QWORD *)this + 125);
  if (v128)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v128 + 32))(v128, a2, "fallSnippet");
  v129 = *((_QWORD *)this + 126);
  if (v129)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v129 + 32))(v129, a2, "fallStats");
  v130 = *((_QWORD *)this + 127);
  if (v130)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v130 + 32))(v130, a2, "firstStepFeatures");
  v131 = *((_QWORD *)this + 128);
  if (v131)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v131 + 32))(v131, a2, "fitnessMachineData");
  v132 = *((_QWORD *)this + 129);
  if (v132)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v132 + 32))(v132, a2, "fitnessMachineSample");
  v133 = *((_QWORD *)this + 130);
  if (v133)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v133 + 32))(v133, a2, "focusModes");
  v134 = *((_QWORD *)this + 131);
  if (v134)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v134 + 32))(v134, a2, "frequencyResponse");
  v135 = *((_QWORD *)this + 132);
  if (v135)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v135 + 32))(v135, a2, "fusedBioMotionClassification");
  v136 = *((_QWORD *)this + 133);
  if (v136)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v136 + 32))(v136, a2, "gaitCycleSegment");
  v137 = *((_QWORD *)this + 134);
  if (v137)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v137 + 32))(v137, a2, "gaitCycleSegmentationState");
  v138 = *((_QWORD *)this + 135);
  if (v138)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v138 + 32))(v138, a2, "gaitEventsHKResult");
  v139 = *((_QWORD *)this + 136);
  if (v139)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v139 + 32))(v139, a2, "gaitEventsModelOutput");
  v140 = *((_QWORD *)this + 137);
  if (v140)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v140 + 32))(v140, a2, "gaitEventsStrideAggregation");
  v141 = *((_QWORD *)this + 138);
  if (v141)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v141 + 32))(v141, a2, "geomagneticData");
  v142 = *((_QWORD *)this + 139);
  if (v142)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v142 + 32))(v142, a2, "gnssAvailabilityPredictorData");
  v143 = *((_QWORD *)this + 140);
  if (v143)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v143 + 32))(v143, a2, "gnssLeechLocationData");
  v144 = *((_QWORD *)this + 141);
  if (v144)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v144 + 32))(v144, a2, "gravityConstraints");
  v145 = *((_QWORD *)this + 142);
  if (v145)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v145 + 32))(v145, a2, "gravityCorrection");
  v146 = *((_QWORD *)this + 143);
  if (v146)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v146 + 32))(v146, a2, "gyro");
  v147 = *((_QWORD *)this + 144);
  if (v147)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v147 + 32))(v147, a2, "gyroBiasAndVariance");
  v148 = *((_QWORD *)this + 145);
  if (v148)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v148 + 32))(v148, a2, "gyroBiasConstraints");
  v149 = *((_QWORD *)this + 146);
  if (v149)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v149 + 32))(v149, a2, "gyroBiasCorrection");
  v150 = *((_QWORD *)this + 147);
  if (v150)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v150 + 32))(v150, a2, "gyroBiasEstimateError");
  v151 = *((_QWORD *)this + 148);
  if (v151)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v151 + 32))(v151, a2, "gyroBiasFit");
  v152 = *((_QWORD *)this + 149);
  if (v152)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v152 + 32))(v152, a2, "gyroCalibrationDataFactory");
  v153 = *((_QWORD *)this + 150);
  if (v153)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v153 + 32))(v153, a2, "gyroCalibrationDataNonlinearNonFactory");
  v154 = *((_QWORD *)this + 151);
  if (v154)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v154 + 32))(v154, a2, "gyroCalibrationSample");
  v155 = *((_QWORD *)this + 152);
  if (v155)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v155 + 32))(v155, a2, "gyroCalibrationSampleNonlinear");
  v156 = *((_QWORD *)this + 153);
  if (v156)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v156 + 32))(v156, a2, "gyroCompass");
  v157 = *((_QWORD *)this + 154);
  if (v157)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v157 + 32))(v157, a2, "gyroDt");
  v158 = *((_QWORD *)this + 155);
  if (v158)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v158 + 32))(v158, a2, "gyroFactoryCalibrationData");
  v159 = *((_QWORD *)this + 156);
  if (v159)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v159 + 32))(v159, a2, "gyroGps");
  v160 = *((_QWORD *)this + 157);
  if (v160)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v160 + 32))(v160, a2, "gyroOscarEmu");
  v161 = *((_QWORD *)this + 158);
  if (v161)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v161 + 32))(v161, a2, "gyroTemperature");
  v162 = *((_QWORD *)this + 159);
  if (v162)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v162 + 32))(v162, a2, "hapticModuleState");
  v163 = *((_QWORD *)this + 160);
  if (v163)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v163 + 32))(v163, a2, "harmonicMetrics");
  v164 = *((_QWORD *)this + 161);
  if (v164)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v164 + 32))(v164, a2, "headToHeadsetAttitudeEstimatorMeasurementUpdate");
  v165 = *((_QWORD *)this + 162);
  if (v165)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v165 + 32))(v165, a2, "headToHeadsetTransformationEstimate");
  v166 = *((_QWORD *)this + 163);
  if (v166)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v166 + 32))(v166, a2, "headTrackingBehaviorUpdate");
  v167 = *((_QWORD *)this + 164);
  if (v167)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v167 + 32))(v167, a2, "headTrackingClientModeUpdate");
  v168 = *((_QWORD *)this + 165);
  if (v168)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v168 + 32))(v168, a2, "heartRateReference");
  v169 = *((_QWORD *)this + 166);
  if (v169)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v169 + 32))(v169, a2, "hgAccel");
  v170 = *((_QWORD *)this + 167);
  if (v170)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v170 + 32))(v170, a2, "hidShower");
  v171 = *((_QWORD *)this + 168);
  if (v171)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v171 + 32))(v171, a2, "inEarAdditionalState");
  v172 = *((_QWORD *)this + 169);
  if (v172)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v172 + 32))(v172, a2, "inEarBaseline");
  v173 = *((_QWORD *)this + 170);
  if (v173)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v173 + 32))(v173, a2, "inEarBaselining");
  v174 = *((_QWORD *)this + 171);
  if (v174)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v174 + 32))(v174, a2, "inEarConstraints");
  v175 = *((_QWORD *)this + 172);
  if (v175)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v175 + 32))(v175, a2, "inEarOpenLid");
  v176 = *((_QWORD *)this + 173);
  if (v176)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v176 + 32))(v176, a2, "inEarOptical");
  v177 = *((_QWORD *)this + 174);
  if (v177)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v177 + 32))(v177, a2, "inEarSession");
  v178 = *((_QWORD *)this + 175);
  if (v178)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v178 + 32))(v178, a2, "inEarTransition");
  v179 = *((_QWORD *)this + 176);
  if (v179)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v179 + 32))(v179, a2, "inEarTransitionEntry");
  v180 = *((_QWORD *)this + 177);
  if (v180)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v180 + 32))(v180, a2, "inertialOdometry");
  v181 = *((_QWORD *)this + 178);
  if (v181)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v181 + 32))(v181, a2, "initialHistoricalMeanSeaLevelPressure");
  v182 = *((_QWORD *)this + 179);
  if (v182)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v182 + 32))(v182, a2, "interpolatedAccessoryAccel");
  v183 = *((_QWORD *)this + 180);
  if (v183)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v183 + 32))(v183, a2, "intersiloNSCodingData");
  v184 = *((_QWORD *)this + 181);
  if (v184)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v184 + 32))(v184, a2, "ispPacket");
  v185 = *((_QWORD *)this + 182);
  if (v185)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v185 + 32))(v185, a2, "jitterBufferLevel");
  v186 = *((_QWORD *)this + 183);
  if (v186)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v186 + 32))(v186, a2, "jointLinkModelPose");
  v187 = *((_QWORD *)this + 184);
  if (v187)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v187 + 32))(v187, a2, "jointLinkModelPredictedPose");
  v188 = *((_QWORD *)this + 185);
  if (v188)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v188 + 32))(v188, a2, "kData1");
  v189 = *((_QWORD *)this + 186);
  if (v189)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v189 + 32))(v189, a2, "kData2");
  v190 = *((_QWORD *)this + 187);
  if (v190)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v190 + 32))(v190, a2, "kData3");
  v191 = *((_QWORD *)this + 188);
  if (v191)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v191 + 32))(v191, a2, "kappaActivityPhone");
  v192 = *((_QWORD *)this + 189);
  if (v192)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v192 + 32))(v192, a2, "kappaActivityWatch");
  v193 = *((_QWORD *)this + 190);
  if (v193)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v193 + 32))(v193, a2, "kappaAirbagResult");
  v194 = *((_QWORD *)this + 191);
  if (v194)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v194 + 32))(v194, a2, "kappaAudioResult");
  v195 = *((_QWORD *)this + 192);
  if (v195)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v195 + 32))(v195, a2, "kappaBaroResult");
  v196 = *((_QWORD *)this + 193);
  if (v196)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v196 + 32))(v196, a2, "kappaCrashResult");
  v197 = *((_QWORD *)this + 194);
  if (v197)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v197 + 32))(v197, a2, "kappaDirectionOfTravel");
  v198 = *((_QWORD *)this + 195);
  if (v198)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v198 + 32))(v198, a2, "kappaGpsResult");
  v199 = *((_QWORD *)this + 196);
  if (v199)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v199 + 32))(v199, a2, "kappaGravityAutocorrelationResult");
  v200 = *((_QWORD *)this + 197);
  if (v200)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v200 + 32))(v200, a2, "kappaHighSpeedCrashResult");
  v201 = *((_QWORD *)this + 198);
  if (v201)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v201 + 32))(v201, a2, "kappaLackOfMotionResult");
  v202 = *((_QWORD *)this + 199);
  if (v202)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v202 + 32))(v202, a2, "kappaLocalAudioResult");
  v203 = *((_QWORD *)this + 200);
  if (v203)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v203 + 32))(v203, a2, "kappaMildImpactResult");
  v204 = *((_QWORD *)this + 201);
  if (v204)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v204 + 32))(v204, a2, "kappaPeakDetectorMapMagTimestamps");
  v205 = *((_QWORD *)this + 202);
  if (v205)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v205 + 32))(v205, a2, "kappaPeakDetectorMapResult");
  v206 = *((_QWORD *)this + 203);
  if (v206)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v206 + 32))(v206, a2, "kappaPulseDeltaV");
  v207 = *((_QWORD *)this + 204);
  if (v207)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v207 + 32))(v207, a2, "kappaPulseInertialAccel");
  v208 = *((_QWORD *)this + 205);
  if (v208)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v208 + 32))(v208, a2, "kappaPulseInertialHgAccel");
  v209 = *((_QWORD *)this + 206);
  if (v209)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v209 + 32))(v209, a2, "kappaPulseResult");
  v210 = *((_QWORD *)this + 207);
  if (v210)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v210 + 32))(v210, a2, "kappaQuiescenceResult");
  v211 = *((_QWORD *)this + 208);
  if (v211)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v211 + 32))(v211, a2, "kappaRecoveryResult");
  v212 = *((_QWORD *)this + 209);
  if (v212)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v212 + 32))(v212, a2, "kappaRemoteAudioResult");
  v213 = *((_QWORD *)this + 210);
  if (v213)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v213 + 32))(v213, a2, "kappaRoads");
  v214 = *((_QWORD *)this + 211);
  if (v214)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v214 + 32))(v214, a2, "kappaRoadsResult");
  v215 = *((_QWORD *)this + 212);
  if (v215)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v215 + 32))(v215, a2, "kappaRolloverCrashResult");
  v216 = *((_QWORD *)this + 213);
  if (v216)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v216 + 32))(v216, a2, "kappaSevereCrashResult");
  v217 = *((_QWORD *)this + 214);
  if (v217)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v217 + 32))(v217, a2, "kappaSpinResult");
  v218 = *((_QWORD *)this + 215);
  if (v218)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v218 + 32))(v218, a2, "kappaSteps");
  v219 = *((_QWORD *)this + 216);
  if (v219)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v219 + 32))(v219, a2, "kappaStepsResult");
  v220 = *((_QWORD *)this + 217);
  if (v220)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v220 + 32))(v220, a2, "kappaTrigger");
  v221 = *((_QWORD *)this + 218);
  if (v221)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v221 + 32))(v221, a2, "kappaTriggerClustersResult");
  v222 = *((_QWORD *)this + 219);
  if (v222)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v222 + 32))(v222, a2, "kappaTriggerDebug");
  v223 = *((_QWORD *)this + 220);
  if (v223)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v223 + 32))(v223, a2, "kappaZgDetected");
  v224 = *((_QWORD *)this + 221);
  if (v224)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v224 + 32))(v224, a2, "kappaZgResult");
  v225 = *((_QWORD *)this + 222);
  if (v225)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v225 + 32))(v225, a2, "keyboardAttached");
  v226 = *((_QWORD *)this + 223);
  if (v226)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v226 + 32))(v226, a2, "keyboardKeyPress");
  v227 = *((_QWORD *)this + 224);
  if (v227)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v227 + 32))(v227, a2, "keyboardMotionFeatures");
  v228 = *((_QWORD *)this + 225);
  if (v228)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v228 + 32))(v228, a2, "keyboardMotionState");
  v229 = *((_QWORD *)this + 226);
  if (v229)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v229 + 32))(v229, a2, "keyboardMotionTrackpad");
  v230 = *((_QWORD *)this + 227);
  if (v230)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v230 + 32))(v230, a2, "kmVelocityEstimatorState");
  v231 = *((_QWORD *)this + 228);
  if (v231)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v231 + 32))(v231, a2, "legacyALS5CHInput");
  v232 = *((_QWORD *)this + 229);
  if (v232)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v232 + 32))(v232, a2, "liftToWakeFeaturesNeo");
  v233 = *((_QWORD *)this + 230);
  if (v233)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v233 + 32))(v233, a2, "liftToWakeOnHeadStatus");
  v234 = *((_QWORD *)this + 231);
  if (v234)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v234 + 32))(v234, a2, "liftToWakeState");
  v235 = *((_QWORD *)this + 232);
  if (v235)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v235 + 32))(v235, a2, "liftToWakeStatusNeo");
  v236 = *((_QWORD *)this + 233);
  if (v236)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v236 + 32))(v236, a2, "locationOscarEmu");
  v237 = *((_QWORD *)this + 234);
  if (v237)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v237 + 32))(v237, a2, "lockScreenStatus");
  v238 = *((_QWORD *)this + 235);
  if (v238)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v238 + 32))(v238, a2, "lslHeadingEstimation");
  v239 = *((_QWORD *)this + 236);
  if (v239)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v239 + 32))(v239, a2, "mLBasedBioMotionClassification");
  v240 = *((_QWORD *)this + 237);
  if (v240)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v240 + 32))(v240, a2, "magicMountState");
  v241 = *((_QWORD *)this + 238);
  if (v241)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v241 + 32))(v241, a2, "magneticAccessoryType1");
  v242 = *((_QWORD *)this + 239);
  if (v242)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v242 + 32))(v242, a2, "magneticAccessoryType2");
  v243 = *((_QWORD *)this + 240);
  if (v243)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v243 + 32))(v243, a2, "magnetometer");
  v244 = *((_QWORD *)this + 241);
  if (v244)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v244 + 32))(v244, a2, "magnetometerCalibratorFilterParameters");
  v245 = *((_QWORD *)this + 242);
  if (v245)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v245 + 32))(v245, a2, "magnetometerReset");
  v246 = *((_QWORD *)this + 243);
  if (v246)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v246 + 32))(v246, a2, "mapsRouteHintData");
  v247 = *((_QWORD *)this + 244);
  if (v247)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v247 + 32))(v247, a2, "metsInfo");
  v248 = *((_QWORD *)this + 245);
  if (v248)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v248 + 32))(v248, a2, "mobilityBoutMetrics");
  v249 = *((_QWORD *)this + 246);
  if (v249)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v249 + 32))(v249, a2, "mobilitySmoothedGaitMetrics");
  v250 = *((_QWORD *)this + 247);
  if (v250)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v250 + 32))(v250, a2, "modelBasedBioMotionClassification");
  v251 = *((_QWORD *)this + 248);
  if (v251)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v251 + 32))(v251, a2, "motionActivity");
  v252 = *((_QWORD *)this + 249);
  if (v252)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v252 + 32))(v252, a2, "motionActivityReplay");
  v253 = *((_QWORD *)this + 250);
  if (v253)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v253 + 32))(v253, a2, "motionContextActivity");
  v254 = *((_QWORD *)this + 251);
  if (v254)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v254 + 32))(v254, a2, "motionGPSLocation");
  v255 = *((_QWORD *)this + 252);
  if (v255)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v255 + 32))(v255, a2, "motionHint");
  v256 = *((_QWORD *)this + 253);
  if (v256)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v256 + 32))(v256, a2, "motionLocation");
  v257 = *((_QWORD *)this + 254);
  if (v257)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v257 + 32))(v257, a2, "motionLoiAltitudeData");
  v258 = *((_QWORD *)this + 255);
  if (v258)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v258 + 32))(v258, a2, "motionLoiData");
  v259 = *((_QWORD *)this + 256);
  if (v259)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v259 + 32))(v259, a2, "motionStateUpdate");
  v260 = *((_QWORD *)this + 257);
  if (v260)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v260 + 32))(v260, a2, "motionWifiAssociation");
  v261 = *((_QWORD *)this + 258);
  if (v261)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v261 + 32))(v261, a2, "motionWifiLocation");
  v262 = *((_QWORD *)this + 259);
  if (v262)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v262 + 32))(v262, a2, "movementStats");
  v263 = *((_QWORD *)this + 260);
  if (v263)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v263 + 32))(v263, a2, "movementStatsGravityProjection");
  v264 = *((_QWORD *)this + 261);
  if (v264)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v264 + 32))(v264, a2, "movementStatsSignal");
  v265 = *((_QWORD *)this + 262);
  if (v265)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v265 + 32))(v265, a2, "natalieData");
  v266 = *((_QWORD *)this + 263);
  if (v266)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v266 + 32))(v266, a2, "nonlinearBiasFit");
  v267 = *((_QWORD *)this + 264);
  if (v267)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v267 + 32))(v267, a2, "odometer");
  v268 = *((_QWORD *)this + 265);
  if (v268)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v268 + 32))(v268, a2, "odometerWithAltitude");
  v269 = *((_QWORD *)this + 266);
  if (v269)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v269 + 32))(v269, a2, "odtPose");
  v270 = *((_QWORD *)this + 267);
  if (v270)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v270 + 32))(v270, a2, "onsetHeartRateData");
  v271 = *((_QWORD *)this + 268);
  if (v271)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v271 + 32))(v271, a2, "orientation");
  v272 = *((_QWORD *)this + 269);
  if (v272)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v272 + 32))(v272, a2, "pdrAlgType");
  v273 = *((_QWORD *)this + 270);
  if (v273)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v273 + 32))(v273, a2, "pdrDOTEstimatorState");
  v274 = *((_QWORD *)this + 271);
  if (v274)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v274 + 32))(v274, a2, "pdrDOTEstimatorStateArmSwing");
  v275 = *((_QWORD *)this + 272);
  if (v275)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v275 + 32))(v275, a2, "pdrDOTEstimatorStateBody");
  v276 = *((_QWORD *)this + 273);
  if (v276)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v276 + 32))(v276, a2, "pdrDOTEstimatorStateBodyDebug");
  v277 = *((_QWORD *)this + 274);
  if (v277)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v277 + 32))(v277, a2, "pdrDOTEstimatorStateDebug");
  v278 = *((_QWORD *)this + 275);
  if (v278)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v278 + 32))(v278, a2, "pdrDOTEstimatorStateHeading");
  v279 = *((_QWORD *)this + 276);
  if (v279)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v279 + 32))(v279, a2, "pdrDOTEstimatorUncertaintyModelOnBody");
  v280 = *((_QWORD *)this + 277);
  if (v280)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v280 + 32))(v280, a2, "pdrDOTMeasurementSelectorState");
  v281 = *((_QWORD *)this + 278);
  if (v281)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v281 + 32))(v281, a2, "pdrFeatures");
  v282 = *((_QWORD *)this + 279);
  if (v282)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v282 + 32))(v282, a2, "pdrFenceReference");
  v283 = *((_QWORD *)this + 280);
  if (v283)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v283 + 32))(v283, a2, "pdrFenceState");
  v284 = *((_QWORD *)this + 281);
  if (v284)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v284 + 32))(v284, a2, "pdrImpulse");
  v285 = *((_QWORD *)this + 282);
  if (v285)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v285 + 32))(v285, a2, "pdrMLModelOutput");
  v286 = *((_QWORD *)this + 283);
  if (v286)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v286 + 32))(v286, a2, "pdrPedestrianClassifierState");
  v287 = *((_QWORD *)this + 284);
  if (v287)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v287 + 32))(v287, a2, "pdrPlacementClassifierState");
  v288 = *((_QWORD *)this + 285);
  if (v288)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v288 + 32))(v288, a2, "pdrSpeedEstimatorState");
  v289 = *((_QWORD *)this + 286);
  if (v289)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v289 + 32))(v289, a2, "pdrSpeedEstimatorStateDebug");
  v290 = *((_QWORD *)this + 287);
  if (v290)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v290 + 32))(v290, a2, "pdrVelocityEstimatorState");
  v291 = *((_QWORD *)this + 288);
  if (v291)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v291 + 32))(v291, a2, "pearlAttitude");
  v292 = *((_QWORD *)this + 289);
  if (v292)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v292 + 32))(v292, a2, "pedOdomFusionExtendedModeSegment");
  v293 = *((_QWORD *)this + 290);
  if (v293)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v293 + 32))(v293, a2, "pedestrianCalorieModelDebugging");
  v294 = *((_QWORD *)this + 291);
  if (v294)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v294 + 32))(v294, a2, "pedestrianFenceExit");
  v295 = *((_QWORD *)this + 292);
  if (v295)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v295 + 32))(v295, a2, "pedometerPathStraightness");
  v296 = *((_QWORD *)this + 293);
  if (v296)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v296 + 32))(v296, a2, "peerState");
  v297 = *((_QWORD *)this + 294);
  if (v297)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v297 + 32))(v297, a2, "pencilDeviceMotion");
  v298 = *((_QWORD *)this + 295);
  if (v298)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v298 + 32))(v298, a2, "pencilFusionDMYawAlignmentUpdate");
  v299 = *((_QWORD *)this + 296);
  if (v299)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v299 + 32))(v299, a2, "pencilFusionReplayResult");
  v300 = *((_QWORD *)this + 297);
  if (v300)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v300 + 32))(v300, a2, "pencilFusionResult");
  v301 = *((_QWORD *)this + 298);
  if (v301)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v301 + 32))(v301, a2, "pencilFusionRingSensorTrustModelUpdate");
  v302 = *((_QWORD *)this + 299);
  if (v302)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v302 + 32))(v302, a2, "pencilTipForce");
  v303 = *((_QWORD *)this + 300);
  if (v303)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v303 + 32))(v303, a2, "pencilTouch");
  v304 = *((_QWORD *)this + 301);
  if (v304)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v304 + 32))(v304, a2, "physicalEffortInput");
  v305 = *((_QWORD *)this + 302);
  if (v305)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v305 + 32))(v305, a2, "physicalEffortSample");
  v306 = *((_QWORD *)this + 303);
  if (v306)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v306 + 32))(v306, a2, "pocketDetectionPacket");
  v307 = *((_QWORD *)this + 304);
  if (v307)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v307 + 32))(v307, a2, "pose");
  v308 = *((_QWORD *)this + 305);
  if (v308)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v308 + 32))(v308, a2, "poseState");
  v309 = *((_QWORD *)this + 306);
  if (v309)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v309 + 32))(v309, a2, "postureJoint");
  v310 = *((_QWORD *)this + 307);
  if (v310)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v310 + 32))(v310, a2, "postureSkeleton");
  v311 = *((_QWORD *)this + 308);
  if (v311)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v311 + 32))(v311, a2, "powerManagementUserActivity");
  v312 = *((_QWORD *)this + 309);
  if (v312)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v312 + 32))(v312, a2, "precisionFindingDOTEstimate");
  v313 = *((_QWORD *)this + 310);
  if (v313)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v313 + 32))(v313, a2, "precisionFindingRangeFilter");
  v314 = *((_QWORD *)this + 311);
  if (v314)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v314 + 32))(v314, a2, "precisionFindingSessionStartStop");
  v315 = *((_QWORD *)this + 312);
  if (v315)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v315 + 32))(v315, a2, "precisionFindingState");
  v316 = *((_QWORD *)this + 313);
  if (v316)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v316 + 32))(v316, a2, "precisionFindingVelocityEstimate");
  v317 = *((_QWORD *)this + 314);
  if (v317)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v317 + 32))(v317, a2, "precisionFindingVerticalState");
  v318 = *((_QWORD *)this + 315);
  if (v318)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v318 + 32))(v318, a2, "predictedRelativeDeviceMotion");
  v319 = *((_QWORD *)this + 316);
  if (v319)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v319 + 32))(v319, a2, "pressure");
  v320 = *((_QWORD *)this + 317);
  if (v320)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v320 + 32))(v320, a2, "pressureCalibration");
  v321 = *((_QWORD *)this + 318);
  if (v321)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v321 + 32))(v321, a2, "pressureCompensated");
  v322 = *((_QWORD *)this + 319);
  if (v322)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v322 + 32))(v322, a2, "pressureFiltered");
  v323 = *((_QWORD *)this + 320);
  if (v323)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v323 + 32))(v323, a2, "pressureFiltered1HzLowPass");
  v324 = *((_QWORD *)this + 321);
  if (v324)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v324 + 32))(v324, a2, "pressureFilteredNoTemperature");
  v325 = *((_QWORD *)this + 322);
  if (v325)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v325 + 32))(v325, a2, "pressureGps");
  v326 = *((_QWORD *)this + 323);
  if (v326)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v326 + 32))(v326, a2, "pressureOscarEmu");
  v327 = *((_QWORD *)this + 324);
  if (v327)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v327 + 32))(v327, a2, "prox");
  v328 = *((_QWORD *)this + 325);
  if (v328)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v328 + 32))(v328, a2, "proxBaselineEstimatorState");
  v329 = *((_QWORD *)this + 326);
  if (v329)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v329 + 32))(v329, a2, "proxCalibration");
  v330 = *((_QWORD *)this + 327);
  if (v330)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v330 + 32))(v330, a2, "proxPDP");
  v331 = *((_QWORD *)this + 328);
  if (v331)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v331 + 32))(v331, a2, "ptsConsumedGNSS");
  v332 = *((_QWORD *)this + 329);
  if (v332)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v332 + 32))(v332, a2, "ptsForwardPropagation");
  v333 = *((_QWORD *)this + 330);
  if (v333)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v333 + 32))(v333, a2, "ptsMapMatchedRoute");
  v334 = *((_QWORD *)this + 331);
  if (v334)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v334 + 32))(v334, a2, "ptsReconstructedRoute");
  v335 = *((_QWORD *)this + 332);
  if (v335)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v335 + 32))(v335, a2, "rawAudio");
  v336 = *((_QWORD *)this + 333);
  if (v336)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v336 + 32))(v336, a2, "relDMInSystemConfig");
  v337 = *((_QWORD *)this + 334);
  if (v337)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v337 + 32))(v337, a2, "relativeDeviceMotionComplexTransition");
  v338 = *((_QWORD *)this + 335);
  if (v338)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v338 + 32))(v338, a2, "relativeDeviceMotionCorrelatedMotion");
  v339 = *((_QWORD *)this + 336);
  if (v339)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v339 + 32))(v339, a2, "relativeDeviceMotionInternal");
  v340 = *((_QWORD *)this + 337);
  if (v340)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v340 + 32))(v340, a2, "relativeGravityConstraints");
  v341 = *((_QWORD *)this + 338);
  if (v341)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v341 + 32))(v341, a2, "relativeGravityCorrection");
  v342 = *((_QWORD *)this + 339);
  if (v342)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v342 + 32))(v342, a2, "rhythmicGnssOperatorStatus");
  v343 = *((_QWORD *)this + 340);
  if (v343)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v343 + 32))(v343, a2, "rotationRate");
  v344 = *((_QWORD *)this + 341);
  if (v344)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v344 + 32))(v344, a2, "runningArmSwingSignals");
  v345 = *((_QWORD *)this + 342);
  if (v345)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v345 + 32))(v345, a2, "runningCentripetalAccelSignals");
  v346 = *((_QWORD *)this + 343);
  if (v346)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v346 + 32))(v346, a2, "runningFormMetrics");
  v347 = *((_QWORD *)this + 344);
  if (v347)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v347 + 32))(v347, a2, "runningPower");
  v348 = *((_QWORD *)this + 345);
  if (v348)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v348 + 32))(v348, a2, "runningRotationAxis");
  v349 = *((_QWORD *)this + 346);
  if (v349)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v349 + 32))(v349, a2, "runningSpeedKFResult");
  v350 = *((_QWORD *)this + 347);
  if (v350)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v350 + 32))(v350, a2, "runningStrideLength");
  v351 = *((_QWORD *)this + 348);
  if (v351)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v351 + 32))(v351, a2, "runningVerticalOscillation");
  v352 = *((_QWORD *)this + 349);
  if (v352)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v352 + 32))(v352, a2, "runningVerticalOscillationGradientBoostedSignals");
  v353 = *((_QWORD *)this + 350);
  if (v353)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v353 + 32))(v353, a2, "runningVerticalOscillationSignals");
  v354 = *((_QWORD *)this + 351);
  if (v354)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v354 + 32))(v354, a2, "safetyCompanionStatus");
  v355 = *((_QWORD *)this + 352);
  if (v355)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v355 + 32))(v355, a2, "safetyHertzSample");
  v356 = *((_QWORD *)this + 353);
  if (v356)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v356 + 32))(v356, a2, "safetyRemoteSample");
  v357 = *((_QWORD *)this + 354);
  if (v357)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v357 + 32))(v357, a2, "safetyTrustedAudioResult");
  v358 = *((_QWORD *)this + 355);
  if (v358)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v358 + 32))(v358, a2, "sessionOverride");
  v359 = *((_QWORD *)this + 356);
  if (v359)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v359 + 32))(v359, a2, "signalEnvironment");
  v360 = *((_QWORD *)this + 357);
  if (v360)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v360 + 32))(v360, a2, "simActivityEvent");
  v361 = *((_QWORD *)this + 358);
  if (v361)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v361 + 32))(v361, a2, "sitStandDetectorFeatures");
  v362 = *((_QWORD *)this + 359);
  if (v362)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v362 + 32))(v362, a2, "sitStandDetectorPosteriorBufferStatsForSitToStand");
  v363 = *((_QWORD *)this + 360);
  if (v363)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v363 + 32))(v363, a2, "sitStandDetectorPosteriorBufferStatsForStandToSit");
  v364 = *((_QWORD *)this + 361);
  if (v364)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v364 + 32))(v364, a2, "sitStandDetectorTransitions");
  v365 = *((_QWORD *)this + 362);
  if (v365)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v365 + 32))(v365, a2, "skeleton2D");
  v366 = *((_QWORD *)this + 363);
  if (v366)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v366 + 32))(v366, a2, "skeleton3D");
  v367 = *((_QWORD *)this + 364);
  if (v367)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v367 + 32))(v367, a2, "skeleton3DLifted");
  v368 = *((_QWORD *)this + 365);
  if (v368)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v368 + 32))(v368, a2, "skeleton3DRetargeted");
  v369 = *((_QWORD *)this + 366);
  if (v369)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v369 + 32))(v369, a2, "spatialEvent");
  v370 = *((_QWORD *)this + 367);
  if (v370)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v370 + 32))(v370, a2, "spl");
  v371 = *((_QWORD *)this + 368);
  if (v371)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v371 + 32))(v371, a2, "spuPlaybackExampleDeviceMotion");
  v372 = *((_QWORD *)this + 369);
  if (v372)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v372 + 32))(v372, a2, "spuPlaybackExampleMotionStateUpdate");
  v373 = *((_QWORD *)this + 370);
  if (v373)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v373 + 32))(v373, a2, "steadinessEvent");
  v374 = *((_QWORD *)this + 371);
  if (v374)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v374 + 32))(v374, a2, "steadinessModelBalanceFeatures");
  v375 = *((_QWORD *)this + 372);
  if (v375)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v375 + 32))(v375, a2, "steadinessModelContinuousWalkingFeatures");
  v376 = *((_QWORD *)this + 373);
  if (v376)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v376 + 32))(v376, a2, "steadinessModelGaitBaselineFeatures");
  v377 = *((_QWORD *)this + 374);
  if (v377)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v377 + 32))(v377, a2, "steadinessModelHarmonicFeatures");
  v378 = *((_QWORD *)this + 375);
  if (v378)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v378 + 32))(v378, a2, "steadinessModelResult");
  v379 = *((_QWORD *)this + 376);
  if (v379)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v379 + 32))(v379, a2, "steadinessModelTemporalDispersionFeatures");
  v380 = *((_QWORD *)this + 377);
  if (v380)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v380 + 32))(v380, a2, "steadinessModelTemporalEntropyFeatures");
  v381 = *((_QWORD *)this + 378);
  if (v381)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v381 + 32))(v381, a2, "stepCadenceToStrideLengthBin");
  v382 = *((_QWORD *)this + 379);
  if (v382)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v382 + 32))(v382, a2, "stepCountEntry");
  v383 = *((_QWORD *)this + 380);
  if (v383)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v383 + 32))(v383, a2, "stepCountEntryAddition");
  v384 = *((_QWORD *)this + 381);
  if (v384)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v384 + 32))(v384, a2, "stepDistanceFusionResult");
  v385 = *((_QWORD *)this + 382);
  if (v385)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v385 + 32))(v385, a2, "stepLikelihoodFeatures");
  v386 = *((_QWORD *)this + 383);
  if (v386)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v386 + 32))(v386, a2, "streamingHeartRateData");
  v387 = *((_QWORD *)this + 384);
  if (v387)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v387 + 32))(v387, a2, "streamingHighFrequencyHeartRateData");
  v388 = *((_QWORD *)this + 385);
  if (v388)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v388 + 32))(v388, a2, "strideCalBin");
  v389 = *((_QWORD *)this + 386);
  if (v389)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v389 + 32))(v389, a2, "strideCalEntry");
  v390 = *((_QWORD *)this + 387);
  if (v390)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v390 + 32))(v390, a2, "subStats");
  v391 = *((_QWORD *)this + 388);
  if (v391)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v391 + 32))(v391, a2, "swingDoTCandidate");
  v392 = *((_QWORD *)this + 389);
  if (v392)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v392 + 32))(v392, a2, "tapAccept");
  v393 = *((_QWORD *)this + 390);
  if (v393)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v393 + 32))(v393, a2, "tapDetect");
  v394 = *((_QWORD *)this + 391);
  if (v394)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v394 + 32))(v394, a2, "tempestPoCAuxiliaryDeviceMotion");
  v395 = *((_QWORD *)this + 392);
  if (v395)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v395 + 32))(v395, a2, "tempestPoCListenerOrientation");
  v396 = *((_QWORD *)this + 393);
  if (v396)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v396 + 32))(v396, a2, "timestamp");
  v397 = *((_QWORD *)this + 394);
  if (v397)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v397 + 32))(v397, a2, "touchOscarEmu");
  v398 = *((_QWORD *)this + 395);
  if (v398)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v398 + 32))(v398, a2, "trackRunData");
  v399 = *((_QWORD *)this + 396);
  if (v399)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v399 + 32))(v399, a2, "ultraFastAccel");
  v400 = *((_QWORD *)this + 397);
  if (v400)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v400 + 32))(v400, a2, "userInteraction");
  v401 = *((_QWORD *)this + 398);
  if (v401)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v401 + 32))(v401, a2, "userStudyEvent");
  v402 = *((_QWORD *)this + 399);
  if (v402)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v402 + 32))(v402, a2, "uwbRange");
  v403 = *((_QWORD *)this + 400);
  if (v403)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v403 + 32))(v403, a2, "vO2MaxModelInput");
  v404 = *((_QWORD *)this + 401);
  if (v404)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v404 + 32))(v404, a2, "velocityEstimatorFusionState");
  v405 = *((_QWORD *)this + 402);
  if (v405)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v405 + 32))(v405, a2, "vibrationEvent");
  v406 = *((_QWORD *)this + 403);
  if (v406)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v406 + 32))(v406, a2, "viewObstructedMachineLearningDecision");
  v407 = *((_QWORD *)this + 404);
  if (v407)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v407 + 32))(v407, a2, "viewObstructedMachineLearningFeatures");
  v408 = *((_QWORD *)this + 405);
  if (v408)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v408 + 32))(v408, a2, "viewObstructedMachineLearningProbabilities");
  v409 = *((_QWORD *)this + 406);
  if (v409)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v409 + 32))(v409, a2, "viewObstructedState");
  v410 = *((_QWORD *)this + 407);
  if (v410)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v410 + 32))(v410, a2, "vioEstimation");
  v411 = *((_QWORD *)this + 408);
  if (v411)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v411 + 32))(v411, a2, "vioPose");
  v412 = *((_QWORD *)this + 409);
  if (v412)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v412 + 32))(v412, a2, "vioReplayPose");
  v413 = *((_QWORD *)this + 410);
  if (v413)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v413 + 32))(v413, a2, "visionCompassBias");
  v414 = *((_QWORD *)this + 411);
  if (v414)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v414 + 32))(v414, a2, "visualLocalization");
  v415 = *((_QWORD *)this + 412);
  if (v415)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v415 + 32))(v415, a2, "visualLocalizationAttitudeConstraints");
  v416 = *((_QWORD *)this + 413);
  if (v416)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v416 + 32))(v416, a2, "visualLocalizationAttitudeCorrection");
  v417 = *((_QWORD *)this + 414);
  if (v417)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v417 + 32))(v417, a2, "visualStateMeasurement");
  v418 = *((_QWORD *)this + 415);
  if (v418)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v418 + 32))(v418, a2, "vo2MaxInput");
  v419 = *((_QWORD *)this + 416);
  if (v419)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v419 + 32))(v419, a2, "vo2MaxOutput");
  v420 = *((_QWORD *)this + 417);
  if (v420)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v420 + 32))(v420, a2, "wakeGestureNotification");
  v421 = *((_QWORD *)this + 418);
  if (v421)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v421 + 32))(v421, a2, "wakeGestureSample");
  v422 = *((_QWORD *)this + 419);
  if (v422)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v422 + 32))(v422, a2, "walkingDetectionResult");
  v423 = *((_QWORD *)this + 420);
  if (v423)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v423 + 32))(v423, a2, "walkingSteadinessClassification");
  v424 = *((_QWORD *)this + 421);
  if (v424)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v424 + 32))(v424, a2, "watchActiveCalories");
  v425 = *((_QWORD *)this + 422);
  if (v425)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v425 + 32))(v425, a2, "watchBasalCalories");
  v426 = *((_QWORD *)this + 423);
  if (v426)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v426 + 32))(v426, a2, "watchEnclosureMaterial");
  v427 = *((_QWORD *)this + 424);
  if (v427)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v427 + 32))(v427, a2, "watchHeartRateData");
  v428 = *((_QWORD *)this + 425);
  if (v428)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v428 + 32))(v428, a2, "watchOnWristState");
  v429 = *((_QWORD *)this + 426);
  if (v429)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v429 + 32))(v429, a2, "watchOrientationSettings");
  v430 = *((_QWORD *)this + 427);
  if (v430)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v430 + 32))(v430, a2, "wifiScanResults");
  v431 = *((_QWORD *)this + 428);
  if (v431)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v431 + 32))(v431, a2, "workoutActivity");
  v432 = *((_QWORD *)this + 429);
  if (v432)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v432 + 32))(v432, a2, "workoutEvent");
  v433 = *((_QWORD *)this + 430);
  if (v433)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v433 + 32))(v433, a2, "workoutRecorderALSData");
  v434 = *((_QWORD *)this + 431);
  if (v434)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v434 + 32))(v434, a2, "workoutRecorderAccel");
  v435 = *((_QWORD *)this + 432);
  if (v435)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v435 + 32))(v435, a2, "workoutRecorderAccel800");
  v436 = *((_QWORD *)this + 433);
  if (v436)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v436 + 32))(v436, a2, "workoutRecorderAveragedALSData");
  v437 = *((_QWORD *)this + 434);
  if (v437)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v437 + 32))(v437, a2, "workoutRecorderBodyMetrics");
  v438 = *((_QWORD *)this + 435);
  if (v438)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v438 + 32))(v438, a2, "workoutRecorderCompassCalibration");
  v439 = *((_QWORD *)this + 436);
  if (v439)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v439 + 32))(v439, a2, "workoutRecorderElevation");
  v440 = *((_QWORD *)this + 437);
  if (v440)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v440 + 32))(v440, a2, "workoutRecorderFaceCovered");
  v441 = *((_QWORD *)this + 438);
  if (v441)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v441 + 32))(v441, a2, "workoutRecorderFitnessMachineData");
  v442 = *((_QWORD *)this + 439);
  if (v442)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v442 + 32))(v442, a2, "workoutRecorderHealthKitInfo");
  v443 = *((_QWORD *)this + 440);
  if (v443)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v443 + 32))(v443, a2, "workoutRecorderHeartRate");
  v444 = *((_QWORD *)this + 441);
  if (v444)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v444 + 32))(v444, a2, "workoutRecorderMagnetometer");
  v445 = *((_QWORD *)this + 442);
  if (v445)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v445 + 32))(v445, a2, "workoutRecorderOdometer");
  v446 = *((_QWORD *)this + 443);
  if (v446)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v446 + 32))(v446, a2, "workoutRecorderPressure");
  v447 = *((_QWORD *)this + 444);
  if (v447)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v447 + 32))(v447, a2, "workoutRecorderRotationRate");
  v448 = *((_QWORD *)this + 445);
  if (v448)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v448 + 32))(v448, a2, "workoutRecorderWatchOnWristStatus");
  v449 = *((_QWORD *)this + 446);
  if (v449)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v449 + 32))(v449, a2, "workoutRecorderWatchOrientationSettings");
  v450 = *((_QWORD *)this + 447);
  if (v450)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v450 + 32))(v450, a2, "workoutRecorderWifiScanResults");
  v451 = *((_QWORD *)this + 448);
  if (v451)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v451 + 32))(v451, a2, "workoutRecorderWorkoutEvent");
  v452 = *((_QWORD *)this + 449);
  if (v452)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v452 + 32))(v452, a2, "workoutRecorderWorkoutSessionPriors");
  v453 = *((_QWORD *)this + 450);
  if (v453)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v453 + 32))(v453, a2, "workoutSessionPriors");
  v454 = *((_QWORD *)this + 451);
  if (v454)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v454 + 32))(v454, a2, "zeroVelocityCorrection");
  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Item::readFrom(CMMsl::Item *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  int v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        if (v2 > v3)
          v3 = v2;
        while (1)
        {
          if (v3 == v2)
          {
            v11 = 0;
            *((_BYTE *)a2 + 24) = 1;
            goto LABEL_24;
          }
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v18;
          v17 |= (unint64_t)(v19 & 0x7F) << v15;
          if ((v19 & 0x80) == 0)
            break;
          v15 += 7;
          v2 = v18;
          v14 = v16++ > 8;
          if (v14)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_24;
          }
        }
        v11 = *((_BYTE *)a2 + 24) ? 0 : v17;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)a2 + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
      }
LABEL_24:
      v20 = v11 & 7;
      v4 = *((unsigned __int8 *)a2 + 24);
      if (*((_BYTE *)a2 + 24) || v20 == 4)
        break;
      v22 = v11 >> 3;
      if ((int)(v11 >> 3) <= 2047)
      {
        v24 = (v22 - 1);
        if (v24 <= 0x1FF)
          __asm { BR              X9 }
        v25 = (v22 - 1001);
        if (v25 <= 0x34)
          __asm { BR              X9 }
      }
      else if ((int)v22 > 29999)
      {
        switch((_DWORD)v22)
        {
          case 0x7530:
            operator new();
          case 0x7531:
            operator new();
          case 0x7532:
            operator new();
        }
      }
      else
      {
        v23 = (v22 - 2048);
        if (v23 <= 0xBC)
          __asm { BR              X9 }
      }
      result = PB::Reader::skip(a2, v22, v20, 0);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

_QWORD *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(_QWORD *this)
{
  *this = off_100355618;
  this[1] = 0;
  return this;
}

{
  *this = off_100355618;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(_QWORD *this)
{
  *this = off_1003556C0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003556C0;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(_QWORD *this)
{
  *this = off_100355730;
  this[1] = 0;
  return this;
}

{
  *this = off_100355730;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(_QWORD *this)
{
  *this = off_100355810;
  this[1] = 0;
  return this;
}

{
  *this = off_100355810;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(_QWORD *this)
{
  *this = off_1003558F0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003558F0;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(_QWORD *this)
{
  *this = off_100355880;
  this[1] = 0;
  return this;
}

{
  *this = off_100355880;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(_QWORD *this)
{
  *this = off_1003559D0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003559D0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VO2MaxInput::VO2MaxInput(uint64_t this)
{
  *(_QWORD *)this = off_100354F50;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354F50;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(uint64_t this)
{
  *(_QWORD *)this = off_1003557D8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003557D8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

double CMMsl::PearlAttitude::PearlAttitude(CMMsl::PearlAttitude *this)
{
  double result;

  *(_QWORD *)this = off_1003534D8;
  *((_DWORD *)this + 31) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003534D8;
  *((_DWORD *)this + 31) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::RotationRate::RotationRate(uint64_t this)
{
  *(_QWORD *)this = off_100353F90;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353F90;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(_QWORD *this)
{
  *this = off_100355960;
  this[1] = 0;
  return this;
}

{
  *this = off_100355960;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WifiScanResults::WifiScanResults(_QWORD *this)
{
  *this = off_100355500;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100355500;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(_QWORD *this)
{
  *this = off_100355998;
  this[1] = 0;
  return this;
}

{
  *this = off_100355998;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(_QWORD *this)
{
  *this = off_1003558B8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003558B8;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VisionCompassBias::VisionCompassBias(uint64_t this)
{
  *(_QWORD *)this = off_100355180;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355180;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

double CMMsl::VIOEstimation::VIOEstimation(CMMsl::VIOEstimation *this)
{
  double result;

  *(_QWORD *)this = off_100354EA8;
  *((_QWORD *)this + 42) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100354EA8;
  *((_QWORD *)this + 42) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

double CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this)
{
  double result;

  *(_QWORD *)this = off_1003526D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *((_QWORD *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003526D8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *((_QWORD *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  return result;
}

uint64_t CMMsl::MovementStats::MovementStats(uint64_t this)
{
  *(_QWORD *)this = off_100352DA0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352DA0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t this)
{
  *(_QWORD *)this = off_100354A48;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354A48;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

_QWORD *CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(_QWORD *this)
{
  *this = off_100352A90;
  this[23] = 0;
  return this;
}

{
  *this = off_100352A90;
  this[23] = 0;
  return this;
}

uint64_t CMMsl::VIOPose::VIOPose(uint64_t this)
{
  *(_QWORD *)this = off_100354EE0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354EE0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

_QWORD *CMMsl::SignalEnvironment::SignalEnvironment(_QWORD *this)
{
  *this = off_100354498;
  this[1] = 0;
  return this;
}

{
  *this = off_100354498;
  this[1] = 0;
  return this;
}

double CMMsl::VIOReplayPose::VIOReplayPose(CMMsl::VIOReplayPose *this)
{
  double result;

  *(_QWORD *)this = off_100354F18;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100354F18;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::VisualStateMeasurement::VisualStateMeasurement(CMMsl::VisualStateMeasurement *this)
{
  double result;

  *(_QWORD *)this = off_100355260;
  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100355260;
  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

double CMMsl::KappaTriggerDebug::KappaTriggerDebug(CMMsl::KappaTriggerDebug *this)
{
  double result;

  *(_QWORD *)this = off_100352518;
  *((_DWORD *)this + 30) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100352518;
  *((_DWORD *)this + 30) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

double CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this)
{
  double result;

  *(_QWORD *)this = off_100351FA0;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351FA0;
  *((_DWORD *)this + 36) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaSteps::KappaSteps(uint64_t this)
{
  *(_QWORD *)this = off_100352438;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352438;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

_QWORD *CMMsl::SignificantUserInteraction::SignificantUserInteraction(_QWORD *this)
{
  *this = off_1003544D0;
  this[2] = 0;
  return this;
}

{
  *this = off_1003544D0;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::KappaRoads::KappaRoads(uint64_t this)
{
  *(_QWORD *)this = off_100352320;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352320;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t this)
{
  *(_QWORD *)this = off_100354E70;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354E70;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(uint64_t this)
{
  *(_QWORD *)this = off_100354CE8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354CE8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

uint64_t CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(uint64_t this)
{
  *(_QWORD *)this = off_100354D20;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354D20;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(_QWORD *this)
{
  *this = off_100355650;
  this[1] = 0;
  return this;
}

{
  *this = off_100355650;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(_QWORD *this)
{
  *this = off_1003555E0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003555E0;
  this[1] = 0;
  return this;
}

double CMMsl::VisualLocalization::VisualLocalization(CMMsl::VisualLocalization *this)
{
  double result;

  *(_QWORD *)this = off_1003551B8;
  *((_DWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003551B8;
  *((_DWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t this)
{
  *(_QWORD *)this = off_1003547E0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003547E0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionLocation::MotionLocation(uint64_t this)
{
  *(_QWORD *)this = off_100352C50;
  *(_DWORD *)(this + 220) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352C50;
  *(_DWORD *)(this + 220) = 0;
  return this;
}

uint64_t CMMsl::MotionActivity::MotionActivity(uint64_t this)
{
  *(_QWORD *)this = off_100352B38;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352B38;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

double CMMsl::KappaTrigger::KappaTrigger(CMMsl::KappaTrigger *this)
{
  double result;

  *(_QWORD *)this = off_1003524A8;
  *((_DWORD *)this + 53) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003524A8;
  *((_DWORD *)this + 53) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t this)
{
  *(_QWORD *)this = off_100353E08;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353E08;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

_QWORD *CMMsl::JointLinkModelPose::JointLinkModelPose(_QWORD *this)
{
  *this = off_100351D00;
  this[1] = 0;
  return this;
}

{
  *this = off_100351D00;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(_QWORD *this)
{
  *this = off_100352B00;
  this[1] = 0;
  return this;
}

{
  *this = off_100352B00;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(_QWORD *this)
{
  *this = off_100352898;
  this[1] = 0;
  return this;
}

{
  *this = off_100352898;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(_QWORD *this)
{
  *this = off_100351D38;
  this[1] = 0;
  return this;
}

{
  *this = off_100351D38;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::PressureCompensated::PressureCompensated(_QWORD *this)
{
  *this = off_100353B68;
  this[1] = 0;
  return this;
}

{
  *this = off_100353B68;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t this)
{
  *(_QWORD *)this = off_100354FC0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354FC0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(uint64_t this)
{
  *(_QWORD *)this = off_100352908;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352908;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t this)
{
  *(_QWORD *)this = off_100352940;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352940;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::PressureCalibration::PressureCalibration(uint64_t this)
{
  *(_QWORD *)this = off_100353B30;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353B30;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(_QWORD *this)
{
  *this = off_100355848;
  this[1] = 0;
  return this;
}

{
  *this = off_100355848;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(_QWORD *this)
{
  *this = off_1003556F8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003556F8;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::RawAudio::RawAudio(_QWORD *this)
{
  *this = off_100353DD0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100353DD0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t CMMsl::ODTPose::ODTPose(uint64_t this)
{
  *(_QWORD *)this = off_100352EB8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352EB8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PencilTipForce::PencilTipForce(uint64_t this)
{
  *(_QWORD *)this = off_100353740;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353740;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PencilTouch::PencilTouch(uint64_t this)
{
  *(_QWORD *)this = off_100353778;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353778;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

_QWORD *CMMsl::Timestamp::Timestamp(_QWORD *this)
{
  *this = off_100354D58;
  this[2] = 0;
  return this;
}

{
  *this = off_100354D58;
  this[2] = 0;
  return this;
}

double CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(CMMsl::WalkingSteadinessClassification *this)
{
  double result;

  *(_QWORD *)this = off_100355340;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 61) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100355340;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 61) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

uint64_t CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t this)
{
  *(_QWORD *)this = off_100354968;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354968;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::SteadinessEvent::SteadinessEvent(uint64_t this)
{
  *(_QWORD *)this = off_100354850;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354850;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(uint64_t this)
{
  *(_QWORD *)this = off_1003548F8;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003548F8;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(uint64_t this)
{
  *(_QWORD *)this = off_1003548C0;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003548C0;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(uint64_t this)
{
  *(_QWORD *)this = off_1003549A0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003549A0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(uint64_t this)
{
  *(_QWORD *)this = off_1003549D8;
  *(_DWORD *)(this + 216) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003549D8;
  *(_DWORD *)(this + 216) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(uint64_t this)
{
  *(_QWORD *)this = off_100354888;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354888;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::MagnetometerReset::MagnetometerReset(uint64_t this)
{
  *(_QWORD *)this = off_1003529E8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003529E8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(_QWORD *this)
{
  *this = off_100355928;
  this[1] = 0;
  return this;
}

{
  *this = off_100355928;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(uint64_t this)
{
  *(_QWORD *)this = off_100352780;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352780;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t this)
{
  *(_QWORD *)this = off_100354A80;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354A80;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t this)
{
  *(_DWORD *)(this + 100) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_100354AB8;
  return this;
}

{
  *(_DWORD *)(this + 100) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_100354AB8;
  return this;
}

_QWORD *CMMsl::Skeleton3D::Skeleton3D(_QWORD *this)
{
  *this = off_1003546C8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003546C8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t this)
{
  *(_QWORD *)this = off_100352860;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352860;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t this)
{
  *(_QWORD *)this = off_100353938;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353938;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeState::LiftToWakeState(uint64_t this)
{
  *(_QWORD *)this = off_1003527B8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003527B8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedState::ViewObstructedState(uint64_t this)
{
  *(_QWORD *)this = off_100355148;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355148;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

_QWORD *CMMsl::RunningFormMetrics::RunningFormMetrics(_QWORD *this)
{
  *this = off_100354038;
  this[28] = 0;
  return this;
}

{
  *this = off_100354038;
  this[28] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(_QWORD *this)
{
  *this = off_100355A40;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100355A40;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(_QWORD *this)
{
  *this = off_100355A08;
  this[1] = 0;
  return this;
}

{
  *this = off_100355A08;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PDRImpulse::PDRImpulse(uint64_t this)
{
  *(_QWORD *)this = off_100353270;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353270;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PocketDetectionPacket::PocketDetectionPacket(uint64_t this)
{
  *(_QWORD *)this = off_100353820;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353820;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(uint64_t this)
{
  *(_QWORD *)this = off_100352748;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352748;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t this)
{
  *(_QWORD *)this = off_1003527F0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003527F0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningPower::RunningPower(uint64_t this)
{
  *(_QWORD *)this = off_100354070;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354070;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

_QWORD *CMMsl::MotionContextActivity::MotionContextActivity(_QWORD *this)
{
  *this = off_100352BA8;
  this[1] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100352BA8;
  this[1] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CMMsl::PDRAlgType::PDRAlgType(_QWORD *this)
{
  *this = off_100352FD0;
  this[1] = 0;
  return this;
}

{
  *this = off_100352FD0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::PdrMLModelOutput(uint64_t this)
{
  *(_QWORD *)this = off_1003534A0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003534A0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(_QWORD *this)
{
  *this = off_100355688;
  this[1] = 0;
  return this;
}

{
  *this = off_100355688;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::StrideCalEntry::StrideCalEntry(uint64_t this)
{
  *(_QWORD *)this = off_100354BD0;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354BD0;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t this)
{
  *(_QWORD *)this = off_1003540E0;
  *(_DWORD *)(this + 188) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003540E0;
  *(_DWORD *)(this + 188) = 0;
  return this;
}

uint64_t CMMsl::ProxPDP::ProxPDP(uint64_t this)
{
  *(_QWORD *)this = off_100353D98;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353D98;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(uint64_t this)
{
  *(_QWORD *)this = off_100352630;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352630;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t this)
{
  *(_QWORD *)this = off_100352668;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352668;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t this)
{
  *(_QWORD *)this = off_1003525F8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003525F8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::WakeGestureNotification::WakeGestureNotification(uint64_t this)
{
  *(_QWORD *)this = off_100355298;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355298;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(uint64_t this)
{
  *(_QWORD *)this = off_100353D28;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353D28;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t this)
{
  *(_QWORD *)this = off_100353F58;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353F58;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t this)
{
  *(_QWORD *)this = off_1003526A0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003526A0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KeyboardAttached::KeyboardAttached(uint64_t this)
{
  *(_QWORD *)this = off_1003525C0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003525C0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t this)
{
  *(_QWORD *)this = off_100354658;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354658;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t this)
{
  *(_QWORD *)this = off_100354770;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354770;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t this)
{
  *(_QWORD *)this = off_100354700;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354700;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t this)
{
  *(_QWORD *)this = off_100355420;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355420;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::WatchActiveCalories::WatchActiveCalories(uint64_t this)
{
  *(_QWORD *)this = off_100355378;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355378;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::WatchBasalCalories::WatchBasalCalories(uint64_t this)
{
  *(_QWORD *)this = off_1003553B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003553B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::TrackRunData::TrackRunData(uint64_t this)
{
  *(_QWORD *)this = off_100354DC8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354DC8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t this)
{
  *(_QWORD *)this = off_100352A20;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352A20;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(_QWORD *this)
{
  *this = off_1003557A0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003557A0;
  this[1] = 0;
  return this;
}

double CMMsl::PedestrianFenceExit::PedestrianFenceExit(CMMsl::PedestrianFenceExit *this)
{
  double result;

  *(_QWORD *)this = off_100353580;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)this + 28) = 0xFFFFFFFFLL;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100353580;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)this + 28) = 0xFFFFFFFFLL;
  return result;
}

uint64_t CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t this)
{
  *(_QWORD *)this = off_1003537B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003537B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t this)
{
  *(_QWORD *)this = off_1003537E8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003537E8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t this)
{
  *(_QWORD *)this = off_100353548;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353548;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t this)
{
  *(_QWORD *)this = off_100355538;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355538;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

double CMMsl::PencilDeviceMotion::PencilDeviceMotion(CMMsl::PencilDeviceMotion *this)
{
  double result;

  *(_QWORD *)this = off_100353628;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100353628;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t CMMsl::PencilFusionResult::PencilFusionResult(uint64_t this)
{
  *(_QWORD *)this = off_1003536D0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003536D0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(uint64_t this)
{
  *(_QWORD *)this = off_100354930;
  *(_DWORD *)(this + 248) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354930;
  *(_DWORD *)(this + 248) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(uint64_t this)
{
  *(_QWORD *)this = off_100353698;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353698;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(uint64_t this)
{
  *(_QWORD *)this = off_100352AC8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352AC8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t this)
{
  *(_QWORD *)this = off_1003553E8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003553E8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this)
{
  double result;

  *(_QWORD *)this = off_100352C88;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100352C88;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::PostureJoint::PostureJoint(CMMsl::PostureJoint *this)
{
  double result;

  *(_QWORD *)this = off_1003538C8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003538C8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

_QWORD *CMMsl::PostureSkeleton::PostureSkeleton(_QWORD *this)
{
  *this = off_100353900;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_100353900;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(_QWORD *this)
{
  *this = off_100355768;
  this[1] = 0;
  return this;
}

{
  *this = off_100355768;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(_QWORD *this)
{
  *this = off_100354B60;
  this[1] = 0;
  return this;
}

{
  *this = off_100354B60;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t this)
{
  *(_QWORD *)this = off_100354E38;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354E38;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

_QWORD *CMMsl::PressureOscarEmu::PressureOscarEmu(_QWORD *this)
{
  *this = off_100353C80;
  this[1] = 0;
  return this;
}

{
  *this = off_100353C80;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::PressureGps::PressureGps(_QWORD *this)
{
  *this = off_100353C48;
  this[1] = 0;
  return this;
}

{
  *this = off_100353C48;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::PressureFiltered::PressureFiltered(_QWORD *this)
{
  *this = off_100353BA0;
  this[1] = 0;
  return this;
}

{
  *this = off_100353BA0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::Prox::Prox(uint64_t this)
{
  *(_QWORD *)this = off_100353CF0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353CF0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

_QWORD *CMMsl::MotionStateUpdate::MotionStateUpdate(_QWORD *this)
{
  *this = off_100352CF8;
  this[4] = 0;
  this[24] = 0;
  return this;
}

{
  *this = off_100352CF8;
  this[4] = 0;
  this[24] = 0;
  return this;
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t this)
{
  *(_QWORD *)this = off_100354D90;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354D90;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t this)
{
  *(_QWORD *)this = off_100354460;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354460;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionHint::MotionHint(uint64_t this)
{
  *(_QWORD *)this = off_100352C18;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352C18;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t this)
{
  *(_QWORD *)this = off_100352828;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352828;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

double CMMsl::NonlinearBiasFit::NonlinearBiasFit(CMMsl::NonlinearBiasFit *this)
{
  double result;

  *(_QWORD *)this = off_100352E80;
  *((_DWORD *)this + 45) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100352E80;
  *((_DWORD *)this + 45) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

uint64_t CMMsl::NatalieData::NatalieData(uint64_t this)
{
  *(_QWORD *)this = off_100352E48;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352E48;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::WorkoutEvent::WorkoutEvent(uint64_t this)
{
  *(_QWORD *)this = off_100355570;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355570;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t this)
{
  *(_QWORD *)this = off_100352F60;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352F60;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

_QWORD *CMMsl::MotionWifiLocation::MotionWifiLocation(_QWORD *this)
{
  *this = off_100352D68;
  this[1] = 0;
  return this;
}

{
  *this = off_100352D68;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::StrideCalBin::StrideCalBin(uint64_t this)
{
  *(_QWORD *)this = off_100354B98;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354B98;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::Odometer::Odometer(uint64_t this)
{
  *(_QWORD *)this = off_100352EF0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352EF0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t CMMsl::MetsInfo::MetsInfo(uint64_t this)
{
  *(_QWORD *)this = off_100352A58;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352A58;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t this)
{
  *(_QWORD *)this = off_100355068;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355068;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(uint64_t this)
{
  *(_QWORD *)this = off_100354A10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354A10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t this)
{
  *(_QWORD *)this = off_100355490;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355490;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t this)
{
  *(_QWORD *)this = off_100352D30;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352D30;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::MotionLoiData::MotionLoiData(uint64_t this)
{
  *(_QWORD *)this = off_100352CC0;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352CC0;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(uint64_t this)
{
  *(_QWORD *)this = off_100353C10;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353C10;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

double CMMsl::TapDetect::TapDetect(CMMsl::TapDetect *this)
{
  double result;

  *(_QWORD *)this = off_100354CB0;
  *((_DWORD *)this + 7) = -2;
  result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_1002ECB00;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100354CB0;
  *((_DWORD *)this + 7) = -2;
  result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_1002ECB00;
  return result;
}

uint64_t CMMsl::TapAccept::TapAccept(uint64_t this)
{
  *(_QWORD *)this = off_100354C78;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354C78;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

double CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this)
{
  double result;

  *(_QWORD *)this = off_100353EB0;
  *((_DWORD *)this + 41) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100353EB0;
  *((_DWORD *)this + 41) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t this)
{
  *(_QWORD *)this = off_100353F20;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353F20;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(uint64_t this)
{
  *(_QWORD *)this = off_100353EE8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353EE8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

_QWORD *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(_QWORD *this)
{
  *this = off_100355A78;
  this[1] = 0;
  return this;
}

{
  *this = off_100355A78;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(uint64_t this)
{
  *(_QWORD *)this = off_100353AC0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353AC0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::MovementStatsSignal::MovementStatsSignal(uint64_t this)
{
  *(_QWORD *)this = off_100352E10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352E10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this)
{
  double result;

  *(_QWORD *)this = off_100352DD8;
  *((_DWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100352DD8;
  *((_DWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

_QWORD *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(_QWORD *this)
{
  *this = off_100355228;
  this[1] = 0;
  return this;
}

{
  *this = off_100355228;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(uint64_t this)
{
  *(_QWORD *)this = off_1003551F0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003551F0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t this)
{
  *(_QWORD *)this = off_100353E78;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353E78;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

_QWORD *CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(_QWORD *this)
{
  *this = off_100353E40;
  *(_QWORD *)((char *)this + 188) = 0;
  return this;
}

{
  *this = off_100353E40;
  *(_QWORD *)((char *)this + 188) = 0;
  return this;
}

uint64_t CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t this)
{
  *(_QWORD *)this = off_100355308;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355308;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(uint64_t this)
{
  *(_QWORD *)this = off_100354578;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354578;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

_QWORD *CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(_QWORD *this)
{
  *this = off_100354620;
  this[2] = 0;
  return this;
}

{
  *this = off_100354620;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t this)
{
  *(_QWORD *)this = off_1003545B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003545B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t this)
{
  *(_QWORD *)this = off_1003545E8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003545E8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

_QWORD *CMMsl::SpatialEvent::SpatialEvent(_QWORD *this)
{
  *this = off_100354818;
  this[2] = 0;
  return this;
}

{
  *this = off_100354818;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t this)
{
  *(_QWORD *)this = off_100351CC8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351CC8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t this)
{
  *(_QWORD *)this = off_100353BD8;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353BD8;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t this)
{
  *(_QWORD *)this = off_100352B70;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352B70;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(uint64_t this)
{
  *(_QWORD *)this = off_100352710;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352710;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::Orientation::Orientation(uint64_t this)
{
  *(_QWORD *)this = off_100352F98;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352F98;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KappaAudioResult::KappaAudioResult(uint64_t this)
{
  *(_QWORD *)this = off_100351EF8;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351EF8;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t CMMsl::KappaBaroResult::KappaBaroResult(uint64_t this)
{
  *(_QWORD *)this = off_100351F30;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351F30;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

uint64_t CMMsl::KappaGpsResult::KappaGpsResult(uint64_t this)
{
  *(_QWORD *)this = off_100351FD8;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351FD8;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseResult::KappaPulseResult(uint64_t this)
{
  *(_QWORD *)this = off_100352240;
  *(_DWORD *)(this + 324) = 0;
  *(_QWORD *)(this + 316) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352240;
  *(_DWORD *)(this + 324) = 0;
  *(_QWORD *)(this + 316) = 0;
  return this;
}

_QWORD *CMMsl::KappaZgResult::KappaZgResult(_QWORD *this)
{
  *this = off_100352588;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

{
  *this = off_100352588;
  *(_QWORD *)((char *)this + 164) = 0;
  return this;
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t this)
{
  *(_QWORD *)this = off_100352550;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352550;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(uint64_t this)
{
  *(_QWORD *)this = off_1003521D0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003521D0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t this)
{
  *(_QWORD *)this = off_100351EC0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351EC0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::KappaCrashResult::KappaCrashResult(uint64_t this)
{
  *(_QWORD *)this = off_100351F68;
  *(_QWORD *)(this + 280) = 0;
  *(_DWORD *)(this + 288) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351F68;
  *(_QWORD *)(this + 280) = 0;
  *(_DWORD *)(this + 288) = 0;
  return this;
}

uint64_t CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t this)
{
  *(_QWORD *)this = off_100352278;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352278;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t this)
{
  *(_QWORD *)this = off_1003522B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003522B0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(uint64_t this)
{
  *(_QWORD *)this = off_100352390;
  *(_DWORD *)(this + 324) = 0;
  *(_QWORD *)(this + 316) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352390;
  *(_DWORD *)(this + 324) = 0;
  *(_QWORD *)(this + 316) = 0;
  return this;
}

uint64_t CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t this)
{
  *(_QWORD *)this = off_1003520F0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003520F0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t this)
{
  *(_QWORD *)this = off_100352080;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352080;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

_QWORD *CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(_QWORD *this)
{
  *this = off_1003523C8;
  *(_QWORD *)((char *)this + 364) = 0;
  *(_QWORD *)((char *)this + 356) = 0;
  return this;
}

{
  *this = off_1003523C8;
  *(_QWORD *)((char *)this + 364) = 0;
  *(_QWORD *)((char *)this + 356) = 0;
  return this;
}

_QWORD *CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(_QWORD *this)
{
  *this = off_1003520B8;
  *(_QWORD *)((char *)this + 172) = 0;
  return this;
}

{
  *this = off_1003520B8;
  *(_QWORD *)((char *)this + 172) = 0;
  return this;
}

uint64_t CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t this)
{
  *(_QWORD *)this = off_1003522E8;
  *(_QWORD *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003522E8;
  *(_QWORD *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t this)
{
  *(_QWORD *)this = off_1003550A0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003550A0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(uint64_t this)
{
  *(_QWORD *)this = off_1003550D8;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003550D8;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(uint64_t this)
{
  *(_QWORD *)this = off_100355110;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355110;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(uint64_t this)
{
  *(_QWORD *)this = off_100353FC8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353FC8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(uint64_t this)
{
  *(_QWORD *)this = off_100354000;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354000;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

uint64_t CMMsl::RunningRotationAxis::RunningRotationAxis(uint64_t this)
{
  *(_QWORD *)this = off_1003540A8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003540A8;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(uint64_t this)
{
  *(_QWORD *)this = off_1003541C0;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003541C0;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(uint64_t this)
{
  *(_QWORD *)this = off_100354150;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354150;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::KappaSpinResult::KappaSpinResult(CMMsl::KappaSpinResult *this)
{
  double result;

  *(_QWORD *)this = off_100352400;
  *((_DWORD *)this + 51) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100352400;
  *((_DWORD *)this + 51) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  return result;
}

uint64_t CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t this)
{
  *(_QWORD *)this = off_100352198;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352198;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

uint64_t CMMsl::RunningStrideLength::RunningStrideLength(uint64_t this)
{
  *(_QWORD *)this = off_100354118;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354118;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t this)
{
  *(_QWORD *)this = off_100352048;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352048;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(uint64_t this)
{
  *(_QWORD *)this = off_100352208;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352208;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

uint64_t CMMsl::PedometerPathStraightness::PedometerPathStraightness(uint64_t this)
{
  *(_QWORD *)this = off_1003535B8;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003535B8;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::VO2MaxModelInput::VO2MaxModelInput(uint64_t this)
{
  *(_QWORD *)this = off_100354F88;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354F88;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::ProxCalibration::ProxCalibration(CMMsl::ProxCalibration *this)
{
  double result;

  *(_QWORD *)this = off_100353D60;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100353D60;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaStepsResult::KappaStepsResult(uint64_t this)
{
  *(_QWORD *)this = off_100352470;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352470;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::WakeGestureSample::WakeGestureSample(uint64_t this)
{
  *(_QWORD *)this = off_1003552D0;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003552D0;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t this)
{
  *(_QWORD *)this = off_100352010;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352010;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t this)
{
  *(_QWORD *)this = off_100354188;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354188;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

uint64_t CMMsl::SubStats::SubStats(uint64_t this)
{
  *(_QWORD *)this = off_100354C08;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354C08;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t this)
{
  *(_QWORD *)this = off_100353510;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353510;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t this)
{
  *(_QWORD *)this = off_1003528D0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003528D0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(uint64_t this)
{
  *(_QWORD *)this = off_1003532A8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003532A8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(uint64_t this)
{
  *(_QWORD *)this = off_1003532E0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003532E0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(uint64_t this)
{
  *(_QWORD *)this = off_100353318;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353318;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(uint64_t this)
{
  *(_QWORD *)this = off_100353008;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353008;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(uint64_t this)
{
  *(_QWORD *)this = off_100353388;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353388;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(uint64_t this)
{
  *(_QWORD *)this = off_100351E18;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351E18;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(uint64_t this)
{
  *(_QWORD *)this = off_100355030;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100355030;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::PDRFenceReference::PDRFenceReference(uint64_t this)
{
  *(_QWORD *)this = off_100353200;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353200;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRFenceState::PDRFenceState(uint64_t this)
{
  *(_QWORD *)this = off_100353238;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353238;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::UWBRange::UWBRange(uint64_t this)
{
  *(_QWORD *)this = off_100354E00;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354E00;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t this)
{
  *(_QWORD *)this = off_1003524E0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003524E0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t this)
{
  *(_QWORD *)this = off_100354508;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354508;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PDRFeatures::PDRFeatures(uint64_t this)
{
  *(_QWORD *)this = off_1003531C8;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003531C8;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(uint64_t this)
{
  *(_QWORD *)this = off_100353078;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353078;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(uint64_t this)
{
  *(_QWORD *)this = off_100353040;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353040;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(uint64_t this)
{
  *(_QWORD *)this = off_100353120;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353120;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(uint64_t this)
{
  *(_QWORD *)this = off_100353350;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353350;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(uint64_t this)
{
  *(_QWORD *)this = off_100353970;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353970;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingState::PrecisionFindingState(uint64_t this)
{
  *(_QWORD *)this = off_100353A18;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353A18;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t this)
{
  *(_QWORD *)this = off_100352358;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352358;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(uint64_t this)
{
  *(_QWORD *)this = off_100353A50;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353A50;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t this)
{
  *(_QWORD *)this = off_1003539A8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003539A8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(uint64_t this)
{
  *(_QWORD *)this = off_100353190;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353190;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(uint64_t this)
{
  *(_QWORD *)this = off_100353158;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353158;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PeerState::PeerState(uint64_t this)
{
  *(_QWORD *)this = off_1003535F0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003535F0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

double CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  double result;

  *(_QWORD *)this = off_1003529B0;
  *((_DWORD *)this + 28) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003529B0;
  *((_DWORD *)this + 28) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

double CMMsl::KappaActivityPhone::KappaActivityPhone(CMMsl::KappaActivityPhone *this)
{
  double result;

  *(_QWORD *)this = off_100351E50;
  *((_DWORD *)this + 35) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351E50;
  *((_DWORD *)this + 35) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

double CMMsl::KappaActivityWatch::KappaActivityWatch(CMMsl::KappaActivityWatch *this)
{
  double result;

  *(_QWORD *)this = off_100351E88;
  *((_DWORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100351E88;
  *((_DWORD *)this + 26) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t this)
{
  *(_QWORD *)this = off_1003539E0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003539E0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(uint64_t this)
{
  *(_QWORD *)this = off_1003530E8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003530E8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  double result;

  *(_QWORD *)this = off_1003530B0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1003530B0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this)
{
  double result;

  *(_QWORD *)this = off_100352160;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_100352160;
  *((_DWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t this)
{
  *(_QWORD *)this = off_100352128;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100352128;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t this)
{
  *(_QWORD *)this = off_100353A88;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353A88;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t this)
{
  *(_QWORD *)this = off_100353660;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353660;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(uint64_t this)
{
  *(_QWORD *)this = off_100353708;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100353708;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t this)
{
  *(_QWORD *)this = off_100354380;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354380;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t this)
{
  *(_QWORD *)this = off_100354348;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100354348;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

_QWORD *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = off_1003533C0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = off_1003533C0;
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t this)
{
  *(_QWORD *)this = off_1003533F8;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003533F8;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

_QWORD *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(_QWORD *this)
{
  *this = off_100353468;
  this[1] = 0;
  return this;
}

{
  *this = off_100353468;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(_QWORD *this)
{
  *this = off_100353430;
  this[1] = 0;
  return this;
}

{
  *this = off_100353430;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::KData1::KData1(uint64_t this)
{
  *(_QWORD *)this = off_100351D70;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351D70;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KData2::KData2(uint64_t this)
{
  *(_QWORD *)this = off_100351DA8;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351DA8;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t CMMsl::KData3::KData3(uint64_t this)
{
  *(_QWORD *)this = off_100351DE0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(_QWORD *)this = off_100351DE0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t this)
{
  *(_QWORD *)this = off_1003543B8;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1003543B8;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

_QWORD *CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(_QWORD *this)
{
  *this = off_1003543F0;
  *(_QWORD *)((char *)this + 188) = 0;
  return this;
}

{
  *this = off_1003543F0;
  *(_QWORD *)((char *)this + 188) = 0;
  return this;
}

_QWORD *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(_QWORD *this)
{
  *this = off_1003542D8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003542D8;
  this[1] = 0;
  return this;
}

_QWORD *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(_QWORD *this)
{
  *this = off_100354310;
  this[1] = 0;
  return this;
}

{
  *this = off_100354310;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::Item::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Base *v17;
  const PB::Base *v18;
  const PB::Base *v19;
  const PB::Base *v20;
  const PB::Base *v21;
  const PB::Base *v22;
  const PB::Base *v23;
  const PB::Base *v24;
  const PB::Base *v25;
  const PB::Base *v26;
  const PB::Base *v27;
  const PB::Base *v28;
  const PB::Base *v29;
  const PB::Base *v30;
  const PB::Base *v31;
  const PB::Base *v32;
  const PB::Base *v33;
  const PB::Base *v34;
  const PB::Base *v35;
  const PB::Base *v36;
  const PB::Base *v37;
  const PB::Base *v38;
  const PB::Base *v39;
  const PB::Base *v40;
  const PB::Base *v41;
  const PB::Base *v42;
  const PB::Base *v43;
  const PB::Base *v44;
  const PB::Base *v45;
  const PB::Base *v46;
  const PB::Base *v47;
  const PB::Base *v48;
  const PB::Base *v49;
  const PB::Base *v50;
  const PB::Base *v51;
  const PB::Base *v52;
  const PB::Base *v53;
  const PB::Base *v54;
  const PB::Base *v55;
  const PB::Base *v56;
  const PB::Base *v57;
  const PB::Base *v58;
  const PB::Base *v59;
  const PB::Base *v60;
  const PB::Base *v61;
  const PB::Base *v62;
  const PB::Base *v63;
  const PB::Base *v64;
  const PB::Base *v65;
  const PB::Base *v66;
  const PB::Base *v67;
  const PB::Base *v68;
  const PB::Base *v69;
  const PB::Base *v70;
  const PB::Base *v71;
  const PB::Base *v72;
  const PB::Base *v73;
  const PB::Base *v74;
  const PB::Base *v75;
  const PB::Base *v76;
  const PB::Base *v77;
  const PB::Base *v78;
  const PB::Base *v79;
  const PB::Base *v80;
  const PB::Base *v81;
  const PB::Base *v82;
  const PB::Base *v83;
  const PB::Base *v84;
  const PB::Base *v85;
  const PB::Base *v86;
  const PB::Base *v87;
  const PB::Base *v88;
  const PB::Base *v89;
  const PB::Base *v90;
  const PB::Base *v91;
  const PB::Base *v92;
  const PB::Base *v93;
  const PB::Base *v94;
  const PB::Base *v95;
  const PB::Base *v96;
  const PB::Base *v97;
  const PB::Base *v98;
  const PB::Base *v99;
  const PB::Base *v100;
  const PB::Base *v101;
  const PB::Base *v102;
  const PB::Base *v103;
  const PB::Base *v104;
  const PB::Base *v105;
  const PB::Base *v106;
  const PB::Base *v107;
  const PB::Base *v108;
  const PB::Base *v109;
  const PB::Base *v110;
  const PB::Base *v111;
  const PB::Base *v112;
  const PB::Base *v113;
  const PB::Base *v114;
  const PB::Base *v115;
  const PB::Base *v116;
  const PB::Base *v117;
  const PB::Base *v118;
  const PB::Base *v119;
  const PB::Base *v120;
  const PB::Base *v121;
  const PB::Base *v122;
  const PB::Base *v123;
  const PB::Base *v124;
  const PB::Base *v125;
  const PB::Base *v126;
  const PB::Base *v127;
  const PB::Base *v128;
  const PB::Base *v129;
  const PB::Base *v130;
  const PB::Base *v131;
  const PB::Base *v132;
  const PB::Base *v133;
  const PB::Base *v134;
  const PB::Base *v135;
  const PB::Base *v136;
  const PB::Base *v137;
  const PB::Base *v138;
  const PB::Base *v139;
  const PB::Base *v140;
  const PB::Base *v141;
  const PB::Base *v142;
  const PB::Base *v143;
  const PB::Base *v144;
  const PB::Base *v145;
  const PB::Base *v146;
  const PB::Base *v147;
  const PB::Base *v148;
  const PB::Base *v149;
  const PB::Base *v150;
  const PB::Base *v151;
  const PB::Base *v152;
  const PB::Base *v153;
  const PB::Base *v154;
  const PB::Base *v155;
  const PB::Base *v156;
  const PB::Base *v157;
  const PB::Base *v158;
  const PB::Base *v159;
  const PB::Base *v160;
  const PB::Base *v161;
  const PB::Base *v162;
  const PB::Base *v163;
  const PB::Base *v164;
  const PB::Base *v165;
  const PB::Base *v166;
  const PB::Base *v167;
  const PB::Base *v168;
  const PB::Base *v169;
  const PB::Base *v170;
  const PB::Base *v171;
  const PB::Base *v172;
  const PB::Base *v173;
  const PB::Base *v174;
  const PB::Base *v175;
  const PB::Base *v176;
  const PB::Base *v177;
  const PB::Base *v178;
  const PB::Base *v179;
  const PB::Base *v180;
  const PB::Base *v181;
  const PB::Base *v182;
  const PB::Base *v183;
  const PB::Base *v184;
  const PB::Base *v185;
  const PB::Base *v186;
  const PB::Base *v187;
  const PB::Base *v188;
  const PB::Base *v189;
  const PB::Base *v190;
  const PB::Base *v191;
  const PB::Base *v192;
  const PB::Base *v193;
  const PB::Base *v194;
  const PB::Base *v195;
  const PB::Base *v196;
  const PB::Base *v197;
  const PB::Base *v198;
  const PB::Base *v199;
  const PB::Base *v200;
  const PB::Base *v201;
  const PB::Base *v202;
  const PB::Base *v203;
  const PB::Base *v204;
  const PB::Base *v205;
  const PB::Base *v206;
  const PB::Base *v207;
  const PB::Base *v208;
  const PB::Base *v209;
  const PB::Base *v210;
  const PB::Base *v211;
  const PB::Base *v212;
  const PB::Base *v213;
  const PB::Base *v214;
  const PB::Base *v215;
  const PB::Base *v216;
  const PB::Base *v217;
  const PB::Base *v218;
  const PB::Base *v219;
  const PB::Base *v220;
  const PB::Base *v221;
  const PB::Base *v222;
  const PB::Base *v223;
  const PB::Base *v224;
  const PB::Base *v225;
  const PB::Base *v226;
  const PB::Base *v227;
  const PB::Base *v228;
  const PB::Base *v229;
  const PB::Base *v230;
  const PB::Base *v231;
  const PB::Base *v232;
  const PB::Base *v233;
  const PB::Base *v234;
  const PB::Base *v235;
  const PB::Base *v236;
  const PB::Base *v237;
  const PB::Base *v238;
  const PB::Base *v239;
  const PB::Base *v240;
  const PB::Base *v241;
  const PB::Base *v242;
  const PB::Base *v243;
  const PB::Base *v244;
  const PB::Base *v245;
  const PB::Base *v246;
  const PB::Base *v247;
  const PB::Base *v248;
  const PB::Base *v249;
  const PB::Base *v250;
  const PB::Base *v251;
  const PB::Base *v252;
  const PB::Base *v253;
  const PB::Base *v254;
  const PB::Base *v255;
  const PB::Base *v256;
  const PB::Base *v257;
  const PB::Base *v258;
  const PB::Base *v259;
  const PB::Base *v260;
  const PB::Base *v261;
  const PB::Base *v262;
  const PB::Base *v263;
  const PB::Base *v264;
  const PB::Base *v265;
  const PB::Base *v266;
  const PB::Base *v267;
  const PB::Base *v268;
  const PB::Base *v269;
  const PB::Base *v270;
  const PB::Base *v271;
  const PB::Base *v272;
  const PB::Base *v273;
  const PB::Base *v274;
  const PB::Base *v275;
  const PB::Base *v276;
  const PB::Base *v277;
  const PB::Base *v278;
  const PB::Base *v279;
  const PB::Base *v280;
  const PB::Base *v281;
  const PB::Base *v282;
  const PB::Base *v283;
  const PB::Base *v284;
  const PB::Base *v285;
  const PB::Base *v286;
  const PB::Base *v287;
  const PB::Base *v288;
  const PB::Base *v289;
  const PB::Base *v290;
  const PB::Base *v291;
  const PB::Base *v292;
  const PB::Base *v293;
  const PB::Base *v294;
  const PB::Base *v295;
  const PB::Base *v296;
  const PB::Base *v297;
  const PB::Base *v298;
  const PB::Base *v299;
  const PB::Base *v300;
  const PB::Base *v301;
  const PB::Base *v302;
  const PB::Base *v303;
  const PB::Base *v304;
  const PB::Base *v305;
  const PB::Base *v306;
  const PB::Base *v307;
  const PB::Base *v308;
  const PB::Base *v309;
  const PB::Base *v310;
  const PB::Base *v311;
  const PB::Base *v312;
  const PB::Base *v313;
  const PB::Base *v314;
  const PB::Base *v315;
  const PB::Base *v316;
  const PB::Base *v317;
  const PB::Base *v318;
  const PB::Base *v319;
  const PB::Base *v320;
  const PB::Base *v321;
  const PB::Base *v322;
  const PB::Base *v323;
  const PB::Base *v324;
  const PB::Base *v325;
  const PB::Base *v326;
  const PB::Base *v327;
  const PB::Base *v328;
  const PB::Base *v329;
  const PB::Base *v330;
  const PB::Base *v331;
  const PB::Base *v332;
  const PB::Base *v333;
  const PB::Base *v334;
  const PB::Base *v335;
  const PB::Base *v336;
  const PB::Base *v337;
  const PB::Base *v338;
  const PB::Base *v339;
  const PB::Base *v340;
  const PB::Base *v341;
  const PB::Base *v342;
  const PB::Base *v343;
  const PB::Base *v344;
  const PB::Base *v345;
  const PB::Base *v346;
  const PB::Base *v347;
  const PB::Base *v348;
  const PB::Base *v349;
  const PB::Base *v350;
  const PB::Base *v351;
  const PB::Base *v352;
  const PB::Base *v353;
  const PB::Base *v354;
  const PB::Base *v355;
  const PB::Base *v356;
  const PB::Base *v357;
  const PB::Base *v358;
  const PB::Base *v359;
  const PB::Base *v360;
  const PB::Base *v361;
  const PB::Base *v362;
  const PB::Base *v363;
  const PB::Base *v364;
  const PB::Base *v365;
  const PB::Base *v366;
  const PB::Base *v367;
  const PB::Base *v368;
  const PB::Base *v369;
  const PB::Base *v370;
  const PB::Base *v371;
  const PB::Base *v372;
  const PB::Base *v373;
  const PB::Base *v374;
  const PB::Base *v375;
  const PB::Base *v376;
  const PB::Base *v377;
  const PB::Base *v378;
  const PB::Base *v379;
  const PB::Base *v380;
  const PB::Base *v381;
  const PB::Base *v382;
  const PB::Base *v383;
  const PB::Base *v384;
  const PB::Base *v385;
  const PB::Base *v386;
  const PB::Base *v387;
  const PB::Base *v388;
  const PB::Base *v389;
  const PB::Base *v390;
  const PB::Base *v391;
  const PB::Base *v392;
  const PB::Base *v393;
  const PB::Base *v394;
  const PB::Base *v395;
  const PB::Base *v396;
  const PB::Base *v397;
  const PB::Base *v398;
  const PB::Base *v399;
  const PB::Base *v400;
  const PB::Base *v401;
  const PB::Base *v402;
  const PB::Base *v403;
  const PB::Base *v404;
  const PB::Base *v405;
  const PB::Base *v406;
  const PB::Base *v407;
  const PB::Base *v408;
  const PB::Base *v409;
  const PB::Base *v410;
  const PB::Base *v411;
  const PB::Base *v412;
  const PB::Base *v413;
  const PB::Base *v414;
  const PB::Base *v415;
  const PB::Base *v416;
  const PB::Base *v417;
  const PB::Base *v418;
  const PB::Base *v419;
  const PB::Base *v420;
  const PB::Base *v421;
  const PB::Base *v422;
  const PB::Base *v423;
  const PB::Base *v424;
  const PB::Base *v425;
  const PB::Base *v426;
  const PB::Base *v427;
  const PB::Base *v428;
  const PB::Base *v429;
  const PB::Base *v430;
  const PB::Base *v431;
  const PB::Base *v432;
  const PB::Base *v433;
  const PB::Base *v434;
  const PB::Base *v435;
  const PB::Base *v436;
  const PB::Base *v437;
  const PB::Base *v438;
  const PB::Base *v439;
  const PB::Base *v440;
  const PB::Base *v441;
  const PB::Base *v442;
  const PB::Base *v443;
  const PB::Base *v444;
  const PB::Base *v445;
  const PB::Base *v446;
  const PB::Base *v447;
  const PB::Base *v448;
  const PB::Base *v449;
  const PB::Base *v450;
  const PB::Base *v451;
  const PB::Base *v452;
  const PB::Base *v453;

  v3 = (_QWORD *)this;
  if ((*(_BYTE *)(this + 3616) & 1) != 0)
    this = PB::Writer::write(a2, *(double *)(this + 616), 1u);
  v4 = (const PB::Base *)v3[146];
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4, 2u);
  v5 = (const PB::Base *)v3[145];
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  v6 = (const PB::Base *)v3[142];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  v7 = (const PB::Base *)v3[141];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7, 5u);
  v8 = (const PB::Base *)v3[85];
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8, 6u);
  v9 = (const PB::Base *)v3[84];
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9, 7u);
  v10 = (const PB::Base *)v3[91];
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10, 8u);
  v11 = (const PB::Base *)v3[90];
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11, 9u);
  v12 = (const PB::Base *)v3[180];
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12, 0xAu);
  v13 = (const PB::Base *)v3[95];
  if (v13)
    this = PB::Writer::writeSubmessage(a2, v13, 0xBu);
  v14 = (const PB::Base *)v3[11];
  if (v14)
    this = PB::Writer::writeSubmessage(a2, v14, 0x10u);
  v15 = (const PB::Base *)v3[18];
  if (v15)
    this = PB::Writer::writeSubmessage(a2, v15, 0x11u);
  v16 = (const PB::Base *)v3[27];
  if (v16)
    this = PB::Writer::writeSubmessage(a2, v16, 0x12u);
  v17 = (const PB::Base *)v3[431];
  if (v17)
    this = PB::Writer::writeSubmessage(a2, v17, 0x13u);
  v18 = (const PB::Base *)v3[434];
  if (v18)
    this = PB::Writer::writeSubmessage(a2, v18, 0x14u);
  v19 = (const PB::Base *)v3[436];
  if (v19)
    this = PB::Writer::writeSubmessage(a2, v19, 0x15u);
  v20 = (const PB::Base *)v3[440];
  if (v20)
    this = PB::Writer::writeSubmessage(a2, v20, 0x16u);
  v21 = (const PB::Base *)v3[444];
  if (v21)
    this = PB::Writer::writeSubmessage(a2, v21, 0x17u);
  v22 = (const PB::Base *)v3[442];
  if (v22)
    this = PB::Writer::writeSubmessage(a2, v22, 0x18u);
  v23 = (const PB::Base *)v3[448];
  if (v23)
    this = PB::Writer::writeSubmessage(a2, v23, 0x19u);
  v24 = (const PB::Base *)v3[415];
  if (v24)
    this = PB::Writer::writeSubmessage(a2, v24, 0x1Au);
  v25 = (const PB::Base *)v3[68];
  if (v25)
    this = PB::Writer::writeSubmessage(a2, v25, 0x1Bu);
  v26 = (const PB::Base *)v3[69];
  if (v26)
    this = PB::Writer::writeSubmessage(a2, v26, 0x1Cu);
  v27 = (const PB::Base *)v3[70];
  if (v27)
    this = PB::Writer::writeSubmessage(a2, v27, 0x1Du);
  v28 = (const PB::Base *)v3[67];
  if (v28)
    this = PB::Writer::writeSubmessage(a2, v28, 0x1Eu);
  v29 = (const PB::Base *)v3[71];
  if (v29)
    this = PB::Writer::writeSubmessage(a2, v29, 0x1Fu);
  v30 = (const PB::Base *)v3[439];
  if (v30)
    this = PB::Writer::writeSubmessage(a2, v30, 0x20u);
  v31 = (const PB::Base *)v3[288];
  if (v31)
    this = PB::Writer::writeSubmessage(a2, v31, 0x21u);
  v32 = (const PB::Base *)v3[340];
  if (v32)
    this = PB::Writer::writeSubmessage(a2, v32, 0x22u);
  v33 = (const PB::Base *)v3[446];
  if (v33)
    this = PB::Writer::writeSubmessage(a2, v33, 0x23u);
  v34 = (const PB::Base *)v3[425];
  if (v34)
    this = PB::Writer::writeSubmessage(a2, v34, 0x24u);
  v35 = (const PB::Base *)v3[76];
  if (v35)
    this = PB::Writer::writeSubmessage(a2, v35, 0x25u);
  v36 = (const PB::Base *)v3[427];
  if (v36)
    this = PB::Writer::writeSubmessage(a2, v36, 0x26u);
  v37 = (const PB::Base *)v3[176];
  if (v37)
    this = PB::Writer::writeSubmessage(a2, v37, 0x27u);
  v38 = (const PB::Base *)v3[174];
  if (v38)
    this = PB::Writer::writeSubmessage(a2, v38, 0x28u);
  v39 = (const PB::Base *)v3[169];
  if (v39)
    this = PB::Writer::writeSubmessage(a2, v39, 0x29u);
  v40 = (const PB::Base *)v3[28];
  if (v40)
    this = PB::Writer::writeSubmessage(a2, v40, 0x2Au);
  v41 = (const PB::Base *)v3[29];
  if (v41)
    this = PB::Writer::writeSubmessage(a2, v41, 0x2Bu);
  v42 = (const PB::Base *)v3[34];
  if (v42)
    this = PB::Writer::writeSubmessage(a2, v42, 0x2Cu);
  v43 = (const PB::Base *)v3[114];
  if (v43)
    this = PB::Writer::writeSubmessage(a2, v43, 0x2Du);
  v44 = (const PB::Base *)v3[447];
  if (v44)
    this = PB::Writer::writeSubmessage(a2, v44, 0x2Eu);
  v45 = (const PB::Base *)v3[443];
  if (v45)
    this = PB::Writer::writeSubmessage(a2, v45, 0x2Fu);
  v46 = (const PB::Base *)v3[168];
  if (v46)
    this = PB::Writer::writeSubmessage(a2, v46, 0x30u);
  v47 = (const PB::Base *)v3[410];
  if (v47)
    this = PB::Writer::writeSubmessage(a2, v47, 0x31u);
  v48 = (const PB::Base *)v3[44];
  if (v48)
    this = PB::Writer::writeSubmessage(a2, v48, 0x32u);
  v49 = (const PB::Base *)v3[407];
  if (v49)
    this = PB::Writer::writeSubmessage(a2, v49, 0x33u);
  v50 = (const PB::Base *)v3[235];
  if (v50)
    this = PB::Writer::writeSubmessage(a2, v50, 0x34u);
  v51 = (const PB::Base *)v3[125];
  if (v51)
    this = PB::Writer::writeSubmessage(a2, v51, 0x35u);
  v52 = (const PB::Base *)v3[10];
  if (v52)
    this = PB::Writer::writeSubmessage(a2, v52, 0x36u);
  v53 = (const PB::Base *)v3[259];
  if (v53)
    this = PB::Writer::writeSubmessage(a2, v53, 0x37u);
  v54 = (const PB::Base *)v3[379];
  if (v54)
    this = PB::Writer::writeSubmessage(a2, v54, 0x38u);
  v55 = (const PB::Base *)v3[245];
  if (v55)
    this = PB::Writer::writeSubmessage(a2, v55, 0x39u);
  v56 = (const PB::Base *)v3[89];
  if (v56)
    this = PB::Writer::writeSubmessage(a2, v56, 0x3Au);
  v57 = (const PB::Base *)v3[408];
  if (v57)
    this = PB::Writer::writeSubmessage(a2, v57, 0x3Bu);
  v58 = (const PB::Base *)v3[356];
  if (v58)
    this = PB::Writer::writeSubmessage(a2, v58, 0x3Cu);
  v59 = (const PB::Base *)v3[409];
  if (v59)
    this = PB::Writer::writeSubmessage(a2, v59, 0x3Du);
  v60 = (const PB::Base *)v3[414];
  if (v60)
    this = PB::Writer::writeSubmessage(a2, v60, 0x3Eu);
  v61 = (const PB::Base *)v3[219];
  if (v61)
    this = PB::Writer::writeSubmessage(a2, v61, 0x3Fu);
  v62 = (const PB::Base *)v3[194];
  if (v62)
    this = PB::Writer::writeSubmessage(a2, v62, 0x40u);
  v63 = (const PB::Base *)v3[166];
  if (v63)
    this = PB::Writer::writeSubmessage(a2, v63, 0x41u);
  v64 = (const PB::Base *)v3[215];
  if (v64)
    this = PB::Writer::writeSubmessage(a2, v64, 0x42u);
  v65 = (const PB::Base *)v3[397];
  if (v65)
    this = PB::Writer::writeSubmessage(a2, v65, 0x43u);
  v66 = (const PB::Base *)v3[210];
  if (v66)
    this = PB::Writer::writeSubmessage(a2, v66, 0x44u);
  v67 = (const PB::Base *)v3[16];
  if (v67)
    this = PB::Writer::writeSubmessage(a2, v67, 0x64u);
  v68 = (const PB::Base *)v3[398];
  if (v68)
    this = PB::Writer::writeSubmessage(a2, v68, 0x65u);
  v69 = (const PB::Base *)v3[47];
  if (v69)
    this = PB::Writer::writeSubmessage(a2, v69, 0x66u);
  v70 = (const PB::Base *)v3[391];
  if (v70)
    this = PB::Writer::writeSubmessage(a2, v70, 0x67u);
  v71 = (const PB::Base *)v3[46];
  if (v71)
    this = PB::Writer::writeSubmessage(a2, v71, 0x68u);
  v72 = (const PB::Base *)v3[392];
  if (v72)
    this = PB::Writer::writeSubmessage(a2, v72, 0x69u);
  v73 = (const PB::Base *)v3[432];
  if (v73)
    this = PB::Writer::writeSubmessage(a2, v73, 0x6Au);
  v74 = (const PB::Base *)v3[37];
  if (v74)
    this = PB::Writer::writeSubmessage(a2, v74, 0x6Bu);
  v75 = (const PB::Base *)v3[430];
  if (v75)
    this = PB::Writer::writeSubmessage(a2, v75, 0x6Cu);
  v76 = (const PB::Base *)v3[411];
  if (v76)
    this = PB::Writer::writeSubmessage(a2, v76, 0x6Du);
  v77 = (const PB::Base *)v3[155];
  if (v77)
    this = PB::Writer::writeSubmessage(a2, v77, 0x6Eu);
  v78 = (const PB::Base *)v3[367];
  if (v78)
    this = PB::Writer::writeSubmessage(a2, v78, 0x6Fu);
  v79 = (const PB::Base *)v3[131];
  if (v79)
    this = PB::Writer::writeSubmessage(a2, v79, 0x70u);
  v80 = (const PB::Base *)v3[109];
  if (v80)
    this = PB::Writer::writeSubmessage(a2, v80, 0x71u);
  v81 = (const PB::Base *)v3[4];
  if (v81)
    this = PB::Writer::writeSubmessage(a2, v81, 0x72u);
  v82 = (const PB::Base *)v3[253];
  if (v82)
    this = PB::Writer::writeSubmessage(a2, v82, 0x73u);
  v83 = (const PB::Base *)v3[248];
  if (v83)
    this = PB::Writer::writeSubmessage(a2, v83, 0x74u);
  v84 = (const PB::Base *)v3[62];
  if (v84)
    this = PB::Writer::writeSubmessage(a2, v84, 0x75u);
  v85 = (const PB::Base *)v3[217];
  if (v85)
    this = PB::Writer::writeSubmessage(a2, v85, 0x76u);
  v86 = (const PB::Base *)v3[333];
  if (v86)
    this = PB::Writer::writeSubmessage(a2, v86, 0x77u);
  v87 = (const PB::Base *)v3[183];
  if (v87)
    this = PB::Writer::writeSubmessage(a2, v87, 0x78u);
  v88 = (const PB::Base *)v3[88];
  if (v88)
    this = PB::Writer::writeSubmessage(a2, v88, 0x79u);
  v89 = (const PB::Base *)v3[151];
  if (v89)
    this = PB::Writer::writeSubmessage(a2, v89, 0x7Au);
  v90 = (const PB::Base *)v3[152];
  if (v90)
    this = PB::Writer::writeSubmessage(a2, v90, 0x7Bu);
  v91 = (const PB::Base *)v3[150];
  if (v91)
    this = PB::Writer::writeSubmessage(a2, v91, 0x7Cu);
  v92 = (const PB::Base *)v3[149];
  if (v92)
    this = PB::Writer::writeSubmessage(a2, v92, 0x7Du);
  v93 = (const PB::Base *)v3[59];
  if (v93)
    this = PB::Writer::writeSubmessage(a2, v93, 0x7Eu);
  v94 = (const PB::Base *)v3[132];
  if (v94)
    this = PB::Writer::writeSubmessage(a2, v94, 0x7Fu);
  v95 = (const PB::Base *)v3[247];
  if (v95)
    this = PB::Writer::writeSubmessage(a2, v95, 0x80u);
  v96 = (const PB::Base *)v3[236];
  if (v96)
    this = PB::Writer::writeSubmessage(a2, v96, 0x81u);
  v97 = (const PB::Base *)v3[304];
  if (v97)
    this = PB::Writer::writeSubmessage(a2, v97, 0x82u);
  v98 = (const PB::Base *)v3[305];
  if (v98)
    this = PB::Writer::writeSubmessage(a2, v98, 0x83u);
  v99 = (const PB::Base *)v3[63];
  if (v99)
    this = PB::Writer::writeSubmessage(a2, v99, 0x84u);
  v100 = (const PB::Base *)v3[184];
  if (v100)
    this = PB::Writer::writeSubmessage(a2, v100, 0x85u);
  v101 = (const PB::Base *)v3[87];
  if (v101)
    this = PB::Writer::writeSubmessage(a2, v101, 0x86u);
  v102 = (const PB::Base *)v3[318];
  if (v102)
    this = PB::Writer::writeSubmessage(a2, v102, 0x87u);
  v103 = (const PB::Base *)v3[416];
  if (v103)
    this = PB::Writer::writeSubmessage(a2, v103, 0x88u);
  v104 = (const PB::Base *)v3[238];
  if (v104)
    this = PB::Writer::writeSubmessage(a2, v104, 0x8Bu);
  v105 = (const PB::Base *)v3[239];
  if (v105)
    this = PB::Writer::writeSubmessage(a2, v105, 0x8Cu);
  v106 = (const PB::Base *)v3[317];
  if (v106)
    this = PB::Writer::writeSubmessage(a2, v106, 0x8Du);
  v107 = (const PB::Base *)v3[441];
  if (v107)
    this = PB::Writer::writeSubmessage(a2, v107, 0x8Eu);
  v108 = (const PB::Base *)v3[435];
  if (v108)
    this = PB::Writer::writeSubmessage(a2, v108, 0x8Fu);
  v109 = (const PB::Base *)v3[332];
  if (v109)
    this = PB::Writer::writeSubmessage(a2, v109, 0x90u);
  v110 = (const PB::Base *)v3[73];
  if (v110)
    this = PB::Writer::writeSubmessage(a2, v110, 0x91u);
  v111 = (const PB::Base *)v3[60];
  if (v111)
    this = PB::Writer::writeSubmessage(a2, v111, 0x94u);
  v112 = (const PB::Base *)v3[61];
  if (v112)
    this = PB::Writer::writeSubmessage(a2, v112, 0x96u);
  v113 = (const PB::Base *)v3[266];
  if (v113)
    this = PB::Writer::writeSubmessage(a2, v113, 0x97u);
  v114 = (const PB::Base *)v3[299];
  if (v114)
    this = PB::Writer::writeSubmessage(a2, v114, 0x98u);
  v115 = (const PB::Base *)v3[300];
  if (v115)
    this = PB::Writer::writeSubmessage(a2, v115, 0x99u);
  v116 = (const PB::Base *)v3[48];
  if (v116)
    this = PB::Writer::writeSubmessage(a2, v116, 0x9Au);
  v117 = (const PB::Base *)v3[393];
  if (v117)
    this = PB::Writer::writeSubmessage(a2, v117, 0x9Bu);
  v118 = (const PB::Base *)v3[43];
  if (v118)
    this = PB::Writer::writeSubmessage(a2, v118, 0x9Cu);
  v119 = (const PB::Base *)v3[58];
  if (v119)
    this = PB::Writer::writeSubmessage(a2, v119, 0x9Du);
  v120 = (const PB::Base *)v3[64];
  if (v120)
    this = PB::Writer::writeSubmessage(a2, v120, 0x9Eu);
  v121 = (const PB::Base *)v3[420];
  if (v121)
    this = PB::Writer::writeSubmessage(a2, v121, 0x9Fu);
  v122 = (const PB::Base *)v3[375];
  if (v122)
    this = PB::Writer::writeSubmessage(a2, v122, 0xA0u);
  v123 = (const PB::Base *)v3[370];
  if (v123)
    this = PB::Writer::writeSubmessage(a2, v123, 0xA1u);
  v124 = (const PB::Base *)v3[373];
  if (v124)
    this = PB::Writer::writeSubmessage(a2, v124, 0xA2u);
  v125 = (const PB::Base *)v3[372];
  if (v125)
    this = PB::Writer::writeSubmessage(a2, v125, 0xA3u);
  v126 = (const PB::Base *)v3[376];
  if (v126)
    this = PB::Writer::writeSubmessage(a2, v126, 0xA4u);
  v127 = (const PB::Base *)v3[377];
  if (v127)
    this = PB::Writer::writeSubmessage(a2, v127, 0xA5u);
  v128 = (const PB::Base *)v3[371];
  if (v128)
    this = PB::Writer::writeSubmessage(a2, v128, 0xA6u);
  v129 = (const PB::Base *)v3[242];
  if (v129)
    this = PB::Writer::writeSubmessage(a2, v129, 0xA7u);
  v130 = (const PB::Base *)v3[445];
  if (v130)
    this = PB::Writer::writeSubmessage(a2, v130, 0xA8u);
  v131 = (const PB::Base *)v3[230];
  if (v131)
    this = PB::Writer::writeSubmessage(a2, v131, 0xA9u);
  v132 = (const PB::Base *)v3[24];
  if (v132)
    this = PB::Writer::writeSubmessage(a2, v132, 0xAAu);
  v133 = (const PB::Base *)v3[380];
  if (v133)
    this = PB::Writer::writeSubmessage(a2, v133, 0xABu);
  v134 = (const PB::Base *)v3[381];
  if (v134)
    this = PB::Writer::writeSubmessage(a2, v134, 0xACu);
  v135 = (const PB::Base *)v3[363];
  if (v135)
    this = PB::Writer::writeSubmessage(a2, v135, 0xADu);
  v136 = (const PB::Base *)v3[92];
  if (v136)
    this = PB::Writer::writeSubmessage(a2, v136, 0xAEu);
  v137 = (const PB::Base *)v3[111];
  if (v137)
    this = PB::Writer::writeSubmessage(a2, v137, 0xAFu);
  v138 = (const PB::Base *)v3[57];
  if (v138)
    this = PB::Writer::writeSubmessage(a2, v138, 0xB0u);
  v139 = (const PB::Base *)v3[234];
  if (v139)
    this = PB::Writer::writeSubmessage(a2, v139, 0xB1u);
  v140 = (const PB::Base *)v3[56];
  if (v140)
    this = PB::Writer::writeSubmessage(a2, v140, 0xB2u);
  v141 = (const PB::Base *)v3[308];
  if (v141)
    this = PB::Writer::writeSubmessage(a2, v141, 0xB3u);
  v142 = (const PB::Base *)v3[130];
  if (v142)
    this = PB::Writer::writeSubmessage(a2, v142, 0xB4u);
  v143 = (const PB::Base *)v3[98];
  if (v143)
    this = PB::Writer::writeSubmessage(a2, v143, 0xB5u);
  v144 = (const PB::Base *)v3[1];
  if (v144)
    this = PB::Writer::writeSubmessage(a2, v144, 0xB6u);
  v145 = (const PB::Base *)v3[2];
  if (v145)
    this = PB::Writer::writeSubmessage(a2, v145, 0xB7u);
  v146 = (const PB::Base *)v3[40];
  if (v146)
    this = PB::Writer::writeSubmessage(a2, v146, 0xB8u);
  v147 = (const PB::Base *)v3[231];
  if (v147)
    this = PB::Writer::writeSubmessage(a2, v147, 0xB9u);
  v148 = (const PB::Base *)v3[406];
  if (v148)
    this = PB::Writer::writeSubmessage(a2, v148, 0xBAu);
  v149 = (const PB::Base *)v3[343];
  if (v149)
    this = PB::Writer::writeSubmessage(a2, v149, 0xBBu);
  v150 = (const PB::Base *)v3[450];
  if (v150)
    this = PB::Writer::writeSubmessage(a2, v150, 0xBCu);
  v151 = (const PB::Base *)v3[449];
  if (v151)
    this = PB::Writer::writeSubmessage(a2, v151, 0xBDu);
  v152 = (const PB::Base *)v3[45];
  if (v152)
    this = PB::Writer::writeSubmessage(a2, v152, 0xBEu);
  v153 = (const PB::Base *)v3[281];
  if (v153)
    this = PB::Writer::writeSubmessage(a2, v153, 0xBFu);
  v154 = (const PB::Base *)v3[303];
  if (v154)
    this = PB::Writer::writeSubmessage(a2, v154, 0xC0u);
  v155 = (const PB::Base *)v3[229];
  if (v155)
    this = PB::Writer::writeSubmessage(a2, v155, 0xC1u);
  v156 = (const PB::Base *)v3[232];
  if (v156)
    this = PB::Writer::writeSubmessage(a2, v156, 0xC2u);
  v157 = (const PB::Base *)v3[344];
  if (v157)
    this = PB::Writer::writeSubmessage(a2, v157, 0xC3u);
  v158 = (const PB::Base *)v3[51];
  if (v158)
    this = PB::Writer::writeSubmessage(a2, v158, 0xC4u);
  v159 = (const PB::Base *)v3[52];
  if (v159)
    this = PB::Writer::writeSubmessage(a2, v159, 0xC5u);
  v160 = (const PB::Base *)v3[250];
  if (v160)
    this = PB::Writer::writeSubmessage(a2, v160, 0xC6u);
  v161 = (const PB::Base *)v3[269];
  if (v161)
    this = PB::Writer::writeSubmessage(a2, v161, 0xC7u);
  v162 = (const PB::Base *)v3[9];
  if (v162)
    this = PB::Writer::writeSubmessage(a2, v162, 0xC8u);
  v163 = (const PB::Base *)v3[104];
  if (v163)
    this = PB::Writer::writeSubmessage(a2, v163, 0xC9u);
  v164 = (const PB::Base *)v3[282];
  if (v164)
    this = PB::Writer::writeSubmessage(a2, v164, 0xCAu);
  v165 = (const PB::Base *)v3[136];
  if (v165)
    this = PB::Writer::writeSubmessage(a2, v165, 0xCBu);
  v166 = (const PB::Base *)v3[137];
  if (v166)
    this = PB::Writer::writeSubmessage(a2, v166, 0xCCu);
  v167 = (const PB::Base *)v3[135];
  if (v167)
    this = PB::Writer::writeSubmessage(a2, v167, 0xCDu);
  v168 = (const PB::Base *)v3[112];
  if (v168)
    this = PB::Writer::writeSubmessage(a2, v168, 0xCEu);
  v169 = (const PB::Base *)v3[433];
  if (v169)
    this = PB::Writer::writeSubmessage(a2, v169, 0xCFu);
  v170 = (const PB::Base *)v3[386];
  if (v170)
    this = PB::Writer::writeSubmessage(a2, v170, 0xD0u);
  v171 = (const PB::Base *)v3[346];
  if (v171)
    this = PB::Writer::writeSubmessage(a2, v171, 0xD1u);
  v172 = (const PB::Base *)v3[327];
  if (v172)
    this = PB::Writer::writeSubmessage(a2, v172, 0xD2u);
  v173 = (const PB::Base *)v3[224];
  if (v173)
    this = PB::Writer::writeSubmessage(a2, v173, 0xD4u);
  v174 = (const PB::Base *)v3[225];
  if (v174)
    this = PB::Writer::writeSubmessage(a2, v174, 0xD5u);
  v175 = (const PB::Base *)v3[38];
  if (v175)
    this = PB::Writer::writeSubmessage(a2, v175, 0xD6u);
  v176 = (const PB::Base *)v3[223];
  if (v176)
    this = PB::Writer::writeSubmessage(a2, v176, 0xD7u);
  v177 = (const PB::Base *)v3[417];
  if (v177)
    this = PB::Writer::writeSubmessage(a2, v177, 0xD8u);
  v178 = (const PB::Base *)v3[325];
  if (v178)
    this = PB::Writer::writeSubmessage(a2, v178, 0xD9u);
  v179 = (const PB::Base *)v3[54];
  if (v179)
    this = PB::Writer::writeSubmessage(a2, v179, 0xDAu);
  v180 = (const PB::Base *)v3[339];
  if (v180)
    this = PB::Writer::writeSubmessage(a2, v180, 0xDBu);
  v181 = (const PB::Base *)v3[226];
  if (v181)
    this = PB::Writer::writeSubmessage(a2, v181, 0xDCu);
  v182 = (const PB::Base *)v3[222];
  if (v182)
    this = PB::Writer::writeSubmessage(a2, v182, 0xDDu);
  v183 = (const PB::Base *)v3[50];
  if (v183)
    this = PB::Writer::writeSubmessage(a2, v183, 0xDEu);
  v184 = (const PB::Base *)v3[55];
  if (v184)
    this = PB::Writer::writeSubmessage(a2, v184, 0xDFu);
  v185 = (const PB::Base *)v3[165];
  if (v185)
    this = PB::Writer::writeSubmessage(a2, v185, 0xE0u);
  v186 = (const PB::Base *)v3[362];
  if (v186)
    this = PB::Writer::writeSubmessage(a2, v186, 0xE1u);
  v187 = (const PB::Base *)v3[365];
  if (v187)
    this = PB::Writer::writeSubmessage(a2, v187, 0xE2u);
  v188 = (const PB::Base *)v3[364];
  if (v188)
    this = PB::Writer::writeSubmessage(a2, v188, 0xE3u);
  v189 = (const PB::Base *)v3[129];
  if (v189)
    this = PB::Writer::writeSubmessage(a2, v189, 0xE4u);
  v190 = (const PB::Base *)v3[424];
  if (v190)
    this = PB::Writer::writeSubmessage(a2, v190, 0xE5u);
  v191 = (const PB::Base *)v3[115];
  if (v191)
    this = PB::Writer::writeSubmessage(a2, v191, 0xE6u);
  v192 = (const PB::Base *)v3[421];
  if (v192)
    this = PB::Writer::writeSubmessage(a2, v192, 0xE7u);
  v193 = (const PB::Base *)v3[422];
  if (v193)
    this = PB::Writer::writeSubmessage(a2, v193, 0xE8u);
  v194 = (const PB::Base *)v3[395];
  if (v194)
    this = PB::Writer::writeSubmessage(a2, v194, 0xE9u);
  v195 = (const PB::Base *)v3[139];
  if (v195)
    this = PB::Writer::writeSubmessage(a2, v195, 0xEAu);
  v196 = (const PB::Base *)v3[140];
  if (v196)
    this = PB::Writer::writeSubmessage(a2, v196, 0xEBu);
  v197 = (const PB::Base *)v3[243];
  if (v197)
    this = PB::Writer::writeSubmessage(a2, v197, 0xECu);
  v198 = (const PB::Base *)v3[128];
  if (v198)
    this = PB::Writer::writeSubmessage(a2, v198, 0xEDu);
  v199 = (const PB::Base *)v3[438];
  if (v199)
    this = PB::Writer::writeSubmessage(a2, v199, 0xEEu);
  v200 = (const PB::Base *)v3[14];
  if (v200)
    this = PB::Writer::writeSubmessage(a2, v200, 0xEFu);
  v201 = (const PB::Base *)v3[291];
  if (v201)
    this = PB::Writer::writeSubmessage(a2, v201, 0xF0u);
  v202 = (const PB::Base *)v3[177];
  if (v202)
    this = PB::Writer::writeSubmessage(a2, v202, 0xF1u);
  v203 = (const PB::Base *)v3[301];
  if (v203)
    this = PB::Writer::writeSubmessage(a2, v203, 0xF2u);
  v204 = (const PB::Base *)v3[302];
  if (v204)
    this = PB::Writer::writeSubmessage(a2, v204, 0xF3u);
  v205 = (const PB::Base *)v3[290];
  if (v205)
    this = PB::Writer::writeSubmessage(a2, v205, 0xF4u);
  v206 = (const PB::Base *)v3[108];
  if (v206)
    this = PB::Writer::writeSubmessage(a2, v206, 0xF5u);
  v207 = (const PB::Base *)v3[178];
  if (v207)
    this = PB::Writer::writeSubmessage(a2, v207, 0xF6u);
  v208 = (const PB::Base *)v3[428];
  if (v208)
    this = PB::Writer::writeSubmessage(a2, v208, 0xF7u);
  v209 = (const PB::Base *)v3[294];
  if (v209)
    this = PB::Writer::writeSubmessage(a2, v209, 0xF8u);
  v210 = (const PB::Base *)v3[297];
  if (v210)
    this = PB::Writer::writeSubmessage(a2, v210, 0xF9u);
  v211 = (const PB::Base *)v3[159];
  if (v211)
    this = PB::Writer::writeSubmessage(a2, v211, 0xFAu);
  v212 = (const PB::Base *)v3[374];
  if (v212)
    this = PB::Writer::writeSubmessage(a2, v212, 0xFBu);
  v213 = (const PB::Base *)v3[296];
  if (v213)
    this = PB::Writer::writeSubmessage(a2, v213, 0xFCu);
  v214 = (const PB::Base *)v3[246];
  if (v214)
    this = PB::Writer::writeSubmessage(a2, v214, 0xFDu);
  v215 = (const PB::Base *)v3[423];
  if (v215)
    this = PB::Writer::writeSubmessage(a2, v215, 0xFEu);
  v216 = (const PB::Base *)v3[22];
  if (v216)
    this = PB::Writer::writeSubmessage(a2, v216, 0xFFu);
  v217 = (const PB::Base *)v3[26];
  if (v217)
    this = PB::Writer::writeSubmessage(a2, v217, 0x100u);
  v218 = (const PB::Base *)v3[254];
  if (v218)
    this = PB::Writer::writeSubmessage(a2, v218, 0x101u);
  v219 = (const PB::Base *)v3[97];
  if (v219)
    this = PB::Writer::writeSubmessage(a2, v219, 0x102u);
  v220 = (const PB::Base *)v3[306];
  if (v220)
    this = PB::Writer::writeSubmessage(a2, v220, 0x103u);
  v221 = (const PB::Base *)v3[307];
  if (v221)
    this = PB::Writer::writeSubmessage(a2, v221, 0x104u);
  v222 = (const PB::Base *)v3[167];
  if (v222)
    this = PB::Writer::writeSubmessage(a2, v222, 0x105u);
  v223 = (const PB::Base *)v3[437];
  if (v223)
    this = PB::Writer::writeSubmessage(a2, v223, 0x106u);
  v224 = (const PB::Base *)v3[384];
  if (v224)
    this = PB::Writer::writeSubmessage(a2, v224, 0x107u);
  v225 = (const PB::Base *)v3[396];
  if (v225)
    this = PB::Writer::writeSubmessage(a2, v225, 0x200u);
  v226 = (const PB::Base *)v3[3];
  if (v226)
    this = PB::Writer::writeSubmessage(a2, v226, 0x3E9u);
  v227 = (const PB::Base *)v3[143];
  if (v227)
    this = PB::Writer::writeSubmessage(a2, v227, 0x3EAu);
  v228 = (const PB::Base *)v3[240];
  if (v228)
    this = PB::Writer::writeSubmessage(a2, v228, 0x3EBu);
  v229 = (const PB::Base *)v3[80];
  if (v229)
    this = PB::Writer::writeSubmessage(a2, v229, 0x3ECu);
  v230 = (const PB::Base *)v3[93];
  if (v230)
    this = PB::Writer::writeSubmessage(a2, v230, 0x3EDu);
  v231 = (const PB::Base *)v3[158];
  if (v231)
    this = PB::Writer::writeSubmessage(a2, v231, 0x3EEu);
  v232 = (const PB::Base *)v3[7];
  if (v232)
    this = PB::Writer::writeSubmessage(a2, v232, 0x3EFu);
  v233 = (const PB::Base *)v3[156];
  if (v233)
    this = PB::Writer::writeSubmessage(a2, v233, 0x3F0u);
  v234 = (const PB::Base *)v3[5];
  if (v234)
    this = PB::Writer::writeSubmessage(a2, v234, 0x3F1u);
  v235 = (const PB::Base *)v3[8];
  if (v235)
    this = PB::Writer::writeSubmessage(a2, v235, 0x3F2u);
  v236 = (const PB::Base *)v3[81];
  if (v236)
    this = PB::Writer::writeSubmessage(a2, v236, 0x3F3u);
  v237 = (const PB::Base *)v3[144];
  if (v237)
    this = PB::Writer::writeSubmessage(a2, v237, 0x3F4u);
  v238 = (const PB::Base *)v3[316];
  if (v238)
    this = PB::Writer::writeSubmessage(a2, v238, 0x3F5u);
  v239 = (const PB::Base *)v3[323];
  if (v239)
    this = PB::Writer::writeSubmessage(a2, v239, 0x3F6u);
  v240 = (const PB::Base *)v3[322];
  if (v240)
    this = PB::Writer::writeSubmessage(a2, v240, 0x3F7u);
  v241 = (const PB::Base *)v3[319];
  if (v241)
    this = PB::Writer::writeSubmessage(a2, v241, 0x3F8u);
  v242 = (const PB::Base *)v3[148];
  if (v242)
    this = PB::Writer::writeSubmessage(a2, v242, 0x3F9u);
  v243 = (const PB::Base *)v3[154];
  if (v243)
    this = PB::Writer::writeSubmessage(a2, v243, 0x3FAu);
  v244 = (const PB::Base *)v3[324];
  if (v244)
    this = PB::Writer::writeSubmessage(a2, v244, 0x3FBu);
  v245 = (const PB::Base *)v3[256];
  if (v245)
    this = PB::Writer::writeSubmessage(a2, v245, 0x3FCu);
  v246 = (const PB::Base *)v3[153];
  if (v246)
    this = PB::Writer::writeSubmessage(a2, v246, 0x3FDu);
  v247 = (const PB::Base *)v3[82];
  if (v247)
    this = PB::Writer::writeSubmessage(a2, v247, 0x3FEu);
  v248 = (const PB::Base *)v3[157];
  if (v248)
    this = PB::Writer::writeSubmessage(a2, v248, 0x3FFu);
  v249 = (const PB::Base *)v3[49];
  if (v249)
    this = PB::Writer::writeSubmessage(a2, v249, 0x400u);
  v250 = (const PB::Base *)v3[394];
  if (v250)
    this = PB::Writer::writeSubmessage(a2, v250, 0x401u);
  v251 = (const PB::Base *)v3[355];
  if (v251)
    this = PB::Writer::writeSubmessage(a2, v251, 0x402u);
  v252 = (const PB::Base *)v3[252];
  if (v252)
    this = PB::Writer::writeSubmessage(a2, v252, 0x403u);
  v253 = (const PB::Base *)v3[6];
  if (v253)
    this = PB::Writer::writeSubmessage(a2, v253, 0x404u);
  v254 = (const PB::Base *)v3[233];
  if (v254)
    this = PB::Writer::writeSubmessage(a2, v254, 0x405u);
  v255 = (const PB::Base *)v3[110];
  if (v255)
    this = PB::Writer::writeSubmessage(a2, v255, 0x406u);
  v256 = (const PB::Base *)v3[263];
  if (v256)
    this = PB::Writer::writeSubmessage(a2, v256, 0x407u);
  v257 = (const PB::Base *)v3[262];
  if (v257)
    this = PB::Writer::writeSubmessage(a2, v257, 0x408u);
  v258 = (const PB::Base *)v3[66];
  if (v258)
    this = PB::Writer::writeSubmessage(a2, v258, 0x409u);
  v259 = (const PB::Base *)v3[429];
  if (v259)
    this = PB::Writer::writeSubmessage(a2, v259, 0x40Au);
  v260 = (const PB::Base *)v3[267];
  if (v260)
    this = PB::Writer::writeSubmessage(a2, v260, 0x40Bu);
  v261 = (const PB::Base *)v3[383];
  if (v261)
    this = PB::Writer::writeSubmessage(a2, v261, 0x40Cu);
  v262 = (const PB::Base *)v3[106];
  if (v262)
    this = PB::Writer::writeSubmessage(a2, v262, 0x40Du);
  v263 = (const PB::Base *)v3[251];
  if (v263)
    this = PB::Writer::writeSubmessage(a2, v263, 0x40Eu);
  v264 = (const PB::Base *)v3[258];
  if (v264)
    this = PB::Writer::writeSubmessage(a2, v264, 0x40Fu);
  v265 = (const PB::Base *)v3[385];
  if (v265)
    this = PB::Writer::writeSubmessage(a2, v265, 0x410u);
  v266 = (const PB::Base *)v3[75];
  if (v266)
    this = PB::Writer::writeSubmessage(a2, v266, 0x411u);
  v267 = (const PB::Base *)v3[79];
  if (v267)
    this = PB::Writer::writeSubmessage(a2, v267, 0x412u);
  v268 = (const PB::Base *)v3[264];
  if (v268)
    this = PB::Writer::writeSubmessage(a2, v268, 0x413u);
  v269 = (const PB::Base *)v3[244];
  if (v269)
    this = PB::Writer::writeSubmessage(a2, v269, 0x414u);
  v270 = (const PB::Base *)v3[126];
  if (v270)
    this = PB::Writer::writeSubmessage(a2, v270, 0x415u);
  v271 = (const PB::Base *)v3[53];
  if (v271)
    this = PB::Writer::writeSubmessage(a2, v271, 0x416u);
  v272 = (const PB::Base *)v3[402];
  if (v272)
    this = PB::Writer::writeSubmessage(a2, v272, 0x417u);
  v273 = (const PB::Base *)v3[378];
  if (v273)
    this = PB::Writer::writeSubmessage(a2, v273, 0x418u);
  v274 = (const PB::Base *)v3[426];
  if (v274)
    this = PB::Writer::writeSubmessage(a2, v274, 0x419u);
  v275 = (const PB::Base *)v3[257];
  if (v275)
    this = PB::Writer::writeSubmessage(a2, v275, 0x41Au);
  v276 = (const PB::Base *)v3[255];
  if (v276)
    this = PB::Writer::writeSubmessage(a2, v276, 0x41Bu);
  v277 = (const PB::Base *)v3[265];
  if (v277)
    this = PB::Writer::writeSubmessage(a2, v277, 0x41Cu);
  v278 = (const PB::Base *)v3[321];
  if (v278)
    this = PB::Writer::writeSubmessage(a2, v278, 0x41Du);
  v279 = (const PB::Base *)v3[175];
  if (v279)
    this = PB::Writer::writeSubmessage(a2, v279, 0x800u);
  v280 = (const PB::Base *)v3[78];
  if (v280)
    this = PB::Writer::writeSubmessage(a2, v280, 0x801u);
  v281 = (const PB::Base *)v3[36];
  if (v281)
    this = PB::Writer::writeSubmessage(a2, v281, 0x802u);
  v282 = (const PB::Base *)v3[173];
  if (v282)
    this = PB::Writer::writeSubmessage(a2, v282, 0x803u);
  v283 = (const PB::Base *)v3[171];
  if (v283)
    this = PB::Writer::writeSubmessage(a2, v283, 0x804u);
  v284 = (const PB::Base *)v3[172];
  if (v284)
    this = PB::Writer::writeSubmessage(a2, v284, 0x805u);
  v285 = (const PB::Base *)v3[170];
  if (v285)
    this = PB::Writer::writeSubmessage(a2, v285, 0x806u);
  v286 = (const PB::Base *)v3[15];
  if (v286)
    this = PB::Writer::writeSubmessage(a2, v286, 0x807u);
  v287 = (const PB::Base *)v3[12];
  if (v287)
    this = PB::Writer::writeSubmessage(a2, v287, 0x808u);
  v288 = (const PB::Base *)v3[30];
  if (v288)
    this = PB::Writer::writeSubmessage(a2, v288, 0x809u);
  v289 = (const PB::Base *)v3[390];
  if (v289)
    this = PB::Writer::writeSubmessage(a2, v289, 0x80Au);
  v290 = (const PB::Base *)v3[389];
  if (v290)
    this = PB::Writer::writeSubmessage(a2, v290, 0x80Bu);
  v291 = (const PB::Base *)v3[105];
  if (v291)
    this = PB::Writer::writeSubmessage(a2, v291, 0x80Cu);
  v292 = (const PB::Base *)v3[35];
  if (v292)
    this = PB::Writer::writeSubmessage(a2, v292, 0x80Du);
  v293 = (const PB::Base *)v3[138];
  if (v293)
    this = PB::Writer::writeSubmessage(a2, v293, 0x80Eu);
  v294 = (const PB::Base *)v3[336];
  if (v294)
    this = PB::Writer::writeSubmessage(a2, v294, 0x80Fu);
  v295 = (const PB::Base *)v3[338];
  if (v295)
    this = PB::Writer::writeSubmessage(a2, v295, 0x810u);
  v296 = (const PB::Base *)v3[337];
  if (v296)
    this = PB::Writer::writeSubmessage(a2, v296, 0x811u);
  v297 = (const PB::Base *)v3[451];
  if (v297)
    this = PB::Writer::writeSubmessage(a2, v297, 0x812u);
  v298 = (const PB::Base *)v3[41];
  if (v298)
    this = PB::Writer::writeSubmessage(a2, v298, 0x813u);
  v299 = (const PB::Base *)v3[315];
  if (v299)
    this = PB::Writer::writeSubmessage(a2, v299, 0x814u);
  v300 = (const PB::Base *)v3[261];
  if (v300)
    this = PB::Writer::writeSubmessage(a2, v300, 0x815u);
  v301 = (const PB::Base *)v3[260];
  if (v301)
    this = PB::Writer::writeSubmessage(a2, v301, 0x816u);
  v302 = (const PB::Base *)v3[65];
  if (v302)
    this = PB::Writer::writeSubmessage(a2, v302, 0x817u);
  v303 = (const PB::Base *)v3[20];
  if (v303)
    this = PB::Writer::writeSubmessage(a2, v303, 0x818u);
  v304 = (const PB::Base *)v3[21];
  if (v304)
    this = PB::Writer::writeSubmessage(a2, v304, 0x819u);
  v305 = (const PB::Base *)v3[19];
  if (v305)
    this = PB::Writer::writeSubmessage(a2, v305, 0x81Au);
  v306 = (const PB::Base *)v3[133];
  if (v306)
    this = PB::Writer::writeSubmessage(a2, v306, 0x81Bu);
  v307 = (const PB::Base *)v3[134];
  if (v307)
    this = PB::Writer::writeSubmessage(a2, v307, 0x81Cu);
  v308 = (const PB::Base *)v3[83];
  if (v308)
    this = PB::Writer::writeSubmessage(a2, v308, 0x820u);
  v309 = (const PB::Base *)v3[413];
  if (v309)
    this = PB::Writer::writeSubmessage(a2, v309, 0x829u);
  v310 = (const PB::Base *)v3[412];
  if (v310)
    this = PB::Writer::writeSubmessage(a2, v310, 0x82Au);
  v311 = (const PB::Base *)v3[25];
  if (v311)
    this = PB::Writer::writeSubmessage(a2, v311, 0x82Bu);
  v312 = (const PB::Base *)v3[119];
  if (v312)
    this = PB::Writer::writeSubmessage(a2, v312, 0x832u);
  v313 = (const PB::Base *)v3[120];
  if (v313)
    this = PB::Writer::writeSubmessage(a2, v313, 0x833u);
  v314 = (const PB::Base *)v3[121];
  if (v314)
    this = PB::Writer::writeSubmessage(a2, v314, 0x834u);
  v315 = (const PB::Base *)v3[117];
  if (v315)
    this = PB::Writer::writeSubmessage(a2, v315, 0x835u);
  v316 = (const PB::Base *)v3[124];
  if (v316)
    this = PB::Writer::writeSubmessage(a2, v316, 0x836u);
  v317 = (const PB::Base *)v3[17];
  if (v317)
    this = PB::Writer::writeSubmessage(a2, v317, 0x837u);
  v318 = (const PB::Base *)v3[335];
  if (v318)
    this = PB::Writer::writeSubmessage(a2, v318, 0x838u);
  v319 = (const PB::Base *)v3[334];
  if (v319)
    this = PB::Writer::writeSubmessage(a2, v319, 0x839u);
  v320 = (const PB::Base *)v3[94];
  if (v320)
    this = PB::Writer::writeSubmessage(a2, v320, 0x83Au);
  v321 = (const PB::Base *)v3[118];
  if (v321)
    this = PB::Writer::writeSubmessage(a2, v321, 0x83Bu);
  v322 = (const PB::Base *)v3[419];
  if (v322)
    this = PB::Writer::writeSubmessage(a2, v322, 0x83Cu);
  v323 = (const PB::Base *)v3[23];
  if (v323)
    this = PB::Writer::writeSubmessage(a2, v323, 0x83Du);
  v324 = (const PB::Base *)v3[122];
  if (v324)
    this = PB::Writer::writeSubmessage(a2, v324, 0x83Eu);
  v325 = (const PB::Base *)v3[147];
  if (v325)
    this = PB::Writer::writeSubmessage(a2, v325, 0x83Fu);
  v326 = (const PB::Base *)v3[382];
  if (v326)
    this = PB::Writer::writeSubmessage(a2, v326, 0x840u);
  v327 = (const PB::Base *)v3[127];
  if (v327)
    this = PB::Writer::writeSubmessage(a2, v327, 0x841u);
  v328 = (const PB::Base *)v3[33];
  if (v328)
    this = PB::Writer::writeSubmessage(a2, v328, 0x842u);
  v329 = (const PB::Base *)v3[358];
  if (v329)
    this = PB::Writer::writeSubmessage(a2, v329, 0x843u);
  v330 = (const PB::Base *)v3[361];
  if (v330)
    this = PB::Writer::writeSubmessage(a2, v330, 0x844u);
  v331 = (const PB::Base *)v3[359];
  if (v331)
    this = PB::Writer::writeSubmessage(a2, v331, 0x845u);
  v332 = (const PB::Base *)v3[360];
  if (v332)
    this = PB::Writer::writeSubmessage(a2, v332, 0x846u);
  v333 = (const PB::Base *)v3[366];
  if (v333)
    this = PB::Writer::writeSubmessage(a2, v333, 0x847u);
  v334 = (const PB::Base *)v3[123];
  if (v334)
    this = PB::Writer::writeSubmessage(a2, v334, 0x848u);
  v335 = (const PB::Base *)v3[182];
  if (v335)
    this = PB::Writer::writeSubmessage(a2, v335, 0x849u);
  v336 = (const PB::Base *)v3[320];
  if (v336)
    this = PB::Writer::writeSubmessage(a2, v336, 0x84Au);
  v337 = (const PB::Base *)v3[249];
  if (v337)
    this = PB::Writer::writeSubmessage(a2, v337, 0x84Bu);
  v338 = (const PB::Base *)v3[116];
  if (v338)
    this = PB::Writer::writeSubmessage(a2, v338, 0x84Cu);
  v339 = (const PB::Base *)v3[228];
  if (v339)
    this = PB::Writer::writeSubmessage(a2, v339, 0x84Du);
  v340 = (const PB::Base *)v3[102];
  if (v340)
    this = PB::Writer::writeSubmessage(a2, v340, 0x84Eu);
  v341 = (const PB::Base *)v3[100];
  if (v341)
    this = PB::Writer::writeSubmessage(a2, v341, 0x84Fu);
  v342 = (const PB::Base *)v3[101];
  if (v342)
    this = PB::Writer::writeSubmessage(a2, v342, 0x850u);
  v343 = (const PB::Base *)v3[99];
  if (v343)
    this = PB::Writer::writeSubmessage(a2, v343, 0x851u);
  v344 = (const PB::Base *)v3[268];
  if (v344)
    this = PB::Writer::writeSubmessage(a2, v344, 0x852u);
  v345 = (const PB::Base *)v3[191];
  if (v345)
    this = PB::Writer::writeSubmessage(a2, v345, 0x853u);
  v346 = (const PB::Base *)v3[192];
  if (v346)
    this = PB::Writer::writeSubmessage(a2, v346, 0x854u);
  v347 = (const PB::Base *)v3[195];
  if (v347)
    this = PB::Writer::writeSubmessage(a2, v347, 0x855u);
  v348 = (const PB::Base *)v3[206];
  if (v348)
    this = PB::Writer::writeSubmessage(a2, v348, 0x856u);
  v349 = (const PB::Base *)v3[221];
  if (v349)
    this = PB::Writer::writeSubmessage(a2, v349, 0x857u);
  v350 = (const PB::Base *)v3[220];
  if (v350)
    this = PB::Writer::writeSubmessage(a2, v350, 0x858u);
  v351 = (const PB::Base *)v3[204];
  if (v351)
    this = PB::Writer::writeSubmessage(a2, v351, 0x859u);
  v352 = (const PB::Base *)v3[164];
  if (v352)
    this = PB::Writer::writeSubmessage(a2, v352, 0x85Au);
  v353 = (const PB::Base *)v3[163];
  if (v353)
    this = PB::Writer::writeSubmessage(a2, v353, 0x85Bu);
  v354 = (const PB::Base *)v3[190];
  if (v354)
    this = PB::Writer::writeSubmessage(a2, v354, 0x85Cu);
  v355 = (const PB::Base *)v3[193];
  if (v355)
    this = PB::Writer::writeSubmessage(a2, v355, 0x85Du);
  v356 = (const PB::Base *)v3[207];
  if (v356)
    this = PB::Writer::writeSubmessage(a2, v356, 0x85Eu);
  v357 = (const PB::Base *)v3[208];
  if (v357)
    this = PB::Writer::writeSubmessage(a2, v357, 0x85Fu);
  v358 = (const PB::Base *)v3[212];
  if (v358)
    this = PB::Writer::writeSubmessage(a2, v358, 0x860u);
  v359 = (const PB::Base *)v3[200];
  if (v359)
    this = PB::Writer::writeSubmessage(a2, v359, 0x861u);
  v360 = (const PB::Base *)v3[198];
  if (v360)
    this = PB::Writer::writeSubmessage(a2, v360, 0x862u);
  v361 = (const PB::Base *)v3[213];
  if (v361)
    this = PB::Writer::writeSubmessage(a2, v361, 0x863u);
  v362 = (const PB::Base *)v3[199];
  if (v362)
    this = PB::Writer::writeSubmessage(a2, v362, 0x864u);
  v363 = (const PB::Base *)v3[209];
  if (v363)
    this = PB::Writer::writeSubmessage(a2, v363, 0x865u);
  v364 = (const PB::Base *)v3[96];
  if (v364)
    this = PB::Writer::writeSubmessage(a2, v364, 0x866u);
  v365 = (const PB::Base *)v3[403];
  if (v365)
    this = PB::Writer::writeSubmessage(a2, v365, 0x867u);
  v366 = (const PB::Base *)v3[162];
  if (v366)
    this = PB::Writer::writeSubmessage(a2, v366, 0x868u);
  v367 = (const PB::Base *)v3[404];
  if (v367)
    this = PB::Writer::writeSubmessage(a2, v367, 0x869u);
  v368 = (const PB::Base *)v3[405];
  if (v368)
    this = PB::Writer::writeSubmessage(a2, v368, 0x86Au);
  v369 = (const PB::Base *)v3[341];
  if (v369)
    this = PB::Writer::writeSubmessage(a2, v369, 0x86Bu);
  v370 = (const PB::Base *)v3[342];
  if (v370)
    this = PB::Writer::writeSubmessage(a2, v370, 0x86Cu);
  v371 = (const PB::Base *)v3[345];
  if (v371)
    this = PB::Writer::writeSubmessage(a2, v371, 0x86Du);
  v372 = (const PB::Base *)v3[350];
  if (v372)
    this = PB::Writer::writeSubmessage(a2, v372, 0x86Eu);
  v373 = (const PB::Base *)v3[348];
  if (v373)
    this = PB::Writer::writeSubmessage(a2, v373, 0x86Fu);
  v374 = (const PB::Base *)v3[214];
  if (v374)
    this = PB::Writer::writeSubmessage(a2, v374, 0x870u);
  v375 = (const PB::Base *)v3[203];
  if (v375)
    this = PB::Writer::writeSubmessage(a2, v375, 0x871u);
  v376 = (const PB::Base *)v3[347];
  if (v376)
    this = PB::Writer::writeSubmessage(a2, v376, 0x872u);
  v377 = (const PB::Base *)v3[181];
  if (v377)
    this = PB::Writer::writeSubmessage(a2, v377, 0x873u);
  v378 = (const PB::Base *)v3[197];
  if (v378)
    this = PB::Writer::writeSubmessage(a2, v378, 0x874u);
  v379 = (const PB::Base *)v3[205];
  if (v379)
    this = PB::Writer::writeSubmessage(a2, v379, 0x875u);
  v380 = (const PB::Base *)v3[160];
  if (v380)
    this = PB::Writer::writeSubmessage(a2, v380, 0x876u);
  v381 = (const PB::Base *)v3[74];
  if (v381)
    this = PB::Writer::writeSubmessage(a2, v381, 0x877u);
  v382 = (const PB::Base *)v3[292];
  if (v382)
    this = PB::Writer::writeSubmessage(a2, v382, 0x878u);
  v383 = (const PB::Base *)v3[86];
  if (v383)
    this = PB::Writer::writeSubmessage(a2, v383, 0x879u);
  v384 = (const PB::Base *)v3[107];
  if (v384)
    this = PB::Writer::writeSubmessage(a2, v384, 0x87Au);
  v385 = (const PB::Base *)v3[400];
  if (v385)
    this = PB::Writer::writeSubmessage(a2, v385, 0x87Bu);
  v386 = (const PB::Base *)v3[326];
  if (v386)
    this = PB::Writer::writeSubmessage(a2, v386, 0x87Cu);
  v387 = (const PB::Base *)v3[216];
  if (v387)
    this = PB::Writer::writeSubmessage(a2, v387, 0x87Du);
  v388 = (const PB::Base *)v3[418];
  if (v388)
    this = PB::Writer::writeSubmessage(a2, v388, 0x87Eu);
  v389 = (const PB::Base *)v3[196];
  if (v389)
    this = PB::Writer::writeSubmessage(a2, v389, 0x87Fu);
  v390 = (const PB::Base *)v3[349];
  if (v390)
    this = PB::Writer::writeSubmessage(a2, v390, 0x880u);
  v391 = (const PB::Base *)v3[387];
  if (v391)
    this = PB::Writer::writeSubmessage(a2, v391, 0x881u);
  v392 = (const PB::Base *)v3[289];
  if (v392)
    this = PB::Writer::writeSubmessage(a2, v392, 0x882u);
  v393 = (const PB::Base *)v3[237];
  if (v393)
    this = PB::Writer::writeSubmessage(a2, v393, 0x883u);
  v394 = (const PB::Base *)v3[283];
  if (v394)
    this = PB::Writer::writeSubmessage(a2, v394, 0x884u);
  v395 = (const PB::Base *)v3[284];
  if (v395)
    this = PB::Writer::writeSubmessage(a2, v395, 0x885u);
  v396 = (const PB::Base *)v3[285];
  if (v396)
    this = PB::Writer::writeSubmessage(a2, v396, 0x886u);
  v397 = (const PB::Base *)v3[270];
  if (v397)
    this = PB::Writer::writeSubmessage(a2, v397, 0x887u);
  v398 = (const PB::Base *)v3[287];
  if (v398)
    this = PB::Writer::writeSubmessage(a2, v398, 0x888u);
  v399 = (const PB::Base *)v3[227];
  if (v399)
    this = PB::Writer::writeSubmessage(a2, v399, 0x889u);
  v400 = (const PB::Base *)v3[401];
  if (v400)
    this = PB::Writer::writeSubmessage(a2, v400, 0x88Au);
  v401 = (const PB::Base *)v3[279];
  if (v401)
    this = PB::Writer::writeSubmessage(a2, v401, 0x88Bu);
  v402 = (const PB::Base *)v3[280];
  if (v402)
    this = PB::Writer::writeSubmessage(a2, v402, 0x88Cu);
  v403 = (const PB::Base *)v3[399];
  if (v403)
    this = PB::Writer::writeSubmessage(a2, v403, 0x88Du);
  v404 = (const PB::Base *)v3[388];
  if (v404)
    this = PB::Writer::writeSubmessage(a2, v404, 0x88Eu);
  v405 = (const PB::Base *)v3[103];
  if (v405)
    this = PB::Writer::writeSubmessage(a2, v405, 0x88Fu);
  v406 = (const PB::Base *)v3[218];
  if (v406)
    this = PB::Writer::writeSubmessage(a2, v406, 0x890u);
  v407 = (const PB::Base *)v3[357];
  if (v407)
    this = PB::Writer::writeSubmessage(a2, v407, 0x891u);
  v408 = (const PB::Base *)v3[278];
  if (v408)
    this = PB::Writer::writeSubmessage(a2, v408, 0x892u);
  v409 = (const PB::Base *)v3[272];
  if (v409)
    this = PB::Writer::writeSubmessage(a2, v409, 0x893u);
  v410 = (const PB::Base *)v3[271];
  if (v410)
    this = PB::Writer::writeSubmessage(a2, v410, 0x894u);
  v411 = (const PB::Base *)v3[275];
  if (v411)
    this = PB::Writer::writeSubmessage(a2, v411, 0x895u);
  v412 = (const PB::Base *)v3[13];
  if (v412)
    this = PB::Writer::writeSubmessage(a2, v412, 0x896u);
  v413 = (const PB::Base *)v3[286];
  if (v413)
    this = PB::Writer::writeSubmessage(a2, v413, 0x897u);
  v414 = (const PB::Base *)v3[309];
  if (v414)
    this = PB::Writer::writeSubmessage(a2, v414, 0x898u);
  v415 = (const PB::Base *)v3[312];
  if (v415)
    this = PB::Writer::writeSubmessage(a2, v415, 0x899u);
  v416 = (const PB::Base *)v3[211];
  if (v416)
    this = PB::Writer::writeSubmessage(a2, v416, 0x89Au);
  v417 = (const PB::Base *)v3[313];
  if (v417)
    this = PB::Writer::writeSubmessage(a2, v417, 0x89Bu);
  v418 = (const PB::Base *)v3[310];
  if (v418)
    this = PB::Writer::writeSubmessage(a2, v418, 0x89Cu);
  v419 = (const PB::Base *)v3[277];
  if (v419)
    this = PB::Writer::writeSubmessage(a2, v419, 0x89Du);
  v420 = (const PB::Base *)v3[72];
  if (v420)
    this = PB::Writer::writeSubmessage(a2, v420, 0x89Eu);
  v421 = (const PB::Base *)v3[276];
  if (v421)
    this = PB::Writer::writeSubmessage(a2, v421, 0x89Fu);
  v422 = (const PB::Base *)v3[293];
  if (v422)
    this = PB::Writer::writeSubmessage(a2, v422, 0x8A0u);
  v423 = (const PB::Base *)v3[241];
  if (v423)
    this = PB::Writer::writeSubmessage(a2, v423, 0x8A1u);
  v424 = (const PB::Base *)v3[188];
  if (v424)
    this = PB::Writer::writeSubmessage(a2, v424, 0x8A2u);
  v425 = (const PB::Base *)v3[189];
  if (v425)
    this = PB::Writer::writeSubmessage(a2, v425, 0x8A3u);
  v426 = (const PB::Base *)v3[311];
  if (v426)
    this = PB::Writer::writeSubmessage(a2, v426, 0x8A4u);
  v427 = (const PB::Base *)v3[274];
  if (v427)
    this = PB::Writer::writeSubmessage(a2, v427, 0x8A5u);
  v428 = (const PB::Base *)v3[273];
  if (v428)
    this = PB::Writer::writeSubmessage(a2, v428, 0x8A6u);
  v429 = (const PB::Base *)v3[202];
  if (v429)
    this = PB::Writer::writeSubmessage(a2, v429, 0x8A7u);
  v430 = (const PB::Base *)v3[201];
  if (v430)
    this = PB::Writer::writeSubmessage(a2, v430, 0x8A8u);
  v431 = (const PB::Base *)v3[314];
  if (v431)
    this = PB::Writer::writeSubmessage(a2, v431, 0x8A9u);
  v432 = (const PB::Base *)v3[39];
  if (v432)
    this = PB::Writer::writeSubmessage(a2, v432, 0x8AAu);
  v433 = (const PB::Base *)v3[113];
  if (v433)
    this = PB::Writer::writeSubmessage(a2, v433, 0x8ABu);
  v434 = (const PB::Base *)v3[295];
  if (v434)
    this = PB::Writer::writeSubmessage(a2, v434, 0x8ACu);
  v435 = (const PB::Base *)v3[298];
  if (v435)
    this = PB::Writer::writeSubmessage(a2, v435, 0x8ADu);
  v436 = (const PB::Base *)v3[32];
  if (v436)
    this = PB::Writer::writeSubmessage(a2, v436, 0x8AEu);
  v437 = (const PB::Base *)v3[31];
  if (v437)
    this = PB::Writer::writeSubmessage(a2, v437, 0x8AFu);
  v438 = (const PB::Base *)v3[352];
  if (v438)
    this = PB::Writer::writeSubmessage(a2, v438, 0x8B0u);
  v439 = (const PB::Base *)v3[351];
  if (v439)
    this = PB::Writer::writeSubmessage(a2, v439, 0x8B1u);
  v440 = (const PB::Base *)v3[328];
  if (v440)
    this = PB::Writer::writeSubmessage(a2, v440, 0x8B2u);
  v441 = (const PB::Base *)v3[329];
  if (v441)
    this = PB::Writer::writeSubmessage(a2, v441, 0x8B3u);
  v442 = (const PB::Base *)v3[331];
  if (v442)
    this = PB::Writer::writeSubmessage(a2, v442, 0x8B4u);
  v443 = (const PB::Base *)v3[161];
  if (v443)
    this = PB::Writer::writeSubmessage(a2, v443, 0x8B5u);
  v444 = (const PB::Base *)v3[330];
  if (v444)
    this = PB::Writer::writeSubmessage(a2, v444, 0x8B6u);
  v445 = (const PB::Base *)v3[42];
  if (v445)
    this = PB::Writer::writeSubmessage(a2, v445, 0x8B7u);
  v446 = (const PB::Base *)v3[185];
  if (v446)
    this = PB::Writer::writeSubmessage(a2, v446, 0x8B8u);
  v447 = (const PB::Base *)v3[186];
  if (v447)
    this = PB::Writer::writeSubmessage(a2, v447, 0x8B9u);
  v448 = (const PB::Base *)v3[187];
  if (v448)
    this = PB::Writer::writeSubmessage(a2, v448, 0x8BAu);
  v449 = (const PB::Base *)v3[353];
  if (v449)
    this = PB::Writer::writeSubmessage(a2, v449, 0x8BBu);
  v450 = (const PB::Base *)v3[354];
  if (v450)
    this = PB::Writer::writeSubmessage(a2, v450, 0x8BCu);
  v451 = (const PB::Base *)v3[368];
  if (v451)
    this = PB::Writer::writeSubmessage(a2, v451, 0x7530u);
  v452 = (const PB::Base *)v3[369];
  if (v452)
    this = PB::Writer::writeSubmessage(a2, v452, 0x7531u);
  v453 = (const PB::Base *)v3[179];
  if (v453)
    return PB::Writer::writeSubmessage(a2, v453, 0x7532u);
  return this;
}

uint64_t CMMsl::Item::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD *v491;
  _QWORD *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  _QWORD *v647;
  _QWORD *v648;
  _QWORD *v649;
  _QWORD *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t result;
  uint64_t v998;
  uint64_t v999;

  if ((*(_BYTE *)(a1 + 3616) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 3616) & 1) == 0 || *(double *)(a1 + 616) != *(double *)(a2 + 616))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 3616) & 1) != 0)
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 1168);
  v5 = *(_QWORD *)(a2 + 1168);
  if (v4)
  {
    if (!v5 || !CMMsl::GyroBiasCorrection::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 1160);
  v7 = *(_QWORD *)(a2 + 1160);
  if (v6)
  {
    if (!v7 || !CMMsl::GyroBiasConstraints::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 1136);
  v9 = *(_QWORD *)(a2 + 1136);
  if (v8)
  {
    if (!v9 || !CMMsl::GravityCorrection::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 1128);
  v11 = *(_QWORD *)(a2 + 1128);
  if (v10)
  {
    if (!v11 || !CMMsl::GravityConstraints::operator==(v10, v11))
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 680);
  v13 = *(_QWORD *)(a2 + 680);
  if (v12)
  {
    if (!v13)
      return 0;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      if (!v15 || !CMMsl::DeviceMotionCorrection::operator==(v14, v15))
        return 0;
    }
    else if (v15)
    {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 672);
  v17 = *(_QWORD *)(a2 + 672);
  if (v16)
  {
    if (!v17 || !CMMsl::CompassConstraints::operator==(v16, v17))
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 728);
  v19 = *(_QWORD *)(a2 + 728);
  if (v18)
  {
    if (!v19)
      return 0;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v19 + 8);
    if (v20)
    {
      if (!v21 || !CMMsl::DeviceMotionCorrection::operator==(v20, v21))
        return 0;
    }
    else if (v21)
    {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  v22 = *(_QWORD *)(a1 + 720);
  v23 = *(_QWORD *)(a2 + 720);
  if (v22)
  {
    if (!v23 || !CMMsl::CourseConstraints::operator==(v22, v23))
      return 0;
  }
  else if (v23)
  {
    return 0;
  }
  v24 = *(_QWORD **)(a1 + 1440);
  v25 = *(_QWORD **)(a2 + 1440);
  if (v24)
  {
    if (!v25 || !CMMsl::IntersiloNSCodingData::operator==(v24, v25) && *(_QWORD *)(a1 + 1440) | *(_QWORD *)(a2 + 1440))
      return 0;
  }
  else if (v25)
  {
    return 0;
  }
  v26 = *(_QWORD *)(a1 + 760);
  v27 = *(_QWORD *)(a2 + 760);
  if (v26)
  {
    if (!v27 || !CMMsl::DeviceMotionCovariance::operator==(v26, v27))
      return 0;
  }
  else if (v27)
  {
    return 0;
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a2 + 88);
  if (v28)
  {
    if (!v29 || !CMMsl::AccessoryAccel::operator==(v28, v29))
      return 0;
  }
  else if (v29)
  {
    return 0;
  }
  v30 = *(_QWORD *)(a1 + 144);
  v31 = *(_QWORD *)(a2 + 144);
  if (v30)
  {
    if (!v31 || !CMMsl::AccessoryGyro::operator==(v30, v31))
      return 0;
  }
  else if (v31)
  {
    return 0;
  }
  v32 = *(_QWORD *)(a1 + 216);
  v33 = *(_QWORD *)(a2 + 216);
  if (v32)
  {
    if (!v33 || !CMMsl::AccessoryProx::operator==(v32, v33))
      return 0;
  }
  else if (v33)
  {
    return 0;
  }
  v34 = *(_QWORD *)(a1 + 3448);
  v35 = *(_QWORD *)(a2 + 3448);
  if (v34)
  {
    if (!v35)
      return 0;
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_QWORD *)(v35 + 8);
    if (v36)
    {
      if (!v37 || !CMMsl::Accel::operator==(v36, v37))
        return 0;
    }
    else if (v37)
    {
      return 0;
    }
  }
  else if (v35)
  {
    return 0;
  }
  v38 = *(_QWORD *)(a1 + 3472);
  v39 = *(_QWORD *)(a2 + 3472);
  if (v38)
  {
    if (!v39)
      return 0;
    v40 = *(_QWORD *)(v38 + 8);
    v41 = *(_QWORD *)(v39 + 8);
    if (v40)
    {
      if (!v41 || !CMMsl::BodyMetrics::operator==(v40, v41))
        return 0;
    }
    else if (v41)
    {
      return 0;
    }
  }
  else if (v39)
  {
    return 0;
  }
  v42 = *(_QWORD *)(a1 + 3488);
  v43 = *(_QWORD *)(a2 + 3488);
  if (v42)
  {
    if (!v43)
      return 0;
    v44 = *(_QWORD *)(v42 + 8);
    v45 = *(_QWORD *)(v43 + 8);
    if (v44)
    {
      if (!v45 || !CMMsl::ElevationChange::operator==(v44, v45))
        return 0;
    }
    else if (v45)
    {
      return 0;
    }
  }
  else if (v43)
  {
    return 0;
  }
  v46 = *(_QWORD *)(a1 + 3520);
  v47 = *(_QWORD *)(a2 + 3520);
  if (v46)
  {
    if (!v47)
      return 0;
    v48 = *(_QWORD *)(v46 + 8);
    v49 = *(_QWORD *)(v47 + 8);
    if (v48)
    {
      if (!v49 || !CMMsl::OnsetHeartRateData::operator==(v48, v49))
        return 0;
    }
    else if (v49)
    {
      return 0;
    }
  }
  else if (v47)
  {
    return 0;
  }
  v50 = *(_QWORD *)(a1 + 3552);
  v51 = *(_QWORD *)(a2 + 3552);
  if (v50)
  {
    if (!v51)
      return 0;
    v52 = *(_QWORD *)(v50 + 8);
    v53 = *(_QWORD *)(v51 + 8);
    if (v52)
    {
      if (!v53 || !CMMsl::RotationRate::operator==(v52, v53))
        return 0;
    }
    else if (v53)
    {
      return 0;
    }
  }
  else if (v51)
  {
    return 0;
  }
  v54 = *(_QWORD *)(a1 + 3536);
  v55 = *(_QWORD *)(a2 + 3536);
  if (v54)
  {
    if (!v55)
      return 0;
    v56 = *(_QWORD *)(v54 + 8);
    v57 = *(_QWORD *)(v55 + 8);
    if (v56)
    {
      if (!v57 || !CMMsl::OdometerWithAltitude::operator==(v56, v57))
        return 0;
    }
    else if (v57)
    {
      return 0;
    }
  }
  else if (v55)
  {
    return 0;
  }
  v58 = *(_QWORD *)(a1 + 3584);
  v59 = *(_QWORD *)(a2 + 3584);
  if (v58)
  {
    if (!v59)
      return 0;
    v60 = *(_QWORD *)(v58 + 8);
    v61 = *(_QWORD *)(v59 + 8);
    if (v60)
    {
      if (!v61 || !CMMsl::WorkoutEvent::operator==(v60, v61))
        return 0;
    }
    else if (v61)
    {
      return 0;
    }
  }
  else if (v59)
  {
    return 0;
  }
  v62 = *(_QWORD *)(a1 + 3320);
  v63 = *(_QWORD *)(a2 + 3320);
  if (v62)
  {
    if (!v63 || !CMMsl::VO2MaxInput::operator==(v62, v63))
      return 0;
  }
  else if (v63)
  {
    return 0;
  }
  v64 = *(_QWORD *)(a1 + 544);
  v65 = *(_QWORD *)(a2 + 544);
  if (!v64)
    goto LABEL_152;
  if (!v65)
    return 0;
  if (!sub_1000801FC((uint64_t *)(v64 + 8), v65 + 8))
  {
    v65 = *(_QWORD *)(a1 + 544) | *(_QWORD *)(a2 + 544);
LABEL_152:
    if (v65)
      return 0;
  }
  v66 = *(_QWORD *)(a1 + 552);
  v67 = *(_QWORD *)(a2 + 552);
  if (v66)
  {
    if (!v67 || !CMMsl::BraveHeartNatalieData::operator==(v66, v67))
      return 0;
  }
  else if (v67)
  {
    return 0;
  }
  v68 = *(_QWORD *)(a1 + 560);
  v69 = *(_QWORD *)(a2 + 560);
  if (!v68)
    goto LABEL_162;
  if (!v69)
    return 0;
  if (!sub_10008143C((uint64_t *)(v68 + 8), v69 + 8))
  {
    v69 = *(_QWORD *)(a1 + 560) | *(_QWORD *)(a2 + 560);
LABEL_162:
    if (v69)
      return 0;
  }
  v70 = *(_QWORD *)(a1 + 536);
  v71 = *(_QWORD *)(a2 + 536);
  if (!v70)
    goto LABEL_167;
  if (!v71)
    return 0;
  if (!sub_10007F8A8((uint64_t *)(v70 + 8), v71 + 8))
  {
    v71 = *(_QWORD *)(a1 + 536) | *(_QWORD *)(a2 + 536);
LABEL_167:
    if (v71)
      return 0;
  }
  v72 = *(_QWORD *)(a1 + 568);
  v73 = *(_QWORD *)(a2 + 568);
  if (v72)
  {
    if (!v73 || !CMMsl::BraveHeartWorkoutEvent::operator==(v72, v73))
      return 0;
  }
  else if (v73)
  {
    return 0;
  }
  v74 = *(_QWORD *)(a1 + 3512);
  v75 = *(_QWORD *)(a2 + 3512);
  if (v74)
  {
    if (!v75 || !CMMsl::WorkoutRecorderHealthKitInfo::operator==(v74, v75))
      return 0;
  }
  else if (v75)
  {
    return 0;
  }
  v76 = *(_QWORD *)(a1 + 2304);
  v77 = *(_QWORD *)(a2 + 2304);
  if (v76)
  {
    if (!v77 || !CMMsl::PearlAttitude::operator==(v76, v77))
      return 0;
  }
  else if (v77)
  {
    return 0;
  }
  v78 = *(_QWORD *)(a1 + 2720);
  v79 = *(_QWORD *)(a2 + 2720);
  if (v78)
  {
    if (!v79 || !CMMsl::RotationRate::operator==(v78, v79))
      return 0;
  }
  else if (v79)
  {
    return 0;
  }
  v80 = *(_QWORD *)(a1 + 3568);
  v81 = *(_QWORD *)(a2 + 3568);
  if (v80)
  {
    if (!v81)
      return 0;
    v82 = *(_QWORD *)(v80 + 8);
    v83 = *(_QWORD *)(v81 + 8);
    if (v82)
    {
      if (!v83 || !CMMsl::WatchOrientationSettings::operator==(v82, v83))
        return 0;
    }
    else if (v83)
    {
      return 0;
    }
  }
  else if (v81)
  {
    return 0;
  }
  v84 = *(_QWORD *)(a1 + 3400);
  v85 = *(_QWORD *)(a2 + 3400);
  if (v84)
  {
    if (!v85 || !CMMsl::WatchOnWristState::operator==(v84, v85))
      return 0;
  }
  else if (v85)
  {
    return 0;
  }
  v86 = *(_QWORD *)(a1 + 608);
  v87 = *(_QWORD *)(a2 + 608);
  if (v86)
  {
    if (!v87 || !CMMsl::CatherineHealthKitData::operator==(v86, v87))
      return 0;
  }
  else if (v87)
  {
    return 0;
  }
  v88 = *(_QWORD *)(a1 + 3416);
  v89 = *(_QWORD *)(a2 + 3416);
  if (!v88)
    goto LABEL_211;
  if (!v89)
    return 0;
  if (!sub_10022AC1C((uint64_t *)(v88 + 8), v89 + 8))
  {
    v89 = *(_QWORD *)(a1 + 3416) | *(_QWORD *)(a2 + 3416);
LABEL_211:
    if (v89)
      return 0;
  }
  v90 = *(_QWORD *)(a1 + 1408);
  v91 = *(_QWORD *)(a2 + 1408);
  if (v90)
  {
    if (!v91 || !CMMsl::InEarTransitionEntry::operator==(v90, v91) && *(_QWORD *)(a1 + 1408) | *(_QWORD *)(a2 + 1408))
      return 0;
  }
  else if (v91)
  {
    return 0;
  }
  v92 = *(_QWORD *)(a1 + 1392);
  v93 = *(_QWORD *)(a2 + 1392);
  if (v92)
  {
    if (!v93 || !CMMsl::InEarSession::operator==(v92, v93))
      return 0;
  }
  else if (v93)
  {
    return 0;
  }
  v94 = *(_QWORD *)(a1 + 1352);
  v95 = *(_QWORD *)(a2 + 1352);
  if (v94)
  {
    if (!v95 || !CMMsl::InEarBaseline::operator==(v94, v95) && *(_QWORD *)(a1 + 1352) | *(_QWORD *)(a2 + 1352))
      return 0;
  }
  else if (v95)
  {
    return 0;
  }
  v96 = *(_QWORD *)(a1 + 224);
  v97 = *(_QWORD *)(a2 + 224);
  if (v96)
  {
    if (!v97 || !CMMsl::AccessoryProxSensorDrop::operator==(v96, v97) && *(_QWORD *)(a1 + 224) | *(_QWORD *)(a2 + 224))
      return 0;
  }
  else if (v97)
  {
    return 0;
  }
  v98 = *(_QWORD *)(a1 + 232);
  v99 = *(_QWORD *)(a2 + 232);
  if (v98)
  {
    if (!v99 || !CMMsl::AccessoryProxTempComp::operator==(v98, v99))
      return 0;
  }
  else if (v99)
  {
    return 0;
  }
  v100 = *(_QWORD *)(a1 + 272);
  v101 = *(_QWORD *)(a2 + 272);
  if (v100)
  {
    if (!v101 || !CMMsl::AccessoryWake::operator==(v100, v101) && *(_QWORD *)(a1 + 272) | *(_QWORD *)(a2 + 272))
      return 0;
  }
  else if (v101)
  {
    return 0;
  }
  v102 = *(_QWORD *)(a1 + 912);
  v103 = *(_QWORD *)(a2 + 912);
  if (v102)
  {
    if (!v103 || !CMMsl::FacePose::operator==(v102, v103))
      return 0;
  }
  else if (v103)
  {
    return 0;
  }
  v104 = *(_QWORD *)(a1 + 3576);
  v105 = *(_QWORD *)(a2 + 3576);
  if (v104)
  {
    if (!v105
      || !CMMsl::WorkoutRecorderWifiScanResults::operator==(v104, v105)
      && *(_QWORD *)(a1 + 3576) | *(_QWORD *)(a2 + 3576))
    {
      return 0;
    }
  }
  else if (v105)
  {
    return 0;
  }
  v106 = *(_QWORD *)(a1 + 3544);
  v107 = *(_QWORD *)(a2 + 3544);
  if (v106)
  {
    if (!v107)
      return 0;
    v108 = *(_QWORD *)(v106 + 8);
    v109 = *(_QWORD *)(v107 + 8);
    if (v108)
    {
      if (!v109 || !CMMsl::Pressure::operator==(v108, v109))
        return 0;
    }
    else if (v109)
    {
      return 0;
    }
  }
  else if (v107)
  {
    return 0;
  }
  v110 = *(_QWORD *)(a1 + 1344);
  v111 = *(_QWORD *)(a2 + 1344);
  if (v110)
  {
    if (!v111
      || !CMMsl::InEarAdditionalState::operator==(v110, v111) && *(_QWORD *)(a1 + 1344) | *(_QWORD *)(a2 + 1344))
    {
      return 0;
    }
  }
  else if (v111)
  {
    return 0;
  }
  v112 = *(_QWORD *)(a1 + 128);
  v113 = *(_QWORD *)(a2 + 128);
  if (v112)
  {
    if (!v113 || !CMMsl::AccessoryDeviceMotion::operator==(v112, v113))
      return 0;
  }
  else if (v113)
  {
    return 0;
  }
  v114 = *(_QWORD *)(a1 + 3280);
  v115 = *(_QWORD *)(a2 + 3280);
  if (v114)
  {
    if (!v115 || !CMMsl::VisionCompassBias::operator==(v114, v115))
      return 0;
  }
  else if (v115)
  {
    return 0;
  }
  v116 = *(_QWORD *)(a1 + 352);
  v117 = *(_QWORD *)(a2 + 352);
  if (v116)
  {
    if (!v117)
      return 0;
    if ((*(_BYTE *)(v116 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v117 + 12) & 1) == 0 || *(_DWORD *)(v116 + 8) != *(_DWORD *)(v117 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v117 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v117)
  {
    return 0;
  }
  v118 = *(_QWORD *)(a1 + 3256);
  v119 = *(_QWORD *)(a2 + 3256);
  if (v118)
  {
    if (!v119 || !CMMsl::VIOEstimation::operator==(v118, v119))
      return 0;
  }
  else if (v119)
  {
    return 0;
  }
  v120 = *(_QWORD *)(a1 + 1880);
  v121 = *(_QWORD *)(a2 + 1880);
  if (v120)
  {
    if (!v121 || !CMMsl::LSLHeadingEstimation::operator==(v120, v121))
      return 0;
  }
  else if (v121)
  {
    return 0;
  }
  v122 = *(_QWORD *)(a1 + 1000);
  v123 = *(_QWORD *)(a2 + 1000);
  if (v122)
  {
    if (!v123 || !CMMsl::FallSnippet::operator==(v122, v123))
      return 0;
  }
  else if (v123)
  {
    return 0;
  }
  v124 = *(_QWORD *)(a1 + 80);
  v125 = *(_QWORD *)(a2 + 80);
  if (v124)
  {
    if (!v125 || !CMMsl::AccelerometerPace::operator==(v124, v125))
      return 0;
  }
  else if (v125)
  {
    return 0;
  }
  v126 = *(_QWORD *)(a1 + 2072);
  v127 = *(_QWORD *)(a2 + 2072);
  if (v126)
  {
    if (!v127)
      return 0;
    if ((*(_BYTE *)(v126 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v127 + 12) & 1) == 0 || *(float *)(v126 + 8) != *(float *)(v127 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v127 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v127)
  {
    return 0;
  }
  v128 = *(_QWORD *)(a1 + 3032);
  v129 = *(_QWORD *)(a2 + 3032);
  if (v128)
  {
    if (!v129 || !CMMsl::StepCountEntry::operator==(v128, v129) && *(_QWORD *)(a1 + 3032) | *(_QWORD *)(a2 + 3032))
      return 0;
  }
  else if (v129)
  {
    return 0;
  }
  v130 = *(_QWORD *)(a1 + 1960);
  v131 = *(_QWORD *)(a2 + 1960);
  if (v130)
  {
    if (!v131 || !CMMsl::MobilityBoutMetrics::operator==(v130, v131))
      return 0;
  }
  else if (v131)
  {
    return 0;
  }
  v132 = *(_QWORD *)(a1 + 712);
  v133 = *(_QWORD *)(a2 + 712);
  if (v132)
  {
    if (!v133 || !CMMsl::CoprocessorReplyGaitMetrics::operator==(v132, v133))
      return 0;
  }
  else if (v133)
  {
    return 0;
  }
  v134 = *(_QWORD *)(a1 + 3264);
  v135 = *(_QWORD *)(a2 + 3264);
  if (v134)
  {
    if (!v135 || !CMMsl::VIOPose::operator==(v134, v135))
      return 0;
  }
  else if (v135)
  {
    return 0;
  }
  v136 = *(_QWORD *)(a1 + 2848);
  v137 = *(_QWORD *)(a2 + 2848);
  if (v136)
  {
    if (!v137)
      return 0;
    if ((*(_BYTE *)(v136 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v137 + 12) & 1) == 0 || *(_DWORD *)(v136 + 8) != *(_DWORD *)(v137 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v137 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v137)
  {
    return 0;
  }
  v138 = *(_QWORD *)(a1 + 3272);
  v139 = *(_QWORD *)(a2 + 3272);
  if (v138)
  {
    if (!v139 || !CMMsl::VIOReplayPose::operator==(v138, v139))
      return 0;
  }
  else if (v139)
  {
    return 0;
  }
  v140 = *(_QWORD *)(a1 + 3312);
  v141 = *(_QWORD *)(a2 + 3312);
  if (v140)
  {
    if (!v141 || !CMMsl::VisualStateMeasurement::operator==(v140, v141))
      return 0;
  }
  else if (v141)
  {
    return 0;
  }
  v142 = *(_QWORD *)(a1 + 1752);
  v143 = *(_QWORD *)(a2 + 1752);
  if (v142)
  {
    if (!v143 || !CMMsl::KappaTriggerDebug::operator==(v142, v143))
      return 0;
  }
  else if (v143)
  {
    return 0;
  }
  v144 = *(_QWORD *)(a1 + 1552);
  v145 = *(_QWORD *)(a2 + 1552);
  if (v144)
  {
    if (!v145 || !CMMsl::KappaDirectionOfTravel::operator==(v144, v145))
      return 0;
  }
  else if (v145)
  {
    return 0;
  }
  v146 = *(_QWORD *)(a1 + 1328);
  v147 = *(_QWORD *)(a2 + 1328);
  if (v146)
  {
    if (!v147)
      return 0;
    v148 = *(_QWORD *)(v146 + 8);
    v149 = *(_QWORD *)(v147 + 8);
    if (v148)
    {
      if (!v149 || !CMMsl::Accel::operator==(v148, v149))
        return 0;
    }
    else if (v149)
    {
      return 0;
    }
  }
  else if (v147)
  {
    return 0;
  }
  v150 = *(_QWORD *)(a1 + 1720);
  v151 = *(_QWORD *)(a2 + 1720);
  if (v150)
  {
    if (!v151 || !CMMsl::KappaSteps::operator==(v150, v151))
      return 0;
  }
  else if (v151)
  {
    return 0;
  }
  v152 = *(_QWORD *)(a1 + 3176);
  v153 = *(_QWORD *)(a2 + 3176);
  if (v152)
  {
    if (!v153 || !CMMsl::SignificantUserInteraction::operator==(v152, v153))
      return 0;
  }
  else if (v153)
  {
    return 0;
  }
  v154 = *(_QWORD *)(a1 + 1680);
  v155 = *(_QWORD *)(a2 + 1680);
  if (v154)
  {
    if (!v155 || !CMMsl::KappaRoads::operator==(v154, v155))
      return 0;
  }
  else if (v155)
  {
    return 0;
  }
  v156 = *(_QWORD *)(a1 + 3184);
  v157 = *(_QWORD *)(a2 + 3184);
  if (v156)
  {
    if (!v157 || (CMMsl::UserStudyEvent::operator==(v156, v157) & 1) == 0)
      return 0;
  }
  else if (v157)
  {
    return 0;
  }
  v158 = *(_QWORD *)(a1 + 376);
  v159 = *(_QWORD *)(a2 + 376);
  if (v158)
  {
    if (!v159 || !CMMsl::AuxiliaryDeviceMotion::operator==(v158, v159))
      return 0;
  }
  else if (v159)
  {
    return 0;
  }
  v160 = *(_QWORD *)(a1 + 3128);
  v161 = *(_QWORD *)(a2 + 3128);
  if (v160)
  {
    if (!v161 || !CMMsl::TempestPoCAuxiliaryDeviceMotion::operator==(v160, v161))
      return 0;
  }
  else if (v161)
  {
    return 0;
  }
  v162 = *(_QWORD *)(a1 + 368);
  v163 = *(_QWORD *)(a2 + 368);
  if (v162)
  {
    if (!v163 || !CMMsl::AudioAccessoryDeviceMotion::operator==(v162, v163))
      return 0;
  }
  else if (v163)
  {
    return 0;
  }
  v164 = *(_QWORD *)(a1 + 3136);
  v165 = *(_QWORD *)(a2 + 3136);
  if (v164)
  {
    if (!v165 || !CMMsl::TempestPoCListenerOrientation::operator==(v164, v165))
      return 0;
  }
  else if (v165)
  {
    return 0;
  }
  v166 = *(_QWORD *)(a1 + 3456);
  v167 = *(_QWORD *)(a2 + 3456);
  if (v166)
  {
    if (!v167)
      return 0;
    v168 = *(_QWORD *)(v166 + 8);
    v169 = *(_QWORD *)(v167 + 8);
    if (v168)
    {
      if (!v169 || !CMMsl::Accel::operator==(v168, v169))
        return 0;
    }
    else if (v169)
    {
      return 0;
    }
  }
  else if (v167)
  {
    return 0;
  }
  v170 = *(_QWORD *)(a1 + 296);
  v171 = *(_QWORD *)(a2 + 296);
  if (v170)
  {
    if (!v171)
      return 0;
    if ((*(_BYTE *)(v170 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v171 + 12) & 1) == 0 || *(float *)(v170 + 8) != *(float *)(v171 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v171 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v171)
  {
    return 0;
  }
  v172 = *(_QWORD *)(a1 + 3440);
  v173 = *(_QWORD *)(a2 + 3440);
  if (v172)
  {
    if (!v173 || !CMMsl::WorkoutRecorderALSData::operator==(v172, v173))
      return 0;
  }
  else if (v173)
  {
    return 0;
  }
  v174 = *(_QWORD *)(a1 + 3288);
  v175 = *(_QWORD *)(a2 + 3288);
  if (v174)
  {
    if (!v175 || !CMMsl::VisualLocalization::operator==(v174, v175))
      return 0;
  }
  else if (v175)
  {
    return 0;
  }
  v176 = *(_QWORD *)(a1 + 1240);
  v177 = *(_QWORD *)(a2 + 1240);
  if (v176)
  {
    if (!v177 || !CMMsl::GyroFactoryCalibrationData::operator==(v176, v177))
      return 0;
  }
  else if (v177)
  {
    return 0;
  }
  v178 = *(_QWORD *)(a1 + 2936);
  v179 = *(_QWORD *)(a2 + 2936);
  if (v178)
  {
    if (!v179 || !CMMsl::SoundPressureLevel::operator==(v178, v179))
      return 0;
  }
  else if (v179)
  {
    return 0;
  }
  v180 = *(_QWORD *)(a1 + 1048);
  v181 = *(_QWORD *)(a2 + 1048);
  if (v180)
  {
    if (!v181 || !CMMsl::FrequencyResponse::operator==(v180, v181))
      return 0;
  }
  else if (v181)
  {
    return 0;
  }
  v182 = *(_QWORD *)(a1 + 872);
  v183 = *(_QWORD *)(a2 + 872);
  if (v182)
  {
    if (!v183)
      return 0;
    if ((*(_BYTE *)(v182 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v183 + 12) & 1) == 0 || *(_DWORD *)(v182 + 8) != *(_DWORD *)(v183 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v183 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v183)
  {
    return 0;
  }
  v184 = *(_QWORD *)(a1 + 32);
  v185 = *(_QWORD *)(a2 + 32);
  if (v184)
  {
    if (!v185)
      return 0;
    v186 = *(_QWORD *)(v184 + 8);
    v187 = *(_QWORD *)(v185 + 8);
    if (v186)
    {
      if (!v187 || !CMMsl::Accel::operator==(v186, v187))
        return 0;
    }
    else if (v187)
    {
      return 0;
    }
  }
  else if (v185)
  {
    return 0;
  }
  v188 = *(_QWORD *)(a1 + 2024);
  v189 = *(_QWORD *)(a2 + 2024);
  if (v188)
  {
    if (!v189 || !CMMsl::MotionLocation::operator==(v188, v189))
      return 0;
  }
  else if (v189)
  {
    return 0;
  }
  v190 = *(_QWORD *)(a1 + 1984);
  v191 = *(_QWORD *)(a2 + 1984);
  if (v190)
  {
    if (!v191 || !CMMsl::MotionActivity::operator==(v190, v191))
      return 0;
  }
  else if (v191)
  {
    return 0;
  }
  v192 = *(_QWORD *)(a1 + 496);
  v193 = *(_QWORD *)(a2 + 496);
  if (v192)
  {
    if (!v193 || !CMMsl::BioMotionPose::operator==(v192, v193))
      return 0;
  }
  else if (v193)
  {
    return 0;
  }
  v194 = *(_QWORD *)(a1 + 1736);
  v195 = *(_QWORD *)(a2 + 1736);
  if (v194)
  {
    if (!v195 || !CMMsl::KappaTrigger::operator==(v194, v195))
      return 0;
  }
  else if (v195)
  {
    return 0;
  }
  v196 = *(_QWORD *)(a1 + 2664);
  v197 = *(_QWORD *)(a2 + 2664);
  if (v196)
  {
    if (!v197 || !CMMsl::RelDMInSystemConfig::operator==(v196, v197))
      return 0;
  }
  else if (v197)
  {
    return 0;
  }
  v198 = *(_QWORD *)(a1 + 1464);
  v199 = *(_QWORD *)(a2 + 1464);
  if (v198)
  {
    if (!v199)
      return 0;
    v200 = *(_QWORD *)(v198 + 8);
    v201 = *(_QWORD *)(v199 + 8);
    if (v200)
    {
      if (!v201 || !CMMsl::BioMotionPose::operator==(v200, v201))
        return 0;
    }
    else if (v201)
    {
      return 0;
    }
  }
  else if (v199)
  {
    return 0;
  }
  v202 = *(_QWORD *)(a1 + 704);
  v203 = *(_QWORD *)(a2 + 704);
  if (v202)
  {
    if (!v203)
      return 0;
    v204 = *(_QWORD *)(v202 + 8);
    v205 = *(_QWORD *)(v203 + 8);
    if (v204)
    {
      if (!v205 || !CMMsl::BioMotionPose::operator==(v204, v205))
        return 0;
    }
    else if (v205)
    {
      return 0;
    }
  }
  else if (v203)
  {
    return 0;
  }
  v206 = *(_QWORD *)(a1 + 1208);
  v207 = *(_QWORD *)(a2 + 1208);
  if (v206)
  {
    if (!v207 || !CMMsl::GyroCalibrationSample::operator==(v206, v207))
      return 0;
  }
  else if (v207)
  {
    return 0;
  }
  v208 = *(_QWORD *)(a1 + 1216);
  v209 = *(_QWORD *)(a2 + 1216);
  if (v208)
  {
    if (!v209 || !CMMsl::GyroCalibrationSampleNonlinear::operator==(v208, v209))
      return 0;
  }
  else if (v209)
  {
    return 0;
  }
  v210 = *(_QWORD *)(a1 + 1200);
  v211 = *(_QWORD *)(a2 + 1200);
  if (!v210)
    goto LABEL_537;
  if (!v211)
    return 0;
  if (!sub_1000DE5A8((uint64_t *)(v210 + 8), v211 + 8))
  {
    v211 = *(_QWORD *)(a1 + 1200) | *(_QWORD *)(a2 + 1200);
LABEL_537:
    if (v211)
      return 0;
  }
  v212 = *(_QWORD *)(a1 + 1192);
  v213 = *(_QWORD *)(a2 + 1192);
  if (!v212)
    goto LABEL_542;
  if (!v213)
    return 0;
  if (!sub_1000DDC54((uint64_t *)(v212 + 8), v213 + 8))
  {
    v213 = *(_QWORD *)(a1 + 1192) | *(_QWORD *)(a2 + 1192);
LABEL_542:
    if (v213)
      return 0;
  }
  v214 = *(_QWORD *)(a1 + 472);
  v215 = *(_QWORD *)(a2 + 472);
  if (v214)
  {
    if (!v215 || !CMMsl::BioMotionClassification::operator==(v214, v215))
      return 0;
  }
  else if (v215)
  {
    return 0;
  }
  v216 = *(_QWORD *)(a1 + 1056);
  v217 = *(_QWORD *)(a2 + 1056);
  if (v216)
  {
    if (!v217)
      return 0;
    v218 = *(_QWORD *)(v216 + 8);
    v219 = *(_QWORD *)(v217 + 8);
    if (v218)
    {
      if (!v219 || !CMMsl::BioMotionClassification::operator==(v218, v219))
        return 0;
    }
    else if (v219)
    {
      return 0;
    }
  }
  else if (v217)
  {
    return 0;
  }
  v220 = *(_QWORD *)(a1 + 1976);
  v221 = *(_QWORD *)(a2 + 1976);
  if (v220)
  {
    if (!v221)
      return 0;
    v222 = *(_QWORD *)(v220 + 8);
    v223 = *(_QWORD *)(v221 + 8);
    if (v222)
    {
      if (!v223 || !CMMsl::BioMotionClassification::operator==(v222, v223))
        return 0;
    }
    else if (v223)
    {
      return 0;
    }
  }
  else if (v221)
  {
    return 0;
  }
  v224 = *(_QWORD *)(a1 + 1888);
  v225 = *(_QWORD *)(a2 + 1888);
  if (v224)
  {
    if (!v225)
      return 0;
    v226 = *(_QWORD *)(v224 + 8);
    v227 = *(_QWORD *)(v225 + 8);
    if (v226)
    {
      if (!v227 || !CMMsl::BioMotionClassification::operator==(v226, v227))
        return 0;
    }
    else if (v227)
    {
      return 0;
    }
  }
  else if (v225)
  {
    return 0;
  }
  v228 = *(_QWORD *)(a1 + 2432);
  v229 = *(_QWORD *)(a2 + 2432);
  if (v228)
  {
    if (!v229 || !CMMsl::Pose::operator==(v228, v229))
      return 0;
  }
  else if (v229)
  {
    return 0;
  }
  v230 = *(_QWORD *)(a1 + 2440);
  v231 = *(_QWORD *)(a2 + 2440);
  if (v230)
  {
    if (!v231 || !CMMsl::PoseState::operator==(v230, v231))
      return 0;
  }
  else if (v231)
  {
    return 0;
  }
  v232 = *(_QWORD *)(a1 + 504);
  v233 = *(_QWORD *)(a2 + 504);
  if (v232)
  {
    if (!v233 || !CMMsl::BioMotionPredictedPose::operator==(v232, v233))
      return 0;
  }
  else if (v233)
  {
    return 0;
  }
  v234 = *(_QWORD *)(a1 + 1472);
  v235 = *(_QWORD *)(a2 + 1472);
  if (v234)
  {
    if (!v235)
      return 0;
    v236 = *(_QWORD *)(v234 + 8);
    v237 = *(_QWORD *)(v235 + 8);
    if (v236)
    {
      if (!v237 || !CMMsl::BioMotionPredictedPose::operator==(v236, v237))
        return 0;
    }
    else if (v237)
    {
      return 0;
    }
  }
  else if (v235)
  {
    return 0;
  }
  v238 = *(_QWORD *)(a1 + 696);
  v239 = *(_QWORD *)(a2 + 696);
  if (v238)
  {
    if (!v239)
      return 0;
    v240 = *(_QWORD *)(v238 + 8);
    v241 = *(_QWORD *)(v239 + 8);
    if (v240)
    {
      if (!v241 || !CMMsl::BioMotionPredictedPose::operator==(v240, v241))
        return 0;
    }
    else if (v241)
    {
      return 0;
    }
  }
  else if (v239)
  {
    return 0;
  }
  v242 = *(_QWORD *)(a1 + 2544);
  v243 = *(_QWORD *)(a2 + 2544);
  if (v242)
  {
    if (!v243)
      return 0;
    v244 = *(_QWORD *)(v242 + 8);
    v245 = *(_QWORD *)(v243 + 8);
    if (v244)
    {
      if (!v245 || !CMMsl::Pressure::operator==(v244, v245))
        return 0;
    }
    else if (v245)
    {
      return 0;
    }
  }
  else if (v243)
  {
    return 0;
  }
  v246 = *(_QWORD *)(a1 + 3328);
  v247 = *(_QWORD *)(a2 + 3328);
  if (v246)
  {
    if (!v247 || !CMMsl::VO2MaxOutput::operator==(v246, v247))
      return 0;
  }
  else if (v247)
  {
    return 0;
  }
  v248 = *(_QWORD *)(a1 + 1904);
  v249 = *(_QWORD *)(a2 + 1904);
  if (v248)
  {
    if (!v249 || !CMMsl::MagneticAccessoryType1::operator==(v248, v249))
      return 0;
  }
  else if (v249)
  {
    return 0;
  }
  v250 = *(_QWORD *)(a1 + 1912);
  v251 = *(_QWORD *)(a2 + 1912);
  if (v250)
  {
    if (!v251)
      return 0;
    if ((*(_BYTE *)(v250 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v251 + 12) & 1) == 0 || *(unsigned __int8 *)(v250 + 8) != *(unsigned __int8 *)(v251 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v251 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v251)
  {
    return 0;
  }
  v252 = *(_QWORD *)(a1 + 2536);
  v253 = *(_QWORD *)(a2 + 2536);
  if (v252)
  {
    if (!v253 || !CMMsl::PressureCalibration::operator==(v252, v253))
      return 0;
  }
  else if (v253)
  {
    return 0;
  }
  v254 = *(_QWORD *)(a1 + 3528);
  v255 = *(_QWORD *)(a2 + 3528);
  if (v254)
  {
    if (!v255)
      return 0;
    v256 = *(_QWORD *)(v254 + 8);
    v257 = *(_QWORD *)(v255 + 8);
    if (v256)
    {
      if (!v257 || !CMMsl::Magnetometer::operator==(v256, v257))
        return 0;
    }
    else if (v257)
    {
      return 0;
    }
  }
  else if (v255)
  {
    return 0;
  }
  v258 = *(_QWORD *)(a1 + 3480);
  v259 = *(_QWORD *)(a2 + 3480);
  if (v258)
  {
    if (!v259)
      return 0;
    v260 = *(_QWORD *)(v258 + 8);
    v261 = *(_QWORD *)(v259 + 8);
    if (v260)
    {
      if (!v261 || !CMMsl::CompassCalibration::operator==(v260, v261))
        return 0;
    }
    else if (v261)
    {
      return 0;
    }
  }
  else if (v259)
  {
    return 0;
  }
  v262 = *(_QWORD *)(a1 + 2656);
  v263 = *(_QWORD *)(a2 + 2656);
  if (v262)
  {
    if (!v263 || !CMMsl::RawAudio::operator==(v262, v263))
      return 0;
  }
  else if (v263)
  {
    return 0;
  }
  v264 = *(_QWORD *)(a1 + 584);
  v265 = *(_QWORD *)(a2 + 584);
  if (v264)
  {
    if (!v265 || !CMMsl::CV3DPredictedPose::operator==(v264, v265))
      return 0;
  }
  else if (v265)
  {
    return 0;
  }
  v266 = *(_QWORD *)(a1 + 480);
  v267 = *(_QWORD *)(a2 + 480);
  if (v266)
  {
    if (!v267 || !CMMsl::BioMotionLinkLengthFitParameters::operator==(v266, v267))
      return 0;
  }
  else if (v267)
  {
    return 0;
  }
  v268 = *(_QWORD *)(a1 + 488);
  v269 = *(_QWORD *)(a2 + 488);
  if (v268)
  {
    if (!v269 || !CMMsl::BioMotionOnlineLinkLengthUpdate::operator==(v268, v269))
      return 0;
  }
  else if (v269)
  {
    return 0;
  }
  v270 = *(_QWORD *)(a1 + 2128);
  v271 = *(_QWORD *)(a2 + 2128);
  if (v270)
  {
    if (!v271 || !CMMsl::ODTPose::operator==(v270, v271))
      return 0;
  }
  else if (v271)
  {
    return 0;
  }
  v272 = *(_QWORD *)(a1 + 2392);
  v273 = *(_QWORD *)(a2 + 2392);
  if (v272)
  {
    if (!v273 || !CMMsl::PencilTipForce::operator==(v272, v273))
      return 0;
  }
  else if (v273)
  {
    return 0;
  }
  v274 = *(_QWORD *)(a1 + 2400);
  v275 = *(_QWORD *)(a2 + 2400);
  if (v274)
  {
    if (!v275 || !CMMsl::PencilTouch::operator==(v274, v275))
      return 0;
  }
  else if (v275)
  {
    return 0;
  }
  v276 = *(_QWORD *)(a1 + 384);
  v277 = *(_QWORD *)(a2 + 384);
  if (v276)
  {
    if (!v277 || !CMMsl::AveragedALSData::operator==(v276, v277))
      return 0;
  }
  else if (v277)
  {
    return 0;
  }
  v278 = *(_QWORD *)(a1 + 3144);
  v279 = *(_QWORD *)(a2 + 3144);
  if (v278)
  {
    if (!v279 || !CMMsl::Timestamp::operator==(v278, v279))
      return 0;
  }
  else if (v279)
  {
    return 0;
  }
  v280 = *(_QWORD *)(a1 + 344);
  v281 = *(_QWORD *)(a2 + 344);
  if (v280)
  {
    if (!v281)
      return 0;
    v282 = *(_QWORD *)(v280 + 8);
    v283 = *(_QWORD *)(v281 + 8);
    if (v282)
    {
      if (!v283 || !CMMsl::CV3DSLAMState::operator==(v282, v283))
        return 0;
    }
    else if (v283)
    {
      return 0;
    }
  }
  else if (v281)
  {
    return 0;
  }
  v284 = *(_QWORD *)(a1 + 464);
  v285 = *(_QWORD *)(a2 + 464);
  if (v284)
  {
    if (!v285)
      return 0;
    v286 = *(_QWORD *)(v284 + 8);
    v287 = *(_QWORD *)(v285 + 8);
    if (v286)
    {
      if (!v287 || !CMMsl::BioMotionAnchor::operator==(v286, v287))
        return 0;
    }
    else if (v287)
    {
      return 0;
    }
  }
  else if (v285)
  {
    return 0;
  }
  v288 = *(_QWORD *)(a1 + 512);
  v289 = *(_QWORD *)(a2 + 512);
  if (v288)
  {
    if (!v289)
      return 0;
    v290 = *(_QWORD *)(v288 + 8);
    v291 = *(_QWORD *)(v289 + 8);
    if (v290)
    {
      if (!v291 || !CMMsl::PropagatedAnchor::operator==(v290, v291))
        return 0;
    }
    else if (v291)
    {
      return 0;
    }
  }
  else if (v289)
  {
    return 0;
  }
  v292 = *(_QWORD *)(a1 + 3360);
  v293 = *(_QWORD *)(a2 + 3360);
  if (v292)
  {
    if (!v293 || !CMMsl::WalkingSteadinessClassification::operator==(v292, v293))
      return 0;
  }
  else if (v293)
  {
    return 0;
  }
  v294 = *(_QWORD *)(a1 + 3000);
  v295 = *(_QWORD *)(a2 + 3000);
  if (v294)
  {
    if (!v295 || !CMMsl::SteadinessModelResult::operator==(v294, v295))
      return 0;
  }
  else if (v295)
  {
    return 0;
  }
  v296 = *(_QWORD *)(a1 + 2960);
  v297 = *(_QWORD *)(a2 + 2960);
  if (v296)
  {
    if (!v297 || !CMMsl::SteadinessEvent::operator==(v296, v297))
      return 0;
  }
  else if (v297)
  {
    return 0;
  }
  v298 = *(_QWORD *)(a1 + 2984);
  v299 = *(_QWORD *)(a2 + 2984);
  if (v298)
  {
    if (!v299 || !CMMsl::SteadinessModelGaitBaselineFeatures::operator==(v298, v299))
      return 0;
  }
  else if (v299)
  {
    return 0;
  }
  v300 = *(_QWORD *)(a1 + 2976);
  v301 = *(_QWORD *)(a2 + 2976);
  if (v300)
  {
    if (!v301 || !CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(v300, v301))
      return 0;
  }
  else if (v301)
  {
    return 0;
  }
  v302 = *(_QWORD *)(a1 + 3008);
  v303 = *(_QWORD *)(a2 + 3008);
  if (v302)
  {
    if (!v303 || !CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(v302, v303))
      return 0;
  }
  else if (v303)
  {
    return 0;
  }
  v304 = *(_QWORD *)(a1 + 3016);
  v305 = *(_QWORD *)(a2 + 3016);
  if (v304)
  {
    if (!v305 || !CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(v304, v305))
      return 0;
  }
  else if (v305)
  {
    return 0;
  }
  v306 = *(_QWORD *)(a1 + 2968);
  v307 = *(_QWORD *)(a2 + 2968);
  if (v306)
  {
    if (!v307 || !CMMsl::SteadinessModelBalanceFeatures::operator==(v306, v307))
      return 0;
  }
  else if (v307)
  {
    return 0;
  }
  v308 = *(_QWORD *)(a1 + 1936);
  v309 = *(_QWORD *)(a2 + 1936);
  if (v308)
  {
    if (!v309 || !CMMsl::MagnetometerReset::operator==(v308, v309))
      return 0;
  }
  else if (v309)
  {
    return 0;
  }
  v310 = *(_QWORD *)(a1 + 3560);
  v311 = *(_QWORD *)(a2 + 3560);
  if (v310)
  {
    if (!v311)
      return 0;
    v312 = *(_QWORD *)(v310 + 8);
    v313 = *(_QWORD *)(v311 + 8);
    if (v312)
    {
      if (!v313 || !CMMsl::WatchOnWristState::operator==(v312, v313))
        return 0;
    }
    else if (v313)
    {
      return 0;
    }
  }
  else if (v311)
  {
    return 0;
  }
  v314 = *(_QWORD *)(a1 + 1840);
  v315 = *(_QWORD *)(a2 + 1840);
  if (v314)
  {
    if (!v315 || !CMMsl::LiftToWakeOnHeadStatus::operator==(v314, v315))
      return 0;
  }
  else if (v315)
  {
    return 0;
  }
  v316 = *(_QWORD *)(a1 + 192);
  v317 = *(_QWORD *)(a2 + 192);
  if (v316)
  {
    if (!v317 || !CMMsl::AccessoryMagnetometer::operator==(v316, v317))
      return 0;
  }
  else if (v317)
  {
    return 0;
  }
  v318 = *(_QWORD *)(a1 + 3040);
  v319 = *(_QWORD *)(a2 + 3040);
  if (v318)
  {
    if (!v319 || !CMMsl::StepCountEntryAddition::operator==(v318, v319))
      return 0;
  }
  else if (v319)
  {
    return 0;
  }
  v320 = *(_QWORD *)(a1 + 3048);
  v321 = *(_QWORD *)(a2 + 3048);
  if (v320)
  {
    if (!v321
      || !CMMsl::StepDistanceFusionResult::operator==(v320, v321) && *(_QWORD *)(a1 + 3048) | *(_QWORD *)(a2 + 3048))
    {
      return 0;
    }
  }
  else if (v321)
  {
    return 0;
  }
  v322 = *(_QWORD *)(a1 + 2904);
  v323 = *(_QWORD *)(a2 + 2904);
  if (!v322)
    goto LABEL_810;
  if (!v323)
    return 0;
  if (!sub_1001F6B20((uint64_t *)(v322 + 8), v323 + 8))
  {
    v323 = *(_QWORD *)(a1 + 2904) | *(_QWORD *)(a2 + 2904);
LABEL_810:
    if (v323)
      return 0;
  }
  v324 = *(_QWORD *)(a1 + 736);
  v325 = *(_QWORD *)(a2 + 736);
  if (v324)
  {
    if (!v325 || !CMMsl::CVWatchCalories::operator==(v324, v325))
      return 0;
  }
  else if (v325)
  {
    return 0;
  }
  v326 = *(_QWORD *)(a1 + 888);
  v327 = *(_QWORD *)(a2 + 888);
  if (v326)
  {
    if (!v327
      || !CMMsl::FaceBlendShapeCoefficientsSample::operator==(v326, v327)
      && *(_QWORD *)(a1 + 888) | *(_QWORD *)(a2 + 888))
    {
      return 0;
    }
  }
  else if (v327)
  {
    return 0;
  }
  v328 = *(_QWORD *)(a1 + 456);
  v329 = *(_QWORD *)(a2 + 456);
  if (v328)
  {
    if (!v329 || !CMMsl::BatteryStatus::operator==(v328, v329))
      return 0;
  }
  else if (v329)
  {
    return 0;
  }
  v330 = *(_QWORD *)(a1 + 1872);
  v331 = *(_QWORD *)(a2 + 1872);
  if (v330)
  {
    if (!v331)
      return 0;
    if ((*(_BYTE *)(v330 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v331 + 12) & 1) == 0 || *(unsigned __int8 *)(v330 + 8) != *(unsigned __int8 *)(v331 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v331 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v331)
  {
    return 0;
  }
  v332 = *(_QWORD *)(a1 + 448);
  v333 = *(_QWORD *)(a2 + 448);
  if (v332)
  {
    if (!v333)
      return 0;
    if ((*(_BYTE *)(v332 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v333 + 12) & 1) == 0 || *(unsigned __int8 *)(v332 + 8) != *(unsigned __int8 *)(v333 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v333 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v333)
  {
    return 0;
  }
  v334 = *(_QWORD *)(a1 + 2464);
  v335 = *(_QWORD *)(a2 + 2464);
  if (v334)
  {
    if (!v335)
      return 0;
    if ((*(_BYTE *)(v334 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v335 + 16) & 1) == 0 || *(_QWORD *)(v334 + 8) != *(_QWORD *)(v335 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v335 + 16) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v335)
  {
    return 0;
  }
  v336 = *(_QWORD *)(a1 + 1040);
  v337 = *(_QWORD *)(a2 + 1040);
  if (v336)
  {
    if (!v337 || !CMMsl::FocusModes::operator==(v336, v337))
      return 0;
  }
  else if (v337)
  {
    return 0;
  }
  v338 = *(_QWORD *)(a1 + 784);
  v339 = *(_QWORD *)(a2 + 784);
  if (v338)
  {
    if (!v339)
      return 0;
    if ((*(_BYTE *)(v338 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v339 + 12) & 1) == 0 || *(unsigned __int8 *)(v338 + 8) != *(unsigned __int8 *)(v339 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v339 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v339)
  {
    return 0;
  }
  v340 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (!v340)
      return 0;
  }
  else if (v340)
  {
    return 0;
  }
  v341 = *(_QWORD *)(a1 + 16);
  v342 = *(_QWORD *)(a2 + 16);
  if (v341)
  {
    if (!v342 || (CMMsl::APWake::operator==(v341, v342) & 1) == 0)
      return 0;
  }
  else if (v342)
  {
    return 0;
  }
  v343 = *(_QWORD *)(a1 + 320);
  v344 = *(_QWORD *)(a2 + 320);
  if (v343)
  {
    if (!v344 || !CMMsl::AltimeterKF::operator==(v343, v344))
      return 0;
  }
  else if (v344)
  {
    return 0;
  }
  v345 = *(_QWORD *)(a1 + 1848);
  v346 = *(_QWORD *)(a2 + 1848);
  if (v345)
  {
    if (!v346 || !CMMsl::LiftToWakeState::operator==(v345, v346))
      return 0;
  }
  else if (v346)
  {
    return 0;
  }
  v347 = *(_QWORD *)(a1 + 3248);
  v348 = *(_QWORD *)(a2 + 3248);
  if (v347)
  {
    if (!v348 || !CMMsl::ViewObstructedState::operator==(v347, v348))
      return 0;
  }
  else if (v348)
  {
    return 0;
  }
  v349 = *(_QWORD *)(a1 + 2744);
  v350 = *(_QWORD *)(a2 + 2744);
  if (v349)
  {
    if (!v350 || !CMMsl::RunningFormMetrics::operator==(v349, v350))
      return 0;
  }
  else if (v350)
  {
    return 0;
  }
  v351 = *(_QWORD *)(a1 + 3600);
  v352 = *(_QWORD *)(a2 + 3600);
  if (!v351)
    goto LABEL_901;
  if (!v352)
    return 0;
  if (!sub_1002347FC((uint64_t *)(v351 + 8), v352 + 8))
  {
    v352 = *(_QWORD *)(a1 + 3600) | *(_QWORD *)(a2 + 3600);
LABEL_901:
    if (v352)
      return 0;
  }
  v353 = *(_QWORD *)(a1 + 3592);
  v354 = *(_QWORD *)(a2 + 3592);
  if (v353)
  {
    if (!v354
      || !CMMsl::WorkoutRecorderWorkoutSessionPriors::operator==(v353, v354)
      && *(_QWORD *)(a1 + 3592) | *(_QWORD *)(a2 + 3592))
    {
      return 0;
    }
  }
  else if (v354)
  {
    return 0;
  }
  v355 = *(_QWORD *)(a1 + 360);
  v356 = *(_QWORD *)(a2 + 360);
  if (v355)
  {
    if (!v356 || !CMMsl::ARKitWorldPose::operator==(v355, v356))
      return 0;
  }
  else if (v356)
  {
    return 0;
  }
  v357 = *(_QWORD *)(a1 + 2248);
  v358 = *(_QWORD *)(a2 + 2248);
  if (v357)
  {
    if (!v358 || !CMMsl::PDRImpulse::operator==(v357, v358))
      return 0;
  }
  else if (v358)
  {
    return 0;
  }
  v359 = *(_QWORD *)(a1 + 2424);
  v360 = *(_QWORD *)(a2 + 2424);
  if (v359)
  {
    if (!v360 || !CMMsl::PocketDetectionPacket::operator==(v359, v360))
      return 0;
  }
  else if (v360)
  {
    return 0;
  }
  v361 = *(_QWORD *)(a1 + 1832);
  v362 = *(_QWORD *)(a2 + 1832);
  if (v361)
  {
    if (!v362 || !CMMsl::LiftToWakeFeaturesNeo::operator==(v361, v362))
      return 0;
  }
  else if (v362)
  {
    return 0;
  }
  v363 = *(_QWORD *)(a1 + 1856);
  v364 = *(_QWORD *)(a2 + 1856);
  if (v363)
  {
    if (!v364 || !CMMsl::LiftToWakeStatusNeo::operator==(v363, v364))
      return 0;
  }
  else if (v364)
  {
    return 0;
  }
  v365 = *(_QWORD *)(a1 + 2752);
  v366 = *(_QWORD *)(a2 + 2752);
  if (v365)
  {
    if (!v366 || !CMMsl::RunningPower::operator==(v365, v366))
      return 0;
  }
  else if (v366)
  {
    return 0;
  }
  v367 = *(_QWORD *)(a1 + 408);
  v368 = *(_QWORD *)(a2 + 408);
  if (v367)
  {
    if (!v368 || !CMMsl::BasebandCompassCoex::operator==(v367, v368))
      return 0;
  }
  else if (v368)
  {
    return 0;
  }
  v369 = *(_QWORD *)(a1 + 416);
  v370 = *(_QWORD *)(a2 + 416);
  if (v369)
  {
    if (!v370 || !CMMsl::BasebandCompassCoexConstraints::operator==(v369, v370))
      return 0;
  }
  else if (v370)
  {
    return 0;
  }
  v371 = *(_QWORD *)(a1 + 2000);
  v372 = *(_QWORD *)(a2 + 2000);
  if (v371)
  {
    if (!v372 || !CMMsl::MotionContextActivity::operator==(v371, v372))
      return 0;
  }
  else if (v372)
  {
    return 0;
  }
  v373 = *(_QWORD *)(a1 + 2152);
  v374 = *(_QWORD *)(a2 + 2152);
  if (v373)
  {
    if (!v374)
      return 0;
    if ((*(_BYTE *)(v373 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v374 + 12) & 1) == 0 || *(_DWORD *)(v373 + 8) != *(_DWORD *)(v374 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v374 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v374)
  {
    return 0;
  }
  v375 = *(_QWORD *)(a1 + 72);
  v376 = *(_QWORD *)(a2 + 72);
  if (v375)
  {
    if (!v376 || !CMMsl::AccelTNBFrame::operator==(v375, v376))
      return 0;
  }
  else if (v376)
  {
    return 0;
  }
  v377 = *(_QWORD *)(a1 + 832);
  v378 = *(_QWORD *)(a2 + 832);
  if (v377)
  {
    if (!v378 || !CMMsl::DoTEstimatorWithTNB::operator==(v377, v378))
      return 0;
  }
  else if (v378)
  {
    return 0;
  }
  v379 = *(_QWORD *)(a1 + 2256);
  v380 = *(_QWORD *)(a2 + 2256);
  if (v379)
  {
    if (!v380 || !CMMsl::PdrMLModelOutput::operator==(v379, v380))
      return 0;
  }
  else if (v380)
  {
    return 0;
  }
  v381 = *(_QWORD *)(a1 + 1088);
  v382 = *(_QWORD *)(a2 + 1088);
  if (v381)
  {
    if (!v382 || !CMMsl::GaitEventsModelOutput::operator==(v381, v382))
      return 0;
  }
  else if (v382)
  {
    return 0;
  }
  v383 = *(_QWORD *)(a1 + 1096);
  v384 = *(_QWORD *)(a2 + 1096);
  if (v383)
  {
    if (!v384 || !CMMsl::GaitEventsStrideAggregation::operator==(v383, v384))
      return 0;
  }
  else if (v384)
  {
    return 0;
  }
  v385 = *(_QWORD *)(a1 + 1080);
  v386 = *(_QWORD *)(a2 + 1080);
  if (v385)
  {
    if (!v386 || !CMMsl::GaitEventsHKResult::operator==(v385, v386))
      return 0;
  }
  else if (v386)
  {
    return 0;
  }
  v387 = *(_QWORD *)(a1 + 896);
  v388 = *(_QWORD *)(a2 + 896);
  if (v387)
  {
    if (!v388 || !CMMsl::FaceCovered::operator==(v387, v388))
      return 0;
  }
  else if (v388)
  {
    return 0;
  }
  v389 = *(_QWORD *)(a1 + 3464);
  v390 = *(_QWORD *)(a2 + 3464);
  if (v389)
  {
    if (!v390)
      return 0;
    v391 = *(_QWORD *)(v389 + 8);
    v392 = *(_QWORD *)(v390 + 8);
    if (v391)
    {
      if (!v392 || !CMMsl::AveragedALSData::operator==(v391, v392))
        return 0;
    }
    else if (v392)
    {
      return 0;
    }
  }
  else if (v390)
  {
    return 0;
  }
  v393 = *(_QWORD *)(a1 + 3088);
  v394 = *(_QWORD *)(a2 + 3088);
  if (v393)
  {
    if (!v394 || !CMMsl::StrideCalEntry::operator==(v393, v394))
      return 0;
  }
  else if (v394)
  {
    return 0;
  }
  v395 = *(_QWORD *)(a1 + 2768);
  v396 = *(_QWORD *)(a2 + 2768);
  if (v395)
  {
    if (!v396 || !CMMsl::RunningSpeedKFResult::operator==(v395, v396))
      return 0;
  }
  else if (v396)
  {
    return 0;
  }
  v397 = *(_QWORD *)(a1 + 2616);
  v398 = *(_QWORD *)(a2 + 2616);
  if (v397)
  {
    if (!v398 || !CMMsl::ProxPDP::operator==(v397, v398))
      return 0;
  }
  else if (v398)
  {
    return 0;
  }
  v399 = *(_QWORD *)(a1 + 1792);
  v400 = *(_QWORD *)(a2 + 1792);
  if (v399)
  {
    if (!v400 || !CMMsl::KeyboardMotionFeatures::operator==(v399, v400))
      return 0;
  }
  else if (v400)
  {
    return 0;
  }
  v401 = *(_QWORD *)(a1 + 1800);
  v402 = *(_QWORD *)(a2 + 1800);
  if (v401)
  {
    if (!v402 || !CMMsl::KeyboardMotionState::operator==(v401, v402))
      return 0;
  }
  else if (v402)
  {
    return 0;
  }
  v403 = *(_QWORD *)(a1 + 304);
  v404 = *(_QWORD *)(a2 + 304);
  if (v403)
  {
    if (!v404 || !CMMsl::ALSPhone::operator==(v403, v404))
      return 0;
  }
  else if (v404)
  {
    return 0;
  }
  v405 = *(_QWORD *)(a1 + 1784);
  v406 = *(_QWORD *)(a2 + 1784);
  if (v405)
  {
    if (!v406 || !CMMsl::KeyboardKeyPress::operator==(v405, v406))
      return 0;
  }
  else if (v406)
  {
    return 0;
  }
  v407 = *(_QWORD *)(a1 + 3336);
  v408 = *(_QWORD *)(a2 + 3336);
  if (v407)
  {
    if (!v408 || !CMMsl::WakeGestureNotification::operator==(v407, v408))
      return 0;
  }
  else if (v408)
  {
    return 0;
  }
  v409 = *(_QWORD *)(a1 + 2600);
  v410 = *(_QWORD *)(a2 + 2600);
  if (v409)
  {
    if (!v410 || !CMMsl::ProxBaselineEstimatorState::operator==(v409, v410))
      return 0;
  }
  else if (v410)
  {
    return 0;
  }
  v411 = *(_QWORD *)(a1 + 432);
  v412 = *(_QWORD *)(a2 + 432);
  if (v411)
  {
    if (!v412 || !CMMsl::BaselineResetCheck::operator==(v411, v412))
      return 0;
  }
  else if (v412)
  {
    return 0;
  }
  v413 = *(_QWORD *)(a1 + 2712);
  v414 = *(_QWORD *)(a2 + 2712);
  if (v413)
  {
    if (!v414 || !CMMsl::RhythmicGnssOperatorStatus::operator==(v413, v414))
      return 0;
  }
  else if (v414)
  {
    return 0;
  }
  v415 = *(_QWORD *)(a1 + 1808);
  v416 = *(_QWORD *)(a2 + 1808);
  if (v415)
  {
    if (!v416 || !CMMsl::KeyboardMotionTrackpad::operator==(v415, v416))
      return 0;
  }
  else if (v416)
  {
    return 0;
  }
  v417 = *(_QWORD *)(a1 + 1776);
  v418 = *(_QWORD *)(a2 + 1776);
  if (v417)
  {
    if (!v418 || !CMMsl::KeyboardAttached::operator==(v417, v418))
      return 0;
  }
  else if (v418)
  {
    return 0;
  }
  v419 = *(_QWORD *)(a1 + 400);
  v420 = *(_QWORD *)(a2 + 400);
  if (v419)
  {
    if (!v420 || (CMMsl::BacklightState::operator==(v419, v420) & 1) == 0)
      return 0;
  }
  else if (v420)
  {
    return 0;
  }
  v421 = *(_QWORD *)(a1 + 440);
  v422 = *(_QWORD *)(a2 + 440);
  if (v421)
  {
    if (!v422 || !CMMsl::BatchedLocationFromOdometer::operator==(v421, v422))
      return 0;
  }
  else if (v422)
  {
    return 0;
  }
  v423 = *(_QWORD *)(a1 + 1320);
  v424 = *(_QWORD *)(a2 + 1320);
  if (v423)
  {
    if (!v424 || !CMMsl::HeartRateReference::operator==(v423, v424))
      return 0;
  }
  else if (v424)
  {
    return 0;
  }
  v425 = *(_QWORD *)(a1 + 2896);
  v426 = *(_QWORD *)(a2 + 2896);
  if (v425)
  {
    if (!v426 || !CMMsl::Skeleton2D::operator==(v425, v426) && *(_QWORD *)(a1 + 2896) | *(_QWORD *)(a2 + 2896))
      return 0;
  }
  else if (v426)
  {
    return 0;
  }
  v427 = *(_QWORD *)(a1 + 2920);
  v428 = *(_QWORD *)(a2 + 2920);
  if (v427)
  {
    if (!v428
      || !CMMsl::Skeleton3DRetargeted::operator==(v427, v428) && *(_QWORD *)(a1 + 2920) | *(_QWORD *)(a2 + 2920))
    {
      return 0;
    }
  }
  else if (v428)
  {
    return 0;
  }
  v429 = *(_QWORD *)(a1 + 2912);
  v430 = *(_QWORD *)(a2 + 2912);
  if (v429)
  {
    if (!v430 || !CMMsl::Skeleton3DLifted::operator==(v429, v430) && *(_QWORD *)(a1 + 2912) | *(_QWORD *)(a2 + 2912))
      return 0;
  }
  else if (v430)
  {
    return 0;
  }
  v431 = *(_QWORD *)(a1 + 1032);
  v432 = *(_QWORD *)(a2 + 1032);
  if (v431)
  {
    if (!v432 || !CMMsl::FitnessMachineSample::operator==(v431, v432))
      return 0;
  }
  else if (v432)
  {
    return 0;
  }
  v433 = *(_QWORD *)(a1 + 3392);
  v434 = *(_QWORD *)(a2 + 3392);
  if (v433)
  {
    if (!v434 || !CMMsl::WatchHeartRateData::operator==(v433, v434))
      return 0;
  }
  else if (v434)
  {
    return 0;
  }
  v435 = *(_QWORD *)(a1 + 920);
  v436 = *(_QWORD *)(a2 + 920);
  if (v435)
  {
    if (!v436 || !CMMsl::FacePoseSynchronized::operator==(v435, v436))
      return 0;
  }
  else if (v436)
  {
    return 0;
  }
  v437 = *(_QWORD *)(a1 + 3368);
  v438 = *(_QWORD *)(a2 + 3368);
  if (v437)
  {
    if (!v438 || !CMMsl::WatchActiveCalories::operator==(v437, v438))
      return 0;
  }
  else if (v438)
  {
    return 0;
  }
  v439 = *(_QWORD *)(a1 + 3376);
  v440 = *(_QWORD *)(a2 + 3376);
  if (v439)
  {
    if (!v440 || !CMMsl::WatchBasalCalories::operator==(v439, v440))
      return 0;
  }
  else if (v440)
  {
    return 0;
  }
  v441 = *(_QWORD *)(a1 + 3160);
  v442 = *(_QWORD *)(a2 + 3160);
  if (v441)
  {
    if (!v442 || !CMMsl::TrackRunData::operator==(v441, v442))
      return 0;
  }
  else if (v442)
  {
    return 0;
  }
  v443 = *(_QWORD *)(a1 + 1112);
  v444 = *(_QWORD *)(a2 + 1112);
  if (v443)
  {
    if (!v444 || !CMMsl::GnssAvailabilityPredictorData::operator==(v443, v444))
      return 0;
  }
  else if (v444)
  {
    return 0;
  }
  v445 = *(_QWORD *)(a1 + 1120);
  v446 = *(_QWORD *)(a2 + 1120);
  if (v445)
  {
    if (!v446
      || !CMMsl::GnssLeechLocationData::operator==(v445, v446) && *(_QWORD *)(a1 + 1120) | *(_QWORD *)(a2 + 1120))
    {
      return 0;
    }
  }
  else if (v446)
  {
    return 0;
  }
  v447 = *(_QWORD *)(a1 + 1944);
  v448 = *(_QWORD *)(a2 + 1944);
  if (v447)
  {
    if (!v448 || !CMMsl::MapsRouteHintData::operator==(v447, v448))
      return 0;
  }
  else if (v448)
  {
    return 0;
  }
  v449 = *(_QWORD *)(a1 + 1024);
  v450 = *(_QWORD *)(a2 + 1024);
  if (v449)
  {
    if (!v450 || !CMMsl::FitnessMachineData::operator==(v449, v450))
      return 0;
  }
  else if (v450)
  {
    return 0;
  }
  v451 = *(_QWORD *)(a1 + 3504);
  v452 = *(_QWORD *)(a2 + 3504);
  if (v451)
  {
    if (!v452)
      return 0;
    v453 = *(_QWORD *)(v451 + 8);
    v454 = *(_QWORD *)(v452 + 8);
    if (v453)
    {
      if (!v454 || !CMMsl::FitnessMachineData::operator==(v453, v454))
        return 0;
    }
    else if (v454)
    {
      return 0;
    }
  }
  else if (v452)
  {
    return 0;
  }
  v455 = *(_QWORD *)(a1 + 112);
  v456 = *(_QWORD *)(a2 + 112);
  if (v455)
  {
    if (!v456 || !CMMsl::AccessoryActivityStateUpdate::operator==(v455, v456))
      return 0;
  }
  else if (v456)
  {
    return 0;
  }
  v457 = *(_QWORD *)(a1 + 2328);
  v458 = *(_QWORD *)(a2 + 2328);
  if (v457)
  {
    if (!v458 || !CMMsl::PedestrianFenceExit::operator==(v457, v458))
      return 0;
  }
  else if (v458)
  {
    return 0;
  }
  v459 = *(_QWORD *)(a1 + 1416);
  v460 = *(_QWORD *)(a2 + 1416);
  if (v459)
  {
    if (!v460 || !CMMsl::InertialOdometry::operator==(v459, v460))
      return 0;
  }
  else if (v460)
  {
    return 0;
  }
  v461 = *(_QWORD *)(a1 + 2408);
  v462 = *(_QWORD *)(a2 + 2408);
  if (v461)
  {
    if (!v462 || !CMMsl::PhysicalEffortInput::operator==(v461, v462))
      return 0;
  }
  else if (v462)
  {
    return 0;
  }
  v463 = *(_QWORD *)(a1 + 2416);
  v464 = *(_QWORD *)(a2 + 2416);
  if (v463)
  {
    if (!v464 || !CMMsl::PhysicalEffortSample::operator==(v463, v464))
      return 0;
  }
  else if (v464)
  {
    return 0;
  }
  v465 = *(_QWORD *)(a1 + 2320);
  v466 = *(_QWORD *)(a2 + 2320);
  if (v465)
  {
    if (!v466 || !CMMsl::PedestrianCalorieModelDebugging::operator==(v465, v466))
      return 0;
  }
  else if (v466)
  {
    return 0;
  }
  v467 = *(_QWORD *)(a1 + 864);
  v468 = *(_QWORD *)(a2 + 864);
  if (v467)
  {
    if (!v468 || !CMMsl::ElevationThreshold::operator==(v467, v468))
      return 0;
  }
  else if (v468)
  {
    return 0;
  }
  v469 = *(_QWORD *)(a1 + 1424);
  v470 = *(_QWORD *)(a2 + 1424);
  if (v469)
  {
    if (!v470 || !CMMsl::InitialHistoricalMeanSeaLevelPressure::operator==(v469, v470))
      return 0;
  }
  else if (v470)
  {
    return 0;
  }
  v471 = *(_QWORD *)(a1 + 3424);
  v472 = *(_QWORD *)(a2 + 3424);
  if (v471)
  {
    if (!v472 || !CMMsl::WorkoutActivity::operator==(v471, v472))
      return 0;
  }
  else if (v472)
  {
    return 0;
  }
  v473 = *(_QWORD *)(a1 + 2352);
  v474 = *(_QWORD *)(a2 + 2352);
  if (v473)
  {
    if (!v474 || !CMMsl::PencilDeviceMotion::operator==(v473, v474))
      return 0;
  }
  else if (v474)
  {
    return 0;
  }
  v475 = *(_QWORD *)(a1 + 2376);
  v476 = *(_QWORD *)(a2 + 2376);
  if (v475)
  {
    if (!v476 || !CMMsl::PencilFusionResult::operator==(v475, v476))
      return 0;
  }
  else if (v476)
  {
    return 0;
  }
  v477 = *(_QWORD *)(a1 + 1272);
  v478 = *(_QWORD *)(a2 + 1272);
  if (v477)
  {
    if (!v478 || !CMMsl::HapticModuleState::operator==(v477, v478))
      return 0;
  }
  else if (v478)
  {
    return 0;
  }
  v479 = *(_QWORD *)(a1 + 2992);
  v480 = *(_QWORD *)(a2 + 2992);
  if (v479)
  {
    if (!v480 || !CMMsl::SteadinessModelHarmonicFeatures::operator==(v479, v480))
      return 0;
  }
  else if (v480)
  {
    return 0;
  }
  v481 = *(_QWORD *)(a1 + 2368);
  v482 = *(_QWORD *)(a2 + 2368);
  if (v481)
  {
    if (!v482 || !CMMsl::PencilFusionReplayResult::operator==(v481, v482))
      return 0;
  }
  else if (v482)
  {
    return 0;
  }
  v483 = *(_QWORD *)(a1 + 1968);
  v484 = *(_QWORD *)(a2 + 1968);
  if (v483)
  {
    if (!v484 || !CMMsl::MobilitySmoothedGaitMetrics::operator==(v483, v484))
      return 0;
  }
  else if (v484)
  {
    return 0;
  }
  v485 = *(_QWORD *)(a1 + 3384);
  v486 = *(_QWORD *)(a2 + 3384);
  if (v485)
  {
    if (!v486 || !CMMsl::WatchEnclosureMaterial::operator==(v485, v486))
      return 0;
  }
  else if (v486)
  {
    return 0;
  }
  v487 = *(_QWORD *)(a1 + 176);
  v488 = *(_QWORD *)(a2 + 176);
  if (v487)
  {
    if (!v488 || !CMMsl::AccessoryHeartRate::operator==(v487, v488))
      return 0;
  }
  else if (v488)
  {
    return 0;
  }
  v489 = *(_QWORD *)(a1 + 208);
  v490 = *(_QWORD *)(a2 + 208);
  if (v489)
  {
    if (!v490 || !CMMsl::AccessoryPPG::operator==(v489, v490) && *(_QWORD *)(a1 + 208) | *(_QWORD *)(a2 + 208))
      return 0;
  }
  else if (v490)
  {
    return 0;
  }
  v491 = *(_QWORD **)(a1 + 2032);
  v492 = *(_QWORD **)(a2 + 2032);
  if (v491)
  {
    if (!v492 || !CMMsl::MotionLoiAltitudeData::operator==(v491, v492))
      return 0;
  }
  else if (v492)
  {
    return 0;
  }
  v493 = *(_QWORD *)(a1 + 776);
  v494 = *(_QWORD *)(a2 + 776);
  if (v493)
  {
    if (!v494 || !CMMsl::DisplacingState::operator==(v493, v494))
      return 0;
  }
  else if (v494)
  {
    return 0;
  }
  v495 = *(_QWORD *)(a1 + 2448);
  v496 = *(_QWORD *)(a2 + 2448);
  if (v495)
  {
    if (!v496 || !CMMsl::PostureJoint::operator==(v495, v496))
      return 0;
  }
  else if (v496)
  {
    return 0;
  }
  v497 = *(_QWORD *)(a1 + 2456);
  v498 = *(_QWORD *)(a2 + 2456);
  if (v497)
  {
    if (!v498)
      return 0;
    if (sub_1001C8EEC((uint64_t *)(v497 + 8), v498 + 8))
      goto LABEL_1275;
    v498 = *(_QWORD *)(a1 + 2456) | *(_QWORD *)(a2 + 2456);
  }
  if (v498)
    return 0;
LABEL_1275:
  v499 = *(_QWORD *)(a1 + 1336);
  v500 = *(_QWORD *)(a2 + 1336);
  if (v499)
  {
    if (!v500 || !CMMsl::HIDShower::operator==(v499, v500))
      return 0;
  }
  else if (v500)
  {
    return 0;
  }
  v501 = *(_QWORD *)(a1 + 3496);
  v502 = *(_QWORD *)(a2 + 3496);
  if (v501)
  {
    if (!v502)
      return 0;
    v503 = *(_QWORD *)(v501 + 8);
    v504 = *(_QWORD *)(v502 + 8);
    if (v503)
    {
      if (!v504 || !CMMsl::FaceCovered::operator==(v503, v504))
        return 0;
    }
    else if (v504)
    {
      return 0;
    }
  }
  else if (v502)
  {
    return 0;
  }
  v505 = *(_QWORD *)(a1 + 3072);
  v506 = *(_QWORD *)(a2 + 3072);
  if (v505)
  {
    if (!v506)
      return 0;
    v507 = *(_QWORD *)(v505 + 8);
    v508 = *(_QWORD *)(v506 + 8);
    if (v507)
    {
      if (!v508 || !CMMsl::OnsetHeartRateData::operator==(v507, v508))
        return 0;
    }
    else if (v508)
    {
      return 0;
    }
  }
  else if (v506)
  {
    return 0;
  }
  v509 = *(_QWORD *)(a1 + 3168);
  v510 = *(_QWORD *)(a2 + 3168);
  if (v509)
  {
    if (!v510 || !CMMsl::UltraFastAccel::operator==(v509, v510))
      return 0;
  }
  else if (v510)
  {
    return 0;
  }
  v511 = *(_QWORD *)(a1 + 24);
  v512 = *(_QWORD *)(a2 + 24);
  if (v511)
  {
    if (!v512 || !CMMsl::Accel::operator==(v511, v512))
      return 0;
  }
  else if (v512)
  {
    return 0;
  }
  v513 = *(_QWORD *)(a1 + 40);
  v514 = *(_QWORD *)(a2 + 40);
  if (v513)
  {
    if (!v514 || !CMMsl::AccelBatch::operator==(v513, v514))
      return 0;
  }
  else if (v514)
  {
    return 0;
  }
  v515 = *(_QWORD *)(a1 + 64);
  v516 = *(_QWORD *)(a2 + 64);
  if (v515)
  {
    if (!v516)
      return 0;
    v517 = *(_QWORD *)(v515 + 8);
    v518 = *(_QWORD *)(v516 + 8);
    if (v517)
    {
      if (!v518 || !CMMsl::Accel::operator==(v517, v518))
        return 0;
    }
    else if (v518)
    {
      return 0;
    }
  }
  else if (v516)
  {
    return 0;
  }
  v519 = *(_QWORD *)(a1 + 48);
  v520 = *(_QWORD *)(a2 + 48);
  if (v519)
  {
    if (!v520)
      return 0;
    v521 = *(_QWORD *)(v519 + 8);
    v522 = *(_QWORD *)(v520 + 8);
    if (v521)
    {
      if (!v522 || !CMMsl::Accel::operator==(v521, v522))
        return 0;
    }
    else if (v522)
    {
      return 0;
    }
  }
  else if (v520)
  {
    return 0;
  }
  v523 = *(_QWORD *)(a1 + 1144);
  v524 = *(_QWORD *)(a2 + 1144);
  if (v523)
  {
    if (!v524 || !CMMsl::Gyro::operator==(v523, v524))
      return 0;
  }
  else if (v524)
  {
    return 0;
  }
  v525 = *(_QWORD *)(a1 + 1256);
  v526 = *(_QWORD *)(a2 + 1256);
  if (v525)
  {
    if (!v526 || !CMMsl::GyroOscarEmu::operator==(v525, v526))
      return 0;
  }
  else if (v526)
  {
    return 0;
  }
  v527 = *(_QWORD *)(a1 + 1264);
  v528 = *(_QWORD *)(a2 + 1264);
  if (v527)
  {
    if (!v528 || !CMMsl::GyroTemperature::operator==(v527, v528))
      return 0;
  }
  else if (v528)
  {
    return 0;
  }
  v529 = *(_QWORD *)(a1 + 1152);
  v530 = *(_QWORD *)(a2 + 1152);
  if (v529)
  {
    if (!v530 || !CMMsl::GyroBiasAndVariance::operator==(v529, v530))
      return 0;
  }
  else if (v530)
  {
    return 0;
  }
  v531 = *(_QWORD *)(a1 + 1184);
  v532 = *(_QWORD *)(a2 + 1184);
  if (v531)
  {
    if (!v532 || !CMMsl::GyroBiasFit::operator==(v531, v532))
      return 0;
  }
  else if (v532)
  {
    return 0;
  }
  v533 = *(_QWORD *)(a1 + 1232);
  v534 = *(_QWORD *)(a2 + 1232);
  if (v533)
  {
    if (!v534)
      return 0;
    if ((*(_BYTE *)(v533 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v534 + 12) & 1) == 0 || *(float *)(v533 + 8) != *(float *)(v534 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v534 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v534)
  {
    return 0;
  }
  v535 = *(_QWORD *)(a1 + 1920);
  v536 = *(_QWORD *)(a2 + 1920);
  if (v535)
  {
    if (!v536 || !CMMsl::Magnetometer::operator==(v535, v536))
      return 0;
  }
  else if (v536)
  {
    return 0;
  }
  v537 = *(_QWORD *)(a1 + 640);
  v538 = *(_QWORD *)(a2 + 640);
  if (v537)
  {
    if (!v538 || !CMMsl::Compass::operator==(v537, v538))
      return 0;
  }
  else if (v538)
  {
    return 0;
  }
  v539 = *(_QWORD *)(a1 + 648);
  v540 = *(_QWORD *)(a2 + 648);
  if (v539)
  {
    if (!v540 || !CMMsl::CompassAlignment::operator==(v539, v540))
      return 0;
  }
  else if (v540)
  {
    return 0;
  }
  v541 = *(_QWORD *)(a1 + 1224);
  v542 = *(_QWORD *)(a2 + 1224);
  if (v541)
  {
    if (!v542 || !CMMsl::GyroCompass::operator==(v541, v542))
      return 0;
  }
  else if (v542)
  {
    return 0;
  }
  v543 = *(_QWORD *)(a1 + 656);
  v544 = *(_QWORD *)(a2 + 656);
  if (v543)
  {
    if (!v544 || !CMMsl::CompassCalibration::operator==(v543, v544))
      return 0;
  }
  else if (v544)
  {
    return 0;
  }
  v545 = *(_QWORD *)(a1 + 2528);
  v546 = *(_QWORD *)(a2 + 2528);
  if (v545)
  {
    if (!v546 || !CMMsl::Pressure::operator==(v545, v546))
      return 0;
  }
  else if (v546)
  {
    return 0;
  }
  v547 = *(_QWORD *)(a1 + 2584);
  v548 = *(_QWORD *)(a2 + 2584);
  if (v547)
  {
    if (!v548)
      return 0;
    v549 = *(_QWORD *)(v547 + 8);
    v550 = *(_QWORD *)(v548 + 8);
    if (v549)
    {
      if (!v550 || !CMMsl::Pressure::operator==(v549, v550))
        return 0;
    }
    else if (v550)
    {
      return 0;
    }
  }
  else if (v548)
  {
    return 0;
  }
  v551 = *(_QWORD *)(a1 + 2552);
  v552 = *(_QWORD *)(a2 + 2552);
  if (v551)
  {
    if (!v552)
      return 0;
    v553 = *(_QWORD *)(v551 + 8);
    v554 = *(_QWORD *)(v552 + 8);
    if (v553)
    {
      if (!v554 || !CMMsl::Pressure::operator==(v553, v554))
        return 0;
    }
    else if (v554)
    {
      return 0;
    }
  }
  else if (v552)
  {
    return 0;
  }
  v555 = *(_QWORD *)(a1 + 2592);
  v556 = *(_QWORD *)(a2 + 2592);
  if (v555)
  {
    if (!v556 || !CMMsl::Prox::operator==(v555, v556))
      return 0;
  }
  else if (v556)
  {
    return 0;
  }
  v557 = *(_QWORD *)(a1 + 3152);
  v558 = *(_QWORD *)(a2 + 3152);
  if (v557)
  {
    if (!v558 || !CMMsl::TouchOscarEmu::operator==(v557, v558))
      return 0;
  }
  else if (v558)
  {
    return 0;
  }
  v559 = *(_QWORD *)(a1 + 744);
  v560 = *(_QWORD *)(a2 + 744);
  if (v559)
  {
    if (!v560 || !CMMsl::DeviceMotion::operator==(v559, v560))
      return 0;
  }
  else if (v560)
  {
    return 0;
  }
  v561 = *(_QWORD *)(a1 + 2048);
  v562 = *(_QWORD *)(a2 + 2048);
  if (v561)
  {
    if (!v562 || !CMMsl::MotionStateUpdate::operator==(v561, v562))
      return 0;
  }
  else if (v562)
  {
    return 0;
  }
  v563 = *(_QWORD *)(a1 + 56);
  v564 = *(_QWORD *)(a2 + 56);
  if (v563)
  {
    if (!v564 || !CMMsl::AccelGps::operator==(v563, v564))
      return 0;
  }
  else if (v564)
  {
    return 0;
  }
  v565 = *(_QWORD *)(a1 + 1248);
  v566 = *(_QWORD *)(a2 + 1248);
  if (v565)
  {
    if (!v566 || !CMMsl::GyroGps::operator==(v565, v566))
      return 0;
  }
  else if (v566)
  {
    return 0;
  }
  v567 = *(_QWORD *)(a1 + 2576);
  v568 = *(_QWORD *)(a2 + 2576);
  if (v567)
  {
    if (!v568)
      return 0;
    v569 = *(_QWORD *)(v567 + 8);
    v570 = *(_QWORD *)(v568 + 8);
    if (v569)
    {
      if (!v570 || !CMMsl::Pressure::operator==(v569, v570))
        return 0;
    }
    else if (v570)
    {
      return 0;
    }
  }
  else if (v568)
  {
    return 0;
  }
  v571 = *(_QWORD *)(a1 + 392);
  v572 = *(_QWORD *)(a2 + 392);
  if (v571)
  {
    if (!v572 || !CMMsl::BTConnection::operator==(v571, v572))
      return 0;
  }
  else if (v572)
  {
    return 0;
  }
  v573 = *(_QWORD *)(a1 + 2840);
  v574 = *(_QWORD *)(a2 + 2840);
  if (v573)
  {
    if (!v574 || !CMMsl::SessionOverride::operator==(v573, v574))
      return 0;
  }
  else if (v574)
  {
    return 0;
  }
  v575 = *(_QWORD *)(a1 + 1864);
  v576 = *(_QWORD *)(a2 + 1864);
  if (v575)
  {
    if (!v576 || !CMMsl::LocationOscarEmu::operator==(v575, v576))
      return 0;
  }
  else if (v576)
  {
    return 0;
  }
  v577 = *(_QWORD *)(a1 + 2016);
  v578 = *(_QWORD *)(a2 + 2016);
  if (v577)
  {
    if (!v578 || !CMMsl::MotionHint::operator==(v577, v578))
      return 0;
  }
  else if (v578)
  {
    return 0;
  }
  v579 = *(_QWORD *)(a1 + 880);
  v580 = *(_QWORD *)(a2 + 880);
  if (v579)
  {
    if (!v580 || !CMMsl::EnhancedDeviceMotion::operator==(v579, v580))
      return 0;
  }
  else if (v580)
  {
    return 0;
  }
  v581 = *(_QWORD *)(a1 + 2104);
  v582 = *(_QWORD *)(a2 + 2104);
  if (v581)
  {
    if (!v582 || !CMMsl::NonlinearBiasFit::operator==(v581, v582) && *(_QWORD *)(a1 + 2104) | *(_QWORD *)(a2 + 2104))
      return 0;
  }
  else if (v582)
  {
    return 0;
  }
  v583 = *(_QWORD *)(a1 + 2096);
  v584 = *(_QWORD *)(a2 + 2096);
  if (v583)
  {
    if (!v584 || !CMMsl::NatalieData::operator==(v583, v584))
      return 0;
  }
  else if (v584)
  {
    return 0;
  }
  v585 = *(_QWORD *)(a1 + 528);
  v586 = *(_QWORD *)(a2 + 528);
  if (v585)
  {
    if (!v586 || !CMMsl::BodyMetrics::operator==(v585, v586))
      return 0;
  }
  else if (v586)
  {
    return 0;
  }
  v587 = *(_QWORD *)(a1 + 3432);
  v588 = *(_QWORD *)(a2 + 3432);
  if (v587)
  {
    if (!v588 || !CMMsl::WorkoutEvent::operator==(v587, v588))
      return 0;
  }
  else if (v588)
  {
    return 0;
  }
  v589 = *(_QWORD *)(a1 + 2136);
  v590 = *(_QWORD *)(a2 + 2136);
  if (v589)
  {
    if (!v590 || !CMMsl::OnsetHeartRateData::operator==(v589, v590))
      return 0;
  }
  else if (v590)
  {
    return 0;
  }
  v591 = *(_QWORD *)(a1 + 3064);
  v592 = *(_QWORD *)(a2 + 3064);
  if (v591)
  {
    if (!v592)
      return 0;
    v593 = *(_QWORD *)(v591 + 8);
    v594 = *(_QWORD *)(v592 + 8);
    if (v593)
    {
      if (!v594 || !CMMsl::OnsetHeartRateData::operator==(v593, v594))
        return 0;
    }
    else if (v594)
    {
      return 0;
    }
  }
  else if (v592)
  {
    return 0;
  }
  v595 = *(_QWORD *)(a1 + 848);
  v596 = *(_QWORD *)(a2 + 848);
  if (v595)
  {
    if (!v596 || !CMMsl::ElevationChange::operator==(v595, v596))
      return 0;
  }
  else if (v596)
  {
    return 0;
  }
  v597 = *(_QWORD *)(a1 + 632);
  v598 = *(_QWORD *)(a2 + 632);
  if (v597)
  {
    if (!v598 || !CMMsl::CoarseElevationChange::operator==(v597, v598))
      return 0;
  }
  else if (v598)
  {
    return 0;
  }
  v599 = *(_QWORD *)(a1 + 2008);
  v600 = *(_QWORD *)(a2 + 2008);
  if (v599)
  {
    if (!v600 || !CMMsl::MotionGPSLocation::operator==(v599, v600))
      return 0;
  }
  else if (v600)
  {
    return 0;
  }
  v601 = *(_QWORD *)(a1 + 2064);
  v602 = *(_QWORD *)(a2 + 2064);
  if (v601)
  {
    if (!v602)
      return 0;
    v603 = *(_QWORD *)(v601 + 8);
    v604 = *(_QWORD *)(v602 + 8);
    if (v603)
    {
      if (!v604 || !CMMsl::MotionGPSLocation::operator==(v603, v604))
        return 0;
    }
    else if (v604)
    {
      return 0;
    }
  }
  else if (v602)
  {
    return 0;
  }
  v605 = *(_QWORD *)(a1 + 3080);
  v606 = *(_QWORD *)(a2 + 3080);
  if (v605)
  {
    if (!v606 || !CMMsl::StrideCalBin::operator==(v605, v606))
      return 0;
  }
  else if (v606)
  {
    return 0;
  }
  v607 = *(_QWORD *)(a1 + 600);
  v608 = *(_QWORD *)(a2 + 600);
  if (v607)
  {
    if (!v608)
      return 0;
    if ((*(_BYTE *)(v607 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v608 + 12) & 1) == 0 || *(unsigned __int8 *)(v607 + 8) != *(unsigned __int8 *)(v608 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v608 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v608)
  {
    return 0;
  }
  v609 = *(_QWORD *)(a1 + 2112);
  v610 = *(_QWORD *)(a2 + 2112);
  if (v609)
  {
    if (!v610 || !CMMsl::Odometer::operator==(v609, v610))
      return 0;
  }
  else if (v610)
  {
    return 0;
  }
  v611 = *(_QWORD *)(a1 + 1952);
  v612 = *(_QWORD *)(a2 + 1952);
  if (v611)
  {
    if (!v612 || !CMMsl::MetsInfo::operator==(v611, v612))
      return 0;
  }
  else if (v612)
  {
    return 0;
  }
  v613 = *(_QWORD *)(a1 + 1008);
  v614 = *(_QWORD *)(a2 + 1008);
  if (v613)
  {
    if (!v614 || !CMMsl::FallStats::operator==(v613, v614))
      return 0;
  }
  else if (v614)
  {
    return 0;
  }
  v615 = *(_QWORD *)(a1 + 424);
  v616 = *(_QWORD *)(a2 + 424);
  if (v615)
  {
    if (!v616 || !CMMsl::BasebandSpeed::operator==(v615, v616))
      return 0;
  }
  else if (v616)
  {
    return 0;
  }
  v617 = *(_QWORD *)(a1 + 3216);
  v618 = *(_QWORD *)(a2 + 3216);
  if (v617)
  {
    if (!v618)
      return 0;
    if ((*(_BYTE *)(v617 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v618 + 12) & 1) == 0 || *(unsigned __int8 *)(v617 + 8) != *(unsigned __int8 *)(v618 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v618 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v618)
  {
    return 0;
  }
  v619 = *(_QWORD *)(a1 + 3024);
  v620 = *(_QWORD *)(a2 + 3024);
  if (v619)
  {
    if (!v620 || !CMMsl::StepCadenceToStrideLengthBin::operator==(v619, v620))
      return 0;
  }
  else if (v620)
  {
    return 0;
  }
  v621 = *(_QWORD *)(a1 + 3408);
  v622 = *(_QWORD *)(a2 + 3408);
  if (v621)
  {
    if (!v622 || !CMMsl::WatchOrientationSettings::operator==(v621, v622))
      return 0;
  }
  else if (v622)
  {
    return 0;
  }
  v623 = *(_QWORD *)(a1 + 2056);
  v624 = *(_QWORD *)(a2 + 2056);
  if (v623)
  {
    if (!v624)
      return 0;
    if ((*(_BYTE *)(v623 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v624 + 12) & 1) == 0 || *(unsigned __int8 *)(v623 + 8) != *(unsigned __int8 *)(v624 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v624 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v624)
  {
    return 0;
  }
  v625 = *(_QWORD *)(a1 + 2040);
  v626 = *(_QWORD *)(a2 + 2040);
  if (v625)
  {
    if (!v626 || !CMMsl::MotionLoiData::operator==(v625, v626))
      return 0;
  }
  else if (v626)
  {
    return 0;
  }
  v627 = *(_QWORD *)(a1 + 2120);
  v628 = *(_QWORD *)(a2 + 2120);
  if (v627)
  {
    if (!v628 || !CMMsl::OdometerWithAltitude::operator==(v627, v628))
      return 0;
  }
  else if (v628)
  {
    return 0;
  }
  v629 = *(_QWORD *)(a1 + 2568);
  v630 = *(_QWORD *)(a2 + 2568);
  if (v629)
  {
    if (!v630 || !CMMsl::PressureFilteredNoTemperature::operator==(v629, v630))
      return 0;
  }
  else if (v630)
  {
    return 0;
  }
  v631 = *(_QWORD *)(a1 + 1400);
  v632 = *(_QWORD *)(a2 + 1400);
  if (v631)
  {
    if (!v632 || !CMMsl::InEarTransition::operator==(v631, v632))
      return 0;
  }
  else if (v632)
  {
    return 0;
  }
  v633 = *(_QWORD *)(a1 + 624);
  v634 = *(_QWORD *)(a2 + 624);
  if (v633)
  {
    if (!v634 || !CMMsl::ClefCalibration::operator==(v633, v634) && *(_QWORD *)(a1 + 624) | *(_QWORD *)(a2 + 624))
      return 0;
  }
  else if (v634)
  {
    return 0;
  }
  v635 = *(_QWORD *)(a1 + 288);
  v636 = *(_QWORD *)(a2 + 288);
  if (v635)
  {
    if (!v636 || !CMMsl::AirpodEvent::operator==(v635, v636))
      return 0;
  }
  else if (v636)
  {
    return 0;
  }
  v637 = *(_QWORD *)(a1 + 1384);
  v638 = *(_QWORD *)(a2 + 1384);
  if (v637)
  {
    if (!v638 || !CMMsl::InEarOptical::operator==(v637, v638))
      return 0;
  }
  else if (v638)
  {
    return 0;
  }
  v639 = *(_QWORD *)(a1 + 1368);
  v640 = *(_QWORD *)(a2 + 1368);
  if (v639)
  {
    if (!v640 || !CMMsl::InEarConstraints::operator==(v639, v640))
      return 0;
  }
  else if (v640)
  {
    return 0;
  }
  v641 = *(_QWORD *)(a1 + 1376);
  v642 = *(_QWORD *)(a2 + 1376);
  if (v641)
  {
    if (!v642 || !CMMsl::InEarOpenLid::operator==(v641, v642))
      return 0;
  }
  else if (v642)
  {
    return 0;
  }
  v643 = *(_QWORD *)(a1 + 1360);
  v644 = *(_QWORD *)(a2 + 1360);
  if (v643)
  {
    if (!v644 || !CMMsl::InEarBaselining::operator==(v643, v644))
      return 0;
  }
  else if (v644)
  {
    return 0;
  }
  v645 = *(_QWORD *)(a1 + 120);
  v646 = *(_QWORD *)(a2 + 120);
  if (v645)
  {
    if (!v646 || !CMMsl::AccessoryConfig::operator==(v645, v646))
      return 0;
  }
  else if (v646)
  {
    return 0;
  }
  v647 = *(_QWORD **)(a1 + 96);
  v648 = *(_QWORD **)(a2 + 96);
  if (v647)
  {
    if (!v648
      || (CMMsl::AccessoryAccelConfig::operator==(v647, v648) & 1) == 0 && *(_QWORD *)(a1 + 96) | *(_QWORD *)(a2 + 96))
    {
      return 0;
    }
  }
  else if (v648)
  {
    return 0;
  }
  v649 = *(_QWORD **)(a1 + 240);
  v650 = *(_QWORD **)(a2 + 240);
  if (v649)
  {
    if (!v650
      || !CMMsl::AccessoryProximityConfig::operator==(v649, v650) && *(_QWORD *)(a1 + 240) | *(_QWORD *)(a2 + 240))
    {
      return 0;
    }
  }
  else if (v650)
  {
    return 0;
  }
  v651 = *(_QWORD *)(a1 + 3120);
  v652 = *(_QWORD *)(a2 + 3120);
  if (v651)
  {
    if (!v652 || !CMMsl::TapDetect::operator==(v651, v652))
      return 0;
  }
  else if (v652)
  {
    return 0;
  }
  v653 = *(_QWORD *)(a1 + 3112);
  v654 = *(_QWORD *)(a2 + 3112);
  if (v653)
  {
    if (!v654 || !CMMsl::TapAccept::operator==(v653, v654))
      return 0;
  }
  else if (v654)
  {
    return 0;
  }
  v655 = *(_QWORD *)(a1 + 840);
  v656 = *(_QWORD *)(a2 + 840);
  if (v655)
  {
    if (!v656 || !CMMsl::DoubleTap::operator==(v655, v656))
      return 0;
  }
  else if (v656)
  {
    return 0;
  }
  v657 = *(_QWORD *)(a1 + 280);
  v658 = *(_QWORD *)(a2 + 280);
  if (v657)
  {
    if (!v658 || !CMMsl::AccessoryWakeDebug::operator==(v657, v658))
      return 0;
  }
  else if (v658)
  {
    return 0;
  }
  v659 = *(_QWORD *)(a1 + 1104);
  v660 = *(_QWORD *)(a2 + 1104);
  if (v659)
  {
    if (!v660 || !CMMsl::GeomagneticData::operator==(v659, v660))
      return 0;
  }
  else if (v660)
  {
    return 0;
  }
  v661 = *(_QWORD *)(a1 + 2688);
  v662 = *(_QWORD *)(a2 + 2688);
  if (v661)
  {
    if (!v662 || !CMMsl::RelativeDeviceMotionInternal::operator==(v661, v662))
      return 0;
  }
  else if (v662)
  {
    return 0;
  }
  v663 = *(_QWORD *)(a1 + 2704);
  v664 = *(_QWORD *)(a2 + 2704);
  if (v663)
  {
    if (!v664 || !CMMsl::RelativeGravityCorrection::operator==(v663, v664))
      return 0;
  }
  else if (v664)
  {
    return 0;
  }
  v665 = *(_QWORD *)(a1 + 2696);
  v666 = *(_QWORD *)(a2 + 2696);
  if (v665)
  {
    if (!v666 || !CMMsl::RelativeGravityConstraints::operator==(v665, v666))
      return 0;
  }
  else if (v666)
  {
    return 0;
  }
  v667 = *(_QWORD *)(a1 + 3608);
  v668 = *(_QWORD *)(a2 + 3608);
  if (v667)
  {
    if (!v668)
      return 0;
    v669 = *(_QWORD *)(v667 + 8);
    v670 = *(_QWORD *)(v668 + 8);
    if (v669)
    {
      if (!v670 || !CMMsl::DeviceMotionCorrection::operator==(v669, v670))
        return 0;
    }
    else if (v670)
    {
      return 0;
    }
  }
  else if (v668)
  {
    return 0;
  }
  v671 = *(_QWORD *)(a1 + 328);
  v672 = *(_QWORD *)(a2 + 328);
  if (v671)
  {
    if (!v672 || !CMMsl::AnchorCorrection::operator==(v671, v672))
      return 0;
  }
  else if (v672)
  {
    return 0;
  }
  v673 = *(_QWORD *)(a1 + 2520);
  v674 = *(_QWORD *)(a2 + 2520);
  if (v673)
  {
    if (!v674 || !CMMsl::PredictedRelativeDeviceMotion::operator==(v673, v674))
      return 0;
  }
  else if (v674)
  {
    return 0;
  }
  v675 = *(_QWORD *)(a1 + 2088);
  v676 = *(_QWORD *)(a2 + 2088);
  if (v675)
  {
    if (!v676 || !CMMsl::MovementStatsSignal::operator==(v675, v676))
      return 0;
  }
  else if (v676)
  {
    return 0;
  }
  v677 = *(_QWORD *)(a1 + 2080);
  v678 = *(_QWORD *)(a2 + 2080);
  if (v677)
  {
    if (!v678 || !CMMsl::MovementStatsGravityProjection::operator==(v677, v678))
      return 0;
  }
  else if (v678)
  {
    return 0;
  }
  v679 = *(_QWORD *)(a1 + 520);
  v680 = *(_QWORD *)(a2 + 520);
  if (v679)
  {
    if (!v680 || !CMMsl::BleedToZeroCorrection::operator==(v679, v680))
      return 0;
  }
  else if (v680)
  {
    return 0;
  }
  v681 = *(_QWORD *)(a1 + 160);
  v682 = *(_QWORD *)(a2 + 160);
  if (v681)
  {
    if (!v682)
      return 0;
    v683 = *(_QWORD *)(v681 + 8);
    v684 = *(_QWORD *)(v682 + 8);
    if (v683)
    {
      if (!v684 || !CMMsl::AccessoryConfig::operator==(v683, v684))
        return 0;
    }
    else if (v684)
    {
      return 0;
    }
  }
  else if (v682)
  {
    return 0;
  }
  v685 = *(_QWORD *)(a1 + 168);
  v686 = *(_QWORD *)(a2 + 168);
  if (v685)
  {
    if (!v686 || (CMMsl::AccessoryGyroGYTT::operator==(v685, v686) & 1) == 0)
      return 0;
  }
  else if (v686)
  {
    return 0;
  }
  v687 = *(_QWORD *)(a1 + 152);
  v688 = *(_QWORD *)(a2 + 152);
  if (v687)
  {
    if (!v688 || (CMMsl::AccessoryGyroCachedBias::operator==(v687, v688) & 1) == 0)
      return 0;
  }
  else if (v688)
  {
    return 0;
  }
  v689 = *(_QWORD *)(a1 + 1064);
  v690 = *(_QWORD *)(a2 + 1064);
  if (v689)
  {
    if (!v690 || !CMMsl::GaitCycleSegment::operator==(v689, v690))
      return 0;
  }
  else if (v690)
  {
    return 0;
  }
  v691 = *(_QWORD *)(a1 + 1072);
  v692 = *(_QWORD *)(a2 + 1072);
  if (v691)
  {
    if (!v692 || !CMMsl::GaitCycleSegmentationState::operator==(v691, v692))
      return 0;
  }
  else if (v692)
  {
    return 0;
  }
  v693 = *(_QWORD *)(a1 + 664);
  v694 = *(_QWORD *)(a2 + 664);
  if (v693)
  {
    if (!v694 || !CMMsl::CompassCalibrationAttempt::operator==(v693, v694))
      return 0;
  }
  else if (v694)
  {
    return 0;
  }
  v695 = *(_QWORD *)(a1 + 3304);
  v696 = *(_QWORD *)(a2 + 3304);
  if (v695)
  {
    if (!v696)
      return 0;
    v697 = *(_QWORD *)(v695 + 8);
    v698 = *(_QWORD *)(v696 + 8);
    if (v697)
    {
      if (!v698 || !CMMsl::DeviceMotionCorrection::operator==(v697, v698))
        return 0;
    }
    else if (v698)
    {
      return 0;
    }
  }
  else if (v696)
  {
    return 0;
  }
  v699 = *(_QWORD *)(a1 + 3296);
  v700 = *(_QWORD *)(a2 + 3296);
  if (v699)
  {
    if (!v700 || !CMMsl::VisualLocalizationAttitudeConstraints::operator==(v699, v700))
      return 0;
  }
  else if (v700)
  {
    return 0;
  }
  v701 = *(_QWORD *)(a1 + 200);
  v702 = *(_QWORD *)(a2 + 200);
  if (v701)
  {
    if (!v702)
      return 0;
    v703 = *(_QWORD *)(v701 + 8);
    v704 = *(_QWORD *)(v702 + 8);
    if (v703)
    {
      if (!v704 || !CMMsl::AccessoryConfig::operator==(v703, v704))
        return 0;
    }
    else if (v704)
    {
      return 0;
    }
  }
  else if (v702)
  {
    return 0;
  }
  v705 = *(_QWORD *)(a1 + 952);
  v706 = *(_QWORD *)(a2 + 952);
  if (v705)
  {
    if (!v706 || !CMMsl::FallDetectionReferee::operator==(v705, v706))
      return 0;
  }
  else if (v706)
  {
    return 0;
  }
  v707 = *(_QWORD *)(a1 + 960);
  v708 = *(_QWORD *)(a2 + 960);
  if (v707)
  {
    if (!v708 || !CMMsl::FallDetectionReplay::operator==(v707, v708))
      return 0;
  }
  else if (v708)
  {
    return 0;
  }
  v709 = *(_QWORD *)(a1 + 968);
  v710 = *(_QWORD *)(a2 + 968);
  if (v709)
  {
    if (!v710 || !CMMsl::FallDetectionStateMachine::operator==(v709, v710))
      return 0;
  }
  else if (v710)
  {
    return 0;
  }
  v711 = *(_QWORD *)(a1 + 936);
  v712 = *(_QWORD *)(a2 + 936);
  if (v711)
  {
    if (!v712 || !CMMsl::FallDetectionDetector::operator==(v711, v712))
      return 0;
  }
  else if (v712)
  {
    return 0;
  }
  v713 = *(_QWORD *)(a1 + 992);
  v714 = *(_QWORD *)(a2 + 992);
  if (v713)
  {
    if (!v714 || !CMMsl::FallFalsePositiveSuppressionFeatures::operator==(v713, v714))
      return 0;
  }
  else if (v714)
  {
    return 0;
  }
  v715 = *(_QWORD *)(a1 + 136);
  v716 = *(_QWORD *)(a2 + 136);
  if (v715)
  {
    if (!v716 || !CMMsl::AccessoryDeviceMotionConfig::operator==(v715, v716))
      return 0;
  }
  else if (v716)
  {
    return 0;
  }
  v717 = *(_QWORD *)(a1 + 2680);
  v718 = *(_QWORD *)(a2 + 2680);
  if (v717)
  {
    if (!v718 || !CMMsl::RelativeDeviceMotionCorrelatedMotion::operator==(v717, v718))
      return 0;
  }
  else if (v718)
  {
    return 0;
  }
  v719 = *(_QWORD *)(a1 + 2672);
  v720 = *(_QWORD *)(a2 + 2672);
  if (v719)
  {
    if (!v720 || !CMMsl::RelativeDeviceMotionComplexTransition::operator==(v719, v720))
      return 0;
  }
  else if (v720)
  {
    return 0;
  }
  v721 = *(_QWORD *)(a1 + 752);
  v722 = *(_QWORD *)(a2 + 752);
  if (v721)
  {
    if (!v722 || !CMMsl::DeviceMotionAlwaysOn::operator==(v721, v722))
      return 0;
  }
  else if (v722)
  {
    return 0;
  }
  v723 = *(_QWORD *)(a1 + 944);
  v724 = *(_QWORD *)(a2 + 944);
  if (v723)
  {
    if (!v724 || !CMMsl::FallDetectionGyroControllerReplay::operator==(v723, v724))
      return 0;
  }
  else if (v724)
  {
    return 0;
  }
  v725 = *(_QWORD *)(a1 + 3352);
  v726 = *(_QWORD *)(a2 + 3352);
  if (v725)
  {
    if (!v726 || !CMMsl::WalkingDetectionResult::operator==(v725, v726))
      return 0;
  }
  else if (v726)
  {
    return 0;
  }
  v727 = *(_QWORD *)(a1 + 184);
  v728 = *(_QWORD *)(a2 + 184);
  if (v727)
  {
    if (!v728 || !CMMsl::AccessoryInEarStatus::operator==(v727, v728))
      return 0;
  }
  else if (v728)
  {
    return 0;
  }
  v729 = *(_QWORD *)(a1 + 976);
  v730 = *(_QWORD *)(a2 + 976);
  if (v729)
  {
    if (!v730 || !CMMsl::FallDetectionWristStateReplay::operator==(v729, v730))
      return 0;
  }
  else if (v730)
  {
    return 0;
  }
  v731 = *(_QWORD *)(a1 + 1176);
  v732 = *(_QWORD *)(a2 + 1176);
  if (v731)
  {
    if (!v732 || !CMMsl::GyroBiasEstimateError::operator==(v731, v732))
      return 0;
  }
  else if (v732)
  {
    return 0;
  }
  v733 = *(_QWORD *)(a1 + 3056);
  v734 = *(_QWORD *)(a2 + 3056);
  if (v733)
  {
    if (!v734 || !CMMsl::StepLikelihoodFeatures::operator==(v733, v734))
      return 0;
  }
  else if (v734)
  {
    return 0;
  }
  v735 = *(_QWORD *)(a1 + 1016);
  v736 = *(_QWORD *)(a2 + 1016);
  if (v735)
  {
    if (!v736 || !CMMsl::FirstStepFeatures::operator==(v735, v736))
      return 0;
  }
  else if (v736)
  {
    return 0;
  }
  v737 = *(_QWORD *)(a1 + 264);
  v738 = *(_QWORD *)(a2 + 264);
  if (v737)
  {
    if (!v738 || !CMMsl::AccessoryStepDetectorDebug::operator==(v737, v738))
      return 0;
  }
  else if (v738)
  {
    return 0;
  }
  v739 = *(_QWORD *)(a1 + 2864);
  v740 = *(_QWORD *)(a2 + 2864);
  if (v739)
  {
    if (!v740 || !CMMsl::SitStandDetectorFeatures::operator==(v739, v740))
      return 0;
  }
  else if (v740)
  {
    return 0;
  }
  v741 = *(_QWORD *)(a1 + 2888);
  v742 = *(_QWORD *)(a2 + 2888);
  if (v741)
  {
    if (!v742 || !CMMsl::SitStandDetectorTransition::operator==(v741, v742))
      return 0;
  }
  else if (v742)
  {
    return 0;
  }
  v743 = *(_QWORD *)(a1 + 2872);
  v744 = *(_QWORD *)(a2 + 2872);
  if (v743)
  {
    if (!v744 || !CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator==(v743, v744))
      return 0;
  }
  else if (v744)
  {
    return 0;
  }
  v745 = *(_QWORD *)(a1 + 2880);
  v746 = *(_QWORD *)(a2 + 2880);
  if (v745)
  {
    if (!v746 || !CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator==(v745, v746))
      return 0;
  }
  else if (v746)
  {
    return 0;
  }
  v747 = *(_QWORD *)(a1 + 2928);
  v748 = *(_QWORD *)(a2 + 2928);
  if (v747)
  {
    if (!v748 || !CMMsl::SpatialEvent::operator==(v747, v748))
      return 0;
  }
  else if (v748)
  {
    return 0;
  }
  v749 = *(_QWORD *)(a1 + 984);
  v750 = *(_QWORD *)(a2 + 984);
  if (v749)
  {
    if (!v750 || !CMMsl::FallDistanceReplay::operator==(v749, v750))
      return 0;
  }
  else if (v750)
  {
    return 0;
  }
  v751 = *(_QWORD *)(a1 + 1456);
  v752 = *(_QWORD *)(a2 + 1456);
  if (v751)
  {
    if (!v752 || !CMMsl::JitterBufferLevel::operator==(v751, v752))
      return 0;
  }
  else if (v752)
  {
    return 0;
  }
  v753 = *(_QWORD *)(a1 + 2560);
  v754 = *(_QWORD *)(a2 + 2560);
  if (v753)
  {
    if (!v754 || !CMMsl::PressureFiltered1HzLowPass::operator==(v753, v754))
      return 0;
  }
  else if (v754)
  {
    return 0;
  }
  v755 = *(_QWORD *)(a1 + 1992);
  v756 = *(_QWORD *)(a2 + 1992);
  if (v755)
  {
    if (!v756 || !CMMsl::MotionActivityReplay::operator==(v755, v756))
      return 0;
  }
  else if (v756)
  {
    return 0;
  }
  v757 = *(_QWORD *)(a1 + 928);
  v758 = *(_QWORD *)(a2 + 928);
  if (v757)
  {
    if (!v758 || !CMMsl::FallDetectionActivityClassifierReplay::operator==(v757, v758))
      return 0;
  }
  else if (v758)
  {
    return 0;
  }
  v759 = *(_QWORD *)(a1 + 1824);
  v760 = *(_QWORD *)(a2 + 1824);
  if (v759)
  {
    if (!v760 || !CMMsl::LegacyALS5CHInput::operator==(v759, v760))
      return 0;
  }
  else if (v760)
  {
    return 0;
  }
  v761 = *(_QWORD *)(a1 + 816);
  v762 = *(_QWORD *)(a2 + 816);
  if (v761)
  {
    if (!v762 || !CMMsl::DopplerSample::operator==(v761, v762))
      return 0;
  }
  else if (v762)
  {
    return 0;
  }
  v763 = *(_QWORD *)(a1 + 800);
  v764 = *(_QWORD *)(a2 + 800);
  if (v763)
  {
    if (!v764 || !CMMsl::DopplerProximityEvent::operator==(v763, v764))
      return 0;
  }
  else if (v764)
  {
    return 0;
  }
  v765 = *(_QWORD *)(a1 + 808);
  v766 = *(_QWORD *)(a2 + 808);
  if (v765)
  {
    if (!v766 || !CMMsl::DopplerRawDataInput::operator==(v765, v766))
      return 0;
  }
  else if (v766)
  {
    return 0;
  }
  v767 = *(_QWORD *)(a1 + 792);
  v768 = *(_QWORD *)(a2 + 792);
  if (v767)
  {
    if (!v768 || !CMMsl::DopplerDebugRecord::operator==(v767, v768))
      return 0;
  }
  else if (v768)
  {
    return 0;
  }
  v769 = *(_QWORD *)(a1 + 2144);
  v770 = *(_QWORD *)(a2 + 2144);
  if (v769)
  {
    if (!v770 || !CMMsl::Orientation::operator==(v769, v770))
      return 0;
  }
  else if (v770)
  {
    return 0;
  }
  v771 = *(_QWORD *)(a1 + 1528);
  v772 = *(_QWORD *)(a2 + 1528);
  if (v771)
  {
    if (!v772 || !CMMsl::KappaAudioResult::operator==(v771, v772))
      return 0;
  }
  else if (v772)
  {
    return 0;
  }
  v773 = *(_QWORD *)(a1 + 1536);
  v774 = *(_QWORD *)(a2 + 1536);
  if (v773)
  {
    if (!v774 || !CMMsl::KappaBaroResult::operator==(v773, v774))
      return 0;
  }
  else if (v774)
  {
    return 0;
  }
  v775 = *(_QWORD *)(a1 + 1560);
  v776 = *(_QWORD *)(a2 + 1560);
  if (v775)
  {
    if (!v776 || !CMMsl::KappaGpsResult::operator==(v775, v776))
      return 0;
  }
  else if (v776)
  {
    return 0;
  }
  v777 = *(_QWORD *)(a1 + 1648);
  v778 = *(_QWORD *)(a2 + 1648);
  if (v777)
  {
    if (!v778 || !CMMsl::KappaPulseResult::operator==(v777, v778))
      return 0;
  }
  else if (v778)
  {
    return 0;
  }
  v779 = *(_QWORD *)(a1 + 1768);
  v780 = *(_QWORD *)(a2 + 1768);
  if (v779)
  {
    if (!v780 || !CMMsl::KappaZgResult::operator==(v779, v780))
      return 0;
  }
  else if (v780)
  {
    return 0;
  }
  v781 = *(_QWORD *)(a1 + 1760);
  v782 = *(_QWORD *)(a2 + 1760);
  if (v781)
  {
    if (!v782)
      return 0;
    if ((*(_BYTE *)(v781 + 16) & 1) != 0)
    {
      if ((*(_BYTE *)(v782 + 16) & 1) == 0 || *(_QWORD *)(v781 + 8) != *(_QWORD *)(v782 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v782 + 16) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v782)
  {
    return 0;
  }
  v783 = *(_QWORD *)(a1 + 1632);
  v784 = *(_QWORD *)(a2 + 1632);
  if (v783)
  {
    if (!v784 || !CMMsl::KappaPulseInertialAccel::operator==(v783, v784))
      return 0;
  }
  else if (v784)
  {
    return 0;
  }
  v785 = *(_QWORD *)(a1 + 1312);
  v786 = *(_QWORD *)(a2 + 1312);
  if (v785)
  {
    if (!v786)
      return 0;
    if ((*(_BYTE *)(v785 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v786 + 12) & 1) == 0 || *(_DWORD *)(v785 + 8) != *(_DWORD *)(v786 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v786 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v786)
  {
    return 0;
  }
  v787 = *(_QWORD *)(a1 + 1304);
  v788 = *(_QWORD *)(a2 + 1304);
  if (v787)
  {
    if (!v788)
      return 0;
    if ((*(_BYTE *)(v787 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v788 + 12) & 1) == 0 || *(_DWORD *)(v787 + 8) != *(_DWORD *)(v788 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v788 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v788)
  {
    return 0;
  }
  v789 = *(_QWORD *)(a1 + 1520);
  v790 = *(_QWORD *)(a2 + 1520);
  if (v789)
  {
    if (!v790 || !CMMsl::KappaAirbagResult::operator==(v789, v790))
      return 0;
  }
  else if (v790)
  {
    return 0;
  }
  v791 = *(_QWORD *)(a1 + 1544);
  v792 = *(_QWORD *)(a2 + 1544);
  if (v791)
  {
    if (!v792 || !CMMsl::KappaCrashResult::operator==(v791, v792))
      return 0;
  }
  else if (v792)
  {
    return 0;
  }
  v793 = *(_QWORD *)(a1 + 1656);
  v794 = *(_QWORD *)(a2 + 1656);
  if (v793)
  {
    if (!v794 || !CMMsl::KappaQuiescenceResult::operator==(v793, v794))
      return 0;
  }
  else if (v794)
  {
    return 0;
  }
  v795 = *(_QWORD *)(a1 + 1664);
  v796 = *(_QWORD *)(a2 + 1664);
  if (v795)
  {
    if (!v796 || !CMMsl::KappaRecoveryResult::operator==(v795, v796))
      return 0;
  }
  else if (v796)
  {
    return 0;
  }
  v797 = *(_QWORD *)(a1 + 1696);
  v798 = *(_QWORD *)(a2 + 1696);
  if (v797)
  {
    if (!v798 || !CMMsl::KappaRolloverCrashResult::operator==(v797, v798))
      return 0;
  }
  else if (v798)
  {
    return 0;
  }
  v799 = *(_QWORD *)(a1 + 1600);
  v800 = *(_QWORD *)(a2 + 1600);
  if (v799)
  {
    if (!v800 || !CMMsl::KappaMildImpactResult::operator==(v799, v800))
      return 0;
  }
  else if (v800)
  {
    return 0;
  }
  v801 = *(_QWORD *)(a1 + 1584);
  v802 = *(_QWORD *)(a2 + 1584);
  if (v801)
  {
    if (!v802 || !CMMsl::KappaLackOfMotionResult::operator==(v801, v802))
      return 0;
  }
  else if (v802)
  {
    return 0;
  }
  v803 = *(_QWORD *)(a1 + 1704);
  v804 = *(_QWORD *)(a2 + 1704);
  if (v803)
  {
    if (!v804 || !CMMsl::KappaSevereCrashResult::operator==(v803, v804))
      return 0;
  }
  else if (v804)
  {
    return 0;
  }
  v805 = *(_QWORD *)(a1 + 1592);
  v806 = *(_QWORD *)(a2 + 1592);
  if (v805)
  {
    if (!v806 || !CMMsl::KappaLocalAudioResult::operator==(v805, v806))
      return 0;
  }
  else if (v806)
  {
    return 0;
  }
  v807 = *(_QWORD *)(a1 + 1672);
  v808 = *(_QWORD *)(a2 + 1672);
  if (v807)
  {
    if (!v808 || !CMMsl::KappaRemoteAudioResult::operator==(v807, v808))
      return 0;
  }
  else if (v808)
  {
    return 0;
  }
  v809 = *(_QWORD *)(a1 + 768);
  v810 = *(_QWORD *)(a2 + 768);
  if (v809)
  {
    if (!v810 || !CMMsl::DirectionOfTravelMetrics::operator==(v809, v810))
      return 0;
  }
  else if (v810)
  {
    return 0;
  }
  v811 = *(_QWORD *)(a1 + 3224);
  v812 = *(_QWORD *)(a2 + 3224);
  if (v811)
  {
    if (!v812 || !CMMsl::ViewObstructedMachineLearningDecision::operator==(v811, v812))
      return 0;
  }
  else if (v812)
  {
    return 0;
  }
  v813 = *(_QWORD *)(a1 + 1296);
  v814 = *(_QWORD *)(a2 + 1296);
  if (v813)
  {
    if (!v814 || !CMMsl::HeadToHeadsetTransformationEstimate::operator==(v813, v814))
      return 0;
  }
  else if (v814)
  {
    return 0;
  }
  v815 = *(_QWORD *)(a1 + 3232);
  v816 = *(_QWORD *)(a2 + 3232);
  if (v815)
  {
    if (!v816 || !CMMsl::ViewObstructedMachineLearningFeatures::operator==(v815, v816))
      return 0;
  }
  else if (v816)
  {
    return 0;
  }
  v817 = *(_QWORD *)(a1 + 3240);
  v818 = *(_QWORD *)(a2 + 3240);
  if (v817)
  {
    if (!v818 || !CMMsl::ViewObstructedMachineLearningProbabilities::operator==(v817, v818))
      return 0;
  }
  else if (v818)
  {
    return 0;
  }
  v819 = *(_QWORD *)(a1 + 2728);
  v820 = *(_QWORD *)(a2 + 2728);
  if (v819)
  {
    if (!v820 || !CMMsl::RunningArmSwingSignals::operator==(v819, v820))
      return 0;
  }
  else if (v820)
  {
    return 0;
  }
  v821 = *(_QWORD *)(a1 + 2736);
  v822 = *(_QWORD *)(a2 + 2736);
  if (v821)
  {
    if (!v822 || !CMMsl::RunningCentripetalAccelSignals::operator==(v821, v822))
      return 0;
  }
  else if (v822)
  {
    return 0;
  }
  v823 = *(_QWORD *)(a1 + 2760);
  v824 = *(_QWORD *)(a2 + 2760);
  if (v823)
  {
    if (!v824 || !CMMsl::RunningRotationAxis::operator==(v823, v824))
      return 0;
  }
  else if (v824)
  {
    return 0;
  }
  v825 = *(_QWORD *)(a1 + 2800);
  v826 = *(_QWORD *)(a2 + 2800);
  if (v825)
  {
    if (!v826 || !CMMsl::RunningVerticalOscillationSignals::operator==(v825, v826))
      return 0;
  }
  else if (v826)
  {
    return 0;
  }
  v827 = *(_QWORD *)(a1 + 2784);
  v828 = *(_QWORD *)(a2 + 2784);
  if (v827)
  {
    if (!v828 || !CMMsl::RunningVerticalOscillation::operator==(v827, v828))
      return 0;
  }
  else if (v828)
  {
    return 0;
  }
  v829 = *(_QWORD *)(a1 + 1712);
  v830 = *(_QWORD *)(a2 + 1712);
  if (v829)
  {
    if (!v830 || !CMMsl::KappaSpinResult::operator==(v829, v830) && *(_QWORD *)(a1 + 1712) | *(_QWORD *)(a2 + 1712))
      return 0;
  }
  else if (v830)
  {
    return 0;
  }
  v831 = *(_QWORD *)(a1 + 1624);
  v832 = *(_QWORD *)(a2 + 1624);
  if (v831)
  {
    if (!v832 || !CMMsl::KappaPulseDeltaV::operator==(v831, v832))
      return 0;
  }
  else if (v832)
  {
    return 0;
  }
  v833 = *(_QWORD *)(a1 + 2776);
  v834 = *(_QWORD *)(a2 + 2776);
  if (v833)
  {
    if (!v834 || !CMMsl::RunningStrideLength::operator==(v833, v834))
      return 0;
  }
  else if (v834)
  {
    return 0;
  }
  v835 = *(_QWORD *)(a1 + 1448);
  v836 = *(_QWORD *)(a2 + 1448);
  if (v835)
  {
    if (!v836 || !CMMsl::ISPPacket::operator==(v835, v836))
      return 0;
  }
  else if (v836)
  {
    return 0;
  }
  v837 = *(_QWORD *)(a1 + 1576);
  v838 = *(_QWORD *)(a2 + 1576);
  if (v837)
  {
    if (!v838 || !CMMsl::KappaHighSpeedCrashResult::operator==(v837, v838))
      return 0;
  }
  else if (v838)
  {
    return 0;
  }
  v839 = *(_QWORD *)(a1 + 1640);
  v840 = *(_QWORD *)(a2 + 1640);
  if (v839)
  {
    if (!v840 || !CMMsl::KappaPulseInertialHgAccel::operator==(v839, v840))
      return 0;
  }
  else if (v840)
  {
    return 0;
  }
  v841 = *(_QWORD *)(a1 + 1280);
  v842 = *(_QWORD *)(a2 + 1280);
  if (v841)
  {
    if (!v842 || !CMMsl::HarmonicMetrics::operator==(v841, v842))
      return 0;
  }
  else if (v842)
  {
    return 0;
  }
  v843 = *(_QWORD *)(a1 + 592);
  v844 = *(_QWORD *)(a2 + 592);
  if (v843)
  {
    if (!v844 || !CMMsl::CalorieControllerMETsConsumed::operator==(v843, v844))
      return 0;
  }
  else if (v844)
  {
    return 0;
  }
  v845 = *(_QWORD *)(a1 + 2336);
  v846 = *(_QWORD *)(a2 + 2336);
  if (v845)
  {
    if (!v846 || !CMMsl::PedometerPathStraightness::operator==(v845, v846))
      return 0;
  }
  else if (v846)
  {
    return 0;
  }
  v847 = *(_QWORD *)(a1 + 688);
  v848 = *(_QWORD *)(a2 + 688);
  if (v847)
  {
    if (!v848 || !CMMsl::ComplexHandMotion::operator==(v847, v848))
      return 0;
  }
  else if (v848)
  {
    return 0;
  }
  v849 = *(_QWORD *)(a1 + 856);
  v850 = *(_QWORD *)(a2 + 856);
  if (v849)
  {
    if (!v850 || !CMMsl::ElevationGradeEstimator::operator==(v849, v850))
      return 0;
  }
  else if (v850)
  {
    return 0;
  }
  v851 = *(_QWORD *)(a1 + 3200);
  v852 = *(_QWORD *)(a2 + 3200);
  if (v851)
  {
    if (!v852 || !CMMsl::VO2MaxModelInput::operator==(v851, v852))
      return 0;
  }
  else if (v852)
  {
    return 0;
  }
  v853 = *(_QWORD *)(a1 + 2608);
  v854 = *(_QWORD *)(a2 + 2608);
  if (v853)
  {
    if (!v854 || !CMMsl::ProxCalibration::operator==(v853, v854))
      return 0;
  }
  else if (v854)
  {
    return 0;
  }
  v855 = *(_QWORD *)(a1 + 1728);
  v856 = *(_QWORD *)(a2 + 1728);
  if (v855)
  {
    if (!v856 || !CMMsl::KappaStepsResult::operator==(v855, v856))
      return 0;
  }
  else if (v856)
  {
    return 0;
  }
  v857 = *(_QWORD *)(a1 + 3344);
  v858 = *(_QWORD *)(a2 + 3344);
  if (v857)
  {
    if (!v858 || !CMMsl::WakeGestureSample::operator==(v857, v858))
      return 0;
  }
  else if (v858)
  {
    return 0;
  }
  v859 = *(_QWORD *)(a1 + 1568);
  v860 = *(_QWORD *)(a2 + 1568);
  if (v859)
  {
    if (!v860 || !CMMsl::KappaGravityAutocorrelationResult::operator==(v859, v860))
      return 0;
  }
  else if (v860)
  {
    return 0;
  }
  v861 = *(_QWORD *)(a1 + 2792);
  v862 = *(_QWORD *)(a2 + 2792);
  if (v861)
  {
    if (!v862 || !CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator==(v861, v862))
      return 0;
  }
  else if (v862)
  {
    return 0;
  }
  v863 = *(_QWORD *)(a1 + 3096);
  v864 = *(_QWORD *)(a2 + 3096);
  if (v863)
  {
    if (!v864 || !CMMsl::SubStats::operator==(v863, v864))
      return 0;
  }
  else if (v864)
  {
    return 0;
  }
  v865 = *(_QWORD *)(a1 + 2312);
  v866 = *(_QWORD *)(a2 + 2312);
  if (v865)
  {
    if (!v866 || !CMMsl::PedOdomFusionExtendedModeSegment::operator==(v865, v866))
      return 0;
  }
  else if (v866)
  {
    return 0;
  }
  v867 = *(_QWORD *)(a1 + 1896);
  v868 = *(_QWORD *)(a2 + 1896);
  if (v867)
  {
    if (!v868 || !CMMsl::MagicMountState::operator==(v867, v868))
      return 0;
  }
  else if (v868)
  {
    return 0;
  }
  v869 = *(_QWORD *)(a1 + 2264);
  v870 = *(_QWORD *)(a2 + 2264);
  if (v869)
  {
    if (!v870 || !CMMsl::PDRPedestrianClassifierState::operator==(v869, v870))
      return 0;
  }
  else if (v870)
  {
    return 0;
  }
  v871 = *(_QWORD *)(a1 + 2272);
  v872 = *(_QWORD *)(a2 + 2272);
  if (v871)
  {
    if (!v872 || !CMMsl::PDRPlacementClassifierState::operator==(v871, v872))
      return 0;
  }
  else if (v872)
  {
    return 0;
  }
  v873 = *(_QWORD *)(a1 + 2280);
  v874 = *(_QWORD *)(a2 + 2280);
  if (v873)
  {
    if (!v874 || !CMMsl::PDRSpeedEstimatorState::operator==(v873, v874))
      return 0;
  }
  else if (v874)
  {
    return 0;
  }
  v875 = *(_QWORD *)(a1 + 2160);
  v876 = *(_QWORD *)(a2 + 2160);
  if (v875)
  {
    if (!v876 || !CMMsl::PDRDOTEstimatorState::operator==(v875, v876))
      return 0;
  }
  else if (v876)
  {
    return 0;
  }
  v877 = *(_QWORD *)(a1 + 2296);
  v878 = *(_QWORD *)(a2 + 2296);
  if (v877)
  {
    if (!v878 || !CMMsl::PDRVelocityEstimatorState::operator==(v877, v878))
      return 0;
  }
  else if (v878)
  {
    return 0;
  }
  v879 = *(_QWORD *)(a1 + 1816);
  v880 = *(_QWORD *)(a2 + 1816);
  if (v879)
  {
    if (!v880 || !CMMsl::KMVelocityEstimatorState::operator==(v879, v880))
      return 0;
  }
  else if (v880)
  {
    return 0;
  }
  v881 = *(_QWORD *)(a1 + 3208);
  v882 = *(_QWORD *)(a2 + 3208);
  if (v881)
  {
    if (!v882 || !CMMsl::VelocityEstimatorFusionState::operator==(v881, v882))
      return 0;
  }
  else if (v882)
  {
    return 0;
  }
  v883 = *(_QWORD *)(a1 + 2232);
  v884 = *(_QWORD *)(a2 + 2232);
  if (v883)
  {
    if (!v884 || !CMMsl::PDRFenceReference::operator==(v883, v884))
      return 0;
  }
  else if (v884)
  {
    return 0;
  }
  v885 = *(_QWORD *)(a1 + 2240);
  v886 = *(_QWORD *)(a2 + 2240);
  if (v885)
  {
    if (!v886 || !CMMsl::PDRFenceState::operator==(v885, v886))
      return 0;
  }
  else if (v886)
  {
    return 0;
  }
  v887 = *(_QWORD *)(a1 + 3192);
  v888 = *(_QWORD *)(a2 + 3192);
  if (v887)
  {
    if (!v888 || !CMMsl::UWBRange::operator==(v887, v888))
      return 0;
  }
  else if (v888)
  {
    return 0;
  }
  v889 = *(_QWORD *)(a1 + 3104);
  v890 = *(_QWORD *)(a2 + 3104);
  if (v889)
  {
    if (!v890 || !CMMsl::SwingDoTCandidate::operator==(v889, v890))
      return 0;
  }
  else if (v890)
  {
    return 0;
  }
  v891 = *(_QWORD *)(a1 + 824);
  v892 = *(_QWORD *)(a2 + 824);
  if (v891)
  {
    if (!v892 || !CMMsl::DoTEstimatorHandSwing::operator==(v891, v892))
      return 0;
  }
  else if (v892)
  {
    return 0;
  }
  v893 = *(_QWORD *)(a1 + 1744);
  v894 = *(_QWORD *)(a2 + 1744);
  if (v893)
  {
    if (!v894 || !CMMsl::KappaTriggerClustersResult::operator==(v893, v894))
      return 0;
  }
  else if (v894)
  {
    return 0;
  }
  v895 = *(_QWORD *)(a1 + 2856);
  v896 = *(_QWORD *)(a2 + 2856);
  if (v895)
  {
    if (!v896 || !CMMsl::SimActivityEvent::operator==(v895, v896))
      return 0;
  }
  else if (v896)
  {
    return 0;
  }
  v897 = *(_QWORD *)(a1 + 2224);
  v898 = *(_QWORD *)(a2 + 2224);
  if (v897)
  {
    if (!v898 || !CMMsl::PDRFeatures::operator==(v897, v898))
      return 0;
  }
  else if (v898)
  {
    return 0;
  }
  v899 = *(_QWORD *)(a1 + 2176);
  v900 = *(_QWORD *)(a2 + 2176);
  if (v899)
  {
    if (!v900 || !CMMsl::PDRDOTEstimatorStateBody::operator==(v899, v900))
      return 0;
  }
  else if (v900)
  {
    return 0;
  }
  v901 = *(_QWORD *)(a1 + 2168);
  v902 = *(_QWORD *)(a2 + 2168);
  if (v901)
  {
    if (!v902 || !CMMsl::PDRDOTEstimatorStateArmSwing::operator==(v901, v902))
      return 0;
  }
  else if (v902)
  {
    return 0;
  }
  v903 = *(_QWORD *)(a1 + 2200);
  v904 = *(_QWORD *)(a2 + 2200);
  if (v903)
  {
    if (!v904 || !CMMsl::PDRDOTEstimatorStateHeading::operator==(v903, v904))
      return 0;
  }
  else if (v904)
  {
    return 0;
  }
  v905 = *(_QWORD *)(a1 + 104);
  v906 = *(_QWORD *)(a2 + 104);
  if (v905)
  {
    if (!v906 || !CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator==(v905, v906))
      return 0;
  }
  else if (v906)
  {
    return 0;
  }
  v907 = *(_QWORD *)(a1 + 2288);
  v908 = *(_QWORD *)(a2 + 2288);
  if (v907)
  {
    if (!v908 || !CMMsl::PDRSpeedEstimatorStateDebug::operator==(v907, v908))
      return 0;
  }
  else if (v908)
  {
    return 0;
  }
  v909 = *(_QWORD *)(a1 + 2472);
  v910 = *(_QWORD *)(a2 + 2472);
  if (v909)
  {
    if (!v910 || !CMMsl::PrecisionFindingDOTEstimate::operator==(v909, v910))
      return 0;
  }
  else if (v910)
  {
    return 0;
  }
  v911 = *(_QWORD *)(a1 + 2496);
  v912 = *(_QWORD *)(a2 + 2496);
  if (v911)
  {
    if (!v912 || !CMMsl::PrecisionFindingState::operator==(v911, v912))
      return 0;
  }
  else if (v912)
  {
    return 0;
  }
  v913 = *(_QWORD *)(a1 + 1688);
  v914 = *(_QWORD *)(a2 + 1688);
  if (v913)
  {
    if (!v914 || !CMMsl::KappaRoadsResult::operator==(v913, v914))
      return 0;
  }
  else if (v914)
  {
    return 0;
  }
  v915 = *(_QWORD *)(a1 + 2504);
  v916 = *(_QWORD *)(a2 + 2504);
  if (v915)
  {
    if (!v916 || !CMMsl::PrecisionFindingVelocityEstimate::operator==(v915, v916))
      return 0;
  }
  else if (v916)
  {
    return 0;
  }
  v917 = *(_QWORD *)(a1 + 2480);
  v918 = *(_QWORD *)(a2 + 2480);
  if (v917)
  {
    if (!v918 || !CMMsl::PrecisionFindingRangeFilter::operator==(v917, v918))
      return 0;
  }
  else if (v918)
  {
    return 0;
  }
  v919 = *(_QWORD *)(a1 + 2216);
  v920 = *(_QWORD *)(a2 + 2216);
  if (v919)
  {
    if (!v920 || !CMMsl::PDRDOTMeasurementSelectorState::operator==(v919, v920))
      return 0;
  }
  else if (v920)
  {
    return 0;
  }
  v921 = *(_QWORD *)(a1 + 576);
  v922 = *(_QWORD *)(a2 + 576);
  if (v921)
  {
    if (!v922 || !CMMsl::BumpToWakeState::operator==(v921, v922))
      return 0;
  }
  else if (v922)
  {
    return 0;
  }
  v923 = *(_QWORD *)(a1 + 2208);
  v924 = *(_QWORD *)(a2 + 2208);
  if (v923)
  {
    if (!v924 || !CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator==(v923, v924))
      return 0;
  }
  else if (v924)
  {
    return 0;
  }
  v925 = *(_QWORD *)(a1 + 2344);
  v926 = *(_QWORD *)(a2 + 2344);
  if (v925)
  {
    if (!v926 || !CMMsl::PeerState::operator==(v925, v926))
      return 0;
  }
  else if (v926)
  {
    return 0;
  }
  v927 = *(_QWORD *)(a1 + 1928);
  v928 = *(_QWORD *)(a2 + 1928);
  if (v927)
  {
    if (!v928 || !CMMsl::MagnetometerCalibratorFilterParameters::operator==(v927, v928))
      return 0;
  }
  else if (v928)
  {
    return 0;
  }
  v929 = *(_QWORD *)(a1 + 1504);
  v930 = *(_QWORD *)(a2 + 1504);
  if (v929)
  {
    if (!v930 || !CMMsl::KappaActivityPhone::operator==(v929, v930) && *(_QWORD *)(a1 + 1504) | *(_QWORD *)(a2 + 1504))
      return 0;
  }
  else if (v930)
  {
    return 0;
  }
  v931 = *(_QWORD *)(a1 + 1512);
  v932 = *(_QWORD *)(a2 + 1512);
  if (v931)
  {
    if (!v932 || !CMMsl::KappaActivityWatch::operator==(v931, v932) && *(_QWORD *)(a1 + 1512) | *(_QWORD *)(a2 + 1512))
      return 0;
  }
  else if (v932)
  {
    return 0;
  }
  v933 = *(_QWORD *)(a1 + 2488);
  v934 = *(_QWORD *)(a2 + 2488);
  if (v933)
  {
    if (!v934 || !CMMsl::PrecisionFindingSessionStartStop::operator==(v933, v934))
      return 0;
  }
  else if (v934)
  {
    return 0;
  }
  v935 = *(_QWORD *)(a1 + 2192);
  v936 = *(_QWORD *)(a2 + 2192);
  if (v935)
  {
    if (!v936 || !CMMsl::PDRDOTEstimatorStateDebug::operator==(v935, v936))
      return 0;
  }
  else if (v936)
  {
    return 0;
  }
  v937 = *(_QWORD *)(a1 + 2184);
  v938 = *(_QWORD *)(a2 + 2184);
  if (v937)
  {
    if (!v938 || !CMMsl::PDRDOTEstimatorStateBodyDebug::operator==(v937, v938))
      return 0;
  }
  else if (v938)
  {
    return 0;
  }
  v939 = *(_QWORD *)(a1 + 1616);
  v940 = *(_QWORD *)(a2 + 1616);
  if (v939)
  {
    if (!v940
      || !CMMsl::KappaPeakDetectorMapResult::operator==(v939, v940) && *(_QWORD *)(a1 + 1616) | *(_QWORD *)(a2 + 1616))
    {
      return 0;
    }
  }
  else if (v940)
  {
    return 0;
  }
  v941 = *(_QWORD *)(a1 + 1608);
  v942 = *(_QWORD *)(a2 + 1608);
  if (v941)
  {
    if (!v942 || !CMMsl::KappaPeakDetectorMapMagTimestamps::operator==(v941, v942))
      return 0;
  }
  else if (v942)
  {
    return 0;
  }
  v943 = *(_QWORD *)(a1 + 2512);
  v944 = *(_QWORD *)(a2 + 2512);
  if (v943)
  {
    if (!v944 || !CMMsl::PrecisionFindingVerticalState::operator==(v943, v944))
      return 0;
  }
  else if (v944)
  {
    return 0;
  }
  v945 = *(_QWORD *)(a1 + 312);
  v946 = *(_QWORD *)(a2 + 312);
  if (v945)
  {
    if (!v946 || !CMMsl::Altimeter::operator==(v945, v946))
      return 0;
  }
  else if (v946)
  {
    return 0;
  }
  v947 = *(_QWORD *)(a1 + 904);
  v948 = *(_QWORD *)(a2 + 904);
  if (v947)
  {
    if (!v948 || !CMMsl::FaceDownDetection::operator==(v947, v948))
      return 0;
  }
  else if (v948)
  {
    return 0;
  }
  v949 = *(_QWORD *)(a1 + 2360);
  v950 = *(_QWORD *)(a2 + 2360);
  if (v949)
  {
    if (!v950 || !CMMsl::PencilFusionDMYawAlignmentUpdate::operator==(v949, v950))
      return 0;
  }
  else if (v950)
  {
    return 0;
  }
  v951 = *(_QWORD *)(a1 + 2384);
  v952 = *(_QWORD *)(a2 + 2384);
  if (v951)
  {
    if (!v952 || !CMMsl::PencilFusionRingSensorTrustModelUpdate::operator==(v951, v952))
      return 0;
  }
  else if (v952)
  {
    return 0;
  }
  v953 = *(_QWORD *)(a1 + 256);
  v954 = *(_QWORD *)(a2 + 256);
  if (v953)
  {
    if (!v954 || !CMMsl::AccessorySleepStateUpdate::operator==(v953, v954))
      return 0;
  }
  else if (v954)
  {
    return 0;
  }
  v955 = *(_QWORD *)(a1 + 248);
  v956 = *(_QWORD *)(a2 + 248);
  if (v955)
  {
    if (!v956 || !CMMsl::AccessorySleepStateConfidenceEpoch::operator==(v955, v956))
      return 0;
  }
  else if (v956)
  {
    return 0;
  }
  v957 = *(_QWORD *)(a1 + 2816);
  v958 = *(_QWORD *)(a2 + 2816);
  if (v957)
  {
    if (!v958 || !CMMsl::SafetyHertzSample::operator==(v957, v958))
      return 0;
  }
  else if (v958)
  {
    return 0;
  }
  v959 = *(_QWORD *)(a1 + 2808);
  v960 = *(_QWORD *)(a2 + 2808);
  if (v959)
  {
    if (!v960 || !CMMsl::SafetyCompanionStatus::operator==(v959, v960))
      return 0;
  }
  else if (v960)
  {
    return 0;
  }
  v961 = *(_QWORD *)(a1 + 2624);
  v962 = *(_QWORD *)(a2 + 2624);
  if (v961)
  {
    if (!v962 || !CMMsl::PTSConsumedGNSS::operator==(v961, v962))
      return 0;
  }
  else if (v962)
  {
    return 0;
  }
  v963 = *(_QWORD *)(a1 + 2632);
  v964 = *(_QWORD *)(a2 + 2632);
  if (v963)
  {
    if (!v964 || !CMMsl::PTSForwardPropagation::operator==(v963, v964))
      return 0;
  }
  else if (v964)
  {
    return 0;
  }
  v965 = *(_QWORD *)(a1 + 2648);
  v966 = *(_QWORD *)(a2 + 2648);
  if (v965)
  {
    if (!v966)
      return 0;
    v967 = *(_QWORD *)(v965 + 8);
    v968 = *(_QWORD *)(v966 + 8);
    if (v967)
    {
      if (!v968 || !CMMsl::PTSForwardPropagation::operator==(v967, v968))
        return 0;
    }
    else if (v968)
    {
      return 0;
    }
  }
  else if (v966)
  {
    return 0;
  }
  v969 = *(_QWORD *)(a1 + 1288);
  v970 = *(_QWORD *)(a2 + 1288);
  if (v969)
  {
    if (!v970 || !CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator==(v969, v970))
      return 0;
  }
  else if (v970)
  {
    return 0;
  }
  v971 = *(_QWORD *)(a1 + 2640);
  v972 = *(_QWORD *)(a2 + 2640);
  if (v971)
  {
    if (!v972)
      return 0;
    v973 = *(_QWORD *)(v971 + 8);
    v974 = *(_QWORD *)(v972 + 8);
    if (v973)
    {
      if (!v974 || !CMMsl::PTSForwardPropagation::operator==(v973, v974))
        return 0;
    }
    else if (v974)
    {
      return 0;
    }
  }
  else if (v972)
  {
    return 0;
  }
  v975 = *(_QWORD *)(a1 + 336);
  v976 = *(_QWORD *)(a2 + 336);
  if (v975)
  {
    if (!v976 || !CMMsl::AnchorMotionCorrespondence::operator==(v975, v976))
      return 0;
  }
  else if (v976)
  {
    return 0;
  }
  v977 = *(_QWORD *)(a1 + 1480);
  v978 = *(_QWORD *)(a2 + 1480);
  if (v977)
  {
    if (!v978 || !CMMsl::KData1::operator==(v977, v978))
      return 0;
  }
  else if (v978)
  {
    return 0;
  }
  v979 = *(_QWORD *)(a1 + 1488);
  v980 = *(_QWORD *)(a2 + 1488);
  if (v979)
  {
    if (!v980 || !CMMsl::KData2::operator==(v979, v980))
      return 0;
  }
  else if (v980)
  {
    return 0;
  }
  v981 = *(_QWORD *)(a1 + 1496);
  v982 = *(_QWORD *)(a2 + 1496);
  if (v981)
  {
    if (!v982 || !CMMsl::KData3::operator==(v981, v982))
      return 0;
  }
  else if (v982)
  {
    return 0;
  }
  v983 = *(_QWORD *)(a1 + 2824);
  v984 = *(_QWORD *)(a2 + 2824);
  if (v983)
  {
    if (!v984 || !CMMsl::SafetyRemoteSample::operator==(v983, v984))
      return 0;
  }
  else if (v984)
  {
    return 0;
  }
  v985 = *(_QWORD *)(a1 + 2832);
  v986 = *(_QWORD *)(a2 + 2832);
  if (v985)
  {
    if (!v986 || !CMMsl::SafetyTrustedAudioResult::operator==(v985, v986))
      return 0;
  }
  else if (v986)
  {
    return 0;
  }
  v987 = *(_QWORD *)(a1 + 2944);
  v988 = *(_QWORD *)(a2 + 2944);
  if (v987)
  {
    if (!v988)
      return 0;
    v989 = *(_QWORD *)(v987 + 8);
    v990 = *(_QWORD *)(v988 + 8);
    if (v989)
    {
      if (!v990 || !CMMsl::DeviceMotion::operator==(v989, v990))
        return 0;
    }
    else if (v990)
    {
      return 0;
    }
  }
  else if (v988)
  {
    return 0;
  }
  v991 = *(_QWORD *)(a1 + 2952);
  v992 = *(_QWORD *)(a2 + 2952);
  if (v991)
  {
    if (!v992)
      return 0;
    v993 = *(_QWORD *)(v991 + 8);
    v994 = *(_QWORD *)(v992 + 8);
    if (v993)
    {
      if (!v994 || !CMMsl::MotionStateUpdate::operator==(v993, v994))
        return 0;
    }
    else if (v994)
    {
      return 0;
    }
  }
  else if (v992)
  {
    return 0;
  }
  v995 = *(_QWORD *)(a1 + 1432);
  v996 = *(_QWORD *)(a2 + 1432);
  result = v996 == 0;
  if (!v995)
    return result;
  if (v996)
  {
    v998 = *(_QWORD *)(v995 + 8);
    v999 = *(_QWORD *)(v996 + 8);
    if (v998)
      return v999 && CMMsl::AccessoryAccel::operator==(v998, v999);
    if (!v999)
      return 1;
  }
  return 0;
}

BOOL CMMsl::WorkoutRecorderAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Accel::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderBodyMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::BodyMetrics::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderElevation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::ElevationChange::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderHeartRate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderRotationRate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::RotationRate::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderOdometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::OdometerWithAltitude::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WorkoutRecorderWorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::WorkoutEvent::operator==(v2, v3);
  return result;
}

BOOL CMMsl::VO2MaxInput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  _BOOL8 v4;

  v2 = *(_WORD *)(a1 + 88);
  v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 86) != *(unsigned __int8 *)(a2 + 86))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 88) & 0x2000) != 0)
  {
    return 0;
  }
  v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  return v4;
}

BOOL CMMsl::WorkoutRecorderHealthKitInfo::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 2) == 0;
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    return (*(_BYTE *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  return v2;
}

BOOL CMMsl::PearlAttitude::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  _BOOL8 result;
  BOOL v16;

  v2 = *(_WORD *)(a1 + 124);
  v3 = *(_WORD *)(a2 + 124);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 124) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 124) & 0x200) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 124) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 124) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 124) & 0x100) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 124) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v8 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 40) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v12 = *(float **)(a2 + 56);
  if (v10 - v11 != *(_QWORD *)(a2 + 64) - (_QWORD)v12)
    return 0;
  if (v11 == v10)
    return 1;
  v13 = v11 + 4;
  do
  {
    v14 = *v12++;
    result = *(float *)(v13 - 4) == v14;
    v16 = *(float *)(v13 - 4) != v14 || v13 == v10;
    v13 += 4;
  }
  while (!v16);
  return result;
}

BOOL CMMsl::RotationRate::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 28) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 28) & 8) == 0;
  if ((*(_BYTE *)(a1 + 28) & 8) != 0)
    return (*(_BYTE *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  return v2;
}

BOOL CMMsl::WorkoutRecorderWatchOrientationSettings::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::WatchOrientationSettings::operator==(v2, v3);
  return result;
}

BOOL CMMsl::WifiScanResults::operator==(uint64_t a1, uint64_t a2)
{
  return sub_10022AC1C((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL CMMsl::WorkoutRecorderWifiScanResults::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return *(_QWORD *)(a2 + 8) == 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 0;
  if (sub_10022AC1C((uint64_t *)(v3 + 8), v4 + 8))
    return 1;
  return !*(_QWORD *)(a1 + 8) && *(_QWORD *)(a2 + 8) == 0;
}

BOOL CMMsl::WorkoutRecorderPressure::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = v3 == 0;
  if (v2)
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  return result;
}

BOOL CMMsl::VisionCompassBias::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float *v4;
  float *v5;
  float *v6;
  _BOOL8 v7;

  v2 = *(_WORD *)(a1 + 76);
  v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
  {
    return 0;
  }
  v7 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0)
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60);
  return v7;
}

BOOL CMMsl::VIOEstimation::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  double *v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;
  double *v36;
  double *v37;
  _BOOL8 v38;

  if ((*(_BYTE *)(a1 + 340) & 0x40) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 0x40) == 0 || *(_DWORD *)(a1 + 336) != *(_DWORD *)(a2 + 336))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 340) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 4) == 0 || *(double *)(a1 + 312) != *(double *)(a2 + 312))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 340) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 1) == 0 || *(double *)(a1 + 296) != *(double *)(a2 + 296))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 340) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 8) == 0 || *(double *)(a1 + 320) != *(double *)(a2 + 320))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 340) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 2) == 0 || *(double *)(a1 + 304) != *(double *)(a2 + 304))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 2) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 176);
  v2 = *(double **)(a1 + 184);
  v4 = *(double **)(a2 + 176);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 184) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 104);
  v5 = *(double **)(a1 + 112);
  v7 = *(double **)(a2 + 104);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 112) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 272);
  v8 = *(double **)(a1 + 280);
  v10 = *(double **)(a2 + 272);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 280) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  v12 = *(double **)(a1 + 8);
  v11 = *(double **)(a1 + 16);
  v13 = *(double **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(_QWORD *)(a2 + 16) - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*v12 != *v13)
      return 0;
    ++v12;
    ++v13;
  }
  v15 = *(double **)(a1 + 224);
  v14 = *(double **)(a1 + 232);
  v16 = *(double **)(a2 + 224);
  if ((char *)v14 - (char *)v15 != *(_QWORD *)(a2 + 232) - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*v15 != *v16)
      return 0;
    ++v15;
    ++v16;
  }
  v18 = *(double **)(a1 + 152);
  v17 = *(double **)(a1 + 160);
  v19 = *(double **)(a2 + 152);
  if ((char *)v17 - (char *)v18 != *(_QWORD *)(a2 + 160) - (_QWORD)v19)
    return 0;
  while (v18 != v17)
  {
    if (*v18 != *v19)
      return 0;
    ++v18;
    ++v19;
  }
  v21 = *(double **)(a1 + 128);
  v20 = *(double **)(a1 + 136);
  v22 = *(double **)(a2 + 128);
  if ((char *)v20 - (char *)v21 != *(_QWORD *)(a2 + 136) - (_QWORD)v22)
    return 0;
  while (v21 != v20)
  {
    if (*v21 != *v22)
      return 0;
    ++v21;
    ++v22;
  }
  v24 = *(double **)(a1 + 248);
  v23 = *(double **)(a1 + 256);
  v25 = *(double **)(a2 + 248);
  if ((char *)v23 - (char *)v24 != *(_QWORD *)(a2 + 256) - (_QWORD)v25)
    return 0;
  while (v24 != v23)
  {
    if (*v24 != *v25)
      return 0;
    ++v24;
    ++v25;
  }
  v27 = *(double **)(a1 + 32);
  v26 = *(double **)(a1 + 40);
  v28 = *(double **)(a2 + 32);
  if ((char *)v26 - (char *)v27 != *(_QWORD *)(a2 + 40) - (_QWORD)v28)
    return 0;
  while (v27 != v26)
  {
    if (*v27 != *v28)
      return 0;
    ++v27;
    ++v28;
  }
  v30 = *(double **)(a1 + 200);
  v29 = *(double **)(a1 + 208);
  v31 = *(double **)(a2 + 200);
  if ((char *)v29 - (char *)v30 != *(_QWORD *)(a2 + 208) - (_QWORD)v31)
    return 0;
  while (v30 != v29)
  {
    if (*v30 != *v31)
      return 0;
    ++v30;
    ++v31;
  }
  v33 = *(double **)(a1 + 80);
  v32 = *(double **)(a1 + 88);
  v34 = *(double **)(a2 + 80);
  if ((char *)v32 - (char *)v33 != *(_QWORD *)(a2 + 88) - (_QWORD)v34)
    return 0;
  while (v33 != v32)
  {
    if (*v33 != *v34)
      return 0;
    ++v33;
    ++v34;
  }
  v36 = *(double **)(a1 + 56);
  v35 = *(double **)(a1 + 64);
  v37 = *(double **)(a2 + 56);
  if ((char *)v35 - (char *)v36 != *(_QWORD *)(a2 + 64) - (_QWORD)v37)
    return 0;
  while (v36 != v35)
  {
    if (*v36 != *v37)
      return 0;
    ++v36;
    ++v37;
  }
  if ((*(_BYTE *)(a1 + 340) & 0x20) != 0)
  {
    if ((*(_BYTE *)(a2 + 340) & 0x20) == 0 || *(float *)(a1 + 332) != *(float *)(a2 + 332))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 340) & 0x20) != 0)
  {
    return 0;
  }
  v38 = (*(_BYTE *)(a2 + 340) & 0x10) == 0;
  if ((*(_BYTE *)(a1 + 340) & 0x10) != 0)
    return (*(_BYTE *)(a2 + 340) & 0x10) != 0 && *(float *)(a1 + 328) == *(float *)(a2 + 328);
  return v38;
}

BOOL CMMsl::LSLHeadingEstimation::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  _BOOL8 v13;

  v2 = *(_WORD *)(a1 + 192);
  v3 = *(_WORD *)(a2 + 192);
  if ((v2 & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x4000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x1000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 32);
  v4 = *(double **)(a1 + 40);
  v6 = *(double **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  v9 = *(double **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(double **)(a1 + 56);
  v10 = *(double **)(a1 + 64);
  v12 = *(double **)(a2 + 56);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 64) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x2000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x800) == 0 || *(_QWORD *)(a1 + 168) != *(_QWORD *)(a2 + 168))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x100) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x200) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 192) & 0x200) != 0)
  {
    return 0;
  }
  v13 = (v3 & 0x400) == 0;
  if ((*(_WORD *)(a1 + 192) & 0x400) != 0)
    return (*(_WORD *)(a2 + 192) & 0x400) != 0 && *(double *)(a1 + 160) == *(double *)(a2 + 160);
  return v13;
}

BOOL CMMsl::MovementStats::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return result;
}

BOOL CMMsl::StepCountEntry::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 152);
  v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  v4 = *(unsigned __int8 **)(a1 + 72);
  v5 = *(unsigned __int8 **)(a2 + 72);
  if (v4)
  {
    if (!v5 || !sub_100050A84(v4, v5) && *(_QWORD *)(a1 + 72) | *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_DWORD *)(a1 + 152);
  v7 = *(_DWORD *)(a2 + 152);
  if ((v6 & 0x200000) != 0)
  {
    if ((v7 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148))
      return 0;
  }
  else if ((v7 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x400000) != 0)
  {
    if ((v7 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 149) != *(unsigned __int8 *)(a2 + 149))
      return 0;
  }
  else if ((v7 & 0x400000) != 0)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !CMMsl::AccelerometerPace::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if ((v6 & 0x40000) != 0)
  {
    if ((v7 & 0x40000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v7 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x100000) != 0)
  {
    if ((v7 & 0x100000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144))
      return 0;
  }
  else if ((v7 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x20000) != 0)
  {
    if ((v7 & 0x20000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132))
      return 0;
  }
  else if ((v7 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x400) != 0)
  {
    if ((v7 & 0x400) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v7 & 0x400) != 0)
  {
    return 0;
  }
  if ((v6 & 0x800) != 0)
  {
    if ((v7 & 0x800) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v7 & 0x800) != 0)
  {
    return 0;
  }
  if ((v6 & 0x2000) != 0)
  {
    if ((v7 & 0x2000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116))
      return 0;
  }
  else if ((v7 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x200) != 0)
  {
    if ((v7 & 0x200) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v7 & 0x200) != 0)
  {
    return 0;
  }
  if ((v6 & 0x1000) != 0)
  {
    if ((v7 & 0x1000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v7 & 0x1000) != 0)
  {
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a2 + 56);
  if (v10)
  {
    if (!v11)
      return 0;
    if ((*(_BYTE *)(v10 + 12) & 1) != 0)
    {
      if ((*(_BYTE *)(v11 + 12) & 1) == 0 || *(float *)(v10 + 8) != *(float *)(v11 + 8))
        return 0;
    }
    else if ((*(_BYTE *)(v11 + 12) & 1) != 0)
    {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  result = (v7 & 0x10000) == 0;
  if ((v6 & 0x10000) == 0)
    return result;
  return (v7 & 0x10000) != 0 && *(_DWORD *)(a1 + 128) == *(_DWORD *)(a2 + 128);
}

BOOL CMMsl::MobilityBoutMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;

  v2 = *(_QWORD *)(a1 + 184);
  v3 = *(_QWORD *)(a2 + 184);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164))
      return 0;
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181))
      return 0;
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 177) != *(unsigned __int8 *)(a2 + 177))
      return 0;
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180))
      return 0;
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 176) != *(unsigned __int8 *)(a2 + 176))
      return 0;
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152))
      return 0;
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
      return 0;
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168))
      return 0;
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156))
      return 0;
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 178) != *(unsigned __int8 *)(a2 + 178))
      return 0;
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160))
      return 0;
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 179) != *(unsigned __int8 *)(a2 + 179))
      return 0;
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144))
      return 0;
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  v4 = (v3 & (unint64_t)&_mh_execute_header) == 0;
  if ((v2 & 0x100000000) != 0)
    return (v3 & 0x100000000) != 0 && *(float *)(a1 + 148) == *(float *)(a2 + 148);
  return v4;
}

BOOL CMMsl::VIOPose::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double *v4;
  double *v5;
  double *v6;
  _BOOL8 v7;

  v2 = *(_WORD *)(a1 + 112);
  v3 = *(_WORD *)(a2 + 112);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 112) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 112) & 0x200) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 112) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 8);
  v4 = *(double **)(a1 + 16);
  v6 = *(double **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 112) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 112) & 0x100) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 112) & 0x100) != 0)
  {
    return 0;
  }
  v7 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0)
    return (v3 & 0x40) != 0 && *(double *)(a1 + 80) == *(double *)(a2 + 80);
  return v7;
}

BOOL CMMsl::SignalEnvironment::operator==(uint64_t a1, uint64_t a2)
{
  char v3;
  _BOOL8 result;

  v3 = *(_BYTE *)(a1 + 12);
  result = (*(_BYTE *)(a2 + 12) & 1) == 0;
  if ((v3 & 1) != 0)
    return (*(_BYTE *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  return result;
}

BOOL CMMsl::VIOReplayPose::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double v9;
  _BOOL8 result;
  BOOL v11;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if (v5 - v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 8;
  do
  {
    v9 = *v7++;
    result = *(double *)(v8 - 8) == v9;
    v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::VisualStateMeasurement::operator==(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  _BOOL8 v11;

  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 96) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 96) & 1) != 0)
  {
    return 0;
  }
  v3 = *(double **)(a1 + 8);
  v2 = *(double **)(a1 + 16);
  v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(_QWORD *)(a2 + 16) - (_QWORD)v4)
    return 0;
  while (v3 != v2)
  {
    if (*v3 != *v4)
      return 0;
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 32);
  v5 = *(double **)(a1 + 40);
  v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(_QWORD *)(a2 + 40) - (_QWORD)v7)
    return 0;
  while (v6 != v5)
  {
    if (*v6 != *v7)
      return 0;
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 56);
  v8 = *(double **)(a1 + 64);
  v10 = *(double **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(_QWORD *)(a2 + 64) - (_QWORD)v10)
    return 0;
  while (v9 != v8)
  {
    if (*v9 != *v10)
      return 0;
    ++v9;
    ++v10;
  }
  if ((*(_BYTE *)(a1 + 96) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 96) & 4) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 96) & 4) != 0)
  {
    return 0;
  }
  v11 = (*(_BYTE *)(a2 + 96) & 2) == 0;
  if ((*(_BYTE *)(a1 + 96) & 2) != 0)
    return (*(_BYTE *)(a2 + 96) & 2) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
  return v11;
}

BOOL CMMsl::KappaTriggerDebug::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double *v4;
  double *v5;
  double *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  _BOOL8 v13;

  v2 = *(_WORD *)(a1 + 120);
  v3 = *(_WORD *)(a2 + 120);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 118) != *(unsigned __int8 *)(a2 + 118))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 8);
  v4 = *(double **)(a1 + 16);
  v6 = *(double **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 16) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(float **)(a1 + 56);
  v7 = *(float **)(a1 + 64);
  v9 = *(float **)(a2 + 56);
  if ((char *)v7 - (char *)v8 != *(_QWORD *)(a2 + 64) - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*v8 != *v9)
      return 0;
    ++v8;
    ++v9;
  }
  v11 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  v12 = *(float **)(a2 + 32);
  if ((char *)v10 - (char *)v11 != *(_QWORD *)(a2 + 40) - (_QWORD)v12)
    return 0;
  while (v11 != v10)
  {
    if (*v11 != *v12)
      return 0;
    ++v11;
    ++v12;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 116) != *(unsigned __int8 *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 117) != *(unsigned __int8 *)(a2 + 117))
      return 0;
  }
  else if ((*(_WORD *)(a2 + 120) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  v13 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0)
    return (v3 & 0x10) != 0 && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104);
  return v13;
}

BOOL CMMsl::KappaDirectionOfTravel::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  _BOOL8 result;
  BOOL v13;

  v2 = *(_DWORD *)(a1 + 144);
  v3 = *(_DWORD *)(a2 + 144);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
      return 0;
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92))
      return 0;
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96))
      return 0;
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100))
      return 0;
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88))
      return 0;
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112))
      return 0;
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116))
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120))
      return 0;
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108))
      return 0;
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104))
      return 0;
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128))
      return 0;
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132))
      return 0;
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136))
      return 0;
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124))
      return 0;
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140))
      return 0;
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
      return 0;
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
      return 0;
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 32);
  v4 = *(float **)(a1 + 40);
  v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(_QWORD *)(a2 + 40) - (_QWORD)v6)
    return 0;
  while (v5 != v4)
  {
    if (*v5 != *v6)
      return 0;
    ++v5;
    ++v6;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(float **)(a2 + 8);
  if (v7 - v8 != *(_QWORD *)(a2 + 16) - (_QWORD)v9)
    return 0;
  if (v8 == v7)
    return 1;
  v10 = v8 + 4;
  do
  {
    v11 = *v9++;
    result = *(float *)(v10 - 4) == v11;
    v13 = *(float *)(v10 - 4) != v11 || v10 == v7;
    v10 += 4;
  }
  while (!v13);
  return result;
}

