uint64_t sub_10000110C(uint64_t a1, uint64_t *a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  __int128 *v10;
  const char *v11;
  char *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v37;
  unint64_t v38;
  copyfile_flags_t flags;
  char *v40;

  if (!*(_DWORD *)(*(_QWORD *)a1 + 600))
    return 1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 84))
    v3 = 851973;
  else
    v3 = 65541;
  flags = v3;
  v4 = a2[1];
  if (!v4)
    return 1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = "._";
  v38 = a2[1];
  while (1)
  {
    v40 = 0;
    v9 = *a2;
    v10 = (__int128 *)(*a2 + v5);
    v11 = *(const char **)v10;
    v12 = strrchr(*(char **)v10, 47);
    if (v12)
      v13 = v12 + 1;
    else
      v13 = v11;
    if (!strncmp(v13, v8, 2uLL) || !copyfile(v11, 0, 0, flags))
      goto LABEL_14;
    v14 = v8;
    v15 = v9 + v5;
    v16 = *(_QWORD *)(v15 + 16);
    v17 = *(const char **)v15;
    v18 = &v13[-*(_QWORD *)v15];
    v19 = basename(*(char **)v15);
    if (asprintf(&v40, "%.*s._%s", (int)v18, v17, v19) == -1)
      break;
    v27 = sub_100010AD0((uint64_t)a2);
    v28 = *((_QWORD *)v10 + 18);
    v29 = v10[6];
    v30 = v10[7];
    *(_OWORD *)(v27 + 128) = v10[8];
    v31 = *v10;
    *(_OWORD *)(v27 + 16) = v10[1];
    v32 = v10[2];
    v33 = v10[3];
    v34 = v10[4];
    v35 = v10[5];
    *(_OWORD *)(v27 + 96) = v29;
    *(_OWORD *)(v27 + 112) = v30;
    *(_OWORD *)v27 = v31;
    *(_OWORD *)(v27 + 64) = v34;
    *(_OWORD *)(v27 + 80) = v35;
    *(_OWORD *)(v27 + 32) = v32;
    *(_OWORD *)(v27 + 48) = v33;
    *(_QWORD *)v27 = v40;
    *(_QWORD *)(v27 + 16) = &v40[v16 - (_QWORD)v17];
    *(_QWORD *)(v27 + 88) = 0;
    *(_QWORD *)(v27 + 128) = sub_100001320;
    *(_QWORD *)(v27 + 136) = sub_10000156C;
    *(_QWORD *)(v27 + 144) = v28;
    *(_DWORD *)(v15 + 56) |= 0x10000000u;
    v8 = v14;
    v4 = v38;
LABEL_14:
    *((_QWORD *)v10 + 17) = sub_10000156C;
    v6 = ++v7 >= v4;
    v5 += 152;
    if (v4 == v7)
      return 1;
  }
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034B7C();
  }
  sub_10001BFE8("asprintf --extended-attributes path", v20, v21, v22, v23, v24, v25, v26, v37);
  return v6;
}

uint64_t sub_100001320(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  copyfile_flags_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  pid_t v17;
  int v18;
  unint64_t v19;
  _BYTE *v20;
  int v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  const char *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v31;
  char v32;
  char *from;
  char __str[1024];

  v6 = *(char **)a2;
  if (!strstr(*(char **)a2, "._"))
    sub_100034BA8();
  from = 0;
  if (*(_DWORD *)(*(_QWORD *)a1 + 84))
    v7 = 4980741;
  else
    v7 = 4194309;
  v8 = dirname(v6);
  v9 = basename(*(char **)a2);
  if (asprintf(&from, "%s/%s", v8, v9 + 2) == -1)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034BD0();
    v26 = "asprintf";
    goto LABEL_25;
  }
  v17 = getpid();
  v18 = snprintf(__str, 0x400uLL, "%s.%d.", "/tmp/", v17);
  v19 = v18;
  v20 = *(_BYTE **)(a2 + 16);
  v21 = *v20;
  if (*v20 && v18 <= 0x3FE)
  {
    v22 = v20 + 1;
    do
    {
      if (v21 == 47)
        LOBYTE(v21) = 95;
      __str[v19] = v21;
      v23 = v19 + 1;
      v24 = *v22++;
      v21 = v24;
      if (!v24)
        break;
    }
    while (v19++ < 0x3FE);
  }
  else
  {
    v23 = v18;
  }
  __str[v23] = 0;
  v27 = copyfile(from, __str, 0, v7);
  v28 = *__error();
  free(from);
  if (v27)
  {
    *__error() = v28;
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034BFC();
    v26 = "copyfile";
LABEL_25:
    sub_10001BFE8(v26, v10, v11, v12, v13, v14, v15, v16, v32);
    return 0xFFFFFFFFLL;
  }
  v29 = open(__str, a3);
  v31 = *__error();
  unlink(__str);
  if ((_DWORD)v29 == -1)
    *__error() = v31;
  return v29;
}

uint64_t sub_10000156C(uint64_t a1, int a2, uint64_t a3)
{
  if (!*(_DWORD *)(*(_QWORD *)a1 + 600))
    sub_100034C28();
  if (sub_10001A170(a1, a2, (*(_DWORD *)(a3 + 56) & 0x10000000) != 0))
    return 1;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034C50();
  }
  sub_10001BF64("io_write_byte");
  return 0;
}

uint64_t sub_1000015F4(uint64_t result, __int128 *a2, unint64_t a3)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  const char *v7;
  char *v8;
  const char *v9;
  size_t v10;
  const char *v11;
  __int128 *v12;
  uint64_t v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  if (*(_DWORD *)(*(_QWORD *)result + 600))
  {
    v22 = a3 - 1;
    if (a3 != 1)
    {
      v4 = 0;
      v5 = a2;
      do
      {
        v6 = (__int128 *)((char *)a2 + 152 * v4);
        if ((*((_WORD *)v6 + 12) & 0xF000) == 0x8000)
        {
          v7 = *(const char **)v6;
          v8 = strrchr(*(char **)v6, 47);
          v9 = v8 ? v8 + 1 : v7;
          result = strncmp(v9, "._", 2uLL);
          if (!(_DWORD)result)
          {
            v10 = v9 - v7;
            v11 = v9 + 2;
            v12 = v5;
            v13 = v4;
            while (++v13 < a3)
            {
              v14 = (const char *)*((_QWORD *)v12 + 19);
              result = strncmp(v14, v7, v10);
              if ((_DWORD)result)
                break;
              v12 = (__int128 *)((char *)v12 + 152);
              result = strcmp(&v14[v10], v11);
              if (!(_DWORD)result)
              {
                v30 = v12[6];
                v31 = v12[7];
                v32 = v12[8];
                v33 = *((_QWORD *)v12 + 18);
                v26 = v12[2];
                v27 = v12[3];
                v28 = v12[4];
                v29 = v12[5];
                v24 = *v12;
                v25 = v12[1];
                v15 = v6[1];
                *v12 = *v6;
                v12[1] = v15;
                v16 = v6[2];
                v17 = v6[3];
                v18 = v6[5];
                v12[4] = v6[4];
                v12[5] = v18;
                v12[2] = v16;
                v12[3] = v17;
                v19 = v6[6];
                v20 = v6[7];
                v21 = v6[8];
                *((_QWORD *)v12 + 18) = *((_QWORD *)v6 + 18);
                v12[7] = v20;
                v12[8] = v21;
                v12[6] = v19;
                v6[6] = v30;
                v6[7] = v31;
                v6[8] = v32;
                *((_QWORD *)v6 + 18) = v33;
                v6[2] = v26;
                v6[3] = v27;
                v6[4] = v28;
                v6[5] = v29;
                *v6 = v24;
                v6[1] = v25;
                break;
              }
            }
          }
        }
        ++v4;
        v5 = (__int128 *)((char *)v5 + 152);
      }
      while (v4 != v22);
    }
  }
  return result;
}

uint64_t sub_1000017C8(uint64_t a1, int a2, uint64_t a3)
{
  int v4;
  int v5;
  char v7;

  if (!*(_DWORD *)(*(_QWORD *)a1 + 600))
    return 1;
  v7 = 0;
  if (sub_10001A4B0(a1, a2, &v7))
  {
    v4 = *(_DWORD *)(a3 + 56);
    if (v7)
      v5 = v4 | 0x10000000;
    else
      v5 = v4 | 0x20000000;
    *(_DWORD *)(a3 + 56) = v5;
    return 1;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100034C7C();
  sub_10001C094("io_read_byte");
  return 0;
}

uint64_t sub_100001874(uint64_t a1, uint64_t a2, int a3, const char *a4, int a5, char *a6, int a7)
{
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;

  if (a7)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 600))
    {
      v14 = basename(a6);
      if (!strncmp(v14, "._", 2uLL))
        return sub_1000019A0(a1, a2, a3, a4, a5, a6);
    }
  }
  if (!sub_100009BA8(a3, a4, a5, a6, a7))
    return 1;
  if (dword_100050EE8)
  {
    v22 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034CA8((uint64_t)a4, (uint64_t)a6, v22);
  }
  sub_10001BFE8("%s: move_file: %s", v15, v16, v17, v18, v19, v20, v21, (char)a4);
  return 0;
}

uint64_t sub_1000019A0(uint64_t a1, uint64_t a2, int a3, const char *a4, int a5, char *__s)
{
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  NSObject *v34;
  char *v35;
  const char *v36;
  NSObject *v37;
  NSObject *v39;
  NSObject *v40;
  int *v41;
  char *v42;
  char v43;
  uint8_t buf[4];
  char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  char *v49;
  char __str[1024];

  v12 = strrchr(__s, 47);
  if (v12)
    v13 = v12 + 1;
  else
    v13 = __s;
  if (snprintf(__str, 0x400uLL, "%.*s%s", (_DWORD)v13 - (_DWORD)__s, __s, v13 + 2) == -1)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034D20();
    v36 = "snprintf";
    goto LABEL_23;
  }
  v21 = openat(a3, a4, 0);
  if (v21 == -1)
  {
    if (dword_100050EE8)
    {
      v37 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034D4C((uint64_t)a4, v37, v15, v16, v17, v18, v19, v20);
    }
    v43 = (char)a4;
    v36 = "%s: openat";
LABEL_23:
    sub_10001BFE8(v36, v14, v15, v16, v17, v18, v19, v20, v43);
    return 0;
  }
  v22 = v21;
  if (*(_DWORD *)(*(_QWORD *)a1 + 84))
    v23 = openat(a5, __str, 257);
  else
    v23 = openat(a5, __str, 1);
  if (v23 == -1)
  {
    if (dword_100050EE8)
    {
      v39 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034D4C((uint64_t)__str, v39, v25, v26, v27, v28, v29, v30);
    }
    sub_10001BFE8("%s: openat", v24, v25, v26, v27, v28, v29, v30, (char)__str);
    close(v22);
    return 0;
  }
  v31 = v23;
  v32 = fcopyfile(v22, v23, 0, 0x800005u);
  v33 = *__error();
  close(v31);
  close(v22);
  if (v32)
  {
    if (dword_100050EE8)
    {
      v34 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v45 = __str;
        v46 = 2080;
        v47 = a4;
        v48 = 2080;
        v49 = strerror(v33);
        _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%s: copyfile extended attributes from %s: %s", buf, 0x20u);
      }
    }
    v35 = strerror(v33);
    sub_10001C094("%s: copyfile extended attributes from %s: %s", __str, a4, v35);
    return 0;
  }
  if (unlinkat(a3, a4, 0))
  {
    if (dword_100050EE8)
    {
      v40 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034DB0((uint64_t)a4, v40);
    }
    v41 = __error();
    v42 = strerror(*v41);
    sub_10001C094("%s: unlink: %s", a4, v42);
  }
  *(_DWORD *)(a2 + 56) |= 0x40000000u;
  return 1;
}

uint64_t sub_100001CF4(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  char *v8;

  if (*(_DWORD *)(*(_QWORD *)a1 + 600)
    && !*(_DWORD *)(*(_QWORD *)a1 + 196)
    && (*(_BYTE *)(a2 + 59) & 0x40) == 0
    && (v8 = basename(a4), !strncmp(v8, "._", 2uLL)))
  {
    return sub_1000019A0(a1, a2, a3, a4, a3, a4);
  }
  else
  {
    return 1;
  }
}

void sub_100001D88(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100001DAC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100001DC4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

_QWORD *sub_100001DD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v0 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004014030ADEuLL);
  if (!v0)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034E48();
    sub_10001BFE8("calloc", v1, v2, v3, v4, v5, v6, v7, v18);
    return 0;
  }
  v8 = v0;
  v0[1] = 0x10000;
  v9 = malloc_type_calloc(0x10000uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  *v8 = v9;
  if (!v9)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034E48();
    sub_10001BFE8("calloc", v10, v11, v12, v13, v14, v15, v16, v18);
    free(v8);
    return 0;
  }
  return v8;
}

uint64_t sub_100001ED4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  NSObject *v26;

  if (!a2)
    return 1;
  v4 = (uint64_t *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 40);
  if (!v3)
    return 1;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    do
    {
      *v7 = 0;
      v7[1] = v7;
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  if (!*(_QWORD *)(a2 + 32))
    return 1;
  v8 = (char *)sub_100003660(*(void **)(a1 + 16), v3, 0x18uLL);
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    v16 = *v4;
    if (*v4)
    {
      v17 = 0;
      v18 = 0;
      v20 = *(_QWORD **)a1;
      v19 = *(_QWORD *)(a1 + 8);
      do
      {
        v21 = *(_QWORD *)(a2 + 32) + v17;
        v22 = *(unsigned int *)(v21 + 24) % v19;
        v23 = &v8[v18];
        *(_QWORD *)v23 = v21;
        *((_QWORD *)v23 + 1) = 0;
        v24 = (_QWORD *)v20[2 * v22 + 1];
        *((_QWORD *)v23 + 2) = v24;
        *v24 = &v8[v18];
        v8 = *(char **)(a1 + 16);
        v20 = *(_QWORD **)a1;
        *(_QWORD *)(*(_QWORD *)a1 + 16 * v22 + 8) = &v8[v18 + 8];
        v18 += 24;
        v17 += 48;
        --v16;
      }
      while (v16);
    }
    return 1;
  }
  if (dword_100050EE8)
  {
    v26 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034E74(v4, v26);
  }
  sub_10001BFE8("reallocarray 3 %ld * %ld bytes", v9, v10, v11, v12, v13, v14, v15, *v4);
  return 0;
}

void sub_10000201C(void **a1)
{
  free(a1[2]);
  free(*a1);
  free(a1);
}

int64x2_t sub_10000204C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int64x2_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *i;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 __s1[16];

  v9 = a3;
  v10 = a1;
  v11 = *(_QWORD *)(a4 + 40);
  if (!v11)
  {
    v15 = 3;
LABEL_8:
    *(_QWORD *)(a4 + 56) = 0;
    *(_QWORD *)(a4 + 64) = v11;
    *(_DWORD *)(a4 + 72) = 0;
    *(_DWORD *)(a4 + 52) = v15;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v11;
    *(_QWORD *)(a1 + 88) += v11;
    sub_10001BE54(3, "%s: flushing whole file %zu B", a3, a4, a5, a6, a7, a8, a3);
    return result;
  }
  v13 = a2[5];
  if (!v13)
  {
    v15 = 2;
    goto LABEL_8;
  }
  if (**(_DWORD **)(a1 + 200))
  {
    v14 = *a2;
    if (v11 < *a2)
      sub_100034F4C();
    *(_QWORD *)a4 = v14;
    goto LABEL_39;
  }
  v14 = *(_QWORD *)a4;
  v43 = v11 - *(_QWORD *)(a2[4] + 48 * v13 - 32) + 1;
  if (*(_QWORD *)a4 >= v43)
  {
LABEL_39:
    v35 = v11 - v14;
    v41 = v9;
    if (v11 == v14)
      v36 = 3;
    else
      v36 = 2;
    sub_10001BE54(3, "%s: flushing remaining %jd B", a3, a4, a5, a6, a7, a8, v41);
    result = vaddq_s64(*(int64x2_t *)(a4 + 8), vdupq_n_s64(v35));
    *(int64x2_t *)(a4 + 8) = result;
    *(_QWORD *)(v10 + 88) += v35;
    *(_QWORD *)(a4 + 56) = v14;
    *(_QWORD *)(a4 + 64) = v11;
    *(_DWORD *)(a4 + 72) = 0;
    *(_DWORD *)(a4 + 52) = v36;
    return result;
  }
  v17 = *(_QWORD *)a4;
  v18 = 0;
  v42 = *(_QWORD *)a4;
  while (1)
  {
    v19 = *(_QWORD *)(a4 + 40);
    v20 = v19 - v17;
    if (v19 == v17)
      sub_100034EFC();
    v21 = a2[2];
    if (v20 >= v21)
      v22 = a2[2];
    else
      v22 = v19 - v17;
    if (v18)
    {
      v23 = *(unsigned __int16 *)(a4 + 88) | (*(_DWORD *)(a4 + 92) << 16);
    }
    else
    {
      v23 = sub_100018A8C(*(_QWORD *)(a4 + 32) + v17, v22);
      *(_DWORD *)(a4 + 88) = (unsigned __int16)v23;
      *(_DWORD *)(a4 + 92) = HIWORD(v23);
    }
    v24 = *(_QWORD *)(a4 + 24);
    if (v24 >= a2[5]
      || (v25 = a2[4], v23 != *(_DWORD *)(v25 + 48 * v24 + 24))
      || v22 != *(_QWORD *)(v25 + 48 * v24 + 16))
    {
      v26 = 0;
      goto LABEL_24;
    }
    sub_100018B24((char *)(*(_QWORD *)(a4 + 32) + *(_QWORD *)a4), v22, __s1, a1);
    if (memcmp(__s1, (const void *)(a2[4] + 48 * *(_QWORD *)(a4 + 24) + 28), a2[3]))
    {
      v26 = 1;
LABEL_24:
      for (i = *(uint64_t **)(**(_QWORD **)(a4 + 80)
                            + 16 * ((unint64_t)v23 % *(_QWORD *)(*(_QWORD *)(a4 + 80) + 8)));
            i;
            i = (uint64_t *)i[1])
      {
        if (v23 == *(_DWORD *)(*i + 24) && v22 == *(_QWORD *)(*i + 16))
        {
          sub_10001BE54(3, "%s: found matching fast match: position %jd, block %zu (position %jd, size %zu)", a3, a4, a5, a6, a7, a8, v9);
          if (!v26)
            sub_100018B24((char *)(*(_QWORD *)(a4 + 32) + *(_QWORD *)a4), v22, __s1, a1);
          if (!memcmp(__s1, (const void *)(*i + 28), a2[3]))
          {
            sub_10001BE54(3, "%s: sender verifies slow match", a3, a4, a5, a6, a7, a8, v9);
            v34 = *i;
            goto LABEL_36;
          }
          v26 = 1;
        }
      }
      v28 = *(_QWORD *)a4;
      v29 = (char *)(*(_QWORD *)(a4 + 32) + *(_QWORD *)a4);
      v30 = *(_DWORD *)(a4 + 92);
      v31 = *(_DWORD *)(a4 + 88) - *v29;
      *(_DWORD *)(a4 + 88) = v31;
      v32 = v30 - v22 * *v29;
      *(_DWORD *)(a4 + 92) = v32;
      if (v20 > v21)
      {
        v33 = v31 + v29[v22];
        *(_DWORD *)(a4 + 88) = v33;
        *(_DWORD *)(a4 + 92) = v33 + v32;
      }
      goto LABEL_37;
    }
    sub_10001BE54(3, "%s: found matching hinted match: position %jd, block %zu (position %jd, size %zu)", a3, a4, a5, a6, a7, a8, v9);
    v34 = a2[4] + 48 * *(_QWORD *)(a4 + 24);
LABEL_36:
    v28 = *(_QWORD *)a4;
    if (v34)
      break;
LABEL_37:
    v17 = v28 + 1;
    *(_QWORD *)a4 = v28 + 1;
    ++v18;
    if (v28 + 1 >= v43)
    {
      v11 = *(_QWORD *)(a4 + 40);
      v10 = a1;
      v14 = v42;
      goto LABEL_39;
    }
  }
  *(int64x2_t *)(a4 + 8) = vaddq_s64(*(int64x2_t *)(a4 + 8), vdupq_n_s64(v28 - v42));
  *(_QWORD *)(a1 + 88) += v28 - v42;
  sub_10001BE54(3, "%s: flushing %jd B before %zu B block %zu", a3, a4, a5, a6, a7, a8, v9);
  v37 = *(_QWORD *)(v34 + 8);
  v38 = ~*(_DWORD *)(v34 + 8);
  *(_QWORD *)(a4 + 56) = v42;
  *(_QWORD *)(a4 + 64) = v28;
  *(_DWORD *)(a4 + 72) = v38;
  if ((_DWORD)v37 == -1)
    sub_100034F24();
  if (v28 == v42)
    v39 = 3;
  else
    v39 = 2;
  *(_DWORD *)(a4 + 52) = v39;
  v40 = *(_QWORD *)(v34 + 16);
  *(_QWORD *)(a1 + 96) += v40;
  result = vaddq_s64(*(int64x2_t *)a4, vdupq_n_s64(v40));
  *(int64x2_t *)a4 = result;
  *(_QWORD *)(a4 + 24) = v37 + 1;
  return result;
}

void *sub_100002494(uint64_t a1, int *a2)
{
  void *result;
  uint64_t v5;

  v5 = 0;
  sub_10001AA28(a1, &v5, 0x10uLL, a2[10]);
  sub_10001AA28(a1, &v5, 0x10uLL, a2[4]);
  sub_10001AA28(a1, &v5, 0x10uLL, a2[6]);
  result = sub_10001AA28(a1, &v5, 0x10uLL, a2[2]);
  if (v5 != 16)
    sub_100034F74();
  return result;
}

unint64_t *sub_10000251C(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t *v10;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  NSObject *v50;
  unint64_t v51;
  unint64_t v53;
  unint64_t v54;
  NSObject *v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  char v59;
  NSObject *log;
  size_t *v61;
  _QWORD *v62;
  int v63;
  uint8_t buf[4];
  uint64_t v65;
  __int16 v66;
  unint64_t v67;
  __int16 v68;
  size_t v69;
  __int16 v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;

  v9 = (_QWORD *)a6;
  v10 = (unint64_t *)a5;
  v63 = 0;
  v14 = *a7;
  if (!a5 && v14)
    sub_100034F9C();
  if ((v14 | 2) != 2)
    sub_100034FC4();
  if (!a5)
  {
    v18 = (unint64_t *)malloc_type_calloc(1uLL, 0x30uLL, 0x1020040C9D978F5uLL);
    if (!v18)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034E48();
      sub_10001BFE8("calloc", v19, v20, v21, v22, v23, v24, v25, v59);
      return 0;
    }
    v10 = v18;
    if (!sub_10001B428(a1, a3, 0x500uLL))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034FEC();
      sub_10001C094("iobuf_alloc");
      goto LABEL_70;
    }
  }
  if (!v14)
  {
    if ((unint64_t)sub_10001B4D8((uint64_t)a3) < 0x10)
      return v10;
    if (sub_10001BB34(a3, v10 + 5))
    {
      v26 = v10 + 2;
      if (sub_10001BB34(a3, v10 + 2))
      {
        if (sub_10001BB34(a3, v10 + 3))
        {
          v62 = v9;
          v27 = v10 + 1;
          if (sub_10001BB34(a3, v10 + 1))
          {
            v34 = *v27;
            if (!*v27 || (v35 = *v26, v34 < *v26))
            {
              if (dword_100050EE8)
              {
                log = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
                {
                  v56 = v10[5];
                  v57 = *v26;
                  v58 = v10[3];
                  *(_DWORD *)buf = 136316162;
                  v65 = a4;
                  v66 = 2048;
                  v67 = v56;
                  v68 = 2048;
                  v69 = v57;
                  v70 = 2048;
                  v71 = v34;
                  v72 = 2048;
                  v73 = v58;
                  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "%s: read block prologue: %zu blocks of %zu B, %zu B remainder, %zu B checksum", buf, 0x34u);
                }
              }
              sub_10001BE54(2, "%s: read block prologue: %zu blocks of %zu B, %zu B remainder, %zu B checksum", v28, v29, v30, v31, v32, v33, a4);
              *a7 = 2;
              v9 = v62;
              *v62 = 0;
              goto LABEL_6;
            }
            if (dword_100050EE8)
            {
              v54 = *v26;
              v55 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134218240;
                v65 = v34;
                v66 = 2048;
                v67 = v54;
                _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "block remainder %zu is greater than block size %zu", buf, 0x16u);
                v34 = *v27;
                v35 = *v26;
              }
              else
              {
                v35 = v54;
              }
            }
            sub_10001BF64("block remainder %zu is greater than block size %zu", v34, v35);
LABEL_70:
            free((void *)v10[4]);
            free(v10);
            return 0;
          }
          if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          {
LABEL_69:
            sub_10001C094("iobuf_read_size");
            goto LABEL_70;
          }
        }
        else if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_69;
        }
      }
      else if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_69;
      }
    }
    else if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_69;
    }
    sub_100035090();
    goto LABEL_69;
  }
LABEL_6:
  if (*a7 != 2)
    sub_100035068();
  v15 = v10[5];
  if (v15 && !v10[4])
  {
    v36 = *(_QWORD *)(a1 + 200);
    if (!**(_DWORD **)(v36 + 8) && *(_DWORD *)v36)
    {
      v51 = v10[1];
      if (v51)
        v17 = v51 + v10[2] * (v15 - 1);
      else
        v17 = v10[2] * v15;
LABEL_46:
      *a7 = 3;
      *v10 = v17;
      if (dword_100050EE8)
      {
        v50 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
        {
          v53 = v10[5];
          *(_DWORD *)buf = 136315650;
          v65 = a4;
          v66 = 2048;
          v67 = v53;
          v68 = 2048;
          v69 = v17;
          _os_log_debug_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "%s: read blocks: %zu blocks, %jd B total blocked data", buf, 0x20u);
        }
      }
      sub_10001BE54(2, "%s: read blocks: %zu blocks, %jd B total blocked data", (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, a4);
      return v10;
    }
    v37 = malloc_type_calloc(v15, 0x30uLL, 0x100004064842E6AuLL);
    v10[4] = (unint64_t)v37;
    if (v37)
    {
      v17 = 0;
      v61 = v9;
      v16 = *v9;
      v15 = v10[5];
      goto LABEL_36;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034E48();
    sub_10001BFE8("calloc", v38, (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, v59);
    goto LABEL_70;
  }
  v61 = v9;
  v16 = *v9;
  if (*v9)
    v17 = v10[2] * v16;
  else
    v17 = 0;
LABEL_36:
  if (v16 < v15)
  {
    v39 = 48 * v16;
    do
    {
      if (sub_10001B4D8((uint64_t)a3) < v10[3] + 4)
        break;
      v40 = v10[4];
      sub_10001BA78(a3, &v63);
      v41 = (size_t *)(v40 + v39);
      *(_DWORD *)(v40 + v39 + 24) = v63;
      v42 = v10[3];
      if (v42 >= 0x11)
        sub_100035018();
      sub_10001B99C(a3, (char *)v41 + 28, v42);
      *v41 = v17;
      v41[1] = v16;
      if (v16 == v10[5] - 1 && (v49 = v10[1]) != 0)
      {
        *(_QWORD *)(v40 + v39 + 16) = v49;
      }
      else
      {
        v49 = v10[2];
        *(_QWORD *)(v40 + v39 + 16) = v49;
        if (!v49)
          sub_100035040();
      }
      v17 += v49;
      sub_10001BE54(3, "%s: read block %zu, length %zu B", v43, v44, v45, v46, v47, v48, a4);
      ++v16;
      v39 += 48;
    }
    while (v16 < v10[5]);
  }
  *v61 = v16;
  if (v16 >= v10[5])
    goto LABEL_46;
  return v10;
}

uint64_t sub_100002BF8(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  char v9[16];

  v8 = 0;
  if (!sub_10001A524(a1, a2, v9, 0x10uLL))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000350BC();
    sub_10001C094("io_read_buf", v8);
    return 0;
  }
  if (!sub_10001B1D0((uint64_t)v9, &v8, 0x10uLL, a3 + 5))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
LABEL_26:
    sub_1000350E8();
LABEL_27:
    sub_10001C094("io_unbuffer_size", v8);
    return 0;
  }
  v4 = a3 + 2;
  if (!sub_10001B1D0((uint64_t)v9, &v8, 0x10uLL, a3 + 2))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    goto LABEL_26;
  }
  v5 = a3 + 3;
  if (!sub_10001B1D0((uint64_t)v9, &v8, 0x10uLL, a3 + 3))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    goto LABEL_26;
  }
  v6 = a3 + 1;
  if (!sub_10001B1D0((uint64_t)v9, &v8, 0x10uLL, v6))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_27;
    goto LABEL_26;
  }
  if (*v4 && *v6 >= *v4)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035140();
    sub_10001C094("non-zero length is less than remainder", v8);
  }
  else
  {
    if (*v5 <= 0x10uLL && (*v5 & 0x80000000) == 0)
      return 1;
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035114();
    }
    sub_10001C094("inappropriate checksum length", v8);
  }
  return 0;
}

uint64_t sub_100002EB8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  const char *v40;
  NSObject *v41;
  const char *v42;
  const char *v43;
  _QWORD v44[15];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint8_t buf[4];
  _BYTE v55[10];
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;

  memset(&v44[1], 0, 112);
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44[0] = a2;
  v7 = *(_DWORD *)(a2 + 8);
  LODWORD(v44[1]) = *(_DWORD *)(a4 + 40);
  LODWORD(v44[2]) = v7;
  HIDWORD(v53) = v7;
  DWORD1(v49) = -1;
  v8 = *(const char **)(a2 + 24);
  if (v8)
    sub_10001F23C(v8, v44);
  sub_10002B5D8(a1, (uint64_t)v44);
  sub_10002B410((uint64_t)a1);
  if (!sub_10001A850((uint64_t)v44, a3, v44[2]))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003516C();
    sub_10001C094("io_write_int");
    goto LABEL_22;
  }
  if (!sub_10001AF44(v44, a3, (char *)&v44[2] + 4))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
LABEL_20:
    sub_100035198();
LABEL_21:
    sub_10001C094("io_read_int");
LABEL_22:
    v17 = 1;
    goto LABEL_23;
  }
  if (!sub_10001AF44(v44, a3, (char *)&v44[1] + 4))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    goto LABEL_20;
  }
  v15 = HIDWORD(v44[2]);
  if (SHIDWORD(v44[2]) <= 26)
  {
    if (dword_100050EE8)
    {
      v16 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v55 = v15;
        *(_WORD *)&v55[4] = 1024;
        *(_DWORD *)&v55[6] = 27;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "remote protocol %d is older than our minimum supported %d: exiting", buf, 0xEu);
        v15 = HIDWORD(v44[2]);
      }
    }
    sub_10001BF64("remote protocol %d is older than our minimum supported %d: exiting", v15, 27);
LABEL_35:
    v17 = 2;
    goto LABEL_23;
  }
  v19 = v44[2];
  if (SHIDWORD(v44[2]) < SLODWORD(v44[2]))
    HIDWORD(v53) = HIDWORD(v44[2]);
  if (dword_100050EE8)
  {
    v20 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)v55 = v19;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = v15;
      v56 = 1024;
      v57 = HIDWORD(v53);
      v58 = 1024;
      v59 = HIDWORD(v44[1]);
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "client detected client version %d, server version %d, negotiated protocol version %d, seed %d", buf, 0x1Au);
      LOBYTE(v19) = v44[2];
    }
  }
  v17 = 1;
  sub_10001BE54(1, "client detected client version %d, server version %d, negotiated protocol version %d, seed %d", v9, v10, v11, v12, v13, v14, v19);
  v27 = v44[0];
  if (*(_QWORD *)(v44[0] + 528))
  {
    if (sub_100006750(v44))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035298();
      sub_10001C094("batch_open");
      goto LABEL_35;
    }
    v17 = 0;
    v27 = v44[0];
  }
  if (*(_QWORD *)(v27 + 496) && !*(_DWORD *)(a4 + 40))
    LODWORD(v49) = a3;
  else
    DWORD2(v45) = 1;
  v28 = *(_DWORD *)(v27 + 512);
  if (v28 == -1)
    sub_1000351C4();
  if (dword_100050EE8)
  {
    v29 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      if (v28)
        v30 = "disabled";
      else
        v30 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v55 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Delta transmission %s for this transfer", buf, 0xCu);
      v28 = *(_DWORD *)(v44[0] + 512);
    }
  }
  if (v28)
    v31 = "disabled";
  else
    v31 = "enabled";
  sub_10001BE54(1, "Delta transmission %s for this transfer", v21, v22, v23, v24, v25, v26, (char)v31);
  if (*(_DWORD *)(a4 + 40) == 1)
  {
    if (dword_100050EE8)
    {
      v38 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        v39 = *(const char **)(a4 + 8);
        if (!v39)
          v39 = "(local)";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v55 = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "client starting receiver: %s", buf, 0xCu);
      }
    }
    v40 = *(const char **)(a4 + 8);
    if (!v40)
      v40 = "(local)";
    sub_10001BE54(1, "client starting receiver: %s", v32, v33, v34, v35, v36, v37, (char)v40);
    if (*(_DWORD *)(v44[0] + 204))
      DWORD2(v46) = 1;
    if (!sub_1000232D0((uint64_t)v44, (uint64_t)a1, a3, a3, *(char **)(a4 + 32)))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000351EC();
      sub_10001C094("rsync_receiver");
      goto LABEL_23;
    }
    goto LABEL_74;
  }
  if (dword_100050EE8)
  {
    v41 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      v42 = *(const char **)(a4 + 8);
      if (!v42)
        v42 = "(local)";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v55 = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "client starting sender: %s", buf, 0xCu);
    }
  }
  v43 = *(const char **)(a4 + 8);
  if (!v43)
    v43 = "(local)";
  sub_10001BE54(1, "client starting sender: %s", v32, v33, v34, v35, v36, v37, (char)v43);
  if (sub_100026A9C((uint64_t)v44, a3, a3, *(_QWORD *)(a4 + 24), *(const char ***)(a4 + 16)))
  {
LABEL_74:
    if (sub_10001979C(v44, a3))
    {
      if (BYTE8(v53))
      {
        if ((uint64_t)v53 < *(_QWORD *)(v44[0] + 592))
          sub_100035244();
        v17 = 25;
      }
      else if (*((_QWORD *)&v52 + 1))
      {
        v17 = 23;
      }
      else
      {
        v17 = 0;
      }
    }
    else
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035218();
      sub_10001C094("data remains in read pipe");
      v17 = 14;
    }
    goto LABEL_23;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_10003526C();
  sub_10001C094("rsync_sender");
LABEL_23:
  sub_100006978(v44, a4, v17);
  return v17;
}

uint64_t sub_100003598(int a1, int a2)
{
  uint64_t result;
  int v5;
  int v6;

  result = fork();
  if ((_DWORD)result != -1)
  {
    if ((_DWORD)result)
      _exit(0);
    result = setsid();
    if ((_DWORD)result != -1)
    {
      if (a1)
      {
        if (!a2)
        {
LABEL_8:
          v5 = open("/dev/null", 2);
          if (v5 != -1)
          {
            v6 = v5;
            dup2(v5, 0);
            dup2(v6, 1);
            dup2(v6, 2);
            result = 0;
            if (v6 < 3)
              return result;
            close(v6);
          }
        }
      }
      else
      {
        chdir("/");
        if (!a2)
          goto LABEL_8;
      }
      return 0;
    }
  }
  return result;
}

void *sub_10000364C(void *result, rsize_t __n)
{
  if (__n)
    return (void *)memset_s(result, __n, 0, __n);
  return result;
}

void *sub_100003660(void *a1, unint64_t a2, unint64_t a3)
{
  if (!a2 || !((a3 | a2) >> 32) || is_mul_ok(a2, a3))
    return malloc_type_realloc(a1, a3 * a2, 0x2D8944B5uLL);
  *__error() = 12;
  return 0;
}

char *sub_1000036A8(char *a1, unint64_t a2, size_t count, size_t size)
{
  int *v5;
  char *v6;
  int v7;
  size_t v9;
  size_t v10;
  size_t v11;
  char *v12;
  char *v13;

  if (!a1)
    return (char *)malloc_type_calloc(count, size, 0xFA0F27A6uLL);
  if (!count || !((size | count) >> 32) || is_mul_ok(count, size))
  {
    if (a2 && (size | a2) >> 32 && !is_mul_ok(a2, size))
    {
      v5 = __error();
      v6 = 0;
      v7 = 22;
      goto LABEL_10;
    }
    v9 = size * count;
    v10 = size * a2;
    v11 = size * count - size * a2;
    if (size * count <= size * a2)
    {
      if (v10 - v9 < v10 >> 1 && v10 - v9 < getpagesize())
      {
        bzero(&a1[v9], v10 - v9);
        return a1;
      }
      v13 = (char *)malloc_type_malloc(v9, 0xF00773C3uLL);
      v6 = v13;
      if (!v13)
        return v6;
      memcpy(v13, a1, v9);
      if (!v10)
        goto LABEL_16;
    }
    else
    {
      v12 = (char *)malloc_type_malloc(size * count, 0xF00773C3uLL);
      v6 = v12;
      if (!v12)
        return v6;
      memcpy(v12, a1, v10);
      bzero(&v6[v10], v11);
      if (!v10)
      {
LABEL_16:
        free(a1);
        return v6;
      }
    }
    memset_s(a1, v10, 0, v10);
    goto LABEL_16;
  }
  v5 = __error();
  v6 = 0;
  v7 = 12;
LABEL_10:
  *v5 = v7;
  return v6;
}

uint64_t sub_100003808(char *a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __darwin_ct_rune_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t result;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;

  v3 = a1;
  v4 = *a1;
  if ((*a1 & 0x80000000) == 0)
  {
    do
    {
      if ((_DefaultRuneLocale.__runetype[v4] & 0x4000) == 0)
        break;
      v5 = *++v3;
      v4 = v5;
    }
    while ((v5 & 0x80000000) == 0);
  }
  v6 = 0;
  while (v4 == 43)
  {
    if (v6)
      goto LABEL_42;
    v6 = 1;
LABEL_11:
    v7 = *++v3;
    v4 = v7;
  }
  if (v4 == 45)
  {
    if (v6)
      goto LABEL_42;
    v6 = -1;
    goto LABEL_11;
  }
  if ((v4 & 0x80) != 0)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
LABEL_31:
    if (v6 <= 1)
      v15 = 1;
    else
      v15 = v6;
    v16 = v9 * v15;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v4 - 48;
      if (v4 != 46 && v12 > 9)
        break;
      if (v4 == 46)
      {
        if (v10)
          goto LABEL_42;
        v10 = 1;
      }
      else if (v10)
      {
        if (v10 <= 0x13)
        {
          if (v8 > 0xCCCCCCCCCCCCCCCLL || ((10 * v8) ^ 0x7FFFFFFFFFFFFFFFuLL) < v12)
            goto LABEL_52;
          ++v10;
          v8 = 10 * v8 + v12;
        }
      }
      else
      {
        if (++v11 >= 0x15)
          goto LABEL_52;
        if (v9 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_52;
        v13 = 10 * v9;
        if ((v13 ^ 0x7FFFFFFFFFFFFFFFuLL) < v12)
          goto LABEL_52;
        v10 = 0;
        v9 = v13 + v12;
      }
      v14 = *++v3;
      v4 = v14;
      if (v14 < 0)
        goto LABEL_31;
    }
    if (v6 <= 1)
      v24 = 1;
    else
      v24 = v6;
    v16 = v9 * v24;
    if (!v4)
    {
      result = 0;
      *a2 = v16;
      return result;
    }
  }
  v17 = 0;
  while (1)
  {
    v18 = *v3;
    v19 = aBkmgtpe[v17];
    if (v18 == v19 || __tolower(v19) == (char)v18)
      break;
    if (++v17 == 7)
      goto LABEL_42;
  }
  v20 = v3[1];
  if (v3[1] < 0)
  {
    if (!__maskrune(v20, 0x500uLL))
      goto LABEL_50;
LABEL_42:
    v21 = __error();
    v22 = 22;
LABEL_43:
    *v21 = v22;
    return 0xFFFFFFFFLL;
  }
  if ((_DefaultRuneLocale.__runetype[v20] & 0x500) != 0)
    goto LABEL_42;
LABEL_50:
  v25 = qword_10003D158[v17];
  v26 = 0x7FFFFFFFFFFFFFFFLL / v25;
  if (v16 > 0x7FFFFFFFFFFFFFFFLL / v25 || v16 < (uint64_t)0x8000000000000000 / v25)
  {
LABEL_52:
    v21 = __error();
    v22 = 34;
    goto LABEL_43;
  }
  for (; v8 >= v26; --v10)
    v8 /= 10;
  v27 = v25 * v16;
  v28 = v8 * v25;
  if (v10)
  {
    v29 = v10 - 1;
    if (v10 != 1)
    {
      do
      {
        v28 /= 10;
        --v29;
      }
      while (v29);
    }
  }
  result = 0;
  if (v6 == -1)
    v28 = -v28;
  *a2 = v28 + v27;
  return result;
}

uint64_t sub_100003AC4(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v16;

  v6 = *(_QWORD *)(a1 + 200);
  if (*(_DWORD *)a3)
    v7 = "outgoing chmod";
  else
    v7 = "incoming chmod";
  if (sub_100016754(*(uint64_t **)(v6 + 1128), a2, v7))
  {
    v16 = 0;
    if (sub_100016A88(*(_QWORD *)(v6 + 1128), a2, v7, &v16))
      sub_1000352C4();
    v8 = sub_10001F23C(v16, (_WORD *)a1);
    if (v8)
    {
      strerror(v8);
      sub_100003B90(a1, "%s: failed to parse '%s': %s", v9, v10, v11, v12, v13, v14, (char)a2);
      return 0;
    }
    *(_QWORD *)(a3 + 24) = v16;
  }
  return 1;
}

void sub_100003B90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *__s;

  v10 = *(_QWORD *)(a1 + 200);
  __s = 0;
  v11 = vasprintf(&__s, a2, &a9);
  if (v11 != -1)
  {
    v12 = *(_DWORD *)(v10 + 1172);
    if (*(_DWORD *)(a1 + 144))
    {
      if (sub_100019E94(a1, v12, __s, v11, 1))
      {
        if (sub_100019E94(a1, *(_DWORD *)(v10 + 1172), "\n", 1uLL, 1))
        {
LABEL_17:
          free(__s);
          return;
        }
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
LABEL_16:
          sub_10001BFE8("io_write", v13, v14, v15, v16, v17, v18, v19, (char)&a9);
          goto LABEL_17;
        }
      }
      else if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_16;
      }
    }
    else
    {
      if (sub_10001A070(a1, v12, "@ERROR ", 7uLL)
        && sub_10001A078(a1, *(_DWORD *)(v10 + 1172), __s))
      {
        goto LABEL_17;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
    }
    sub_1000352EC();
    goto LABEL_16;
  }
}

uint64_t sub_100003D00(uint64_t a1, const char *a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (*(_DWORD *)(a3 + 120))
    return 1;
  v8 = *(_QWORD *)(a1 + 200);
  if (!sub_100016754(*(uint64_t **)(v8 + 1128), a2, "numeric ids"))
  {
    *(_DWORD *)(a3 + 120) = a4 != 0;
    return 1;
  }
  v16 = 0;
  if (sub_100016858(*(uint64_t **)(v8 + 1128), a2, "numeric ids", &v16))
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035318();
    }
    sub_10001BFE8("%s: 'numeric ids' invalid", v9, v10, v11, v12, v13, v14, v15, (char)a2);
    return 0;
  }
  else
  {
    result = 1;
    if (v16)
      *(_DWORD *)(a3 + 120) = 1;
  }
  return result;
}

uint64_t sub_100003DF0(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char v15;

  v6 = *(_QWORD *)(a1 + 200);
  if (!*(_DWORD *)(a3 + 568)
    && sub_100016858(*(uint64_t **)(v6 + 1128), a2, "ignore errors", (int *)(a3 + 568)))
  {
    v13 = "%s: 'ignore errors' invalid";
    goto LABEL_6;
  }
  if (sub_100016858(*(uint64_t **)(v6 + 1128), a2, "ignore nonreadable", (int *)(a3 + 604)))
  {
    v13 = "%s: 'ignore nonreadable' invalid";
LABEL_6:
    sub_100003B90(a1, v13, v7, v8, v9, v10, v11, v12, v15);
    return 0;
  }
  return 1;
}

uint64_t sub_100003E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uid_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v21;
  const char *v22;

  v4 = *(_QWORD *)(a1 + 200);
  v5 = geteuid();
  *(_BYTE *)(v4 + 1177) = v5 == 0;
  if (v5)
    return 1;
  v21 = 0;
  v22 = 0;
  if (sub_100016A88(*(_QWORD *)(v4 + 1128), a2, "uid", &v21))
    sub_1000353A0();
  if (!sub_100003F7C(v21, 0, (_DWORD *)(v4 + 1164)))
  {
    sub_100003B90(a1, "%s: uid '%s' invalid", v7, v8, v9, v10, v11, v12, a2);
    return 0;
  }
  if (sub_100016A88(*(_QWORD *)(v4 + 1128), a2, "gid", &v22))
    sub_100035378();
  v13 = (_DWORD *)(v4 + 1168);
  v6 = 1;
  if (!sub_100003F7C(v22, 1, v13))
  {
    sub_100003B90(a1, "%s: gid '%s' invalid", v14, v15, v16, v17, v18, v19, a2);
    return 0;
  }
  return v6;
}

uint64_t sub_100003F7C(const char *a1, int a2, _DWORD *a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;
  int *v8;
  BOOL v9;
  char *__endptr;

  if (a2)
  {
    v5 = getgrnam(a1);
    if (v5)
    {
LABEL_3:
      LODWORD(v6) = v5[4];
LABEL_4:
      *a3 = v6;
      return 1;
    }
  }
  else
  {
    v5 = getpwnam(a1);
    if (v5)
      goto LABEL_3;
  }
  __endptr = 0;
  *__error() = 0;
  v6 = strtoll(a1, &__endptr, 10);
  v8 = __error();
  result = 0;
  if (!*v8)
  {
    if (*__endptr)
      v9 = 0;
    else
      v9 = (unint64_t)(v6 - 0x80000000) >= 0xFFFFFFFF00000000;
    if (v9)
      goto LABEL_4;
    return 0;
  }
  return result;
}

uint64_t sub_100004020(uint64_t a1, char a2)
{
  uint64_t v2;
  gid_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uid_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 200);
  if (!*(_BYTE *)(v2 + 1177))
    return 1;
  v5 = *(_DWORD *)(v2 + 1168);
  if (v5 && setgid(v5) == -1)
  {
    sub_100003B90(a1, "%s: setgid to '%d' failed", v6, v7, v8, v9, v10, v11, a2);
  }
  else
  {
    v12 = *(_DWORD *)(v2 + 1164);
    if (!v12 || setuid(v12) != -1)
      return 1;
    sub_100003B90(a1, "%s: setuid to '%d' failed", v13, v14, v15, v16, v17, v18, a2);
  }
  return 0;
}

uint64_t sub_1000040BC(uint64_t a1, const char *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 200);
  sub_100004168(v3, a2, "filter", 0, 0);
  sub_100004168(v3, a2, "include from", 2, 1);
  sub_100004168(v3, a2, "include", 2, 0);
  sub_100004168(v3, a2, "exclude from", 1, 1);
  sub_100004168(v3, a2, "exclude", 1, 0);
  return 1;
}

uint64_t sub_100004168(uint64_t a1, const char *a2, char *a3, uint64_t a4, int a5)
{
  uint64_t result;
  char *v11;

  result = sub_100016754(*(uint64_t **)(a1 + 1128), a2, a3);
  if ((_DWORD)result)
  {
    v11 = 0;
    if (sub_100016A88(*(_QWORD *)(a1 + 1128), a2, a3, &v11))
      sub_1000353C8();
    if (a5)
      return (uint64_t)sub_1000253E0(v11, a4, 10);
    else
      return sub_100024D08(v11, a4, 0xAu);
  }
  return result;
}

uint64_t sub_1000041F4(uint64_t a1, const char *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  char v15;
  BOOL v16;
  uint64_t v17;
  char *__s1;

  v17 = 0;
  __s1 = 0;
  v16 = 0;
  v4 = *(_QWORD *)(a1 + 200);
  v5 = sub_100016754(*(uint64_t **)(v4 + 1128), a2, "hosts deny");
  if (!sub_100016754(*(uint64_t **)(v4 + 1128), a2, "hosts allow"))
  {
    v12 = 0;
LABEL_9:
    if (!v5)
      return 1;
    goto LABEL_10;
  }
  if (sub_100016A88(*(_QWORD *)(v4 + 1128), a2, "hosts allow", &__s1))
    sub_100035418();
  if (sub_100004374(a1, __s1, &v16, (_DWORD *)&v17 + 1) == -1)
  {
    v13 = "failed to process allow host list";
LABEL_19:
    sub_100003B90(a1, v13, v6, v7, v8, v9, v10, v11, v15);
    return 0;
  }
  v12 = HIDWORD(v17);
  if (SHIDWORD(v17) < 1)
    goto LABEL_9;
  if (v16)
    return 1;
  if (!v5)
    goto LABEL_18;
LABEL_10:
  if (sub_100016A88(*(_QWORD *)(v4 + 1128), a2, "hosts deny", &__s1))
    sub_1000353F0();
  if (sub_100004374(a1, __s1, &v16, &v17) == -1)
  {
    v13 = "failed to process deny host list";
    goto LABEL_19;
  }
  if ((int)v17 < 1)
  {
    if (v12 >= 1)
    {
LABEL_18:
      v15 = v4 + 16;
      v13 = "access denied by allow policy from %s [%s]";
      goto LABEL_19;
    }
  }
  else if (v16)
  {
    sub_100003B90(a1, "access denied by deny policy from %s [%s]", v6, v7, v8, v9, v10, v11, v4 + 16);
    return 0;
  }
  return 1;
}

uint64_t sub_100004374(uint64_t a1, char *__s1, BOOL *a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char **v14;
  unsigned __int8 *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char **v20;
  unsigned __int8 *v21;
  int v22;
  const char *v23;
  unint64_t v24;
  char **v25;
  char **v26;
  unsigned __int8 *v27;
  unint64_t v28;
  char **v29;
  char **v30;
  char **v31;
  size_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  char v38;
  char **__b;
  _DWORD *v40;
  BOOL *v41;
  char *__stringp;
  char *__endptr[33];

  __stringp = strdup(__s1);
  if (__stringp)
  {
    v13 = 0;
    v14 = (char **)((char *)&__endptr[17] + 4);
    while (1)
    {
      while (1)
      {
        do
        {
          v15 = (unsigned __int8 *)strsep(&__stringp, ", \t");
          v16 = (char *)v15;
          if (!v15)
          {
LABEL_46:
            *a4 = v13;
            *a3 = v16 != 0;
            free(__stringp);
            return 0;
          }
        }
        while (!*v15);
        ++v13;
        v17 = *(_QWORD *)(a1 + 200);
        if (*(_BYTE *)(v17 + 16) && !sub_100024784(v15, (char *)(v17 + 16), 0))
          goto LABEL_46;
        v18 = strrchr(v16, 47);
        if (v18)
          break;
        if (!strcmp(v16, (const char *)(v17 + 1041)))
          goto LABEL_46;
      }
      v19 = v18;
      v40 = a4;
      v41 = a3;
      v20 = v14;
      v21 = *(unsigned __int8 **)(v17 + 1088);
      v22 = v21[1];
      v23 = v18 + 1;
      memset(__endptr, 0, sizeof(__endptr));
      *__error() = 0;
      v24 = strtoul(v23, __endptr, 10);
      if (*__error() || *__endptr[0])
      {
        if (v22 == 2)
          v25 = (char **)((char *)&__endptr[1] + 4);
        else
          v25 = &__endptr[2];
        if (inet_pton(v22, v23, v25) == 1)
        {
          BYTE1(__endptr[1]) = v22;
          goto LABEL_15;
        }
LABEL_36:
        v14 = v20;
        a4 = v40;
        a3 = v41;
      }
      else
      {
        if (v22 == 2)
          v31 = (char **)((char *)&__endptr[1] + 4);
        else
          v31 = &__endptr[2];
        if (v22 == 2)
          v32 = 4;
        else
          v32 = 16;
        __b = v31;
        bzero(v31, v32);
        if (v24 > 8 * v32)
          goto LABEL_36;
        memset(__b, 255, v24 >> 3);
        if ((v24 & 7) != 0)
          *((_BYTE *)__b + (v24 >> 3)) |= -1 << (8 - (v24 & 7));
LABEL_15:
        *v19 = 0;
        v14 = v20;
        if (v22 == 2)
          v26 = v20;
        else
          v26 = &__endptr[18];
        a4 = v40;
        a3 = v41;
        if (inet_pton(v22, v16, v26) == 1)
        {
          BYTE1(__endptr[17]) = v22;
          v27 = v21 + 8;
          v28 = 16;
          if (v22 == 2)
          {
            v28 = 4;
            v27 = v21 + 4;
          }
          v29 = (char **)((char *)&__endptr[1] + 4);
          if (v22 != 2)
            v29 = &__endptr[2];
          v30 = &__endptr[18];
          if (v22 == 2)
            v30 = v14;
          if (((*v27 ^ *(unsigned __int8 *)v30) & *(unsigned __int8 *)v29) == 0)
          {
            v33 = 1;
            while (v28 != v33)
            {
              v34 = v27[v33] ^ *((unsigned __int8 *)v30 + v33);
              v35 = *((unsigned __int8 *)v29 + v33++);
              if ((v34 & v35) != 0)
              {
                v36 = v33 - 1;
                goto LABEL_45;
              }
            }
            v36 = v28;
LABEL_45:
            if (v36 >= v28)
              goto LABEL_46;
          }
        }
      }
    }
  }
  sub_100003B90(a1, "out of memory", v7, v8, v9, v10, v11, v12, v38);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1000046A8(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  unsigned int v32;
  char *v33;
  __int128 v34;
  uint64_t v35;

  v33 = 0;
  v32 = 0;
  v4 = *(_QWORD *)(a1 + 200);
  if (sub_100016A28(*(uint64_t **)(v4 + 1128), a2, "max connections", &v32))
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035528();
    }
    sub_10001BF64("%s: 'max connections' invalid", a2);
  }
  else if ((v32 & 0x80000000) != 0)
  {
    sub_100003B90(a1, "module '%s' is currently disabled", v5, v6, v7, v8, v9, v10, (char)a2);
  }
  else
  {
    if (!v32)
      return 0;
    if (sub_100016A88(*(_QWORD *)(v4 + 1128), a2, "lock file", &v33))
      sub_100035500();
    v18 = (char)v33;
    if (*v33)
    {
      v19 = v32;
      v34 = xmmword_10003D190;
      v35 = 0x300000000;
      v20 = *(_QWORD *)(a1 + 200);
      v21 = open(v33, 513, 420);
      if (v21 == -1)
      {
        sub_100003B90(a1, "%s: failed to open the lock file", v22, v23, v24, v25, v26, v27, (char)a2);
      }
      else
      {
        v28 = v21;
        if ((int)v19 >= 1)
        {
          v29 = 0;
          while (1)
          {
            *(_QWORD *)&v34 = v29 & 0xFFFFFFFC;
            *((_QWORD *)&v34 + 1) = 4;
            if (fcntl(v28, 8, &v34) != -1)
            {
              result = 0;
              *(_DWORD *)(v20 + 1160) = v28;
              return result;
            }
            if (*__error() != 35)
              break;
            v29 += 4;
            if (4 * v19 == v29)
              goto LABEL_29;
          }
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_1000354A0();
          sub_10001BFE8("%s: lock fcntl", v30, v22, v23, v24, v25, v26, v27, v18);
        }
LABEL_29:
        sub_100003B90(a1, "%s: too many connections (%d max)", v22, v23, v24, v25, v26, v27, (char)a2);
        close(v28);
      }
    }
    else
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035440();
      sub_10001BFE8("%s: 'lock file' is empty with 'max connections' in place", v11, v12, v13, v14, v15, v16, v17, (char)a2);
    }
  }
  return 1;
}

uint64_t sub_10000492C(uint64_t a1, const char *a2)
{
  uint64_t v4;
  const char *v5;
  pid_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  pid_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  pid_t v17;
  pid_t v18;
  pid_t v19;
  uint64_t result;
  pid_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  __int16 v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char v34;
  const char *v35;
  size_t __n;
  char __str[4];
  int v38[2];

  v4 = *(_QWORD *)(a1 + 200);
  if (!sub_100016754(*(uint64_t **)(v4 + 1128), a2, "pre-xfer exec")
    && !sub_100016754(*(uint64_t **)(v4 + 1128), a2, "post-xfer exec"))
  {
    return 1;
  }
  v35 = 0;
  if (sub_100016754(*(uint64_t **)(v4 + 1128), a2, "post-xfer exec"))
  {
    if (sub_100016A88(*(_QWORD *)(v4 + 1128), a2, "post-xfer exec", &v35))
      sub_1000355D8();
    v5 = v35;
    if (*v35)
    {
      v6 = fork();
      if (v6)
      {
        v13 = v6;
        if (v6 != -1)
        {
          *(_DWORD *)__str = 0;
          sub_100005ECC(*(_QWORD *)(a1 + 200), a2);
          sub_100005F54("RSYNC_PID", v13);
          do
            v21 = waitpid(v13, (int *)__str, 0);
          while (v21 == -1 && *__error() == 4);
          if (v21 == v13)
          {
            v22 = *(int *)__str;
          }
          else
          {
            *(_DWORD *)__str = -1;
            v22 = -1;
          }
          sub_100005F54("RSYNC_RAW_STATUS", v22);
          if ((__str[0] & 0x7F) != 0)
            v27 = -1;
          else
            v27 = __str[1];
          *(_DWORD *)__str = v27;
          sub_100005F54("RSYNC_EXIT_STATUS", v27);
          system(v5);
          _exit(*(int *)__str);
        }
        v14 = "%s: failed to fork for post-xfer";
        goto LABEL_18;
      }
    }
  }
  if (!sub_100016754(*(uint64_t **)(v4 + 1128), a2, "pre-xfer exec"))
    return 1;
  if (sub_100016A88(*(_QWORD *)(v4 + 1128), a2, "pre-xfer exec", &v35))
    sub_1000355B0();
  v15 = v35;
  if (!*v35)
    return 1;
  v16 = *(_QWORD *)(a1 + 200);
  v17 = getpid();
  if (pipe(v38) == -1 || (v18 = fork(), v18 == -1))
  {
    v34 = (char)a2;
    v14 = "%s: failed to stage pre-xfer process";
LABEL_18:
    sub_100003B90(a1, v14, v7, v8, v9, v10, v11, v12, v34);
    return 0;
  }
  v19 = v18;
  if (v18)
  {
    close(v38[0]);
    *(_DWORD *)(v16 + 1152) = v38[1];
    *(_DWORD *)(v16 + 1156) = v19;
    return 1;
  }
  __n = 0;
  close(v38[1]);
  sub_100005F54("RSYNC_PID", v17);
  sub_100005ECC(v16, a2);
  v23 = (char *)sub_100005FD4(v38[0], &__n);
  result = setenv("RSYNC_ARG0", "rsyncd", 1);
  v24 = __n;
  if (!__n)
  {
LABEL_27:
    free(v23);
    close(0);
    close(1);
    v25 = system(v15);
    if ((v25 & 0x7F) != 0)
      v26 = 1;
    else
      v26 = HIBYTE(v25);
    _exit(v26);
  }
  v28 = 0;
  v29 = v23;
  while (v28 != 513)
  {
    v30 = (char *)memchr(v29, 0, v24);
    if (!v30)
      goto LABEL_27;
    v31 = v30;
    if (v28)
    {
      v32 = snprintf(__str, 0x10uLL, "RSYNC_ARG%ld", v28);
      if (v32 == -1)
        goto LABEL_27;
    }
    else
    {
      v32 = __strlcpy_chk(__str, "RSYNC_REQUEST", 16, 16);
    }
    if (v32 >= 16)
      sub_100035588();
    result = setenv(__str, v29, 1);
    v33 = (char *)(v29 - (v31 + 1));
    ++v28;
    v29 = v31 + 1;
    v24 += (size_t)v33;
    if (!v24)
      goto LABEL_27;
  }
  __break(1u);
  return result;
}

BOOL sub_100004CB4(uint64_t a1, char *__s, char *a3, size_t a4)
{
  uint64_t v4;
  pid_t v5;
  int v6;
  size_t v12;
  _BOOL4 v13;
  pid_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v29;
  char v30;
  int v31;
  size_t __buf;

  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(_DWORD *)(v4 + 1156);
  v6 = *(_DWORD *)(v4 + 1152);
  if (v6 == -1 || v5 <= 0)
    sub_100035600();
  __buf = 0;
  v31 = 0;
  v13 = 0;
  if (__s)
  {
    v12 = strlen(__s) + 1;
    __buf = v12 + a4;
    if (!sub_100004E1C(v6, (char *)&__buf, 8uLL)
      || !sub_100004E1C(v6, __s, v12)
      || !sub_100004E1C(v6, a3, a4))
    {
      v13 = 1;
    }
  }
  close(v6);
  *(_DWORD *)(v4 + 1152) = -1;
  while (1)
  {
    v14 = waitpid(v5, &v31, 0);
    if (v14 == v5)
      break;
    if (v14 == -1 && *__error() != 4)
    {
      sub_100003B90(a1, "error waiting for pre-exec xfer child", v21, v22, v23, v24, v25, v26, v30);
      return 0;
    }
  }
  if ((v31 & 0x7F) == 0 && (v31 & 0xFF00) != 0)
  {
    v29 = "pre-xfer exec command denies transfer";
LABEL_23:
    sub_100003B90(a1, v29, v15, v16, v17, v18, v19, v20, v30);
    v13 = 1;
    goto LABEL_24;
  }
  if ((v31 & 0x7F) != 0)
  {
    v29 = "pre-xfer exec command failed";
    goto LABEL_23;
  }
LABEL_24:
  *(_DWORD *)(v4 + 1156) = 0;
  return !v13;
}

uint64_t sub_100004E1C(int __fd, char *__buf, size_t __nbyte)
{
  size_t v3;
  uint64_t v6;
  char *v7;
  ssize_t v8;
  ssize_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;

  if (!__nbyte)
    return 1;
  v3 = __nbyte;
  v6 = 0;
  v7 = __buf;
  while (1)
  {
    while (1)
    {
      v8 = write(__fd, v7, v3);
      v9 = v8;
      if (v8 <= 0)
        break;
      v6 += v8;
      v7 = &__buf[v6];
      result = 1;
      v3 -= v9;
      if (!v3)
        return result;
    }
    if (v8 != -1)
      break;
    if (*__error() != 4)
    {
      if (dword_100050EE8)
      {
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100035628();
      }
      sub_10001BFE8("write", v10, v11, v12, v13, v14, v15, v16, v18);
      return 0;
    }
  }
  return 0;
}

uint64_t sub_100004EFC(uint64_t a1, const char *a2, const sockaddr *a3, socklen_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a1 + 200);
  if (!sub_100016754(*(uint64_t **)(v8 + 1128), a2, "hosts allow")
    && !sub_100016754(*(uint64_t **)(v8 + 1128), a2, "hosts deny")
    && !sub_100016754(*(uint64_t **)(v8 + 1128), a2, "pre-xfer exec")
    && !sub_100016754(*(uint64_t **)(v8 + 1128), a2, "post-xfer exec"))
  {
    return 1;
  }
  v9 = getnameinfo(a3, a4, (char *)(v8 + 16), 0x401u, 0, 0, 0);
  if (!v9)
    return 1;
  gai_strerror(v9);
  sub_100003B90(a1, "%s: reverse dns lookup failed: %s", v10, v11, v12, v13, v14, v15, (char)a2);
  return 0;
}

uint64_t sub_100004FE4(uint64_t a1, const char *a2, int a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  stat v23;
  _BOOL4 v24;

  v6 = a3 != 0;
  v24 = a3 == 0;
  v7 = *(_QWORD *)(a1 + 200);
  if (sub_100016754(*(uint64_t **)(v7 + 1128), a2, "munge symlinks"))
  {
    if (sub_100016858(*(uint64_t **)(v7 + 1128), a2, "munge symlinks", (int *)&v24))
    {
      sub_100003B90(a1, "%s: 'munge symlinks' invalid", v8, v9, v10, v11, v12, v13, (char)a2);
      return 0;
    }
    v6 = !v24;
  }
  if (!a3 || !v6)
  {
    if (v6)
    {
      v15 = sub_100005238;
LABEL_15:
      *(_QWORD *)(a1 + 232) = v15;
      return 1;
    }
    memset(&v23, 0, sizeof(v23));
    if (stat("/rsyncd-munged/", &v23) == -1)
    {
      if (*__error() != 2)
      {
        v22 = "%s: failed to stat munge dir";
        goto LABEL_18;
      }
    }
    else if ((v23.st_mode & 0xF000) == 0x4000)
    {
      v22 = "%s: security violation: munger failure";
LABEL_18:
      sub_100003B90(a1, v22, v16, v17, v18, v19, v20, v21, (char)a2);
      return 0;
    }
    v15 = sub_100005120;
    goto LABEL_15;
  }
  return 1;
}

uint64_t sub_100005120(char *__s1, char **a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  const char *v13;
  char *v14;
  char v15;

  if (a3)
  {
    if (asprintf(a2, "%s%s", "/rsyncd-munged/", __s1) != -1)
      return 0;
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034BD0();
    }
    v13 = "asprintf";
  }
  else
  {
    if (strncmp(__s1, "/rsyncd-munged/", 0xFuLL))
    {
      result = 0;
      *a2 = 0;
      return result;
    }
    v14 = strdup(__s1 + 15);
    *a2 = v14;
    if (v14)
      return 0;
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035654();
    v13 = "strdup";
  }
  sub_10001BFE8(v13, v5, v6, v7, v8, v9, v10, v11, v15);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100005238(const char *a1, char **a2, int a3)
{
  char *v4;
  uint64_t result;

  if (a3)
  {
    v4 = sub_100009034(a1);
    *a2 = v4;
    if (v4)
    {
      return 0;
    }
    else
    {
      if (dword_100050EE8)
      {
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100035680();
      }
      sub_10001C094("make_safe_link");
      return 12;
    }
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t sub_1000052C0(uint64_t a1, const char *a2)
{
  int v4;
  int v5;

  v5 = 0;
  if (sub_100016A28(*(uint64_t **)(*(_QWORD *)(a1 + 200) + 1128), a2, "max verbosity", &v5))
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000356AC();
    }
    sub_10001BF64("%s: 'max verbosity' invalid", a2);
    return 0;
  }
  else
  {
    v4 = dword_100050EEC;
    if (dword_100050EEC >= v5)
      v4 = v5;
    dword_100050EEC = v4;
    return 1;
  }
}

uint64_t sub_100005378(char *__s2, size_t __n, char *__s1)
{
  size_t v4;
  uint64_t result;
  const char *v7;
  size_t v8;

  v4 = __n;
  if (!__n)
    v4 = strlen(__s2);
  result = strncmp(__s1, __s2, v4);
  if (!(_DWORD)result)
  {
    if (__s1[v4] == 47)
    {
      v7 = &__s1[v4 + 1];
      v8 = strlen(v7) + 1;
      return (uint64_t)memmove(__s1, v7, v8);
    }
    else if (!__s1[v4])
    {
      *__s1 = 0;
    }
  }
  return result;
}

size_t sub_10000540C(char *a1, int a2, char **a3)
{
  uint64_t v4;
  size_t result;
  size_t v7;
  char *v8;

  LODWORD(v4) = a2;
  result = strlen(a1);
  if ((int)v4 >= 1)
  {
    v7 = result;
    v4 = v4;
    do
    {
      v8 = *a3++;
      result = sub_100005378(a1, v7, v8);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_100005464(char *__filename, int a2)
{
  char v2;
  FILE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!__filename || (v2 = (char)__filename, !*__filename))
  {
    v4 = 0;
    goto LABEL_11;
  }
  v4 = fopen(__filename, "a");
  if (v4)
  {
LABEL_11:
    sub_10001BDD0((uint64_t)v4);
    return 1;
  }
  if (a2)
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003570C();
    }
    sub_10001BFE8("%s: fopen", v5, v6, v7, v8, v9, v10, v11, v2);
  }
  return 0;
}

BOOL sub_100005510(uint64_t a1, _DWORD *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v10;
  unsigned int v12;

  v8 = (char)a3;
  v12 = 0;
  v10 = *(_QWORD *)(a1 + 200);
  if (*a2)
  {
    if (sub_100016858(*(uint64_t **)(v10 + 1128), a3, "write only", (int *)&v12))
    {
      if (dword_100050EE8)
      {
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000357CC();
      }
      sub_10001BF64("%s: 'write only' invalid");
      return 0;
    }
    goto LABEL_16;
  }
  if ((_DWORD)a4 == -1)
  {
    if (sub_100016858(*(uint64_t **)(v10 + 1128), a3, "read only", (int *)&v12))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003576C();
      sub_10001BF64("%s: 'read only' invalid");
      return 0;
    }
LABEL_16:
    a4 = v12;
    if (v12)
      goto LABEL_17;
    return 1;
  }
  v12 = a4;
  if (!(_DWORD)a4)
    return 1;
LABEL_17:
  sub_100003B90(a1, "module '%s' is %s-protected", (uint64_t)a3, a4, a5, a6, a7, a8, v8);
  return v12 == 0;
}

uint64_t sub_100005688(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  __darwin_ct_rune_t v14;
  char v15;
  char *v16;
  char *v17;
  char *v18;
  char **v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  char *__s;
  char *__stringp;
  void *v33;
  char *__s1;

  v4 = *(_QWORD *)(a1 + 200);
  if (!sub_100016754(*(uint64_t **)(v4 + 1128), a2, "refuse options"))
    return 1;
  __s1 = 0;
  if (sub_100016A88(*(_QWORD *)(v4 + 1128), a2, "refuse options", &__s1))
    sub_10003587C();
  __stringp = strdup(__s1);
  if (!__stringp)
  {
    sub_100003B90(a1, "out of memory", v5, v6, v7, v8, v9, v10, v27);
    return 0;
  }
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  v33 = 0;
  __s = 0;
  v11 = strsep(&__stringp, " ");
  if (!v11)
    goto LABEL_50;
  v12 = v11;
  v13 = 0;
  while (1)
  {
    v14 = *v12;
    if (*v12)
    {
      if (v14 < 0)
      {
        if (!__maskrune(v14, 0x40000uLL))
          break;
      }
      else if ((_DefaultRuneLocale.__runetype[v14] & 0x40000) == 0)
      {
        break;
      }
      if (v12[1] && (v12[1] != 42 || v12[2] || !sub_100005AD4(0, *v12)))
        break;
      v15 = *v12;
      if (!sub_100005B9C(a1, &__s, &v28, &v27, *v12))
        goto LABEL_48;
      if (v15 == 97)
        v13 |= v12[1] == 0;
      if (v12[1])
        break;
    }
LABEL_40:
    v12 = strsep(&__stringp, " ");
    if (!v12)
    {
      if (__s)
      {
        if ((v13 & 1) != 0)
        {
          v22 = 114;
          v23 = &_mh_execute_header.magic + 1;
          do
          {
            if (!sub_100005B9C(a1, &__s, &v28, &v27, v22))
              sub_10003582C();
            v22 = aRlptgod[v23++];
          }
          while (v23 != 8);
        }
        else if (!strchr(__s, 97))
        {
          v26 = 7;
          do
          {
            if (!sub_100005B9C(a1, &__s, &v28, &v27, 97))
              sub_100035854();
            --v26;
          }
          while (v26);
        }
        v25 = __s;
        if (strchr(__s, 68))
        {
          result = sub_100005D24(a1, &v33, &v30, &v29, "devices");
          if (!(_DWORD)result)
            return result;
          result = sub_100005D24(a1, &v33, &v30, &v29, "specials");
          if (!(_DWORD)result)
            return result;
        }
        if (strchr(v25, 80))
        {
          result = sub_100005D24(a1, &v33, &v30, &v29, "partial");
          if (!(_DWORD)result)
            return result;
          result = sub_100005D24(a1, &v33, &v30, &v29, "progress");
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_51;
      }
LABEL_50:
      v25 = 0;
LABEL_51:
      *(_QWORD *)(v4 + 1192) = v25;
      *(_QWORD *)(v4 + 1184) = v33;
      *(_QWORD *)(v4 + 1200) = v30;
      return 1;
    }
  }
  v16 = strchr(v12, 42);
  v17 = "address";
  if ("address")
  {
    v18 = v16;
    v19 = &off_10004CAC0;
    while (1)
    {
      if (sub_100024784((unsigned __int8 *)v12, v17, 0))
        goto LABEL_36;
      if (v19[2])
        break;
      v20 = *((unsigned int *)v19 + 6);
      if (v20 > 0x7F)
      {
        if (!__maskrune(*((_DWORD *)v19 + 6), 0x40000uLL))
          break;
      }
      else if ((_DefaultRuneLocale.__runetype[v20] & 0x40000) == 0)
      {
        break;
      }
      if (!v18 || sub_100005AD4(0, (char)v20))
      {
        if ((_DWORD)v20 == 97)
          v13 |= strcmp(v12, "archive") == 0;
        if (!sub_100005B9C(a1, &__s, &v28, &v27, (char)v20))
          goto LABEL_48;
      }
LABEL_36:
      v21 = v19[4];
      v19 += 4;
      v17 = v21;
      if (!v21)
        goto LABEL_37;
    }
    if ((!v18 || sub_100005AD4(v17, 0))
      && !sub_100005C5C(a1, &v33, &v30, &v29, (uint64_t)v19))
    {
      goto LABEL_48;
    }
    goto LABEL_36;
  }
LABEL_37:
  if (sub_100024784((unsigned __int8 *)v12, "delete", 0)
    || sub_100005D24(a1, &v33, &v30, &v29, "remove-sent-files")
    && sub_100005D24(a1, &v33, &v30, &v29, "remove-source-files"))
  {
    goto LABEL_40;
  }
LABEL_48:
  free(__stringp);
  free(__s);
  free(v33);
  return 0;
}

unint64_t sub_100005AD4(char *__s1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  if (!__s1 && !a2)
    sub_1000358CC();
  if ((__s1 != 0) == (a2 != 0))
    sub_1000358A4();
  if (a2)
  {
    v3 = 0x3FDFFFFFFFFFFFFEuLL >> (a2 - 48);
    if ((a2 - 48) >= 0x3F)
      LOBYTE(v3) = 1;
  }
  else if (!strcmp(__s1, "server"))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v4;
      if (v4 == 6)
        break;
      v6 = strcmp(__s1, off_10004C650[v4 + 1]);
      v4 = v5 + 1;
    }
    while (v6);
    LOBYTE(v3) = v5 > 5;
  }
  return v3 & 1;
}

uint64_t sub_100005B9C(uint64_t a1, char **a2, size_t *a3, size_t *a4, int __c)
{
  char *v8;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char v21;

  v8 = *a2;
  if (!*a2)
  {
    v11 = strlen("0468B:CDEFHIKLOPRSVWabcde:f:ghklnopqrtuvxyz");
    *a4 = v11;
    v12 = (char *)malloc_type_calloc(1uLL, v11 + 1, 0x88B5A70CuLL);
    if (!v12)
    {
      sub_100003B90(a1, "out of memory", v13, v14, v15, v16, v17, v18, v21);
      return 0;
    }
    v8 = v12;
    *a2 = v12;
  }
  if (!strchr(v8, __c))
  {
    v19 = *a3;
    if (*a3 >= *a4)
      sub_1000358F4();
    *a3 = v19 + 1;
    v8[v19] = __c;
  }
  return 1;
}

uint64_t sub_100005C5C(uint64_t a1, void **a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  void *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v21;

  v9 = *a2;
  v10 = *a3;
  if (*a3 == *a4)
  {
    *a4 = v10 + 8;
    v9 = sub_100003660(v9, v10 + 8, 8uLL);
    if (!v9)
    {
      sub_100003B90(a1, "out of memory", v12, v13, v14, v15, v16, v17, v21);
      return 0;
    }
    *a2 = v9;
    v10 = *a3;
  }
  if (v10)
  {
    v18 = v9;
    v19 = v10;
    while (*v18 != a5)
    {
      ++v18;
      if (!--v19)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (v10 >= *a4)
      sub_10003591C();
    *a3 = v10 + 1;
    *((_QWORD *)v9 + v10) = a5;
  }
  return 1;
}

uint64_t sub_100005D24(uint64_t a1, void **a2, unint64_t *a3, unint64_t *a4, char *__s2)
{
  const char *v6;
  char **v11;
  const char *v12;

  v6 = "address";
  if (!"address")
    return 1;
  v11 = &off_10004CAC0;
  while (strcmp(v6, __s2))
  {
    v12 = v11[4];
    v11 += 4;
    v6 = v12;
    if (!v12)
      return 1;
  }
  return sub_100005C5C(a1, a2, a3, a4, (uint64_t)v11);
}

uint64_t sub_100005DB8(uint64_t a1, const char *a2)
{
  uint64_t v3;
  char *v5;
  char *__filename;

  v3 = *(_QWORD *)(a1 + 200);
  __filename = 0;
  if (!sub_100016754(*(uint64_t **)(v3 + 1128), a2, "log file"))
    return 1;
  if (sub_100016A88(*(_QWORD *)(v3 + 1128), a2, "log file", &__filename))
    sub_1000359EC();
  if (!__filename || !*__filename || sub_100005464(__filename, 0))
    return 1;
  sub_10001BDD0(0);
  v5 = 0;
  if (sub_100016A88(*(_QWORD *)(v3 + 1128), a2, "syslog facility", &v5))
    sub_1000359C4();
  if (!sub_10001BD5C(v5))
    return 1;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035944();
  }
  sub_10001C094("%s: 'syslog facility' does not exist: %s", a2, v5);
  return 0;
}

uint64_t sub_100005ECC(uint64_t a1, const char *a2)
{
  const char *v3;

  setenv("RSYNC_MODULE_NAME", a2, 1);
  setenv("RSYNC_MODULE_PATH", *(const char **)(a1 + 1120), 1);
  setenv("RSYNC_HOST_ADDR", (const char *)(a1 + 1041), 1);
  setenv("RSYNC_HOST_NAME", (const char *)(a1 + 16), 1);
  if (*(_QWORD *)(a1 + 1096))
    v3 = *(const char **)(a1 + 1096);
  else
    v3 = &byte_1000437D5;
  return setenv("RSYNC_USER_NAME", v3, 1);
}

uint64_t sub_100005F54(const char *a1, uint64_t a2)
{
  uint64_t result;
  char __str[32];

  result = snprintf(__str, 0x20uLL, "%ld", a2);
  if (result <= 0x1F)
    return setenv(a1, __str, 1);
  return result;
}

void *sub_100005FD4(int a1, size_t *a2)
{
  int v4;
  void *v6;
  void *v7;
  size_t size;

  v4 = fcntl(a1, 3);
  if (v4 != -1 && (v4 & 4) != 0)
    fcntl(a1, 4, v4 & 0xFFFFFFFB);
  size = 0;
  if (!sub_100006090(a1, (uint64_t)&size, 8uLL)
    || (v6 = malloc_type_malloc(size, 0x71D99128uLL)) == 0
    || (v7 = v6, !sub_100006090(a1, (uint64_t)v6, size)))
  {
    _exit(1);
  }
  close(a1);
  *a2 = size;
  return v7;
}

uint64_t sub_100006090(int a1, uint64_t a2, size_t a3)
{
  size_t v3;
  uint64_t v6;
  ssize_t v7;

  if (!a3)
    return 1;
  v3 = a3;
  v6 = 0;
  while (1)
  {
    v7 = read(a1, (void *)(a2 + v6), v3);
    if (v7 <= 0)
      break;
LABEL_4:
    v6 += v7;
    v3 -= v7;
    if (!v3)
      return 1;
  }
  while (v7 == -1 && (*__error() == 4 || *__error() == 35))
  {
    v7 = read(a1, (void *)(a2 + v6), v3);
    if (v7 >= 1)
      goto LABEL_4;
  }
  return 0;
}

uint64_t sub_10000615C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  uint64_t v28;
  char **v29;
  unsigned int v30;
  char *v31;
  int v32;
  NSObject *v33;
  _BOOL4 v34;
  char *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint8_t buf[4];
  _BYTE v62[10];
  _BYTE v63[6];
  unsigned int v64;

  v43 = 0;
  v42 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v44 = a2;
  LODWORD(v45) = 1;
  DWORD2(v45) = 29;
  HIDWORD(v60) = 29;
  DWORD1(v56) = -1;
  sub_10002B5D8(a1, (uint64_t)&v44);
  sub_10002B410((uint64_t)a1);
  v6 = open(*(const char **)(v44 + 520), 0);
  if ((_DWORD)v6 != -1)
  {
    v14 = v6;
    if (sub_10001AF44(&v44, v6, &v42))
    {
      if (sub_10001AF44(&v44, v14, (char *)&v42 + 4))
      {
        if (sub_10001AF44(&v44, v14, &v43))
        {
          v21 = HIDWORD(v42);
          if (SHIDWORD(v42) <= 26)
          {
            if (dword_100050EE8)
            {
              v22 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)v62 = v21;
                *(_WORD *)&v62[4] = 1024;
                *(_DWORD *)&v62[6] = 27;
                _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "batch protocol %d is older than our minimum supported %d: exiting", buf, 0xEu);
              }
            }
            sub_10001BF64("batch protocol %d is older than our minimum supported %d: exiting");
LABEL_29:
            v24 = 14;
            goto LABEL_30;
          }
          v25 = DWORD2(v45);
          if (SHIDWORD(v42) > SDWORD2(v45))
          {
            if (dword_100050EE8)
            {
              v26 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)v62 = v21;
                *(_WORD *)&v62[4] = 1024;
                *(_DWORD *)&v62[6] = v25;
                _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "batch protocol %d is newer than our maximum supported %d: exiting", buf, 0xEu);
              }
            }
            sub_10001BF64("batch protocol %d is newer than our maximum supported %d: exiting");
            goto LABEL_29;
          }
          v41 = a3;
          v28 = 0;
          v29 = &off_10004C688;
          while (v28 != 7 || SHIDWORD(v60) >= 29)
          {
            v30 = (v42 >> v28) & 1;
            v31 = v29[1];
            v32 = *(_DWORD *)&v31[a2];
            if (v32 != v30)
            {
              if (dword_100050EE8)
              {
                v33 = qword_100050EF8;
                v34 = os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT);
                v35 = *v29;
                if (v34)
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)v62 = v35;
                  *(_WORD *)&v62[8] = 1024;
                  *(_DWORD *)v63 = v32;
                  *(_WORD *)&v63[4] = 1024;
                  v64 = v30;
                  _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Mismatch of %s option, changing from %d -> %d", buf, 0x18u);
                }
              }
              else
              {
                v35 = *v29;
              }
              sub_10001BE54(0, "Mismatch of %s option, changing from %d -> %d", v15, v16, v17, v18, v19, v20, (char)v35);
            }
            *(_DWORD *)&v31[a2] = v30;
            ++v28;
            v29 += 3;
            if (v28 == 8)
            {
              if (SHIDWORD(v60) > 28)
                goto LABEL_49;
              break;
            }
          }
          if (*(_DWORD *)(a2 + 32))
          {
            v36 = 1;
          }
          else
          {
            if (*(_DWORD *)(a2 + 192) != 1)
            {
LABEL_49:
              v37 = HIDWORD(v42);
              HIDWORD(v45) = HIDWORD(v42);
              v38 = DWORD2(v45);
              if (SHIDWORD(v42) < SDWORD2(v45))
                HIDWORD(v60) = HIDWORD(v42);
              v39 = v43;
              DWORD1(v45) = v43;
              if (dword_100050EE8)
              {
                v40 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)v62 = v38;
                  *(_WORD *)&v62[4] = 1024;
                  *(_DWORD *)&v62[6] = v37;
                  *(_WORD *)v63 = 1024;
                  *(_DWORD *)&v63[2] = v39;
                  _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "batch detected client version %d, batch version %d, seed %d\n", buf, 0x14u);
                  LOBYTE(v38) = BYTE8(v45);
                }
              }
              sub_10001BE54(1, "batch detected client version %d, batch version %d, seed %d\n", v15, v16, v17, v18, v19, v20, v38);
              if (sub_1000232D0((uint64_t)&v44, (uint64_t)a1, v14, v14, *(char **)(v41 + 32)))
              {
                v24 = 0;
                goto LABEL_30;
              }
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_1000351EC();
              sub_10001C094("rsync_receiver");
              goto LABEL_29;
            }
            v36 = 0;
          }
          *(_DWORD *)(a2 + 192) = v36;
          goto LABEL_49;
        }
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
LABEL_23:
          sub_10001C094("io_read_int");
          v24 = 2;
LABEL_30:
          close(v14);
          return v24;
        }
      }
      else if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_23;
      }
    }
    else if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_23;
    }
    sub_100035198();
    goto LABEL_23;
  }
  if (dword_100050EE8)
  {
    v23 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035A14((uint64_t)&v44, v23, v8, v9, v10, v11, v12, v13);
  }
  sub_10001BFE8("%s: open", v7, v8, v9, v10, v11, v12, v13, *(_QWORD *)(v44 + 520));
  return 14;
}

uint64_t sub_100006750(_DWORD *a1)
{
  const char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  NSObject *v20;

  v2 = *(const char **)(*(_QWORD *)a1 + 528);
  if (!v2)
    sub_100035A80();
  if (a1[47] != -1)
    sub_100035B14();
  v3 = open(v2, 1537, 384);
  if (v3 != -1)
  {
    v11 = v3;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = &qword_10004C690;
    while (1)
    {
      if (v14 == 7)
      {
        v16 = a1[65];
        if (v16 < 29)
          break;
      }
      v17 = *v15;
      v15 += 3;
      if (*(_DWORD *)(v17 + *(_QWORD *)a1))
      {
        v12 = (1 << v14) | v13;
        v13 = v12;
      }
      if (++v14 == 8)
      {
        v16 = a1[65];
        break;
      }
    }
    v18 = a1[3];
    if (sub_10001A850((uint64_t)a1, v3, v12))
    {
      if (sub_10001A850((uint64_t)a1, v11, v16))
      {
        if (sub_10001A850((uint64_t)a1, v11, v18))
        {
          result = 0;
          a1[47] = v11;
          return result;
        }
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
      }
      else if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_28;
      }
    }
    else if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_28;
    }
    sub_10003516C();
LABEL_28:
    sub_10001C094("io_write_int");
    close(v11);
    return 2;
  }
  if (dword_100050EE8)
  {
    v20 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035AA8((uint64_t)a1, v20, v5, v6, v7, v8, v9, v10);
  }
  sub_10001BFE8("%s: open", v4, v5, v6, v7, v8, v9, v10, *(_QWORD *)(*(_QWORD *)a1 + 528));
  return 14;
}

void sub_100006978(_DWORD *a1, uint64_t a2, int a3)
{
  int v4;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const char **v11;
  FILE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  FILE *v20;
  _QWORD *v21;
  const char *v22;
  const char *v24;
  size_t v25;
  NSObject *v26;
  const char *v27;
  const char **v28;
  const char *v29;
  char __str[1024];
  uint8_t buf[16];
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v4 = a1[47];
  if (v4 != -1)
  {
    close(v4);
    a1[47] = -1;
    if (!a3)
    {
      if (snprintf(__str, 0x400uLL, "%s.sh", *(const char **)(*(_QWORD *)a1 + 528)) < 1024)
      {
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)buf = 0u;
        v9 = *(_QWORD *)(a2 + 32);
        v34 = 0;
        *(_QWORD *)&v33 = v9;
        v10 = (_QWORD *)sub_10000E934(a1, (uint64_t)buf, 0);
        v11 = (const char **)sub_1000263A0((uint64_t)a1);
        v12 = fopen(__str, "w");
        if (v12)
        {
          v20 = v12;
          fwrite("#!/bin/sh\n\n", 0xBuLL, 1uLL, v12);
          if (v10[1])
          {
            v21 = v10 + 2;
            do
            {
              v22 = (const char *)*(v21 - 2);
              if (!strcmp(v22, "."))
                break;
              if (strcmp(v22, "--server"))
              {
                if (!strncmp(v22, "--only-write-batch", 0x12uLL))
                  fprintf(v20, "--read-batch=%s ");
                else
                  fprintf(v20, "%s ");
              }
            }
            while (*v21++);
          }
          free(v10);
          if (*v11)
          {
            if ((int)a1[65] <= 28)
            {
              v24 = "--exclude-from=- ";
              v25 = 17;
            }
            else
            {
              v24 = "--filter=\". -\"";
              v25 = 14;
            }
            fwrite(v24, v25, 1uLL, v20);
          }
          fprintf(v20, "${1-%s}", (const char *)v33);
          if (*v11)
          {
            fwrite(" <<@REOF@\n", 0xAuLL, 1uLL, v20);
            v27 = *v11;
            if (*v11)
            {
              v28 = v11 + 1;
              do
              {
                fprintf(v20, "%s\n", v27);
                v29 = *v28++;
                v27 = v29;
              }
              while (v29);
            }
            fwrite("@REOF@", 6uLL, 1uLL, v20);
          }
          free(v11);
          fputc(10, v20);
          fclose(v20);
        }
        else
        {
          if (dword_100050EE8)
          {
            v26 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100035B3C((uint64_t)__str, v26, v14, v15, v16, v17, v18, v19);
          }
          sub_10001BFE8("%s: fopen", v13, v14, v15, v16, v17, v18, v19, (char)__str);
        }
      }
      else
      {
        if (dword_100050EE8)
        {
          v7 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
          {
            v8 = *(_QWORD *)(*(_QWORD *)a1 + 528);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v8;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s.sh: path too long, did not write batch shell", buf, 0xCu);
          }
        }
        sub_10001C130("%s.sh: path too long, did not write batch shell", *(const char **)(*(_QWORD *)a1 + 528));
      }
    }
  }
}

uint64_t sub_100006CE8(int a1, char *const *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  char **v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  FILE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  FILE *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  pid_t v53;
  NSObject *v54;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  char *__filename;
  char *__s1;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  socklen_t v79[2];
  sockaddr v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[1104];
  char *v89;
  uint64_t v91;
  char *v92;
  FILE *v93;
  int v94;
  int v95;

  __s1 = 0;
  v61 = 0;
  bzero(v88, 0x4B8uLL);
  bzero((void *)a3, 0x260uLL);
  __filename = 0;
  v6 = 0;
  v75 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = a3;
  *(_QWORD *)&v75 = v88;
  v89 = "/etc/rsyncd.conf";
  v7 = 1;
  v95 = -1;
  v58 = (_QWORD *)(a3 + 464);
  v57 = (_QWORD *)(a3 + 256);
  v56 = (_QWORD *)(a3 + 264);
  v94 = -1;
  optreset = 1;
  optind = 1;
  while (1)
  {
    v8 = v7;
    v9 = v6;
    v10 = getopt_long(a1, a2, "46hv", (const option *)&off_10004C748, 0);
    if (v10 > 103)
    {
      v7 = 0;
      v6 = v9;
      switch(v10)
      {
        case 118:
          ++dword_100050EEC;
          goto LABEL_20;
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 135:
          goto LABEL_73;
        case 128:
          v6 = 1;
          v7 = v8;
          if ((_DWORD)v9)
            sub_100035D54();
          continue;
        case 129:
          continue;
        case 130:
          v12 = optarg;
          v13 = (char **)(a3 + 264);
          goto LABEL_15;
        case 131:
          if (sub_10001F198(optarg, &v61, 107) == -1)
            sub_100035D3C();
          *(_QWORD *)(a3 + 472) = v61;
          goto LABEL_20;
        case 132:
          v89 = optarg;
          goto LABEL_20;
        case 133:
          v12 = optarg;
          v13 = (char **)(a3 + 256);
          goto LABEL_15;
        case 134:
          __filename = optarg;
          goto LABEL_20;
        case 136:
          v12 = optarg;
          v13 = (char **)(a3 + 464);
LABEL_15:
          *v13 = v12;
          goto LABEL_20;
        default:
          if (v10 == 104)
            sub_100007340(0);
          goto LABEL_73;
      }
    }
    if (v10 == 52)
    {
      v11 = 4;
      goto LABEL_9;
    }
    if (v10 != 54)
      break;
    v11 = 6;
LABEL_9:
    *(_DWORD *)(a3 + 560) = v11;
LABEL_20:
    v6 = v9;
    v7 = v8;
  }
  if (v10 != -1)
LABEL_73:
    sub_100007340(1);
  if (!sub_100005464(__filename, 1))
    return 14;
  dword_100050F00 = -1;
  v14 = sub_10002E000(0);
  if (!v14)
  {
    if ((_DWORD)v8)
    {
      v15 = sub_100003598(0, 0);
      if ((_DWORD)v15 == -1)
        sub_100035BA0(v15);
    }
  }
  v16 = sub_100015EA4((uint64_t)&v62, v89, 0);
  v91 = v16;
  if (!v16)
    return 14;
  if (v14)
    goto LABEL_28;
  *(_QWORD *)&v81 = 0x300000000;
  v80 = (sockaddr)xmmword_10003D1D8;
  *(_QWORD *)v79 = 0;
  v18 = v75;
  if (sub_100016A88(v16, "global", "pid file", v79))
  {
    v19 = &byte_1000437D5;
    *(_QWORD *)v79 = &byte_1000437D5;
  }
  else
  {
    v19 = *(char **)v79;
  }
  if (!*v19)
    goto LABEL_28;
  v28 = fopen(v19, "w");
  if (!v28)
  {
    if (dword_100050EE8)
    {
      v52 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035C04((uint64_t)v79, v52, v30, v31, v32, v33, v34, v35);
    }
    sub_10001BFE8("%s: fopen", v29, v30, v31, v32, v33, v34, v35, v79[0]);
    return 14;
  }
  v36 = v28;
  v37 = fileno(v28);
  if (fcntl(v37, 8, &v80))
  {
    fclose(v36);
    if (*__error() == 35)
    {
      if (dword_100050EE8)
      {
        v45 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100035C6C((uint64_t)v79, v45, v46, v47, v48, v49, v50, v51);
      }
      sub_10001BF64("%s: failed to obtain lock (is another rsyncd running?)", *(const char **)v79);
    }
    else
    {
      if (dword_100050EE8)
      {
        v54 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100035CD4((uint64_t)v79, v54, v39, v40, v41, v42, v43, v44);
      }
      sub_10001BFE8("%s: acquiring lock", v38, v39, v40, v41, v42, v43, v44, v79[0]);
    }
    return 14;
  }
  v53 = getpid();
  fprintf(v36, "%d\n", v53);
  fflush(v36);
  *(_QWORD *)(v18 + 1136) = *(_QWORD *)v79;
  *(_QWORD *)(v18 + 1144) = v36;
LABEL_28:
  if (!*v56)
  {
    if (sub_100016A88(v91, "global", "address", v56) == -1)
    {
      if (*__error() == 2)
        sub_100035BB4();
    }
    else if (!*(_BYTE *)*v56)
    {
      *v56 = 0;
    }
  }
  if (!*v57 && sub_100016A88(v91, "global", "port", v57))
    *v57 = &byte_1000437D5;
  if (sub_100016A88(v91, "global", "motd file", &__s1))
  {
    v17 = &byte_1000437D5;
    __s1 = &byte_1000437D5;
  }
  else
  {
    v17 = __s1;
  }
  if (!strdup(v17))
    sub_100035BDC(0);
  if (!*v58 && sub_100016A88(v91, "global", "socket options", v58))
    *v58 = &byte_1000437D5;
  if (v14)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = (sockaddr)0;
    v81 = 0u;
    v79[0] = 128;
    v26 = getpeername(0, &v80, v79);
    if ((_DWORD)v26 == -1)
      sub_100035BF0(v26);
    return sub_100007390((uint64_t)&v62, 0, &v80, v79[0]);
  }
  else
  {
    sub_10001BE54(-1, "openrsync listening on port '%s'", v20, v21, v22, v23, v24, v25, *v57);
    v27 = sub_10002C3D0(&v62, (uint64_t (*)(uint64_t *, uint64_t, char **, _QWORD))sub_100007390);
    if (v93)
    {
      unlink(v92);
      fclose(v93);
    }
  }
  return v27;
}

void sub_100007340(int a1)
{
  FILE **v2;
  FILE *v3;
  const char *v4;

  v2 = &__stdoutp;
  if (a1)
    v2 = &__stderrp;
  v3 = *v2;
  v4 = getprogname();
  fprintf(v3, "usage: %s --daemon [-46hv] [--address=bindaddr] [--bwlimit=limit] [--no-detach]\n\t[--log-file=logfile] [--port=portnumber] [--sockopts=sockopts]\n", v4);
  exit(a1);
}

uint64_t sub_100007390(uint64_t a1, uint64_t a2, const sockaddr *a3, socklen_t a4)
{
  uint64_t v4;
  char *v9;
  FILE *v10;
  int sa_family;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v38;
  const char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  void *v43;
  void **v44;
  void *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  FILE *v55;
  FILE *v56;
  ssize_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char **v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char **v112;
  size_t v113;
  int v114;
  uint64_t v115;
  void **v116;
  void *v117;
  const char *v118;
  uint32_t v119;
  char v120;
  _BYTE *v121;
  socklen_t v122;
  unsigned int v123;
  int v124;
  int v125;
  void *v126;
  uint64_t v127;
  size_t __linecapp;
  _BYTE __str[1020];

  v125 = 0;
  v126 = 0;
  v123 = -1;
  v4 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(v4 + 1152) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 1172) = a2;
  if (*(_DWORD *)(v4 + 1160) != -1)
    sub_100035E14();
  v9 = *(char **)(v4 + 1112);
  *(_QWORD *)(v4 + 1112) = 0;
  v10 = *(FILE **)(v4 + 1144);
  if (v10)
    fclose(v10);
  sub_100015E54(*(_QWORD *)(v4 + 1128));
  *(_QWORD *)(v4 + 1128) = 0;
  sub_10002CB30(a2, "SO_KEEPALIVE");
  sub_10002CB30(a2, *(_QWORD *)(*(_QWORD *)a1 + 464));
  sa_family = a3->sa_family;
  if (sa_family != 2 && sa_family != 30)
    sub_100035D6C();
  v124 = 0;
  v12 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(v12 + 1088) = a3;
  if (sa_family == 2)
    v13 = &a3->sa_data[2];
  else
    v13 = &a3->sa_data[6];
  if (!inet_ntop(sa_family, v13, (char *)(v12 + 1041), 0x2Eu))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035D94();
    sub_10001BFE8("inet_ntop", v14, v15, v16, v17, v18, v19, v20, v120);
    return 14;
  }
  *(_DWORD *)(a1 + 260) = 29;
  *(_DWORD *)(a1 + 16) = 29;
  sub_10002B450((uint64_t)off_1000506D8);
  LOBYTE(v121) = 0;
  v21 = fcntl(a2, 3);
  if (v21 == -1 || (LOBYTE(v121) = v21 | 4, fcntl(a2, 4) == -1))
  {
    sub_100003B90(a1, "failed to set non-blocking", v22, v23, v24, v25, v26, v27, (char)v121);
    return 14;
  }
  v28 = sub_100015EA4(a1, *(const char **)(v4 + 1104), 1);
  *(_QWORD *)(v4 + 1128) = v28;
  if (!v28)
    return 14;
  v122 = a4;
  v29 = 0;
  *(_DWORD *)(a1 + 20) = -1;
  v30 = 1;
  while (1)
  {
    __linecapp = 1024;
    if (!sub_10001A3D4(a1, a2, (uint64_t)__str, (uint64_t *)&__linecapp) || !(__linecapp | v29))
    {
      sub_100003B90(a1, "protocol violation: expected version and module information", v31, v32, v33, v34, v35, v36, (char)v121);
LABEL_39:
      v40 = 0;
      goto LABEL_40;
    }
    if (__linecapp == 1024)
    {
      v38 = "line buffer overrun";
LABEL_37:
      sub_100003B90(a1, v38, v31, v32, v33, v34, v35, v36, (char)v121);
LABEL_38:
      *__error() = 22;
      goto LABEL_39;
    }
    if ((v30 & 1) == 0)
      break;
    v127 = 0;
    if (*(_QWORD *)__str != 0x3A44434E59535240 || __str[8] != 32)
    {
      sub_100003B90(a1, "protocol violation: expected version line, got '%s'", v31, v32, v33, v34, v35, v36, (char)__str);
      goto LABEL_38;
    }
    if (sscanf(&__str[9], "%d.%d", (char *)&v127 + 4, &v127) != 2 && sscanf(&__str[9], "%d", (char *)&v127 + 4) != 1)
    {
      v121 = &__str[9];
      v38 = "protocol violation: malformed version line, got '%s'";
      goto LABEL_37;
    }
    *(_DWORD *)(a1 + 20) = HIDWORD(v127);
    snprintf(__str, 0x400uLL, "@RSYNCD: %d", *(_DWORD *)(a1 + 16));
    v30 = 0;
    v29 = 1;
    if (!sub_10001A078(a1, a2, __str))
      goto LABEL_39;
  }
  if (__linecapp)
    v39 = __str;
  else
    v39 = "#list";
  v40 = strdup(v39);
  if (!v40)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035654();
    sub_10001BFE8("strdup", v47, v48, v49, v50, v51, v52, v53, (char)v121);
    goto LABEL_39;
  }
  v54 = *(_DWORD *)(a1 + 20);
  if (v54 <= 26)
  {
    sub_100003B90(a1, "could not negotiate a protocol; client requested %d (supported range: %d to %d)",
      v48,
      v49,
      v50,
      v51,
      v52,
      v53,
      v54);
    goto LABEL_40;
  }
  if (v54 < *(_DWORD *)(a1 + 16))
    *(_DWORD *)(a1 + 260) = v54;
  if (*v9)
  {
    __linecapp = 0;
    *(_QWORD *)__str = 0;
    v55 = fopen(v9, "r");
    if (v55)
    {
      v56 = v55;
      while (1)
      {
        v57 = getline((char **)__str, &__linecapp, v56);
        if (v57 < 1)
          break;
        if (!sub_10001A070(a1, a2, *(char **)__str, v57))
        {
          fclose(v56);
          free(*(void **)__str);
          free(v9);
          goto LABEL_40;
        }
      }
      fclose(v56);
      free(*(void **)__str);
    }
  }
  free(v9);
  if (*v40 == 35)
  {
    if (strcmp(v40 + 1, "list"))
    {
      sub_100003B90(a1, "%s is not a known command", v58, v59, v60, v61, v62, v63, (char)v40);
      goto LABEL_40;
    }
    if (!sub_1000166C4(*(_QWORD **)(*(_QWORD *)(a1 + 200) + 1128), (uint64_t (*)(_QWORD *, const char *, uint64_t))sub_100008918, a1))goto LABEL_40;
    if (sub_10001A078(a1, a2, "@RSYNCD: EXIT"))
    {
      v112 = 0;
      LODWORD(v113) = 0;
      goto LABEL_110;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035DC0();
    v118 = "io_write_line";
LABEL_123:
    sub_10001BFE8(v118, v105, v106, v107, v108, v109, v110, v111, (char)v121);
    goto LABEL_40;
  }
  if (!sub_10001667C(*(uint64_t ***)(v4 + 1128), v40))
  {
    LOBYTE(v121) = (_BYTE)v40;
    v104 = "%s is not a valid module";
    goto LABEL_117;
  }
  if (!sub_100004EFC(a1, v40, a3, v122)
    || !sub_1000041F4(a1, v40)
    || sub_1000046A8(a1, v40))
  {
    goto LABEL_40;
  }
  if (!sub_100008034(a1, v40, (uint64_t)&v123))
  {
    sub_100003B90(a1, "%s: authentication failed", v70, v71, v72, v73, v74, v75, (char)v40);
    goto LABEL_40;
  }
  if (sub_100016858(*(uint64_t **)(v4 + 1128), v40, "use chroot", &v124))
  {
    if (dword_100050EE8)
    {
      v82 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(_QWORD *)&__str[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "%s: 'use chroot' malformed", __str, 0xCu);
      }
    }
    sub_10001C250(0, "%s: 'use chroot' malformed", v76, v77, v78, v79, v80, v81, (char)v40);
  }
  else if (v124 && !sub_100016754(*(uint64_t **)(v4 + 1128), v40, "use chroot"))
  {
    v124 = 2;
  }
  if (sub_100016A88(*(_QWORD *)(v4 + 1128), v40, "path", v4 + 1120))
    sub_100035DEC();
  if (!sub_1000040BC(a1, v40)
    || !sub_100005DB8(a1, v40)
    || !sub_10000492C(a1, v40))
  {
    goto LABEL_40;
  }
  if (sub_100016754(*(uint64_t **)(v4 + 1128), v40, "dont compress"))
  {
    if (dword_100050EE8)
    {
      v83 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(_QWORD *)&__str[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "%s: 'dont compress' is present but not honored", __str, 0xCu);
      }
    }
    sub_10001C1CC("%s: 'dont compress' is present but not honored", v40);
  }
  if (!sub_100003E88(a1, (uint64_t)v40))
    goto LABEL_40;
  chdir(*(const char **)(v4 + 1120));
  if (v124 && chroot(".") == -1)
  {
    if (*__error() != 1 || v124 == 1)
      goto LABEL_40;
    if (dword_100050EE8)
    {
      v90 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(_QWORD *)&__str[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_INFO, "%s: attempt to chroot failed, falling back to 'no' since it is not explicitly set", __str, 0xCu);
      }
    }
    sub_10001C250(0, "%s: attempt to chroot failed, falling back to 'no' since it is not explicitly set", v84, v85, v86, v87, v88, v89, (char)v40);
    v124 = 0;
  }
  *(_BYTE *)(v4 + 1176) = 1;
  if (!sub_100004020(a1, (char)v40))
    goto LABEL_40;
  if (!sub_10001A078(a1, a2, "@RSYNCD: OK"))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035DC0();
    sub_10001C094("io_write_line");
    goto LABEL_40;
  }
  if ((sub_1000083C4(a1, v40, a2, &v125, &v126) & 0x80000000) != 0)
    goto LABEL_40;
  dword_100050F00 = 0;
  if (sub_100016A28(*(uint64_t **)(v4 + 1128), v40, "timeout", &dword_100050F00))
  {
    if (dword_100050EE8)
    {
      v97 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__str = 136315138;
        *(_QWORD *)&__str[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "%s: bad value for 'timeout'", __str, 0xCu);
      }
    }
    sub_10001C250(0, "%s: bad value for 'timeout'", v91, v92, v93, v94, v95, v96, (char)v40);
  }
  if (!sub_100005688(a1, v40)
    || (optreset = 1,
        optind = 1,
        v98 = v125,
        v99 = (char *)v126,
        (v100 = sub_10001F55C(v125, v126, sub_100008840, a1)) == 0))
  {
LABEL_40:
    free(v40);
    sub_100015E54(*(_QWORD *)(v4 + 1128));
    *(_QWORD *)(v4 + 1128) = 0;
    v41 = *(_DWORD *)(v4 + 1160);
    if (v41 != -1)
    {
      close(v41);
      *(_DWORD *)(v4 + 1160) = -1;
    }
    close(*(_DWORD *)(v4 + 1152));
    free(*(void **)(v4 + 1096));
    v42 = v125;
    v43 = v126;
    if (v125 >= 1)
    {
      v44 = (void **)v126;
      do
      {
        v45 = *v44++;
        free(v45);
        --v42;
      }
      while (v42);
    }
    free(v43);
    return 14;
  }
  v101 = v100;
  v102 = v98 - (uint64_t)optind;
  v125 = v102;
  v103 = (const char **)&v99[8 * optind];
  v126 = v103;
  if (strcmp(*v103, "."))
  {
    v104 = "protocol violation: expected hard stop before file list";
LABEL_117:
    sub_100003B90(a1, v104, v64, v65, v66, v67, v68, v69, (char)v121);
    goto LABEL_40;
  }
  v113 = v102 - 1;
  v125 = v113;
  v112 = (char **)(v103 + 1);
  v126 = v112;
  if (!sub_1000052C0(a1, v40))
    goto LABEL_40;
  v119 = *(_DWORD *)(v101 + 20);
  if (!v119)
    v119 = arc4random();
  *(_DWORD *)(a1 + 12) = v119;
  if (!sub_10001A850(a1, a2, v119))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003516C();
    v118 = "io_write_int";
    goto LABEL_123;
  }
  *(_DWORD *)(a1 + 144) = 1;
  if (!sub_100005510(a1, (_DWORD *)v101, v40, v123, v108, v109, v110, v111))
    goto LABEL_40;
  if (*(_QWORD *)(v101 + 504))
    sub_10000540C(v40, 1, (char **)(v101 + 504));
  if (!sub_100003AC4(a1, v40, v101)
    || !sub_100003D00(a1, v40, v101, v124)
    || !sub_100003DF0(a1, v40, v101)
    || !sub_100004FE4(a1, v40, v124))
  {
    goto LABEL_40;
  }
  if ((*(_DWORD *)(v101 + 512) & 0x80000000) != 0)
    *(_DWORD *)(v101 + 512) = 0;
  *(_QWORD *)a1 = v101;
  sub_10002B5D8(off_1000506D8, a1);
  sub_10002B410((uint64_t)off_1000506D8);
  if (**(_DWORD **)a1)
  {
    if (!sub_100026A9C(a1, a2, a2, v113, (const char **)v112))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003526C();
      v118 = "rsync_sender";
      goto LABEL_123;
    }
  }
  else if (!sub_1000232D0(a1, (uint64_t)off_1000506D8, a2, a2, *v112))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000351EC();
    v118 = "rsync_receiver";
    goto LABEL_123;
  }
LABEL_110:
  v114 = *(_DWORD *)(v4 + 1160);
  if (v114 != -1)
  {
    close(v114);
    *(_DWORD *)(v4 + 1160) = -1;
  }
  close(*(_DWORD *)(v4 + 1152));
  free(*(void **)(v4 + 1096));
  if ((int)v113 >= 1)
  {
    v115 = v113;
    v116 = (void **)v112;
    do
    {
      v117 = *v116++;
      free(v117);
      --v115;
    }
    while (v115);
  }
  free(v112);
  return 0;
}

uint64_t sub_100008034(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  FILE *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  char *__s1;
  char *__filename;
  _OWORD v75[4];
  char v76;
  char __buf[2048];
  _OWORD v78[4];

  v6 = *(_QWORD *)(a1 + 200);
  if (!sub_100016754(*(uint64_t **)(v6 + 1128), a2, "auth users"))
    return 1;
  if (!sub_100016754(*(uint64_t **)(v6 + 1128), a2, "secrets file"))
    goto LABEL_8;
  __s1 = 0;
  __filename = 0;
  v72 = 0;
  if (sub_100016A88(*(_QWORD *)(v6 + 1128), a2, "secrets file", &__filename))
    sub_100035E90();
  if (!*__filename)
  {
LABEL_8:
    sub_100003B90(a1, "%s: missing secrets file", v7, v8, v9, v10, v11, v12, (char)a2);
    return 0;
  }
  if (sub_100016A88(*(_QWORD *)(v6 + 1128), a2, "auth users", &__s1))
    sub_100035E68();
  if (sub_100016858(*(uint64_t **)(v6 + 1128), a2, "strict modes", &v72))
  {
    sub_100003B90(a1, "%s: 'strict modes' invalid", v13, v14, v15, v16, v17, v18, (char)a2);
    return 0;
  }
  v20 = fopen(__filename, "r");
  if (!v20)
  {
    sub_100003B90(a1, "%s: could not open secrets file", v21, v22, v23, v24, v25, v26, (char)a2);
    return 0;
  }
  v27 = v20;
  if (v72)
  {
    v28 = __filename;
    v29 = fileno(v20);
    if (!sub_100021BBC((uint64_t)v28, v29))
    {
      fclose(v27);
      sub_100003B90(a1, "%s: bad permissions on secrets file", v44, v45, v46, v47, v48, v49, (char)a2);
      return 0;
    }
  }
  arc4random_buf(__buf, 0x80uLL);
  res_9_b64_ntop((const u_char *)__buf, 0x80uLL, (char *)v78, 0x44uLL);
  v75[0] = v78[0];
  v75[1] = v78[1];
  v75[2] = v78[2];
  v75[3] = v78[3];
  v76 = 10;
  if (!sub_10001A070(a1, *(_DWORD *)(v6 + 1172), "@RSYNCD: AUTHREQD ", 0x12uLL))
  {
    fclose(v27);
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035E3C();
    v43 = "io_write_buf";
    goto LABEL_28;
  }
  if (!sub_10001A070(a1, *(_DWORD *)(v6 + 1172), (char *)v75, 0x41uLL))
  {
    fclose(v27);
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035DC0();
    }
    v43 = "io_write_line";
LABEL_28:
    sub_10001BFE8(v43, v36, v37, v38, v39, v40, v41, v42, v71);
    return 0;
  }
  v76 = 0;
  *(_QWORD *)&v78[0] = 2048;
  if (!sub_10001A3D4(a1, *(_DWORD *)(v6 + 1172), (uint64_t)__buf, (uint64_t *)v78))
  {
    fclose(v27);
    sub_100003B90(a1, "%s: expected auth response", v50, v51, v52, v53, v54, v55, (char)a2);
    return 0;
  }
  if (*(_QWORD *)&v78[0] == 2048)
  {
    fclose(v27);
    sub_100003B90(a1, "%s: line buffer overflow on auth", v30, v31, v32, v33, v34, v35, (char)a2);
    return 0;
  }
  v56 = strchr(__buf, 32);
  if (!v56)
  {
    fclose(v27);
    sub_100003B90(a1, "%s: malformed auth response", v65, v66, v67, v68, v69, v70, (char)a2);
    return 0;
  }
  *v56 = 0;
  v57 = sub_100008B20(a1, (char)a2, __s1, v27, __buf, (const char *)v75, v56 + 1, a3);
  fclose(v27);
  if (!v57)
    return 0;
  v58 = strdup(__buf);
  *(_QWORD *)(v6 + 1096) = v58;
  if (!v58)
  {
    sub_100003B90(a1, "%s: out of memory", v59, v60, v61, v62, v63, v64, (char)a2);
    return 0;
  }
  return 1;
}

uint64_t sub_1000083C4(uint64_t a1, char *a2, int a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  const char *v41;
  char *v42;
  unint64_t v43;
  void **v44;
  void *v45;
  uint64_t result;
  char *v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  glob_t v61;
  char __s1[2];

  v10 = *(_QWORD *)(a1 + 200);
  if (*(_DWORD *)(v10 + 1152) == -1)
  {
    v18 = 0;
    v20 = 0;
  }
  else
  {
    v11 = usbuf_new(0, 0, 0, 1);
    if (!v11 || (v18 = v11, (v19 = usbuf_new(0, 0, 0, 1)) == 0))
    {
      sub_100003B90(a1, "daemon out of memory", v12, v13, v14, v15, v16, v17, v56);
      return 0xFFFFFFFFLL;
    }
    v20 = v19;
  }
  v58 = 5;
  v21 = sub_1000036A8(0, 0, 5uLL, 8uLL);
  v60 = v21;
  if (!v21)
  {
    sub_100003B90(a1, "daemon out of memory", v22, v23, v24, v25, v26, v27, v56);
    usbuf_delete(v18);
    usbuf_delete(v20);
    if (!v18)
      goto LABEL_39;
    goto LABEL_38;
  }
  v59 = 1;
  *(_QWORD *)v21 = 0;
  v57 = 1024;
  if (!sub_10001A3D4(a1, a3, (uint64_t)__s1, &v57))
  {
LABEL_34:
    v41 = "protocol violation: expected option line";
LABEL_35:
    sub_100003B90(a1, v41, v28, v29, v30, v31, v32, v33, v56);
    *__error() = 22;
    if (!v18)
      goto LABEL_39;
LABEL_38:
    usbuf_delete(v18);
LABEL_39:
    if (v20)
      usbuf_delete(v20);
    return 0xFFFFFFFFLL;
  }
  v34 = 0;
  while (v57)
  {
    if (v57 == 1024)
    {
      v41 = "line buffer overrun";
      goto LABEL_35;
    }
    if ((v34 & 1) != 0)
    {
      if (v20)
      {
        if (usbuf_len(v20))
          usbuf_putc(v20, 32);
        usbuf_cat(v20, __s1);
      }
      memset(&v61, 0, sizeof(v61));
      sub_100005378(a2, 0, __s1);
      v35 = glob(__s1, 0, 0, &v61);
      if (v35 != -3 && v35)
      {
        fprintf(__stderrp, "returned %d\n", v35);
        sub_100003B90(a1, "glob '%s' failed", v49, v50, v51, v52, v53, v54, (char)__s1);
        if (!v18)
          goto LABEL_44;
LABEL_43:
        usbuf_delete(v18);
LABEL_44:
        if (v20)
          usbuf_delete(v20);
        if (*(_DWORD *)(v10 + 1152) != -1)
          sub_100004CB4(a1, 0, 0, 0);
        v43 = v59;
        v42 = v60;
        if (v59)
        {
          v44 = (void **)v60;
          do
          {
            v45 = *v44++;
            free(v45);
            --v43;
          }
          while (v43);
        }
        free(v42);
        return 0xFFFFFFFFLL;
      }
      if (v61.gl_pathc)
      {
        v39 = 0;
        while (1)
        {
          if (v18)
          {
            usbuf_cat(v18, v61.gl_pathv[v39]);
            usbuf_putc(v18, 0);
          }
          if ((sub_100008F34(a1, &v59, &v60, &v58, v61.gl_pathv[v39], v36, v37, v38) & 1) == 0)
            break;
          if (++v39 >= v61.gl_pathc)
          {
            globfree(&v61);
            goto LABEL_33;
          }
        }
        globfree(&v61);
LABEL_42:
        if (v18)
          goto LABEL_43;
        goto LABEL_44;
      }
      if (v18)
      {
        usbuf_cat(v18, __s1);
        usbuf_putc(v18, 0);
      }
      v40 = sub_100008F34(a1, &v59, &v60, &v58, __s1, v36, v37, v38);
      globfree(&v61);
      if ((v40 & 1) == 0)
        goto LABEL_42;
    }
    else
    {
      if (v18)
      {
        usbuf_cat(v18, __s1);
        usbuf_putc(v18, 0);
      }
      if (!sub_100008F34(a1, &v59, &v60, &v58, __s1, v31, v32, v33))
        goto LABEL_42;
    }
LABEL_33:
    v34 |= *(unsigned __int16 *)__s1 == 46;
    v57 = 1024;
    if (!sub_10001A3D4(a1, a3, (uint64_t)__s1, &v57))
      goto LABEL_34;
  }
  if (*(_DWORD *)(v10 + 1152) != -1)
  {
    if (usbuf_finish(v18))
    {
      v47 = 0;
      v48 = 0;
    }
    else
    {
      v47 = (char *)usbuf_data(v18);
      v48 = usbuf_len(v18);
    }
    if (usbuf_finish(v20))
      v55 = 0;
    else
      v55 = (char *)usbuf_data(v20);
    sub_100004CB4(a1, v55, v47, v48);
    usbuf_delete(v18);
    usbuf_delete(v20);
  }
  result = 0;
  *a4 = v59;
  *a5 = v60;
  return result;
}

uint64_t sub_100008840(uint64_t a1, int __c, const char **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  const char ***v20;
  uint64_t v21;
  char v22;

  v11 = *(_QWORD **)(a1 + 200);
  if (a3 && !strcmp(*a3, "daemon"))
  {
    sub_100003B90(a1, "protection error: --daemon sent as client option", (uint64_t)a3, a4, a5, a6, a7, a8, v22);
    return 0;
  }
  if (__c)
  {
    v12 = (char *)v11[149];
    if (v12)
    {
      if (!strchr(v12, __c))
        return 1;
      sub_100003B90(a1, "option refused: -%c", v13, v14, v15, v16, v17, v18, __c);
      return 0;
    }
  }
  result = 1;
  if (a3)
  {
    v20 = (const char ***)v11[148];
    if (v20)
    {
      v21 = v11[150];
      if (v21)
      {
        while (*v20 != a3)
        {
          ++v20;
          if (!--v21)
            return 1;
        }
        sub_100003B90(a1, "option refused: --%s", (uint64_t)a3, a4, a5, a6, a7, a8, (char)*a3);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100008918(uint64_t *a1, char *a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  char v24;
  int v25;
  const char *v26;
  char *__s;

  v26 = 0;
  __s = 0;
  v25 = 0;
  v6 = *(_DWORD *)(*(_QWORD *)(a3 + 200) + 1172);
  if (sub_100016858(a1, a2, "list", &v25))
  {
    if (dword_100050EE8)
    {
      v7 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035EE0((uint64_t)a2, v7, v8, v9, v10, v11, v12, v13);
    }
    sub_10001BF64("%s: 'list' is not valid", a2);
    return 0;
  }
  if (v25)
  {
    if (sub_100016754(a1, a2, "comment"))
    {
      if (sub_100016A88(a1, a2, "comment", &v26))
        sub_100035EB8();
      if (asprintf(&__s, "%-15s%s", a2, v26) == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100034BD0();
        v23 = "asprintf";
        goto LABEL_25;
      }
      v22 = sub_10001A078(a3, v6, __s);
      free(__s);
      if (!v22)
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_24;
        goto LABEL_23;
      }
    }
    else if (!sub_10001A078(a3, v6, a2))
    {
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
LABEL_23:
      sub_100035DC0();
LABEL_24:
      v23 = "io_write_line";
LABEL_25:
      sub_10001BFE8(v23, v15, v16, v17, v18, v19, v20, v21, v24);
      return 0;
    }
  }
  return 1;
}

uint64_t sub_100008B20(uint64_t a1, char a2, char *__s1, FILE *a4, const char *a5, const char *a6, const char *a7, uint64_t a8)
{
  _DWORD *v10;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  __uint32_t v27;
  char *v28;
  __darwin_ct_rune_t v29;
  char *v30;
  const char *v31;
  group *v32;
  const char **gr_mem;
  const char *v34;
  const char **v35;
  const char *v36;
  uint64_t v37;
  int v38;
  char *v39;
  ssize_t v40;
  ssize_t v41;
  char *v42;
  __darwin_ct_rune_t v43;
  char *v44;
  const char *v45;
  char *v46;
  NSObject *v47;
  char *v48;
  int v50;
  char v51;
  _DWORD *v52;
  char *__s2;
  char *__stringp;
  uint8_t buf;
  char v56[15];
  size_t __linecapp;
  char *__linep;
  char __s1a[256];

  if (*a5 == 35)
  {
    sub_100003B90(a1, "%s: bad username", (uint64_t)__s1, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, a2);
    return 0;
  }
  v10 = (_DWORD *)a8;
  v15 = strdup(__s1);
  __stringp = v15;
  if (!v15)
  {
    sub_100003B90(a1, "%s: out of memory", v16, v17, v18, v19, v20, v21, a2);
    return 0;
  }
  if (*v15 == 44)
    v22 = ",";
  else
    v22 = ", \t";
  v23 = strsep(&__stringp, v22);
  if (!v23)
    goto LABEL_64;
  v24 = v23;
  while (1)
  {
    do
    {
      v25 = v24;
      v26 = *v24;
      if (v26 < 0)
        v27 = __maskrune(*v24, 0x4000uLL);
      else
        v27 = _DefaultRuneLocale.__runetype[v26] & 0x4000;
      ++v24;
    }
    while (v27);
    if (v26)
    {
      v28 = &v25[strlen(v25) - 1];
      while (1)
      {
        v29 = *v28;
        if (v29 < 0)
          break;
        if ((_DefaultRuneLocale.__runetype[v29] & 0x4000) == 0)
          goto LABEL_21;
LABEL_19:
        *v28-- = 0;
        if (v28 <= v25)
          sub_100035F80();
      }
      if (__maskrune(v29, 0x4000uLL))
        goto LABEL_19;
LABEL_21:
      v30 = strchr(v25, 58);
      v31 = v30;
      if (v30)
      {
        *v30 = 0;
        v31 = v30 + 1;
      }
      if (*v25 != 64)
      {
        if (!strcmp(v25, a5))
          goto LABEL_35;
        goto LABEL_31;
      }
      v32 = getgrnam(v25 + 1);
      if (v32)
      {
        gr_mem = (const char **)v32->gr_mem;
        v34 = *gr_mem;
        if (*gr_mem)
          break;
      }
    }
LABEL_31:
    v24 = strsep(&__stringp, v22);
    if (!v24)
      goto LABEL_64;
  }
  v35 = gr_mem + 1;
  while (strcmp(v34, a5))
  {
    v36 = *v35++;
    v34 = v36;
    if (!v36)
      goto LABEL_31;
  }
LABEL_35:
  v38 = *v25;
  if (v38 == 64)
    v39 = v25;
  else
    v39 = 0;
  __s2 = v39;
  __linecapp = 0;
  __linep = 0;
  v40 = getline(&__linep, &__linecapp, a4);
  if (v40 < 1)
  {
    v51 = 1;
    goto LABEL_61;
  }
  v41 = v40;
  v52 = v10;
  do
  {
    while (2)
    {
      v42 = __linep;
      v43 = __linep[v41 - 1];
      if (v43 < 0)
      {
        if (__maskrune(v43, 0x4000uLL))
        {
LABEL_42:
          v42[--v41] = 0;
          continue;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v43] & 0x4000) != 0)
      {
        goto LABEL_42;
      }
      break;
    }
    if (v41)
    {
      if (*v42 != 35)
      {
        v44 = strchr(v42, 58);
        if (v44)
        {
          *v44 = 0;
          v45 = v44 + 1;
          v46 = __linep;
          if (!strcmp(__linep, a5) || v38 == 64 && !strcmp(v46, __s2))
          {
            if (sub_10002B68C(v45, a6, __s1a, 0x100uLL))
            {
              if (!strcmp(__s1a, a7))
              {
                v51 = 0;
                goto LABEL_59;
              }
            }
            else
            {
              if (dword_100050EE8)
              {
                v47 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                  sub_100035F44(&buf, v56, v47);
              }
              sub_10001C094("rsync_password_hash");
            }
          }
        }
      }
    }
    v41 = getline(&__linep, &__linecapp, a4);
  }
  while (v41 > 0);
  v51 = 1;
LABEL_59:
  v10 = v52;
LABEL_61:
  v48 = __linep;
  if (__linep)
  {
    sub_10000364C(__linep, __linecapp);
    v48 = __linep;
  }
  free(v48);
  if ((v51 & 1) != 0)
  {
LABEL_64:
    v37 = 0;
    goto LABEL_65;
  }
  if (!v31)
  {
    v50 = -1;
LABEL_74:
    *v10 = v50;
    goto LABEL_75;
  }
  if (!strcmp(v31, "deny"))
    goto LABEL_64;
  *v10 = -1;
  if (!strcmp(v31, "ro"))
  {
    v50 = 1;
    goto LABEL_74;
  }
  if (!strcmp(v31, "rw"))
  {
    v50 = 0;
    goto LABEL_74;
  }
LABEL_75:
  v37 = 1;
LABEL_65:
  free(__stringp);
  return v37;
}

uint64_t sub_100008F34(uint64_t a1, unint64_t *a2, char **a3, _QWORD *a4, char *__s1, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  const char *v10;
  char *v15;
  char *v16;
  char *v17;
  char v19;

  v9 = *a2;
  if (*a2 != 0x7FFFFFFF)
  {
    v15 = *a3;
    if (v9 == *a4)
    {
      v16 = sub_1000036A8(*a3, *a2, v9 + 5, 8uLL);
      if (!v16)
      {
LABEL_8:
        v10 = "daemon out of memory";
        goto LABEL_9;
      }
      v15 = v16;
      *a4 = v9 + 5;
      *a3 = v16;
    }
    v17 = strdup(__s1);
    *(_QWORD *)&v15[8 * v9] = v17;
    if (v17)
    {
      ++*a2;
      return 1;
    }
    goto LABEL_8;
  }
  v10 = "protection error: too many arguments sent";
LABEL_9:
  sub_100003B90(a1, v10, (uint64_t)a3, (uint64_t)a4, (uint64_t)__s1, a6, a7, a8, v19);
  return 0;
}

void sub_100009004(uint64_t a1, const char *a2)
{
  err(14, a2);
}

uint64_t sub_10000900C(_BYTE *a1, uint64_t a2)
{
  if (!a2)
    return 1;
  while (!*a1)
  {
    ++a1;
    if (!--a2)
      return 1;
  }
  return 0;
}

char *sub_100009034(const char *a1)
{
  size_t v2;
  size_t v3;
  uint64_t v4;
  size_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  const char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  char v27;
  int v28;
  char *__stringp;

  __stringp = 0;
  v2 = strlen(a1);
  v3 = v2;
  v4 = 2;
  if (v2 > 2)
    v4 = v2;
  v5 = v4 + 1;
  v6 = (char *)malloc_type_malloc(v4 + 1, 0x64ACEC80uLL);
  v14 = v6;
  if (!v6)
  {
    if (dword_100050EE8)
    {
      v17 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035FA8(v17);
    }
    sub_10001BFE8("malloc", v7, v8, v9, v10, v11, v12, v13, v27);
    return v14;
  }
  if (!v3)
  {
    *v6 = 0;
    v18 = &byte_1000437D5;
    goto LABEL_38;
  }
  strlcpy(v6, a1, v5);
  v15 = 0;
  v28 = a1[v3 - 1];
  v16 = &v14[v3 + 1];
  while (v14[v15] == 47)
    ++v15;
  if (!v14[v15])
  {
LABEL_9:
    *v14 = 0;
    goto LABEL_36;
  }
  memmove(v14, &v14[v15], v3 + 1 - v15);
  __stringp = v14;
  v19 = strsep(&__stringp, "/");
  if (!v19)
    goto LABEL_35;
  v20 = v19;
  v21 = 0;
  while (1)
  {
    if (v20 > v14)
      *(v20 - 1) = 47;
    if (!*v20)
    {
      if (!__stringp)
        goto LABEL_35;
      memmove(v20, v20 + 1, v16 - (v20 + 1));
      --__stringp;
      --v16;
      goto LABEL_34;
    }
    v22 = __stringp ? __stringp : v16 - 1;
    v23 = v22 - v20;
    if (!strncmp(v20, ".", v22 - v20))
      break;
    if (!strncmp(v20, "..", v22 - v20))
    {
      if (v21-- <= 1)
      {
        if (!*v22)
          goto LABEL_9;
        memmove(v14, v22, v16 - v22);
        v21 = 0;
        v16 += v14 - v22;
        v24 = &__stringp[v14 - v22];
        goto LABEL_33;
      }
    }
    else
    {
      ++v21;
    }
LABEL_34:
    v20 = strsep(&__stringp, "/");
    if (!v20)
      goto LABEL_35;
  }
  if (*v22)
  {
    memmove(v20, v22, v16 - v22);
    v16 -= v23;
    v24 = &__stringp[-v23];
LABEL_33:
    __stringp = v24;
    goto LABEL_34;
  }
  *v20 = v20[1];
LABEL_35:
  if (!*v14)
  {
LABEL_36:
    v18 = "/";
    if (v28 != 47)
      v18 = &byte_1000437D5;
LABEL_38:
    snprintf(v14, v5, ".%s", v18);
  }
  return v14;
}

uint64_t sub_1000092D8(_BYTE *a1, const char *a2, char *__s)
{
  int v4;
  uint64_t result;
  size_t v8;
  NSObject *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;

  if (!a1)
    return 1;
  v4 = *a1;
  result = 1;
  if (v4 && v4 != 47)
  {
    v8 = strlen(__s);
    if (!strncmp(a2, __s, v8))
    {
      if (a2[v8] == 47)
        v10 = (char *)&a2[v8 + 1];
      else
        v10 = (char *)&a2[v8];
      v11 = sub_1000094AC(v10, 0, 0);
      if ((v11 & 0x80000000) == 0)
        return sub_1000094AC(a1, v11, 1) >> 31;
      if (dword_100050EE8)
      {
        v12 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          v14 = v10;
          v15 = 2080;
          v16 = __s;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s: is_unsafe_link: src escaped the root: %s\n", buf, 0x16u);
        }
      }
      sub_10001C1CC("%s: is_unsafe_link: src escaped the root: %s\n");
    }
    else
    {
      if (dword_100050EE8)
      {
        v9 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          v14 = a2;
          v15 = 2080;
          v16 = __s;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s: is_unsafe_link: src file is outside of the root: %s\n", buf, 0x16u);
        }
      }
      sub_10001C1CC("%s: is_unsafe_link: src file is outside of the root: %s\n");
    }
    return 1;
  }
  return result;
}

uint64_t sub_1000094AC(_BYTE *a1, uint64_t a2, int a3)
{
  char *v5;
  int v6;
  char *v7;

  if (a1 && *a1)
  {
    while (1)
    {
      v5 = a1 - 1;
      do
        v6 = *++v5;
      while (v6 == 47);
      if (!strncmp(v5, "../", 3uLL))
      {
        a2 = (a2 - 1);
        if (!a3)
          goto LABEL_14;
      }
      else
      {
        if (strncmp(v5, "./", 2uLL))
        {
          if (strchr(v5, 47))
            a2 = (a2 + 1);
          else
            a2 = a2;
        }
        if (!a3)
          goto LABEL_14;
      }
      if ((a2 & 0x80000000) != 0)
        return 0xFFFFFFFFLL;
LABEL_14:
      v7 = strchr(v5, 47);
      a1 = v7 + 1;
      if (!v7)
        return a2;
    }
  }
  return 0;
}

uint64_t sub_100009584(uint64_t a1, int a2, const char **a3, const char *a4, mode_t a5)
{
  const char **v7;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  size_t v22;
  char *v23;
  char *v24;
  size_t v25;
  const char *v26;
  int v27;
  _BOOL8 v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  char *v40;
  char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  const char *v84;
  uint64_t v86;
  mode_t v87;
  char *v88;
  size_t v89;
  size_t v90;
  const char **v91;
  char *v92;
  stat v93;
  stat v94;

  v7 = a3;
  memset(&v93, 0, sizeof(v93));
  if (fstatat(a2, *a3, &v93, 32) < 0)
    return 0;
  v10 = strdup(a4);
  if (!v10)
  {
    v31 = 12;
    goto LABEL_46;
  }
  v18 = v10;
  v19 = strlen(v10);
  v20 = 0;
  do
  {
    v21 = strncmp(&v18[v20], "./", 2uLL);
    v20 += 2;
  }
  while (!v21);
  v90 = v19;
  v22 = strlen(*(const char **)(*(_QWORD *)a1 + 160));
  v23 = &v18[v20];
  v24 = &v18[v20 + v22];
  v92 = &v18[v19];
  if (v24 - 2 >= &v18[v19])
    sub_100036280();
  v25 = v22;
  v86 = a1;
  v87 = a5;
  v91 = v7;
  v26 = v23 - 2;
  memset(&v94, 0, sizeof(v94));
  v27 = *(v24 - 2);
  v28 = v27 == 47;
  if (v27 == 47)
    v29 = v22 + 1;
  else
    v29 = v22;
  v30 = strrchr(v23 - 2, 47);
  if (v30)
  {
    while (1)
    {
      *v30 = 0;
      v31 = mkdirat(a2, v23 - 2, 0x1EDu);
      if (!(_DWORD)v31)
        goto LABEL_17;
      if (*__error() == 17)
        goto LABEL_16;
      if (*__error() != 2)
        break;
      v30 = strrchr(v23 - 2, 47);
      if (!v30)
        goto LABEL_17;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100036170();
    sub_10001BFE8("%s: mkdir", v32, v33, v34, v35, v36, v37, v38, (_BYTE)v23 - 2);
    goto LABEL_45;
  }
LABEL_16:
  v31 = 0;
LABEL_17:
  v89 = v25;
  v39 = v28;
  v40 = &v18[strlen(v23 - 2) - 2 + v20];
  if (v40 >= v92)
    sub_100036258();
  v88 = (char *)a4;
  v41 = &v23[v29];
  v42 = &v23[v29 - 2];
  v43 = -(uint64_t)(v89 + v39);
  while (1)
  {
    if (v90 + 2 + v43 - strlen(v42) != v20 && *(v41 - 2))
    {
      v31 = fstatat(a2, v42, &v94, 0);
      if ((v31 & 0x80000000) != 0)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000361F8();
        sub_10001BFE8("%s: stat", v44, v45, v46, v47, v48, v49, v50, (char)v42);
LABEL_45:
        v7 = v91;
        free(v18);
LABEL_46:
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100035FE8();
        sub_10001BFE8("%s: mk_backup_dir: %s", v11, v12, v13, v14, v15, v16, v17, (char)*v7);
        return v31;
      }
      fchownat(a2, v26, v94.st_uid, v94.st_gid, 32);
      fchmodat(a2, v26, v94.st_mode, 32);
    }
    *v40 = 47;
    v40 += strlen(v40);
    if (v40 == v92)
      break;
    if (v40 >= v92)
      sub_1000361D0();
    v31 = mkdirat(a2, v26, 0x1EDu);
    if ((v31 & 0x80000000) != 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036170();
      sub_10001BFE8("%s: mkdir", v51, v52, v53, v54, v55, v56, v57, (char)v26);
      goto LABEL_45;
    }
  }
  free(v18);
  v7 = v91;
  if ((_DWORD)v31)
    goto LABEL_46;
  v58 = v87 & 0xF000;
  if (v58 == 0x4000)
  {
    v31 = mkdirat(a2, v88, v87);
    if ((int)v31 >= 1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003604C();
      sub_10001BFE8("%s: mkdirat", v59, v60, v61, v62, v63, v64, v65, (char)v88);
      return v31;
    }
    v73 = *v91;
    v74 = a2;
    v75 = 128;
LABEL_61:
    unlinkat(v74, v73, v75);
    return v31;
  }
  if (v58 != 40960 || !*(_DWORD *)(*(_QWORD *)v86 + 84))
  {
    if (v58 == 0x8000)
    {
      if ((sub_100009BA8(a2, *v91, a2, v88, 1) & 0x80000000) == 0)
        return 0;
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003610C();
      sub_10001BFE8("%s: move_file: %s", v76, v77, v78, v79, v80, v81, v82, (char)*v91);
      return 0xFFFFFFFFLL;
    }
    if (dword_100050EE8)
    {
      v83 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        v84 = *v91;
        v94.st_dev = 136315138;
        *(_QWORD *)&v94.st_mode = v84;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "backup_to_dir: skipping non-regular file %s\n", (uint8_t *)&v94, 0xCu);
      }
    }
    sub_10001C1CC("backup_to_dir: skipping non-regular file %s\n", *v91);
    return 0;
  }
  unlinkat(a2, v88, 0);
  v31 = symlinkat(v91[11], a2, v88);
  if ((v31 & 0x80000000) == 0)
  {
    v73 = *v91;
    v74 = a2;
    v75 = 0;
    goto LABEL_61;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_1000360AC();
  sub_10001BFE8("%s: symlinkat", v66, v67, v68, v69, v70, v71, v72, (char)v88);
  return v31;
}

uint64_t sub_100009BA8(int a1, const char *a2, int a3, const char *a4, int a5)
{
  int v9;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if (a5)
    v9 = 1793;
  else
    v9 = 3841;
  result = renameat(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -1 || *__error() == 18)
    {
      result = openat(a1, a2, 256);
      if ((_DWORD)result == -1)
        return result;
      v11 = result;
      v12 = openat(a3, a4, v9, 384);
      if (v12 == -1)
      {
        v16 = *__error();
        close(v11);
        *__error() = v16;
      }
      else
      {
        v13 = v12;
        v14 = sub_100009CC0();
        v15 = *__error();
        close(v11);
        close(v13);
        *__error() = v15;
        if (!v14)
        {
          unlinkat(a1, a2, 0);
          return 0;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_100009CC0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  ssize_t v4;
  uint64_t v5;
  ssize_t v6;
  uint64_t result;
  off_t v8;
  _BYTE __buf[65536];

  v0 = __chkstk_darwin();
  v2 = v1;
  v3 = v0;
  v4 = read(v0, __buf, 0x10000uLL);
  if (v4 >= 1)
  {
    while (2)
    {
      v5 = 0;
      while (!__buf[v5])
      {
        if (++v5 == 0x10000)
        {
          if (lseek(v2, v4, 1) == -1)
            return 0xFFFFFFFFLL;
          goto LABEL_9;
        }
      }
      v6 = write(v2, __buf, v4);
      result = 0xFFFFFFFFLL;
      if (v4 != v6 || v6 == -1)
        return result;
LABEL_9:
      v4 = read(v3, __buf, 0x10000uLL);
      if (v4 > 0)
        continue;
      break;
    }
  }
  if (v4 == -1)
    return 0xFFFFFFFFLL;
  v8 = lseek(v2, 0, 1);
  if (ftruncate(v2, v8) == -1)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_100009E08(int a1, const char *a2, const char **a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v5 = openat(a1, a2, 0x100000);
  if (v5 == -1)
    err(11, "%s: copy_file dfd: openat");
  v6 = v5;
  v7 = openat(v5, *a3, 256);
  if (v7 == -1)
    err(11, "%s/%s: copy_file fromfd: openat");
  v8 = v7;
  close(v6);
  v9 = openat(a1, *a3, 3841, 384);
  if (v9 == -1)
    sub_1000362A8(a3);
  v10 = v9;
  if (sub_100009CC0() == -1)
    sub_1000362CC(a3);
  close(v8);
  return close(v10);
}

void sub_100009EF4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

char *sub_100009F20(uint64_t a1, char **a2, char *a3, size_t a4)
{
  const char *v4;
  char *v5;
  const char *v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  size_t v32;

  v4 = *(const char **)(*(_QWORD *)a1 + 48);
  if (!v4)
    sub_1000362F0();
  if (!a2)
    sub_100036318();
  if (*v4 == 47)
    return *(char **)(*(_QWORD *)a1 + 48);
  v5 = a3;
  v8 = *a2;
  v9 = strrchr(*a2, 47);
  if (v9)
  {
    v10 = (_DWORD)v9 - (_DWORD)v8;
    do
    {
      v11 = v9;
      v12 = v10;
      if (v9 <= v8)
        break;
      --v9;
      --v10;
    }
    while (*(v11 - 1) == 47);
    if (v11 == v8)
      sub_100036340();
    if (v12 <= 0)
      sub_100036368();
  }
  else
  {
    v8 = ".";
    v12 = 1;
  }
  if (snprintf(v5, a4, "%.*s/%s", v12, v8, v4) > a4)
  {
    if (dword_100050EE8)
    {
      v20 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        v22 = *(_QWORD *)(*(_QWORD *)a1 + 48);
        *(_DWORD *)buf = 136316162;
        v24 = v8;
        v25 = 1040;
        v26 = v12;
        v27 = 2080;
        v28 = v8;
        v29 = 2080;
        v30 = v22;
        v31 = 2048;
        v32 = a4;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s: partial-dir: path too long: %.*s/%s > %lu", buf, 0x30u);
      }
    }
    sub_10001BFE8("%s: partial-dir: path too long: %.*s/%s > %lu", v13, v14, v15, v16, v17, v18, v19, (char)v8);
  }
  return v5;
}

char *sub_10000A0F8(char **a1)
{
  char *v1;
  char *v2;

  v1 = *a1;
  v2 = strrchr(*a1, 47);
  if (v2)
    return v2 + 1;
  else
    return v1;
}

_QWORD *sub_10000A128(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;

  v12 = malloc_type_malloc(0x118uLL, 0x10B0040D76BDBA9uLL);
  if (!v12)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100036390();
    sub_10001BFE8("malloc", v13, v14, v15, v16, v17, v18, v19, v30);
    return 0;
  }
  v20 = v12;
  *(_DWORD *)v12 = 0;
  v12[26] = a3;
  v12[27] = a4;
  *((_DWORD *)v12 + 56) = a5;
  *((_DWORD *)v12 + 57) = a6;
  *((_DWORD *)v12 + 58) = a2;
  v12[33] = 0;
  sub_10000A274(a1, (uint64_t)v12, 0);
  v20[30] = 0;
  v20[31] = 0;
  v20[32] = 0x100000;
  v21 = malloc_type_malloc(0x100000uLL, 0xE1549C52uLL);
  v20[30] = v21;
  if (!v21)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100036390();
    sub_10001BFE8("malloc", v22, v23, v24, v25, v26, v27, v28, v30);
    free(v20);
    return 0;
  }
  return v20;
}

uint64_t sub_10000A274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CC_MD4_CTX *v4;
  int data;

  data = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)a2)
    sub_1000363C0();
  *(_QWORD *)(a2 + 8) = a3;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 64) = -1;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = -1;
  v4 = (CC_MD4_CTX *)(a2 + 96);
  *(_QWORD *)(a2 + 88) = 0;
  CC_MD4_Init((CC_MD4_CTX *)(a2 + 96));
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  CC_MD4_Update(v4, &data, 4u);
  return sub_10000DD18();
}

uint64_t sub_10000A2F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 264);
}

void sub_10000A300(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_10000A338(a1, (uint64_t)a2, 1);
    free(a2[30]);
    free(a2);
  }
}

void sub_10000A338(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  size_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v6 = *(void **)(a2 + 64);
  if (v6 != (void *)-1)
  {
    v7 = *(_QWORD *)(a2 + 72);
    if (!v7)
      sub_100036464();
    munmap(v6, v7);
    *(_QWORD *)(a2 + 64) = -1;
    *(_QWORD *)(a2 + 72) = 0;
  }
  v8 = *(_DWORD *)(a2 + 80);
  if (v8 != -1)
  {
    close(v8);
    *(_DWORD *)(a2 + 80) = -1;
  }
  if (a3)
  {
    if (!sub_10000A458(a1, a2))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000363E8();
      sub_10001BFE8("%s: partial cleanup failed, left at %s", v9, v10, v11, v12, v13, v14, v15, *(_QWORD *)(*(_QWORD *)(a2 + 208) + 152 * *(_QWORD *)(a2 + 8)));
    }
  }
  else
  {
    v16 = *(_DWORD *)(a2 + 84);
    if (v16 != -1)
    {
      close(v16);
      *(_DWORD *)(a2 + 84) = -1;
    }
  }
  free(*(void **)(a2 + 88));
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)a2 = 0;
}

uint64_t sub_10000A44C(uint64_t a1, uint64_t a2)
{
  if (a2)
    return sub_10000A458(a1, a2);
  return a1;
}

uint64_t sub_10000A458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char **v6;
  int v7;
  const char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  const char *v15;
  int v16;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  stat v27;
  char v28[1024];

  v2 = *(_QWORD *)(a2 + 208);
  if (!v2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (char **)(v2 + 152 * v5);
  v7 = *(_DWORD *)(a2 + 84);
  if (v7 == -1)
  {
    if ((*(_DWORD *)(v2 + 152 * v5 + 8) & 0x80000000) != 0)
      return 1;
    memset(&v27, 0, sizeof(v27));
    v13 = sub_100009F20(a1, (char **)(v2 + 152 * v5), v28, 0x400uLL);
    if (fstatat(*(_DWORD *)(a2 + 224), v13, &v27, 32) == -1 || (v27.st_mode & 0xF000) != 0x4000)
      return 1;
    v14 = *(_DWORD *)(a2 + 224);
    v15 = v13;
    v16 = 128;
    goto LABEL_21;
  }
  close(v7);
  *(_DWORD *)(a2 + 84) = -1;
  v8 = *(const char **)(a2 + 88);
  if (!v8)
    return 1;
  v9 = *(_QWORD *)a1;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 44))
  {
    if (!*(_QWORD *)(v9 + 544) || *(_DWORD *)(v9 + 40) || *(_DWORD *)(v9 + 12))
    {
      v14 = *(_DWORD *)(a2 + 224);
      v15 = *(const char **)(a2 + 88);
    }
    else
    {
      v20 = *v6;
      v21 = strrchr(v20, 47);
      if (v21)
        v15 = v21 + 1;
      else
        v15 = v20;
      v14 = *(_DWORD *)(a2 + 228);
    }
    v16 = 0;
LABEL_21:
    unlinkat(v14, v15, v16);
    return 1;
  }
  if (*(_DWORD *)(v9 + 40) || (*(_DWORD *)(v2 + 152 * v5 + 8) & 0x80000000) == 0)
    return 1;
  v10 = *(_DWORD *)(a2 + 224);
  if (*(_QWORD *)(v9 + 48))
  {
    memset(&v27, 0, sizeof(v27));
    v11 = sub_100009F20(a1, v6, v28, 0x400uLL);
    v12 = fstatat(v10, v11, &v27, 32);
    if (v12)
    {
      if (v12 != -1)
        goto LABEL_33;
      if (*__error() != 2)
        return 0;
    }
    else
    {
      if ((v27.st_mode & 0xF000) == 0x4000)
        goto LABEL_33;
      if (unlinkat(v10, v11, 0) == -1)
        return 0;
    }
    if (mkdirat(v10, v11, 0x1C0u) == -1 && *__error() != 17)
      return 0;
LABEL_33:
    v22 = openat(v10, v11, 0x100000, *(_OWORD *)&v27.st_dev, *(_OWORD *)&v27.st_uid, *(_OWORD *)&v27.st_atimespec, *(_OWORD *)&v27.st_mtimespec, *(_OWORD *)&v27.st_ctimespec, *(_OWORD *)&v27.st_birthtimespec, *(_OWORD *)&v27.st_size, *(_OWORD *)&v27.st_blksize, *(_OWORD *)v27.st_qspare);
    if (v22 != -1)
    {
      v19 = v22;
      v23 = *v6;
      v24 = strrchr(*v6, 47);
      if (v24)
        v18 = v24 + 1;
      else
        v18 = v23;
      v10 = *(_DWORD *)(a2 + 224);
      v8 = *(const char **)(a2 + 88);
      goto LABEL_38;
    }
    return 0;
  }
  v18 = *v6;
  v19 = *(_DWORD *)(a2 + 224);
LABEL_38:
  v25 = sub_100001874(a1, (uint64_t)v6, v10, v8, v19, v18, 0);
  v26 = *(_DWORD *)(a2 + 224);
  if (v25 == -1)
  {
    if (v19 != v26)
    {
      unlinkat(v26, *(const char **)(a2 + 88), 0);
      close(v19);
    }
    return 0;
  }
  if (v19 != v26)
    close(v19);
  return 1;
}

void sub_10000A744(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  char *v15;
  const char **v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39[15];
  char v40;
  char v41[15];
  uint8_t buf[4];
  uint64_t v43;
  __int16 v44;
  uint64_t v45;

  v8 = (int *)a1[24];
  if (v8)
  {
    if (v8[6] >= 1)
    {
      v10 = 0;
      v11 = 0;
      v12 = *((_QWORD *)v8 + 1);
      do
      {
        v13 = *(char **)v8;
        if (dword_100050EE8)
        {
          v14 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
          {
            v36 = *(_QWORD *)&v13[v10];
            v35 = *(_QWORD *)&v13[v10 + 8];
            *(_DWORD *)buf = 136315394;
            v43 = v36;
            v44 = 2080;
            v45 = v35;
            _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "mv '%s' -> '%s'", buf, 0x16u);
          }
        }
        v15 = &v13[v10];
        sub_10001BE54(2, "mv '%s' -> '%s'", a3, a4, a5, a6, a7, a8, *(_QWORD *)&v13[v10]);
        if (*((_DWORD *)*a1 + 50))
          v16 = (const char **)sub_10002325C(*((_QWORD *)v15 + 2), *((unsigned int **)v8 + 2));
        else
          v16 = 0;
        if (sub_100001874((uint64_t)a1, *((_QWORD *)v15 + 2), v8[7], *(const char **)v15, v8[8], *((char **)v15 + 1), 1))v17 = 4;
        else
          v17 = 8;
        if (v16)
        {
          v18 = (const char *)*((_QWORD *)v15 + 1);
          if (unlinkat(*(_DWORD *)(v12 + 224), v18, 0) == -1 && *__error() != 2)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_1000364B8(&v40, v41);
            sub_10001C094("unlink");
            v17 = 8;
          }
          if (linkat(*(_DWORD *)(v12 + 224), *v16, *(_DWORD *)(v12 + 224), v18, 0) == -1)
          {
            sub_10001BE54(-1, "While hard linking '%s' to '%s' ", v19, v20, v21, v22, v23, v24, (char)*v16);
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003648C(&v38, v39);
            sub_10001C094("linkat");
          }
        }
        v25 = &v13[v10];
        v26 = *(const char **)&v13[v10 + 24];
        if (v26 && unlinkat(v8[8], v26, 128) == -1 && *__error() != 66)
        {
          if (dword_100050EE8)
          {
            v34 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            {
              v37 = *((_QWORD *)v25 + 3);
              *(_DWORD *)buf = 136315138;
              v43 = v37;
              _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "rmdir '%s'", buf, 0xCu);
            }
          }
          sub_10001BFE8("rmdir '%s'", v27, v28, v29, v30, v31, v32, v33, *((_QWORD *)v25 + 3));
        }
        *(_DWORD *)(*((_QWORD *)v15 + 2) + 112) |= v17;
        free(*(void **)&v13[v10]);
        free(*((void **)v25 + 3));
        *(_QWORD *)&v13[v10] = 0;
        *((_QWORD *)v25 + 3) = 0;
        ++v11;
        v10 += 32;
      }
      while (v11 < v8[6]);
    }
    free(*(void **)v8);
    *(_QWORD *)v8 = 0;
    free(a1[24]);
    a1[24] = 0;
  }
}

uint64_t sub_10000AAE0(uint64_t a1, _DWORD *a2, int *a3, size_t a4, unsigned int *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  const char **v22;
  const char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  size_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 *v60;
  int v61;
  int v62;
  size_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  size_t v67;
  size_t v68;
  size_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  int v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  size_t v98;
  char *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  NSObject *v117;
  char *v118;
  NSObject *v119;
  uint64_t v120;
  NSObject *v121;
  char *v122;
  int v123;
  NSObject *v124;
  size_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  NSObject *v133;
  NSObject *v134;
  const char *v135;
  NSObject *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  unsigned int *v141;
  BOOL v142;
  NSObject *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  int *v147;
  int v148;
  const char *v149;
  int v150;
  unsigned int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  off_t st_size;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  int v172;
  char *v173;
  __int16 v174;
  uint64_t v175;
  void *v176;
  char **v177;
  void *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int *v193;
  int v194;
  int v195;
  char *v196;
  char *v197;
  const char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  off_t v210;
  uint64_t v211;
  unsigned int *v212;
  int v213;
  uint64_t v214;
  NSObject *v216;
  char *v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  const char *v225;
  NSObject *v226;
  const char *v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  NSObject *v237;
  _BOOL4 v238;
  char *v239;
  int v240;
  char *v241;
  const char *v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  int v291;
  char *v292;
  char *v293;
  const char **v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  const char *v303;
  char *v304;
  char *v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  const char *v314;
  char *v315;
  char *v316;
  void **v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  const char *v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t v357;
  size_t v358;
  char *v359;
  unsigned int *v360;
  _QWORD *v361;
  _QWORD *v362;
  const char **v363;
  uint64_t v364;
  size_t count;
  uint64_t v366;
  stat v367;
  stat v368;
  unsigned int v369;
  char v370;
  char v371[15];
  char v372;
  char v373[15];
  char v374;
  char v375[15];
  char v376;
  char v377[15];
  char v378;
  char v379[15];
  char v380;
  char v381[15];
  char v382;
  char v383[15];
  char v384;
  char v385[15];
  char v386;
  char v387[15];
  char v388;
  char v389[15];
  char v390;
  char v391[15];
  char v392;
  char v393[15];
  char v394;
  char v395[15];
  char v396;
  char v397[15];
  char v398;
  char v399[15];
  char v400;
  char v401[15];
  uint8_t buf[4];
  const char *v403;
  __int16 v404;
  uint64_t v405;
  __int16 v406;
  uint64_t v407;
  __int16 v408;
  uint64_t v409;
  __int16 v410;
  int v411;
  _DWORD size[3];
  __int16 v413;
  const char *v414;
  _QWORD v415[2];
  unsigned __int8 md[8];
  uint64_t v417;
  uint8_t v418[4];
  int v419;

  v369 = 0;
  memset(&v368, 0, sizeof(v368));
  memset(&v367, 0, sizeof(v367));
  if (*(_DWORD *)(*(_QWORD *)a2 + 196))
  {
    v10 = (_QWORD *)*((_QWORD *)a2 + 24);
    if (!v10)
    {
      v11 = malloc_type_malloc(0x28uLL, 0x106004076ECE9AAuLL);
      *((_QWORD *)a2 + 24) = v11;
      if (!v11)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037104();
        sub_10001BFE8("malloc renamer", v12, v13, v14, v15, v16, v17, v18, (char)v356);
        goto LABEL_382;
      }
      v10 = v11;
      v11[1] = a1;
      v11[2] = a5;
      *v11 = 0;
      *((_DWORD *)v11 + 6) = 0;
      v19 = *(_DWORD *)(a1 + 224);
      *((_DWORD *)v11 + 7) = v19;
      *((_DWORD *)v11 + 8) = v19;
    }
  }
  else
  {
    v10 = 0;
  }
  v20 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    if (!sub_10001AF44(a2, *(unsigned int *)(a1 + 232), &v369))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000364E4();
      sub_10001C094("io_read_int");
      return 0xFFFFFFFFLL;
    }
    v30 = v369;
    if ((v369 & 0x80000000) != 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
        sub_1000370CC();
      sub_10001BE54(2, "downloader: phase complete", v24, v25, v26, v27, v28, v29, (char)v356);
      return 0;
    }
    v31 = *(_QWORD *)(a1 + 216);
    if (v31 <= v369)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003709C();
      sub_10001BF64("index out of bounds");
      return 0xFFFFFFFFLL;
    }
    v32 = 0;
    v33 = *(_QWORD *)(a1 + 208);
    v34 = (int *)(v33 + 144);
    v361 = v10;
    while (1)
    {
      v35 = *v34;
      v34 += 38;
      if (v35 == v369)
        break;
      if (v31 == ++v32)
      {
        v36 = *(_DWORD *)(a1 + 232);
        goto LABEL_255;
      }
    }
    v369 = v32;
    v36 = *(_DWORD *)(a1 + 232);
    v30 = v32;
LABEL_255:
    if ((int)a2[65] <= 28)
    {
      *(_DWORD *)(v33 + 152 * v30 + 116) = 0x8000;
    }
    else
    {
      size[0] = 0;
      if (!sub_10001B140((uint64_t)a2, v36, size))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100036544();
        sub_10001C094("io_read_short");
        goto LABEL_360;
      }
      v174 = size[0];
      *(_DWORD *)(v33 + 152 * v30 + 116) = size[0];
      if ((v174 & 0x800) != 0)
      {
        buf[0] = 0;
        if (!sub_10001A4B0((uint64_t)a2, v36, (char *)buf))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003706C();
          sub_10001C094("io_read_byte");
          goto LABEL_360;
        }
        *(_DWORD *)(v33 + 152 * v30 + 120) = buf[0];
        v174 = size[0];
      }
      if ((v174 & 0x1000) != 0)
      {
        v175 = v33 + 152 * v30;
        v178 = *(void **)(v175 + 88);
        v177 = (char **)(v175 + 88);
        v176 = v178;
        if (v178)
          free(v176);
        v179 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x29D23AF4uLL);
        *v177 = v179;
        if (!v179)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003700C();
          sub_10001BFE8("calloc hlink vstring", v180, v181, v182, v183, v184, v185, v186, (char)v356);
          goto LABEL_360;
        }
        if (!sub_10001B260((uint64_t)a2, v36, v179, 0x400uLL))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003703C();
          sub_10001C094("io_read_vstring");
LABEL_360:
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036514();
          sub_10001BF64("get_iflags");
          return 0;
        }
      }
    }
    v187 = *(_QWORD *)(a1 + 208);
    v188 = v369;
    v22 = (const char **)(v187 + 152 * (int)v369);
    if (*((_DWORD *)v22 + 29) == 0x2000 || *(_DWORD *)(*(_QWORD *)a2 + 36) && a2[47] == -1)
      return 1;
    v189 = (int)v369;
    if (*(_DWORD *)(v187 + 152 * (int)v369 + 144) != v369)
    {
      v190 = *(_QWORD *)(a1 + 216);
      v189 = (int)v369;
      if (v190)
      {
        v191 = 0;
        v192 = 0;
        v193 = (int *)(v187 + 144);
        while (1)
        {
          v194 = *v193;
          v193 += 38;
          if (v194 == v369)
            break;
          ++v192;
          v191 += (uint64_t)&_mh_execute_header;
          if (v190 == v192)
          {
            v189 = (int)v369;
            goto LABEL_372;
          }
        }
        v369 = v192;
        v189 = v191 >> 32;
      }
    }
LABEL_372:
    sub_10000A274((uint64_t)a2, a1, v189);
    if (!sub_100002BF8((uint64_t)a2, *(_DWORD *)(a1 + 232), (_QWORD *)(a1 + 16)))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036574();
      sub_10001C094("blk_send_ack");
      goto LABEL_381;
    }
    *(_DWORD *)a1 = 1;
    v239 = (char *)*v22;
    v240 = *(_DWORD *)(v187 + 152 * (int)v188 + 8);
    if (v240 < 0)
    {
      v240 = *(_DWORD *)(a1 + 224);
    }
    else
    {
      v241 = strrchr((char *)*v22, 47);
      if (v241)
        v239 = v241 + 1;
    }
    if (*(_DWORD *)(v187 + 152 * (int)v188 + 120) == 131
      && (v242 = *(const char **)(v187 + 152 * (int)v188 + 88)) != 0)
    {
      v243 = v240;
    }
    else
    {
      v243 = v240;
      v242 = v239;
    }
    v244 = openat(v243, v242, 4);
    *(_DWORD *)(a1 + 80) = v244;
    if (*(_DWORD *)(*(_QWORD *)a2 + 136) && !dword_100050EEC)
    {
      fprintf(__stderrp, "%s\n", *v22);
      v244 = *(_DWORD *)(a1 + 80);
    }
    if (v244 != -1)
      goto LABEL_393;
    if (*__error() != 2)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036FAC();
      sub_10001BFE8("%s: rsync_downloader: openat", v245, v246, v247, v248, v249, v250, v251, (char)v239);
      goto LABEL_381;
    }
    v244 = *(_DWORD *)(a1 + 80);
    if (v244 != -1)
    {
LABEL_393:
      *a3 = v244;
      if (*(_DWORD *)(*(_QWORD *)a2 + 112))
        fcntl(*(_DWORD *)(a1 + 80), 48);
      return 1;
    }
    v20 = *(_DWORD *)a1;
    v10 = v361;
  }
  count = a4;
  v21 = *(_QWORD *)(a1 + 208);
  v366 = *(_QWORD *)(a1 + 8);
  v22 = (const char **)(v21 + 152 * v366);
  if (v20 == 1)
  {
    v23 = (const char **)(a1 + 88);
    if (*(_QWORD *)(a1 + 88))
      sub_10003682C();
    if (*(_DWORD *)(*(_QWORD *)a2 + 36))
    {
      *a3 = -1;
LABEL_11:
      *(_DWORD *)a1 = 2;
      return 1;
    }
    v152 = *(_DWORD *)(a1 + 80);
    if (v152 != -1)
    {
      if (fstat(v152, &v368) == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000367CC();
        sub_10001BFE8("%s: fstat", v153, v154, v155, v156, v157, v158, v159, (char)*v22);
        goto LABEL_381;
      }
      if (*(_DWORD *)(a1 + 80) != -1 && (v368.st_mode & 0xF000) != 0x8000)
      {
        if (dword_100050EE8)
        {
          v216 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
          {
            v217 = (char *)*v22;
            size[0] = 136315138;
            *(_QWORD *)&size[1] = v217;
            _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_INFO, "%s: not regular", (uint8_t *)size, 0xCu);
          }
        }
        sub_10001C1CC("%s: not regular", *v22);
        goto LABEL_381;
      }
    }
    sub_10002325C((uint64_t)v22, a5);
    v160 = *(_DWORD *)(a1 + 80);
    if (v160 == -1
      || (st_size = v368.st_size, v368.st_size < 1)
      || (*(_QWORD *)(a1 + 72) = v368.st_size,
          v162 = mmap(0, st_size, 1, 1, v160, 0),
          *(_QWORD *)(a1 + 64) = v162,
          v162 != (void *)-1))
    {
      *a3 = -1;
      v170 = *(_QWORD *)a2;
      if (!*(_DWORD *)(*(_QWORD *)a2 + 40)
        && !*(_DWORD *)(v170 + 12)
        && (*(_DWORD *)(v21 + 152 * v366 + 8) & 0x80000000) != 0)
      {
        if (*(_DWORD *)(v170 + 32))
          v238 = 1;
        else
          v238 = *(_DWORD *)(v170 + 188) != 0;
        if (sub_100022154((char **)(a1 + 88), (char *)*v22, v238, *(_QWORD *)(v170 + 544) != 0) == -1)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_1000366C4();
          sub_10001C094("mktemplate", v356);
          goto LABEL_381;
        }
        v259 = 228;
        if (!*(_QWORD *)(*(_QWORD *)a2 + 544))
          v259 = 224;
        v260 = sub_100021E04(*(_DWORD *)(a1 + v259), *(char **)(a1 + 88));
        *(_DWORD *)(a1 + 84) = v260;
        if (v260 == -1)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_1000366F4();
          sub_10001BFE8("mkstempat: '%s'", v261, v262, v263, v264, v265, v266, v267, (char)*v23);
          goto LABEL_381;
        }
        if (*(_DWORD *)(a1 + 80) != -1 && !sub_10000D3D8((uint64_t *)a2, *v23, v260, (uint64_t)&v368))
          goto LABEL_381;
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
          sub_100036754();
        sub_10001BE54(2, "%s: temporary: %s", v262, v263, v264, v265, v266, v267, (char)*v22);
        goto LABEL_306;
      }
      v171 = *v22;
      v172 = *(_DWORD *)(v21 + 152 * v366 + 8);
      if (v172 < 0)
      {
        v172 = *(_DWORD *)(a1 + 224);
      }
      else
      {
        v173 = strrchr((char *)*v22, 47);
        if (v173)
          v171 = v173 + 1;
      }
      v195 = openat(v172, v171, 518, *(_WORD *)(v21 + 152 * v366 + 24) & 0x1FF);
      *(_DWORD *)(a1 + 84) = v195;
      if (v195 == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100036604();
        sub_10001C094("%s: open");
        goto LABEL_381;
      }
      v196 = (char *)*v22;
      v197 = strrchr((char *)*v22, 47);
      if (v197)
        v198 = v197 + 1;
      else
        v198 = v196;
      v199 = strdup(v198);
      *v23 = v199;
      if (!v199)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100036664();
        sub_10001C094("strdup", v357);
        goto LABEL_381;
      }
      if (dword_100050EE8)
      {
        v206 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
        {
          size[0] = 136315138;
          *(_QWORD *)&size[1] = v196;
          _os_log_debug_impl((void *)&_mh_execute_header, v206, OS_LOG_TYPE_DEBUG, "%s: writing inplace", (uint8_t *)size, 0xCu);
          v196 = (char *)*v22;
        }
      }
      sub_10001BE54(2, "%s: writing inplace", v200, v201, v202, v203, v204, v205, (char)v196);
      if (!**((_DWORD **)a2 + 25))
        goto LABEL_306;
      v207 = *(_QWORD *)(a1 + 72);
      if (!v207)
        goto LABEL_306;
      v208 = *(char **)(a1 + 64);
      do
      {
        if (v207 >= 0xFFFFFFFF)
          v209 = 0xFFFFFFFFLL;
        else
          v209 = v207;
        CC_MD4_Update((CC_MD4_CTX *)(a1 + 96), v208, v209);
        v208 += v209;
        v207 -= v209;
      }
      while (v207);
      v210 = lseek(*(_DWORD *)(a1 + 84), 0, 2);
      if (v210 == v368.st_size)
      {
LABEL_306:
        if (*(_DWORD *)(*(_QWORD *)a2 + 112))
        {
          fcntl(*(_DWORD *)(a1 + 80), 48);
          fcntl(*(_DWORD *)(a1 + 84), 48);
        }
        goto LABEL_11;
      }
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036694();
      sub_10001C094("lseek");
LABEL_283:
      if (v21)
        goto LABEL_381;
      goto LABEL_382;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000365A4();
    v356 = (char *)*v22;
    v218 = "%s: mmap";
LABEL_330:
    sub_10001BFE8(v218, v163, v164, v165, v166, v167, v168, v169, (char)v356);
    goto LABEL_381;
  }
  v362 = v10;
  v363 = (const char **)(v21 + 152 * v366);
  v360 = a5;
  if (*(_DWORD *)(*(_QWORD *)a2 + 112))
  {
    fcntl(*(_DWORD *)(a1 + 80), 48);
    fcntl(*(_DWORD *)(a1 + 84), 48);
  }
  do
  {
    sub_10000D624((uint64_t)a2, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 152 * *(_QWORD *)(a1 + 8) + 40), *(_QWORD *)(a1 + 200), 0);
    if (*(_DWORD *)a1 != 2)
      sub_100036F84();
    if (!*(_QWORD *)(a1 + 88) && !*(_DWORD *)(*(_QWORD *)a2 + 36))
      sub_100036854();
    if (*(_DWORD *)(a1 + 84) == -1 && !*(_DWORD *)(*(_QWORD *)a2 + 36))
      sub_10003687C();
    v37 = *(unsigned int *)(a1 + 232);
    if ((_DWORD)v37 == -1)
      sub_1000368A4();
    if (!*(_DWORD *)(*(_QWORD *)a2 + 552))
    {
      size[0] = 0;
      if (sub_10001AF44(a2, v37, size))
      {
        v69 = size[0];
        if (size[0] < 1)
        {
          if ((size[0] & 0x80000000) != 0)
            v88 = sub_10000DE3C(a2, a1, ~size[0]);
          else
            v88 = 1;
          continue;
        }
        v70 = (char *)malloc_type_malloc(size[0], 0x3F685C1DuLL);
        if (!v70)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036E18(&v398, v399);
          sub_10001BFE8("malloc", v71, v72, v73, v74, v75, v76, v77, (char)v356);
          goto LABEL_105;
        }
        v78 = v70;
        if (!sub_10001A524((uint64_t)a2, *(_DWORD *)(a1 + 232), v70, v69))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036E44(&v396, v397);
          sub_10001C094("io_read_buf");
          goto LABEL_131;
        }
        if (!sub_10000D864(v78, v69, a1, (uint64_t)a2))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036E70(&v394, v395);
          sub_10001BF64("buf_copy");
LABEL_131:
          free(v78);
          v88 = 0;
          continue;
        }
        *(int64x2_t *)(a1 + 192) = vaddq_s64(*(int64x2_t *)(a1 + 192), vdupq_n_s64(v69));
        *((_QWORD *)a2 + 11) += v69;
        sub_10001BE54(3, "%s: received %zu B block", v79, v80, v81, v82, v83, v84, *(_QWORD *)(a1 + 88));
        v85 = v78;
        do
        {
          if (v69 >= 0xFFFFFFFF)
            v86 = 0xFFFFFFFFLL;
          else
            v86 = v69;
          CC_MD4_Update((CC_MD4_CTX *)(a1 + 96), v85, v86);
          v85 += v86;
          v69 -= v86;
        }
        while (v69);
        free(v78);
        v87 = sub_1000196F4((uint64_t)a2, *(_DWORD *)(a1 + 232));
        if (v87 < 0)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036E9C(&v392, v393);
          sub_10001C094("io_read_check");
          goto LABEL_95;
        }
        if (v87)
          v88 = 3;
        else
          v88 = 2;
        continue;
      }
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036DEC(&v400, v401);
LABEL_94:
      sub_10001C094("io_read_int");
      goto LABEL_95;
    }
    v38 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)md = v38;
    LOBYTE(v415[0]) = 0;
    if (!sub_10001A4B0((uint64_t)a2, v37, (char *)v415))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036EC8(&v388, v389);
      goto LABEL_62;
    }
    v45 = LOBYTE(v415[0]);
    if ((v415[0] & 0xC0) != 0x40)
    {
      v89 = dword_100050760;
      if (dword_100050760 == 4)
      {
        sub_10001BE54(3, "decompress_state: flushing end of stream", v39, v40, v41, v42, v43, v44, (char)v356);
        if (qword_100050780)
        {
          dword_100050770 = 0;
          dword_100050788 = 32816;
          v96 = sub_100016D20((unsigned __int8 **)&qword_100050768, 2uLL, v90, v91, v92, v93);
          v97 = v96;
          if (v96 != -5 && v96)
          {
            if (dword_100050EE8)
            {
              v119 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
                size[0] = 67109120;
                size[1] = v97;
                _os_log_error_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "inflate protocol_token_cflush res=%d", (uint8_t *)size, 8u);
              }
            }
            sub_10001BF64("inflate protocol_token_cflush res=%d", v97);
            v120 = qword_100050798;
            if (qword_100050798)
            {
              if (dword_100050EE8)
              {
                v121 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                {
                  size[0] = 136315138;
                  *(_QWORD *)&size[1] = v120;
                  _os_log_error_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "inflate error: %s", (uint8_t *)size, 0xCu);
                }
              }
              sub_10001BF64("inflate error: %s");
            }
LABEL_173:
            if (dword_100050EE8)
            {
              v133 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_100036F48(v418, &v419, v133);
            }
            sub_10001BF64("protocol_token_cflush=%d", 0);
LABEL_95:
            v88 = 0;
            continue;
          }
          if (v96 != -5 && dword_100050788 != 32816)
          {
            v98 = (32816 - dword_100050788);
            if (!sub_10000D864(0, v98, a1, (uint64_t)a2))
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_100036F1C(&v390, v391);
              sub_10001BF64("buf_copy dbuf");
              goto LABEL_173;
            }
            v99 = 0;
            do
            {
              if (v98 >= 0xFFFFFFFF)
                v100 = 0xFFFFFFFFLL;
              else
                v100 = v98;
              CC_MD4_Update((CC_MD4_CTX *)(a1 + 96), v99, v100);
              v99 += v100;
              v98 -= v100;
            }
            while (v98);
          }
          v101 = sub_100018684((uint64_t)&qword_100050768);
          if (v101 != 1)
          {
            v123 = v101;
            if (dword_100050EE8)
            {
              v124 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
                size[0] = 67109120;
                size[1] = v123;
                _os_log_error_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_ERROR, "inflateSyncPoint res=%d", (uint8_t *)size, 8u);
              }
            }
            sub_10001BF64("inflateSyncPoint res=%d");
            goto LABEL_173;
          }
          dword_100050770 = 4;
          qword_100050768 = (uint64_t)buf;
          *(_DWORD *)buf = -65536;
          sub_100016D20((unsigned __int8 **)&qword_100050768, 2uLL, v102, v103, v104, v105);
        }
        v89 = 1;
        sub_10001BE54(3, "decompress_state transition %d -> %d", v90, v91, v92, (uint64_t)v93, v94, v95, dword_100050760);
        dword_100050760 = 1;
        v45 = LOBYTE(v415[0]);
      }
      if (!v45)
      {
        sub_10001BE54(3, "decompress_state transition %d -> %d", v39, v40, v41, v42, v43, v44, v89);
        dword_100050760 = 0;
        v88 = 1;
        continue;
      }
      if ((v45 & 0x80) != 0)
      {
        *(_DWORD *)md = (v45 & 0x3F) + v38;
        LOBYTE(v415[0]) = v45 >> 6;
        if ((v45 & 0x40) != 0)
          goto LABEL_83;
      }
      else if ((v45 & 0x20) != 0)
      {
        if (!sub_10001AF44(a2, *(unsigned int *)(a1 + 232), md))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036DEC(&v374, v375);
          goto LABEL_94;
        }
        if ((v415[0] & 1) != 0)
        {
LABEL_83:
          LOBYTE(size[0]) = 0;
          if (sub_10001A4B0((uint64_t)a2, *(_DWORD *)(a1 + 232), (char *)size))
          {
            v106 = LOBYTE(size[0]);
            if (sub_10001A4B0((uint64_t)a2, *(_DWORD *)(a1 + 232), (char *)size))
            {
              v113 = v106 | ((unint64_t)LOBYTE(size[0]) << 8);
              sub_10001BE54(3, "decompress_state transition %d -> %d", v107, v108, v109, v110, v111, v112, dword_100050760);
              dword_100050760 = 2;
              goto LABEL_108;
            }
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100036EC8(&v370, v371);
          }
          else if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          {
            sub_100036EC8(&v372, v373);
          }
LABEL_62:
          sub_10001C094("io_read_byte");
          goto LABEL_95;
        }
      }
      v113 = 0;
LABEL_108:
      v114 = -(uint64_t)v113;
      while (1)
      {
        if (!v114)
        {
          sub_10001BE54(3, "decompress_state transition %d -> %d", v39, v40, v41, v42, v43, v44, dword_100050760);
          dword_100050760 = 1;
        }
        v115 = *(int *)md;
        ++*(_DWORD *)md;
        v116 = sub_10000DE3C(a2, a1, v115);
        if (v116 != 3)
          break;
        if (++v114 == 1)
        {
          *(_QWORD *)(a1 + 272) = *(int *)md - 1;
          v88 = 3;
          goto LABEL_132;
        }
      }
      v88 = v116;
      if (dword_100050EE8)
      {
        v117 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
          size[0] = 67109120;
          size[1] = v88;
          _os_log_error_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "protocol_token_ff res=%d", (uint8_t *)size, 8u);
        }
      }
      sub_10001BF64("protocol_token_ff res=%d", v88);
      continue;
    }
    buf[0] = 0;
    if (!sub_10001A4B0((uint64_t)a2, *(_DWORD *)(a1 + 232), (char *)buf))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036DEC(&v386, v387);
      goto LABEL_94;
    }
    v46 = buf[0] | ((v415[0] & 0xBF) << 8);
    v47 = (char *)malloc_type_malloc(v46, 0x64DA6414uLL);
    if (!v47)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036E18(&v384, v385);
      sub_10001C094("malloc");
LABEL_105:
      v88 = 0;
      continue;
    }
    v48 = v47;
    v364 = v21;
    v49 = (char *)malloc_type_malloc(0x8030uLL, 0x1DD68772uLL);
    if (!v49)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036E18(&v382, v383);
      sub_10001C094("malloc");
      v118 = v48;
      goto LABEL_148;
    }
    v50 = v49;
    if (!sub_10001A524((uint64_t)a2, *(_DWORD *)(a1 + 232), v48, v46))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036E44(&v380, v381);
      sub_10001C094("io_read_buf");
LABEL_146:
      v122 = v48;
LABEL_147:
      free(v122);
      v118 = v50;
LABEL_148:
      free(v118);
      v88 = 0;
      v21 = v364;
      continue;
    }
    v359 = v48;
    sub_10001BE54(3, "decompress_state transition %d -> %d", v51, v52, v53, v54, v55, v56, dword_100050760);
    dword_100050760 = 3;
    qword_100050768 = (uint64_t)v48;
    dword_100050770 = v46;
    qword_100050780 = (uint64_t)v50;
    dword_100050788 = 32816;
    if ((_DWORD)v46)
    {
      while (1)
      {
        v61 = sub_100016D20((unsigned __int8 **)&qword_100050768, 0, v57, v58, v59, v60);
        if (v61)
          break;
        v62 = dword_100050788;
        v63 = (32816 - dword_100050788);
        if (!sub_10000D864(v50, v63, a1, (uint64_t)a2))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036F1C(&v378, v379);
          sub_10001BF64("buf_copy dbuf");
          v122 = v359;
          goto LABEL_147;
        }
        if (v62 != 32816)
        {
          v64 = v63;
          v65 = v50;
          do
          {
            if (v64 >= 0xFFFFFFFF)
              v66 = 0xFFFFFFFFLL;
            else
              v66 = v64;
            CC_MD4_Update((CC_MD4_CTX *)(a1 + 96), v65, v66);
            v65 += v66;
            v64 -= v66;
          }
          while (v64);
        }
        v67 = *(_QWORD *)(a1 + 200) + v63;
        *(_QWORD *)(a1 + 192) += v46;
        *(_QWORD *)(a1 + 200) = v67;
        *((_QWORD *)a2 + 11) += v63;
        qword_100050780 = (uint64_t)v50;
        dword_100050788 = 32816;
        if (!dword_100050770)
        {
          v68 = 0;
          v48 = v359;
          goto LABEL_158;
        }
      }
      v132 = v61;
      if (v61 == -5)
      {
        v68 = (32816 - dword_100050788);
        v48 = v359;
        if (dword_100050788 == 32816)
          goto LABEL_158;
        v358 = (32816 - dword_100050788);
        v137 = v358;
        v138 = v50;
        if (sub_10000D864(v50, v358, a1, (uint64_t)a2))
        {
          do
          {
            if (v137 >= 0xFFFFFFFF)
              v139 = 0xFFFFFFFFLL;
            else
              v139 = v137;
            CC_MD4_Update((CC_MD4_CTX *)(a1 + 96), v138, v139);
            v138 += v139;
            v137 -= v139;
          }
          while (v137);
          v68 = v358;
          goto LABEL_158;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100036F1C(&v376, v377);
        sub_10001BF64("buf_copy dbuf");
        goto LABEL_146;
      }
      if (dword_100050EE8)
      {
        v134 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
          size[0] = 67109120;
          size[1] = v132;
          _os_log_error_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_ERROR, "inflate res=%d", (uint8_t *)size, 8u);
        }
      }
      sub_10001BF64("inflate res=%d", v132);
      v135 = (const char *)qword_100050798;
      if (qword_100050798)
      {
        if (dword_100050EE8)
        {
          v136 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          {
            size[0] = 136315138;
            *(_QWORD *)&size[1] = v135;
            _os_log_error_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "inflate error: %s", (uint8_t *)size, 0xCu);
            v135 = (const char *)qword_100050798;
          }
        }
        sub_10001BF64("inflate error: %s", v135);
      }
      free(v359);
      free(v50);
      v88 = 0;
      v21 = v364;
    }
    else
    {
      v68 = 0;
LABEL_158:
      v125 = *(_QWORD *)(a1 + 200) + v68;
      *(_QWORD *)(a1 + 192) += v46;
      *(_QWORD *)(a1 + 200) = v125;
      *((_QWORD *)a2 + 11) += v68;
      free(v48);
      free(v50);
      if (dword_100050770)
        sub_100036EF4();
      v88 = 3;
      sub_10001BE54(3, "decompress_state transition %d -> %d", v126, v127, v128, v129, v130, v131, dword_100050760);
      dword_100050760 = 4;
      v21 = v364;
    }
LABEL_132:
    ;
  }
  while (v88 == 3);
  if (v88 == 2)
    return 1;
  v22 = v363;
  if (v88 != 1)
  {
LABEL_320:
    if (v21)
      goto LABEL_381;
    goto LABEL_382;
  }
  if (!*(_DWORD *)(*(_QWORD *)a2 + 36) && !sub_10000D864(0, 0, a1, (uint64_t)a2))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000368CC();
    sub_10001BF64("buf_copy");
    goto LABEL_320;
  }
  if (*(_QWORD *)(a1 + 248))
    sub_100036DC4();
  CC_MD4_Final(md, (CC_MD4_CTX *)(a1 + 96));
  v141 = v360;
  v140 = v362;
  if (!sub_10001A524((uint64_t)a2, *(_DWORD *)(a1 + 232), (char *)v415, 0x10uLL))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000368FC();
    sub_10001C094("io_read_buf");
    goto LABEL_283;
  }
  v142 = v415[0] == *(_QWORD *)md && v415[1] == v417;
  if (v142)
  {
    v211 = v21 + 152 * v366;
    v213 = *(_DWORD *)(v211 + 112);
    v212 = (unsigned int *)(v211 + 112);
    v151 = v213 & 0xFFFFFFFC | 1;
    *v212 = v151;
    v214 = *((_QWORD *)a2 + 10);
    ++*((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 10) = v214 + *((_QWORD *)v212 - 9);
    if (*(_DWORD *)(*(_QWORD *)a2 + 36))
    {
LABEL_313:
      sub_10000A338((uint64_t)a2, a1, (v151 >> 1) & 1);
      return 1;
    }
    if (*(_DWORD *)(*(_QWORD *)a2 + 152))
    {
      if (fstatat(*(_DWORD *)(a1 + 224), *v363, &v367, 0) == -1)
      {
        if (*__error() != 2)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036B8C();
          sub_10001BFE8("%s: stat during --backup", v252, v253, v254, v255, v256, v257, v258, (char)*v363);
          goto LABEL_381;
        }
      }
      else
      {
        v225 = *(const char **)(*(_QWORD *)a2 + 160);
        if (v225)
        {
          if (dword_100050EE8)
          {
            v226 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
            {
              v352 = *v363;
              size[0] = 136315394;
              *(_QWORD *)&size[1] = v352;
              v413 = 2080;
              v414 = v225;
              _os_log_debug_impl((void *)&_mh_execute_header, v226, OS_LOG_TYPE_DEBUG, "%s: doing backup-dir to %s", (uint8_t *)size, 0x16u);
            }
          }
          sub_10001BE54(2, "%s: doing backup-dir to %s", v219, v220, v221, v222, v223, v224, (char)*v363);
          v227 = *v363;
          v228 = (uint64_t)(*v363 - 2);
          do
          {
            v229 = strncmp(v227, "./", 2uLL);
            v227 += 2;
            v228 += 2;
          }
          while (!v229);
          if (snprintf((char *)size, 0x400uLL, "%s/%s%s", *(const char **)(*(_QWORD *)a2 + 160), v227 - 2, *(const char **)(*(_QWORD *)a2 + 168)) >= 1025)
          {
            if (dword_100050EE8)
            {
              v237 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
                v353 = *v363;
                v355 = *(_QWORD *)(*(_QWORD *)a2 + 160);
                v354 = *(_QWORD *)(*(_QWORD *)a2 + 168);
                *(_DWORD *)buf = 136316162;
                v403 = v353;
                v404 = 2080;
                v405 = v355;
                v406 = 2080;
                v407 = v228;
                v408 = 2080;
                v409 = v354;
                v410 = 1024;
                v411 = 1024;
                _os_log_error_impl((void *)&_mh_execute_header, v237, OS_LOG_TYPE_ERROR, "%s: backup-dir: compound backup path too long: %s/%s%s > %d", buf, 0x30u);
              }
            }
            sub_10001BFE8("%s: backup-dir: compound backup path too long: %s/%s%s > %d", v230, v231, v232, v233, v234, v235, v236, (char)*v363);
            goto LABEL_381;
          }
          v141 = v360;
          v140 = v362;
          if (sub_100009584((uint64_t)a2, *(_DWORD *)(a1 + 224), v363, (const char *)size, v367.st_mode) == -1)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100036D5C();
            sub_10001BFE8("%s: backup_to_dir: %s", v275, v276, v277, v278, v279, v280, v281, (char)*v363);
            goto LABEL_381;
          }
        }
        else
        {
          v141 = v360;
          if ((v367.st_mode & 0xF000) != 0x4000)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
              sub_100036CF0();
            sub_10001BE54(2, "%s: doing backup", v219, v220, v221, v222, v223, v224, (char)*v363);
            if (snprintf((char *)size, 0x400uLL, "%s%s", *v363, *(const char **)(*(_QWORD *)a2 + 168)) >= 1025)
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_100036BEC();
              sub_10001BFE8("%s: backup: compound backup path too long: %s%s > %d", v268, v269, v270, v271, v272, v273, v274, (char)*v363);
              goto LABEL_381;
            }
            v140 = v362;
            if (sub_100009BA8(*(_DWORD *)(a1 + 224), *v363, *(_DWORD *)(a1 + 224), (const char *)size, 1) == -1)
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_100036C88();
              sub_10001BFE8("%s: move_file: %s", v282, v283, v284, v285, v286, v287, v288, (char)*v363);
              goto LABEL_381;
            }
          }
        }
      }
    }
    if (!sub_100022948((uint64_t)a2, *(_DWORD *)(a1 + 80) == -1, *(_DWORD *)(a1 + 84), (uint64_t *)v363, *(_QWORD *)(a1 + 88)))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003692C();
      sub_10001C094("rsync_set_metadata");
      goto LABEL_283;
    }
    if (a2[41])
      sub_10001C444(a2, (uint64_t)v363, 1);
    if (*(_DWORD *)(*(_QWORD *)a2 + 196))
    {
      v289 = v140;
      v290 = (_QWORD *)*v140;
      if (v290)
      {
        v291 = *((_DWORD *)v289 + 6);
        if (v291 < 1)
          v292 = 0;
        else
          v292 = (char *)&v290[4 * (v291 - 1)];
      }
      else
      {
        v295 = malloc_type_calloc(count, 0x20uLL, 0x700409A72FACAuLL);
        *v289 = v295;
        if (!v295)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_1000369BC();
          sub_10001BFE8("malloc dlrenamer entries", v296, v297, v298, v299, v300, v301, v302, (char)v356);
          if (v21)
            goto LABEL_381;
          goto LABEL_382;
        }
        v290 = v295;
        v291 = 0;
        v292 = 0;
        *((_DWORD *)v289 + 6) = 0;
      }
      *((_DWORD *)v362 + 6) = v291 + 1;
      v303 = *v363;
      v304 = strrchr((char *)*v363, 47);
      if (v304)
        v305 = v304 + 1;
      else
        v305 = (char *)v303;
      v306 = (_DWORD)v305 - (_DWORD)v303;
      if (v305 != v303 && *(v305 - 1) != 47)
        sub_100036B64();
      if (snprintf((char *)size, 0x400uLL, "%.*s.~tmp~", v306, v303) >= 1025)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000369EC();
        sub_10001BFE8("%s: delayed-update: compound path too long: %.*s.~tmp~ > %d", v307, v308, v309, v310, v311, v312, v313, (char)*v363);
        goto LABEL_381;
      }
      if (v292 && (v314 = (const char *)*((_QWORD *)v292 + 3), !strcmp((const char *)size, v314)))
      {
        v290[4 * v291 + 3] = v314;
        *((_QWORD *)v292 + 3) = 0;
      }
      else
      {
        v315 = strdup((const char *)size);
        v316 = (char *)&v290[4 * v291];
        *((_QWORD *)v316 + 3) = v315;
        v317 = (void **)(v316 + 24);
        if (!v315)
        {
          if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_524;
          goto LABEL_523;
        }
        if (mkdirat(*(_DWORD *)(a1 + 224), v315, 0x1C0u) == -1 && *__error() != 17)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036B04();
          sub_10001BFE8("mkdir '%s'", v318, v319, v320, v321, v322, v323, v324, (char)*v317);
          free(*v317);
          *v317 = 0;
          goto LABEL_381;
        }
      }
      v293 = (char *)size;
      if (snprintf((char *)size, 0x400uLL, "%s/%s", (const char *)v290[4 * v291 + 3], &(*v363)[v306]) >= 1025)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100036A80();
        sub_10001BFE8("%s: delayed-update: compound path too long: .~tmp~/%s > %d", v325, v326, v327, v328, v329, v330, v331, (char)*v363);
        goto LABEL_381;
      }
      v294 = 0;
    }
    else
    {
      v293 = (char *)*v363;
      if (*(_DWORD *)(*(_QWORD *)a2 + 200))
        v294 = (const char **)sub_10002325C((uint64_t)v363, v141);
      else
        v294 = 0;
    }
    v332 = *(_QWORD *)a2;
    if (!*(_DWORD *)(*(_QWORD *)a2 + 40) && !*(_DWORD *)(v332 + 12))
    {
      v142 = *(_QWORD *)(v332 + 544) == 0;
      v333 = 228;
      if (v142)
        v333 = 224;
      v334 = *(_DWORD *)(a1 + v333);
      v335 = *(int *)(v21 + 152 * v366 + 8) >= 0 ? *(_DWORD *)(v21 + 152 * v366 + 8) : v334;
      if (!sub_100001874((uint64_t)a2, (uint64_t)v363, v335, *(const char **)(a1 + 88), *(_DWORD *)(a1 + 224), v293, v293 == *v363))goto LABEL_381;
    }
    if (!sub_100001CF4((uint64_t)a2, (uint64_t)v363, *(_DWORD *)(a1 + 224), v293))
      goto LABEL_381;
    if (!*(_DWORD *)(*(_QWORD *)a2 + 196))
    {
      *v212 |= 4u;
      if (v294)
      {
        if (unlinkat(*(_DWORD *)(a1 + 224), *v363, 0) == -1 && *__error() != 2)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003698C();
          sub_10001C094("unlink");
        }
        if (linkat(*(_DWORD *)(a1 + 224), *v294, *(_DWORD *)(a1 + 224), *v363, 0) == -1)
        {
          sub_10001BE54(-1, "While hard linking '%s' to '%s' ", v340, v341, v342, v343, v344, v345, (char)*v294);
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003695C();
          sub_10001C094("linkat");
        }
      }
      goto LABEL_520;
    }
    v336 = *v362;
    v337 = *((int *)v362 + 6) - 1;
    v338 = strdup(v293);
    *(_QWORD *)(v336 + 32 * v337) = v338;
    if (v338)
    {
      v339 = v336 + 32 * v337;
      *(_QWORD *)(v339 + 16) = v363;
      *(_QWORD *)(v339 + 8) = *v363;
LABEL_520:
      v346 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 152 * *(_QWORD *)(a1 + 8) + 40);
      sub_10000D624((uint64_t)a2, v346, v346, 1);
      sub_10000DB1C((uint64_t)a2, a1, (uint64_t *)v363, v347, v348, v349, v350, v351);
      v151 = *v212;
      goto LABEL_313;
    }
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    {
LABEL_524:
      v218 = "strdup";
      goto LABEL_330;
    }
LABEL_523:
    sub_100036664();
    goto LABEL_524;
  }
  if (dword_100050EE8)
  {
    v143 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      v144 = *(_QWORD *)(a1 + 88);
      if ((*(_DWORD *)(v21 + 152 * v366 + 112) & 2) != 0)
        v145 = "will not";
      else
        v145 = "will";
      size[0] = 136315394;
      *(_QWORD *)&size[1] = v144;
      v413 = 2080;
      v414 = v145;
      _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_INFO, "%s: hash does not match, %s redo", (uint8_t *)size, 0x16u);
    }
  }
  v146 = v21 + 152 * v366;
  v148 = *(_DWORD *)(v146 + 112);
  v147 = (int *)(v146 + 112);
  if ((v148 & 2) != 0)
    v149 = "will not";
  else
    v149 = "will";
  sub_10001C1CC("%s: hash does not match, %s redo", *(const char **)(a1 + 88), v149);
  v150 = *v147;
  if ((*v147 & 2) == 0)
  {
    v151 = v150 | 2;
    *v147 = v151;
    ++*(_QWORD *)(a1 + 264);
    goto LABEL_313;
  }
  *v147 = v150 | 8;
LABEL_381:
  *((_DWORD *)v22 + 28) |= 8u;
LABEL_382:
  sub_10000A338((uint64_t)a2, a1, 1);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10000D3D8(uint64_t *a1, const char *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uid_t v9;
  uid_t v10;
  BOOL v11;
  gid_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uid_t v27;
  __int16 v28;
  gid_t v29;

  v8 = *a1;
  if (*(_DWORD *)(*a1 + 92))
  {
    v9 = -1;
  }
  else
  {
    v10 = geteuid();
    if (*(_DWORD *)(a4 + 16))
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
      v9 = *(_DWORD *)(a4 + 16);
    else
      v9 = -1;
    v8 = *a1;
  }
  if (*(_DWORD *)(v8 + 88))
  {
    v12 = -1;
  }
  else if (getegid() == *(_DWORD *)(a4 + 20))
  {
    v12 = -1;
  }
  else
  {
    v12 = *(_DWORD *)(a4 + 20);
  }
  v13 = *(_WORD *)(a4 + 4);
  if ((v12 & v9) != 0xFFFFFFFF && fchown(a3, v9, v12) == -1)
  {
    if (*__error() != 1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037194();
      v23 = "%s: fchown";
      goto LABEL_34;
    }
    if (!geteuid())
    {
      if (dword_100050EE8)
      {
        v22 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v25 = a2;
          v26 = 1024;
          v27 = v9;
          v28 = 1024;
          v29 = v12;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s: identity unknown or not available to user.group: %u.%u", buf, 0x18u);
        }
      }
      sub_10001C1CC("%s: identity unknown or not available to user.group: %u.%u", a2, v9, v12);
    }
  }
  if (*(_DWORD *)(*a1 + 60) || fchmod(a3, v13 & 0xFFF) != -1)
    return 1;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037134();
  }
  v23 = "%s: fchmod";
LABEL_34:
  sub_10001BFE8(v23, v14, v15, v16, v17, v18, v19, v20, (char)a2);
  return 0;
}

uint64_t sub_10000D624(uint64_t result, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v7;
  double v8;
  double v9;
  double v11;
  timeval v12;

  if (*(_DWORD *)(*(_QWORD *)result + 136))
  {
    v7 = result;
    v12.tv_sec = 0;
    *(_QWORD *)&v12.tv_usec = 0;
    result = gettimeofday(&v12, 0);
    v8 = (double)v12.tv_usec / 1000000.0 + (double)v12.tv_sec;
    v9 = *(double *)(v7 + 152);
    if (v9 == 0.0)
    {
LABEL_16:
      *(double *)(v7 + 152) = v8;
      return result;
    }
    if (v8 - v9 >= 0.1 || a4 != 0)
    {
      fprintf(__stderrp, " %14llu", a3);
      fprintf(__stderrp, " %3.0f%%", (double)a3 / (double)a2 * 100.0);
      v11 = (double)a3 / (v8 - *(double *)(v7 + 152));
      if (v11 <= 1073741820.0)
      {
        if (v11 <= 1048576.0)
        {
          if (v11 > 1024.0)
            fprintf(__stderrp, " %7.2fKB/s");
        }
        else
        {
          fprintf(__stderrp, " %7.2fMB/s");
        }
      }
      else
      {
        fprintf(__stderrp, " %7.2fGB/s");
      }
      fprintf(__stderrp, "   %02d:%02d:%02d", (int)((double)(a2 - a3) / v11) / 3600, (int)((double)(a2 - a3) / v11) % 3600 / 60, (int)((double)(a2 - a3) / v11) % 60);
      if (a4)
        result = fprintf(__stderrp, "\n");
      else
        result = fprintf(__stderrp, "\r");
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_10000D864(char *__buf, size_t __nbyte, uint64_t a3, uint64_t a4)
{
  size_t v5;
  size_t v6;
  size_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  ssize_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  ssize_t v29;

  v5 = *(_QWORD *)(a3 + 248);
  v6 = *(_QWORD *)(a3 + 256);
  if (v6 < v5)
    sub_1000371F4();
  v8 = __nbyte;
  v9 = __buf;
  if (__nbyte)
  {
    v10 = v6 - v5;
    if (v6 > v5)
    {
      v11 = *(_QWORD *)(a3 + 240);
      if (!v11)
        sub_1000373B4();
      if (v10 >= __nbyte)
        v12 = __nbyte;
      else
        v12 = v10;
      memcpy((void *)(v11 + v5), __buf, v12);
      v6 = *(_QWORD *)(a3 + 256);
      v5 = *(_QWORD *)(a3 + 248) + v12;
      *(_QWORD *)(a3 + 248) = v5;
      if (v5 > v6)
        sub_1000373DC();
      v8 -= v12;
      if (!v8)
        return 1;
      v9 += v12;
    }
  }
  if (v5)
  {
    if (!v6)
      sub_1000372DC();
    if (v5 > v6)
      sub_100037304();
    v13 = *(const void **)(a3 + 240);
    if (!v13)
      sub_10003732C();
    if (*(_DWORD *)(*(_QWORD *)a4 + 144))
    {
      if (sub_10000900C(*(_BYTE **)(a3 + 240), v5))
      {
        if (lseek(*(_DWORD *)(a3 + 84), *(_QWORD *)(a3 + 248), 1) == -1)
        {
          if (dword_100050EE8)
          {
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100037354();
          }
          sub_10001BFE8("%s: lseek", v14, v15, v16, v17, v18, v19, v20, *(_QWORD *)(a3 + 88));
          return 0;
        }
LABEL_25:
        *(_QWORD *)(a3 + 248) = 0;
        goto LABEL_26;
      }
      v13 = *(const void **)(a3 + 240);
      v5 = *(_QWORD *)(a3 + 248);
    }
    v21 = write(*(_DWORD *)(a3 + 84), v13, v5);
    if (v21 < 0)
    {
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
      goto LABEL_35;
    }
    if (v21 != *(_QWORD *)(a3 + 248))
    {
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_43;
      goto LABEL_42;
    }
    goto LABEL_25;
  }
LABEL_26:
  if (!v8)
    return 1;
  v29 = write(*(_DWORD *)(a3 + 84), v9, v8);
  if ((v29 & 0x8000000000000000) == 0)
  {
    if (v29 == v8)
      return 1;
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_43;
LABEL_42:
    sub_10003727C();
LABEL_43:
    sub_10001BF64("%s: short write", *(const char **)(a3 + 88));
    return 0;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_35:
    sub_10003721C();
LABEL_36:
  sub_10001BFE8("%s: write", v22, v23, v24, v25, v26, v27, v28, *(_QWORD *)(a3 + 88));
  return 0;
}

void sub_10000DB1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  float v10;
  double v11;
  float v12;
  double v13;
  const char *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  double v27;

  if (!*(_DWORD *)(*(_QWORD *)a1 + 4))
  {
    v9 = *(_QWORD *)(a2 + 200);
    v10 = (float)v9;
    if (v9)
    {
      v11 = (double)v9;
      v12 = (double)*(uint64_t *)(a2 + 192) * 100.0 / (double)v9;
      v13 = v12;
      if (v9 < 1073741825)
      {
        if (v9 <= 0x100000)
        {
          if (v9 < 1025)
          {
            v15 = 0;
            v14 = "B";
          }
          else
          {
            v10 = v11 * 0.0009765625;
            v14 = "KB";
            v15 = 1;
          }
        }
        else
        {
          v10 = v11 * 0.000000953674316;
          v14 = "MB";
          v15 = 2;
        }
      }
      else
      {
        v10 = v11 * 9.31322575e-10;
        v14 = "GB";
        v15 = 3;
      }
    }
    else
    {
      v15 = 0;
      v14 = "B";
      v13 = 100.0;
    }
    if (dword_100050EE8)
    {
      v16 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *a3;
        *(_DWORD *)buf = 136316162;
        v19 = v17;
        v20 = 1024;
        v21 = v15;
        v22 = 2048;
        v23 = v10;
        v24 = 2080;
        v25 = v14;
        v26 = 2048;
        v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s (%.*f %s, %.1f%% downloaded)", buf, 0x30u);
      }
    }
    sub_10001BE54(0, "%s (%.*f %s, %.1f%% downloaded)", (uint64_t)a3, a4, a5, a6, a7, a8, *a3);
  }
}

uint64_t sub_10000DD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;

  if (dword_100050760)
  {
    v0 = 1;
    if (dword_100050760 >= 4)
    {
      qword_100050768 = 0;
      dword_100050770 = 0;
      qword_100050780 = 0;
      dword_100050788 = 0;
      sub_100016BC8(&qword_100050768);
      sub_10001BE54(3, "decompress_state transition %d -> %d", v1, v2, v3, v4, v5, v6, dword_100050760);
      dword_100050760 = 1;
    }
  }
  else
  {
    qword_100050768 = 0;
    dword_100050770 = 0;
    qword_100050780 = 0;
    dword_100050788 = 0;
    qword_1000507A8 = 0;
    unk_1000507B0 = 0;
    v7 = sub_100016C30(&qword_100050768, -15, "1.2.3", 112);
    if (v7)
    {
      v14 = v7;
      if (dword_100050EE8)
      {
        v15 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037404(v14, v15, v16);
      }
      sub_10001BF64("inflateInit2 res=%d", v14);
      return 0;
    }
    else
    {
      v0 = 1;
      sub_10001BE54(3, "decompress_state transition %d -> %d", v8, v9, v10, v11, v12, v13, dword_100050760);
      dword_100050760 = 1;
    }
  }
  return v0;
}

uint64_t sub_10000DE3C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  void *v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  NSObject *v33;
  const char *v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  uint64_t v40;
  const char *v42;
  char v43;
  __int16 v44;
  __int16 v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  unint64_t v51;

  v5 = *(_QWORD *)(a2 + 56);
  if (v5 <= a3)
  {
    if (dword_100050EE8)
    {
      v18 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        v34 = *(const char **)(a2 + 88);
        *(_DWORD *)buf = 136315650;
        v47 = v34;
        v48 = 2048;
        v49 = a3;
        v50 = 2048;
        v51 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%s: token not in block set: %zu (have %zu blocks)", buf, 0x20u);
      }
    }
    sub_10001BF64("%s: token not in block set: %zu (have %zu blocks)");
    return 0;
  }
  if (v5 - 1 != a3 || (v7 = *(_QWORD *)(a2 + 24)) == 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    if (!v7)
      sub_10003746C();
  }
  v8 = *(_QWORD *)(a2 + 64);
  if (v8 == -1)
    sub_100037494();
  v9 = *(_QWORD *)(a2 + 32) * a3;
  v10 = (char *)(v8 + v9);
  v11 = *a1;
  if (!*(_DWORD *)(*a1 + 40) && !*(_DWORD *)(v11 + 12)
    || (*(_DWORD *)(a2 + 80) & 0x80000000) != 0
    || *(_QWORD *)(a2 + 200) != v9)
  {
    if (sub_10000D864(v10, v7, a2, (uint64_t)a1))
      goto LABEL_22;
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_72;
LABEL_71:
    sub_1000368CC();
LABEL_72:
    sub_10001BF64("buf_copy");
    return 0;
  }
  if (!*(_DWORD *)(v11 + 36) && !sub_10000D864(0, 0, a2, (uint64_t)a1))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_72;
    goto LABEL_71;
  }
  if (lseek(*(_DWORD *)(a2 + 84), v7, 1) == -1)
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100036694();
    }
    sub_10001C094("lseek");
    return 0;
  }
LABEL_22:
  v19 = *a1;
  if (*(_DWORD *)(*a1 + 36))
    goto LABEL_25;
  if (!sub_10000D864(0, 0, a2, (uint64_t)a1))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_72;
    goto LABEL_71;
  }
  v19 = *a1;
LABEL_25:
  if (*(_DWORD *)(v19 + 552))
  {
    v20 = *(_QWORD *)(a2 + 56);
    if (v20 <= a3)
    {
      if (dword_100050EE8)
      {
        v33 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
          v42 = *(const char **)(a2 + 88);
          *(_DWORD *)buf = 136315650;
          v47 = v42;
          v48 = 2048;
          v49 = a3;
          v50 = 2048;
          v51 = v20;
          _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%s: token not in block set: %zu (have %zu blocks)", buf, 0x20u);
        }
      }
      sub_10001BF64("%s: token not in block set: %zu (have %zu blocks)");
    }
    else
    {
      if (v20 - 1 != a3 || (v21 = *(_QWORD *)(a2 + 24)) == 0)
      {
        v21 = *(_QWORD *)(a2 + 32);
        if (!v21)
          sub_1000374EC();
      }
      v22 = *(_QWORD *)(a2 + 64);
      if (v22 == -1)
        sub_100037514();
      v23 = *(_QWORD *)(a2 + 32);
      if (sub_10000DD18())
      {
        v24 = malloc_type_malloc(0x8030uLL, 0x4AB74D25uLL);
        if (v24)
        {
          v29 = v24;
          v30 = 0;
          dword_100050770 = 0;
          v43 = 0;
LABEL_34:
          if (v30)
          {
            qword_100050768 = v22 + v23 * a3;
            dword_100050770 = v30;
            v21 -= v30;
            v30 = 0;
          }
          else
          {
            if (v21 >= 0xFFFF)
              v30 = 0xFFFFLL;
            else
              v30 = v21;
            v44 = v30;
            v45 = ~(_WORD)v30;
            qword_100050768 = (uint64_t)&v43;
            dword_100050770 = 5;
          }
          while (1)
          {
            qword_100050780 = (uint64_t)v29;
            dword_100050788 = 32816;
            v31 = sub_100016D20((unsigned __int8 **)&qword_100050768, 2uLL, v25, v26, v27, v28);
            if (v31)
              break;
            if (dword_100050788)
              v32 = v21 == 0;
            else
              v32 = 1;
            if (v32)
            {
              free(v29);
              goto LABEL_83;
            }
            if (!dword_100050770)
              goto LABEL_34;
          }
          v35 = v31;
          if (dword_100050EE8)
          {
            v36 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003759C(v35, v36, v37);
          }
          sub_10001BF64("inflate ff res=%d", v35);
          v38 = (const char *)qword_100050798;
          if (qword_100050798)
          {
            if (dword_100050EE8)
            {
              v39 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315138;
                v47 = v38;
                _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "inflate error: %s", buf, 0xCu);
                v38 = (const char *)qword_100050798;
              }
            }
            sub_10001BF64("inflate error: %s", v38);
          }
          free(v29);
        }
        else
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036390();
          sub_10001C094("malloc");
        }
      }
      else
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003756C();
        sub_10001BF64("decompress_reinit");
      }
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003753C();
    sub_10001C094("protocol_token_ff_compress");
  }
  else
  {
LABEL_83:
    *(_QWORD *)(a2 + 200) += v7;
    a1[12] += v7;
    sub_10001BE54(3, "%s: copied %zu B", v12, v13, v14, v15, v16, v17, *(_QWORD *)(a2 + 88));
    do
    {
      if (v7 >= 0xFFFFFFFF)
        v40 = 0xFFFFFFFFLL;
      else
        v40 = v7;
      CC_MD4_Update((CC_MD4_CTX *)(a2 + 96), v10, v40);
      v10 += v40;
      v7 -= v40;
    }
    while (v7);
    if ((sub_1000196F4((uint64_t)a1, *(_DWORD *)(a2 + 232)) & 0x80000000) == 0)
      return 3;
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000374BC();
    sub_10001C094("io_read_check");
  }
  return 0;
}

void sub_10000E558(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

_BYTE *sub_10000E564(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void sub_10000E580(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_10000E58C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void sub_10000E598(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_10000E5C4(int a1, unsigned __int8 *a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;

  v3 = HIWORD(a1);
  v4 = (unsigned __int16)a1;
  if (a3 != 1)
  {
    if (!a2)
      return 1;
    if (a3 < 0x10)
    {
      for (; a3; --a3)
      {
        v9 = *a2++;
        v4 += v9;
        v3 += v4;
      }
      if (v4 > 0xFFF0)
        v4 -= 65521;
      v3 %= 0xFFF1uLL;
      return v4 | (v3 << 16);
    }
    if (a3 >> 4 >= 0x15B)
    {
      do
      {
        a3 -= 5552;
        v10 = -347;
        v11 = a2;
        do
        {
          v12 = v4 + *v11;
          v13 = v12 + v3;
          v14 = v12 + v11[1];
          v15 = v13 + v14;
          v16 = v14 + v11[2];
          v17 = v15 + v16;
          v18 = v16 + v11[3];
          v19 = v17 + v18;
          v20 = v18 + v11[4];
          v21 = v19 + v20;
          v22 = v20 + v11[5];
          v23 = v21 + v22;
          v24 = v22 + v11[6];
          v25 = v23 + v24;
          v26 = v24 + v11[7];
          v27 = v25 + v26;
          v28 = v26 + v11[8];
          v29 = v27 + v28;
          v30 = v28 + v11[9];
          v31 = v29 + v30;
          v32 = v30 + v11[10];
          v33 = v31 + v32;
          v34 = v32 + v11[11];
          v35 = v33 + v34;
          v36 = v34 + v11[12];
          v37 = v35 + v36;
          v38 = v36 + v11[13];
          v39 = v37 + v38;
          v40 = v38 + v11[14];
          v41 = v39 + v40;
          v4 = v40 + v11[15];
          v3 = v41 + v4;
          v11 += 16;
        }
        while (!__CFADD__(v10++, 1));
        a2 += 5552;
        v4 %= 0xFFF1uLL;
        v3 %= 0xFFF1uLL;
      }
      while (a3 >> 4 > 0x15A);
      if (!a3)
        return v4 | (v3 << 16);
      if (a3 < 0x10)
        goto LABEL_30;
    }
    do
    {
      a3 -= 16;
      v43 = v4 + *a2;
      v44 = v43 + v3;
      v45 = v43 + a2[1];
      v46 = v44 + v45;
      v47 = v45 + a2[2];
      v48 = v46 + v47;
      v49 = v47 + a2[3];
      v50 = v48 + v49;
      v51 = v49 + a2[4];
      v52 = v50 + v51;
      v53 = v51 + a2[5];
      v54 = v52 + v53;
      v55 = v53 + a2[6];
      v56 = v54 + v55;
      v57 = v55 + a2[7];
      v58 = v56 + v57;
      v59 = v57 + a2[8];
      v60 = v58 + v59;
      v61 = v59 + a2[9];
      v62 = v60 + v61;
      v63 = v61 + a2[10];
      v64 = v62 + v63;
      v65 = v63 + a2[11];
      v66 = v64 + v65;
      v67 = v65 + a2[12];
      v68 = v66 + v67;
      v69 = v67 + a2[13];
      v70 = v68 + v69;
      v71 = v69 + a2[14];
      v72 = v70 + v71;
      v4 = v71 + a2[15];
      v3 = v72 + v4;
      a2 += 16;
    }
    while (a3 > 0xF);
    if (a3)
    {
LABEL_30:
      do
      {
        v73 = *a2++;
        v4 += v73;
        v3 += v4;
        --a3;
      }
      while (a3);
    }
    v4 %= 0xFFF1uLL;
    v3 %= 0xFFF1uLL;
    return v4 | (v3 << 16);
  }
  v5 = (unsigned __int16)a1 + (unint64_t)*a2;
  if (v5 > 0xFFF0)
    v5 -= 65521;
  v6 = v5 + HIWORD(a1);
  if (v6 <= 0xFFF0)
    v7 = v6 << 16;
  else
    v7 = (v6 << 16) - 4293984256u;
  return v7 | v5;
}

char *sub_10000E8F0(int a1)
{
  if ((a1 - 1) >= 3)
    errx(1, "unknown base mode %d", a1);
  return off_10004C8E8[a1 - 1];
}

uint64_t sub_10000E934(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _DWORD *v82;
  uint64_t i;
  unsigned int v84;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;

  v89 = 0;
  v90 = 0;
  if (!a2)
    sub_100037604();
  if (!*(_QWORD *)(a2 + 24) && *(_DWORD *)(a2 + 40) == 1)
    sub_10003762C();
  if (*(_QWORD *)(*(_QWORD *)a1 + 240))
    v6 = *(char **)(*(_QWORD *)a1 + 240);
  else
    v6 = "rsync";
  if (*(_QWORD *)(a2 + 8))
  {
    v7 = *(char **)(*(_QWORD *)a1 + 248);
    if (v7 || (v7 = getenv("RSYNC_RSH")) != 0)
      sub_10000F600((uint64_t)&v89, v7);
    else
      sub_100021AF0((uint64_t)&v89, "ssh", v8, v9, v10, v11, v12, v13, v86);
    if (*(int *)(*(_QWORD *)a1 + 560) >= 1)
    {
      v20 = (char *)sub_100021B98((uint64_t)&v89, 0);
      if (v20)
      {
        v21 = v20;
        v22 = strrchr(v20, 47);
        v23 = v22 ? v22 + 1 : v21;
        if (!strcmp(v23, "ssh"))
          sub_100021AF0((uint64_t)&v89, "-%d", v14, v15, v16, v17, v18, v19, *(_DWORD *)(*(_QWORD *)a1 + 560));
      }
    }
    sub_100021AF0((uint64_t)&v89, "%s", v14, v15, v16, v17, v18, v19, *(_QWORD *)(a2 + 8));
    sub_10000F600((uint64_t)&v89, v6);
    if (a3)
      *a3 = v90;
    sub_100021AF0((uint64_t)&v89, "--server", v24, v25, v26, v27, v28, v29, v87);
    if (*(_DWORD *)(a2 + 40) != 1)
      goto LABEL_24;
    v36 = "--sender";
  }
  else
  {
    sub_10000F600((uint64_t)&v89, v6);
    v36 = "--server";
  }
  sub_100021AF0((uint64_t)&v89, v36, v30, v31, v32, v33, v34, v35, v86);
LABEL_24:
  v37 = "--delete";
  switch(*(_DWORD *)(*(_QWORD *)a1 + 96))
  {
    case 0:
      goto LABEL_30;
    case 1:
      goto LABEL_29;
    case 2:
      v37 = "--delete-before";
      goto LABEL_29;
    case 3:
      v37 = "--delete-during";
      goto LABEL_29;
    case 4:
      v37 = "--delete-delay";
      goto LABEL_29;
    case 5:
      v37 = "--delete-after";
LABEL_29:
      sub_100021AF0((uint64_t)&v89, v37, v30, v31, v32, v33, v34, v35, v86);
LABEL_30:
      v38 = *(_QWORD *)a1;
      if (*(_DWORD *)(*(_QWORD *)a1 + 12))
      {
        sub_100021AF0((uint64_t)&v89, "--append", v30, v31, v32, v33, v34, v35, v86);
        v38 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v38 + 16))
        sub_100021AF0((uint64_t)&v89, "-c", v30, v31, v32, v33, v34, v35, v86);
      if (a1[3])
        sub_100021AF0((uint64_t)&v89, "--checksum-seed=%d", v30, v31, v32, v33, v34, v35, a1[3]);
      v39 = *(_QWORD *)a1;
      if (*(_DWORD *)(*(_QWORD *)a1 + 100))
      {
        sub_100021AF0((uint64_t)&v89, "--delete-excluded", v30, v31, v32, v33, v34, v35, v86);
        v39 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v39 + 120) == 2)
      {
        sub_100021AF0((uint64_t)&v89, "--numeric-ids", v30, v31, v32, v33, v34, v35, v86);
        v39 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v39 + 88))
      {
        sub_100021AF0((uint64_t)&v89, "-g", v30, v31, v32, v33, v34, v35, v86);
        v39 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v39 + 84))
      {
        sub_100021AF0((uint64_t)&v89, "-l", v30, v31, v32, v33, v34, v35, v86);
        v39 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v39 + 36) == 2)
      {
        sub_100021AF0((uint64_t)&v89, "-n", v30, v31, v32, v33, v34, v35, v86);
        v39 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v39 + 40))
      {
        sub_100021AF0((uint64_t)&v89, "--inplace", v30, v31, v32, v33, v34, v35, v86);
        v39 = *(_QWORD *)a1;
      }
      if (*(_QWORD *)(v39 + 48) && !*(_DWORD *)(a2 + 40))
      {
        sub_100021AF0((uint64_t)&v89, "--partial-dir", v30, v31, v32, v33, v34, v35, v86);
        v86 = *(_QWORD *)(*(_QWORD *)a1 + 48);
        v40 = "%s";
        goto LABEL_54;
      }
      if (*(_DWORD *)(v39 + 44) && !*(_DWORD *)(a2 + 40))
      {
        v40 = "--partial";
LABEL_54:
        sub_100021AF0((uint64_t)&v89, v40, v30, v31, v32, v33, v34, v35, v86);
      }
      v41 = *(_DWORD **)a1;
      if (*(_DWORD *)(*(_QWORD *)a1 + 92))
      {
        sub_100021AF0((uint64_t)&v89, "-o", v30, v31, v32, v33, v34, v35, v86);
        v41 = *(_DWORD **)a1;
      }
      if (v41[15])
      {
        sub_100021AF0((uint64_t)&v89, "-p", v30, v31, v32, v33, v34, v35, v86);
        v41 = *(_DWORD **)a1;
      }
      if (v41[26])
      {
        sub_100021AF0((uint64_t)&v89, "-D", v30, v31, v32, v33, v34, v35, v86);
        v41 = *(_DWORD **)a1;
      }
      if (v41[8])
      {
        sub_100021AF0((uint64_t)&v89, "-r", v30, v31, v32, v33, v34, v35, v86);
        v41 = *(_DWORD **)a1;
      }
      if (v41[14])
      {
        sub_100021AF0((uint64_t)&v89, "-t", v30, v31, v32, v33, v34, v35, v86);
        v41 = *(_DWORD **)a1;
      }
      if (v41[32])
      {
        sub_100021AF0((uint64_t)&v89, "-O", v30, v31, v32, v33, v34, v35, v86);
        v41 = *(_DWORD **)a1;
      }
      if (v41[36])
      {
        sub_100021AF0((uint64_t)&v89, "-S", v30, v31, v32, v33, v34, v35, v86);
        v41 = *(_DWORD **)a1;
      }
      if (v41[50])
      {
        sub_100021AF0((uint64_t)&v89, "-H", v30, v31, v32, v33, v34, v35, v86);
        v41 = *(_DWORD **)a1;
      }
      if (v41[37])
        sub_100021AF0((uint64_t)&v89, "-u", v30, v31, v32, v33, v34, v35, v86);
      v42 = dword_100050EEC;
      if (dword_100050EEC > 3)
      {
        sub_100021AF0((uint64_t)&v89, "-v", v30, v31, v32, v33, v34, v35, v86);
        v42 = dword_100050EEC;
      }
      if (v42 > 2)
      {
        sub_100021AF0((uint64_t)&v89, "-v", v30, v31, v32, v33, v34, v35, v86);
        v42 = dword_100050EEC;
      }
      if (v42 > 1)
      {
        sub_100021AF0((uint64_t)&v89, "-v", v30, v31, v32, v33, v34, v35, v86);
        v42 = dword_100050EEC;
      }
      if (v42 >= 1)
        sub_100021AF0((uint64_t)&v89, "-v", v30, v31, v32, v33, v34, v35, v86);
      v43 = *(_QWORD *)a1;
      v44 = *(_DWORD *)(*(_QWORD *)a1 + 176);
      if (v44 > 1)
      {
        sub_100021AF0((uint64_t)&v89, "-h", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
        v44 = *(_DWORD *)(*(_QWORD *)a1 + 176);
      }
      if (v44 >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "-h", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 512) >= 1 && !*(_DWORD *)(v43 + 12))
      {
        sub_100021AF0((uint64_t)&v89, "-W", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 136) >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "--progress", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 152) >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "--backup", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_QWORD *)(v43 + 160))
      {
        sub_100021AF0((uint64_t)&v89, "--backup-dir", v30, v31, v32, v33, v34, v35, v86);
        sub_100021AF0((uint64_t)&v89, "%s", v45, v46, v47, v48, v49, v50, *(_QWORD *)(*(_QWORD *)a1 + 160));
        v43 = *(_QWORD *)a1;
      }
      v51 = *(_BYTE **)(v43 + 168);
      if (v51 && strcmp(*(const char **)(v43 + 168), "~") && *v51)
      {
        sub_100021AF0((uint64_t)&v89, "--suffix", v30, v31, v32, v33, v34, v35, v86);
        sub_100021AF0((uint64_t)&v89, "%s", v52, v53, v54, v55, v56, v57, *(_QWORD *)(*(_QWORD *)a1 + 168));
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 180) >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "--ignore-existing", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 184) >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "--ignore-non-existing", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      v58 = *(_DWORD *)(v43 + 124);
      if (v58 > 1)
      {
        sub_100021AF0((uint64_t)&v89, "-x", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
        v58 = *(_DWORD *)(*(_QWORD *)a1 + 124);
      }
      if (v58 >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "-x", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 552))
      {
        sub_100021AF0((uint64_t)&v89, "-z", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
        if (*(_DWORD *)(*(_QWORD *)a1 + 552))
        {
          if (*(_DWORD *)(v43 + 556) != -1)
          {
            sub_100021AF0((uint64_t)&v89, "--compress-level=%d", v30, v31, v32, v33, v34, v35, *(_DWORD *)(v43 + 556));
            v43 = *(_QWORD *)a1;
          }
        }
      }
      if (!*(_DWORD *)(v43 + 108)
        || !*(_DWORD *)(v43 + 104)
        && (sub_100021AF0((uint64_t)&v89, "--specials", v30, v31, v32, v33, v34, v35, v86),
            v43 = *(_QWORD *)a1,
            !*(_DWORD *)(*(_QWORD *)a1 + 108)))
      {
        if (*(_DWORD *)(v43 + 104))
        {
          sub_100021AF0((uint64_t)&v89, "--no-specials", v30, v31, v32, v33, v34, v35, v86);
          v43 = *(_QWORD *)a1;
        }
      }
      if ((*(_QWORD *)(v43 + 224) & 0x8000000000000000) == 0)
      {
        sub_100021AF0((uint64_t)&v89, "--max-size=%lld", v30, v31, v32, v33, v34, v35, *(_QWORD *)(v43 + 224));
        v43 = *(_QWORD *)a1;
      }
      if ((*(_QWORD *)(v43 + 232) & 0x8000000000000000) == 0)
      {
        sub_100021AF0((uint64_t)&v89, "--min-size=%lld", v30, v31, v32, v33, v34, v35, *(_QWORD *)(v43 + 232));
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 188) >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "--relative", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 192))
      {
        sub_100021AF0((uint64_t)&v89, "--dirs", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 196) >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "--delay-updates", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 64))
      {
        sub_100021AF0((uint64_t)&v89, "-L", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 68))
      {
        sub_100021AF0((uint64_t)&v89, "--copy-unsafe-links", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 72))
      {
        sub_100021AF0((uint64_t)&v89, "--safe-links", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 76))
      {
        sub_100021AF0((uint64_t)&v89, "-k", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 80))
      {
        sub_100021AF0((uint64_t)&v89, "-K", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 204))
      {
        sub_100021AF0((uint64_t)&v89, "--remove-source-files", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 600))
      {
        sub_100021AF0((uint64_t)&v89, "--extended-attributes", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (!*(_DWORD *)(a2 + 40))
      {
        if (*(int *)(v43 + 132) < 1
          || (sub_100021AF0((uint64_t)&v89, "--ignore-times", v30, v31, v32, v33, v34, v35, v86),
              v43 = *(_QWORD *)a1,
              !*(_DWORD *)(a2 + 40)))
        {
          if (*(_DWORD *)(v43 + 580))
          {
            sub_100021AF0((uint64_t)&v89, "--fuzzy", v30, v31, v32, v33, v34, v35, v86);
            v43 = *(_QWORD *)a1;
          }
        }
      }
      if (*(_QWORD *)(v43 + 448))
      {
        sub_100021AF0((uint64_t)&v89, "--out-format=%s", v30, v31, v32, v33, v34, v35, *(_QWORD *)(v43 + 448));
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 212) >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "-8", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      v59 = *(_QWORD *)(v43 + 472);
      if (v59 >= 1024)
      {
        sub_100021AF0((uint64_t)&v89, "--bwlimit=%lld", v30, v31, v32, v33, v34, v35, (unint64_t)v59 >> 10);
        v43 = *(_QWORD *)a1;
      }
      if (*(int *)(v43 + 576) >= 1)
      {
        sub_100021AF0((uint64_t)&v89, "--modify-window=%d", v30, v31, v32, v33, v34, v35, *(_DWORD *)(v43 + 576));
        v43 = *(_QWORD *)a1;
      }
      if (!*(_DWORD *)(a2 + 40))
      {
        if (!*(_QWORD *)(v43 + 544)
          || (sub_100021AF0((uint64_t)&v89, "--temp-dir", v30, v31, v32, v33, v34, v35, v86),
              sub_100021AF0((uint64_t)&v89, "%s", v62, v63, v64, v65, v66, v67, *(_QWORD *)(*(_QWORD *)a1 + 544)),
              v43 = *(_QWORD *)a1,
              !*(_DWORD *)(a2 + 40)))
        {
          if (*(uint64_t *)(v43 + 488) >= 1)
          {
            sub_100021AF0((uint64_t)&v89, "-B%ld", v30, v31, v32, v33, v34, v35, *(_QWORD *)(v43 + 488));
            v43 = *(_QWORD *)a1;
          }
        }
      }
      if (*(_DWORD *)(v43 + 564))
      {
        sub_100021AF0((uint64_t)&v89, "--force", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 568))
      {
        sub_100021AF0((uint64_t)&v89, "--ignore-errors", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 572))
      {
        sub_100021AF0((uint64_t)&v89, "--executability", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v43 + 584))
      {
        sub_100021AF0((uint64_t)&v89, "-q", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      if (*(_QWORD *)(v43 + 592))
      {
        sub_100021AF0((uint64_t)&v89, "--max-delete=%ld", v30, v31, v32, v33, v34, v35, *(_QWORD *)(v43 + 592));
        v43 = *(_QWORD *)a1;
      }
      if (!*(_DWORD *)(v43 + 112))
      {
        sub_100021AF0((uint64_t)&v89, "--cache", v30, v31, v32, v33, v34, v35, v86);
        v43 = *(_QWORD *)a1;
      }
      v60 = *(_DWORD *)(v43 + 208);
      if (v60)
      {
        if (v60 == 1)
        {
          v61 = "--super";
        }
        else
        {
          if (v60 != 2)
            sub_100037654();
          v61 = "--no-super";
        }
        sub_100021AF0((uint64_t)&v89, v61, v30, v31, v32, v33, v34, v35, v86);
      }
      if (*(_QWORD *)(*(_QWORD *)a1 + 432) && *(_QWORD *)(*(_QWORD *)a1 + 496))
      {
        sub_100021AF0((uint64_t)&v89, "--files-from", v30, v31, v32, v33, v34, v35, v86);
        sub_100021AF0((uint64_t)&v89, "%s", v68, v69, v70, v71, v72, v73, *(_QWORD *)(*(_QWORD *)a1 + 504));
        v74 = *(int **)a1;
        if (!*(_DWORD *)(*(_QWORD *)a1 + 188))
        {
          sub_100021AF0((uint64_t)&v89, "--no-relative", v30, v31, v32, v33, v34, v35, v86);
          v74 = *(int **)a1;
        }
        if (!v74[48])
        {
          sub_100021AF0((uint64_t)&v89, "--no-dirs", v30, v31, v32, v33, v34, v35, v86);
          v74 = *(int **)a1;
        }
        if (v74[8] >= 1)
        {
          sub_100021AF0((uint64_t)&v89, "--recursive", v30, v31, v32, v33, v34, v35, v86);
          v74 = *(int **)a1;
        }
        if (v74[110])
          sub_100021AF0((uint64_t)&v89, "--from0", v30, v31, v32, v33, v34, v35, v86);
      }
      if (!*(_DWORD *)(a2 + 40))
      {
        v82 = *(_DWORD **)a1;
        if (*(_QWORD *)(*(_QWORD *)a1 + 528) && v82[9] == 1)
        {
          sub_100021AF0((uint64_t)&v89, "--only-write-batch=%s", v30, v31, v32, v33, v34, v35, *(_QWORD *)(*(_QWORD *)a1 + 528));
          v82 = *(_DWORD **)a1;
        }
        if (v82[120])
        {
          sub_100021AF0((uint64_t)&v89, "--size-only", v30, v31, v32, v33, v34, v35, v86);
          v82 = *(_DWORD **)a1;
        }
        if (v82[35])
        {
          for (i = 272; i != 432; i += 8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + i))
              break;
            v84 = *(_DWORD *)(*(_QWORD *)a1 + 140) - 1;
            if (v84 >= 3)
              errx(1, "unknown base mode %d");
            sub_100021AF0((uint64_t)&v89, "%s=%s", v30, v31, v32, v33, v34, v35, (char)off_10004C8E8[v84]);
          }
        }
      }
      sub_100021AF0((uint64_t)&v89, ".", v30, v31, v32, v33, v34, v35, v86);
      if (*(_DWORD *)(a2 + 40) == 1)
      {
        if (*(_QWORD *)(a2 + 24))
        {
          v81 = 0;
          do
          {
            if (**(_BYTE **)(*(_QWORD *)(a2 + 16) + 8 * v81))
              sub_100021AF0((uint64_t)&v89, "%s", v75, v76, v77, v78, v79, v80, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v81));
            else
              sub_100021AF0((uint64_t)&v89, ".", v75, v76, v77, v78, v79, v80, v88);
            ++v81;
          }
          while (v81 < *(_QWORD *)(a2 + 24));
        }
      }
      else if (**(_BYTE **)(a2 + 32))
      {
        sub_100021AF0((uint64_t)&v89, "%s", v75, v76, v77, v78, v79, v80, *(_QWORD *)(a2 + 32));
      }
      else
      {
        sub_100021AF0((uint64_t)&v89, ".", v75, v76, v77, v78, v79, v80, v88);
      }
      return v89;
    default:
      errx(1, "bogus delete mode %d\n");
  }
}

void sub_10000F600(uint64_t a1, char *__s1)
{
  char *v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  __darwin_ct_rune_t v15;
  __darwin_ct_rune_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  BOOL v21;
  char v22;
  char *v23;

  v3 = strdup(__s1);
  if (!v3)
    sub_10003767C();
  v4 = v3;
  v5 = *v3;
  if (!*v3)
    goto LABEL_31;
  v6 = 0;
  v13 = (size_t)&v3[strlen(v3) + 1];
  v14 = v4;
  v23 = v4;
  while (1)
  {
    if (v5 < 0)
    {
      if (__maskrune(v5, 0x4000uLL))
      {
LABEL_6:
        sub_100021AF0(a1, "%.*s", v7, v8, v9, v10, v11, v12, (_BYTE)v4 - (_BYTE)v14);
        do
        {
          while (1)
          {
            v16 = *++v4;
            v15 = v16;
            if (v16 < 0)
              break;
            if ((_DefaultRuneLocale.__runetype[v15] & 0x4000) == 0)
              goto LABEL_11;
          }
        }
        while (__maskrune(v15, 0x4000uLL));
LABEL_11:
        v17 = 0;
        v14 = v4;
        goto LABEL_22;
      }
    }
    else if ((_DefaultRuneLocale.__runetype[v5] & 0x4000) != 0)
    {
      goto LABEL_6;
    }
    if (v5 != 39 && v5 != 34)
    {
      v17 = v6;
      goto LABEL_23;
    }
    v18 = *v4;
    v17 = *v4;
    if (v14 == v4 || (_DWORD)v17 != v6)
    {
      memmove(v4, v4 + 1, v13 - (_QWORD)(v4 + 1));
      --v13;
    }
    else
    {
      ++v4;
    }
    v19 = strchr(v4, v18);
    if (!v19)
      break;
    v4 = v19;
    memmove(v19, v19 + 1, v13 - (_QWORD)(v19 + 1));
    if (v4 <= v14)
      sub_100037694();
    --v13;
LABEL_22:
    --v4;
LABEL_23:
    v20 = *++v4;
    v5 = v20;
    v6 = v17;
    if (!v20)
      goto LABEL_28;
  }
  if ((_DWORD)v17)
  {
    free(v23);
  }
  v4 = 0;
LABEL_28:
  v22 = (_BYTE)v4 - (_BYTE)v14;
  v21 = v4 > v14;
  v4 = v23;
  if (v21)
    sub_100021AF0(a1, "%.*s", v7, v8, v9, v10, v11, v12, v22);
LABEL_31:
  free(v4);
}

uint64_t sub_10000F7D8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  size_t v4;
  const char *v5;
  size_t v6;
  size_t v7;
  size_t v8;

  v3 = *(const char **)(a1 + 16);
  v4 = strlen(v3);
  v5 = *(const char **)(a2 + 16);
  v6 = strlen(v5);
  v7 = v6;
  if (v4 >= v6)
    v8 = v6;
  else
    v8 = v4;
  if (strncmp(v3, v5, v8))
    return strcmp(v3, v5);
  if (v4 < v7)
    return 1;
  return 0xFFFFFFFFLL;
}

BOOL sub_10000F858(_QWORD *a1, uint64_t a2, int a3)
{
  _BOOL8 result;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  _DWORD *v40;
  NSObject *v41;
  uint64_t v42;
  uint8_t buf[4];
  uint64_t v44;

  result = 1;
  switch(*(_WORD *)(a2 + 88))
  {
    case 1:
    case 8:
      return result;
    case 2:
      if (dword_100050EE8)
      {
        v6 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v7 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 136315138;
          v44 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s: directory cycle", buf, 0xCu);
        }
      }
      sub_10001C1CC("%s: directory cycle");
      return 0;
    case 3:
      if (*(_DWORD *)(*a1 + 104) && (*(_WORD *)(*(_QWORD *)(a2 + 96) + 4) & 0xB000 | 0x4000) == 0x6000)
        return result;
      if (*(_DWORD *)(*a1 + 108))
      {
        v8 = *(_WORD *)(*(_QWORD *)(a2 + 96) + 4) & 0xF000;
        if (v8 == 4096 || !a3 || v8 == 49152)
          return result;
      }
      else if (!a3)
      {
        return result;
      }
      if (dword_100050EE8)
      {
        v41 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v42 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 136315138;
          v44 = v42;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s: skipping special", buf, 0xCu);
        }
      }
      sub_10001C1CC("%s: skipping special");
      return 0;
    case 4:
      v9 = *(_DWORD *)(a2 + 56);
      *__error() = v9;
      if (dword_100050EE8)
      {
        v16 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v17 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 136315138;
          v44 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s: unreadable directory", buf, 0xCu);
        }
      }
      sub_10001C250(0, "%s: unreadable directory", v10, v11, v12, v13, v14, v15, *(_QWORD *)(a2 + 48));
      return 0;
    case 5:
      if (dword_100050EE8)
      {
        v18 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v19 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 136315138;
          v44 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s: skipping dot-file", buf, 0xCu);
        }
      }
      sub_10001C1CC("%s: skipping dot-file");
      return 0;
    case 7:
      v20 = *(_DWORD *)(a2 + 56);
      *__error() = v20;
      if (dword_100050EE8)
      {
        v27 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v28 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 136315138;
          v44 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
        }
      }
      sub_10001C250(0, "%s", v21, v22, v23, v24, v25, v26, *(_QWORD *)(a2 + 48));
      return 0;
    case 0xA:
      v29 = *(_DWORD *)(a2 + 56);
      *__error() = v29;
      ++a1[30];
      if (dword_100050EE8)
      {
        v36 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v37 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 136315138;
          v44 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "%s: could not stat", buf, 0xCu);
        }
      }
      sub_10001C250(0, "%s: could not stat", v30, v31, v32, v33, v34, v35, *(_QWORD *)(a2 + 48));
      return 0;
    case 0xC:
      if (*(_DWORD *)(*a1 + 84) || !a3 || *(_DWORD *)(*a1 + 76))
        return result;
      if (dword_100050EE8)
      {
        v38 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v39 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 136315138;
          v44 = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%s: skipping symlink (5)", buf, 0xCu);
        }
      }
      sub_10001C1CC("%s: skipping symlink (5)");
      return 0;
    case 0xD:
      v40 = (_DWORD *)*a1;
      if (!*(_DWORD *)(*a1 + 64) && !v40[18] && !v40[17])
        return v40[21] != 0;
      result = 0;
      ++a1[30];
      return result;
    default:
      return 0;
  }
}

void sub_10000FD10(char *a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  int v5;

  if (a1)
  {
    v2 = a2;
    if (a2)
    {
      v4 = a1;
      do
      {
        v5 = *((_DWORD *)v4 + 2);
        if ((v5 & 0x80000000) == 0)
          close(v5);
        free(*(void **)v4);
        free(*((void **)v4 + 11));
        v4 += 152;
        --v2;
      }
      while (v2);
    }
    free(a1);
  }
}

uint64_t sub_10000FD74(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  NSObject *v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  __int16 v27;
  unsigned __int16 v29;
  NSObject *v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  unsigned int v35;
  char *v36;
  size_t v37;
  size_t v38;
  int v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;

  v8 = a5;
  v61 = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  if (dword_100050EE8)
  {
    v13 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v64 = v8;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "sending file metadata list: %zu", buf, 0xCu);
    }
  }
  sub_10001BE54(1, "sending file metadata list: %zu", a3, a4, a5, a6, a7, a8, v8);
  if (v8)
  {
    v14 = a4 + 72;
    do
    {
      v15 = *(char **)(v14 - 56);
      v16 = strlen(v15);
      if (!v16)
        sub_1000376E8();
      v23 = v16;
      if (v16 >= 0x7FFFFFFF)
        sub_100037710();
      if (*(_DWORD *)(a1 + 128)
        && sub_1000196F4(a1, a2)
        && !sub_10001987C((_QWORD *)a1, a2))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003783C();
        sub_10001C094("io_read_flush");
        goto LABEL_180;
      }
      if ((*(_BYTE *)(v14 - 16) & 1) != 0)
        v24 = 65;
      else
        v24 = 64;
      v25 = *(_DWORD *)(a1 + 260);
      if (*(_DWORD *)(*(_QWORD *)a1 + 200))
      {
        v26 = *(_WORD *)(v14 - 48) & 0xF000;
        if (v25 < 28 || v26 == 0x4000 || *(_QWORD *)(v14 + 8) < 2uLL)
        {
          if (v26 == 0x8000)
            v24 |= 0x200u;
        }
        else
        {
          if (*(unsigned __int16 *)(v14 - 35) << 8)
            v27 = 512;
          else
            v27 = 2560;
          v24 |= v27;
        }
      }
      if (v24 < 0x100u || v25 < 28)
        v29 = v24;
      else
        v29 = v24 | 4;
      if (dword_100050EE8)
      {
        v30 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
        {
          v41 = *(_QWORD *)(v14 - 32);
          v42 = *(_QWORD *)(v14 - 24);
          v43 = *(unsigned __int16 *)(v14 - 48);
          *(_DWORD *)buf = 136316162;
          v64 = (uint64_t)v15;
          v65 = 2048;
          v66 = v41;
          v67 = 2048;
          v68 = v42;
          v69 = 1024;
          v70 = v43;
          v71 = 1024;
          v72 = v29;
          _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%s: sending file metadata: size %jd, mtime %jd, mode %o, flag %o", buf, 0x2Cu);
        }
      }
      sub_10001BE54(2, "%s: sending file metadata: size %jd, mtime %jd, mode %o, flag %o", v17, v18, v19, v20, v21, v22, (char)v15);
      v31 = *(_DWORD *)(a1 + 260);
      v32 = sub_10001A170(a1, a3, v29);
      if ((v29 & 4) != 0 && v31 >= 28)
      {
        if (!v32)
        {
          if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_89;
          goto LABEL_88;
        }
        if (!sub_10001A170(a1, a3, SHIBYTE(v29)))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_88;
          goto LABEL_89;
        }
      }
      else if (!v32)
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_89;
LABEL_88:
        sub_100034C50();
        goto LABEL_89;
      }
      if (!sub_10001A850(a1, a3, v23))
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_179;
LABEL_178:
        sub_10003516C();
        goto LABEL_179;
      }
      if (!sub_10001A070(a1, a3, v15, v23))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_106:
          sub_100035E3C();
LABEL_107:
        sub_10001C094("io_write_buf");
        goto LABEL_180;
      }
      if (!sub_10001A858(a1, a3, *(_QWORD *)(v14 - 32)))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_165:
          sub_100037738();
LABEL_166:
        sub_10001C094("io_write_long");
        goto LABEL_180;
      }
      if (!sub_10001A850(a1, a3, *(_DWORD *)(v14 - 24)))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_143:
          sub_100037764();
LABEL_144:
        sub_10001C094("io_write_uint");
        goto LABEL_180;
      }
      if (!sub_10001A850(a1, a3, *(unsigned __int16 *)(v14 - 48)))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_143;
        goto LABEL_144;
      }
      v33 = *(_DWORD **)a1;
      if (*(_DWORD *)(*(_QWORD *)a1 + 92))
      {
        if (!sub_10001A850(a1, a3, *(_DWORD *)(v14 - 44)))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_143;
          goto LABEL_144;
        }
        if (!sub_100018F40(0, &v59, &v61, *(unsigned int *)(v14 - 44)))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_150:
            sub_100037810();
LABEL_151:
          sub_10001C094("idents_add");
          goto LABEL_180;
        }
        v33 = *(_DWORD **)a1;
      }
      if (v33[22])
      {
        if (!sub_10001A850(a1, a3, *(_DWORD *)(v14 - 40)))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_143;
          goto LABEL_144;
        }
        if (!sub_100018F40(1, &v60, &v62, *(unsigned int *)(v14 - 40)))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_150;
          goto LABEL_151;
        }
        v33 = *(_DWORD **)a1;
      }
      if (v33[26] && (*(_WORD *)(v14 - 48) & 0xB000 | 0x4000) == 0x6000
        || v33[27] && ((v34 = *(_WORD *)(v14 - 48) & 0xF000, v34 == 49152) || v34 == 4096))
      {
        v35 = *(_DWORD *)(v14 - 36);
        if (*(int *)(a1 + 260) <= 27)
        {
          if (!sub_10001A850(a1, a3, v35))
          {
            if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_179;
            goto LABEL_178;
          }
        }
        else
        {
          if (!sub_10001A850(a1, a3, HIBYTE(v35)))
          {
            if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_179;
            goto LABEL_178;
          }
          if ((v29 & 0x800) != 0 && !sub_10001A170(a1, a3, *(_BYTE *)(v14 - 36)))
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_88;
LABEL_89:
            sub_10001C094("io_write_byte");
            goto LABEL_180;
          }
          if (!sub_10001A850(a1, a3, *(_DWORD *)(v14 - 36) & 0xFFFFFF))
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_178;
            goto LABEL_179;
          }
        }
      }
      if ((*(_WORD *)(v14 - 48) & 0xF000) == 0xA000 && *(_DWORD *)(*(_QWORD *)a1 + 84))
      {
        v36 = *(char **)(v14 + 16);
        v37 = strlen(v36);
        if (v37 >= 0x7FFFFFFF)
          sub_1000377E8();
        v38 = v37;
        if (!sub_10001A850(a1, a3, v37))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_178;
LABEL_179:
          sub_10001C094("io_write_int");
LABEL_180:
          v56 = 0;
          goto LABEL_181;
        }
        if (!sub_10001A070(a1, a3, v36, v38))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_106;
          goto LABEL_107;
        }
      }
      if ((v29 & 0x200) != 0)
      {
        if (!sub_10001A858(a1, a3, *(_QWORD *)(v14 - 8)))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_165;
          goto LABEL_166;
        }
        if (!sub_10001A858(a1, a3, *(_QWORD *)v14))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_165;
          goto LABEL_166;
        }
      }
      v39 = *(_WORD *)(v14 - 48) & 0xF000;
      if ((v39 | 0x2000) == 0xA000)
        *(_QWORD *)(a1 + 40) += *(_QWORD *)(v14 - 32);
      if (*(_DWORD *)(*(_QWORD *)a1 + 16)
        && (v39 == 0x8000 || *(int *)(a1 + 260) <= 27)
        && !sub_10001A070(a1, a3, (char *)(v14 + 24), 0x10uLL))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000377BC();
        sub_10001C094("io_write_buf checksum");
        goto LABEL_180;
      }
      v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 64);
      if (v40 && !v40(a1, a3, v14 - 72))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037790();
        sub_10001C094("platform sent");
        goto LABEL_180;
      }
      v14 += 152;
      --v8;
    }
    while (v8);
  }
  if (!sub_10001A170(a1, a3, 0))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_88;
    goto LABEL_89;
  }
  v50 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 92))
  {
    v51 = *(_DWORD *)(v50 + 120);
    if (v51 != 2)
    {
      if (v51)
        v52 = 0;
      else
        v52 = v61;
      if (dword_100050EE8)
      {
        v53 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v64 = v52;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "sending uid list: %zu", buf, 0xCu);
        }
      }
      sub_10001BE54(1, "sending uid list: %zu", v44, v45, v46, v47, v48, v49, v52);
      if (!sub_100019238(a1, a3, (uint64_t)v59, v52))
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_128;
LABEL_127:
        sub_1000376BC();
LABEL_128:
        sub_10001C094("idents_send");
        goto LABEL_180;
      }
      v50 = *(_QWORD *)a1;
    }
  }
  if (!*(_DWORD *)(v50 + 88) || (v54 = *(_DWORD *)(v50 + 120), v54 == 2))
  {
    v56 = 1;
    goto LABEL_181;
  }
  if (v54)
    v55 = 0;
  else
    v55 = v62;
  if (dword_100050EE8)
  {
    v57 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v64 = v55;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "sending gid list: %zu", buf, 0xCu);
    }
  }
  v56 = 1;
  sub_10001BE54(1, "sending gid list: %zu", v44, v45, v46, v47, v48, v49, v55);
  if (!sub_100019238(a1, a3, (uint64_t)v60, v55))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_128;
    goto LABEL_127;
  }
LABEL_181:
  sub_100018D28((void **)v60, v62);
  sub_100018D28((void **)v59, v61);
  return v56;
}

uint64_t sub_1000109DC(char **a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v21;

  v4 = *a2 + 1;
  if (v4 <= *a3)
  {
LABEL_7:
    *a2 = v4;
    return 1;
  }
  v7 = sub_1000036A8(*a1, *a3, *a3 + 1024, 0x98uLL);
  if (v7)
  {
    *a1 = v7;
    v15 = *a3;
    v16 = *a3 + 1024;
    *a3 = v16;
    v17 = *a2;
    if (*a2 < v16)
    {
      v18 = v15 - v17 + 1024;
      v19 = &v7[152 * v17 + 144];
      do
      {
        *(_DWORD *)v19 = -1;
        *((_DWORD *)v19 - 34) = -1;
        v19 += 152;
        --v18;
      }
      while (v18);
    }
    v4 = v17 + 1;
    goto LABEL_7;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100037868();
  sub_10001BFE8("recallocarray flist", v8, v9, v10, v11, v12, v13, v14, v21);
  return 0;
}

uint64_t sub_100010AD0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 8);
  if (sub_1000109DC((char **)a1, (unint64_t *)(a1 + 8), (unint64_t *)(a1 + 16)) && *v2)
    return *(_QWORD *)a1 + 152 * *v2 - 152;
  else
    return 0;
}

_QWORD *sub_100010B20(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_100010B2C(_QWORD *a1, unint64_t a2)
{
  if (a1[1] > a2)
    return *a1 + 152 * a2;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037894();
  }
  sub_10001BF64("flist index error");
  return 0;
}

uint64_t sub_100010BA8(int *a1, uint64_t a2, uint64_t a3, char **a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unint64_t v17;
  unsigned __int16 v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  void **v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  char *v40;
  __int16 v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  int v53;
  int v54;
  int v55;
  char *v56;
  char *v57;
  unsigned int (*v58)(char *, char *, uint64_t);
  char *v59;
  char **v60;
  unsigned __int16 v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  void *v71;
  char *v72;
  int v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  NSObject *v94;
  int (__cdecl *v95)(const void *, const void *);
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t result;
  NSObject *v100;
  const char *v101;
  NSObject *v102;
  char v103;
  uint64_t *v104;
  uint64_t *v105;
  char **v106;
  unint64_t *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  size_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  size_t v121;
  unsigned __int8 v122;
  uint8_t buf[4];
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  int v130;
  __int16 v131;
  unsigned int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  _BYTE __src[1024];

  v119 = 0;
  v120 = 0;
  v117 = 0;
  v118 = 0;
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  v112 = 0;
  v110 = 0;
  v111 = 0;
  __src[0] = 0;
  if (!sub_10001A4B0((uint64_t)a1, a2, (char *)&v112))
  {
LABEL_135:
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000378C0();
    sub_10001C094("io_read_byte");
    goto LABEL_310;
  }
  v16 = v112;
  if (!v112)
  {
    v72 = 0;
    v17 = 0;
LABEL_140:
    v79 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 92) && *(_DWORD *)(v79 + 120) != 2)
    {
      if (!sub_100019420((uint64_t)a1, a2, &v110, &v115))
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_179;
        goto LABEL_178;
      }
      if (dword_100050EE8)
      {
        v86 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v124 = v115;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_INFO, "received uid list: %zu", buf, 0xCu);
        }
      }
      sub_10001BE54(1, "received uid list: %zu", v80, v81, v82, v83, v84, v85, v115);
      v79 = *(_QWORD *)a1;
    }
    if (!*(_DWORD *)(v79 + 88) || *(_DWORD *)(v79 + 120) == 2)
    {
LABEL_154:
      if (dword_100050EE8)
      {
        v94 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v124 = v17;
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "received file metadata list: %zu", buf, 0xCu);
        }
      }
      sub_10001BE54(1, "received file metadata list: %zu", v10, v11, v12, v13, v14, v15, v17);
      if (a1[65] <= 28)
        v95 = (int (__cdecl *)(const void *, const void *))sub_100012448;
      else
        v95 = (int (__cdecl *)(const void *, const void *))sub_1000121E0;
      qsort(v72, v17, 0x98uLL, v95);
      if (v17)
      {
        v96 = 0;
        v97 = v72 + 144;
        do
        {
          *v97 = v96;
          v97 += 38;
          ++v96;
        }
        while (v17 != v96);
      }
      sub_1000015F4((uint64_t)a1, (__int128 *)v72, v17);
      *a5 = v17;
      *a4 = v72;
      v98 = *(_QWORD *)a1;
      if (*(_DWORD *)(*(_QWORD *)a1 + 92) && !*(_DWORD *)(v98 + 120))
      {
        sub_100018E6C((uint64_t)a1, 0, (uint64_t)v110, v115);
        sub_100018DF0((uint64_t)a1, (uint64_t)v72, v17, (uint64_t)v110, v115);
        v98 = *(_QWORD *)a1;
      }
      if (*(_DWORD *)(v98 + 88) && !*(_DWORD *)(v98 + 120))
      {
        sub_100018E6C((uint64_t)a1, 1, (uint64_t)v111, v116);
        sub_100018D74((uint64_t)a1, (uint64_t)v72, v17, (uint64_t)v111, v116);
      }
      sub_100018D28((void **)v111, v116);
      sub_100018D28((void **)v110, v115);
      return 1;
    }
    if (sub_100019420((uint64_t)a1, a2, &v111, &v116))
    {
      if (dword_100050EE8)
      {
        v93 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v124 = v116;
          _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_INFO, "received gid list: %zu", buf, 0xCu);
        }
      }
      sub_10001BE54(1, "received gid list: %zu", v87, v88, v89, v90, v91, v92, v116);
      goto LABEL_154;
    }
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    {
LABEL_179:
      sub_10001C094("idents_recv");
      goto LABEL_310;
    }
LABEL_178:
    sub_1000378EC();
    goto LABEL_179;
  }
  v17 = 0;
  v106 = a4;
  v107 = a5;
  while (1)
  {
    v18 = v16;
    if ((v16 & 4) != 0 && a1[65] >= 28)
    {
      if (!sub_10001A4B0((uint64_t)a1, a2, (char *)&v112))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000378C0();
        sub_10001C094("io_read_byte");
        goto LABEL_309;
      }
      v18 = v16 | (v112 << 8);
    }
    if (v17 == 0x7FFFFFFF)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037918();
      v101 = "remote sent too many files";
LABEL_184:
      sub_10001BFE8(v101, v9, v10, v11, v12, v13, v14, v15, v103);
LABEL_309:
      a4 = v106;
      goto LABEL_310;
    }
    if (!sub_1000109DC(&v120, &v119, &v118))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037944();
      sub_10001C094("flist_realloc");
      goto LABEL_309;
    }
    v19 = 0;
    v17 = v119;
    v109 = v120;
    v20 = &v120[152 * v119];
    v21 = v20 - 304;
    v22 = v119 - 1;
    if (v119 <= 1)
      v21 = 0;
    v108 = v21;
    v122 = 0;
    v121 = 0;
    if ((v18 & 0x20) != 0)
      break;
LABEL_15:
    if ((v18 & 0x40) != 0)
    {
      if (!sub_10001AF48((uint64_t)a1, a2, &v121))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037AA4();
        sub_10001C094("io_read_size");
        goto LABEL_228;
      }
      v23 = v121;
    }
    else
    {
      if (!sub_10001A4B0((uint64_t)a1, a2, (char *)&v122))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000378C0();
        sub_10001C094("io_read_byte");
        goto LABEL_228;
      }
      v23 = v122;
      v121 = v122;
    }
    v24 = v23 + v19;
    if (!(v23 + v19))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003799C();
      sub_10001BF64("security violation: zero-length pathname");
      goto LABEL_228;
    }
    v25 = (void **)(v20 - 152);
    v26 = malloc_type_malloc(v24 + 1, 0x4DBD832BuLL);
    *((_QWORD *)v20 - 19) = v26;
    if (!v26)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000379C8();
      sub_10001BFE8("malloc", v27, v28, v29, v30, v31, v32, v33, v103);
LABEL_228:
      a4 = v106;
      a5 = v107;
      goto LABEL_229;
    }
    v26[v24] = 0;
    if ((v18 & 0x20) != 0)
      memcpy(*v25, __src, v19);
    a5 = v107;
    if (!sub_10001A524((uint64_t)a1, a2, (char *)*v25 + v19, v121))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000379F4();
      sub_10001C094("io_read_buf");
      goto LABEL_219;
    }
    v34 = (const char *)*v25;
    if (*(_BYTE *)*v25 == 47)
    {
      a4 = v106;
      if (dword_100050EE8)
      {
        v102 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v124 = (uint64_t)v34;
          _os_log_error_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "security violation: absolute pathname: %s", buf, 0xCu);
        }
      }
      sub_10001BF64("security violation: absolute pathname: %s");
      goto LABEL_229;
    }
    if (strstr((char *)*v25, "/../")
      || v24 >= 3 && (!strcmp(&v34[v24 - 3], "/..") || !strncmp(v34, "../", 3uLL))
      || !strcmp(v34, ".."))
    {
      if (dword_100050EE8)
      {
        v100 = qword_100050EF8;
        a4 = v106;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          v124 = (uint64_t)v34;
          _os_log_error_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "%s: security violation: backtracking pathname", buf, 0xCu);
        }
      }
      else
      {
        a4 = v106;
      }
      sub_10001BF64("%s: security violation: backtracking pathname");
      goto LABEL_229;
    }
    __strlcpy_chk(__src, v34, 1024, 1024);
    v35 = v109;
    *(_QWORD *)&v109[152 * v22 + 16] = *v25;
    if (!sub_10001AD68((uint64_t)a1, a2, &v114))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037A20();
      sub_10001C094("io_read_long");
      goto LABEL_309;
    }
    v36 = &v109[152 * v22];
    *((_QWORD *)v36 + 5) = v114;
    v37 = (uint64_t *)(v36 + 40);
    if ((v18 & 0x80) != 0)
    {
      if (!v108)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037B80();
        sub_10001BF64("same time without last entry");
        goto LABEL_309;
      }
      v38 = *((_QWORD *)v108 + 6);
    }
    else
    {
      if (!sub_10001B020((uint64_t)a1, a2, &v113))
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_256;
LABEL_255:
        sub_100037A4C();
        goto LABEL_256;
      }
      v38 = v113;
    }
    v39 = v18;
    v40 = &v109[152 * v22];
    *((_QWORD *)v40 + 6) = v38;
    v105 = (uint64_t *)(v40 + 48);
    if ((v18 & 2) != 0)
    {
      if (!v108)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037B54();
        sub_10001BF64("same mode without last entry");
        goto LABEL_309;
      }
      v41 = *((_WORD *)v108 + 12);
    }
    else
    {
      if (!sub_10001B020((uint64_t)a1, a2, &v113))
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_256;
        goto LABEL_255;
      }
      v41 = v113;
    }
    v104 = v37;
    *((_WORD *)v37 - 8) = v41;
    v42 = v37 - 2;
    if ((v18 & 1) != 0 && (v41 & 0xF000) == 0x4000)
      *(_DWORD *)&v109[152 * v22 + 56] |= 1u;
    v43 = *(_QWORD *)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      sub_100012188(a1, (uint64_t)v25);
      v43 = *(_QWORD *)a1;
    }
    if (*(_DWORD *)(v43 + 92))
    {
      if ((v18 & 8) != 0)
      {
        if (v108)
        {
          v44 = *((_DWORD *)v108 + 7);
        }
        else
        {
          if (dword_100050EE8)
          {
            v45 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "same uid without last entry", buf, 2u);
            }
          }
          sub_10001C130("same uid without last entry");
          v44 = 0;
          v35 = v109;
        }
      }
      else
      {
        if (!sub_10001B020((uint64_t)a1, a2, &v113))
        {
          if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_304;
LABEL_303:
          sub_100035198();
          goto LABEL_304;
        }
        v44 = v113;
      }
      *(_DWORD *)&v35[152 * v22 + 28] = v44;
    }
    if (*(_DWORD *)(*(_QWORD *)a1 + 88))
    {
      if ((v18 & 0x10) != 0)
      {
        if (v108)
        {
          v46 = *((_DWORD *)v108 + 8);
        }
        else
        {
          if (dword_100050EE8)
          {
            v47 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "same gid without last entry", buf, 2u);
            }
          }
          sub_10001C130("same gid without last entry");
          v46 = 0;
          v35 = v109;
        }
      }
      else
      {
        if (!sub_10001B020((uint64_t)a1, a2, &v113))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_255;
LABEL_256:
          sub_10001C094("io_read_uint");
          goto LABEL_309;
        }
        v46 = v113;
      }
      *(_DWORD *)&v35[152 * v22 + 32] = v46;
    }
    v48 = *(_QWORD *)a1;
    v49 = *(_DWORD *)(*(_QWORD *)a1 + 104);
    if (v49 && (*(_WORD *)v42 & 0xB000 | 0x4000) == 0x6000
      || *(_DWORD *)(v48 + 108) && ((v50 = *(_WORD *)v42 & 0xF000, v50 == 49152) || v50 == 4096))
    {
      if (a1[65] <= 27)
      {
        if ((v18 & 4) != 0)
        {
          if (!v108)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_307:
              sub_100037A78();
LABEL_308:
            sub_10001BF64("same device without last entry");
            goto LABEL_309;
          }
          v53 = *((_DWORD *)v108 + 9);
        }
        else
        {
          if (!sub_10001AF44(a1, a2, (char *)&v113 + 4))
          {
            if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_304;
            goto LABEL_303;
          }
          v53 = HIDWORD(v113);
        }
        goto LABEL_96;
      }
    }
    if (v49 && (*(_WORD *)v42 & 0xB000 | 0x4000) == 0x6000
      || *(_DWORD *)(v48 + 108) && ((v51 = *(_WORD *)v42 & 0xF000, v51 == 49152) || v51 == 4096))
    {
      if ((v18 & 0x100) != 0)
      {
        if (!v108)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100037B28();
          sub_10001BF64("same device major without last entry");
          goto LABEL_309;
        }
        v52 = (int *)(v108 + 36);
      }
      else
      {
        v52 = (int *)&v113 + 1;
        if (!sub_10001AF44(a1, a2, (char *)&v113 + 4))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_303;
          goto LABEL_304;
        }
      }
      v54 = *v52;
      if ((v18 & 0x800) != 0)
      {
        if (!sub_10001A4B0((uint64_t)a1, a2, (char *)&v112))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_303;
LABEL_304:
          sub_10001C094("io_read_int");
          goto LABEL_309;
        }
        v55 = v112;
      }
      else
      {
        if (!sub_10001AF44(a1, a2, (char *)&v113 + 4))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_303;
          goto LABEL_304;
        }
        v55 = HIDWORD(v113);
      }
      v53 = v55 | (v54 << 24);
      v35 = v109;
LABEL_96:
      *(_DWORD *)&v35[152 * v22 + 36] = v53;
    }
    if ((*(_WORD *)v42 & 0xF000) == 0xA000 && *(_DWORD *)(*(_QWORD *)a1 + 84))
    {
      if (!sub_10001AF48((uint64_t)a1, a2, &v117))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037AA4();
        sub_10001C094("io_read_size");
        goto LABEL_309;
      }
      if (!v117)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037AD0();
        sub_10001BF64("empty link name");
        goto LABEL_309;
      }
      v56 = (char *)malloc_type_calloc(v117 + 1, 1uLL, 0x130AB50uLL);
      if (!v56)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100034E48();
        v101 = "calloc";
        goto LABEL_184;
      }
      v57 = v56;
      if (!sub_10001A524((uint64_t)a1, a2, v56, v117))
      {
        free(v57);
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000379F4();
        sub_10001C094("io_read_buf");
        goto LABEL_309;
      }
      v58 = (unsigned int (*)(char *, char *, uint64_t))*((_QWORD *)a1 + 29);
      v59 = &v109[152 * v22];
      v60 = (char **)(v59 + 88);
      if (!v58)
        goto LABEL_107;
      if (v58(v57, v59 + 88, 1))
      {
        free(v57);
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037AFC();
        sub_10001C094("symlink_filter");
        a4 = v106;
        a5 = v107;
        goto LABEL_310;
      }
      if (*v60)
        free(v57);
      else
LABEL_107:
        *v60 = v57;
      a5 = v107;
      v35 = v109;
    }
    if (*(_DWORD *)(*(_QWORD *)a1 + 200) && a1[65] <= 27)
    {
      if ((*(_WORD *)v42 & 0xF000) == 0x8000)
        v61 = v18 | 0x200;
      else
        v61 = v18;
      v39 = v61;
    }
    if ((v39 & 0x200) != 0)
    {
      if ((v39 & 0x400) != 0)
      {
        if (!v108)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_307;
          goto LABEL_308;
        }
        v62 = (uint64_t *)(v108 + 64);
      }
      else
      {
        v62 = &v114;
        if (!sub_10001AE3C((uint64_t)a1, a2, &v114))
        {
          a4 = v106;
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_279;
          goto LABEL_280;
        }
      }
      v63 = &v35[152 * v22];
      *((_QWORD *)v63 + 8) = *v62;
      if (!sub_10001AD68((uint64_t)a1, a2, (_QWORD *)v63 + 9))
      {
        a4 = v106;
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_279:
          sub_100037A20();
LABEL_280:
        sub_10001C094("io_read_long");
        goto LABEL_310;
      }
    }
    a4 = v106;
    if (!sub_1000017C8((uint64_t)a1, a2, (uint64_t)v25))
      goto LABEL_310;
    if (dword_100050EE8)
    {
      v70 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
      {
        v74 = *v25;
        v75 = *v104;
        v76 = *v105;
        v77 = *(unsigned __int16 *)v42;
        v78 = *(_DWORD *)&v109[152 * v22 + 36];
        *(_DWORD *)buf = 136316674;
        v124 = (uint64_t)v74;
        v125 = 2048;
        v126 = v75;
        v127 = 2048;
        v128 = v76;
        v129 = 1024;
        v130 = v77;
        v131 = 1024;
        v132 = HIBYTE(v78);
        v133 = 1024;
        v134 = v78 & 0xFFFFFF;
        v135 = 1024;
        v136 = v39;
        _os_log_debug_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "%s: received file metadata: size %jd, mtime %jd, mode %o, rdev (%d, %d), flag %x", buf, 0x38u);
      }
    }
    v71 = *v25;
    v72 = v109;
    sub_10001BE54(2, "%s: received file metadata: size %jd, mtime %jd, mode %o, rdev (%d, %d), flag %x", v64, v65, v66, v67, v68, v69, (char)v71);
    v73 = *(_WORD *)v42 & 0xF000;
    if ((v73 | 0x2000) == 0xA000)
      *((_QWORD *)a1 + 5) += *v104;
    if (*(_DWORD *)(*(_QWORD *)a1 + 16)
      && (v73 == 0x8000 || a1[65] <= 27)
      && !sub_10001A524((uint64_t)a1, a2, &v109[152 * v22 + 96], 0x10uLL))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000379F4();
      sub_10001C094("io_read_buf");
      goto LABEL_310;
    }
    if (!sub_10001A4B0((uint64_t)a1, a2, (char *)&v112))
      goto LABEL_135;
    v16 = v112;
    if (!v112)
      goto LABEL_140;
  }
  if (sub_10001A4B0((uint64_t)a1, a2, (char *)&v122))
  {
    v19 = v122;
    goto LABEL_15;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_1000378C0();
  sub_10001C094("io_read_byte");
LABEL_219:
  a4 = v106;
LABEL_229:
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100037970();
  sub_10001C094("flist_recv_name");
LABEL_310:
  sub_100018D28((void **)v111, v116);
  sub_100018D28((void **)v110, v115);
  result = 0;
  *a5 = 0;
  *a4 = 0;
  return result;
}

_WORD *sub_100012188(_WORD *result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;

  v2 = *(_WORD *)(a2 + 24);
  if ((v2 & 0xF000) == 0x4000)
  {
    v3 = v2 & ~result[104] | result[105] | result[106];
  }
  else
  {
    v3 = v2 & ~result[107] | result[108];
    if ((v2 & 0x49) != 0)
      v3 |= result[109];
  }
  *(_WORD *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_1000121E0(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  int v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  const char *v11;
  char *v12;
  char *v13;
  _BOOL4 v14;
  BOOL v15;
  int64_t v16;
  size_t v17;
  int v18;
  int i;
  int v20;
  int v21;
  const char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;

  v3 = *(char **)(a1 + 16);
  v4 = *(char **)(a2 + 16);
  v5 = *v3;
  if (v5 == 46 && !v3[1])
    return 0xFFFFFFFFLL;
  v6 = *v4;
  if (v6 == 46 && !v4[1])
    return 1;
  while (v5 == v6)
  {
    if (!v5)
      return 0;
    v8 = *++v3;
    v5 = v8;
    v9 = *++v4;
    v6 = v9;
  }
  v10 = *(_WORD *)(a1 + 24) & 0xF000;
  if (v5 || v10 != 0x4000)
  {
    if (v6)
      v11 = v4;
    else
      v11 = "/";
    if ((*(_WORD *)(a2 + 24) & 0xF000) == 0x4000)
      v4 = (char *)v11;
  }
  else
  {
    v3 = "/";
  }
  v12 = strrchr(v3, 47);
  v13 = strrchr(v4, 47);
  if (v10 == 0x4000 && !v12)
    v12 = &v3[strlen(v3)];
  if (!v13)
  {
    if ((*(_WORD *)(a2 + 24) & 0xF000) != 0x4000)
    {
      v15 = 0;
      v14 = v12 != 0;
LABEL_35:
      if (v14)
        result = 1;
      else
        result = 0xFFFFFFFFLL;
      if (v14 || v15)
        return result;
      goto LABEL_40;
    }
    v13 = &v4[strlen(v4)];
  }
  v14 = v12 != 0;
  v15 = v13 != 0;
  if (!v12 || !v13)
    goto LABEL_35;
  if (v12 - v3 >= v13 - v4)
    v16 = v13 - v4;
  else
    v16 = v12 - v3;
  if (strncmp(v3, v4, v16 + 1))
  {
LABEL_40:
    v18 = *v3;
    for (i = *v4; v18 == i; i = v21)
    {
      if (!v18)
        return 0;
      v20 = *++v3;
      v18 = v20;
      v21 = *++v4;
    }
    if (v10 != 0x4000 || v18)
    {
      if ((*(_WORD *)(a2 + 24) & 0xF000) == 0x4000)
      {
        if (i)
          v22 = v4;
        else
          v22 = "/";
        i = *(unsigned __int8 *)v22;
      }
    }
    else
    {
      v3 = "/";
    }
    return *v3 - i;
  }
  if (v10 == 0x4000 && (*(_WORD *)(a2 + 24) & 0xF000) == 0x4000)
  {
    v17 = strlen(v3);
    if (v17 > strlen(v4))
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  v23 = &v3[(int)v16 + 1];
  v24 = &v4[(int)v16 + 1];
  v25 = strrchr(v23, 47);
  v26 = strrchr(v24, 47);
  if (!v25 && v26)
    return 0xFFFFFFFFLL;
  if (v25 && !v26)
    return 1;
  return strcmp(v23, v24);
}

uint64_t sub_100012448(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 16), *(const char **)(a2 + 16));
}

uint64_t sub_100012454(uint64_t a1, size_t a2, char **a3, uint64_t a4)
{
  size_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t result;
  int (__cdecl *v22)(const void *, const void *);
  size_t v23;
  const char **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char **v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  _BOOL4 v61;
  char *v62;
  NSObject *v63;
  _BOOL4 v64;
  NSObject *v65;
  char *v66;
  const char **v67;
  char *v68;
  const char **v69;
  const char **v70;
  const char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  const char *v80;
  const char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  NSObject *v89;
  const char *v90;
  const char *v91;
  char *v92;
  unint64_t v93;
  const char **v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char **v109;
  size_t v110;
  const char *v111;
  char *v112;
  char *v113;
  const char *v114;
  int v115;
  const char *v116;
  NSObject *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  void **v122;
  uint8_t v123[4];
  char *v124;
  stat buf;

  if (!a2)
    sub_100037BAC();
  v6 = a2;
  v7 = a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 32))
  {
    v8 = 0;
    do
    {
      v10 = *a3++;
      v9 = v10;
      if (*v10)
        v11 = v9;
      else
        v11 = ".";
      sub_100025990(v11);
      if (!sub_100014718((uint64_t *)v7, v11, a4, -1))
        ++v8;
      --v6;
    }
    while (v6);
    if (dword_100050EE8)
    {
      v18 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        v19 = *(_QWORD *)(a4 + 8);
        buf.st_dev = 134217984;
        *(_QWORD *)&buf.st_mode = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "recursively generated %zu filenames", (uint8_t *)&buf, 0xCu);
      }
    }
    sub_10001BE54(1, "recursively generated %zu filenames", v12, v13, v14, v15, v16, v17, *(_QWORD *)(a4 + 8));
    v20 = v8 == 0;
    goto LABEL_14;
  }
  memset(&buf, 0, sizeof(buf));
  sub_100025990(".");
  v35 = malloc_type_calloc(v6, 0x98uLL, 0x10D0040CCDC9D6FuLL);
  *(_QWORD *)a4 = v35;
  if (v35)
  {
    v43 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = v6;
    while (1)
    {
      if (*a3[v43])
        v44 = a3[v43];
      else
        v44 = ".";
      if (*(_DWORD *)(*(_QWORD *)v7 + 64))
        v45 = stat(v44, &buf);
      else
        v45 = lstat(v44, &buf);
      if (v45 == -1)
      {
        ++*(_QWORD *)(v7 + 240);
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037C28();
        sub_10001BFE8("'%s': (l)stat", v46, v47, v48, v49, v50, v51, v52, (char)v44);
        goto LABEL_107;
      }
      v53 = buf.st_mode & 0xF000;
      if (v53 == 0x4000 && !*(_DWORD *)(*(_QWORD *)v7 + 192))
        break;
      if (sub_100025E64(v44, v53 == 0x4000, 0, 0) == -1)
      {
        if (dword_100050EE8)
        {
          v60 = qword_100050EF8;
          v61 = os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO);
          v62 = "%s: skipping excluded file";
          if (!v61)
            goto LABEL_46;
          *(_DWORD *)v123 = 136315138;
          v124 = v44;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "%s: skipping excluded file", v123, 0xCu);
        }
        sub_10001C1CC("%s: skipping excluded file");
      }
      else if (!sub_10001582C((uint64_t *)v7, &buf.st_dev, v44, a4))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037C88();
        sub_10001C094("flist_append");
LABEL_107:
        sub_10000FD10(*(char **)a4, v6);
        v20 = 0;
        *(_QWORD *)a4 = 0;
        goto LABEL_14;
      }
LABEL_47:
      if (v6 == ++v43)
      {
        if (dword_100050EE8)
        {
          v65 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
          {
            v66 = *(char **)(a4 + 8);
            *(_DWORD *)v123 = 134217984;
            v124 = v66;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "non-recursively generated %zu filenames", v123, 0xCu);
          }
        }
        v20 = 1;
        sub_10001BE54(1, "non-recursively generated %zu filenames", v54, v55, v56, v57, v58, v59, *(_QWORD *)(a4 + 8));
        goto LABEL_14;
      }
    }
    if (dword_100050EE8)
    {
      v63 = qword_100050EF8;
      v64 = os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO);
      v62 = "%s: skipping directory";
      if (!v64)
      {
LABEL_46:
        sub_10001C1CC(v62, v44);
        goto LABEL_47;
      }
      *(_DWORD *)v123 = 136315138;
      v124 = v44;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "%s: skipping directory", v123, 0xCu);
    }
    v62 = "%s: skipping directory";
    goto LABEL_46;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100034E48();
  sub_10001BFE8("calloc", v36, v37, v38, v39, v40, v41, v42, v118);
  v20 = 0;
LABEL_14:
  if (!v20 && !*(_QWORD *)(v7 + 240))
    return 0;
  result = sub_10000110C(v7, (uint64_t *)a4);
  if ((_DWORD)result)
  {
    if (*(int *)(v7 + 260) <= 28)
      v22 = (int (__cdecl *)(const void *, const void *))sub_100012448;
    else
      v22 = (int (__cdecl *)(const void *, const void *))sub_1000121E0;
    qsort(*(void **)a4, *(_QWORD *)(a4 + 8), 0x98uLL, v22);
    v23 = *(_QWORD *)(a4 + 8);
    if (!v23)
      return 1;
    v120 = *(_QWORD *)v7;
    v24 = (const char **)malloc_type_calloc(v23, 0x98uLL, 0x10D0040CCDC9D6FuLL);
    if (v24)
    {
      v32 = v24;
      if (*(_QWORD *)(a4 + 8) == 1)
      {
        v33 = 0;
        v34 = 0;
      }
      else
      {
        v33 = 0;
        v34 = 0;
        v67 = v24;
        v119 = a4;
        do
        {
          v68 = *(char **)a4;
          v69 = (const char **)(*(_QWORD *)a4 + 152 * v34);
          v70 = v69 + 2;
          v71 = v69[2];
          if (strcmp(v71, v69[21]) || !strcmp(v71, "."))
          {
            v72 = *((_OWORD *)v69 + 1);
            *(_OWORD *)v67 = *(_OWORD *)v69;
            *((_OWORD *)v67 + 1) = v72;
            v73 = *((_OWORD *)v69 + 2);
            v74 = *((_OWORD *)v69 + 3);
            v75 = *((_OWORD *)v69 + 5);
            *((_OWORD *)v67 + 4) = *((_OWORD *)v69 + 4);
            *((_OWORD *)v67 + 5) = v75;
            *((_OWORD *)v67 + 2) = v73;
            *((_OWORD *)v67 + 3) = v74;
            v76 = *((_OWORD *)v69 + 6);
            v77 = *((_OWORD *)v69 + 7);
            v78 = *((_OWORD *)v69 + 8);
            v67[18] = v69[18];
            *((_OWORD *)v67 + 7) = v77;
            *((_OWORD *)v67 + 8) = v78;
            *((_OWORD *)v67 + 6) = v76;
            ++v34;
          }
          else
          {
            v79 = v7;
            v80 = *v69;
            v121 = v68;
            v122 = (void **)(v69 + 19);
            v81 = v69[19];
            if (strcmp(*v69, v81))
            {
              v116 = v80;
              if (dword_100050EE8)
              {
                v117 = qword_100050EF8;
                a4 = v119;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                {
                  buf.st_dev = 136315650;
                  *(_QWORD *)&buf.st_mode = v71;
                  WORD2(buf.st_ino) = 2080;
                  *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v116;
                  HIWORD(buf.st_gid) = 2080;
                  *(_QWORD *)&buf.st_rdev = v81;
                  _os_log_error_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_ERROR, "%s: duplicate working path for possibly different file: '%s' '%s'", (uint8_t *)&buf, 0x20u);
                  v71 = *v70;
                  v116 = *v69;
                  v81 = (const char *)*v122;
                }
              }
              else
              {
                a4 = v119;
              }
              sub_10001BF64("%s: duplicate working path for possibly different file: '%s' '%s'", v71, v116, v81);
              free(v32);
              goto LABEL_61;
            }
            v82 = *((_OWORD *)v69 + 1);
            *(_OWORD *)v67 = *(_OWORD *)v69;
            *((_OWORD *)v67 + 1) = v82;
            v83 = *((_OWORD *)v69 + 2);
            v84 = *((_OWORD *)v69 + 3);
            v85 = *((_OWORD *)v69 + 5);
            *((_OWORD *)v67 + 4) = *((_OWORD *)v69 + 4);
            *((_OWORD *)v67 + 5) = v85;
            *((_OWORD *)v67 + 2) = v83;
            *((_OWORD *)v67 + 3) = v84;
            v86 = *((_OWORD *)v69 + 6);
            v87 = *((_OWORD *)v69 + 7);
            v88 = *((_OWORD *)v69 + 8);
            v67[18] = v69[18];
            *((_OWORD *)v67 + 7) = v87;
            *((_OWORD *)v67 + 8) = v88;
            *((_OWORD *)v67 + 6) = v86;
            v7 = v79;
            a4 = v119;
            if (!*(_DWORD *)(v120 + 188) && (*(_WORD *)&v121[152 * v34 + 24] & 0xF000) != 0x4000)
            {
              if (dword_100050EE8)
              {
                v89 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
                {
                  v90 = *v70;
                  v91 = *v69;
                  buf.st_dev = 136315394;
                  *(_QWORD *)&buf.st_mode = v90;
                  WORD2(buf.st_ino) = 2080;
                  *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v91;
                  _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_INFO, "%s: duplicate path: %s", (uint8_t *)&buf, 0x16u);
                }
              }
              sub_10001C1CC("%s: duplicate path: %s", *v70, *v69);
            }
            free(*v122);
            v92 = &v121[152 * v34 + 152];
            free(*((void **)v92 + 11));
            *((_QWORD *)v92 + 11) = 0;
            *v122 = 0;
            v34 += 2;
          }
          ++v33;
          v93 = *(_QWORD *)(a4 + 8) - 1;
          v67 += 19;
        }
        while (v34 < v93);
        if (v34 != v93)
          goto LABEL_80;
      }
      v94 = &v32[19 * v33++];
      v95 = *(_QWORD *)a4 + 152 * v34;
      v96 = *(_OWORD *)(v95 + 16);
      *(_OWORD *)v94 = *(_OWORD *)v95;
      *((_OWORD *)v94 + 1) = v96;
      v97 = *(_OWORD *)(v95 + 32);
      v98 = *(_OWORD *)(v95 + 48);
      v99 = *(_OWORD *)(v95 + 80);
      *((_OWORD *)v94 + 4) = *(_OWORD *)(v95 + 64);
      *((_OWORD *)v94 + 5) = v99;
      *((_OWORD *)v94 + 2) = v97;
      *((_OWORD *)v94 + 3) = v98;
      v100 = *(_OWORD *)(v95 + 96);
      v101 = *(_OWORD *)(v95 + 112);
      v102 = *(_OWORD *)(v95 + 128);
      v94[18] = *(const char **)(v95 + 144);
      *((_OWORD *)v94 + 7) = v101;
      *((_OWORD *)v94 + 8) = v102;
      *((_OWORD *)v94 + 6) = v100;
LABEL_80:
      free(*(void **)a4);
      *(_QWORD *)a4 = v32;
      *(_QWORD *)(a4 + 8) = v33;
      if (!v33)
        sub_100037C00();
      if (*(_DWORD *)(*(_QWORD *)v7 + 32) || *(_DWORD *)(*(_QWORD *)v7 + 192))
      {
        v109 = 0;
        do
        {
          if (((_WORD)v32[3] & 0xF000) == 0x4000)
          {
            if (!v109 || (v110 = strlen(*v109), v111 = *v32, strncmp(*v109, *v32, v110)) || v111[v110] != 47)
            {
              v112 = (char *)v32[2];
              if (*(_DWORD *)(*(_QWORD *)v7 + 32)
                || !strcmp(v32[2], ".")
                || (v113 = strrchr(v112, 47)) != 0
                && ((v115 = v113[1], v114 = v113 + 1, !v115) || !strcmp(v114, ".")))
              {
                *((_DWORD *)v32 + 14) |= 1u;
                sub_10001BE54(3, "%s: top-level", v103, v104, v105, v106, v107, v108, (char)v112);
                v109 = v32;
              }
            }
          }
          v32 += 19;
          --v33;
        }
        while (v33);
      }
      return 1;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034E48();
    sub_10001BFE8("calloc", v25, v26, v27, v28, v29, v30, v31, v118);
LABEL_61:
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037BD4();
    sub_10001C094("flist_dedupe");
    sub_10000FD10(*(char **)a4, *(_QWORD *)(a4 + 8));
    result = 0;
    *(_QWORD *)a4 = 0;
  }
  return result;
}

uint64_t sub_100012E14(int *a1, const char *a2, void **a3, size_t *a4, uint64_t a5, size_t a6)
{
  size_t v6;
  const char **v7;
  char *v11;
  int *v12;
  size_t v13;
  int v14;
  const char **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char **v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  const char **v28;
  size_t v29;
  char *v30;
  const char **v31;
  unint64_t v32;
  NSObject *v33;
  ENTRY v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  int v43;
  char *key;
  char *v45;
  size_t v46;
  FTSENT *v47;
  FTSENT *v48;
  int v49;
  const char *v50;
  unint64_t v51;
  int fts_info;
  const char *v53;
  const char **v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *fts_path;
  char *v64;
  uint64_t v65;
  int v66;
  const char *v67;
  uint64_t v68;
  char *v69;
  int v70;
  int v71;
  int v73;
  char *v74;
  const char *v75;
  NSObject *v76;
  NSObject *v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  const char *v84;
  int (__cdecl *v85)(const void *, const void *);
  void **v86;
  void *v87;
  char v88;
  char v89;
  const char *v90;
  unint64_t v91;
  void **v92;
  size_t *v93;
  int *v94;
  char **v95;
  char *__sa;
  unint64_t v98;
  stat v99;
  uint8_t buf[4];
  char *v101;
  ENTRY v102;

  memset(&v99, 0, sizeof(v99));
  v98 = 0;
  *a3 = 0;
  *a4 = 0;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
    return 1;
  v6 = a6;
  if (!a6)
    return 1;
  v7 = (const char **)a5;
  v11 = 0;
  v12 = (int *)(a5 + 56);
  v13 = a6;
  do
  {
    v14 = *v12;
    v12 += 38;
    v11 += v14 & 1;
    --v13;
  }
  while (v13);
  if (!v11)
    return 1;
  v15 = (const char **)malloc_type_calloc((size_t)(v11 + 1), 8uLL, 0x10040436913F5uLL);
  if (!v15)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100034E48();
    sub_10001BFE8("calloc", v16, v17, v18, v19, v20, v21, v22, v88);
    return 0;
  }
  v23 = v15;
  v93 = a4;
  v94 = a1;
  v92 = a3;
  v24 = 0;
  if (!v6)
  {
LABEL_22:
    v95 = (char **)v23;
    v23[v24] = 0;
    if (dword_100050EE8)
    {
      v33 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v101 = v11;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "delete from %zu directories", buf, 0xCu);
      }
    }
    sub_10001BE54(1, "delete from %zu directories", v17, v18, v19, v20, v21, v22, (char)v11);
    if (hcreate(v6))
    {
      if (v6)
      {
        v41 = 0;
        while (1)
        {
          v42 = v7[19 * v41 + 2];
          do
          {
            v43 = strncmp(v42, "./", 2uLL);
            v42 += 2;
          }
          while (!v43);
          v34.key = strdup(v42 - 2);
          if (!v34.key)
            break;
          key = v34.key;
          v34.data = 0;
          v34.key = (char *)hsearch(v34, ENTER);
          if (!v34.key)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100037DEC();
            v34.key = "hsearch";
            goto LABEL_129;
          }
          if (*(char **)v34.key != key)
            free(key);
          if (++v41 == v6)
            goto LABEL_35;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100035654();
        v34.key = "strdup";
        goto LABEL_129;
      }
LABEL_35:
      v34.key = (char *)fts_open(v95, 16, 0);
      if (v34.key)
      {
        v45 = v34.key;
        v46 = strlen(a2);
        *__error() = 0;
        v47 = fts_read((FTS *)v45);
        if (!v47)
        {
LABEL_112:
          if (*__error())
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100037D0C();
            v84 = "fts_read";
LABEL_136:
            sub_10001BFE8(v84, v56, v57, v58, v59, v60, v61, v62, (char)v90);
LABEL_137:
            v82 = 0;
          }
          else
          {
            if (v94[65] < 29)
              v85 = (int (__cdecl *)(const void *, const void *))sub_10000F7D8;
            else
              v85 = (int (__cdecl *)(const void *, const void *))sub_1000121E0;
            qsort(*v92, *v93, 0x98uLL, v85);
            v82 = 1;
          }
          fts_close((FTS *)v45);
LABEL_141:
          v23 = (const char **)v95;
          if (v11)
            goto LABEL_142;
          goto LABEL_144;
        }
        v48 = v47;
        __sa = 0;
        v49 = 0;
        v50 = "./";
        v51 = v46 + 1;
        while (1)
        {
          fts_info = v48->fts_info;
          if (fts_info != 10)
          {
            if (!v49 || fts_info != 6)
            {
              v53 = v50;
              if (fts_info == 6 || sub_10000F858(v94, (uint64_t)v48, 1))
              {
                if (v51 < v48->fts_pathlen)
                {
                  if (!v48->fts_statp)
                    sub_100037D38();
                  if (*(_DWORD *)(*(_QWORD *)v94 + 124))
                  {
                    v54 = v7;
                    v55 = v6;
                    if (v6)
                    {
                      while (stat(*v54, &v99) != -1)
                      {
                        if (v48->fts_statp->st_dev == v99.st_dev)
                          goto LABEL_52;
                        v54 += 19;
                        if (!--v55)
                          goto LABEL_69;
                      }
                      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                        sub_100037D88();
                      v90 = *v54;
                      v84 = "%s: stat";
                      goto LABEL_136;
                    }
                    goto LABEL_69;
                  }
LABEL_52:
                  fts_path = v48->fts_path;
                  v64 = &fts_path[v51];
                  v65 = (uint64_t)&fts_path[v51 + 1];
                  v66 = fts_path[v51];
                  if (v66 == 47)
                    ++v51;
                  v91 = v51;
                  v67 = &fts_path[v51];
                  if (v66 == 47)
                    v68 = v65;
                  else
                    v68 = (uint64_t)v64;
                  v69 = (char *)(v68 - 2);
                  v50 = v53;
                  do
                  {
                    v70 = strncmp(v67, v53, 2uLL);
                    v67 += 2;
                    v69 += 2;
                  }
                  while (!v70);
                  v71 = v48->fts_info;
                  if (*(_DWORD *)(*(_QWORD *)v94 + 100))
                  {
LABEL_60:
                    if (v71 == 1 && __sa != 0)
                      goto LABEL_92;
                  }
                  else if (v71 != 6)
                  {
                    v74 = (char *)(v67 - 2);
                    if (sub_100025E64(v74, v71 == 1, 1, __sa != 0) == -1)
                    {
                      v75 = v74;
                      if (dword_100050EE8)
                      {
                        v76 = qword_100050EF8;
                        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)buf = 136315138;
                          v101 = v69;
                          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "skip excluded file %s", buf, 0xCu);
                        }
                      }
                      sub_10001C1CC("skip excluded file %s", v75);
                      if (v48->fts_info == 1)
                        v49 = 1;
                      ++v48->fts_parent->fts_number;
                      fts_set((FTS *)v45, v48, 4);
                      goto LABEL_92;
                    }
                    v71 = v48->fts_info;
                    goto LABEL_60;
                  }
                  v102.key = v69;
                  v102.data = 0;
                  if (hsearch(v102, FIND))
                    goto LABEL_92;
                  v73 = v48->fts_info;
                  if (v73 == 1)
                  {
                    __sa = (char *)v48;
LABEL_92:
                    v51 = v91;
                    goto LABEL_93;
                  }
                  if (v48 == (FTSENT *)__sa)
                  {
                    if (v73 != 6)
                      sub_100037D60();
                    __sa = 0;
                  }
                  else if (v73 != 6)
                  {
                    goto LABEL_95;
                  }
                  if (v48->fts_number >= 1)
                  {
                    if (dword_100050EE8)
                    {
                      v77 = qword_100050EF8;
                      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
                      {
                        v78 = v48->fts_path;
                        *(_DWORD *)buf = 136315138;
                        v101 = v78;
                        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "%s: not empty, cannot delete", buf, 0xCu);
                      }
                    }
                    sub_10001C1CC("%s: not empty, cannot delete", v48->fts_path);
                    ++v48->fts_parent->fts_number;
                    v50 = v53;
                    goto LABEL_92;
                  }
LABEL_95:
                  if (!sub_1000109DC((char **)v92, v93, &v98))
                  {
                    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                      sub_100037944();
                    sub_10001C094("flist_realloc");
                    goto LABEL_137;
                  }
                  v79 = *v92;
                  v80 = *v93 - 1;
                  v81 = strdup(v48->fts_path);
                  v79[19 * v80] = v81;
                  if (!v81)
                  {
                    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                      sub_100035654();
                    v84 = "strdup";
                    goto LABEL_136;
                  }
                  v79[19 * v80 + 2] = &v81[v91];
                  v51 = v91;
                  sub_10001383C((uint64_t)&v79[19 * v80], &v48->fts_statp->st_dev);
LABEL_68:
                  *__error() = 0;
                }
LABEL_69:
                v50 = v53;
                goto LABEL_93;
              }
              if (v48->fts_errno)
                ++*((_QWORD *)v94 + 30);
              ++v48->fts_parent->fts_number;
              goto LABEL_68;
            }
            v49 = 0;
          }
LABEL_93:
          v48 = fts_read((FTS *)v45);
          if (!v48)
            goto LABEL_112;
        }
      }
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037CE0();
      v34.key = "fts_open";
    }
    else
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037CB4();
      v34.key = "hcreate";
    }
LABEL_129:
    sub_10001BFE8(v34.key, (uint64_t)v34.data, v35, v36, v37, v38, v39, v40, (char)v90);
    v82 = 0;
    goto LABEL_141;
  }
  v25 = 0;
  while (1)
  {
    if (((uint64_t)v7[19 * v25 + 7] & 1) == 0)
      goto LABEL_20;
    if (((uint64_t)v7[19 * v25 + 3] & 0xF000) != 0x4000)
      sub_100037E18();
    v26 = (char **)&v23[v24];
    if (asprintf(v26, "%s/%s", a2, v7[19 * v25 + 2]) == -1)
      break;
    v28 = v7;
    v29 = v6;
    v30 = *v26;
    v31 = v23;
    v32 = v24;
    if (v24)
    {
      while (strcmp(*v23, v30))
      {
        ++v23;
        if (!--v32)
          goto LABEL_15;
      }
      free(v30);
      *v26 = 0;
LABEL_18:
      --v11;
      goto LABEL_19;
    }
LABEL_15:
    if (!v30)
      goto LABEL_18;
    sub_10001BE54(3, "%s: will scan for deletions", v17, v18, v19, v20, v21, v22, (char)v30);
    ++v24;
LABEL_19:
    v23 = v31;
    v6 = v29;
    v7 = v28;
LABEL_20:
    if (++v25 >= v6 || v24 >= (unint64_t)v11)
      goto LABEL_22;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100034BD0();
  sub_10001BFE8("asprintf", v27, v17, v18, v19, v20, v21, v22, v89);
  v82 = 0;
  *v26 = 0;
LABEL_142:
  v86 = (void **)v23;
  do
  {
    v87 = *v86++;
    free(v87);
    --v11;
  }
  while (v11);
LABEL_144:
  free(v23);
  hdestroy();
  return v82;
}

double sub_10001383C(uint64_t a1, int *a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 2);
  result = *((double *)a2 + 2);
  *(double *)(a1 + 28) = result;
  v3 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 36) = a2[6];
  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = *((unsigned __int16 *)a2 + 3);
  return result;
}

uint64_t sub_100013878(uint64_t a1, const char *a2, uint64_t a3, char **a4, unint64_t *a5, unint64_t *a6, int *a7)
{
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v26;

  if (sub_1000109DC(a4, a5, a6))
  {
    v12 = *a4;
    v13 = *a5 - 1;
    v14 = strdup(a2);
    *(_QWORD *)&v12[152 * v13] = v14;
    if (v14)
    {
      v22 = &v12[152 * v13];
      *((_QWORD *)v22 + 2) = &v14[a3];
      *((_WORD *)v22 + 12) = *((_WORD *)a7 + 2);
      *(_QWORD *)(v22 + 28) = *((_QWORD *)a7 + 2);
      v23 = *((_QWORD *)a7 + 6);
      *((_QWORD *)v22 + 5) = *((_QWORD *)a7 + 12);
      *((_QWORD *)v22 + 6) = v23;
      *((_DWORD *)v22 + 9) = a7[6];
      v24 = *((_QWORD *)a7 + 1);
      *((_QWORD *)v22 + 8) = *a7;
      *((_QWORD *)v22 + 9) = v24;
      *((_QWORD *)v22 + 10) = *((unsigned __int16 *)a7 + 3);
      return 1;
    }
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035654();
    }
    sub_10001BFE8("strdup", v15, v16, v17, v18, v19, v20, v21, v26);
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037944();
    sub_10001C094("flist_realloc");
  }
  return 0;
}

uint64_t sub_1000139CC(_QWORD *a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  int *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  const char *v31;
  int *v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  NSObject *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  unint64_t v81;
  uint64_t v82;
  uint8_t buf[4];
  char *v84;
  __int16 v85;
  char *v86;
  __int16 v87;
  char *v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  int v92;
  char __str[1024];

  if (a4)
  {
    v10 = *a1;
    if (!*(_DWORD *)(*a1 + 96) && !*(_DWORD *)(v10 + 564))
      sub_100037E40();
    if (!*(_DWORD *)(v10 + 32) && !*(_DWORD *)(v10 + 564))
      sub_100037E68();
    if (!a1[30] || *(_DWORD *)(v10 + 568))
    {
      v11 = *(_QWORD *)(v10 + 592);
      if ((v11 & 0x8000000000000000) == 0)
      {
        v12 = a4;
        if (v11)
        {
          v13 = a1[31];
          if (v11 <= v13 || *((_BYTE *)a1 + 256))
            return 1;
          v12 = a4;
          if (v13 + a4 > v11)
          {
            *((_BYTE *)a1 + 256) = 1;
            v12 = v11 - v13;
          }
        }
        v81 = v12;
        v14 = *((_DWORD *)a1 + 65);
        v15 = v14 < 29;
        if (v14 >= 29)
          v16 = v12 - 1;
        else
          v16 = 0;
        if (v15)
          v17 = v12;
        else
          v17 = -1;
        if (v15)
          v18 = 1;
        else
          v18 = -1;
        v19 = v16 - v17;
        if (v16 == v17)
        {
LABEL_24:
          if (a4 > v81)
            sub_10001BE54(-1, "Deletions stopped due to --max-delete limit (%zu skipped)", a3, a4, a5, a6, a7, a8, a4 - v81);
          return 1;
        }
        v21 = a3 + 152 * v16;
        v22 = &dword_100050EE8;
        v23 = "%s: deleting";
        v24 = 152 * v18;
        v82 = v18;
        while (1)
        {
          if (*v22)
          {
            v25 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
            {
              v26 = *(char **)(v21 + 16);
              *(_DWORD *)buf = 136315138;
              v84 = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s: deleting", buf, 0xCu);
            }
          }
          sub_10001BE54(0, v23, a3, a4, a5, a6, a7, a8, *(_QWORD *)(v21 + 16));
          v27 = *a1;
          if (*(_DWORD *)(*a1 + 36))
            goto LABEL_65;
          if (a2 == -1)
            sub_100037E90();
          ++a1[31];
          v28 = *(_WORD *)(v21 + 24) & 0xF000;
          v29 = v28 == 0x4000;
          if (*(_DWORD *)(v27 + 152))
          {
            v30 = v24;
            v31 = v23;
            v32 = v22;
            v33 = *(char **)(v27 + 160);
            if (v33)
            {
              if (*v32)
              {
                v34 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
                {
                  v70 = *(char **)(v21 + 16);
                  *(_DWORD *)buf = 136315394;
                  v84 = v70;
                  v85 = 2080;
                  v86 = v33;
                  _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "%s: doing backup-dir to %s", buf, 0x16u);
                }
              }
              sub_10001BE54(2, "%s: doing backup-dir to %s", a3, a4, a5, a6, a7, a8, *(_QWORD *)(v21 + 16));
              if (snprintf(__str, 0x400uLL, "%s/%s%s", *(const char **)(*a1 + 160), *(const char **)(v21 + 16), *(const char **)(*a1 + 168)) >= 1024)
              {
                v22 = v32;
                if (*v32)
                {
                  v42 = qword_100050EF8;
                  if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                  {
                    v71 = *(char **)(v21 + 16);
                    v73 = *(char **)(*a1 + 160);
                    v72 = *(_QWORD *)(*a1 + 168);
                    *(_DWORD *)buf = 136316162;
                    v84 = v71;
                    v85 = 2080;
                    v86 = v73;
                    v87 = 2080;
                    v88 = v71;
                    v89 = 2080;
                    v90 = v72;
                    v91 = 1024;
                    v92 = 1024;
                    _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%s: backup-dir: compound backup path too long: %s/%s%s > %d", buf, 0x30u);
                  }
                }
                sub_10001BFE8("%s: backup-dir: compound backup path too long: %s/%s%s > %d", v35, v36, v37, v38, v39, v40, v41, *(_QWORD *)(v21 + 16));
                v23 = v31;
                v24 = v30;
                v18 = v82;
                goto LABEL_64;
              }
              v22 = v32;
              v23 = v31;
              v24 = v30;
              v18 = v82;
              if (sub_100009584((uint64_t)a1, a2, (const char **)v21, __str, *(_WORD *)(v21 + 24)) == -1)
              {
                if (*v22)
                {
                  v59 = qword_100050EF8;
                  if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                  {
                    v76 = *(char **)(v21 + 16);
                    *(_DWORD *)buf = 136315394;
                    v84 = v76;
                    v85 = 2080;
                    v86 = __str;
                    _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%s: backup_to_dir: %s", buf, 0x16u);
                  }
                }
                sub_10001BFE8("%s: backup_to_dir: %s", v52, v53, v54, v55, v56, v57, v58, *(_QWORD *)(v21 + 16));
                goto LABEL_64;
              }
            }
            else
            {
              v22 = v32;
              v23 = v31;
              v24 = v30;
              v18 = v82;
              if (v28 != 0x4000)
              {
                if (*v22)
                {
                  v43 = qword_100050EF8;
                  if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
                  {
                    v75 = *(char **)(v21 + 16);
                    *(_DWORD *)buf = 136315138;
                    v84 = v75;
                    _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "%s: doing backup", buf, 0xCu);
                  }
                }
                sub_10001BE54(2, "%s: doing backup", a3, a4, a5, a6, a7, a8, *(_QWORD *)(v21 + 16));
                if (snprintf(__str, 0x400uLL, "%s%s", *(const char **)(v21 + 16), *(const char **)(*a1 + 168)) >= 1024)
                {
                  if (*v22)
                  {
                    v51 = qword_100050EF8;
                    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                    {
                      v77 = *(char **)(v21 + 16);
                      v78 = *(char **)(*a1 + 168);
                      *(_DWORD *)buf = 136315906;
                      v84 = v77;
                      v85 = 2080;
                      v86 = v77;
                      v87 = 2080;
                      v88 = v78;
                      v89 = 1024;
                      LODWORD(v90) = 1024;
                      _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "%s: backup: compound backup path too long: %s%s > %d", buf, 0x26u);
                    }
                  }
                  sub_10001BFE8("%s: backup: compound backup path too long: %s%s > %d", v44, v45, v46, v47, v48, v49, v50, *(_QWORD *)(v21 + 16));
                  goto LABEL_64;
                }
                if (sub_100009BA8(a2, *(const char **)(v21 + 16), a2, __str, 1) == -1)
                {
                  if (*v22)
                  {
                    v69 = qword_100050EF8;
                    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                    {
                      v79 = *(char **)(v21 + 16);
                      *(_DWORD *)buf = 136315394;
                      v84 = v79;
                      v85 = 2080;
                      v86 = __str;
                      _os_log_error_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "%s: move_file: %s", buf, 0x16u);
                    }
                  }
                  sub_10001BFE8("%s: move_file: %s", v60, v61, v62, v63, v64, v65, v66, *(_QWORD *)(v21 + 16));
                  goto LABEL_64;
                }
              }
            }
          }
          if (unlinkat(a2, *(const char **)(v21 + 16), v29 << 7) != -1 || *__error() == 2)
            goto LABEL_65;
          if (*v22)
          {
            v68 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            {
              v74 = *(char **)(v21 + 16);
              *(_DWORD *)buf = 136315138;
              v84 = v74;
              _os_log_error_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "%s: unlinkat", buf, 0xCu);
            }
          }
          sub_10001BFE8("%s: unlinkat", v67, a3, a4, a5, a6, a7, a8, *(_QWORD *)(v21 + 16));
LABEL_64:
          ++a1[30];
LABEL_65:
          v21 += v24;
          v19 += v18;
          if (!v19)
            goto LABEL_24;
        }
      }
    }
  }
  return 1;
}

void sub_100014104(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  if (*(_QWORD *)(*(_QWORD *)a1 + 432) && *(_QWORD *)(a1 + 176))
  {
    v2 = 0;
    v3 = 1;
    do
    {
      free(*(void **)(*(_QWORD *)(a1 + 168) + 8 * v2));
      v2 = v3;
    }
    while (*(_QWORD *)(a1 + 176) > (unint64_t)v3++);
  }
  free(*(void **)(a1 + 168));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
}

uint64_t sub_100014168(uint64_t a1)
{
  uint64_t v2;
  FILE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char __s[1024];

  bzero(__s, 0x400uLL);
  v2 = *(_QWORD *)a1;
  if (!strcmp(*(const char **)(*(_QWORD *)a1 + 432), "-"))
  {
    v3 = __stdinp;
  }
  else if (*(_QWORD *)(v2 + 496))
  {
    v3 = 0;
  }
  else
  {
    v3 = fopen(*(const char **)(v2 + 504), "r");
    if (!v3)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037F78();
      sub_10001BFE8("fopen ro: '%s'", v4, v5, v6, v7, v8, v9, v10, *(_QWORD *)(*(_QWORD *)a1 + 432));
      return 0;
    }
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  while (*(_QWORD *)(*(_QWORD *)a1 + 496))
  {
    if (sub_1000143E4(a1, *(_DWORD *)(a1 + 184), (uint64_t)__s) == -1)
      goto LABEL_19;
LABEL_11:
    if (!sub_1000144F8(a1, __s))
      goto LABEL_19;
    if (!__s[0])
    {
      qsort(*(void **)(a1 + 168), *(_QWORD *)(a1 + 176), 8uLL, (int (__cdecl *)(const void *, const void *))sub_10001470C);
      v19 = 0;
      if (!v3)
        goto LABEL_22;
      goto LABEL_20;
    }
  }
  v11 = fileno(v3);
  if (sub_1000143E4(a1, v11, (uint64_t)__s) != -1)
    goto LABEL_11;
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100037F18();
  sub_10001BFE8("fdgets: '%s'", v12, v13, v14, v15, v16, v17, v18, *(_QWORD *)(*(_QWORD *)a1 + 432));
LABEL_19:
  v19 = 1;
  if (!v3)
    goto LABEL_22;
LABEL_20:
  if (v3 != __stdinp && fclose(v3) == -1)
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037EB8();
    }
    sub_10001BFE8("fclose: '%s'", v20, v21, v22, v23, v24, v25, v26, *(_QWORD *)(*(_QWORD *)a1 + 432));
    goto LABEL_28;
  }
LABEL_22:
  if (!v19)
    return 1;
LABEL_28:
  sub_100014104(a1);
  return 0;
}

uint64_t sub_1000143E4(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v6;
  ssize_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v6 = 0;
  v7 = 1;
  while (v7 == 1 && v6 <= 0x3FF)
  {
    v8 = (_BYTE *)(a3 + v6);
    while (1)
    {
      v7 = read(a2, (void *)(a3 + v6), 1uLL);
      if (v7 != -1)
        break;
      if (*__error() != 35 && *__error() != 4 && *__error() != 35)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037FD8();
        sub_10001BFE8("read(2) of files-from file failed", v9, v10, v11, v12, v13, v14, v15, v17);
        return 0xFFFFFFFFLL;
      }
    }
    ++v6;
    if (!*v8)
      return v6;
    if (*v8 == 10 && !*(_DWORD *)(*(_QWORD *)a1 + 440))
    {
      *(_BYTE *)(a3 + v6 - 1) = 0;
      return v6;
    }
  }
  return v6;
}

uint64_t sub_1000144F8(uint64_t a1, char *__s)
{
  size_t v4;
  int v5;
  uint64_t result;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v4 = strlen(__s);
  if (__s[v4 - 1] == 10)
    __s[v4 - 1] = 0;
  v5 = *__s;
  result = 1;
  if (v5 != 35 && v5 != 59)
  {
    if (!strncmp(__s, "..", 2uLL))
    {
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
    }
    else
    {
      if (!strstr(__s, "/.."))
      {
        v7 = (char **)malloc_type_realloc(*(void **)(a1 + 168), 8 * *(_QWORD *)(a1 + 176) + 8, 0x10040436913F5uLL);
        *(_QWORD *)(a1 + 168) = v7;
        if (v7)
        {
          asprintf(&v7[*(_QWORD *)(a1 + 176)], "%s", __s);
          v22 = *(_QWORD *)(a1 + 176);
          if (*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v22))
          {
            sub_10001BE54(3, "Added '%s' to flist", v16, v17, v18, v19, v20, v21, *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8 * v22));
            ++*(_QWORD *)(a1 + 176);
            return 1;
          }
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100034BD0();
          sub_10001BFE8("asprintf", v15, v16, v17, v18, v19, v20, v21, v24);
          sub_100014104(a1);
        }
        else
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100038030();
          sub_10001BFE8("realloc", v8, v9, v10, v11, v12, v13, v14, v23);
        }
        return 0;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
LABEL_13:
        sub_10001BF64("Can't have files-from with '..'");
        return 0;
      }
    }
    sub_100038004();
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_10001470C(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t sub_100014718(uint64_t *a1, char *a2, uint64_t a3, int64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  stat *v45;
  int64_t v47;
  int v48;
  FTS *v49;
  FTS *v50;
  FTSENT *v51;
  FTSENT *v52;
  os_log_t *v53;
  unsigned int v54;
  stat *fts_statp;
  int v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  char *v82;
  int v83;
  stat *v84;
  dev_t st_dev;
  char *fts_path;
  os_log_t *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  _DWORD *v100;
  NSObject *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  size_t v110;
  size_t v111;
  size_t v112;
  stat *v113;
  mode_t st_mode;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __darwin_ino64_t st_ino;
  NSObject *v122;
  char *v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *fts_accpath;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  int64_t v162;
  _DWORD *v163;
  uint8_t v164;
  char v165[15];
  stat v166;
  stat v167;
  uint8_t buf[4];
  char *v169;
  __int16 v170;
  char *v171;
  uint8_t v172[4];
  char *v173;
  __int16 v174;
  char *v175;
  char v176[1024];
  char *v177;
  uint64_t v178;

  v177 = 0;
  v178 = 0;
  memset(&v167, 0, sizeof(v167));
  memset(&v166, 0, sizeof(v166));
  if (*(_DWORD *)(*a1 + 64))
    v8 = stat(a2, &v167);
  else
    v8 = lstat(a2, &v167);
  if (v8 == -1)
  {
    ++a1[30];
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003805C();
    v160 = (char)a2;
    v18 = "%s: (l)stat";
    goto LABEL_13;
  }
  v16 = v167.st_mode & 0xF000;
  if (v16 != 0x4000)
  {
    if (v16 != 40960)
    {
      if (v16 == 0x8000)
        v17 = "file";
      else
        v17 = "special";
      goto LABEL_31;
    }
    v29 = (_DWORD *)*a1;
    if (*(_DWORD *)(*a1 + 76) || v29[17] || v29[18])
    {
      if (stat(a2, &v166) == -1)
      {
        ++a1[30];
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000361F8();
        sub_10001BFE8("%s: stat", v30, v31, v32, v33, v34, v35, v36, (char)a2);
        return 0;
      }
      v37 = readlink(a2, v176, 0x400uLL);
      if (v37 == -1)
      {
        ++a1[30];
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000380BC();
        sub_10001BFE8("%s: readlink", v38, v39, v40, v41, v42, v43, v44, (char)a2);
        return 0;
      }
      v176[v37] = 0;
      v29 = (_DWORD *)*a1;
      if (*(_DWORD *)(*a1 + 72))
      {
        if (sub_1000092D8(v176, a2, a2))
        {
          if (dword_100050EE8)
          {
            v152 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v172 = 136315394;
              v173 = a2;
              v174 = 2080;
              v175 = v176;
              _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "ignoring unsafe symlink: %s -> %s", v172, 0x16u);
            }
          }
          sub_10001BE54(0, "ignoring unsafe symlink: %s -> %s", v146, v147, v148, v149, v150, v151, (char)a2);
          return 1;
        }
        v29 = (_DWORD *)*a1;
      }
    }
    if (!v29[19] || (v166.st_mode & 0xF000) != 0x4000)
    {
      if (v29[17] && sub_1000092D8(v176, a2, a2))
      {
        v17 = "file";
        v45 = &v166;
        return sub_100015640(a1, v17, a2, a3, (uint64_t)v45);
      }
      v17 = "symlink";
LABEL_31:
      v45 = &v167;
      return sub_100015640(a1, v17, a2, a3, (uint64_t)v45);
    }
    if (a4 == -1)
      a4 = sub_1000157D8(a2);
    snprintf((char *)v172, 0x400uLL, "%s/", a2);
    sub_10001BE54(3, "symlinks: recursing '%s' -> '%s' '%s'\n", v154, v155, v156, v157, v158, v159, (char)a2);
    sub_100014718(a1, v172, a3, a4);
    return 1;
  }
  v20 = strlen(a2);
  v21 = v20;
  if (v20 >= 3)
  {
    v21 = v20 - (strcmp(&a2[v20 - 3], "/./") == 0);
    if (v21 >> 10 > 4)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003811C();
      sub_10001BFE8("%s: flist_normalize_path", v22, v23, v24, v25, v26, v27, v28, (char)a2);
      return 0;
    }
  }
  __memcpy_chk(v172, a2, v21, 5120);
  if (v172[v21 - 1] == 47)
    v172[v21++] = 46;
  v172[v21] = 0;
  v47 = a4;
  v177 = (char *)v172;
  v178 = 0;
  if (a4 == -1)
    v47 = sub_1000157D8((char *)v172);
  if (*(_DWORD *)(*a1 + 64))
    v48 = 2;
  else
    v48 = 20;
  v49 = fts_open(&v177, v48, 0);
  if (!v49)
  {
    ++a1[30];
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037CE0();
    v18 = "fts_open";
LABEL_13:
    sub_10001BFE8(v18, v9, v10, v11, v12, v13, v14, v15, v160);
    return 0;
  }
  v50 = v49;
  *__error() = 0;
  v51 = fts_read(v50);
  if (v51)
  {
    v52 = v51;
    v162 = a4;
    v163 = 0;
    v161 = 0;
    v19 = 0;
    v53 = (os_log_t *)&qword_100050EF8;
    while (1)
    {
      if (v52->fts_info == 6)
        sub_100025CEC((uint64_t)v52->fts_path, v47);
      if (!sub_10000F858(a1, (uint64_t)v52, 0))
      {
        *__error() = 0;
        goto LABEL_133;
      }
      if (v52->fts_info == 1)
      {
        if (*(_DWORD *)(*a1 + 440))
          v54 = 0;
        else
          v54 = 10;
        sub_100025AA4((uint64_t)v52->fts_path, v47, v54);
      }
      fts_statp = v52->fts_statp;
      if (!fts_statp)
        sub_1000381FC();
      v56 = fts_statp->st_mode & 0xF000;
      v57 = (_DWORD *)*a1;
      if (v56 == 40960)
      {
        if (v57[19] || v57[17] || v57[18])
        {
          if (stat(v52->fts_accpath, &v166) == -1)
          {
            if (dword_100050EE8)
            {
              v74 = *v53;
              if (os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
              {
                fts_accpath = v52->fts_accpath;
                *(_DWORD *)buf = 136315138;
                v169 = fts_accpath;
                _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%s: stat", buf, 0xCu);
              }
            }
            sub_10001BFE8("%s: stat", v58, v59, v60, v61, v62, v63, v64, (char)v52->fts_accpath);
            goto LABEL_68;
          }
          v65 = readlink(v52->fts_accpath, v176, 0x400uLL);
          if (v65 == -1)
          {
            if (dword_100050EE8)
            {
              v73 = *v53;
              if (os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
              {
                v143 = v52->fts_accpath;
                *(_DWORD *)buf = 136315138;
                v169 = v143;
                _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%s: readlink", buf, 0xCu);
              }
            }
            sub_10001BFE8("%s: readlink", v66, v67, v68, v69, v70, v71, v72, (char)v52->fts_accpath);
LABEL_68:
            ++a1[30];
            goto LABEL_133;
          }
          v176[v65] = 0;
          v57 = (_DWORD *)*a1;
          if (*(_DWORD *)(*a1 + 72))
          {
            if (sub_1000092D8(v176, v52->fts_accpath, (char *)v172))
            {
              if (dword_100050EE8)
              {
                v81 = *v53;
                if (os_log_type_enabled(*v53, OS_LOG_TYPE_DEFAULT))
                {
                  v82 = v52->fts_accpath;
                  *(_DWORD *)buf = 136315394;
                  v169 = v82;
                  v170 = 2080;
                  v171 = v176;
                  _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "ignoring unsafe symlink %s -> %s", buf, 0x16u);
                }
              }
              sub_10001BE54(0, "ignoring unsafe symlink %s -> %s", v75, v76, v77, v78, v79, v80, (char)v52->fts_accpath);
              goto LABEL_133;
            }
            v57 = (_DWORD *)*a1;
          }
        }
        if (v57[19] && (v166.st_mode & 0xF000) == 0x4000)
        {
          if (sub_100014718(a1, v52->fts_path, a3, v47))
            goto LABEL_133;
          goto LABEL_68;
        }
      }
      v83 = v57[31];
      if (v83)
      {
        v84 = v52->fts_statp;
        st_dev = v84->st_dev;
        if (v84->st_dev != v167.st_dev)
        {
          if (v83 > 1 || (v84->st_mode & 0xF000) != 0x4000)
            goto LABEL_133;
          if (v161)
          {
            v99 = 0;
            while (v163[v99] != st_dev)
            {
              if (v161 == ++v99)
                goto LABEL_97;
            }
            goto LABEL_133;
          }
LABEL_97:
          v100 = sub_100003660(v163, v161 + 1, 4uLL);
          if (!v100)
          {
            if (dword_100050EE8 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
              sub_100038284();
            sub_10001C094("reallocarray flist_gen_dirent()");
            goto LABEL_165;
          }
          v100[v161++] = v52->fts_statp->st_dev;
          v163 = v100;
        }
      }
      fts_path = v52->fts_path;
      if (fts_path[v47] == 47)
        ++v47;
      if (sub_100025E64(&fts_path[v47], v52->fts_info == 1, 0, 0) == -1)
      {
        if (dword_100050EE8)
        {
          v101 = *v53;
          if (os_log_type_enabled(*v53, OS_LOG_TYPE_INFO))
          {
            v102 = &v52->fts_path[v47];
            *(_DWORD *)buf = 136315138;
            v169 = v102;
            _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_INFO, "%s: skipping excluded file", buf, 0xCu);
          }
        }
        sub_10001C1CC("%s: skipping excluded file", &v52->fts_path[v47]);
        fts_set(v50, v52, 4);
        goto LABEL_133;
      }
      if (!*(_DWORD *)(*a1 + 604) || !access(v52->fts_path, 4))
        break;
LABEL_133:
      v52 = fts_read(v50);
      if (!v52)
        goto LABEL_155;
    }
    v87 = v53;
    v88 = sub_100010AD0(a3);
    if (!v88)
    {
      if (dword_100050EE8 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
        sub_100037944();
      sub_10001C094("flist_realloc");
      goto LABEL_165;
    }
    v89 = v88;
    v90 = v52->fts_path;
    if (v90[v47])
    {
      v98 = strdup(v90);
      *(_QWORD *)v89 = v98;
      if (!v98)
      {
        if (dword_100050EE8 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
          sub_100035654();
        v153 = "strdup";
        goto LABEL_160;
      }
    }
    else
    {
      if (asprintf((char **)v89, "%s.", v52->fts_path) == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
          sub_100034BD0();
        sub_10001BFE8("asprintf", v103, v104, v105, v106, v107, v108, v109, v160);
        *(_QWORD *)v89 = 0;
        goto LABEL_165;
      }
      v98 = *(const char **)v89;
    }
    if (v162 != -1)
    {
      v110 = strlen(v98);
      v111 = v110 - 2;
      if (v110 >= 2)
      {
        v112 = v110 - 1;
        if (v98[v110 - 1] == 46 && v98[v111] == 47)
        {
          v98[v111] = 0;
          v98 = *(const char **)v89;
        }
        goto LABEL_112;
      }
      if (v110)
      {
        v112 = 0;
LABEL_112:
        if (v98[v112] == 47)
        {
          v98[v112] = 0;
          v98 = *(const char **)v89;
        }
      }
    }
    *(_QWORD *)(v89 + 16) = &v98[v47];
    v113 = v52->fts_statp;
    st_mode = v113->st_mode;
    *(_WORD *)(v89 + 24) = st_mode;
    *(_QWORD *)(v89 + 28) = *(_QWORD *)&v113->st_uid;
    *(_QWORD *)(v89 + 40) = v113->st_size;
    *(_QWORD *)(v89 + 48) = v113->st_mtimespec.tv_sec;
    *(_DWORD *)(v89 + 36) = v113->st_rdev;
    *(_QWORD *)(v89 + 64) = v113->st_dev;
    *(_QWORD *)(v89 + 72) = v113->st_ino;
    *(_QWORD *)(v89 + 80) = v113->st_nlink;
    if ((st_mode & 0xF000) == 0xA000)
    {
      if (*(_DWORD *)(*a1 + 68) && sub_1000092D8(v176, v52->fts_path, (char *)v172))
      {
        *(_WORD *)(v89 + 24) = v166.st_mode;
        *(_QWORD *)(v89 + 28) = *(_QWORD *)&v166.st_uid;
        *(_QWORD *)(v89 + 40) = v166.st_size;
        *(_QWORD *)(v89 + 48) = v166.st_mtimespec.tv_sec;
        *(_DWORD *)(v89 + 36) = v166.st_rdev;
        st_ino = v166.st_ino;
        *(_QWORD *)(v89 + 64) = v166.st_dev;
        *(_QWORD *)(v89 + 72) = st_ino;
        *(_QWORD *)(v89 + 80) = v166.st_nlink;
        if (dword_100050EE8)
        {
          v122 = *v87;
          if (os_log_type_enabled(*v87, OS_LOG_TYPE_DEBUG))
          {
            v144 = v52->fts_path;
            *(_DWORD *)buf = 136315394;
            v169 = v144;
            v170 = 2080;
            v171 = v176;
            _os_log_debug_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "copy_unsafe_links: converting unsafe link %s -> %s to a regular file\n", buf, 0x16u);
          }
        }
        sub_10001BE54(2, "copy_unsafe_links: converting unsafe link %s -> %s to a regular file\n", v115, v116, v117, v118, v119, v120, (char)v52->fts_path);
      }
      else
      {
        v123 = sub_10002E130(v52->fts_accpath);
        *(_QWORD *)(v89 + 88) = v123;
        if (!v123)
        {
          v53 = v87;
          if (dword_100050EE8)
          {
            v137 = *v87;
            if (os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
              sub_100038248(&v164, v165, v137);
          }
          sub_10001C094("symlink_read");
          ++a1[30];
          v141 = *(_QWORD *)(a3 + 8);
          if (!v141)
            sub_100038224(v138, v139, v140);
          *(_QWORD *)(a3 + 8) = v141 - 1;
          goto LABEL_133;
        }
      }
    }
    if (*(_DWORD *)(*a1 + 16)
      && (*(_WORD *)(v89 + 24) & 0xF000) == 0x8000
      && (v124 = *(_QWORD *)(v89 + 40), v124 >= 1)
      && (v19 = sub_100018C7C(-2, *(const char **)v89, v124, (unsigned __int8 *)(v89 + 96)), (_DWORD)v19))
    {
      if (dword_100050EE8)
      {
        v132 = *v87;
        if (os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
        {
          v145 = *(char **)v89;
          *(_DWORD *)buf = 136315138;
          v169 = v145;
          _os_log_error_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "%s: hash_file_by_path", buf, 0xCu);
        }
      }
      sub_10001BFE8("%s: hash_file_by_path", v125, v126, v127, v128, v129, v130, v131, *(_QWORD *)v89);
      ++a1[30];
      v136 = *(_QWORD *)(a3 + 8);
      if (!v136)
        sub_100038224(v133, v134, v135);
      *(_QWORD *)(a3 + 8) = v136 - 1;
    }
    else
    {
      *__error() = 0;
    }
    v53 = v87;
    goto LABEL_133;
  }
  v19 = 0;
  v163 = 0;
LABEL_155:
  if (*__error())
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037D0C();
    v153 = "fts_read";
LABEL_160:
    sub_10001BFE8(v153, v91, v92, v93, v94, v95, v96, v97, v160);
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
      sub_10003817C();
    sub_10001BE54(2, "generated %zu filenames: %s", v92, v93, v94, v95, v96, v97, *(_QWORD *)(a3 + 8));
    v19 = 1;
  }
LABEL_165:
  fts_close(v50);
  free(v163);
  return v19;
}

uint64_t sub_100015640(uint64_t *a1, const char *a2, char *__s, uint64_t a4, uint64_t a5)
{
  NSObject *v11;
  uint8_t buf[4];
  char *v13;
  __int16 v14;
  const char *v15;

  if (sub_100025E64(__s, (*(_WORD *)(a5 + 4) & 0xF000) == 0x4000, 0, 0) == -1)
  {
    if (dword_100050EE8)
    {
      v11 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v13 = __s;
        v14 = 2080;
        v15 = a2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s: skipping excluded %s", buf, 0x16u);
      }
    }
    sub_10001C1CC("%s: skipping excluded %s", __s, a2);
    return 1;
  }
  if (*(_DWORD *)(*a1 + 604) && access(__s, 4) || sub_10001582C(a1, (int *)a5, __s, a4))
    return 1;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037C88();
  }
  sub_10001C094("flist_append");
  return 0;
}

int64_t sub_1000157D8(char *a1)
{
  int64_t result;
  char *v3;

  result = strlen(a1);
  if (result <= 0)
    sub_1000382B0();
  if (a1[result - 1] != 47)
  {
    v3 = strrchr(a1, 47);
    if (v3)
      return v3 - a1 + 1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_10001582C(uint64_t *a1, int *a2, const char *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  char *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned int (*v30)(char *, uint64_t, _QWORD);
  char **v31;
  int64_t v32;
  char v34;

  v8 = (uint64_t *)(a4 + 8);
  if (!sub_1000109DC((char **)a4, (unint64_t *)(a4 + 8), (unint64_t *)(a4 + 16))
    || (v9 = *v8) == 0)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000382D8();
    sub_10001BF64("fl_new failed");
    return 0;
  }
  v10 = v9 - 1;
  v11 = sub_100010B2C((_QWORD *)a4, v9 - 1);
  v12 = strdup(a3);
  *(_QWORD *)v11 = v12;
  if (!v12)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035654();
    v23 = "strdup";
    goto LABEL_23;
  }
  v20 = v12;
  v21 = *a1;
  if (*(_DWORD *)(*a1 + 188))
  {
    v22 = v12 + 1;
    if (*v12 != 47)
      v22 = v12;
    *(_QWORD *)(v11 + 16) = v22;
    if (sub_100015BCC(v12, a4))
    {
      v11 = sub_100010B2C((_QWORD *)a4, v10);
      v21 = *a1;
      goto LABEL_25;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003835C();
    v23 = "flist_append_dirs";
LABEL_23:
    sub_10001BFE8(v23, v13, v14, v15, v16, v17, v18, v19, v34);
    return 0;
  }
  v24 = strrchr(v12, 47);
  if (v24)
    *(_QWORD *)(v11 + 16) = v24 + 1;
  else
    *(_QWORD *)(v11 + 16) = v20;
LABEL_25:
  v25 = *((_WORD *)a2 + 2);
  *(_WORD *)(v11 + 24) = v25;
  *(_QWORD *)(v11 + 28) = *((_QWORD *)a2 + 2);
  v26 = *((_QWORD *)a2 + 6);
  *(_QWORD *)(v11 + 40) = *((_QWORD *)a2 + 12);
  *(_QWORD *)(v11 + 48) = v26;
  *(_DWORD *)(v11 + 36) = a2[6];
  v27 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v11 + 64) = *a2;
  *(_QWORD *)(v11 + 72) = v27;
  *(_QWORD *)(v11 + 80) = *((unsigned __int16 *)a2 + 3);
  if (*(_QWORD *)(v21 + 24))
  {
    sub_100012188(a1, v11);
    v25 = *((_WORD *)a2 + 2);
  }
  if ((v25 & 0xF000) == 0xA000)
  {
    v28 = sub_10002E130(*(const char **)v11);
    if (!v28)
    {
      ++a1[30];
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038304();
      sub_10001C094("symlink_read");
      return 0;
    }
    v29 = v28;
    v30 = (unsigned int (*)(char *, uint64_t, _QWORD))a1[29];
    v31 = (char **)(v11 + 88);
    if (!v30)
      goto LABEL_41;
    if (v30(v28, v11 + 88, 0))
    {
      ++a1[30];
      if (dword_100050EE8)
      {
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037AFC();
      }
      sub_10001C094("symlink_filter");
      return 0;
    }
    if (*v31)
      free(v29);
    else
LABEL_41:
      *v31 = v29;
  }
  if (*(_DWORD *)(*a1 + 16))
  {
    if ((*(_WORD *)(v11 + 24) & 0xF000) == 0x8000)
    {
      v32 = *(_QWORD *)(v11 + 40);
      if (v32 >= 1)
      {
        if (sub_100018C7C(-2, *(const char **)v11, v32, (unsigned __int8 *)(v11 + 96)))
        {
          ++a1[30];
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100038330();
          sub_10001C094("hash_file_by_path");
          return 0;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_100015BCC(const char *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __darwin_ino64_t st_ino;
  char v27;
  stat v28;

  v4 = 0;
  do
    v5 = a1[v4++];
  while (v5 == 47);
  v6 = strrchr((char *)&a1[v4 - 1], 47);
  if (!v6)
    return 1;
  v7 = v6;
  memset(&v28, 0, sizeof(v28));
  v8 = strdup(a1);
  if (!v8)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035654();
    sub_10001BFE8("strdup", v9, v10, v11, v12, v13, v14, v15, v27);
    return 0;
  }
  v16 = v8;
  v8[v7 - a1] = 0;
  if (stat(v8, &v28) == -1)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000361F8();
    sub_10001BFE8("%s: stat", v17, v18, v19, v20, v21, v22, v23, (char)v16);
    goto LABEL_22;
  }
  v24 = sub_100010AD0(a2);
  if (!v24)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037944();
    sub_10001C094("flist_realloc");
LABEL_22:
    free(v16);
    return 0;
  }
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_QWORD *)(v24 + 144) = 0;
  *(_QWORD *)v24 = v16;
  *(_QWORD *)(v24 + 16) = &v16[v4 - 1];
  *(_WORD *)(v24 + 24) = v28.st_mode;
  *(_QWORD *)(v24 + 28) = *(_QWORD *)&v28.st_uid;
  *(_QWORD *)(v24 + 40) = v28.st_size;
  *(_QWORD *)(v24 + 48) = v28.st_mtimespec.tv_sec;
  *(_DWORD *)(v24 + 36) = v28.st_rdev;
  st_ino = v28.st_ino;
  *(_QWORD *)(v24 + 64) = v28.st_dev;
  *(_QWORD *)(v24 + 72) = st_ino;
  *(_QWORD *)(v24 + 80) = v28.st_nlink;
  if (!strchr(&v16[v4 - 1], 47) || sub_100015BCC(v16, a2))
    return 1;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003835C();
  }
  sub_10001C094("flist_append_dirs");
  return 0;
}

void sub_100015E3C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_100015E4C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 877, a4);
}

void sub_100015E54(uint64_t a1)
{
  void **v2;
  void *v3;

  if (!a1)
    sub_100038388();
  while (1)
  {
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      break;
    v3 = *v2;
    *(_QWORD *)a1 = *v2;
    if (!v3)
      *(_QWORD *)(a1 + 8) = a1;
    free(v2[3]);
    free(v2);
  }
}

uint64_t sub_100015EA4(uint64_t a1, const char *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  FILE *v25;
  FILE *v26;
  char *v27;
  char *v28;
  char v29;
  ssize_t v30;
  ssize_t v31;
  ssize_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  __uint32_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __darwin_ct_rune_t v44;
  __uint32_t v45;
  __darwin_ct_rune_t v46;
  __uint32_t v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  __darwin_ct_rune_t v52;
  __uint32_t v53;
  char *v54;
  char *v55;
  __darwin_ct_rune_t v56;
  __darwin_ct_rune_t v57;
  __uint32_t v58;
  size_t v59;
  size_t v60;
  size_t v61;
  __darwin_ct_rune_t v62;
  __uint32_t v63;
  char *v64;
  int v65;
  __uint32_t v66;
  char *v67;
  int v68;
  _BOOL4 v69;
  char *v70;
  char **v71;
  char **v72;
  const char *v73;
  char *v74;
  __darwin_ct_rune_t v75;
  __darwin_ct_rune_t v76;
  __uint32_t v77;
  const char *v78;
  char *v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  NSObject *v100;
  char *v101;
  char v102;
  char *__s1;
  char **v104;
  size_t v105;
  int v106;
  uint64_t v107;
  char *__dst;
  char *__dsta;
  char *v110;
  char *v111;
  size_t __linecapp;
  char *__linep;

  __linecapp = 0;
  __linep = 0;
  v5 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
  if (!v5)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000379C8();
    sub_10001BFE8("malloc", v6, v7, v8, v9, v10, v11, v12, v102);
    return 0;
  }
  v13 = (uint64_t)v5;
  *v5 = 0;
  v5[1] = v5;
  v14 = strdup("global");
  if (!v14)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035654();
    v98 = "strdup";
    goto LABEL_127;
  }
  v22 = v14;
  v23 = sub_100016A8C(v13, (uint64_t)v14);
  if (!v23)
  {
    free(v22);
LABEL_128:
    sub_100015E54(v13);
    return 0;
  }
  v24 = v23;
  v25 = fopen(a2, "r");
  if (!v25)
  {
    if (dword_100050EE8)
    {
      v100 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000383B0((uint64_t)a2, v100);
    }
    v102 = (char)a2;
    v98 = "%s: open";
LABEL_127:
    sub_10001BFE8(v98, v15, v16, v17, v18, v19, v20, v21, v102);
    goto LABEL_128;
  }
  v26 = v25;
  v106 = a3;
  v107 = v13;
  v104 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
LABEL_6:
  __dst = v27;
LABEL_7:
  v110 = v28;
  while (1)
  {
    v30 = getline(&__linep, &__linecapp, v26);
    if (v30 == -1)
      break;
    v31 = v30;
    v32 = v30 - 1;
    __linep[v30 - 1] = 0;
    v33 = __linep;
    if ((v29 & 1) != 0)
    {
      v68 = __linep[v30 - 2];
      v69 = v68 == 92;
      if (v68 == 92)
      {
        __linep[v30 - 2] = 0;
        v33 = __linep;
      }
      v27 = __dst;
      v28 = v110;
      if (*v33)
      {
        v27 = &__dst[strlen(v33)];
        v70 = (char *)malloc_type_realloc(v110, (size_t)(v27 + 1), 0x8A98E034uLL);
        if (!v70)
        {
          free(v110);
          v28 = 0;
          v29 = 1;
          if (v68 == 92)
            goto LABEL_6;
LABEL_103:
          v89 = (char *)(v24 + 1);
          while (1)
          {
            v89 = *(char **)v89;
            if (!v89)
              break;
            if (*((char ***)v89 + 2) == v104)
              goto LABEL_111;
          }
          v90 = (char *)malloc_type_malloc(0x20uLL, 0x70040D49C7B5CuLL);
          if (!v90)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_1000379C8();
            sub_10001BFE8("malloc", v91, v92, v93, v94, v95, v96, v97, v102);
            v101 = v28;
            goto LABEL_140;
          }
          v89 = v90;
          *((_QWORD *)v90 + 1) = v24;
          *((_QWORD *)v90 + 2) = v104;
          *((_QWORD *)v90 + 3) = 0;
          if (!strcmp((const char *)v24[3], "global"))
            v104[4] = v89;
          *(_QWORD *)v89 = 0;
          *(_QWORD *)v24[2] = v89;
          v24[2] = v89;
LABEL_111:
          free(*((void **)v89 + 3));
          v27 = 0;
          v29 = 0;
          *((_QWORD *)v89 + 3) = v28;
          v28 = 0;
          goto LABEL_6;
        }
        v28 = v70;
        if ((char *)strlcat(v70, v33, (size_t)(v27 + 1)) != v27)
          sub_100038424();
      }
LABEL_102:
      v29 = 1;
      if (v69)
        goto LABEL_6;
      goto LABEL_103;
    }
    v34 = -(uint64_t)__linep;
    do
    {
      v35 = v33;
      v36 = v34;
      v37 = *v33;
      if (v37 < 0)
        v38 = __maskrune(*v33, 0x4000uLL);
      else
        v38 = _DefaultRuneLocale.__runetype[v37] & 0x4000;
      ++v33;
      v34 = v36 - 1;
    }
    while (v38);
    v29 = 0;
    if (v37 && v37 != 35)
    {
      if (v37 != 91)
      {
        v54 = strchr(v35, 61);
        v28 = 0;
        v29 = 0;
        if (v54)
        {
          __s1 = v54;
          if (v54 > v35)
          {
            v55 = v54;
            do
            {
              v57 = *--v55;
              v56 = v57;
              if (v57 < 0)
                v58 = __maskrune(v56, 0x4000uLL);
              else
                v58 = _DefaultRuneLocale.__runetype[v56] & 0x4000;
              if (!v58)
                break;
              *v55 = 0;
            }
            while (v55 > v35);
          }
          v59 = strlen(v35);
          if (v59)
          {
            v60 = v59;
            v61 = 0;
            v111 = v35 + 1;
            do
            {
              __dsta = &v35[v61];
              v62 = v35[v61];
              if (v62 < 0)
                v63 = __maskrune(v35[v61], 0x4000uLL);
              else
                v63 = _DefaultRuneLocale.__runetype[v62] & 0x4000;
              if (v63)
              {
                v105 = v61;
                v64 = v111;
                do
                {
                  v65 = *v64;
                  if (v65 < 0)
                    v66 = __maskrune(*v64, 0x4000uLL);
                  else
                    v66 = _DefaultRuneLocale.__runetype[v65] & 0x4000;
                  --v60;
                  ++v64;
                }
                while (v66);
                if (!v65)
                {
                  *__dsta = 0;
                  break;
                }
                v67 = v64 - 1;
                v61 = v105;
                memmove(__dsta, v67, v60 - v105);
                v35[v60] = 0;
              }
              else
              {
                *__dsta = __tolower(v62);
              }
              ++v61;
              ++v111;
            }
            while (v61 < v60);
          }
          if (*v35 && (v71 = sub_100016B3C(v35)) != 0)
          {
            v72 = v71;
            v73 = __s1;
            *__s1 = 0;
            v74 = __s1;
            do
            {
              v76 = *++v73;
              v75 = v76;
              if (v76 < 0)
              {
                v78 = v73;
                v77 = __maskrune(v75, 0x4000uLL);
                v73 = v78;
              }
              else
              {
                v77 = _DefaultRuneLocale.__runetype[v75] & 0x4000;
              }
              ++v74;
            }
            while (v77);
            v104 = v72;
            v79 = __linep;
            v80 = __linep[v31 - 2];
            v69 = v80 == 92;
            if (v80 == 92)
            {
              __linep[v31 - 2] = 0;
              v79 = __linep;
              v32 = v31 - 2;
            }
            v81 = strdup(v73);
            if (v81)
            {
              v27 = (char *)(&v79[v32] - v74);
              v28 = v81;
              goto LABEL_102;
            }
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100035654();
            sub_10001BFE8("strdup", v82, v83, v84, v85, v86, v87, v88, v102);
            v101 = v35;
LABEL_140:
            free(v101);
          }
          else
          {
            fprintf(__stderrp, "Invalid key in rsyncd.conf: '%s'\n", v35);
          }
LABEL_141:
          free(__linep);
LABEL_142:
          err(1, "failed to parse file %s", a2);
        }
        goto LABEL_7;
      }
      if (!v106)
        break;
      v39 = strrchr(v35 + 1, 93);
      if (!v39)
        goto LABEL_141;
      v40 = v39;
      v41 = &v39[v36];
      do
      {
        v42 = v40;
        v43 = v41;
        if (v40 <= v33)
          break;
        --v40;
        v44 = *(v42 - 1);
        v45 = v44 < 0 ? __maskrune(v44, 0x4000uLL) : _DefaultRuneLocale.__runetype[v44] & 0x4000;
        v41 = v43 - 1;
      }
      while (v45);
      if (v42 == v33)
        goto LABEL_141;
      do
      {
        v46 = v35[1];
        if (v46 < 0)
          v47 = __maskrune(v46, 0x4000uLL);
        else
          v47 = _DefaultRuneLocale.__runetype[v46] & 0x4000;
        ++v35;
        --v43;
      }
      while (v47);
      v48 = (char *)malloc_type_malloc((size_t)(v43 + 1), 0xDE505A60uLL);
      if (!v48)
        goto LABEL_141;
      v49 = v48;
      v50 = v48;
      if (v35 != v42)
      {
        v50 = v48;
        do
        {
          v51 = *v35;
          if (v51 < 0)
          {
            if (__maskrune(*v35, 0x4000uLL))
            {
LABEL_36:
              *v50 = 32;
              --v35;
              do
              {
                v52 = v35[2];
                if (v52 < 0)
                  v53 = __maskrune(v52, 0x4000uLL);
                else
                  v53 = _DefaultRuneLocale.__runetype[v52] & 0x4000;
                ++v35;
              }
              while (v53);
              goto LABEL_46;
            }
          }
          else if ((_DefaultRuneLocale.__runetype[v51] & 0x4000) != 0)
          {
            goto LABEL_36;
          }
          if (v51 == 47 || v51 == 93)
          {
            v24 = 0;
            goto LABEL_55;
          }
          *v50 = v51;
LABEL_46:
          ++v50;
          ++v35;
        }
        while (v42 != v35);
      }
      if (v50 - v49 > (uint64_t)v43)
        sub_10003844C();
      *v50 = 0;
      v24 = (_QWORD *)v107;
      while (1)
      {
        v24 = (_QWORD *)*v24;
        if (!v24)
          break;
        if (!strcasecmp((const char *)v24[3], v49))
          goto LABEL_55;
      }
      v24 = sub_100016A8C(v107, (uint64_t)v49);
      if (!v24)
LABEL_55:
        free(v49);
      v29 = 0;
      if (!v24)
        goto LABEL_141;
    }
  }
  free(__linep);
  if (ferror(v26))
    goto LABEL_142;
  fclose(v26);
  return v107;
}

BOOL sub_10001667C(uint64_t **a1, char *__s2)
{
  if (!__s2)
    sub_100038474();
  do
    a1 = (uint64_t **)*a1;
  while (a1 && strcmp((const char *)a1[3], __s2));
  return a1 != 0;
}

uint64_t sub_1000166C4(_QWORD *a1, uint64_t (*a2)(_QWORD *, const char *, uint64_t), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  const char *v8;

  v3 = (_QWORD *)*a1;
  if (!*a1)
    return 1;
  v7 = 1;
  do
  {
    v8 = (const char *)v3[3];
    if (strcmp(v8, "global"))
    {
      v7 = a2(a1, v8, a3);
      if (!(_DWORD)v7)
        break;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  return v7;
}

BOOL sub_100016754(uint64_t *a1, const char *a2, char *a3)
{
  BOOL v3;
  char *v5;
  char **v6;

  v5 = 0;
  v6 = 0;
  if (sub_10001678C(a1, a2, a3, &v6, &v5))
    v3 = 1;
  else
    v3 = v5 == 0;
  return !v3;
}

uint64_t sub_10001678C(uint64_t *a1, const char *a2, char *__s2, char ***a4, char **a5)
{
  const char *v8;
  char **v9;
  char **v10;
  char *v11;
  uint64_t result;

  if (a2)
    v8 = a2;
  else
    v8 = "global";
  v9 = sub_100016B3C(__s2);
  if (!v9)
    sub_10003849C();
  v10 = v9;
  do
  {
    a1 = (uint64_t *)*a1;
    if (!a1)
    {
      *__error() = 2;
      return 0xFFFFFFFFLL;
    }
  }
  while (strcmp((const char *)a1[3], v8));
  if (strcmp(v8, "global"))
  {
    v11 = (char *)(a1 + 1);
    while (1)
    {
      v11 = *(char **)v11;
      if (!v11)
        break;
      if (*((char ***)v11 + 2) == v10)
      {
        if (!a4)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
  }
  v11 = v10[4];
  if (a4)
LABEL_13:
    *a4 = v10;
LABEL_14:
  result = 0;
  *a5 = v11;
  return result;
}

uint64_t sub_100016858(uint64_t *a1, const char *a2, char *a3, int *a4)
{
  uint64_t result;
  char *v6;
  int v7;
  char *v8;

  v8 = 0;
  if (sub_100016934(a1, a2, a3, &v8))
    return 0xFFFFFFFFLL;
  v6 = v8;
  if (!strcasecmp(v8, "yes") || !strcasecmp(v6, "true") || !strcasecmp(v6, "1"))
  {
    v7 = 1;
  }
  else
  {
    if (strcasecmp(v6, "no") && strcasecmp(v6, "false") && strcasecmp(v6, "0"))
    {
      *__error() = 22;
      return 0xFFFFFFFFLL;
    }
    v7 = 0;
  }
  result = 0;
  *a4 = v7;
  return result;
}

uint64_t sub_100016934(uint64_t *a1, const char *a2, char *a3, _QWORD *a4)
{
  uint64_t result;
  char *v6;
  char *v7;
  char **v8;

  v7 = 0;
  v8 = 0;
  if (sub_10001678C(a1, a2, a3, &v8, &v7) || !v7 && !*((_BYTE *)v8 + 24))
    return 0xFFFFFFFFLL;
  result = 0;
  if (v7)
    v6 = v7 + 24;
  else
    v6 = (char *)(v8 + 2);
  *a4 = *(_QWORD *)v6;
  return result;
}

uint64_t sub_1000169A0(uint64_t *a1, const char *a2, char *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t result;
  char *__str;
  char *__endptr;

  __str = 0;
  if (!sub_100016934(a1, a2, a3, &__str))
  {
    __endptr = 0;
    *__error() = 0;
    v5 = strtol(__str, &__endptr, 10);
    if (!*__error() && !*__endptr)
    {
      result = 0;
      *a4 = v5;
      return result;
    }
    *__error() = 22;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_100016A28(uint64_t *a1, const char *a2, char *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  result = sub_1000169A0(a1, a2, a3, &v6);
  if ((_DWORD)result != -1)
  {
    if (v6 == (int)v6)
    {
      result = 0;
      *a4 = v6;
    }
    else
    {
      *__error() = 34;
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

_QWORD *sub_100016A8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v14;

  v4 = malloc_type_malloc(0x20uLL, 0xB00400934D706uLL);
  v12 = v4;
  if (v4)
  {
    v4[1] = 0;
    v4[2] = v4 + 1;
    v4[3] = a2;
    *v4 = 0;
    **(_QWORD **)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000379C8();
    sub_10001BFE8("malloc", v5, v6, v7, v8, v9, v10, v11, v14);
  }
  return v12;
}

char **sub_100016B3C(char *__s2)
{
  uint64_t v2;
  uint64_t i;
  const char *v4;

  v2 = 0;
  for (i = 0; ; ++i)
  {
    if (!strcmp((&off_100050000)[v2], __s2))
      return &(&off_100050000)[5 * i];
    v4 = (&off_100050000)[v2 + 1];
    if (v4)
    {
      if (!strcmp(v4, __s2))
        break;
    }
    v2 += 5;
    if (v2 == 205)
      return 0;
  }
  return &(&off_100050000)[v2];
}

uint64_t sub_100016BC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  if (!a1)
    return 4294967294;
  v2 = a1[7];
  if (!v2)
    return 4294967294;
  result = 0;
  a1[12] = 1;
  *(_QWORD *)(v2 + 32) = 0;
  a1[2] = 0;
  a1[5] = 0;
  a1[6] = 0;
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 12) = 0;
  *(_DWORD *)(v2 + 20) = 0x8000;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 52) = 0;
  *(_DWORD *)(v2 + 60) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 136) = v2 + 1360;
  *(_QWORD *)(v2 + 96) = v2 + 1360;
  *(_QWORD *)(v2 + 104) = v2 + 1360;
  return result;
}

uint64_t sub_100016C30(_QWORD *a1, int a2, _BYTE *a3, int a4)
{
  uint64_t result;
  void *(*v7)(uint64_t, int, int);
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  if (!a3)
    return 4294967290;
  result = 4294967290;
  if (a4 == 112 && *a3 == 49)
  {
    if (!a1)
      return 4294967294;
    a1[6] = 0;
    v7 = (void *(*)(uint64_t, int, int))a1[8];
    if (!v7)
    {
      v7 = sub_100022930;
      a1[8] = sub_100022930;
      a1[10] = 0;
    }
    if (!a1[9])
      a1[9] = sub_100022940;
    v8 = (uint64_t)v7(a1[10], 1, 9552);
    if (v8)
    {
      a1[7] = v8;
      v9 = a2 & 0xF;
      if (a2 >= 0x30)
        v9 = a2;
      if (a2 >= 0)
        v10 = (a2 >> 4) + 1;
      else
        v10 = 0;
      if (a2 < 0)
        v11 = -a2;
      else
        v11 = v9;
      *(_DWORD *)(v8 + 8) = v10;
      if ((v11 - 16) <= 0xFFFFFFF7)
      {
        ((void (*)(_QWORD, uint64_t))a1[9])(a1[10], v8);
        a1[7] = 0;
        return 4294967294;
      }
      *(_DWORD *)(v8 + 48) = v11;
      *(_QWORD *)(v8 + 64) = 0;
      return sub_100016BC8(a1);
    }
    else
    {
      return 4294967292;
    }
  }
  return result;
}

uint64_t sub_100016D20(unsigned __int8 **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 *a6)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  _WORD **v14;
  unint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  const char *v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  __int16 *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  size_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __int16 *v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned __int8 *v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int v92;
  __int16 v93;
  int v94;
  unint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unsigned int v98;
  unsigned __int8 *v99;
  _WORD **v100;
  unsigned __int16 *v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  unsigned __int8 *v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned __int8 *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned __int8 v129;
  unsigned int v130;
  uint64_t v131;
  __int16 *v132;
  unint64_t v133;
  uint64_t v134;
  int *v135;
  unsigned int *v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  uint64_t v147;
  __int16 *v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  void *v158;
  unsigned int v159;
  unsigned int v160;
  size_t v161;
  unint64_t v162;
  unint64_t v163;
  __int16 *v164;
  unint64_t v165;
  unint64_t v166;
  __int16 *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  BOOL v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  BOOL v183;
  unint64_t v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  __int16 *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int16 *v192;
  uint64_t v193;
  int v194;
  unsigned __int8 *v195;
  unint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  unsigned __int8 *v200;
  unsigned int v201;
  int v202;
  int v203;
  int v204;
  unsigned __int8 *v205;
  int v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  unsigned __int8 *v210;
  unsigned int v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t result;
  uint64_t v220;
  uint64_t v221;
  int *v222;
  uint64_t v223;
  unint64_t v227;
  _WORD *v228;
  unsigned int *v229;
  unsigned __int8 *v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  int v237;

  if (!a1)
    return 4294967294;
  v6 = (uint64_t)a1;
  v7 = a1[7];
  if (!v7)
    return 4294967294;
  v8 = a1[3];
  if (!v8)
    return 4294967294;
  v10 = *a1;
  if (!*a1)
  {
    if (*((_DWORD *)a1 + 2))
      return 4294967294;
  }
  v11 = *(_DWORD *)v7;
  if (*(_DWORD *)v7 == 11)
  {
    v11 = 12;
    *(_DWORD *)v7 = 12;
  }
  v12 = *((unsigned int *)a1 + 8);
  v13 = *((_QWORD *)v7 + 9);
  v14 = (_WORD **)(v7 + 136);
  v15 = *((unsigned int *)v7 + 20);
  v229 = (unsigned int *)(v7 + 112);
  v230 = v7 + 1360;
  v16 = (unsigned __int16 *)(v7 + 144);
  v228 = v7 + 784;
  v233 = *((_DWORD *)a1 + 2);
  v234 = 0;
  v17 = v233;
  v236 = *((_DWORD *)a1 + 8);
  v235 = a2;
LABEL_8:
  v18 = -3;
  v19 = 1;
  switch(v11)
  {
    case 0:
      v20 = *((_DWORD *)v7 + 2);
      if (!v20)
      {
        v39 = 12;
        goto LABEL_351;
      }
      if (v15 <= 0xF)
      {
        v21 = 0;
        do
        {
          if (!(_DWORD)v17)
            goto LABEL_362;
          v17 = (v17 - 1);
          v22 = *v10++;
          v13 += (unint64_t)v22 << (v15 + v21);
          v21 += 8;
        }
        while ((unint64_t)v15 + v21 - 8 < 8);
        v15 = (v15 + v21);
      }
      if ((v20 & 2) != 0 && v13 == 35615)
      {
        v23 = sub_1000186BC(0, 0, 0);
        *((_QWORD *)v7 + 3) = v23;
        LOWORD(v237) = -29921;
        v24 = sub_1000186BC(v23, &v237, 2u);
        v16 = (unsigned __int16 *)(v7 + 144);
        v14 = (_WORD **)(v7 + 136);
        v13 = 0;
        v15 = 0;
        *((_QWORD *)v7 + 3) = v24;
        *(_DWORD *)v7 = 1;
        a2 = v235;
        a6 = &jpt_100016DEC;
        goto LABEL_352;
      }
      *((_DWORD *)v7 + 4) = 0;
      v131 = *((_QWORD *)v7 + 5);
      if (v131)
        *(_DWORD *)(v131 + 72) = -1;
      a6 = &jpt_100016DEC;
      if ((v20 & 1) == 0
        || 0xEF7BDEF7BDEF7BDFLL * (((unint64_t)v13 << 8) + (v13 >> 8)) >= 0x842108421084211)
      {
        *(_QWORD *)(v6 + 48) = "incorrect header check";
        *(_DWORD *)v7 = 27;
        a2 = v235;
        goto LABEL_352;
      }
      a2 = v235;
      if ((v13 & 0xF) != 8)
        goto LABEL_349;
      v215 = v13 >> 4;
      if ((v215 + 8) > *((_DWORD *)v7 + 12))
      {
        v13 >>= 4;
        v15 = (v15 - 4);
        v27 = "invalid window size";
        goto LABEL_350;
      }
      *((_DWORD *)v7 + 5) = 256 << v215;
      v216 = sub_10000E5C4(0, 0, 0);
      a6 = &jpt_100016DEC;
      v16 = (unsigned __int16 *)(v7 + 144);
      v14 = (_WORD **)(v7 + 136);
      v15 = 0;
      *((_QWORD *)v7 + 3) = v216;
      *(_QWORD *)(v6 + 96) = v216;
      if ((v13 & 0x2000) != 0)
        v217 = 9;
      else
        v217 = 11;
      *(_DWORD *)v7 = v217;
      v13 = 0;
      goto LABEL_352;
    case 1:
      if (v15 > 0xF)
        goto LABEL_23;
      v25 = 0;
      do
      {
        if (!(_DWORD)v17)
          goto LABEL_364;
        v17 = (v17 - 1);
        v26 = *v10++;
        v13 += (unint64_t)v26 << (v15 + v25);
        v25 += 8;
      }
      while ((unint64_t)v15 + v25 - 8 < 8);
      v15 = (v15 + v25);
LABEL_23:
      *((_DWORD *)v7 + 4) = v13;
      if (v13 != 8)
      {
LABEL_349:
        v27 = "unknown compression method";
        goto LABEL_350;
      }
      if ((v13 & 0xE000) != 0)
      {
        v27 = "unknown header flags set";
        goto LABEL_350;
      }
      a2 = v12;
      v136 = (unsigned int *)*((_QWORD *)v7 + 5);
      if (v136)
        *v136 = (v13 >> 8) & 1;
      v28 = v236;
      if ((v13 & 0x200) != 0)
      {
        LOWORD(v237) = v13;
        v137 = sub_1000186BC(*((_QWORD *)v7 + 3), &v237, 2u);
        v16 = (unsigned __int16 *)(v7 + 144);
        v14 = (_WORD **)(v7 + 136);
        *((_QWORD *)v7 + 3) = v137;
      }
      LODWORD(v15) = 0;
      v13 = 0;
      *(_DWORD *)v7 = 2;
LABEL_207:
      v12 = v15;
      do
      {
        if (!(_DWORD)v17)
          goto LABEL_363;
        v138 = *v10++;
        LODWORD(v17) = v17 - 1;
        v13 += (unint64_t)v138 << v12;
        v175 = v12 >= 0x18;
        v12 += 8;
      }
      while (!v175);
LABEL_211:
      v139 = *((_QWORD *)v7 + 5);
      if (v139)
        *(_QWORD *)(v139 + 8) = v13;
      if ((v7[17] & 2) != 0)
      {
        v237 = v13;
        v140 = sub_1000186BC(*((_QWORD *)v7 + 3), &v237, 4u);
        v16 = (unsigned __int16 *)(v7 + 144);
        v14 = (_WORD **)(v7 + 136);
        *((_QWORD *)v7 + 3) = v140;
      }
      LODWORD(v15) = 0;
      v13 = 0;
      *(_DWORD *)v7 = 3;
LABEL_216:
      v12 = v15;
      do
      {
        if (!(_DWORD)v17)
          goto LABEL_363;
        v141 = *v10++;
        v17 = (v17 - 1);
        v13 += (unint64_t)v141 << v12;
        v175 = v12 >= 8;
        v12 += 8;
      }
      while (!v175);
LABEL_220:
      v142 = *((_QWORD *)v7 + 5);
      if (v142)
      {
        *(_DWORD *)(v142 + 16) = v13;
        *(_DWORD *)(v142 + 20) = v13 >> 8;
      }
      if ((v7[17] & 2) != 0)
      {
        LOWORD(v237) = v13;
        v143 = sub_1000186BC(*((_QWORD *)v7 + 3), &v237, 2u);
        v16 = (unsigned __int16 *)(v7 + 144);
        v14 = (_WORD **)(v7 + 136);
        *((_QWORD *)v7 + 3) = v143;
      }
      v13 = 0;
      LODWORD(v15) = 0;
      v30 = 0;
      *(_DWORD *)v7 = 4;
      v29 = *((_DWORD *)v7 + 4);
      v236 = v28;
      v12 = a2;
      a2 = v235;
      a6 = &jpt_100016DEC;
      if ((v29 & 0x400) == 0)
        goto LABEL_225;
      goto LABEL_227;
    case 2:
      a2 = v12;
      v28 = v236;
      if (v15 > 0x1F)
        goto LABEL_211;
      goto LABEL_207;
    case 3:
      a2 = v12;
      v28 = v236;
      if (v15 > 0xF)
        goto LABEL_220;
      goto LABEL_216;
    case 4:
      v29 = *((_DWORD *)v7 + 4);
      if ((v29 & 0x400) != 0)
      {
        if (v15 <= 0xF)
        {
LABEL_227:
          v145 = v12;
          v12 = v15;
          while ((_DWORD)v17)
          {
            v146 = *v10++;
            v17 = (v17 - 1);
            v13 += (unint64_t)v146 << v12;
            v175 = v12 >= 8;
            v12 += 8;
            if (v175)
            {
              v12 = v145;
              goto LABEL_232;
            }
          }
          LODWORD(v15) = v12;
          v19 = v234;
          LODWORD(v12) = v145;
          goto LABEL_373;
        }
LABEL_232:
        *((_DWORD *)v7 + 21) = v13;
        v147 = *((_QWORD *)v7 + 5);
        if (v147)
          *(_DWORD *)(v147 + 32) = v13;
        if ((v29 & 0x200) != 0)
        {
          LOWORD(v237) = v13;
          v148 = a6;
          v149 = sub_1000186BC(*((_QWORD *)v7 + 3), &v237, 2u);
          a6 = v148;
          v16 = (unsigned __int16 *)(v7 + 144);
          v14 = (_WORD **)(v7 + 136);
          v13 = 0;
          v30 = 0;
          *((_QWORD *)v7 + 3) = v149;
        }
        else
        {
          v13 = 0;
          v30 = 0;
        }
      }
      else
      {
        v30 = v15;
LABEL_225:
        v144 = *((_QWORD *)v7 + 5);
        if (v144)
          *(_QWORD *)(v144 + 24) = 0;
      }
      *(_DWORD *)v7 = 5;
      v15 = v30;
LABEL_238:
      v150 = *((_DWORD *)v7 + 4);
      if ((v150 & 0x400) != 0)
      {
        v151 = *((_DWORD *)v7 + 21);
        if (v151 >= v17)
          v152 = v17;
        else
          v152 = *((_DWORD *)v7 + 21);
        if (v152)
        {
          v153 = *((_QWORD *)v7 + 5);
          if (v153)
          {
            v154 = *(_QWORD *)(v153 + 24);
            if (v154)
            {
              v155 = *(_DWORD *)(v153 + 32);
              v156 = *(_DWORD *)(v153 + 36);
              v157 = v155 - v151;
              v158 = (void *)(v154 + v157);
              v159 = v157 + v152;
              v160 = v156 - v157;
              if (v159 <= v156)
                v161 = v152;
              else
                v161 = v160;
              v162 = v12;
              v163 = v15;
              v164 = a6;
              memcpy(v158, v10, v161);
              a6 = v164;
              v15 = v163;
              v12 = v162;
              a2 = v235;
              v16 = (unsigned __int16 *)(v7 + 144);
              v14 = (_WORD **)(v7 + 136);
              v150 = *((_DWORD *)v7 + 4);
            }
          }
          if ((v150 & 0x200) != 0)
          {
            v165 = v12;
            v166 = v15;
            v167 = a6;
            v168 = sub_1000186BC(*((_QWORD *)v7 + 3), (int *)v10, v152);
            a6 = v167;
            v15 = v166;
            v12 = v165;
            a2 = v235;
            v16 = (unsigned __int16 *)(v7 + 144);
            v14 = (_WORD **)(v7 + 136);
            *((_QWORD *)v7 + 3) = v168;
          }
          v17 = v17 - v152;
          v10 += v152;
          v151 = *((_DWORD *)v7 + 21) - v152;
          *((_DWORD *)v7 + 21) = v151;
        }
        if (v151)
          goto LABEL_372;
      }
      *((_DWORD *)v7 + 21) = 0;
      *(_DWORD *)v7 = 6;
LABEL_254:
      if ((v7[17] & 8) != 0)
      {
        if (!(_DWORD)v17)
          goto LABEL_372;
        v232 = v12;
        v170 = 0;
        do
        {
          v171 = v10[v170];
          v172 = *((_QWORD *)v7 + 5);
          if (v172)
          {
            v173 = *(_QWORD *)(v172 + 40);
            if (v173)
            {
              v174 = *((unsigned int *)v7 + 21);
              if (v174 < *(_DWORD *)(v172 + 48))
              {
                *((_DWORD *)v7 + 21) = v174 + 1;
                *(_BYTE *)(v173 + v174) = v171;
              }
            }
          }
          ++v170;
          if (v171)
            v175 = v170 >= v17;
          else
            v175 = 1;
        }
        while (!v175);
        if ((v7[17] & 2) != 0)
        {
          v176 = v15;
          v177 = sub_1000186BC(*((_QWORD *)v7 + 3), (int *)v10, v170);
          v15 = v176;
          v16 = (unsigned __int16 *)(v7 + 144);
          v14 = (_WORD **)(v7 + 136);
          *((_QWORD *)v7 + 3) = v177;
        }
        v10 += v170;
        if (v171)
          goto LABEL_370;
        v17 = v17 - v170;
        a2 = v235;
        v12 = v232;
        a6 = &jpt_100016DEC;
      }
      else
      {
        v169 = *((_QWORD *)v7 + 5);
        if (v169)
          *(_QWORD *)(v169 + 40) = 0;
      }
      *((_DWORD *)v7 + 21) = 0;
      *(_DWORD *)v7 = 7;
LABEL_273:
      if ((v7[17] & 0x10) == 0)
      {
        v178 = *((_QWORD *)v7 + 5);
        if (v178)
          *(_QWORD *)(v178 + 56) = 0;
        goto LABEL_291;
      }
      if ((_DWORD)v17)
      {
        v232 = v12;
        v170 = 0;
        do
        {
          v179 = v10[v170];
          v180 = *((_QWORD *)v7 + 5);
          if (v180)
          {
            v181 = *(_QWORD *)(v180 + 56);
            if (v181)
            {
              v182 = *((unsigned int *)v7 + 21);
              if (v182 < *(_DWORD *)(v180 + 64))
              {
                *((_DWORD *)v7 + 21) = v182 + 1;
                *(_BYTE *)(v181 + v182) = v179;
              }
            }
          }
          ++v170;
          if (v179)
            v183 = v170 >= v17;
          else
            v183 = 1;
        }
        while (!v183);
        if ((v7[17] & 2) != 0)
        {
          v184 = v15;
          v185 = sub_1000186BC(*((_QWORD *)v7 + 3), (int *)v10, v170);
          v15 = v184;
          v16 = (unsigned __int16 *)(v7 + 144);
          v14 = (_WORD **)(v7 + 136);
          *((_QWORD *)v7 + 3) = v185;
        }
        v10 += v170;
        if (!v179)
        {
          v17 = v17 - v170;
          a2 = v235;
          v12 = v232;
          a6 = &jpt_100016DEC;
LABEL_291:
          *(_DWORD *)v7 = 8;
LABEL_292:
          v186 = *((_DWORD *)v7 + 4);
          if ((v186 & 0x200) != 0)
          {
            if (v15 <= 0xF)
            {
              v21 = 0;
              do
              {
                if (!(_DWORD)v17)
                  goto LABEL_362;
                v17 = (v17 - 1);
                v187 = *v10++;
                v13 += (unint64_t)v187 << (v15 + v21);
                v21 += 8;
              }
              while ((unint64_t)v15 + v21 - 8 < 8);
              v15 = (v15 + v21);
            }
            if (v13 != *((unsigned __int16 *)v7 + 12))
            {
              v27 = "header crc mismatch";
              goto LABEL_350;
            }
            v13 = 0;
            v15 = 0;
          }
          v188 = a6;
          v189 = v15;
          v190 = *((_QWORD *)v7 + 5);
          if (v190)
          {
            *(_DWORD *)(v190 + 68) = (v186 >> 9) & 1;
            *(_DWORD *)(v190 + 72) = 1;
          }
          v191 = sub_1000186BC(0, 0, 0);
          *((_QWORD *)v7 + 3) = v191;
          *(_QWORD *)(v6 + 96) = v191;
          *(_DWORD *)v7 = 11;
          v16 = (unsigned __int16 *)(v7 + 144);
          v14 = (_WORD **)(v7 + 136);
          v15 = v189;
          a6 = v188;
          goto LABEL_352;
        }
LABEL_370:
        LODWORD(v17) = v17 - v170;
        v19 = v234;
        LODWORD(a2) = v235;
        LODWORD(v12) = v232;
        goto LABEL_373;
      }
LABEL_372:
      v19 = v234;
      goto LABEL_373;
    case 5:
      goto LABEL_238;
    case 6:
      goto LABEL_254;
    case 7:
      goto LABEL_273;
    case 8:
      goto LABEL_292;
    case 9:
      v31 = v12;
      if (v15 > 0x1F)
        goto LABEL_37;
      v12 = v15;
      do
      {
        if (!(_DWORD)v17)
        {
          LODWORD(v15) = v12;
          v19 = v234;
          LODWORD(v12) = v31;
          goto LABEL_373;
        }
        v32 = *v10++;
        v17 = (v17 - 1);
        v13 += (unint64_t)v32 << v12;
        v175 = v12 >= 0x18;
        v12 += 8;
      }
      while (!v175);
LABEL_37:
      LODWORD(v15) = 0;
      v33 = bswap32(v13);
      *((_QWORD *)v7 + 3) = v33;
      *(_QWORD *)(v6 + 96) = v33;
      *(_DWORD *)v7 = 10;
      v13 = 0;
      v12 = v31;
LABEL_38:
      if (!*((_DWORD *)v7 + 3))
      {
        *(_QWORD *)(v6 + 24) = v8;
        *(_DWORD *)(v6 + 32) = v236;
        *(_QWORD *)v6 = v10;
        *(_DWORD *)(v6 + 8) = v17;
        *((_QWORD *)v7 + 9) = v13;
        result = 2;
        *((_DWORD *)v7 + 20) = v15;
        return result;
      }
      v34 = a2;
      v35 = v12;
      v36 = v15;
      v37 = a6;
      v38 = sub_10000E5C4(0, 0, 0);
      a6 = v37;
      LODWORD(v15) = v36;
      v12 = v35;
      a2 = v34;
      v16 = (unsigned __int16 *)(v7 + 144);
      v14 = (_WORD **)(v7 + 136);
      *((_QWORD *)v7 + 3) = v38;
      *(_QWORD *)(v6 + 96) = v38;
      *(_DWORD *)v7 = 11;
LABEL_40:
      if ((_DWORD)a2 == 5)
        goto LABEL_372;
LABEL_41:
      if (*((_DWORD *)v7 + 1))
      {
        v13 >>= v15 & 7;
        v15 = v15 & 0xFFFFFFF8;
        v39 = 24;
        goto LABEL_351;
      }
      if (v15 >= 3)
      {
LABEL_46:
        *((_DWORD *)v7 + 1) = v13 & 1;
        __asm { BR              X11 }
      }
      if ((_DWORD)v17)
      {
        v13 += (unint64_t)*v10 << v15;
        goto LABEL_46;
      }
      v18 = v234;
LABEL_404:
      v19 = v18;
      goto LABEL_373;
    case 10:
      goto LABEL_38;
    case 11:
      goto LABEL_40;
    case 12:
      goto LABEL_41;
    case 13:
      v13 >>= v15 & 7;
      v40 = v15 & 0xFFFFFFF8;
      if (v40 <= 0x1F)
      {
        v41 = 0;
        while ((_DWORD)v17)
        {
          v17 = (v17 - 1);
          v42 = *v10++;
          v13 += (unint64_t)v42 << ((v15 & 0xF8u) + v41);
          v41 += 8;
          if ((unint64_t)(v40 + v41 - 8) >= 0x18)
          {
            v15 = (v40 + v41);
            goto LABEL_102;
          }
        }
        LODWORD(v15) = (v15 & 0xFFFFFFF8) + v41;
        goto LABEL_372;
      }
      v15 = v15 & 0xFFFFFFF8;
LABEL_102:
      if (((v13 >> 16) ^ 0xFFFF) != (unsigned __int16)v13)
      {
        v27 = "invalid stored block lengths";
        goto LABEL_350;
      }
      v15 = 0;
      v43 = (unsigned __int16)v13;
      *((_DWORD *)v7 + 21) = (unsigned __int16)v13;
      *(_DWORD *)v7 = 14;
      v13 = 0;
      if (v43)
      {
LABEL_104:
        if (v43 >= v17)
          v43 = v17;
        if (v43 >= v236)
          v69 = v236;
        else
          v69 = v43;
        if ((_DWORD)v69)
        {
          v231 = v6;
          v70 = v12;
          v71 = a2;
          v72 = v70;
          v73 = v15;
          v74 = a6;
          memcpy(v8, v10, v69);
          a6 = v74;
          v15 = v73;
          v75 = v72;
          a2 = v71;
          v12 = v75;
          v6 = v231;
          v16 = (unsigned __int16 *)(v7 + 144);
          v14 = (_WORD **)(v7 + 136);
          v17 = (v17 - v69);
          v10 += v69;
          v236 -= v69;
          v8 += v69;
          *((_DWORD *)v7 + 21) -= v69;
          goto LABEL_352;
        }
        goto LABEL_372;
      }
      goto LABEL_325;
    case 14:
      v43 = *((_DWORD *)v7 + 21);
      if (!v43)
        goto LABEL_325;
      goto LABEL_104;
    case 15:
      if (v15 > 0xD)
        goto LABEL_59;
      v21 = 0;
      do
      {
        if (!(_DWORD)v17)
        {
LABEL_362:
          LODWORD(v15) = v15 + v21;
          goto LABEL_372;
        }
        v17 = (v17 - 1);
        v44 = *v10++;
        v13 += (unint64_t)v44 << (v15 + v21);
        v21 += 8;
      }
      while ((unint64_t)v15 + v21 - 8 < 6);
      LODWORD(v15) = v15 + v21;
LABEL_59:
      v45 = v13 & 0x1F;
      v46 = (v13 >> 5) & 0x1F;
      *((_DWORD *)v7 + 31) = (v13 & 0x1F) + 257;
      *((_DWORD *)v7 + 32) = v46 + 1;
      v47 = ((v13 >> 10) & 0xF) + 4;
      *((_DWORD *)v7 + 30) = v47;
      v13 >>= 14;
      v15 = (v15 - 14);
      if (v45 > 0x1D || v46 >= 0x1E)
      {
        v27 = "too many length or distance symbols";
        goto LABEL_350;
      }
      a2 = v12;
      v28 = v236;
      v48 = 0;
      *((_DWORD *)v7 + 33) = 0;
      *(_DWORD *)v7 = 16;
LABEL_63:
      LODWORD(v12) = v15;
      while (2)
      {
        if (v12 > 2)
        {
LABEL_67:
          v50 = word_10003D28A[v48];
          *((_DWORD *)v7 + 33) = v48 + 1;
          *(_WORD *)&v7[2 * v50 + 144] = v13 & 7;
          v13 >>= 3;
          v12 = (v12 - 3);
          if (v47 != ++v48)
            continue;
          v15 = v12;
          v48 = v47;
LABEL_69:
          v51 = v15;
          if (v48 <= 0x12)
          {
            do
              *(_WORD *)&v7[2 * word_10003D28A[v48++] + 144] = 0;
            while ((_DWORD)v48 != 19);
            *((_DWORD *)v7 + 33) = 19;
          }
          *((_QWORD *)v7 + 17) = v230;
          *((_QWORD *)v7 + 12) = v230;
          *((_DWORD *)v7 + 28) = 7;
          v52 = sub_10001ED64(0, v16, 0x13u, v14, v229, v228);
          v236 = v28;
          if (v52)
          {
            v234 = v52;
            *(_QWORD *)(v6 + 48) = "invalid code lengths set";
            *(_DWORD *)v7 = 27;
            v12 = a2;
            a2 = v235;
            v16 = (unsigned __int16 *)(v7 + 144);
            v14 = (_WORD **)(v7 + 136);
            a6 = &jpt_100016DEC;
            v15 = v51;
            goto LABEL_352;
          }
          v53 = 0;
          v234 = 0;
          *((_DWORD *)v7 + 33) = 0;
          *(_DWORD *)v7 = 17;
          v12 = a2;
          a2 = v235;
          v16 = (unsigned __int16 *)(v7 + 144);
          v14 = (_WORD **)(v7 + 136);
          a6 = &jpt_100016DEC;
          v15 = v51;
LABEL_112:
          v76 = *((_DWORD *)v7 + 31);
          v77 = *((_DWORD *)v7 + 32) + v76;
          if (v53 >= v77)
            goto LABEL_151;
          v78 = *((_QWORD *)v7 + 12);
          v79 = ~(-1 << *((_DWORD *)v7 + 28));
          while (2)
          {
            v80 = v79 & v13;
            LODWORD(v81) = *(unsigned __int8 *)(v78 + 4 * v80 + 1);
            if (v15 < v81)
            {
              v82 = 0;
              LODWORD(v83) = v17;
              v84 = v10;
              do
              {
                if (!(_DWORD)v83)
                  goto LABEL_361;
                v83 = (v83 - 1);
                v85 = *v84++;
                v13 += (unint64_t)v85 << (v15 + v82);
                v80 = v79 & v13;
                v81 = *(unsigned __int8 *)(v78 + 4 * v80 + 1);
                v82 += 8;
              }
              while ((unint64_t)v15 + v82 < v81);
              LODWORD(v15) = v15 + v82;
              v10 = v84;
              v17 = v83;
            }
            v86 = *(unsigned __int16 *)(v78 + 4 * v80 + 2);
            if (v86 > 0xF)
            {
              if (v86 != 16)
              {
                if (v86 == 17)
                {
                  v90 = (v81 + 3);
                  if (v15 < v90)
                  {
                    v91 = 0;
                    do
                    {
                      if (!(_DWORD)v17)
                        goto LABEL_369;
                      v92 = *v10++;
                      v17 = (v17 - 1);
                      v13 += (unint64_t)v92 << (v15 + v91);
                      v91 += 8;
                    }
                    while ((unint64_t)v15 + v91 < v90);
                    LODWORD(v15) = v15 + v91;
                  }
                  v93 = 0;
                  v94 = ((v13 >> v81) & 7) + 3;
                  v13 = v13 >> v81 >> 3;
                  v15 = (v15 - v81 - 3);
                }
                else
                {
                  v97 = (v81 + 7);
                  if (v15 < v97)
                  {
                    v91 = 0;
                    do
                    {
                      if (!(_DWORD)v17)
                        goto LABEL_369;
                      v98 = *v10++;
                      v17 = (v17 - 1);
                      v13 += (unint64_t)v98 << (v15 + v91);
                      v91 += 8;
                    }
                    while ((unint64_t)v15 + v91 < v97);
                    LODWORD(v15) = v15 + v91;
                  }
                  v93 = 0;
                  v94 = ((v13 >> v81) & 0x7F) + 11;
                  v13 = v13 >> v81 >> 7;
                  v15 = (v15 - v81 - 7);
                }
LABEL_147:
                if (v94 + v53 <= v77)
                {
                  do
                  {
                    v99 = &v7[2 * v53++];
                    *((_WORD *)v99 + 72) = v93;
                    --v94;
                  }
                  while (v94);
                  *((_DWORD *)v7 + 33) = v53;
                  goto LABEL_150;
                }
                goto LABEL_353;
              }
              v95 = (v81 + 2);
              if (v15 >= v95)
                goto LABEL_139;
              v91 = 0;
              while ((_DWORD)v17)
              {
                v96 = *v10++;
                v17 = (v17 - 1);
                v13 += (unint64_t)v96 << (v15 + v91);
                v91 += 8;
                if ((unint64_t)v15 + v91 >= v95)
                {
                  LODWORD(v15) = v15 + v91;
LABEL_139:
                  v13 >>= v81;
                  v15 = (v15 - v81);
                  if (v53)
                  {
                    v93 = *(_WORD *)&v7[2 * v53 + 142];
                    v94 = (v13 & 3) + 3;
                    v13 >>= 2;
                    v15 = (v15 - 2);
                    goto LABEL_147;
                  }
LABEL_353:
                  v27 = "invalid bit length repeat";
LABEL_350:
                  *(_QWORD *)(v6 + 48) = v27;
                  v39 = 27;
LABEL_351:
                  *(_DWORD *)v7 = v39;
                  goto LABEL_352;
                }
              }
LABEL_369:
              LODWORD(v15) = v15 + v91;
              goto LABEL_372;
            }
            if (v15 >= v81)
              goto LABEL_125;
            v87 = 0;
            while (2)
            {
              if (!(_DWORD)v17)
              {
                LODWORD(v15) = v15 + v87;
                goto LABEL_372;
              }
              v88 = *v10++;
              v17 = (v17 - 1);
              v13 += (unint64_t)v88 << (v15 + v87);
              v87 += 8;
              if ((unint64_t)v15 + v87 < v81)
                continue;
              break;
            }
            LODWORD(v15) = v15 + v87;
LABEL_125:
            v13 >>= v81;
            v15 = (v15 - v81);
            v89 = &v7[2 * v53++];
            *((_DWORD *)v7 + 33) = v53;
            *((_WORD *)v89 + 72) = v86;
LABEL_150:
            if (v53 < v77)
              continue;
            break;
          }
LABEL_151:
          v227 = v15;
          *((_QWORD *)v7 + 17) = v230;
          *((_QWORD *)v7 + 12) = v230;
          *((_DWORD *)v7 + 28) = 9;
          v100 = v14;
          v101 = v16;
          v102 = sub_10001ED64(1, v16, v76, v14, v229, v228);
          if (v102)
          {
            v234 = v102;
            *(_QWORD *)(v6 + 48) = "invalid literal/lengths set";
            *(_DWORD *)v7 = 27;
            v14 = v100;
            v16 = v101;
            goto LABEL_194;
          }
          *((_QWORD *)v7 + 13) = *((_QWORD *)v7 + 17);
          *((_DWORD *)v7 + 29) = 6;
          v130 = sub_10001ED64(2, &v101[*((unsigned int *)v7 + 31)], *((_DWORD *)v7 + 32), v100, (unsigned int *)v7 + 29, v228);
          if (!v130)
          {
            v234 = 0;
            *(_DWORD *)v7 = 18;
            v16 = (unsigned __int16 *)(v7 + 144);
            v14 = (_WORD **)(v7 + 136);
            a6 = &jpt_100016DEC;
            a2 = v235;
            LODWORD(v15) = v227;
            v12 = v12;
LABEL_305:
            if (v17 >= 6 && v236 > 0x101)
            {
              *(_QWORD *)(v6 + 24) = v8;
              *(_DWORD *)(v6 + 32) = v236;
              *(_QWORD *)v6 = v10;
              *(_DWORD *)(v6 + 8) = v17;
              *((_QWORD *)v7 + 9) = v13;
              *((_DWORD *)v7 + 20) = v15;
              v192 = a6;
              sub_10002246C(v6, v12);
              a6 = v192;
              v16 = (unsigned __int16 *)(v7 + 144);
              v14 = (_WORD **)(v7 + 136);
              v8 = *(unsigned __int8 **)(v6 + 24);
              v236 = *(_DWORD *)(v6 + 32);
              v10 = *(unsigned __int8 **)v6;
              v17 = *(unsigned int *)(v6 + 8);
              v13 = *((_QWORD *)v7 + 9);
              v15 = *((unsigned int *)v7 + 20);
              goto LABEL_352;
            }
            v193 = *((_QWORD *)v7 + 12);
            v194 = -1 << *((_DWORD *)v7 + 28);
            v195 = (unsigned __int8 *)(v193 + 4 * (v13 & ~v194));
            LODWORD(v196) = v195[1];
            if (v15 < v196)
            {
              v197 = 0;
              v198 = ~v194;
              LODWORD(v199) = v17;
              v200 = v10;
              do
              {
                if (!(_DWORD)v199)
                  goto LABEL_361;
                v199 = (v199 - 1);
                v201 = *v200++;
                v13 += (unint64_t)v201 << (v15 + v197);
                v195 = (unsigned __int8 *)(v193 + 4 * (v198 & v13));
                v196 = v195[1];
                v197 += 8;
              }
              while ((unint64_t)v15 + v197 < v196);
              LODWORD(v15) = v15 + v197;
              v10 = v200;
              v17 = v199;
            }
            v202 = *((unsigned __int16 *)v195 + 1);
            v203 = *v195;
            if ((v203 - 1) <= 0xE)
            {
              v204 = -1 << (v196 + v203);
              v205 = (unsigned __int8 *)(v193 + 4 * (((v13 & ~v204) >> v196) + v202));
              v206 = v205[1];
              if ((int)v196 + v206 > v15)
              {
                v207 = 0;
                v208 = ~v204;
                LODWORD(v209) = v17;
                v210 = v10;
                do
                {
                  if (!(_DWORD)v209)
                    goto LABEL_361;
                  v211 = *v210++;
                  v209 = (v209 - 1);
                  v13 += (unint64_t)v211 << (v15 + v207);
                  v205 = (unsigned __int8 *)(v193 + 4 * (((v13 & v208) >> v196) + v202));
                  v206 = v205[1];
                  v207 += 8;
                }
                while ((unint64_t)v15 + v207 < (v196 + v206));
                LODWORD(v15) = v15 + v207;
                v10 = v210;
                v17 = v209;
              }
              v202 = *((unsigned __int16 *)v205 + 1);
              v203 = *v205;
              v13 >>= v196;
              LODWORD(v15) = v15 - v196;
              LODWORD(v196) = v206;
            }
            v13 >>= v196;
            v15 = (v15 - v196);
            *((_DWORD *)v7 + 21) = v202;
            if (!v203)
            {
              v39 = 23;
              goto LABEL_351;
            }
            if ((v203 & 0x20) != 0)
            {
LABEL_325:
              v39 = 11;
              goto LABEL_351;
            }
            if ((v203 & 0x40) != 0)
            {
              v27 = "invalid literal/length code";
              goto LABEL_350;
            }
            v54 = v203 & 0xF;
            *((_DWORD *)v7 + 23) = v54;
            *(_DWORD *)v7 = 19;
            if ((v203 & 0xF) != 0)
            {
LABEL_76:
              if (v15 >= v54)
              {
                v57 = v10;
                v56 = v17;
                v55 = v15;
LABEL_157:
                *((_DWORD *)v7 + 21) += v13 & ~(-1 << v54);
                v13 >>= v54;
                LODWORD(v15) = v55 - v54;
                v10 = v57;
                v17 = v56;
                goto LABEL_158;
              }
              v55 = v15;
              LODWORD(v56) = v17;
              v57 = v10;
              while ((_DWORD)v56)
              {
                v56 = (v56 - 1);
                v58 = *v57++;
                v13 += (unint64_t)v58 << v55;
                v55 += 8;
                if (v55 >= v54)
                  goto LABEL_157;
              }
            }
            else
            {
LABEL_158:
              *(_DWORD *)v7 = 20;
LABEL_159:
              v103 = *((_QWORD *)v7 + 13);
              v104 = -1 << *((_DWORD *)v7 + 29);
              v105 = (unsigned __int8 *)(v103 + 4 * (v13 & ~v104));
              LODWORD(v106) = v105[1];
              if (v15 < v106)
              {
                v107 = 0;
                v108 = ~v104;
                LODWORD(v109) = v17;
                v110 = v10;
                do
                {
                  if (!(_DWORD)v109)
                    goto LABEL_361;
                  v109 = (v109 - 1);
                  v111 = *v110++;
                  v13 += (unint64_t)v111 << (v15 + v107);
                  v105 = (unsigned __int8 *)(v103 + 4 * (v108 & v13));
                  v106 = v105[1];
                  v107 += 8;
                }
                while ((unint64_t)v15 + v107 < v106);
                LODWORD(v15) = v15 + v107;
                v10 = v110;
                v17 = v109;
              }
              v112 = *((unsigned __int16 *)v105 + 1);
              LODWORD(v113) = *v105;
              if (v113 <= 0xF)
              {
                v114 = -1 << (v106 + v113);
                v113 = v103 + 4 * (((v13 & ~v114) >> v106) + v112);
                v115 = *(unsigned __int8 *)(v113 + 1);
                if ((int)v106 + v115 > v15)
                {
                  v116 = 0;
                  v117 = ~v114;
                  LODWORD(v118) = v17;
                  v119 = v10;
                  do
                  {
                    if (!(_DWORD)v118)
                      goto LABEL_361;
                    v120 = *v119++;
                    v118 = (v118 - 1);
                    v13 += (unint64_t)v120 << (v15 + v116);
                    v113 = v103 + 4 * (((v13 & v117) >> v106) + v112);
                    v115 = *(unsigned __int8 *)(v113 + 1);
                    v116 += 8;
                  }
                  while ((unint64_t)v15 + v116 < (v106 + v115));
                  LODWORD(v15) = v15 + v116;
                  v10 = v119;
                  v17 = v118;
                }
                v112 = *(unsigned __int16 *)(v113 + 2);
                LOBYTE(v113) = *(_BYTE *)v113;
                v13 >>= v106;
                LODWORD(v15) = v15 - v106;
                LODWORD(v106) = v115;
              }
              v13 >>= v106;
              v15 = (v15 - v106);
              if ((v113 & 0x40) != 0)
              {
                v27 = "invalid distance code";
                goto LABEL_350;
              }
              v59 = v113 & 0xF;
              *((_DWORD *)v7 + 22) = v112;
              *((_DWORD *)v7 + 23) = v59;
              *(_DWORD *)v7 = 21;
              if ((v113 & 0xF) == 0)
              {
LABEL_173:
                v68 = *((_DWORD *)v7 + 22);
LABEL_174:
                if (v68 > v12 - v236 + *((_DWORD *)v7 + 14))
                {
                  v27 = "invalid distance too far back";
                  goto LABEL_350;
                }
                *(_DWORD *)v7 = 22;
LABEL_177:
                if (v236)
                {
                  v121 = *((unsigned int *)v7 + 22);
                  if (v121 <= v12 - v236)
                  {
                    v126 = &v8[-v121];
                    v127 = *((_DWORD *)v7 + 21);
                    v124 = v127;
                  }
                  else
                  {
                    v122 = v121 - (v12 - v236);
                    v123 = *((_DWORD *)v7 + 15);
                    v124 = v122 - v123;
                    if (v122 <= v123)
                    {
                      v125 = v123 - v122;
                      v124 = v122;
                    }
                    else
                    {
                      v125 = *((_DWORD *)v7 + 13) - v124;
                    }
                    v126 = (unsigned __int8 *)(*((_QWORD *)v7 + 8) + v125);
                    v127 = *((_DWORD *)v7 + 21);
                    if (v124 >= v127)
                      v124 = *((_DWORD *)v7 + 21);
                  }
                  if (v124 >= v236)
                    v124 = v236;
                  *((_DWORD *)v7 + 21) = v127 - v124;
                  v128 = v124;
                  do
                  {
                    v129 = *v126++;
                    *v8++ = v129;
                    --v128;
                  }
                  while (v128);
                  v236 -= v124;
                  if (*((_DWORD *)v7 + 21))
                    goto LABEL_352;
LABEL_191:
                  v39 = 18;
                  goto LABEL_351;
                }
LABEL_371:
                v236 = 0;
                goto LABEL_372;
              }
LABEL_82:
              if (v15 >= v59)
              {
                v62 = v10;
                v61 = v17;
                v60 = v15;
LABEL_98:
                v68 = *((_DWORD *)v7 + 22) + (v13 & ~(-1 << v59));
                *((_DWORD *)v7 + 22) = v68;
                v13 >>= v59;
                v15 = v60 - v59;
                v10 = v62;
                v17 = v61;
                goto LABEL_174;
              }
              v60 = v15;
              LODWORD(v61) = v17;
              v62 = v10;
              while ((_DWORD)v61)
              {
                v61 = (v61 - 1);
                v63 = *v62++;
                v13 += (unint64_t)v63 << v60;
                v60 += 8;
                if (v60 >= v59)
                  goto LABEL_98;
              }
            }
LABEL_361:
            LODWORD(v15) = v15 + 8 * v17;
            v19 = v234;
            v10 += v17;
            LODWORD(v17) = 0;
            goto LABEL_373;
          }
          v234 = v130;
          *(_QWORD *)(v6 + 48) = "invalid distances set";
          *(_DWORD *)v7 = 27;
          v16 = (unsigned __int16 *)(v7 + 144);
          v14 = (_WORD **)(v7 + 136);
LABEL_194:
          a6 = &jpt_100016DEC;
          a2 = v235;
          v15 = v227;
          v12 = v12;
LABEL_352:
          v11 = *(_DWORD *)v7;
          goto LABEL_8;
        }
        break;
      }
      if ((_DWORD)v17)
      {
        v17 = (v17 - 1);
        v49 = *v10++;
        v13 += (unint64_t)v49 << v12;
        LODWORD(v12) = v12 + 8;
        goto LABEL_67;
      }
LABEL_363:
      LODWORD(v15) = v12;
      v236 = v28;
      LODWORD(v12) = a2;
      v19 = v234;
      LODWORD(a2) = v235;
LABEL_373:
      *(_QWORD *)(v6 + 24) = v8;
      *(_DWORD *)(v6 + 32) = v236;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v17;
      *((_QWORD *)v7 + 9) = v13;
      *((_DWORD *)v7 + 20) = v15;
      if (!*((_DWORD *)v7 + 13) && (*(_DWORD *)v7 > 0x17u || (_DWORD)v12 == v236))
        goto LABEL_382;
      if (!sub_100018550(v6, v12))
      {
        LODWORD(v17) = *(_DWORD *)(v6 + 8);
        v236 = *(_DWORD *)(v6 + 32);
LABEL_382:
        v220 = v12 - v236;
        *(_QWORD *)(v6 + 16) += v233 - v17;
        *(_QWORD *)(v6 + 40) += v220;
        *((_QWORD *)v7 + 4) += v220;
        if (*((_DWORD *)v7 + 2) && (_DWORD)v12 != v236)
        {
          v221 = *((_QWORD *)v7 + 3);
          v222 = (int *)(*(_QWORD *)(v6 + 24) - v220);
          if (*((_DWORD *)v7 + 4))
            v223 = sub_1000186BC(v221, v222, v220);
          else
            v223 = sub_10000E5C4(v221, (unsigned __int8 *)v222, v220);
          *((_QWORD *)v7 + 3) = v223;
          *(_QWORD *)(v6 + 96) = v223;
        }
        *(_DWORD *)(v6 + 88) = *((_DWORD *)v7 + 20) + ((*((_DWORD *)v7 + 1) != 0) << 6) + ((*(_DWORD *)v7 == 11) << 7);
        if (((_DWORD)v12 == v236 && v233 == (_DWORD)v17 || (_DWORD)a2 == 4) && v19 == 0)
          return 4294967291;
        else
          return v19;
      }
      *(_DWORD *)v7 = 28;
      return 4294967292;
    case 16:
      a2 = v12;
      v28 = v236;
      v47 = *((unsigned int *)v7 + 30);
      v48 = *((unsigned int *)v7 + 33);
      if (v48 < v47)
        goto LABEL_63;
      goto LABEL_69;
    case 17:
      v53 = *((_DWORD *)v7 + 33);
      goto LABEL_112;
    case 18:
      goto LABEL_305;
    case 19:
      v54 = *((_DWORD *)v7 + 23);
      if (v54)
        goto LABEL_76;
      goto LABEL_158;
    case 20:
      goto LABEL_159;
    case 21:
      v59 = *((_DWORD *)v7 + 23);
      if (v59)
        goto LABEL_82;
      goto LABEL_173;
    case 22:
      goto LABEL_177;
    case 23:
      if (!v236)
        goto LABEL_371;
      *v8++ = *((_DWORD *)v7 + 21);
      --v236;
      goto LABEL_191;
    case 24:
      if (!*((_DWORD *)v7 + 2))
        goto LABEL_334;
      if (v15 > 0x1F)
        goto LABEL_95;
      v25 = 0;
      while ((_DWORD)v17)
      {
        v17 = (v17 - 1);
        v64 = *v10++;
        v13 += (unint64_t)v64 << (v15 + v25);
        v25 += 8;
        if ((unint64_t)v15 + v25 - 8 >= 0x18)
        {
          v15 = (v15 + v25);
LABEL_95:
          v65 = *((_DWORD *)v7 + 4);
          v66 = v12 - v236;
          *(_QWORD *)(v6 + 40) += v66;
          *((_QWORD *)v7 + 4) += v66;
          if ((_DWORD)v12 == v236)
          {
            v67 = *((_QWORD *)v7 + 3);
          }
          else
          {
            v132 = a6;
            v133 = v15;
            v134 = *((_QWORD *)v7 + 3);
            v135 = (int *)&v8[-v66];
            if (v65)
              v67 = sub_1000186BC(v134, v135, v66);
            else
              v67 = sub_10000E5C4(v134, (unsigned __int8 *)v135, v66);
            *((_QWORD *)v7 + 3) = v67;
            *(_QWORD *)(v6 + 96) = v67;
            v65 = *((_DWORD *)v7 + 4);
            v16 = (unsigned __int16 *)(v7 + 144);
            v14 = (_WORD **)(v7 + 136);
            v15 = v133;
            a6 = v132;
          }
          v212 = bswap32(v13);
          if (v65)
            v213 = v13;
          else
            v213 = v212;
          if (v213 != v67)
          {
            *(_QWORD *)(v6 + 48) = "incorrect data check";
            *(_DWORD *)v7 = 27;
            v12 = v236;
            goto LABEL_352;
          }
          v13 = 0;
          v15 = 0;
          v12 = v236;
LABEL_334:
          *(_DWORD *)v7 = 25;
LABEL_335:
          if (*((_DWORD *)v7 + 2) && *((_DWORD *)v7 + 4))
          {
            if (v15 <= 0x1F)
            {
              v25 = 0;
              do
              {
                if (!(_DWORD)v17)
                  goto LABEL_364;
                v17 = (v17 - 1);
                v214 = *v10++;
                v13 += (unint64_t)v214 << (v15 + v25);
                v25 += 8;
              }
              while ((unint64_t)v15 + v25 - 8 < 0x18);
              v15 = (v15 + v25);
            }
            if (v13 != *((_DWORD *)v7 + 8))
            {
              v27 = "incorrect length check";
              goto LABEL_350;
            }
            v13 = 0;
            LODWORD(v15) = 0;
          }
          *(_DWORD *)v7 = 26;
          v19 = 1;
          goto LABEL_373;
        }
      }
LABEL_364:
      LODWORD(v15) = v15 + v25;
      goto LABEL_372;
    case 25:
      goto LABEL_335;
    case 26:
      goto LABEL_373;
    case 27:
      goto LABEL_404;
    case 28:
      return 4294967292;
    default:
      return 4294967294;
  }
}

uint64_t sub_100018550(uint64_t a1, int a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(char **)(v4 + 64);
  if (v5
    || (v6 = 1,
        v5 = (char *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1 + 64))(*(_QWORD *)(a1 + 80), (1 << *(_DWORD *)(v4 + 48)), 1), (*(_QWORD *)(v4 + 64) = v5) != 0))
  {
    v7 = *(_DWORD *)(v4 + 52);
    if (!v7)
    {
      v7 = 1 << *(_DWORD *)(v4 + 48);
      *(_QWORD *)(v4 + 56) = 0;
      *(_DWORD *)(v4 + 52) = v7;
    }
    v8 = a2 - *(_DWORD *)(a1 + 32);
    if (v8 >= v7)
    {
      memcpy(v5, (const void *)(*(_QWORD *)(a1 + 24) - v7), v7);
      v6 = 0;
      v13 = *(_DWORD *)(v4 + 52);
      *(_DWORD *)(v4 + 60) = 0;
      goto LABEL_16;
    }
    v9 = *(unsigned int *)(v4 + 60);
    v10 = v7 - v9;
    if (v7 - v9 >= v8)
      v11 = v8;
    else
      v11 = v10;
    memcpy(&v5[v9], (const void *)(*(_QWORD *)(a1 + 24) - v8), v11);
    if (v8 > v10)
    {
      v12 = v8 - v11;
      memcpy(*(void **)(v4 + 64), (const void *)(*(_QWORD *)(a1 + 24) - v12), v12);
      v6 = 0;
      v13 = *(_DWORD *)(v4 + 52);
      *(_DWORD *)(v4 + 60) = v12;
LABEL_16:
      *(_DWORD *)(v4 + 56) = v13;
      return v6;
    }
    v6 = 0;
    v14 = *(_DWORD *)(v4 + 60) + v11;
    v16 = *(_DWORD *)(v4 + 52);
    v15 = *(_DWORD *)(v4 + 56);
    if (v14 == v16)
      v14 = 0;
    *(_DWORD *)(v4 + 60) = v14;
    if (v15 < v16)
    {
      v6 = 0;
      v13 = v15 + v11;
      goto LABEL_16;
    }
  }
  return v6;
}

uint64_t sub_100018684(uint64_t a1)
{
  _DWORD *v1;

  if (!a1)
    return 4294967294;
  v1 = *(_DWORD **)(a1 + 56);
  if (!v1)
    return 4294967294;
  if (*v1 == 13)
    return v1[20] == 0;
  return 0;
}

uint64_t sub_1000186BC(int a1, int *a2, unsigned int a3)
{
  unsigned int v3;
  char *v4;
  char v5;
  char *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int *v17;
  unsigned int v18;
  int v19;
  char v20;

  if (!a2)
    return 0;
  v3 = ~a1;
  if (a3 && (a2 & 3) != 0)
  {
    v4 = (char *)a2 + 1;
    do
    {
      v5 = *(_BYTE *)a2;
      a2 = (int *)((char *)a2 + 1);
      v3 = *((_QWORD *)&unk_10003DB30 + (v5 ^ v3)) ^ (v3 >> 8);
      if (!--a3)
        break;
    }
    while ((unint64_t)(v4++ & 3));
  }
  if (a3 >= 0x20)
  {
    v7 = (char *)&unk_10003DB30 + &loc_100001800;
    do
    {
      v8 = *a2 ^ v3;
      v9 = qword_10003E330[BYTE1(v8) + 256] ^ *(_QWORD *)&v7[8 * (*(_BYTE *)a2 ^ v3)];
      v10 = a2[1] ^ v9 ^ qword_10003E330[BYTE2(v8)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v8));
      v11 = a2[2] ^ qword_10003E330[BYTE1(v10) + 256] ^ *(_QWORD *)&v7[8
                                                                     * (*((_BYTE *)a2 + 4) ^ v9 ^ qword_10003E330[BYTE2(v8)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v8)))] ^ qword_10003E330[BYTE2(v10)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v10));
      v12 = a2[3] ^ qword_10003E330[BYTE1(v11) + 256] ^ *(_QWORD *)&v7[8 * v11] ^ qword_10003E330[BYTE2(v11)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v11));
      v13 = a2[4] ^ qword_10003E330[BYTE1(v12) + 256] ^ *(_QWORD *)&v7[8 * v12] ^ qword_10003E330[BYTE2(v12)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v12));
      v14 = a2[5] ^ qword_10003E330[BYTE1(v13) + 256] ^ *(_QWORD *)&v7[8 * v13] ^ qword_10003E330[BYTE2(v13)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v13));
      v15 = a2[6] ^ qword_10003E330[BYTE1(v14) + 256] ^ *(_QWORD *)&v7[8 * v14] ^ qword_10003E330[BYTE2(v14)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v14));
      v16 = qword_10003E330[BYTE1(v15) + 256] ^ *(_QWORD *)&v7[8 * v15] ^ qword_10003E330[BYTE2(v15)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v15));
      v17 = a2 + 8;
      v18 = a2[7] ^ v16;
      v3 = qword_10003E330[BYTE1(v18) + 256] ^ *(_QWORD *)&v7[8 * v18] ^ qword_10003E330[BYTE2(v18)] ^ *((_QWORD *)&unk_10003DB30 + HIBYTE(v18));
      a3 -= 32;
      a2 += 8;
    }
    while (a3 > 0x1F);
    a2 = v17;
  }
  if (a3 >= 4)
  {
    do
    {
      v19 = *a2++;
      v3 = *((_DWORD *)&unk_10003DB30 + 2 * ((unsigned __int16)(v19 ^ v3) >> 8) + 1024) ^ *((_DWORD *)&unk_10003DB30 + 2 * (v19 ^ v3) + 1536) ^ *((_DWORD *)&unk_10003DB30 + 2 * ((v19 ^ v3) >> 16) + 512) ^ *((_QWORD *)&unk_10003DB30 + ((v19 ^ v3) >> 24));
      a3 -= 4;
    }
    while (a3 > 3);
  }
  for (; a3; --a3)
  {
    v20 = *(_BYTE *)a2;
    a2 = (int *)((char *)a2 + 1);
    v3 = *((_QWORD *)&unk_10003DB30 + (v20 ^ v3)) ^ (v3 >> 8);
  }
  return ~v3;
}

uint64_t sub_100018948(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v2 = (result & 0xF000) - 4096;
  if (v2 >> 13 > 6)
    v3 = 63;
  else
    v3 = aPcDBLSW[v2 >> 12];
  *(_BYTE *)a2 = v3;
  v4 = 45;
  if ((result & 0x100) != 0)
    v5 = 114;
  else
    v5 = 45;
  *(_BYTE *)(a2 + 1) = v5;
  if ((result & 0x80) != 0)
    v6 = 119;
  else
    v6 = 45;
  *(_BYTE *)(a2 + 2) = v6;
  if (((unsigned __int16)result & 0x840u) > 0x7FF)
  {
    if ((result & 0x840) == 0x800)
      v4 = 83;
    else
      v4 = 115;
  }
  else if ((result & 0x840) != 0)
  {
    v4 = 120;
  }
  *(_BYTE *)(a2 + 3) = v4;
  v7 = 45;
  if ((result & 0x20) != 0)
    v8 = 114;
  else
    v8 = 45;
  *(_BYTE *)(a2 + 4) = v8;
  if ((result & 0x10) != 0)
    v9 = 119;
  else
    v9 = 45;
  *(_BYTE *)(a2 + 5) = v9;
  if (((unsigned __int16)result & 0x408u) > 0x3FF)
  {
    if ((result & 0x408) == 0x400)
      v7 = 83;
    else
      v7 = 115;
  }
  else if ((result & 0x408) != 0)
  {
    v7 = 120;
  }
  *(_BYTE *)(a2 + 6) = v7;
  v10 = 45;
  if ((result & 4) != 0)
    v11 = 114;
  else
    v11 = 45;
  *(_BYTE *)(a2 + 7) = v11;
  if ((result & 2) != 0)
    v12 = 119;
  else
    v12 = 45;
  *(_BYTE *)(a2 + 8) = v12;
  if (((unsigned __int16)result & 0x201u) > 0x1FF)
  {
    if ((result & 0x201) == 0x200)
      v10 = 84;
    else
      v10 = 116;
  }
  else if ((result & 0x201) != 0)
  {
    v10 = 120;
  }
  *(_BYTE *)(a2 + 9) = v10;
  *(_WORD *)(a2 + 10) = 32;
  return result;
}

uint64_t sub_100018A8C(uint64_t a1, unint64_t a2)
{
  unsigned __int16 v3;
  int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  __int16 v12;

  if (a2 < 5)
  {
    v5 = 0;
    LOWORD(v4) = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = v4 + *(char *)(a1 + v5);
      v7 = *(char *)(a1 + v5 + 1);
      v8 = *(char *)(a1 + v5 + 2);
      v9 = *(char *)(a1 + v5 + 3);
      v3 += 3 * v7 + 4 * v6 + 2 * v8 + v9;
      v4 = v6 + v7 + v8 + v9;
      v5 += 4;
    }
    while (v5 < a2 - 4);
  }
  v10 = a2 - v5;
  if (a2 > v5)
  {
    v11 = (char *)(a1 + v5);
    do
    {
      v12 = *v11++;
      LOWORD(v4) = v4 + v12;
      v3 += v4;
      --v10;
    }
    while (v10);
  }
  return (unsigned __int16)v4 | (v3 << 16);
}

uint64_t sub_100018B24(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v7;
  int data;
  CC_MD4_CTX c;

  memset(&c, 0, sizeof(c));
  data = *(_DWORD *)(a4 + 12);
  CC_MD4_Init(&c);
  for (; a2; a2 -= v7)
  {
    if (a2 >= 0xFFFFFFFF)
      v7 = 0xFFFFFFFFLL;
    else
      v7 = a2;
    CC_MD4_Update(&c, a1, v7);
    a1 += v7;
  }
  CC_MD4_Update(&c, &data, 4u);
  return CC_MD4_Final(a3, &c);
}

uint64_t sub_100018BCC(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  int data;
  CC_MD4_CTX c;

  memset(&c, 0, sizeof(c));
  CC_MD4_Init(&c);
  if (a4)
  {
    data = *(_DWORD *)(a4 + 12);
    CC_MD4_Update(&c, &data, 4u);
  }
  for (; a2; a2 -= v8)
  {
    if (a2 >= 0xFFFFFFFF)
      v8 = 0xFFFFFFFFLL;
    else
      v8 = a2;
    CC_MD4_Update(&c, a1, v8);
    a1 += v8;
  }
  return CC_MD4_Final(a3, &c);
}

uint64_t sub_100018C7C(int a1, const char *a2, size_t a3, unsigned __int8 *a4)
{
  uint64_t result;
  int v7;
  char *v8;
  char *v9;
  int v10;

  result = openat(a1, a2, 256);
  if ((_DWORD)result != -1)
  {
    v7 = result;
    v8 = (char *)mmap(0, a3, 1, 2, result, 0);
    if (v8 == (char *)-1)
    {
      v10 = *__error();
      close(v7);
      *__error() = v10;
      return 0xFFFFFFFFLL;
    }
    else
    {
      v9 = v8;
      sub_100018BCC(v8, a3, a4, 0);
      munmap(v9, a3);
      close(v7);
      return 0;
    }
  }
  return result;
}

void sub_100018D28(void **a1, uint64_t a2)
{
  uint64_t v2;
  void **v4;
  void *v5;

  if (a1)
  {
    v2 = a2;
    if (a2)
    {
      v4 = a1 + 1;
      do
      {
        v5 = *v4;
        v4 += 2;
        free(v5);
        --v2;
      }
      while (v2);
    }
    free(a1);
  }
}

uint64_t sub_100018D74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _DWORD *v12;

  if (*(_DWORD *)(*(_QWORD *)result + 120))
    sub_1000384C4();
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v6 = a2 + 152 * i;
      v9 = *(_DWORD *)(v6 + 32);
      v7 = (_DWORD *)(v6 + 32);
      v8 = v9;
      if (v9)
        v10 = a5 == 0;
      else
        v10 = 1;
      if (!v10)
      {
        v11 = a5;
        v12 = (_DWORD *)(a4 + 4);
        while (v8 != *(v12 - 1))
        {
          v12 += 4;
          if (!--v11)
            goto LABEL_13;
        }
        *v7 = *v12;
      }
LABEL_13:
      ;
    }
  }
  return result;
}

uint64_t sub_100018DF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _DWORD *v12;

  if (*(_DWORD *)(*(_QWORD *)result + 120))
    sub_1000384EC();
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v6 = a2 + 152 * i;
      v9 = *(_DWORD *)(v6 + 28);
      v7 = (_DWORD *)(v6 + 28);
      v8 = v9;
      if (v9)
        v10 = a5 == 0;
      else
        v10 = 1;
      if (!v10)
      {
        v11 = a5;
        v12 = (_DWORD *)(a4 + 4);
        while (v8 != *(v12 - 1))
        {
          v12 += 4;
          if (!--v11)
            goto LABEL_13;
        }
        *v7 = *v12;
      }
LABEL_13:
      ;
    }
  }
  return result;
}

void sub_100018E6C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _BYTE *v17;

  if (*(_DWORD *)(*(_QWORD *)a1 + 120))
    sub_10003853C();
  v4 = a4;
  if (a4)
  {
    v6 = a3 + 4;
    do
    {
      if (!*(_DWORD *)(v6 - 4))
        sub_100038514();
      v7 = *(const char **)(v6 + 4);
      if (a2)
      {
        v8 = getgrnam(v7);
        if (v8)
          goto LABEL_7;
      }
      else
      {
        v8 = getpwnam(v7);
        if (v8)
        {
LABEL_7:
          v15 = 0;
          v16 = v8[4];
          goto LABEL_10;
        }
      }
      v16 = 0;
      v15 = 1;
LABEL_10:
      v17 = *(_BYTE **)(v6 + 4);
      if (*v17 && !v15)
        *(_DWORD *)v6 = v16;
      else
        *(_DWORD *)v6 = *(_DWORD *)(v6 - 4);
      sub_10001BE54(3, "remapped identifier %s: %d -> %d", v9, v10, v11, v12, v13, v14, (char)v17);
      v6 += 16;
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_100018F40(int a1, void **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  int *v9;
  int v10;
  const char **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v21;
  size_t v22;
  NSObject *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  char v50;

  if (!(_DWORD)a4)
    return 1;
  v8 = *a3;
  if (*a3)
  {
    v9 = (int *)*a2;
    do
    {
      v10 = *v9;
      v9 += 4;
      if (v10 == (_DWORD)a4)
        return 1;
    }
    while (--v8);
  }
  *__error() = 0;
  if (a1)
  {
    v11 = (const char **)getgrgid(a4);
    if (!v11)
    {
      if (*__error())
      {
        if (dword_100050EE8)
        {
          v19 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_1000386DC(a4, v19, v13, v14, v15, v16, v17, v18);
        }
        sub_10001BFE8("%u: unknown gid", v12, v13, v14, v15, v16, v17, v18, a4);
        return 0;
      }
      return 1;
    }
  }
  else
  {
    v11 = (const char **)getpwuid(a4);
    if (!v11)
    {
      if (*__error())
      {
        if (dword_100050EE8)
        {
          v41 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100038564(a4, v41, v35, v36, v37, v38, v39, v40);
        }
        sub_10001BFE8("%u: unknown uid", v34, v35, v36, v37, v38, v39, v40, a4);
        return 0;
      }
      return 1;
    }
  }
  v21 = *v11;
  v22 = strlen(*v11);
  if (v22 >= 0x100)
  {
    if (dword_100050EE8)
    {
      v23 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000385C8((uint64_t)v21, a4, v23);
    }
    sub_10001BF64("%u: name too long: %s");
    return 0;
  }
  if (!v22)
  {
    if (dword_100050EE8)
    {
      v42 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003864C(a4, v42, v43, v44, v45, v46, v47, v48);
    }
    sub_10001BF64("%u: zero-length name");
    return 0;
  }
  v24 = (char *)sub_100003660(*a2, *a3 + 1, 0x10uLL);
  if (v24)
  {
    *a2 = v24;
    v32 = *a3;
    v33 = &v24[16 * *a3];
    *(_DWORD *)v33 = a4;
    *((_QWORD *)v33 + 1) = strdup(v21);
    if (*((_QWORD *)*a2 + 2 * v32 + 1))
    {
      sub_10001BE54(3, "adding identifier to list: %s (%u)", v26, v27, v28, v29, v30, v31, *((_QWORD *)*a2 + 2 * v32 + 1));
      ++*a3;
      return 1;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035654();
    v49 = "strdup";
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000386B0();
    v49 = "reallocarray";
  }
  sub_10001BFE8(v49, v25, v26, v27, v28, v29, v30, v31, v50);
  return 0;
}

uint64_t sub_100019238(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const char **v7;
  int v8;
  size_t v9;
  size_t v10;

  if (a4)
  {
    v6 = a4;
    v7 = (const char **)(a3 + 8);
    while (1)
    {
      if (!*v7)
        sub_100038740();
      v8 = *((_DWORD *)v7 - 2);
      if (!v8)
        sub_100038768();
      v9 = strlen(*v7);
      if (v9 - 256 <= 0xFFFFFFFFFFFFFF00)
        sub_100038790();
      v10 = v9;
      if (!sub_10001A850(a1, a2, v8))
        break;
      if (!sub_10001A170(a1, a2, v10))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100034C50();
        sub_10001C094("io_write_byte");
        return 0;
      }
      if (!sub_10001A070(a1, a2, (char *)*v7, v10))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100035E3C();
        sub_10001C094("io_write_buf");
        return 0;
      }
      v7 += 2;
      if (!--v6)
        goto LABEL_10;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037764();
    sub_10001C094("io_write_uint");
  }
  else
  {
LABEL_10:
    if (sub_10001A850(a1, a2, 0))
      return 1;
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003516C();
    }
    sub_10001C094("io_write_int");
  }
  return 0;
}

uint64_t sub_100019420(uint64_t a1, int a2, void **a3, uint64_t *a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  const char *v22;
  __int16 v23[5];
  unsigned __int8 v24;
  int v25;

  v25 = 0;
  v24 = 0;
  if (sub_10001B020(a1, a2, &v25))
  {
    while (1)
    {
      if (!v25)
        return 1;
      v8 = (char *)sub_100003660(*a3, *a4 + 1, 0x10uLL);
      if (!v8)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000386B0();
        v22 = "reallocarray";
        goto LABEL_30;
      }
      *a3 = v8;
      v16 = &v8[16 * *a4];
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      if (!sub_10001A4B0(a1, a2, (char *)&v24))
        break;
      v17 = v24;
      if (!v24)
      {
        if (dword_100050EE8)
        {
          v18 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
          {
            v23[0] = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "zero-length name in identifier list", (uint8_t *)v23, 2u);
          }
        }
        sub_10001C1CC("zero-length name in identifier list");
        v17 = v24;
      }
      *((_DWORD *)*a3 + 4 * *a4) = v25;
      v19 = malloc_type_calloc(v17 + 1, 1uLL, 0x21E704CEuLL);
      v20 = *a4;
      *((_QWORD *)*a3 + 2 * *a4 + 1) = v19;
      v10 = (char *)*((_QWORD *)*a3 + 2 * v20 + 1);
      if (!v10)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100034E48();
        v22 = "calloc";
LABEL_30:
        sub_10001BFE8(v22, v9, (uint64_t)v10, v11, v12, v13, v14, v15, v23[0]);
        return 0;
      }
      if (!sub_10001A524(a1, a2, v10, v24))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000379F4();
        sub_10001C094("io_read_buf");
        return 0;
      }
      ++*a4;
      if (!sub_10001B020(a1, a2, &v25))
        goto LABEL_13;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000378C0();
    sub_10001C094("io_read_byte");
  }
  else
  {
LABEL_13:
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100037A4C();
    }
    sub_10001C094("io_read_uint");
  }
  return 0;
}

void sub_1000196E4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t sub_1000196F4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  pollfd v11;

  if (*(_QWORD *)(a1 + 136))
    return 1;
  *(_DWORD *)&v11.events = (unint64_t)&_mh_execute_header >> 32;
  v11.fd = a2;
  if (poll(&v11, 1u, 0) != -1)
    return v11.revents & 1;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000387B8();
  }
  sub_10001BFE8("poll", v3, v4, v5, v6, v7, v8, v9, v10);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10001979C(_QWORD *a1, int a2)
{
  int v4;
  uint64_t v5;
  int v7;
  pollfd v8;

  *(_DWORD *)&v8.events = (unint64_t)&_mh_execute_header >> 32;
  v7 = 0;
  v8.fd = a2;
  while (1)
  {
    do
      v4 = poll(&v8, 1u, -1);
    while (v4 == -1);
    if (!v4 && *__error() != 4)
    {
LABEL_13:
      v5 = 0;
      goto LABEL_15;
    }
    if ((v8.revents & 1) != 0)
      break;
    v7 = -1;
    if ((v8.revents & 0x10) != 0)
      goto LABEL_14;
LABEL_11:
    if (!sub_10001987C(a1, a2) || a1[17])
      goto LABEL_13;
  }
  if (ioctl(a2, 0x4004667FuLL, &v7) == -1)
    goto LABEL_13;
  if (v7 && (v8.revents & 0x10) == 0)
    goto LABEL_11;
LABEL_14:
  v5 = 1;
LABEL_15:
  close(a2);
  return v5;
}

uint64_t sub_10001987C(_QWORD *a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  char v16[1024];

  if (a1[17])
    return 1;
  v15 = 0;
  if (!sub_10001A2C8(a2, (char *)&v15, 4uLL))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
LABEL_12:
    sub_1000387E4();
LABEL_13:
    sub_10001C094("io_read_blocking");
    return 0;
  }
  v11 = v15;
  v12 = v15 & 0xFFFFFFLL;
  a1[17] = v12;
  v13 = (v11 >> 24) - 7;
  if (v11 >> 24 == 7)
    return 1;
  if (v12 >= 0x401)
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038810();
    }
    sub_10001BF64("multiplex buffer overflow");
    return 0;
  }
  if (!(_DWORD)v12)
  {
    v12 = 0;
    goto LABEL_21;
  }
  if (!sub_10001A2C8(a2, v16, v12))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v16[v12 - 1] == 10)
    v16[--v12] = 0;
  a1[17] = 0;
LABEL_21:
  v14 = &qword_1000507D8;
  while (1)
  {
    v14 = (uint64_t *)*v14;
    if (!v14)
      break;
    if (*((_DWORD *)v14 + 6) == v13)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v14[1])(v14[2], v16, v12);
  }
  if (v11 >> 26 != 2)
    return 1;
  if (v12)
    sub_10001BE54(-1, "%.*s", v5, v6, v7, v8, v9, v10, v12);
  if ((v13 & 0xFFFFFFFD) != 1)
    return 1;
  ++a1[30];
  if (v11 >> 24 == 8 || *(_DWORD *)(*a1 + 568))
    return 1;
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_10003883C();
  sub_10001C094("error from remote host");
  return 0;
}

uint64_t sub_100019B04(uint64_t a1, int a2, char *a3, size_t a4)
{
  int v5;
  int v6;
  BOOL v7;

  *(_QWORD *)(a1 + 48) += a4;
  v5 = *(_DWORD *)(a1 + 188);
  if (v5 == -1)
    return 1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = v5 != a2 && v6 == 0;
  if (!v7 || sub_100019BA8(v5, a3, a4))
    return 1;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100038868();
  }
  sub_10001BF64("write outgoing to batch");
  return 0;
}

uint64_t sub_100019BA8(int a1, char *a2, size_t a3)
{
  size_t v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ssize_t v14;
  const char *v16;
  char v17;
  pollfd v18;

  if (!a3)
    return 1;
  v3 = a3;
  while (1)
  {
    *(_DWORD *)&v18.events = 4;
    v18.fd = a1;
    v6 = poll(&v18, 1u, dword_100050F00);
    if (!v6)
      break;
    if (v6 == -1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003899C();
      v16 = "poll";
      goto LABEL_37;
    }
    if ((v18.revents & 0x28) != 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038970();
      sub_10001BF64("poll: bad fd");
      goto LABEL_38;
    }
    if ((v18.revents & 0x10) != 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038944();
      sub_10001BF64("poll: hangup");
      goto LABEL_38;
    }
    if ((v18.revents & 4) == 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000388C0();
      sub_10001BF64("poll: unknown event");
      goto LABEL_38;
    }
    v14 = write(a1, a2, v3);
    if (v14 == -1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000388EC();
      v16 = "write";
LABEL_37:
      sub_10001BFE8(v16, v7, v8, v9, v10, v11, v12, v13, v17);
      goto LABEL_38;
    }
    if (!v14)
    {
      if (dword_100050EE8)
      {
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100038918();
      }
      sub_10001BF64("io_write_nonblocking: short write");
      return 0;
    }
    a2 += v14;
    v3 -= v14;
    if (!v3)
      return 1;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_1000389C8();
  sub_10001BF64("poll: timeout");
LABEL_38:
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100038894();
  sub_10001C094("io_write_nonblocking");
  return 0;
}

uint64_t sub_100019E94(uint64_t a1, int a2, char *a3, size_t a4, int a5)
{
  size_t v6;
  char *v7;
  int v10;
  BOOL v11;
  int v12;
  size_t v13;
  uint64_t result;
  int v15;

  v6 = a4;
  v7 = a3;
  v10 = *(_DWORD *)(a1 + 188);
  if (v10 != -1)
  {
    v11 = v10 != a2 && (*(_DWORD *)(a1 + 8) | a5) == 0;
    if (v11 && !sub_100019BA8(v10, a3, a4))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038868();
      sub_10001BF64("write outgoing to batch");
      return 0;
    }
  }
  if (*(_DWORD *)(a1 + 144))
  {
    if (!v6)
      return 1;
    v12 = (a5 << 24) + 117440512;
    while (1)
    {
      if (v6 >= 0xFFFFFF)
        v13 = 0xFFFFFFLL;
      else
        v13 = v6;
      v15 = v12 | v13;
      if (!sub_100019BA8(a2, (char *)&v15, 4uLL))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_29;
        goto LABEL_30;
      }
      if (!sub_100019BA8(a2, v7, v13))
        break;
      *(_QWORD *)(a1 + 48) += v13;
      v7 += v13;
      v6 -= v13;
      if (!v6)
        return 1;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_29:
      sub_100038A1C();
LABEL_30:
    sub_10001C094("io_write_blocking");
    return 0;
  }
  if (a5)
    sub_1000389F4();
  result = sub_100019BA8(a2, v7, v6);
  *(_QWORD *)(a1 + 48) += v6;
  return result;
}

uint64_t sub_10001A070(uint64_t a1, int a2, char *a3, size_t a4)
{
  return sub_100019E94(a1, a2, a3, a4, 0);
}

uint64_t sub_10001A078(uint64_t a1, int a2, char *__s)
{
  size_t v6;

  v6 = strlen(__s);
  if (sub_100019E94(a1, a2, __s, v6, 0))
  {
    if (sub_10001A170(a1, a2, 10))
      return 1;
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034C50();
    }
    sub_10001C094("io_write_byte");
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035E3C();
    sub_10001C094("io_write_buf");
  }
  return 0;
}

uint64_t sub_10001A170(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  char v5;

  v5 = a3;
  v3 = 1;
  if (!sub_100019E94(a1, a2, &v5, 1uLL, 0))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035E3C();
    sub_10001C094("io_write_buf");
    return 0;
  }
  return v3;
}

uint64_t sub_10001A1F8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v6 = &qword_1000507D8;
  while (1)
  {
    v6 = (uint64_t *)*v6;
    if (!v6)
      break;
    if (*((_DWORD *)v6 + 6) == a1)
      sub_100038A48();
  }
  v7 = malloc_type_malloc(0x20uLL, 0x10A0040D98738FAuLL);
  if (v7)
  {
    v7[1] = a2;
    v7[2] = a3;
    *((_DWORD *)v7 + 6) = a1;
    *v7 = qword_1000507D8;
    qword_1000507D8 = (uint64_t)v7;
    return 1;
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000379C8();
    sub_10001BFE8("malloc", v8, v9, v10, v11, v12, v13, v14, v16);
    return 0;
  }
}

uint64_t sub_10001A2C8(int a1, char *a2, size_t a3)
{
  size_t v3;
  ssize_t v7;

  if (!a3)
    return 1;
  v3 = a3;
  v7 = 0;
  while (sub_10001B738(a1, a2, v3, &v7, 0))
  {
    if (!v7)
    {
      if (dword_100050EE8)
      {
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100038A9C();
      }
      sub_10001BF64("io_read_nonblocking: short read");
      return 0;
    }
    a2 += v7;
    v3 -= v7;
    if (!v3)
      return 1;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100038A70();
  sub_10001C094("io_read_nonblocking");
  return 0;
}

uint64_t sub_10001A3D4(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  char v11;

  v4 = *a4;
  if (!*a4)
    return 1;
  v9 = 0;
  v11 = 0;
  while (sub_10001A4B0(a1, a2, &v11))
  {
    if (v11 == 10)
    {
      *(_BYTE *)(a3 + v9) = 0;
      *a4 = v9;
      return 1;
    }
    *(_BYTE *)(a3 + v9++) = v11;
    if (v4 == v9)
      return 1;
  }
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000378C0();
  }
  sub_10001C094("io_read_byte");
  return 0;
}

uint64_t sub_10001A4B0(uint64_t a1, int a2, char *a3)
{
  uint64_t v3;

  v3 = 1;
  if (!sub_10001A524(a1, a2, a3, 1uLL))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000379F4();
    sub_10001C094("io_read_buf");
    return 0;
  }
  return v3;
}

uint64_t sub_10001A524(uint64_t a1, int a2, char *a3, size_t a4)
{
  size_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  uint64_t result;
  int v13;

  if (*(_DWORD *)(a1 + 128))
  {
    if (a4)
    {
      v8 = a4;
      v9 = a3;
      while (1)
      {
        while (1)
        {
          v10 = *(_QWORD *)(a1 + 136);
          if (v10)
            break;
          if (!sub_10001987C((_QWORD *)a1, a2))
          {
            if (dword_100050EE8)
            {
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_100038B1C();
            }
            sub_10001C094("io_read_flush");
            return 0;
          }
        }
        v11 = v10 >= v8 ? v8 : *(_QWORD *)(a1 + 136);
        if (!sub_10001A2C8(a2, v9, v11))
          break;
        *(_QWORD *)(a1 + 136) -= v11;
        v9 += v11;
        *(_QWORD *)(a1 + 24) += v11;
        v8 -= v11;
        if (!v8)
          goto LABEL_15;
      }
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000387E4();
      sub_10001C094("io_read_blocking");
      return 0;
    }
LABEL_15:
    v13 = *(_DWORD *)(a1 + 188);
    if (v13 == -1 || *(_DWORD *)(a1 + 8) != 1 || sub_100019BA8(v13, a3, a4))
      return 1;
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100038AC8();
    sub_10001BF64("write incoming to batch");
    return 0;
  }
  if (*(_QWORD *)(a1 + 136))
    sub_100038AF4();
  result = sub_10001A2C8(a2, a3, a4);
  *(_QWORD *)(a1 + 24) += a4;
  if ((_DWORD)result)
    goto LABEL_15;
  return result;
}

uint64_t sub_10001A708(uint64_t a1, int a2, unint64_t a3)
{
  unint64_t v6;

  if (!(a3 >> 31))
  {
    if (!sub_10001A85C(a1, a2, a3, 0))
    {
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_12;
      goto LABEL_11;
    }
    return 1;
  }
  v6 = a3;
  if (sub_10001A85C(a1, a2, -1, 0))
  {
    if (!sub_100019E94(a1, a2, (char *)&v6, 8uLL, 0))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035E3C();
      sub_10001C094("io_write_buf");
      return 0;
    }
    return 1;
  }
  if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    goto LABEL_12;
LABEL_11:
  sub_10003516C();
LABEL_12:
  sub_10001C094("io_write_int");
  return 0;
}

uint64_t sub_10001A850(uint64_t a1, int a2, int a3)
{
  return sub_10001A85C(a1, a2, a3, 0);
}

uint64_t sub_10001A85C(uint64_t a1, int a2, int a3, int a4)
{
  int v5;

  v5 = a3;
  if (sub_100019E94(a1, a2, (char *)&v5, 4uLL, a4))
    return 1;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035E3C();
  }
  sub_10001C094("io_write_buf");
  return 0;
}

uint64_t sub_10001A8E8(uint64_t a1, int a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  return sub_100019E94(a1, a2, (char *)&v4, 2uLL, 0);
}

void *sub_10001A914(uint64_t a1, _QWORD *a2, size_t a3, void *__src, size_t __n)
{
  void *result;

  if (*a2 + __n > a3)
    sub_100038B48();
  result = memcpy((void *)(a1 + *a2), __src, __n);
  *a2 += __n;
  return result;
}

_DWORD *sub_10001A964(_DWORD *result, uint64_t a2, _QWORD *a3, size_t a4, void *__src, size_t __n)
{
  int __srca;

  if (__n)
  {
    if (result[36])
    {
      if (__n + *a3 + 4 > a4)
        sub_100038B70();
      if (__n >> 24)
        sub_100038B98();
      __srca = __n + 117440512;
      sub_10001A914(a2, a3, a4, &__srca, 4uLL);
    }
    return sub_10001A914(a2, a3, a4, __src, __n);
  }
  return result;
}

void *sub_10001AA28(uint64_t a1, _QWORD *a2, size_t a3, int a4)
{
  int __src;

  __src = a4;
  return sub_10001A914(a1, a2, a3, &__src, 4uLL);
}

_DWORD *sub_10001AA50(_DWORD *result, uint64_t a2, _QWORD *a3, size_t a4, void *a5, size_t a6)
{
  int v11;
  int __src;

  if (a6)
  {
    if (result[36])
    {
      if (a6 + *a3 + 4 > a4)
        sub_100038BC0();
      if (a6 >> 24)
        sub_100038BE8();
      if (a6 <= 0x7F)
        v11 = 1;
      else
        v11 = 2;
      __src = a6 + 117440512 + v11;
      sub_10001A914(a2, a3, a4, &__src, 4uLL);
    }
    return sub_10001AB24(a2, a3, a4, a5, a6);
  }
  return result;
}

void *sub_10001AB24(uint64_t a1, _QWORD *a2, size_t a3, void *a4, size_t a5)
{
  char __src;
  char v12;

  if (a5 >= 0x8000)
    sub_100038C10();
  if (a5 >= 0x80)
  {
    __src = BYTE1(a5) ^ 0x80;
    sub_10001A914(a1, a2, a3, &__src, 1uLL);
  }
  v12 = a5;
  sub_10001A914(a1, a2, a3, &v12, 1uLL);
  return sub_10001A914(a1, a2, a3, a4, a5);
}

uint64_t sub_10001ABD0(uint64_t a1, void **a2, size_t *a3, size_t *a4, uint64_t a5)
{
  uint64_t v7;
  size_t v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v7 = a5 + 4 * (*(_DWORD *)(a1 + 144) != 0);
  v8 = v7 + *a3;
  if (v8 <= *a4)
    goto LABEL_4;
  v10 = malloc_type_realloc(*a2, v8, 0xFDD223FDuLL);
  if (v10)
  {
    *a2 = v10;
    *a4 = v7 + *a3;
    v8 = v7 + *a3;
LABEL_4:
    *a3 = v8;
    return 1;
  }
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100038C38();
  }
  sub_10001BFE8("realloc", v11, v12, v13, v14, v15, v16, v17, v19);
  return 0;
}

_DWORD *sub_10001ACA0(_DWORD *a1, uint64_t a2, _QWORD *a3, size_t a4, int a5)
{
  int __src;

  __src = a5;
  return sub_10001A964(a1, a2, a3, a4, &__src, 4uLL);
}

_DWORD *sub_10001ACC8(_DWORD *a1, uint64_t a2, _QWORD *a3, size_t a4, char a5)
{
  char __src;

  __src = a5;
  return sub_10001A964(a1, a2, a3, a4, &__src, 1uLL);
}

_DWORD *sub_10001ACF0(_DWORD *a1, uint64_t a2, _QWORD *a3, size_t a4, __int16 a5)
{
  __int16 __src;

  __src = a5;
  return sub_10001A964(a1, a2, a3, a4, &__src, 2uLL);
}

void *sub_10001AD18(uint64_t a1, _QWORD *a2, size_t a3, __int16 a4)
{
  __int16 __src;

  __src = a4;
  return sub_10001A914(a1, a2, a3, &__src, 2uLL);
}

void *sub_10001AD40(uint64_t a1, _QWORD *a2, size_t a3, char a4)
{
  char __src;

  __src = a4;
  return sub_10001A914(a1, a2, a3, &__src, 1uLL);
}

uint64_t sub_10001AD68(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (sub_10001AE3C(a1, a2, &v6))
  {
    v4 = v6;
    *a3 = v6;
    if ((v4 & 0x8000000000000000) == 0)
      return 1;
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038C64();
    }
    sub_10001C094("io_read_long negative");
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100037A20();
    sub_10001C094("io_read_long");
  }
  return 0;
}

uint64_t sub_10001AE3C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  int v8;
  uint64_t v9;

  v9 = 0;
  v8 = 0;
  if (sub_10001B020(a1, a2, &v8))
  {
    v6 = v8;
    if (v8 != -1)
    {
LABEL_5:
      *a3 = v6;
      return 1;
    }
    if (sub_10001A524(a1, a2, (char *)&v9, 8uLL))
    {
      v6 = v9;
      goto LABEL_5;
    }
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000379F4();
    }
    sub_10001C094("io_read_buf");
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035198();
    sub_10001C094("io_read_int");
  }
  return 0;
}

uint64_t sub_10001AF48(uint64_t a1, int a2, _QWORD *a3)
{
  unsigned int v5;

  v5 = 0;
  if (sub_10001B020(a1, a2, &v5))
  {
    if ((v5 & 0x80000000) == 0)
    {
      *a3 = v5;
      return 1;
    }
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038C90();
    }
    sub_10001BF64("io_read_size: negative value");
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035198();
    sub_10001C094("io_read_int");
  }
  return 0;
}

uint64_t sub_10001B020(uint64_t a1, int a2, _DWORD *a3)
{
  int v5;

  v5 = 0;
  if (sub_10001A524(a1, a2, (char *)&v5, 4uLL))
  {
    *a3 = v5;
    return 1;
  }
  else
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000379F4();
    }
    sub_10001C094("io_read_buf");
    return 0;
  }
}

uint64_t sub_10001B0B0(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned __int16 v5;

  v5 = 0;
  if (sub_10001A524(a1, a2, (char *)&v5, 2uLL))
  {
    *a3 = v5;
    return 1;
  }
  else
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000379F4();
    }
    sub_10001C094("io_read_buf");
    return 0;
  }
}

void *sub_10001B144(uint64_t a1, _QWORD *a2, size_t a3, void *__dst, size_t __n)
{
  void *result;

  if (*a2 + __n > a3)
    sub_100038CBC();
  result = memcpy(__dst, (const void *)(a1 + *a2), __n);
  *a2 += __n;
  return result;
}

void *sub_10001B194(uint64_t a1, _QWORD *a2, size_t a3, _DWORD *a4)
{
  void *result;
  int __dst;

  __dst = 0;
  result = sub_10001B144(a1, a2, a3, &__dst, 4uLL);
  *a4 = __dst;
  return result;
}

uint64_t sub_10001B1D0(uint64_t a1, _QWORD *a2, size_t a3, _QWORD *a4)
{
  unsigned int __dst;

  __dst = 0;
  sub_10001B144(a1, a2, a3, &__dst, 4uLL);
  if ((__dst & 0x80000000) != 0)
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038CE4();
    }
    sub_10001BF64("io_unbuffer_size: negative value");
    return 0;
  }
  else
  {
    *a4 = __dst;
    return 1;
  }
}

uint64_t sub_10001B260(uint64_t a1, int a2, char *a3, unint64_t a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  size_t v10;
  NSObject *v12;
  unsigned __int8 v13;

  v13 = 0;
  if (!sub_10001A4B0(a1, a2, (char *)&v13))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
LABEL_6:
    sub_100038D10();
LABEL_7:
    sub_10001C094("io_read_vstring byte 1");
    return 0;
  }
  v8 = v13;
  if (((char)v13 & 0x80000000) == 0)
  {
    v9 = 0;
    goto LABEL_10;
  }
  if (!sub_10001A4B0(a1, a2, (char *)&v13))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_7;
    goto LABEL_6;
  }
  v9 = (v8 << 8) - 0x8000;
  v8 = v13;
LABEL_10:
  v10 = v9 | v8;
  if (v10 >= a4)
  {
    if (dword_100050EE8)
    {
      v12 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038D68(v10, a4, v12);
    }
    sub_10001C094("io_read_vstring: incoming string too large (%zu > %zu)");
  }
  else
  {
    if (sub_10001A524(a1, a2, a3, v10))
      return 1;
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038D3C();
    }
    sub_10001C094("io_read_vstring buf");
  }
  return 0;
}

uint64_t sub_10001B428(uint64_t a1, void **a2, unint64_t a3)
{
  _BYTE *v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  sub_10001B6FC(a2);
  v5 = a2[3];
  v6 = v5 - (_BYTE *)a2[2];
  v7 = a3 > v6;
  v8 = a3 - v6;
  if (!v7)
    return 1;
  v9 = malloc_type_realloc(*a2, (size_t)&v5[v8], 0x272F257uLL);
  if (v9)
  {
    *a2 = v9;
    a2[3] = (char *)a2[3] + v8;
    return 1;
  }
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100038C38();
  }
  sub_10001BFE8("realloc", v10, v11, v12, v13, v14, v15, v16, v18);
  return 0;
}

uint64_t sub_10001B4D8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_10001B4E0(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v18;

  v18 = 0;
  if (!a2[3])
    sub_100038DE8();
  sub_10001B6FC(a2);
  LOBYTE(v6) = 0;
  do
  {
    while (1)
    {
      v7 = sub_1000196F4(a1, a3);
      if (v7 < 1)
        goto LABEL_31;
      if (!*(_DWORD *)(a1 + 128))
      {
        v9 = a2[2] + a2[1];
        v10 = a2[3];
        v11 = v10 - v9;
        if (v10 == v9)
          goto LABEL_31;
        goto LABEL_14;
      }
      v8 = *(_QWORD *)(a1 + 136);
      if (!v8)
        break;
      v9 = a2[2] + a2[1];
      v12 = a2[3] - v9;
      if (!v12)
        goto LABEL_31;
      if (v12 >= v8)
        v11 = *(_QWORD *)(a1 + 136);
      else
        v11 = a2[3] - v9;
LABEL_14:
      if (!sub_10001B738(a3, (void *)(*a2 + v9), v11, (ssize_t *)&v18, 1))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100038A70();
        sub_10001C094("io_read_nonblocking");
        goto LABEL_39;
      }
      v13 = v18;
      if (!v18)
      {
        if ((v6 & 1) != 0)
        {
LABEL_31:
          v6 = 1;
          goto LABEL_32;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100038E10();
        sub_10001C094("unexpected eof");
LABEL_39:
        v6 = 0;
LABEL_32:
        if (v7 >= 0)
          return v6;
        else
          return 0;
      }
      a2[2] += v18;
      *(_QWORD *)(a1 + 24) += v13;
      v14 = *(_QWORD *)(a1 + 136);
      if (v14)
      {
        v15 = v14 >= v13;
        v16 = v14 - v13;
        if (!v15)
          sub_100038E3C();
        *(_QWORD *)(a1 + 136) = v16;
      }
      v6 = 1;
      if (v13 == v11)
        goto LABEL_32;
    }
  }
  while (sub_10001987C((_QWORD *)a1, a3));
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100038B1C();
  }
  sub_10001C094("io_read_flush");
  return 0;
}

_QWORD *sub_10001B6FC(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  size_t v3;

  v1 = result[1];
  if (v1)
  {
    v2 = result;
    v3 = result[2];
    if (v3)
      result = memmove((void *)*result, (const void *)(*result + v1), v3);
    v2[1] = 0;
  }
  return result;
}

uint64_t sub_10001B738(int a1, void *a2, size_t a3, ssize_t *a4, char a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  ssize_t v20;
  char v21;
  pollfd v22;

  *a4 = 0;
  if (a3)
  {
    *(_DWORD *)&v22.events = (unint64_t)&_mh_execute_header >> 32;
    v22.fd = a1;
    v10 = poll(&v22, 1u, dword_100050F00);
    if (!v10)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000389C8();
      sub_10001BF64("poll: timeout");
      return 0;
    }
    if (v10 == -1)
    {
      if (dword_100050EE8)
      {
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003899C();
      }
      v18 = "poll";
LABEL_8:
      sub_10001BFE8(v18, v11, v12, v13, v14, v15, v16, v17, v21);
      return 0;
    }
    if ((v22.revents & 0x28) != 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038970();
      sub_10001BF64("poll: bad fd");
      return 0;
    }
    if ((v22.revents & 0x11) == 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000388C0();
      sub_10001BF64("poll: unknown event");
      return 0;
    }
    v20 = read(a1, a2, a3);
    if (v20)
    {
      if (v20 == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100038E64();
        v18 = "read";
        goto LABEL_8;
      }
    }
    else if ((a5 & 1) == 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038E90();
      sub_10001BF64("unexpected end of file");
      return 0;
    }
    *a4 = v20;
  }
  return 1;
}

void *sub_10001B99C(_QWORD *a1, void *a2, size_t a3)
{
  void *result;
  size_t v6;

  result = sub_10001B9DC(a1, a2, a3);
  v6 = a1[2] - a3;
  a1[2] = v6;
  if (v6)
    v6 = a1[1] + a3;
  a1[1] = v6;
  return result;
}

void *sub_10001B9DC(_QWORD *a1, void *__dst, size_t a3)
{
  if (a1[2] < a3)
    sub_100038EBC();
  return memcpy(__dst, (const void *)(*a1 + a1[1]), a3);
}

void *sub_10001BA0C(_QWORD *a1, void *a2)
{
  void *result;
  uint64_t v4;

  result = sub_10001B9DC(a1, a2, 1uLL);
  v4 = a1[2] - 1;
  a1[2] = v4;
  if (v4)
    v4 = a1[1] + 1;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001BA4C(_QWORD *a1)
{
  unsigned int __dst;

  __dst = 0;
  sub_10001B9DC(a1, &__dst, 4uLL);
  return __dst;
}

void *sub_10001BA78(_QWORD *a1, _DWORD *a2)
{
  void *result;
  uint64_t v5;
  int __dst;

  __dst = 0;
  result = sub_10001B9DC(a1, &__dst, 4uLL);
  v5 = a1[2] - 4;
  a1[2] = v5;
  if (v5)
    v5 = a1[1] + 4;
  a1[1] = v5;
  *a2 = __dst;
  return result;
}

void *sub_10001BAD4(_QWORD *a1, _DWORD *a2)
{
  void *result;
  uint64_t v5;
  unsigned __int16 __dst;

  __dst = 0;
  result = sub_10001B9DC(a1, &__dst, 2uLL);
  v5 = a1[2] - 2;
  a1[2] = v5;
  if (v5)
    v5 = a1[1] + 2;
  a1[1] = v5;
  *a2 = __dst;
  return result;
}

uint64_t sub_10001BB34(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  unsigned int v5;

  v5 = 0;
  sub_10001BA78(a1, &v5);
  if ((v5 & 0x80000000) != 0)
  {
    if (dword_100050EE8)
    {
      v4 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038EE4(v4);
    }
    sub_10001BF64("%s: negative value", "iobuf_read_size");
    return 0;
  }
  else
  {
    *a2 = v5;
    return 1;
  }
}

uint64_t sub_10001BBCC(_QWORD *a1, char **a2)
{
  unint64_t v2;
  char *v5;
  char *v6;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v10;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unsigned __int8 __dst;

  v2 = a1[2];
  if (!v2)
    return 0;
  __dst = 0;
  v5 = *a2;
  if (*a2)
  {
LABEL_3:
    v6 = a2[1];
    if (v2 >= a2[2] - v6)
      v7 = a2[2] - v6;
    else
      v7 = v2;
    sub_10001B9DC(a1, &v6[(_QWORD)v5], v7);
    v8 = a1[2] - v7;
    a1[2] = v8;
    if (v8)
      v8 = a1[1] + v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = (size_t)&a2[1][v7];
    a2[1] = (char *)v10;
    return v10 == (_QWORD)v9;
  }
  if (v2 < 2)
    return 0;
  sub_10001B9DC(a1, &__dst, 1uLL);
  v12 = a1[2] - 1;
  a1[2] = v12;
  if (v12)
    v12 = a1[1] + 1;
  a1[1] = v12;
  v13 = __dst;
  if ((char)__dst < 0)
  {
    v14 = (__dst << 8) - 0x8000;
    sub_10001B9DC(a1, &__dst, 1uLL);
    v15 = a1[2] - 1;
    a1[2] = v15;
    if (v15)
      v15 = a1[1] + 1;
    a1[1] = v15;
    v13 = __dst;
  }
  else
  {
    v14 = 0;
  }
  v16 = v14 | v13;
  a2[2] = (char *)v16;
  v5 = (char *)malloc_type_malloc(v16, 0x5F5A71A3uLL);
  *a2 = v5;
  if (v5)
  {
    v2 = a1[2];
    goto LABEL_3;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_1000379C8();
  sub_10001BFE8("malloc", v17, v18, v19, v20, v21, v22, v23, v24);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10001BD5C(char *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = 0;
  while (!strcasecmp((&off_10004C900)[v2], a1))
  {
    v2 += 2;
    if (v2 == 36)
    {
      *__error() = 2;
      return 0xFFFFFFFFLL;
    }
  }
  result = 0;
  dword_100050668 = (int)(&off_10004C900)[v2 + 1];
  return result;
}

void sub_10001BDD0(uint64_t a1)
{
  FILE *v2;
  BOOL v3;

  v2 = (FILE *)qword_1000507E0;
  qword_1000507E0 = a1;
  if (v2)
    v3 = __stderrp == v2;
  else
    v3 = 1;
  if (!v3)
    fclose(v2);
  if (a1 || !v2)
  {
    if (a1)
    {
      if (!v2)
        closelog();
    }
  }
  else
  {
    openlog("openrsyncd", 9, dword_100050668);
  }
}

void sub_10001BE54(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v23 = 0;
  if (dword_100050EEC > a1)
  {
    if (!a2)
      goto LABEL_7;
    if (vasprintf(&v23, a2, &a9) == -1)
      return;
    if (a1 <= 0 && v23)
    {
      sub_10001BF20(6, "%s\n", v10, v11, v12, v13, v14, v15, (char)v23);
    }
    else
    {
LABEL_7:
      if (a1 >= 1)
      {
        v16 = getprogname();
        sub_10001BF20(6, "%s: %s%s\n", v17, v18, v19, v20, v21, v22, v16);
      }
    }
    free(v23);
  }
}

void sub_10001BF20(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (qword_1000507E0)
    vfprintf((FILE *)qword_1000507E0, a2, &a9);
  else
    vsyslog(a1, a2, &a9);
}

void sub_10001BF64(char *a1, ...)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  va_list va;

  va_start(va, a1);
  v8 = 0;
  if (!a1 || vasprintf(&v8, a1, va) != -1)
  {
    v1 = getprogname();
    sub_10001BF20(3, "%s: error%s%s\n", v2, v3, v4, v5, v6, v7, v1);
    free(v8);
  }
}

void sub_10001BFE8(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v18 = 0;
  v10 = *__error();
  if (!a1 || vasprintf(&v18, a1, &a9) != -1)
  {
    v11 = getprogname();
    strerror(v10);
    sub_10001BF20(3, "%s: error%s%s: %s\n", v12, v13, v14, v15, v16, v17, v11);
    free(v18);
  }
}

void sub_10001C094(char *a1, ...)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  va_list va;

  va_start(va, a1);
  v8 = 0;
  if (dword_100050EEC >= 1 && (!a1 || vasprintf(&v8, a1, va) != -1))
  {
    v1 = getprogname();
    sub_10001BF20(3, "%s: error%s%s\n", v2, v3, v4, v5, v6, v7, v1);
    free(v8);
  }
}

void sub_10001C130(char *a1, ...)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  va_list va;

  va_start(va, a1);
  v8 = 0;
  if (dword_100050EEC >= 1 && (!a1 || vasprintf(&v8, a1, va) != -1))
  {
    v1 = getprogname();
    sub_10001BF20(4, "%s: warning%s%s\n", v2, v3, v4, v5, v6, v7, v1);
    free(v8);
  }
}

void sub_10001C1CC(char *a1, ...)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  va_list va;

  va_start(va, a1);
  v8 = 0;
  if (!a1 || vasprintf(&v8, a1, va) != -1)
  {
    v1 = getprogname();
    sub_10001BF20(4, "%s: warning%s%s\n", v2, v3, v4, v5, v6, v7, v1);
    free(v8);
  }
}

void sub_10001C250(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int *v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v20 = 0;
  v11 = __error();
  if (dword_100050EEC >= a1)
  {
    v12 = *v11;
    if (!a2 || vasprintf(&v20, a2, &a9) != -1)
    {
      v13 = getprogname();
      strerror(v12);
      sub_10001BF20(4, "%s: warning%s%s: %s\n", v14, v15, v16, v17, v18, v19, v13);
      free(v20);
    }
  }
}

uint64_t sub_10001C314(uint64_t a1, char *a2, _BYTE *a3)
{
  uint64_t v7;
  __darwin_ct_rune_t v8;
  unsigned __int8 *v9;
  __uint32_t v10;
  __darwin_ct_rune_t v11;
  FILE *v12;
  uint64_t v13;

  if (*(_DWORD *)(*(_QWORD *)a1 + 212))
    return fprintf(*(FILE **)(*(_QWORD *)a1 + 456), a2, a3);
  v7 = usbuf_new(0, 0, 0, 1);
  v8 = *a3;
  if (*a3)
  {
    v9 = a3 + 1;
    do
    {
      if ((v8 & 0x80) != 0)
        v10 = __maskrune(v8, 0x40000uLL);
      else
        v10 = _DefaultRuneLocale.__runetype[v8] & 0x40000;
      if (v8 == 9 || v10)
        usbuf_putc(v7, (char)*(v9 - 1));
      else
        usbuf_printf(v7, "\\#%03o", v8);
      v11 = *v9++;
      v8 = v11;
    }
    while (v11);
  }
  usbuf_finish(v7);
  v12 = *(FILE **)(*(_QWORD *)a1 + 456);
  v13 = usbuf_data(v7);
  fprintf(v12, a2, v13);
  return usbuf_delete(v7);
}

uint64_t sub_10001C444(_QWORD *a1, uint64_t a2, int a3)
{
  const char *v3;
  size_t v7;
  const char *v8;
  const char *v9;
  unsigned int v11;

  v3 = *(const char **)(*a1 + 448);
  if (!v3)
    return 0;
  v7 = strlen(*(const char **)(*a1 + 448));
  v11 = 0;
  if (*v3)
  {
    v8 = &v3[v7];
    do
    {
      v9 = v3;
      while (v3 < v8)
      {
        if (*v3 == 37)
        {
          if (a3)
          {
            fwrite(v9, 1uLL, v3 - v9, *(FILE **)(*a1 + 456));
            if (v3[1] == 37)
            {
              fputc(37, *(FILE **)(*a1 + 456));
              goto LABEL_12;
            }
LABEL_13:
            v9 = sub_10001C590(v3, (int *)&v11, a1, a2, a3);
            if (!v9)
              return v11;
            v3 = v9;
            if (!*v9)
              return v11;
          }
          else
          {
            if (v3[1] != 37)
              goto LABEL_13;
LABEL_12:
            v9 = v3 + 2;
            v3 += 2;
          }
        }
        else
        {
          ++v3;
        }
      }
      if (a3)
        fwrite(v9, 1uLL, v3 - v9, *(FILE **)(*a1 + 456));
    }
    while (*v3);
  }
  if (a3)
    fputc(10, *(FILE **)(*a1 + 456));
  a1[4] = a1[3];
  a1[7] = a1[6];
  return v11;
}

const char *sub_10001C590(const char *a1, int *a2, _QWORD *a3, uint64_t a4, int a5)
{
  char *v10;
  char *v11;
  const char *v12;
  size_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  char *v34;
  _BYTE *v35;
  int v36;
  char v37;
  int v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  FILE *v55;
  NSObject *v56;
  _QWORD *v57;
  const char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  size_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t *v65;
  size_t v66;
  size_t v67;
  int v68;
  FILE *v69;
  const time_t *v70;
  tm *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char v79[8];
  _QWORD *v80;
  uint64_t v81;
  time_t v82;
  char v83[8192];
  char v84;
  _BYTE v85[7];

  strlen(a1);
  v10 = &v79[-((__chkstk_darwin() + 16) & 0xFFFFFFFFFFFFFFF0)];
  *(_WORD *)v10 = 37;
  v11 = v10 + 1;
  v12 = a1 + 1;
  v84 = 37;
  v13 = strspn(v12, "'+- 0123456789");
  if (v13 - 8188 <= 0xFFFFFFFFFFFFDFFELL)
  {
    if (dword_100050EE8)
    {
      v14 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038F60(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    sub_10001BF64("Insufficient buffer for width format");
    return 0;
  }
  v22 = v13;
  __strlcpy_chk(v85, v12, v13 + 1, 0x1FFFLL);
  if (strchr(&v84, 39))
  {
    v23 = strlen(&v84);
    v24 = malloc_type_malloc(v23, 0x68D8F8A6uLL);
    if (v24)
    {
      v32 = v24;
      v80 = a3;
      v33 = 0;
      v34 = &v84;
      v35 = v24;
      while (1)
      {
        v36 = *v34;
        if (v36 == 39)
        {
          ++v33;
        }
        else
        {
          if (!*v34)
          {
            v81 = a4;
            *v35 = 0;
            __strlcpy_chk(&v84, v24, v22 + 1, 0x2000);
            v22 -= v33;
            free(v32);
            goto LABEL_16;
          }
          *v35++ = v36;
        }
        ++v34;
      }
    }
    if (dword_100050EE8)
    {
      v56 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038FC0(v56, v25, v26, v27, v28, v29, v30, v31);
    }
    sub_10001BFE8("malloc", v25, v26, v27, v28, v29, v30, v31, v79[0]);
    return 0;
  }
  v80 = a3;
  v81 = a4;
  v33 = 0;
LABEL_16:
  v37 = *v12;
  if (!*v12)
  {
LABEL_19:
    if (dword_100050EE8)
    {
      v40 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100038F90(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    sub_10001BF64("missing format character");
    return 0;
  }
  while (1)
  {
    v38 = v37;
    if (!memchr("'-+ 0", v37, 6uLL))
      break;
    v39 = *(unsigned __int8 *)++v12;
    *v11 = v37;
    *++v11 = 0;
    v37 = v39;
    if (!v39)
      goto LABEL_19;
  }
  if ((v37 - 48) <= 9)
  {
    do
    {
      v50 = v11;
      v51 = *++v12;
      v38 = v51;
      *++v11 = 0;
      *v50 = v37;
      v37 = v51;
    }
    while ((v51 - 48) < 0xA);
  }
  *v11 = v37;
  v11[1] = 0;
  v48 = v12 + 1;
  if (v38 > 76)
  {
    v52 = v81;
    switch(v38)
    {
      case 'b':
        *a2 |= 2u;
        if (a5)
        {
          v53 = v80;
          v54 = (char *)(v80[3] + v80[6] - (v80[4] + v80[7]));
          switch(v33)
          {
            case 0:
            case 1:
              strcpy(&v85[v22], "ld");
              v55 = *(FILE **)(*v53 + 456);
              v77 = v54;
              goto LABEL_81;
            case 2:
              v74 = 3;
              goto LABEL_84;
            case 3:
              v74 = 11;
LABEL_84:
              humanize_number(v83, 5, v54, &byte_1000437D5, 32, v74);
              *(_WORD *)&v85[v22] = 115;
              v72 = *v53;
              goto LABEL_76;
            default:
              return v48;
          }
        }
        return v48;
      case 'c':
        v68 = *a2 | 2;
        goto LABEL_57;
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'o':
      case 'q':
      case 'r':
      case 's':
        return v48;
      case 'f':
        if (!a5)
          return v48;
        *(_WORD *)&v85[v22] = 115;
        v59 = *(char **)v52;
        goto LABEL_66;
      case 'i':
        v68 = *a2 | 1;
LABEL_57:
        *a2 = v68;
        return v48;
      case 'l':
        if (a5)
        {
          switch(v33)
          {
            case 0:
              strcpy(&v85[v22], "ld");
              goto LABEL_86;
            case 1:
              *(_DWORD *)&v85[v22] = 6581287;
LABEL_86:
              v55 = *(FILE **)(*v80 + 456);
              v61 = *(char **)(v52 + 40);
              goto LABEL_80;
            case 2:
              v75 = *(_QWORD *)(v81 + 40);
              v76 = 3;
              goto LABEL_89;
            case 3:
              v75 = *(_QWORD *)(v81 + 40);
              v76 = 11;
LABEL_89:
              humanize_number(v83, 5, v75, &byte_1000437D5, 32, v76);
              goto LABEL_75;
            default:
              return v48;
          }
        }
        return v48;
      case 'n':
        if (!a5)
          return v48;
        *(_WORD *)&v85[v22] = 115;
        if ((*(_WORD *)(v52 + 24) & 0xF000) == 0x4000)
          snprintf(v83, 0x2000uLL, "%s/");
        else
          snprintf(v83, 0x2000uLL, "%s");
        v59 = v83;
LABEL_66:
        v60 = (uint64_t)v80;
        goto LABEL_67;
      case 'p':
        if (a5)
        {
          *(_WORD *)&v85[v22] = 100;
          v69 = *(FILE **)(*v80 + 456);
          v78 = getpid();
          fprintf(v69, &v84, v78);
        }
        return v48;
      case 't':
        v82 = 0;
        if (!a5)
          return v48;
        time(&v82);
        v70 = &v82;
        goto LABEL_74;
      default:
        if (v38 == 77)
        {
          if (!a5)
            return v48;
          v70 = (const time_t *)(v81 + 48);
LABEL_74:
          v71 = localtime(v70);
          strftime(v83, 0x2000uLL, "%Y/%m/%d-%H:%M:%S", v71);
          goto LABEL_75;
        }
        if (v38 != 85 || !a5)
          return v48;
        v61 = (char *)*(unsigned int *)(v81 + 28);
        v62 = v22 + 1;
        v63 = v22 + 2;
        if ((_DWORD)v61)
        {
          v85[v62 - 1] = 100;
          v85[v63 - 1] = 0;
          v64 = *v80;
          goto LABEL_52;
        }
        v85[v62 - 1] = 115;
        v85[v63 - 1] = 0;
        v73 = *v80;
        break;
    }
    goto LABEL_79;
  }
  if (v38 == 66)
  {
    if (!a5)
      return v48;
    sub_100018948(*(unsigned __int16 *)(v81 + 24), (uint64_t)v83);
LABEL_75:
    *(_WORD *)&v85[v22] = 115;
    v72 = *v80;
LABEL_76:
    v55 = *(FILE **)(v72 + 456);
    v77 = v83;
LABEL_81:
    fprintf(v55, &v84, v77);
    return v48;
  }
  if (v38 == 71)
  {
    v65 = v80;
    if (!a5)
      return v48;
    v61 = (char *)*(unsigned int *)(v81 + 32);
    v66 = v22 + 1;
    v67 = v22 + 2;
    if ((_DWORD)v61)
    {
      v85[v66 - 1] = 100;
      v85[v67 - 1] = 0;
      v64 = *v65;
LABEL_52:
      v55 = *(FILE **)(v64 + 456);
      goto LABEL_80;
    }
    v85[v66 - 1] = 115;
    v85[v67 - 1] = 0;
    v73 = *v65;
LABEL_79:
    v55 = *(FILE **)(v73 + 456);
    v61 = "DEFAULT";
LABEL_80:
    v77 = v61;
    goto LABEL_81;
  }
  v57 = v80;
  if (v38 == 76)
  {
    if (a5)
    {
      v58 = *(const char **)(v81 + 88);
      if (v58)
      {
        snprintf(v83, 0x2000uLL, "-> %s", v58);
        *(_WORD *)&v85[v22] = 115;
        v59 = v83;
        v60 = (uint64_t)v57;
LABEL_67:
        sub_10001C314(v60, &v84, v59);
      }
    }
  }
  return v48;
}

uint64_t sub_10001CD14(uint64_t a1, char *a2, size_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char v13[32];

  v6 = *(_DWORD *)(*(_QWORD *)a1 + 176);
  switch(v6)
  {
    case 2:
      v7 = 10;
      v8 = a4;
      v9 = 32;
      v10 = 17;
      goto LABEL_7;
    case 1:
      v7 = 9;
      v8 = a4;
      v9 = 32;
      v10 = 9;
      goto LABEL_7;
    case 0:
      v7 = 32;
      v8 = a4;
      v9 = 0;
      v10 = 0;
LABEL_7:
      humanize_number(v13, v7, v8, "B", v9, v10);
      v11 = snprintf(a2, a3, "%s", v13);
      goto LABEL_9;
  }
  v11 = 0;
LABEL_9:
  if (v11 < a3)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

void sub_10001CE20(_QWORD *a1, unsigned int a2, int a3, int a4, int a5, unsigned int a6, _BYTE *a7, int a8)
{
  void *(*v11)(uint64_t, int, int);
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (a7 && a8 == 112 && *a7 == 49 && a1)
  {
    a1[6] = 0;
    v11 = (void *(*)(uint64_t, int, int))a1[8];
    if (!v11)
    {
      v11 = sub_100022930;
      a1[8] = sub_100022930;
      a1[10] = 0;
    }
    if (!a1[9])
      a1[9] = sub_100022940;
    if (a2 == -1)
      v12 = 6;
    else
      v12 = a2;
    v13 = a4 - 16;
    if (a4 > 0xF)
    {
      v14 = 2;
    }
    else
    {
      v13 = a4;
      v14 = 1;
    }
    if (a4 < 0)
      v15 = -a4;
    else
      v15 = v13;
    if (a4 < 0)
      v16 = 0;
    else
      v16 = v14;
    if (a6 <= 4 && v12 <= 9 && a3 == 8 && (a5 - 10) >= 0xFFFFFFF7 && v15 >= 8 && v15 <= 0xF)
    {
      v17 = (uint64_t)v11(a1[10], 1, 5928);
      if (v17)
      {
        v18 = v17;
        if (v15 == 8)
          v19 = 9;
        else
          v19 = v15;
        a1[7] = v17;
        *(_QWORD *)v17 = a1;
        *(_DWORD *)(v17 + 44) = v16;
        *(_QWORD *)(v17 + 48) = 0;
        *(_DWORD *)(v17 + 68) = 1 << v19;
        *(_DWORD *)(v17 + 72) = v19;
        *(_DWORD *)(v17 + 76) = (1 << v19) - 1;
        *(_DWORD *)(v17 + 116) = 128 << a5;
        *(_DWORD *)(v17 + 120) = a5 + 7;
        *(_DWORD *)(v17 + 124) = (128 << a5) - 1;
        *(_DWORD *)(v17 + 128) = (a5 + 9) / 3u;
        *(_QWORD *)(v17 + 80) = ((uint64_t (*)(_QWORD))a1[8])(a1[10]);
        *(_QWORD *)(v18 + 96) = ((uint64_t (*)(_QWORD, _QWORD, uint64_t))a1[8])(a1[10], *(unsigned int *)(v18 + 68), 2);
        *(_QWORD *)(v18 + 104) = ((uint64_t (*)(_QWORD, _QWORD, uint64_t))a1[8])(a1[10], *(unsigned int *)(v18 + 116), 2);
        *(_DWORD *)(v18 + 5880) = 64 << a5;
        v20 = ((uint64_t (*)(_QWORD))a1[8])(a1[10]);
        v21 = *(unsigned int *)(v18 + 5880);
        *(_QWORD *)(v18 + 16) = v20;
        *(_QWORD *)(v18 + 24) = 4 * v21;
        if (*(_QWORD *)(v18 + 80) && *(_QWORD *)(v18 + 96) && *(_QWORD *)(v18 + 104) && v20)
        {
          *(_QWORD *)(v18 + 5888) = v20 + (v21 & 0xFFFFFFFE);
          *(_QWORD *)(v18 + 5872) = v20 + 3 * v21;
          *(_DWORD *)(v18 + 180) = v12;
          *(_DWORD *)(v18 + 184) = a6;
          *(_BYTE *)(v18 + 60) = 8;
          sub_10001D16C((uint64_t)a1);
        }
        else
        {
          *(_DWORD *)(v18 + 8) = 666;
          a1[6] = "insufficient memory";
          sub_10001D080((uint64_t)a1);
        }
      }
    }
  }
}

uint64_t sub_10001D080(uint64_t a1)
{
  uint64_t v2;
  int v3;
  BOOL v4;

  if (!a1)
    return 4294967294;
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    return 4294967294;
  v3 = *(_DWORD *)(v2 + 8);
  v4 = (v3 - 69) > 0x2C || ((1 << (v3 - 69)) & 0x100400400011) == 0;
  if (v4 && v3 != 666 && v3 != 42)
    return 4294967294;
  if (*(_QWORD *)(v2 + 16))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v2 + 16));
    v2 = *(_QWORD *)(a1 + 56);
  }
  if (*(_QWORD *)(v2 + 104))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v2 + 104));
    v2 = *(_QWORD *)(a1 + 56);
  }
  if (*(_QWORD *)(v2 + 96))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v2 + 96));
    v2 = *(_QWORD *)(a1 + 56);
  }
  if (*(_QWORD *)(v2 + 80))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v2 + 80));
    v2 = *(_QWORD *)(a1 + 56);
  }
  (*(void (**)(_QWORD, uint64_t))(a1 + 72))(*(_QWORD *)(a1 + 80), v2);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3 == 113)
    return 4294967293;
  else
    return 0;
}

double sub_10001D16C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  double result;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 56);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 88) = 2;
        *(_DWORD *)(v2 + 40) = 0;
        *(_QWORD *)(v2 + 32) = *(_QWORD *)(v2 + 16);
        v3 = *(_DWORD *)(v2 + 44);
        if (v3 < 0)
        {
          v3 = -v3;
          *(_DWORD *)(v2 + 44) = v3;
        }
        if (v3)
          v4 = 42;
        else
          v4 = 113;
        *(_DWORD *)(v2 + 8) = v4;
        if (v3 == 2)
          v5 = sub_1000186BC(0, 0, 0);
        else
          v5 = sub_10000E5C4(0, 0, 0);
        *(_QWORD *)(a1 + 96) = v5;
        *(_DWORD *)(v2 + 64) = 0;
        sub_1000332B4(v2);
        *(_QWORD *)(v2 + 88) = 2 * *(unsigned int *)(v2 + 68);
        v6 = *(char **)(v2 + 104);
        v7 = 2 * (*(_DWORD *)(v2 + 116) - 1);
        *(_WORD *)&v6[v7] = 0;
        bzero(v6, v7);
        v8 = (unsigned __int16 *)((char *)&unk_10004CA20 + 16 * *(int *)(v2 + 180));
        v9 = v8[2];
        *(_DWORD *)(v2 + 188) = *v8;
        *(_DWORD *)(v2 + 192) = v9;
        v10 = v8[1];
        *(_DWORD *)(v2 + 172) = v8[3];
        *(_DWORD *)(v2 + 176) = v10;
        *(_QWORD *)(v2 + 136) = 0;
        *(_QWORD *)&result = 0x200000000;
        *(_QWORD *)(v2 + 164) = 0x200000000;
        *(_DWORD *)(v2 + 144) = 2;
        *(_QWORD *)(v2 + 152) = 0;
        *(_DWORD *)(v2 + 112) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_10001D2A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  BOOL v81;
  char v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  char *v119;
  size_t v120;
  int v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;

  if (!a1)
    return 4294967294;
  result = 4294967294;
  if (a2 <= 6)
  {
    v5 = *(_QWORD *)(a1 + 56);
    if (v5)
    {
      if (!*(_QWORD *)(a1 + 24)
        || !*(_QWORD *)a1 && *(_DWORD *)(a1 + 8)
        || (v6 = *(_DWORD *)(v5 + 8), (_DWORD)a2 != 4) && v6 == 666)
      {
        *(_QWORD *)(a1 + 48) = "stream error";
        return result;
      }
      if (!*(_DWORD *)(a1 + 32))
        goto LABEL_136;
      *(_QWORD *)v5 = a1;
      v7 = *(_DWORD *)(v5 + 64);
      *(_DWORD *)(v5 + 64) = a2;
      if (v6 == 42)
      {
        if (*(_DWORD *)(v5 + 44) == 2)
        {
          *(_QWORD *)(a1 + 96) = sub_1000186BC(0, 0, 0);
          v8 = *(_QWORD *)(v5 + 16);
          v9 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v9 + 1;
          *(_BYTE *)(v8 + v9) = 31;
          v10 = *(_QWORD *)(v5 + 16);
          v11 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v11 + 1;
          *(_BYTE *)(v10 + v11) = -117;
          v12 = *(_QWORD *)(v5 + 16);
          v13 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v13 + 1;
          *(_BYTE *)(v12 + v13) = 8;
          v14 = *(_QWORD *)(v5 + 48);
          if (!v14)
          {
            v52 = *(_QWORD *)(v5 + 16);
            v53 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v53 + 1;
            *(_BYTE *)(v52 + v53) = 0;
            v54 = *(_QWORD *)(v5 + 16);
            v55 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v55 + 1;
            *(_BYTE *)(v54 + v55) = 0;
            v56 = *(_QWORD *)(v5 + 16);
            v57 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v57 + 1;
            *(_BYTE *)(v56 + v57) = 0;
            v58 = *(_QWORD *)(v5 + 16);
            v59 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v59 + 1;
            *(_BYTE *)(v58 + v59) = 0;
            v60 = *(_QWORD *)(v5 + 16);
            v61 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v61 + 1;
            *(_BYTE *)(v60 + v61) = 0;
            v62 = *(_DWORD *)(v5 + 180);
            if (v62 == 9)
            {
              v63 = 2;
            }
            else if (*(int *)(v5 + 184) > 1 || v62 < 2)
            {
              v63 = 4;
            }
            else
            {
              v63 = 0;
            }
            v112 = *(_QWORD *)(v5 + 16);
            v113 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v113 + 1;
            *(_BYTE *)(v112 + v113) = v63;
            v114 = *(_QWORD *)(v5 + 16);
            v115 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v115 + 1;
            *(_BYTE *)(v114 + v115) = 7;
LABEL_127:
            *(_DWORD *)(v5 + 8) = 113;
            goto LABEL_128;
          }
          v15 = (*(_DWORD *)v14 != 0) | (2 * (*(_DWORD *)(v14 + 68) != 0)) | (4 * (*(_QWORD *)(v14 + 24) != 0)) | (8 * (*(_QWORD *)(v14 + 40) != 0)) | (16 * (*(_QWORD *)(v14 + 56) != 0));
          v16 = *(_QWORD *)(v5 + 16);
          v17 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v17 + 1;
          *(_BYTE *)(v16 + v17) = v15;
          v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8);
          v19 = *(_QWORD *)(v5 + 16);
          v20 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v20 + 1;
          *(_BYTE *)(v19 + v20) = v18;
          v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) >> 8;
          v22 = *(_QWORD *)(v5 + 16);
          v23 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v23 + 1;
          *(_BYTE *)(v22 + v23) = v21;
          v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) >> 16;
          v25 = *(_QWORD *)(v5 + 16);
          v26 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v26 + 1;
          *(_BYTE *)(v25 + v26) = v24;
          v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8) >> 24;
          v28 = *(_QWORD *)(v5 + 16);
          v29 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v29 + 1;
          *(_BYTE *)(v28 + v29) = v27;
          v30 = *(_DWORD *)(v5 + 180);
          if (v30 == 9)
          {
            v31 = 2;
          }
          else if (*(int *)(v5 + 184) > 1 || v30 < 2)
          {
            v31 = 4;
          }
          else
          {
            v31 = 0;
          }
          v65 = *(_QWORD *)(v5 + 16);
          v66 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v66 + 1;
          *(_BYTE *)(v65 + v66) = v31;
          v67 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 20);
          v68 = *(_QWORD *)(v5 + 16);
          v69 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v69 + 1;
          *(_BYTE *)(v68 + v69) = v67;
          v70 = *(_QWORD *)(v5 + 48);
          if (*(_QWORD *)(v70 + 24))
          {
            v71 = *(_DWORD *)(v70 + 32);
            v72 = *(_QWORD *)(v5 + 16);
            v73 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v73 + 1;
            *(_BYTE *)(v72 + v73) = v71;
            v74 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 32) >> 8;
            v75 = *(_QWORD *)(v5 + 16);
            v76 = *(unsigned int *)(v5 + 40);
            *(_DWORD *)(v5 + 40) = v76 + 1;
            *(_BYTE *)(v75 + v76) = v74;
            v70 = *(_QWORD *)(v5 + 48);
          }
          if (*(_DWORD *)(v70 + 68))
            *(_QWORD *)(a1 + 96) = sub_1000186BC(*(_QWORD *)(a1 + 96), *(int **)(v5 + 16), *(_DWORD *)(v5 + 40));
          *(_DWORD *)(v5 + 56) = 0;
          *(_DWORD *)(v5 + 8) = 69;
LABEL_49:
          v77 = *(_QWORD *)(v5 + 48);
          if (!*(_QWORD *)(v77 + 24))
            goto LABEL_68;
          v78 = *(_DWORD *)(v5 + 40);
          v79 = *(_DWORD *)(v5 + 56);
          while (1)
          {
            if (v79 >= *(unsigned __int16 *)(v77 + 32))
              goto LABEL_63;
            v80 = *(unsigned int *)(v5 + 40);
            if (*(_QWORD *)(v5 + 24) == v80)
            {
              if (*(_DWORD *)(v77 + 68))
                v81 = v80 > v78;
              else
                v81 = 0;
              if (v81)
                *(_QWORD *)(a1 + 96) = sub_1000186BC(*(_QWORD *)(a1 + 96), (int *)(*(_QWORD *)(v5 + 16) + v78), v80 - v78);
              sub_10001DD78((void *)a1);
              v80 = *(unsigned int *)(v5 + 40);
              v77 = *(_QWORD *)(v5 + 48);
              if (*(_QWORD *)(v5 + 24) == v80)
              {
                v78 = *(_DWORD *)(v5 + 40);
LABEL_63:
                if (*(_DWORD *)(v77 + 68))
                {
                  v84 = *(_DWORD *)(v5 + 40);
                  if (v84 > v78)
                  {
                    *(_QWORD *)(a1 + 96) = sub_1000186BC(*(_QWORD *)(a1 + 96), (int *)(*(_QWORD *)(v5 + 16) + v78), v84 - v78);
                    v77 = *(_QWORD *)(v5 + 48);
                  }
                }
                if (*(_DWORD *)(v5 + 56) == *(_DWORD *)(v77 + 32))
                {
                  *(_DWORD *)(v5 + 56) = 0;
LABEL_68:
                  *(_DWORD *)(v5 + 8) = 73;
LABEL_72:
                  if (*(_QWORD *)(v77 + 40))
                  {
                    v85 = *(_DWORD *)(v5 + 40);
                    do
                    {
                      v86 = *(unsigned int *)(v5 + 40);
                      v87 = *(_QWORD *)(v5 + 48);
                      if (*(_QWORD *)(v5 + 24) == v86)
                      {
                        if (*(_DWORD *)(v87 + 68))
                          v88 = v86 > v85;
                        else
                          v88 = 0;
                        if (v88)
                          *(_QWORD *)(a1 + 96) = sub_1000186BC(*(_QWORD *)(a1 + 96), (int *)(*(_QWORD *)(v5 + 16) + v85), v86 - v85);
                        sub_10001DD78((void *)a1);
                        v86 = *(unsigned int *)(v5 + 40);
                        if (*(_QWORD *)(v5 + 24) == v86)
                        {
                          v92 = 0;
                          goto LABEL_86;
                        }
                        v87 = *(_QWORD *)(v5 + 48);
                        v85 = *(_DWORD *)(v5 + 40);
                      }
                      v89 = *(_QWORD *)(v87 + 40);
                      v90 = *(unsigned int *)(v5 + 56);
                      *(_DWORD *)(v5 + 56) = v90 + 1;
                      LODWORD(v89) = *(unsigned __int8 *)(v89 + v90);
                      v91 = *(_QWORD *)(v5 + 16);
                      *(_DWORD *)(v5 + 40) = v86 + 1;
                      *(_BYTE *)(v91 + v86) = v89;
                    }
                    while ((_DWORD)v89);
                    v92 = 1;
                    LODWORD(v86) = v85;
LABEL_86:
                    if (*(_DWORD *)(*(_QWORD *)(v5 + 48) + 68))
                    {
                      v93 = *(_DWORD *)(v5 + 40);
                      if (v93 > v86)
                        *(_QWORD *)(a1 + 96) = sub_1000186BC(*(_QWORD *)(a1 + 96), (int *)(*(_QWORD *)(v5 + 16) + v86), v93 - v86);
                    }
                    if ((v92 & 1) != 0)
                    {
                      *(_DWORD *)(v5 + 56) = 0;
                      goto LABEL_91;
                    }
                    v6 = *(_DWORD *)(v5 + 8);
LABEL_93:
                    if (v6 != 91)
                      goto LABEL_114;
                  }
                  else
                  {
LABEL_91:
                    *(_DWORD *)(v5 + 8) = 91;
                  }
                  if (!*(_QWORD *)(*(_QWORD *)(v5 + 48) + 56))
                    goto LABEL_112;
                  v94 = *(_DWORD *)(v5 + 40);
                  while (1)
                  {
                    v95 = *(unsigned int *)(v5 + 40);
                    v96 = *(_QWORD *)(v5 + 48);
                    if (*(_QWORD *)(v5 + 24) == v95)
                    {
                      if (*(_DWORD *)(v96 + 68))
                        v97 = v95 > v94;
                      else
                        v97 = 0;
                      if (v97)
                        *(_QWORD *)(a1 + 96) = sub_1000186BC(*(_QWORD *)(a1 + 96), (int *)(*(_QWORD *)(v5 + 16) + v94), v95 - v94);
                      sub_10001DD78((void *)a1);
                      v95 = *(unsigned int *)(v5 + 40);
                      if (*(_QWORD *)(v5 + 24) == v95)
                      {
                        v101 = 0;
LABEL_108:
                        if (*(_DWORD *)(*(_QWORD *)(v5 + 48) + 68))
                        {
                          v102 = *(_DWORD *)(v5 + 40);
                          if (v102 > v95)
                            *(_QWORD *)(a1 + 96) = sub_1000186BC(*(_QWORD *)(a1 + 96), (int *)(*(_QWORD *)(v5 + 16) + v95), v102 - v95);
                        }
                        if ((v101 & 1) != 0)
                        {
LABEL_112:
                          *(_DWORD *)(v5 + 8) = 103;
                          goto LABEL_115;
                        }
                        v6 = *(_DWORD *)(v5 + 8);
LABEL_114:
                        if (v6 == 103)
                        {
LABEL_115:
                          if (!*(_DWORD *)(*(_QWORD *)(v5 + 48) + 68))
                            goto LABEL_127;
                          v103 = *(_DWORD *)(v5 + 40);
                          v104 = v103 + 2;
                          v105 = *(_QWORD *)(v5 + 24);
                          if (v105 < v104)
                          {
                            sub_10001DD78((void *)a1);
                            v103 = *(_DWORD *)(v5 + 40);
                            v105 = *(_QWORD *)(v5 + 24);
                            v104 = v103 + 2;
                          }
                          if (v105 >= v104)
                          {
                            v106 = *(_QWORD *)(a1 + 96);
                            v107 = *(_QWORD *)(v5 + 16);
                            *(_DWORD *)(v5 + 40) = v103 + 1;
                            *(_BYTE *)(v107 + v103) = v106;
                            v108 = *(_QWORD *)(a1 + 96) >> 8;
                            v109 = *(_QWORD *)(v5 + 16);
                            v110 = *(unsigned int *)(v5 + 40);
                            *(_DWORD *)(v5 + 40) = v110 + 1;
                            *(_BYTE *)(v109 + v110) = v108;
                            *(_QWORD *)(a1 + 96) = sub_1000186BC(0, 0, 0);
                            goto LABEL_127;
                          }
                        }
LABEL_128:
                        if (*(_DWORD *)(v5 + 40))
                        {
                          sub_10001DD78((void *)a1);
                          if (*(_DWORD *)(a1 + 32))
                            goto LABEL_130;
LABEL_155:
                          result = 0;
                          *(_DWORD *)(v5 + 64) = -1;
                          return result;
                        }
                        if (!*(_DWORD *)(a1 + 8) && (_DWORD)a2 != 4 && v7 >= (int)a2)
                        {
LABEL_136:
                          *(_QWORD *)(a1 + 48) = "buffer error";
                          return 4294967291;
                        }
LABEL_130:
                        v116 = *(_DWORD *)(v5 + 8);
                        v117 = *(_DWORD *)(a1 + 8);
                        if (v116 != 666)
                        {
                          if (!v117)
                            goto LABEL_138;
                          goto LABEL_139;
                        }
                        if (v117)
                          goto LABEL_136;
LABEL_138:
                        if (*(_DWORD *)(v5 + 164))
                        {
LABEL_139:
                          v118 = (*((uint64_t (**)(uint64_t, uint64_t))&unk_10004CA20
                                  + 2 * *(int *)(v5 + 180)
                                  + 1))(v5, a2);
                          if ((v118 & 0xFFFFFFFE) == 2)
                            *(_DWORD *)(v5 + 8) = 666;
                          if ((v118 & 0xFFFFFFFD) != 0)
                          {
                            if (v118 == 1)
                            {
                              if ((_DWORD)a2 == 1)
                              {
                                sub_10003349C(v5);
                              }
                              else
                              {
                                sub_100033368(v5, 0, 0, 0);
                                if ((_DWORD)a2 == 3)
                                {
                                  v119 = *(char **)(v5 + 104);
                                  v120 = 2 * (*(_DWORD *)(v5 + 116) - 1);
                                  *(_WORD *)&v119[v120] = 0;
                                  bzero(v119, v120);
                                }
                              }
                              sub_10001DD78((void *)a1);
                              if (!*(_DWORD *)(a1 + 32))
                                goto LABEL_155;
                            }
                            goto LABEL_153;
                          }
                          if (!*(_DWORD *)(a1 + 32))
                            goto LABEL_155;
                        }
                        else if ((_DWORD)a2)
                        {
                          if (v116 != 666)
                            goto LABEL_139;
LABEL_153:
                          if ((_DWORD)a2 == 4)
                          {
                            v121 = *(_DWORD *)(v5 + 44);
                            if (v121 < 1)
                              return 1;
                            v122 = *(_QWORD *)(a1 + 96);
                            if (v121 == 2)
                            {
                              v123 = *(_QWORD *)(v5 + 16);
                              v124 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v124 + 1;
                              *(_BYTE *)(v123 + v124) = v122;
                              v125 = *(_QWORD *)(a1 + 96) >> 8;
                              v126 = *(_QWORD *)(v5 + 16);
                              v127 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v127 + 1;
                              *(_BYTE *)(v126 + v127) = v125;
                              v128 = *(_QWORD *)(a1 + 96) >> 16;
                              v129 = *(_QWORD *)(v5 + 16);
                              v130 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v130 + 1;
                              *(_BYTE *)(v129 + v130) = v128;
                              v131 = *(_QWORD *)(a1 + 96) >> 24;
                              v132 = *(_QWORD *)(v5 + 16);
                              v133 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v133 + 1;
                              *(_BYTE *)(v132 + v133) = v131;
                              v134 = *(_QWORD *)(a1 + 16);
                              v135 = *(_QWORD *)(v5 + 16);
                              v136 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v136 + 1;
                              *(_BYTE *)(v135 + v136) = v134;
                              v137 = *(_QWORD *)(a1 + 16) >> 8;
                              v138 = *(_QWORD *)(v5 + 16);
                              v139 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v139 + 1;
                              *(_BYTE *)(v138 + v139) = v137;
                              v140 = *(_QWORD *)(a1 + 16) >> 16;
                              v141 = *(_QWORD *)(v5 + 16);
                              v142 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v142 + 1;
                              *(_BYTE *)(v141 + v142) = v140;
                              v143 = *(_QWORD *)(a1 + 16) >> 24;
                            }
                            else
                            {
                              v144 = v122 >> 16;
                              v145 = *(_QWORD *)(v5 + 16);
                              v146 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v146 + 1;
                              *(_BYTE *)(v145 + v146) = BYTE3(v122);
                              v147 = *(_QWORD *)(v5 + 16);
                              v148 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v148 + 1;
                              *(_BYTE *)(v147 + v148) = v144;
                              v143 = *(_QWORD *)(a1 + 96);
                              v149 = *(_QWORD *)(v5 + 16);
                              v150 = *(unsigned int *)(v5 + 40);
                              *(_DWORD *)(v5 + 40) = v150 + 1;
                              *(_BYTE *)(v149 + v150) = BYTE1(v143);
                            }
                            v151 = *(_QWORD *)(v5 + 16);
                            v152 = *(unsigned int *)(v5 + 40);
                            *(_DWORD *)(v5 + 40) = v152 + 1;
                            *(_BYTE *)(v151 + v152) = v143;
                            sub_10001DD78((void *)a1);
                            v153 = *(_DWORD *)(v5 + 44);
                            if (v153 >= 1)
                              *(_DWORD *)(v5 + 44) = -v153;
                            return *(_DWORD *)(v5 + 40) == 0;
                          }
                        }
                        return 0;
                      }
                      v96 = *(_QWORD *)(v5 + 48);
                      v94 = *(_DWORD *)(v5 + 40);
                    }
                    v98 = *(_QWORD *)(v96 + 56);
                    v99 = *(unsigned int *)(v5 + 56);
                    *(_DWORD *)(v5 + 56) = v99 + 1;
                    LODWORD(v98) = *(unsigned __int8 *)(v98 + v99);
                    v100 = *(_QWORD *)(v5 + 16);
                    *(_DWORD *)(v5 + 40) = v95 + 1;
                    *(_BYTE *)(v100 + v95) = v98;
                    if (!(_DWORD)v98)
                    {
                      v101 = 1;
                      LODWORD(v95) = v94;
                      goto LABEL_108;
                    }
                  }
                }
                v6 = *(_DWORD *)(v5 + 8);
LABEL_70:
                if (v6 == 73)
                {
                  v77 = *(_QWORD *)(v5 + 48);
                  goto LABEL_72;
                }
                goto LABEL_93;
              }
              v79 = *(_DWORD *)(v5 + 56);
              v78 = *(_DWORD *)(v5 + 40);
            }
            v82 = *(_BYTE *)(*(_QWORD *)(v77 + 24) + v79);
            v83 = *(_QWORD *)(v5 + 16);
            *(_DWORD *)(v5 + 40) = v80 + 1;
            *(_BYTE *)(v83 + v80) = v82;
            v79 = *(_DWORD *)(v5 + 56) + 1;
            *(_DWORD *)(v5 + 56) = v79;
            v77 = *(_QWORD *)(v5 + 48);
          }
        }
        if (*(int *)(v5 + 184) <= 1)
        {
          v33 = *(_DWORD *)(v5 + 180);
          if (v33 == 6)
            v34 = 128;
          else
            v34 = 192;
          if (v33 >= 6)
            v35 = v34;
          else
            v35 = 64;
          if (v33 >= 2)
            v32 = v35;
          else
            v32 = 0;
        }
        else
        {
          v32 = 0;
        }
        v36 = v32 | ((*(_DWORD *)(v5 + 72) << 12) - 30720);
        if (*(_DWORD *)(v5 + 156))
          v36 |= 0x20u;
        *(_DWORD *)(v5 + 8) = 113;
        v37 = *(_QWORD *)(v5 + 16);
        v38 = *(unsigned int *)(v5 + 40);
        *(_DWORD *)(v5 + 40) = v38 + 1;
        *(_BYTE *)(v37 + v38) = BYTE1(v36);
        v39 = *(_QWORD *)(v5 + 16);
        v40 = *(unsigned int *)(v5 + 40);
        *(_DWORD *)(v5 + 40) = v40 + 1;
        *(_BYTE *)(v39 + v40) = ((v36 % 0x1F) | v36) ^ 0x1F;
        if (*(_DWORD *)(v5 + 156))
        {
          v41 = *(_QWORD *)(a1 + 96);
          v42 = v41 >> 16;
          v43 = *(_QWORD *)(v5 + 16);
          v44 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v44 + 1;
          *(_BYTE *)(v43 + v44) = BYTE3(v41);
          v45 = *(_QWORD *)(v5 + 16);
          v46 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v46 + 1;
          *(_BYTE *)(v45 + v46) = v42;
          v47 = *(_QWORD *)(a1 + 96);
          v48 = *(_QWORD *)(v5 + 16);
          v49 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v49 + 1;
          *(_BYTE *)(v48 + v49) = BYTE1(v47);
          v50 = *(_QWORD *)(v5 + 16);
          v51 = *(unsigned int *)(v5 + 40);
          *(_DWORD *)(v5 + 40) = v51 + 1;
          *(_BYTE *)(v50 + v51) = v47;
        }
        *(_QWORD *)(a1 + 96) = sub_10000E5C4(0, 0, 0);
        v6 = *(_DWORD *)(v5 + 8);
      }
      if (v6 != 69)
        goto LABEL_70;
      goto LABEL_49;
    }
  }
  return result;
}

void *sub_10001DD78(void *result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;

  v1 = *((_QWORD *)result + 7);
  v2 = *(_DWORD *)(v1 + 40);
  v3 = *((_DWORD *)result + 8);
  if (v2 >= v3)
    v4 = v3;
  else
    v4 = v2;
  if ((_DWORD)v4)
  {
    v5 = result;
    result = memcpy(*((void **)result + 3), *(const void **)(v1 + 32), v4);
    v5[3] += v4;
    v6 = v5[7];
    *(_QWORD *)(v6 + 32) += v4;
    v5[5] += v4;
    *((_DWORD *)v5 + 8) -= v4;
    v7 = *(_DWORD *)(v6 + 40) - v4;
    *(_DWORD *)(v6 + 40) = v7;
    if (!v7)
      *(_QWORD *)(v6 + 32) = *(_QWORD *)(v6 + 16);
  }
  return result;
}

uint64_t sub_10001DE08(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  char *v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;

  if ((unint64_t)(*(_QWORD *)(a1 + 24) - 5) >= 0xFFFF)
    v4 = 0xFFFFLL;
  else
    v4 = *(_QWORD *)(a1 + 24) - 5;
  while (1)
  {
    v5 = *(_DWORD *)(a1 + 164);
    if (v5 <= 1)
    {
      sub_10001E828((unsigned int *)a1);
      v5 = *(_DWORD *)(a1 + 164);
      if (!(v5 | a2))
        return 0;
      if (!v5)
        break;
    }
    v6 = *(_DWORD *)(a1 + 156) + v5;
    *(_DWORD *)(a1 + 156) = v6;
    *(_DWORD *)(a1 + 164) = 0;
    if (a2 == 6)
    {
      *(_QWORD *)(a1 + 136) = v6;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 136);
      v8 = v7 + v4;
      if ((_DWORD)v6)
        v9 = v8 > v6;
      else
        v9 = 0;
      if (!v9)
      {
        *(_DWORD *)(a1 + 164) = v6 - v8;
        *(_DWORD *)(a1 + 156) = v8;
        if (v7 < 0)
          v10 = 0;
        else
          v10 = (char *)(*(_QWORD *)(a1 + 80) + v7);
        sub_10003370C(a1, v10, (v7 + v4) - v7, 0);
        *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
        sub_10001DD78(*(void **)a1);
        if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
          return 0;
        LODWORD(v6) = *(_DWORD *)(a1 + 156);
        v7 = *(_QWORD *)(a1 + 136);
      }
      if ((int)v6 - (int)v7 >= (*(_DWORD *)(a1 + 68) - 262))
      {
        v11 = v7 < 0 ? 0 : (char *)(*(_QWORD *)(a1 + 80) + v7);
        sub_10003370C(a1, v11, v6 - v7, 0);
        *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
        sub_10001DD78(*(void **)a1);
        if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
          return 0;
      }
    }
  }
  if (a2 == 6)
  {
    result = 0;
    *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 136);
    if (v13 < 0)
      v14 = 0;
    else
      v14 = (char *)(*(_QWORD *)(a1 + 80) + v13);
    sub_10003370C(a1, v14, *(unsigned int *)(a1 + 156) - v13, a2 == 4);
    *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
    sub_10001DD78(*(void **)a1);
    if (*(_DWORD *)(*(_QWORD *)a1 + 32))
    {
      if (a2 == 4)
        return 3;
      else
        return 1;
    }
    else
    {
      return 2 * (a2 == 4);
    }
  }
  return result;
}

uint64_t sub_10001DFD4(uint64_t a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  uint64_t result;
  uint64_t v41;
  char *v42;

  v4 = 0;
  while (1)
  {
    v5 = *(_DWORD *)(a1 + 164);
    if (v5 > 0x105)
    {
LABEL_7:
      v6 = *(_DWORD *)(a1 + 156);
      v7 = ((*(_DWORD *)(a1 + 112) << *(_DWORD *)(a1 + 128)) ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + v6 + 2)) & *(_DWORD *)(a1 + 124);
      *(_DWORD *)(a1 + 112) = v7;
      v8 = *(_QWORD *)(a1 + 104);
      v4 = *(unsigned __int16 *)(v8 + 2 * v7);
      *(_WORD *)(*(_QWORD *)(a1 + 96) + 2 * (*(_DWORD *)(a1 + 76) & v6)) = v4;
      *(_WORD *)(v8 + 2 * v7) = v6;
      goto LABEL_8;
    }
    sub_10001E828((unsigned int *)a1);
    v5 = *(_DWORD *)(a1 + 164);
    if (!a2 && v5 < 0x106)
      return 0;
    if (!v5)
      break;
    if (v5 >= 3)
      goto LABEL_7;
LABEL_8:
    if (a2 == 6)
    {
      ++*(_DWORD *)(a1 + 156);
      *(_DWORD *)(a1 + 164) = v5 - 1;
    }
    else
    {
      if (!v4)
        goto LABEL_12;
      v9 = *(_DWORD *)(a1 + 156) - v4;
      if (v9 > *(_DWORD *)(a1 + 68) - 262)
        goto LABEL_12;
      v11 = *(_DWORD *)(a1 + 184);
      if ((v11 & 0xFFFFFFFE) == 2)
      {
        if (v9 != 1 || v11 != 3)
        {
LABEL_12:
          v10 = *(_DWORD *)(a1 + 144);
          goto LABEL_22;
        }
        v10 = sub_10001EC04(a1, v4);
      }
      else
      {
        v10 = sub_10001EA08(a1, v4);
      }
      *(_DWORD *)(a1 + 144) = v10;
LABEL_22:
      if (v10 < 3)
      {
        v33 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(a1 + 156));
        v34 = *(unsigned int *)(a1 + 5884);
        *(_WORD *)(*(_QWORD *)(a1 + 5888) + 2 * v34) = 0;
        v35 = *(_QWORD *)(a1 + 5872);
        *(_DWORD *)(a1 + 5884) = v34 + 1;
        *(_BYTE *)(v35 + v34) = v33;
        ++*(_WORD *)(a1 + 4 * v33 + 196);
        v20 = *(_DWORD *)(a1 + 5884);
        v21 = *(_DWORD *)(a1 + 5880) - 1;
        --*(_DWORD *)(a1 + 164);
        v32 = *(_DWORD *)(a1 + 156) + 1;
LABEL_31:
        *(_DWORD *)(a1 + 156) = v32;
        goto LABEL_33;
      }
      v13 = *(_DWORD *)(a1 + 156) - *(_DWORD *)(a1 + 160);
      v14 = *(unsigned int *)(a1 + 5884);
      *(_WORD *)(*(_QWORD *)(a1 + 5888) + 2 * v14) = v13;
      v15 = *(_QWORD *)(a1 + 5872);
      *(_DWORD *)(a1 + 5884) = v14 + 1;
      *(_BYTE *)(v15 + v14) = v10 - 3;
      v16 = v13 - 1;
      v17 = a1 + 4 * byte_1000421F8[(v10 - 3)];
      ++*(_WORD *)(v17 + 1224);
      v18 = (v16 >> 7) + 256;
      if ((v16 & 0xFF00) == 0)
        v18 = v16;
      v19 = a1 + 4 * byte_100041FF8[v18];
      ++*(_WORD *)(v19 + 2488);
      v20 = *(_DWORD *)(a1 + 5884);
      v21 = *(_DWORD *)(a1 + 5880) - 1;
      v22 = *(_DWORD *)(a1 + 144);
      v23 = *(_DWORD *)(a1 + 164) - v22;
      *(_DWORD *)(a1 + 164) = v23;
      if (v22 <= *(_DWORD *)(a1 + 176) && v23 >= 3)
      {
        *(_DWORD *)(a1 + 144) = v22 - 1;
        v24 = *(_QWORD *)(a1 + 80);
        v26 = *(_DWORD *)(a1 + 124);
        v25 = *(_DWORD *)(a1 + 128);
        v28 = *(_QWORD *)(a1 + 96);
        v27 = *(_QWORD *)(a1 + 104);
        v29 = *(_DWORD *)(a1 + 76);
        v30 = *(_DWORD *)(a1 + 112);
        v31 = v22 - 2;
        v32 = *(_DWORD *)(a1 + 156) + 1;
        do
        {
          *(_DWORD *)(a1 + 156) = v32;
          v30 = ((v30 << v25) ^ *(unsigned __int8 *)(v24 + v32 + 2)) & v26;
          *(_DWORD *)(a1 + 112) = v30;
          v4 = *(unsigned __int16 *)(v27 + 2 * v30);
          *(_WORD *)(v28 + 2 * (v29 & v32)) = v4;
          *(_WORD *)(v27 + 2 * v30) = v32;
          *(_DWORD *)(a1 + 144) = v31--;
          ++v32;
        }
        while (v31 != -1);
        goto LABEL_31;
      }
      v32 = *(_DWORD *)(a1 + 156) + v22;
      *(_DWORD *)(a1 + 156) = v32;
      *(_DWORD *)(a1 + 144) = 0;
      v36 = *(_QWORD *)(a1 + 80);
      v37 = *(unsigned __int8 *)(v36 + v32);
      *(_DWORD *)(a1 + 112) = v37;
      *(_DWORD *)(a1 + 112) = ((v37 << *(_DWORD *)(a1 + 128)) ^ *(unsigned __int8 *)(v36 + v32 + 1)) & *(_DWORD *)(a1 + 124);
LABEL_33:
      if (v20 == v21)
      {
        v38 = *(_QWORD *)(a1 + 136);
        v39 = v38 < 0 ? 0 : (char *)(*(_QWORD *)(a1 + 80) + v38);
        sub_10003370C(a1, v39, v32 - v38, 0);
        *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
        sub_10001DD78(*(void **)a1);
        if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
          return 0;
      }
    }
  }
  if (a2 == 6)
  {
    result = 0;
    *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
  }
  else
  {
    v41 = *(_QWORD *)(a1 + 136);
    if (v41 < 0)
      v42 = 0;
    else
      v42 = (char *)(*(_QWORD *)(a1 + 80) + v41);
    sub_10003370C(a1, v42, *(unsigned int *)(a1 + 156) - v41, a2 == 4);
    *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
    sub_10001DD78(*(void **)a1);
    if (*(_DWORD *)(*(_QWORD *)a1 + 32))
    {
      if (a2 == 4)
        return 3;
      else
        return 1;
    }
    else
    {
      return 2 * (a2 == 4);
    }
  }
  return result;
}

uint64_t sub_10001E384(uint64_t a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned __int8 v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  v4 = 0;
  while (1)
  {
    v5 = *(_DWORD *)(a1 + 164);
    if (v5 <= 0x105)
      break;
LABEL_7:
    v6 = *(_DWORD *)(a1 + 156);
    v7 = ((*(_DWORD *)(a1 + 112) << *(_DWORD *)(a1 + 128)) ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + v6 + 2)) & *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a1 + 112) = v7;
    v8 = *(_QWORD *)(a1 + 104);
    v4 = *(unsigned __int16 *)(v8 + 2 * v7);
    *(_WORD *)(*(_QWORD *)(a1 + 96) + 2 * (*(_DWORD *)(a1 + 76) & v6)) = v4;
    *(_WORD *)(v8 + 2 * v7) = v6;
LABEL_8:
    if (a2 == 6)
    {
      ++*(_DWORD *)(a1 + 156);
      goto LABEL_10;
    }
    v9 = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a1 + 168) = v9;
    v10 = *(_DWORD *)(a1 + 160);
    v11 = 2;
    *(_DWORD *)(a1 + 144) = 2;
    *(_DWORD *)(a1 + 148) = v10;
    if (!v4)
      goto LABEL_30;
    if (v9 < *(_DWORD *)(a1 + 176))
    {
      v12 = *(_DWORD *)(a1 + 156) - v4;
      if (v12 <= *(_DWORD *)(a1 + 68) - 262)
      {
        v13 = *(_DWORD *)(a1 + 184);
        if ((v13 & 0xFFFFFFFE) == 2)
        {
          if (v12 != 1 || v13 != 3)
          {
            if (v13 != 1)
              goto LABEL_29;
LABEL_25:
            v11 = 2;
            *(_DWORD *)(a1 + 144) = 2;
            goto LABEL_29;
          }
          v11 = sub_10001EC04(a1, v4);
        }
        else
        {
          v11 = sub_10001EA08(a1, v4);
        }
        *(_DWORD *)(a1 + 144) = v11;
        if (v11 <= 5)
        {
          if (*(_DWORD *)(a1 + 184) != 1)
          {
            if (v11 != 3)
              goto LABEL_29;
            if ((*(_DWORD *)(a1 + 156) - *(_DWORD *)(a1 + 160)) <= 0x1000)
            {
              v11 = 3;
              goto LABEL_29;
            }
          }
          goto LABEL_25;
        }
      }
    }
LABEL_29:
    v9 = *(_DWORD *)(a1 + 168);
LABEL_30:
    v15 = v9 - 3;
    if (v9 < 3 || v11 > v9)
    {
      if (*(_DWORD *)(a1 + 152))
      {
        v33 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + (*(_DWORD *)(a1 + 156) - 1));
        v34 = *(unsigned int *)(a1 + 5884);
        *(_WORD *)(*(_QWORD *)(a1 + 5888) + 2 * v34) = 0;
        v35 = *(_QWORD *)(a1 + 5872);
        *(_DWORD *)(a1 + 5884) = v34 + 1;
        *(_BYTE *)(v35 + v34) = v33;
        ++*(_WORD *)(a1 + 4 * v33 + 196);
        if (*(_DWORD *)(a1 + 5884) == *(_DWORD *)(a1 + 5880) - 1)
        {
          v36 = *(_QWORD *)(a1 + 136);
          if (v36 < 0)
            v37 = 0;
          else
            v37 = (char *)(*(_QWORD *)(a1 + 80) + v36);
          sub_10003370C(a1, v37, *(unsigned int *)(a1 + 156) - v36, 0);
          *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
          sub_10001DD78(*(void **)a1);
        }
        ++*(_DWORD *)(a1 + 156);
        --*(_DWORD *)(a1 + 164);
        goto LABEL_51;
      }
      v38 = *(_DWORD *)(a1 + 156) + 1;
      *(_DWORD *)(a1 + 152) = 1;
      *(_DWORD *)(a1 + 156) = v38;
      v5 = *(_DWORD *)(a1 + 164);
LABEL_10:
      *(_DWORD *)(a1 + 164) = v5 - 1;
    }
    else
    {
      v16 = *(_DWORD *)(a1 + 156);
      v17 = v16 + *(_DWORD *)(a1 + 164);
      v18 = v16 + ~*(_DWORD *)(a1 + 148);
      v19 = *(unsigned int *)(a1 + 5884);
      *(_WORD *)(*(_QWORD *)(a1 + 5888) + 2 * v19) = v18;
      v20 = *(_QWORD *)(a1 + 5872);
      *(_DWORD *)(a1 + 5884) = v19 + 1;
      *(_BYTE *)(v20 + v19) = v15;
      v21 = v18 - 1;
      v22 = a1 + 4 * byte_1000421F8[v15];
      ++*(_WORD *)(v22 + 1224);
      v23 = (v21 >> 7) + 256;
      if ((v21 & 0xFF00) == 0)
        v23 = v21;
      v24 = v17 - 3;
      v28 = a1 + 4 * byte_100041FF8[v23];
      ++*(_WORD *)(v28 + 2488);
      v25 = *(_DWORD *)(a1 + 5884);
      v26 = *(_DWORD *)(a1 + 5880) - 1;
      LODWORD(v28) = *(_DWORD *)(a1 + 168);
      *(_DWORD *)(a1 + 164) = *(_DWORD *)(a1 + 164) - v28 + 1;
      *(_DWORD *)(a1 + 168) = v28 - 2;
      v27 = v28 - 3;
      LODWORD(v28) = *(_DWORD *)(a1 + 156) + 1;
      do
      {
        *(_DWORD *)(a1 + 156) = v28;
        if (v28 <= v24)
        {
          v29 = ((*(_DWORD *)(a1 + 112) << *(_DWORD *)(a1 + 128)) ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 80)
                                                                                       + (v28 + 2))) & *(_DWORD *)(a1 + 124);
          *(_DWORD *)(a1 + 112) = v29;
          v30 = *(_QWORD *)(a1 + 104);
          v4 = *(unsigned __int16 *)(v30 + 2 * v29);
          *(_WORD *)(*(_QWORD *)(a1 + 96) + 2 * (*(_DWORD *)(a1 + 76) & v28)) = v4;
          *(_WORD *)(v30 + 2 * v29) = v28;
        }
        *(_DWORD *)(a1 + 168) = v27--;
        v28 = (v28 + 1);
      }
      while (v27 != -1);
      *(_DWORD *)(a1 + 144) = 2;
      *(_DWORD *)(a1 + 152) = 0;
      *(_DWORD *)(a1 + 156) = v28;
      if (v25 == v26)
      {
        v31 = *(_QWORD *)(a1 + 136);
        if (v31 < 0)
          v32 = 0;
        else
          v32 = (char *)(*(_QWORD *)(a1 + 80) + v31);
        sub_10003370C(a1, v32, v28 - v31, 0);
        *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
        sub_10001DD78(*(void **)a1);
LABEL_51:
        if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
          return 0;
      }
    }
  }
  sub_10001E828((unsigned int *)a1);
  v5 = *(_DWORD *)(a1 + 164);
  if (!a2 && v5 < 0x106)
    return 0;
  if (v5)
  {
    if (v5 < 3)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (a2 == 6)
  {
    result = 0;
    *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
  }
  else
  {
    if (*(_DWORD *)(a1 + 152))
    {
      v40 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 80) + (*(_DWORD *)(a1 + 156) - 1));
      v41 = *(unsigned int *)(a1 + 5884);
      *(_WORD *)(*(_QWORD *)(a1 + 5888) + 2 * v41) = 0;
      v42 = *(_QWORD *)(a1 + 5872);
      *(_DWORD *)(a1 + 5884) = v41 + 1;
      *(_BYTE *)(v42 + v41) = v40;
      ++*(_WORD *)(a1 + 4 * v40 + 196);
      *(_DWORD *)(a1 + 152) = 0;
    }
    v43 = *(_QWORD *)(a1 + 136);
    if (v43 < 0)
      v44 = 0;
    else
      v44 = (char *)(*(_QWORD *)(a1 + 80) + v43);
    sub_10003370C(a1, v44, *(unsigned int *)(a1 + 156) - v43, a2 == 4);
    *(_QWORD *)(a1 + 136) = *(unsigned int *)(a1 + 156);
    sub_10001DD78(*(void **)a1);
    if (*(_DWORD *)(*(_QWORD *)a1 + 32))
    {
      if (a2 == 4)
        return 3;
      else
        return 1;
    }
    else
    {
      return 2 * (a2 == 4);
    }
  }
  return result;
}

unsigned int *sub_10001E828(unsigned int *result)
{
  unsigned int *v1;
  size_t v2;
  unsigned int v3;
  int32x2_t v4;
  unsigned int v5;
  size_t v6;
  int32x2_t v7;
  uint64_t v8;
  _WORD *v9;
  unsigned int v10;
  BOOL v11;
  __int16 v12;
  _WORD *v13;
  int v14;
  unsigned int v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v1 = result;
  v2 = result[17];
  v3 = result[41];
  v4 = vdup_n_s32(v2);
  do
  {
    v5 = v1[39];
    LODWORD(v6) = v1[22] - (v3 + v5);
    if (v5 >= (_DWORD)v2 - 262 + v1[17])
    {
      result = (unsigned int *)memcpy(*((void **)v1 + 10), (const void *)(*((_QWORD *)v1 + 10) + v2), v2);
      v7 = vsub_s32(*(int32x2_t *)(v1 + 39), v4);
      *(int32x2_t *)(v1 + 39) = v7;
      *((_QWORD *)v1 + 17) -= v2;
      v8 = v1[29];
      v9 = (_WORD *)(*((_QWORD *)v1 + 13) + 2 * v8 - 2);
      do
      {
        v10 = (unsigned __int16)*v9;
        v11 = v10 >= v2;
        v12 = v10 - v2;
        if (!v11)
          v12 = 0;
        *v9-- = v12;
        LODWORD(v8) = v8 - 1;
      }
      while ((_DWORD)v8);
      v13 = (_WORD *)(*((_QWORD *)v1 + 12) + 2 * v2 - 2);
      v14 = v2;
      do
      {
        v15 = (unsigned __int16)*v13;
        v11 = v15 >= v2;
        v16 = v15 - v2;
        if (!v11)
          v16 = 0;
        *v13-- = v16;
        --v14;
      }
      while (v14);
      LODWORD(v6) = v2 + v6;
      v5 = v7.i32[0];
    }
    v17 = *(_QWORD *)v1;
    v18 = *(_DWORD *)(*(_QWORD *)v1 + 8);
    if (!v18)
      break;
    v19 = v1[41];
    if (v18 >= v6)
      v6 = v6;
    else
      v6 = v18;
    if (!(_DWORD)v6)
      goto LABEL_23;
    v20 = *((_QWORD *)v1 + 10);
    *(_DWORD *)(v17 + 8) = v18 - v6;
    v21 = *(_DWORD *)(*(_QWORD *)(v17 + 56) + 44);
    if (v21 == 2)
    {
      v22 = sub_1000186BC(*(_QWORD *)(v17 + 96), *(int **)v17, v6);
      goto LABEL_21;
    }
    if (v21 == 1)
    {
      v22 = sub_10000E5C4(*(_QWORD *)(v17 + 96), *(unsigned __int8 **)v17, v6);
LABEL_21:
      *(_QWORD *)(v17 + 96) = v22;
    }
    result = (unsigned int *)memcpy((void *)(v20 + v5 + v19), *(const void **)v17, v6);
    *(_QWORD *)v17 += v6;
    *(_QWORD *)(v17 + 16) += v6;
    LODWORD(v19) = v1[41];
LABEL_23:
    v3 = v19 + v6;
    v1[41] = v19 + v6;
    if ((v19 + v6) >= 3)
    {
      v23 = *((_QWORD *)v1 + 10);
      v24 = v1[39];
      v25 = *(unsigned __int8 *)(v23 + v24);
      v1[28] = v25;
      v1[28] = ((v25 << v1[32]) ^ *(unsigned __int8 *)(v23 + (v24 + 1))) & v1[31];
      if (v3 > 0x105)
        return result;
    }
  }
  while (*(_DWORD *)(*(_QWORD *)v1 + 8));
  return result;
}

uint64_t sub_10001EA08(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;

  v2 = *(_DWORD *)(a1 + 172);
  v3 = *(int *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(unsigned int *)(a1 + 156);
  v6 = (unsigned __int8 *)(v4 + v5);
  v7 = *(_DWORD *)(a1 + 68) - 262;
  v8 = v5 >= v7;
  v9 = v5 - v7;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_DWORD *)(a1 + 76);
  v12 = *(_DWORD *)(a1 + 164);
  v13 = v6[v3 - 1];
  v14 = v6[v3];
  v15 = *(_DWORD *)(a1 + 192);
  if (v3 >= *(_DWORD *)(a1 + 188))
    v2 >>= 2;
  if (v15 >= v12)
    v15 = *(_DWORD *)(a1 + 164);
  while (1)
  {
    v16 = (unsigned __int8 *)(v4 + a2);
    if (v16[(int)v3] != v14 || v16[(int)v3 - 1] != v13 || *v16 != *v6 || v16[1] != v6[1])
      goto LABEL_32;
    v17 = 0;
    while (1)
    {
      v18 = &v6[v17];
      if (v6[v17 + 3] != v16[v17 + 3])
      {
        v24 = (_DWORD)v18 + 3;
        goto LABEL_29;
      }
      if (v18[4] != v16[v17 + 4])
      {
        v24 = (_DWORD)v6 + v17 + 4;
        goto LABEL_29;
      }
      v19 = &v6[v17];
      if (v6[v17 + 5] != v16[v17 + 5])
      {
        v24 = (_DWORD)v19 + 5;
        goto LABEL_29;
      }
      if (v19[6] != v16[v17 + 6])
      {
        v24 = (_DWORD)v6 + v17 + 6;
        goto LABEL_29;
      }
      v20 = &v6[v17];
      if (v6[v17 + 7] != v16[v17 + 7])
      {
        v24 = (_DWORD)v20 + 7;
        goto LABEL_29;
      }
      if (v20[8] != v16[v17 + 8])
      {
        v24 = (_DWORD)v6 + v17 + 8;
        goto LABEL_29;
      }
      v21 = &v6[v17];
      v22 = &v16[v17];
      if (v6[v17 + 9] != v16[v17 + 9])
        break;
      v23 = v17 + 2;
      v17 += 8;
      if (v23 > 0xF9 || v21[10] != v22[10])
      {
        v24 = (_DWORD)v6 + v17 + 2;
        goto LABEL_29;
      }
    }
    v24 = (_DWORD)v21 + 9;
LABEL_29:
    v25 = v24 - ((_DWORD)v6 + 258);
    v26 = v24 - (_DWORD)v6;
    if (v26 <= (int)v3)
      goto LABEL_32;
    *(_DWORD *)(a1 + 160) = a2;
    if (v26 >= (int)v15)
      break;
    v13 = v6[v25 + 257];
    v14 = v6[v26];
    LODWORD(v3) = v26;
LABEL_32:
    a2 = *(unsigned __int16 *)(v10 + 2 * (a2 & v11));
    --v2;
    if (v9 >= a2 || v2 == 0)
      goto LABEL_37;
  }
  LODWORD(v3) = v26;
LABEL_37:
  if (v3 >= v12)
    return v12;
  else
    return v3;
}

uint64_t sub_10001EC04(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v16;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = (unsigned __int8 *)(v2 + *(unsigned int *)(a1 + 156));
  v4 = (unsigned __int8 *)(v2 + a2);
  if (*v4 != *v3 || v4[1] != v3[1])
    return 2;
  v5 = 0;
  v6 = (_DWORD)v3 + 258;
  while (1)
  {
    v7 = &v3[v5];
    if (v3[v5 + 3] != v4[v5 + 3])
    {
      v13 = (_DWORD)v7 + 3;
      goto LABEL_21;
    }
    if (v7[4] != v4[v5 + 4])
    {
      v13 = (_DWORD)v3 + v5 + 4;
      goto LABEL_21;
    }
    v8 = &v3[v5];
    if (v3[v5 + 5] != v4[v5 + 5])
    {
      v13 = (_DWORD)v8 + 5;
      goto LABEL_21;
    }
    if (v8[6] != v4[v5 + 6])
    {
      v13 = (_DWORD)v3 + v5 + 6;
      goto LABEL_21;
    }
    v9 = &v3[v5];
    if (v3[v5 + 7] != v4[v5 + 7])
    {
      v13 = (_DWORD)v9 + 7;
      goto LABEL_21;
    }
    if (v9[8] != v4[v5 + 8])
    {
      v13 = (_DWORD)v3 + v5 + 8;
      goto LABEL_21;
    }
    v10 = &v3[v5];
    v11 = &v4[v5];
    if (v3[v5 + 9] != v4[v5 + 9])
      break;
    v12 = v5 + 2;
    v5 += 8;
    if (v12 > 0xF9 || v10[10] != v11[10])
    {
      v13 = (_DWORD)v3 + v5 + 2;
      goto LABEL_21;
    }
  }
  v13 = (_DWORD)v10 + 9;
LABEL_21:
  v14 = v13 - v6 + 258;
  if (v14 < 3)
    return 2;
  *(_DWORD *)(a1 + 160) = a2;
  v16 = *(_DWORD *)(a1 + 164);
  if (v14 >= v16)
    return v16;
  else
    return v14;
}

uint64_t sub_10001ED64(int a1, unsigned __int16 *a2, unsigned int a3, _WORD **a4, unsigned int *a5, _WORD *a6)
{
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t i;
  int v15;
  uint64_t j;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t k;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  _BYTE *v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  _WORD *v31;
  char v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  int v38;
  unsigned int v39;
  _WORD *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  __int16 v44;
  int v45;
  unsigned int v46;
  int v47;
  char v48;
  _WORD *v49;
  uint64_t v50;
  _WORD *v51;
  unsigned int v52;
  unsigned int v53;
  _WORD v54[16];
  _OWORD v55[2];

  memset(v55, 0, sizeof(v55));
  if (a3)
  {
    v7 = a3;
    v8 = a2;
    do
    {
      v9 = *v8++;
      ++*((_WORD *)v55 + v9);
      --v7;
    }
    while (v7);
  }
  v10 = *a5;
  v11 = 15;
  while (!*((_WORD *)v55 + v11))
  {
    if (!--v11)
    {
      v12 = *a4;
      *a4 += 2;
      *v12 = 320;
      v12[1] = 0;
      v13 = *a4;
      *a4 += 2;
      *v13 = 320;
      v13[1] = 0;
      v10 = 1;
LABEL_77:
      result = 0;
      *a5 = v10;
      return result;
    }
  }
  if (v10 >= v11)
    v10 = v11;
  for (i = 1; i != 16; ++i)
  {
    if (*((_WORD *)v55 + i))
      break;
  }
  if (v10 <= i)
    v10 = i;
  v15 = 1;
  for (j = 2; j != 32; j += 2)
  {
    v15 = 2 * v15 - *(unsigned __int16 *)((char *)v55 + j);
    if (v15 < 0)
      return 0xFFFFFFFFLL;
  }
  if (!v15 || (result = 0xFFFFFFFFLL, a1) && v11 == 1)
  {
    v18 = 0;
    v19 = 0;
    v54[1] = 0;
    do
    {
      v19 += *(unsigned __int16 *)((char *)v55 + v18 * 2 + 2);
      v54[v18 + 2] = v19;
      ++v18;
    }
    while (v18 != 14);
    if (a3)
    {
      for (k = 0; k != a3; ++k)
      {
        v21 = a2[k];
        if (a2[k])
        {
          v22 = (unsigned __int16)v54[v21];
          v54[v21] = v22 + 1;
          a6[v22] = k;
        }
      }
    }
    if (a1)
    {
      if (a1 == 1)
      {
        result = 1;
        if (v10 > 0xA)
          return result;
        v23 = &unk_100041986;
        v24 = &unk_1000419C4;
        v25 = 256;
      }
      else
      {
        LOBYTE(result) = 0;
        v23 = &unk_100041C04;
        v25 = -1;
        v24 = &unk_100041C44;
      }
    }
    else
    {
      LOBYTE(result) = 0;
      v25 = 19;
      v24 = a6;
      v23 = a6;
    }
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 1 << v10;
    v30 = (1 << v10) - 1;
    v31 = *a4;
    v32 = v10;
    v33 = -1;
    while (2)
    {
      v34 = 1 << v32;
      do
      {
        v35 = (unsigned __int16)a6[v26];
        if (v25 <= (int)v35)
        {
          if (v25 >= (int)v35)
          {
            LOWORD(v35) = 0;
            v36 = 96;
          }
          else
          {
            v36 = v24[2 * v35];
            LOWORD(v35) = v23[v35];
          }
        }
        else
        {
          v36 = 0;
        }
        v37 = i - v27;
        v38 = -1 << (i - v27);
        v39 = v34;
        do
        {
          v40 = &v31[2 * (v28 >> v27) + 2 * v38 + 2 * v39];
          *(_BYTE *)v40 = v36;
          *((_BYTE *)v40 + 1) = v37;
          v40[1] = v35;
          v39 += v38;
        }
        while (v39);
        v41 = 1 << (i - 1);
        do
        {
          v42 = v41;
          v41 >>= 1;
        }
        while ((v42 & v28) != 0);
        v43 = ((v42 - 1) & v28) + v42;
        if (v42)
          v28 = ((v42 - 1) & v28) + v42;
        else
          v28 = 0;
        ++v26;
        v44 = *((_WORD *)v55 + i) - 1;
        *((_WORD *)v55 + i) = v44;
        if (!v44)
        {
          if ((_DWORD)i == v11)
          {
            if (v28)
            {
              do
              {
                if (v27 && (v43 & v30) != v33)
                {
                  v27 = 0;
                  v31 = *a4;
                  LOBYTE(v11) = v10;
                  v37 = v10;
                }
                v51 = &v31[2 * (v43 >> v27)];
                *(_BYTE *)v51 = 64;
                *((_BYTE *)v51 + 1) = v37;
                v51[1] = 0;
                v52 = 1 << (v11 - 1);
                do
                {
                  v53 = v52;
                  v52 >>= 1;
                }
                while ((v53 & v43) != 0);
                if (!v53)
                  break;
                v43 = ((v53 - 1) & v43) + v53;
              }
              while (v43);
            }
            *a4 += 2 * v29;
            goto LABEL_77;
          }
          LODWORD(i) = a2[(unsigned __int16)a6[v26]];
        }
      }
      while (i <= v10 || (v28 & v30) == v33);
      if (!v27)
        v27 = v10;
      v32 = i - v27;
      v45 = 1 << (i - v27);
      if (i < v11)
      {
        v32 = v11 - v27;
        v46 = i;
        while (1)
        {
          v47 = v45 - *((unsigned __int16 *)v55 + v46);
          if (v47 < 1)
            break;
          v45 = 2 * v47;
          if (++v46 >= v11)
            goto LABEL_62;
        }
        v32 = v46 - v27;
LABEL_62:
        v45 = 1 << v32;
      }
      v29 += v45;
      if (v29 > 0x5AF)
        v48 = result;
      else
        v48 = 0;
      if ((v48 & 1) == 0)
      {
        v31 += 2 * v34;
        v49 = *a4;
        v50 = (uint64_t)&(*a4)[2 * (v28 & v30)];
        *(_BYTE *)v50 = v32;
        *(_BYTE *)(v50 + 1) = v10;
        *(_WORD *)(v50 + 2) = ((_DWORD)v31 - (_DWORD)v49) >> 2;
        v33 = v28 & v30;
        continue;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_10001F198(const char *a1, uint64_t *a2, int a3)
{
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v11;

  v11 = 0;
  v6 = strlen(a1);
  v7 = 0;
  if (v6)
  {
    if ((a1[v6 - 1] & 0x80000000) == 0 && a1[v6 - 1] - 48 <= 9)
    {
      asprintf(&v11, "%s%c", a1, a3);
      v7 = v11;
      if (!v11)
        sub_100038FF0();
    }
  }
  if (v7)
    v8 = v7;
  else
    v8 = (char *)a1;
  v9 = sub_100003808(v8, a2);
  free(v11);
  return v9;
}

uint64_t sub_10001F23C(const char *a1, _WORD *a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  unsigned __int8 *i;
  int v12;
  int v13;
  __int16 v14;
  mode_t v15;
  char v16;
  int v17;
  __int16 v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  char *__stringp;

  if (!a1)
    return 0;
  v3 = strdup(a1);
  __stringp = v3;
  if (!v3)
    return *__error();
  v4 = v3;
  while (2)
  {
    v5 = strsep(&__stringp, ",");
    if (!v5)
      break;
    v6 = 0;
    v7 = *v5;
    if ((v7 | 2) == 0x46)
      v8 = v5 + 1;
    else
      v8 = v5;
    if ((v7 | 2) == 0x46)
      v9 = *v5;
    else
      v9 = 0;
    v10 = v8 + 1;
    for (i = (unsigned __int8 *)(v8 + 2); ; ++i)
    {
      v12 = *(v10 - 1);
      if (v12 <= 102)
        break;
      switch(v12)
      {
        case 'g':
          v13 = 1080;
          break;
        case 'o':
          v13 = 7;
          break;
        case 'u':
          v13 = 2496;
          break;
        default:
          goto LABEL_69;
      }
LABEL_22:
      v6 |= v13;
      ++v10;
    }
    if (v12 > 96)
    {
      if (v12 != 97)
        goto LABEL_69;
      v13 = 511;
      goto LABEL_22;
    }
    if (v12 != 43 && v12 != 45 && v12 != 61)
    {
LABEL_69:
      v25 = 22;
      goto LABEL_70;
    }
    v14 = v6;
    if (!v6)
    {
      v15 = umask(0);
      umask(v15);
      v14 = ~v15;
    }
    v16 = *v10;
    if (!*v10)
      goto LABEL_66;
    v17 = 0;
    v18 = 0;
    v19 = v14 & 0x49;
    do
    {
      switch(v16)
      {
        case 'r':
          v17 |= v14 & 0x124;
          break;
        case 's':
          v17 |= v14 & 0xC00;
          break;
        case 't':
          v17 |= 0x200u;
          break;
        case 'u':
        case 'v':
          goto LABEL_69;
        case 'w':
          v17 |= v14 & 0x92;
          break;
        case 'x':
          v17 |= v19;
          break;
        default:
          if (v16 != 88)
            goto LABEL_69;
          v18 |= v19;
          break;
      }
      v20 = *i++;
      v16 = v20;
    }
    while (v20);
    if (!a2)
      goto LABEL_66;
    v21 = *(v10 - 1);
    if (v21 == 61)
    {
      if (v9)
      {
        if (v9 == 70)
        {
LABEL_62:
          v24 = v14 & 0x1FF;
          if (!v6)
            v24 = 4095;
          a2[107] = v24;
          goto LABEL_65;
        }
        if (v9 != 68)
          goto LABEL_66;
      }
      if (v6)
        a2[107] = v14 & 0x777;
      else
        a2[104] = 4095;
      a2[105] = v17;
      if (v9)
        goto LABEL_66;
      goto LABEL_62;
    }
    if (v21 == 45)
    {
      if (!v9 || v9 == 68)
      {
        a2[104] |= v17;
        v23 = ~(_WORD)v17;
        a2[105] &= ~(_WORD)v17;
        if (v9)
          goto LABEL_66;
      }
      else
      {
        if (v9 != 70)
          goto LABEL_66;
        v23 = ~(_WORD)v17;
      }
      a2[107] |= v17;
      LOWORD(v17) = a2[108] & v23;
LABEL_65:
      a2[108] = v17;
      goto LABEL_66;
    }
    if (v21 != 43)
      goto LABEL_69;
    if (!v9 || v9 == 68)
    {
      v22 = ~(_WORD)v17;
      a2[104] &= ~(_WORD)v17;
      a2[105] |= v17;
      a2[106] |= v18;
      if (!v9)
      {
LABEL_57:
        a2[107] &= v22;
        a2[108] |= v17;
        a2[109] |= v18;
      }
    }
    else if (v9 == 70)
    {
      v22 = ~(_WORD)v17;
      goto LABEL_57;
    }
LABEL_66:
    if (__stringp)
      continue;
    break;
  }
  v25 = 0;
LABEL_70:
  free(v4);
  return v25;
}

void *sub_10001F55C(int a1, char *const *a2, uint64_t (*a3)(uint64_t, _QWORD, char **), uint64_t a4)
{
  uint64_t v8;
  int v9;
  char **v10;
  uint64_t v11;
  __uint32_t v12;
  char *v13;
  char v14;
  int v15;
  char **v16;
  int v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v40;
  const char *v41;
  const char *v42;
  char *v43;
  int64_t v44;
  char *v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  const char *v63;
  uint64_t v64;
  size_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  NSObject *v90;
  int v91;
  char v92;
  int v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char *v99;
  int v100;
  char *__errstrp;
  uint64_t v102;
  _BYTE __endptr[12];
  __int16 v104;
  _QWORD v105[126];

  __errstrp = 0;
  v102 = 0;
  bzero(&unk_1000507E8, 0x260uLL);
  v94 = 0;
  v93 = 0;
  v98 = 0;
  v95 = 0;
  v100 = -1;
  dword_100050A14 = -1;
  v96 = 0;
  v97 = -1;
  dword_1000509E8 = -1;
  qword_1000508C8 = -1;
  qword_1000508D0 = -1;
  qword_1000509B0 = (uint64_t)__stderrp;
  dword_100050858 = 1;
  dword_1000507F0 = 29;
  while (1)
  {
    v8 = getopt_long(a1, a2, "0468B:CDEFHIKLOPRSVWabcde:f:ghklnopqrtuvxyz", (const option *)&off_10004CAC0, &v100);
    if ((_DWORD)v8 == -1)
      break;
    v9 = v8;
    if (!a3)
      goto LABEL_21;
    if (v100 == -1)
    {
      v10 = &off_10004CAC0;
      while (v10[2] || *((_DWORD *)v10 + 6) != (_DWORD)v8)
      {
        v13 = v10[4];
        v10 += 4;
        if (!v13)
        {
          v10 = 0;
          break;
        }
      }
      v14 = v8;
    }
    else
    {
      v10 = &(&off_10004CAC0)[4 * v100];
      v11 = *((unsigned int *)v10 + 6);
      if (v11 > 0x7F)
        v12 = __maskrune(*((_DWORD *)v10 + 6), 0x40000uLL);
      else
        v12 = _DefaultRuneLocale.__runetype[v11] & 0x40000;
      if (v12)
        v14 = v11;
      else
        v14 = 0;
    }
    v8 = a3(a4, v14, v10);
    v15 = v8 == 0;
    if ((int)v8 < 0)
      v15 = 2;
    if (v15 != 2)
    {
      if (v15)
        return 0;
LABEL_21:
      switch(v9)
      {
        case 0:
        case 176:
          goto LABEL_167;
        case 48:
          dword_1000509A0 = 1;
          goto LABEL_167;
        case 52:
          v16 = &off_100050000;
          v17 = 4;
          goto LABEL_27;
        case 54:
          v16 = &off_100050000;
          v17 = 6;
LABEL_27:
          *((_DWORD *)v16 + 646) = v17;
          goto LABEL_167;
        case 56:
        case 174:
          ++dword_1000508BC;
          goto LABEL_167;
        case 66:
          v18 = sub_100003808(optarg, &v102);
          if ((_DWORD)v18 == -1)
            sub_100039240(v18);
          if (v102 < 0)
            sub_100039268(v18);
          qword_1000509D0 = v102;
          goto LABEL_167;
        case 67:
          HIDWORD(v96) = 1;
          goto LABEL_167;
        case 68:
          qword_100050850 = 0x100000001;
          goto LABEL_167;
        case 69:
          dword_100050A40 = 1;
          goto LABEL_167;
        case 70:
          if (v93)
          {
            if (v93 != 1)
            {
              ++v93;
              goto LABEL_167;
            }
            v19 = "- .rsync-filter";
          }
          else
          {
            v19 = ": /.rsync-filter";
          }
          if (dword_1000509A0)
            v38 = 0;
          else
            v38 = 10;
          ++v93;
          if (sub_1000253C0(v19, 0, v38))
            sub_100039290();
LABEL_167:
          v100 = -1;
          break;
        case 72:
          dword_1000508B0 = 1;
          goto LABEL_167;
        case 73:
          ++dword_10005086C;
          goto LABEL_167;
        case 75:
          dword_100050838 = 1;
          goto LABEL_167;
        case 76:
          dword_100050828 = 1;
          goto LABEL_167;
        case 79:
          dword_100050868 = 1;
          goto LABEL_167;
        case 80:
          dword_100050814 = 1;
          ++dword_100050870;
          goto LABEL_167;
        case 82:
          ++dword_1000508A4;
          goto LABEL_167;
        case 83:
        case 145:
          ++dword_100050878;
          goto LABEL_167;
        case 84:
          free((void *)qword_100050A08);
          qword_100050A08 = (uint64_t)strdup(optarg);
          if (!qword_100050A08)
            sub_100039220();
          goto LABEL_167;
        case 86:
          printf("openrsync: protocol version %u\n", 29);
          puts("rsync version 2.6.9 compatible");
          exit(0);
        case 87:
          dword_1000509E8 = 1;
          goto LABEL_167;
        case 97:
          dword_100050808 = 1;
          qword_100050820 = 0x100000001;
          *(_QWORD *)&dword_10005083C = 0x100000001;
          LODWORD(v96) = 1;
          dword_100050844 = 1;
          qword_100050850 = 0x100000001;
          goto LABEL_167;
        case 98:
          ++dword_100050880;
          goto LABEL_167;
        case 99:
          dword_1000507F8 = 1;
          goto LABEL_167;
        case 100:
          dword_1000508A8 = 2;
          goto LABEL_167;
        case 101:
          qword_1000508E0 = (uint64_t)optarg;
          goto LABEL_167;
        case 102:
          if (dword_1000509A0)
            v20 = 0;
          else
            v20 = 10;
          v21 = sub_1000253C0(optarg, 0, v20);
          if ((_DWORD)v21 == -1)
            sub_1000392B8(v21);
          goto LABEL_167;
        case 103:
          dword_100050840 = 1;
          goto LABEL_167;
        case 104:
          if (a1 == 2)
            goto LABEL_322;
          ++dword_100050898;
          goto LABEL_167;
        case 107:
          dword_100050834 = 1;
          goto LABEL_167;
        case 108:
          dword_10005083C = 1;
          goto LABEL_167;
        case 110:
          dword_10005080C = 2;
          goto LABEL_167;
        case 111:
          dword_100050844 = 1;
          goto LABEL_167;
        case 112:
          HIDWORD(qword_100050820) = 1;
          goto LABEL_167;
        case 113:
          ++dword_100050A30;
          goto LABEL_167;
        case 114:
          LODWORD(v96) = 0;
          dword_100050808 = 1;
          goto LABEL_167;
        case 116:
          LODWORD(qword_100050820) = 1;
          goto LABEL_167;
        case 117:
          ++dword_10005087C;
          goto LABEL_167;
        case 118:
          ++dword_100050EEC;
          goto LABEL_167;
        case 120:
          ++dword_100050864;
          goto LABEL_167;
        case 121:
          dword_100050A2C = 1;
          goto LABEL_167;
        case 122:
          ++dword_100050A10;
          goto LABEL_167;
        case 128:
          qword_1000508F0 = (uint64_t)optarg;
          goto LABEL_167;
        case 129:
          qword_1000508E8 = (uint64_t)optarg;
          goto LABEL_167;
        case 130:
          qword_1000508D8 = (uint64_t)optarg;
          goto LABEL_167;
        case 131:
          v97 = strtonum(optarg, 0, 3600, (const char **)&__errstrp);
          if (__errstrp)
            sub_1000392E0((uint64_t)__errstrp);
          goto LABEL_167;
        case 132:
          dword_100050EF0 = strtonum(optarg, 0, 3600, (const char **)&__errstrp);
          if (__errstrp)
            sub_1000392E0((uint64_t)__errstrp);
          goto LABEL_167;
        case 133:
          v91 = sub_100006CE8(a1, a2, (uint64_t)&unk_1000507E8);
          exit(v91);
        case 134:
          v22 = sub_1000253C0(optarg, 1, 0);
          if ((_DWORD)v22 == -1)
            sub_100039308(v22);
          goto LABEL_167;
        case 135:
          qword_100050850 = 0;
          goto LABEL_167;
        case 136:
          v23 = sub_1000253C0(optarg, 2, 0);
          if ((_DWORD)v23 == -1)
            sub_100039330(v23);
          goto LABEL_167;
        case 137:
          v24 = optarg;
          if (dword_1000509A0)
            v25 = 0;
          else
            v25 = 10;
          v26 = 1;
          goto LABEL_156;
        case 138:
          v24 = optarg;
          if (dword_1000509A0)
            v25 = 0;
          else
            v25 = 10;
          v26 = 2;
LABEL_156:
          sub_1000253E0(v24, v26, v25);
          goto LABEL_167;
        case 139:
          if (dword_100050874 >= 2)
            sub_100039358((uint64_t)&v100, dword_100050874);
          v27 = 1;
          goto LABEL_94;
        case 140:
          if ((dword_100050874 & 0xFFFFFFFD) != 0)
            sub_100039358((uint64_t)&v100, dword_100050874);
          v27 = 2;
          goto LABEL_94;
        case 141:
          v27 = 3;
          if (dword_100050874 && dword_100050874 != 3)
            sub_100039358((uint64_t)&v100, dword_100050874);
LABEL_94:
          dword_100050874 = v27;
          if (v94 >= 0x14)
            sub_10003938C((uint64_t)&v100);
          *((_QWORD *)&unk_1000507E8 + v94++ + 34) = optarg;
          goto LABEL_167;
        case 142:
          v28 = sub_100003808(optarg, &v102);
          if ((_DWORD)v28 == -1)
            sub_1000393D0(v28);
          qword_1000508C8 = v102;
          goto LABEL_167;
        case 143:
          v29 = sub_100003808(optarg, &v102);
          if ((_DWORD)v29 == -1)
            sub_1000393E4(v29);
          qword_1000508D0 = v102;
          goto LABEL_167;
        case 144:
          dword_100050860 = 2;
          goto LABEL_167;
        case 146:
          qword_1000509B8 = (uint64_t)optarg;
          goto LABEL_167;
        case 147:
          ++dword_10005089C;
          goto LABEL_167;
        case 148:
          ++dword_1000508A0;
          goto LABEL_167;
        case 149:
          if (dword_100050848)
            goto LABEL_167;
          v30 = 1;
LABEL_166:
          dword_100050848 = v30;
          goto LABEL_167;
        case 150:
          if (dword_100050848 >= 2)
            sub_1000393BC(v8);
          v30 = 2;
          goto LABEL_166;
        case 151:
          if (dword_100050848 >= 2)
            sub_1000393BC(v8);
          v30 = 3;
          goto LABEL_166;
        case 152:
          if (dword_100050848 >= 2)
            sub_1000393BC(v8);
          v30 = 4;
          goto LABEL_166;
        case 153:
          if (dword_100050848 >= 2)
            sub_1000393BC(v8);
          v30 = 5;
          goto LABEL_166;
        case 154:
          v31 = sub_10001F198(optarg, &v102, 107);
          if ((_DWORD)v31 == -1)
            sub_1000393F8(v31);
          qword_1000509C0 = v102;
          goto LABEL_167;
        case 155:
          dword_1000508A4 = 0;
          LODWORD(v98) = v98 + 1;
          goto LABEL_167;
        case 156:
          dword_1000508A8 = 0;
          ++HIDWORD(v98);
          goto LABEL_167;
        case 157:
          qword_100050998 = (uint64_t)optarg;
          goto LABEL_167;
        case 158:
          ++dword_1000507F4;
          goto LABEL_167;
        case 159:
          dword_100050814 = 1;
          free((void *)qword_100050818);
          qword_100050818 = (uint64_t)strdup(optarg);
          if (!qword_100050818)
            sub_100039220();
          goto LABEL_167;
        case 160:
          if (*optarg)
          {
            *(_QWORD *)__endptr = 0;
            *__error() = 0;
            v32 = strtoll(optarg, (char **)__endptr, 0);
            v102 = v32;
            if (**(_BYTE **)__endptr)
              sub_100039464(v32);
            if (v32 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
              sub_10003940C(v32);
            if (v32 >= 0x80000000)
              sub_100039438(v32);
            if (!v32)
              LODWORD(v32) = time(0);
            dword_1000507FC = v32;
          }
          goto LABEL_167;
        case 161:
          if (sub_10001F23C(optarg, 0))
            errx(1, "--chmod=%s: invalid argument");
          qword_100050800 = (uint64_t)optarg;
          goto LABEL_167;
        case 162:
          free((void *)qword_100050888);
          qword_100050888 = (uint64_t)strdup(optarg);
          if (!qword_100050888)
            sub_100039220();
          goto LABEL_167;
        case 163:
          if (strchr(optarg, 47))
            errx(1, "--suffix cannot contain slashes: %s\n");
          free((void *)qword_100050890);
          qword_100050890 = (uint64_t)strdup(optarg);
          if (!qword_100050890)
            sub_100039220();
          goto LABEL_167;
        case 164:
          dword_10005082C = 1;
          goto LABEL_167;
        case 166:
          ++dword_100050A1C;
          goto LABEL_167;
        case 167:
          ++dword_100050A20;
          goto LABEL_167;
        case 168:
          qword_100050A00 = (uint64_t)optarg;
          goto LABEL_167;
        case 169:
          if (*optarg)
          {
            v99 = 0;
            v33 = strtoll(optarg, &v99, 0);
            if (*v99)
              sub_1000394C0(v33);
            v34 = v33;
            if ((v33 - 41) <= 0xFFFFFFF1)
              sub_10003948C(v33);
            if (v33 >= 0x1E)
            {
              if (dword_100050EE8)
              {
                v35 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__endptr = 136315650;
                  *(_QWORD *)&__endptr[4] = optarg;
                  v104 = 1024;
                  LODWORD(v105[0]) = 27;
                  WORD2(v105[0]) = 1024;
                  *(_DWORD *)((char *)v105 + 6) = 40;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "--protocol=%s: is not supported by this version of openrsync. min: %d, max: %d", __endptr, 0x18u);
                }
              }
              sub_10001C1CC("--protocol=%s: is not supported by this version of openrsync. min: %d, max: %d", optarg, 27, 40);
            }
            dword_1000507F0 = v34;
          }
          goto LABEL_167;
        case 170:
          qword_1000509F0 = (uint64_t)optarg;
          goto LABEL_167;
        case 171:
          goto LABEL_139;
        case 172:
          v95 = 1;
LABEL_139:
          qword_1000509F8 = (uint64_t)optarg;
          goto LABEL_167;
        case 173:
          qword_1000509A8 = (uint64_t)optarg;
          goto LABEL_167;
        case 175:
LABEL_322:
          sub_100020A9C(0);
        case 177:
          dword_100050A28 = atoi(optarg);
          goto LABEL_167;
        case 178:
          if (*optarg)
          {
            *(_QWORD *)__endptr = 0;
            *__error() = 0;
            v36 = strtoll(optarg, (char **)__endptr, 0);
            if (**(_BYTE **)__endptr)
              sub_100039568(v36);
            qword_100050A38 = (int)v36;
          }
          goto LABEL_167;
        case 179:
          ++dword_1000508C0;
          goto LABEL_167;
        case 180:
          if (*optarg)
          {
            *(_QWORD *)__endptr = 0;
            *__error() = 0;
            v37 = strtoll(optarg, (char **)__endptr, 0);
            if (**(_BYTE **)__endptr)
              sub_100039540(v37);
            if ((int)v37 <= -2)
              sub_1000394E8(v37);
            if ((int)v37 >= 10)
              sub_100039514(v37);
            dword_100050A14 = v37;
            if (!(_DWORD)v37)
              dword_100050A10 = 0;
          }
          goto LABEL_167;
        case 181:
          dword_100050A24 = 1;
          goto LABEL_167;
        default:
          sub_100020A9C(1);
      }
    }
  }
  if (dword_100050A30 >= 1)
    dword_100050EEC = 0;
  if (dword_100050A18 > 6 || ((1 << dword_100050A18) & 0x51) == 0)
    sub_100039004();
  if (dword_100050810)
  {
    if (qword_100050818)
      sub_10003922C(v8);
    dword_100050814 = 1;
  }
  else
  {
    v43 = (char *)qword_100050818;
    if (!dword_100050814 || qword_100050818)
    {
      if (!qword_100050818)
        goto LABEL_189;
    }
    else
    {
      v8 = (uint64_t)getenv("RSYNC_PARTIAL_DIR");
      if (!v8 || !*(_BYTE *)v8)
        goto LABEL_189;
      v43 = strdup((const char *)v8);
      qword_100050818 = (uint64_t)v43;
      if (!v43)
        sub_100039220();
    }
    if (!*v43 || !strcmp(v43, "."))
    {
      free(v43);
      qword_100050818 = 0;
    }
    else
    {
      v44 = strlen(v43) - 1;
      if (v44 >= 1)
      {
        v45 = &v43[v44];
        v46 = &v43[v44];
        do
        {
          v47 = *--v46;
          if (v47 != 47)
            break;
          *v45 = 0;
          v45 = v46;
        }
        while (v46 > v43);
      }
      v8 = sub_1000253C0(v43, 1, 0);
      if ((_DWORD)v8 == -1)
        errx(1, "syntax error in exclude: %s");
    }
  }
LABEL_189:
  if (dword_1000507F4)
    v40 = dword_1000509E8 < 1;
  else
    v40 = 1;
  if (!v40)
    sub_10003902C(v8);
  v41 = (const char *)qword_100050890;
  if (!qword_100050890)
  {
    if (qword_100050888)
      v42 = &byte_1000437D5;
    else
      v42 = "~";
    v41 = strdup(v42);
    qword_100050890 = (uint64_t)v41;
  }
  v48 = dword_100050880;
  if (dword_100050880 && dword_100050848 >= 2 && !dword_10005084C)
  {
    snprintf(__endptr, 0x400uLL, "P *%s", v41);
    v41 = (const char *)sub_1000253C0(__endptr, 0, 0);
    if ((_DWORD)v41 == -1)
      errx(1, "error adding protect rule: %s");
    v48 = dword_100050880;
  }
  if (v48 && !qword_100050888)
    dword_100050868 = 1;
  if (!qword_1000508E8)
    qword_1000508E8 = (uint64_t)"rsync";
  if (dword_100050EF0)
    v49 = 1000 * dword_100050EF0;
  else
    v49 = -1;
  dword_100050EF0 = v49;
  v50 = dword_100050F00;
  if (v97 > dword_100050F00)
    v50 = v97;
  if (v50)
    v51 = 1000 * v50;
  else
    v51 = -1;
  dword_100050F00 = v51;
  v52 = qword_100050998;
  if (!qword_100050998)
    goto LABEL_274;
  if (*(_BYTE *)qword_100050998 != 58)
  {
    if (sub_10002189C((const char *)qword_100050998))
    {
      v64 = v52 + 8;
      v65 = strcspn((const char *)(v52 + 8), ":/");
      v66 = strndup((const char *)(v52 + 8), v65);
      qword_1000509D8 = (uint64_t)v66;
      if (v66)
      {
        v61 = v66;
        if (*(_BYTE *)(v64 + v65) != 47)
        {
          v65 = strcspn((const char *)(v52 + 8), "/");
          if (!*(_BYTE *)(v64 + v65))
          {
            if (dword_100050EE8)
            {
              v90 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_1000391AC(v52, v90);
            }
            sub_10001BFE8("Missing path in --files-from: %s", v67, v68, v69, v70, v71, v72, v73, v52);
            goto LABEL_268;
          }
        }
        v62 = strdup((const char *)(v65 + v64 + 1));
        qword_1000509E0 = (uint64_t)v62;
        if (v62)
          goto LABEL_255;
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100039154();
        v75 = "malloc path";
        goto LABEL_315;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_266;
    }
    else
    {
      v76 = strchr((char *)v52, 58);
      if (!v76)
        goto LABEL_268;
      v77 = v76;
      v78 = strndup((const char *)v52, (size_t)&v76[-v52]);
      qword_1000509D8 = (uint64_t)v78;
      if (v78)
      {
        v61 = v78;
        v62 = strdup(v77 + 1);
        qword_1000509E0 = (uint64_t)v62;
        if (v62)
        {
LABEL_255:
          v79 = v62;
          if (dword_100050EE8)
          {
            v80 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__endptr = 136315394;
              *(_QWORD *)&__endptr[4] = v61;
              v104 = 2080;
              v105[0] = v79;
              _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "remote file for filesfrom: '%s' '%s'\n", __endptr, 0x16u);
              LOBYTE(v61) = qword_1000509D8;
            }
          }
          sub_10001BE54(1, "remote file for filesfrom: '%s' '%s'\n", v55, v56, v57, v58, v59, v60, (char)v61);
          goto LABEL_270;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100039180();
        v75 = "malloc hostspec path";
LABEL_315:
        sub_10001BFE8(v75, v74, v55, v56, v57, v58, v59, v60, v92);
        free((void *)qword_1000509D8);
        qword_1000509D8 = 0;
        goto LABEL_268;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_266;
    }
LABEL_265:
    sub_100039128();
LABEL_266:
    v63 = "malloc hostspec";
    goto LABEL_267;
  }
  v53 = strdup(&byte_1000437D5);
  qword_1000509D8 = (uint64_t)v53;
  if (!v53)
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_266;
    goto LABEL_265;
  }
  v61 = v53;
  v62 = strdup((const char *)(v52 + 1));
  qword_1000509E0 = (uint64_t)v62;
  if (v62)
    goto LABEL_255;
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100039154();
  v63 = "malloc path";
LABEL_267:
  sub_10001BFE8(v63, v54, v55, v56, v57, v58, v59, v60, v92);
LABEL_268:
  v41 = strdup((const char *)qword_100050998);
  qword_1000509E0 = (uint64_t)v41;
  if (!v41)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000390FC();
    sub_10001BFE8("strdup filesfrom no host", v81, v82, v83, v84, v85, v86, v87, v92);
    return 0;
  }
  qword_1000509D8 = 0;
LABEL_270:
  if ((_DWORD)v98)
  {
    if (HIDWORD(v98))
      goto LABEL_272;
LABEL_299:
    dword_1000508A8 = 1;
    if (!(_DWORD)v96)
      goto LABEL_274;
LABEL_273:
    dword_100050808 = 0;
    goto LABEL_274;
  }
  dword_1000508A4 = 1;
  if (!HIDWORD(v98))
    goto LABEL_299;
LABEL_272:
  if ((_DWORD)v96)
    goto LABEL_273;
LABEL_274:
  v88 = &unk_1000507E8;
  if (dword_1000508A4 && (_DWORD)v98)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000390D0();
    sub_10001C094("Cannot use --relative and --no-relative at the same time");
  }
  if (dword_1000508A8 && HIDWORD(v98))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000390A4();
    sub_10001C094("Cannot use --dirs and --no-dirs at the same time");
  }
  if (dword_100050848 == 1)
    dword_100050848 = 2;
  if (qword_1000509F8 && qword_1000509F0)
    sub_100039040((uint64_t)v41);
  if (dword_10005080C)
    qword_1000509F8 = 0;
  else
    dword_10005080C = v95 != 0;
  if (!dword_1000507EC && HIDWORD(v96))
  {
    if (sub_1000253C0("-C", 0, 0xAu))
      sub_10003907C();
    if (sub_1000253C0(":C", 0, 0xAu))
      sub_100039054();
  }
  return v88;
}

void sub_100020A9C(int a1)
{
  FILE **v2;
  FILE *v3;
  const char *v4;

  v2 = &__stdoutp;
  if (a1)
    v2 = &__stderrp;
  v3 = *v2;
  v4 = getprogname();
  fprintf(v3, "usage: %s [-0468BCDEFHIKLOPRSTWVabcdghklnopqrtuvxyz] [-e program] [-f filter]\n\t[--8-bit-output] [--address=sourceaddr]\n\t[--append] [--backup-dir=dir] [--bwlimit=limit] [--cache | --no-cache]\n\t[--compare-dest=dir] [--contimeout] [--copy-dest=dir] [--copy-unsafe-links]\n\t[--del | --delete-after | --delete-before | --delete-during]\n\t[--delay-updates] [--dirs] [--no-dirs]\n\t[--exclude] [--exclude-from=file]\n\t[--extended-attributes]\n\t[--existing] [--force] [--ignore-errors]\n\t[--ignore-existing] [--ignore-non-existing] [--include]\n\t[--include-from=file] [--inplace] [--keep-dirlinks] [--link-dest=dir]\n\t[--max-delete=NUM] [--max-size=SIZE] [--min-size=SIZE]\n\t[--modify-window=sec] [--no-motd] [--numeric-ids]\n\t[--out-format=FMT] [--partial] [--password-file=pwfile] [--port=portnumber]\n\t[--progress] [--protocol] [--read-batch=file]\n\t[--remove-source-files] [--rsync-path=program] [--safe-links] [--size-only]\n\t[--sockopts=sockopts] [--specials] [--suffix] [--super] [--timeout=seconds]\n\t[--only-write-batch=file | --write-batch=file]\n"
    "\tsource ... directory\n",
    v4);
  exit(a1);
}

void start(int a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  const char *v24;
  char **v25;
  char *v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  char *v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  const char **v40;
  const char *v41;
  char *v42;
  char *v43;
  char *v44;
  size_t v45;
  int v46;
  uint64_t v47;
  const char **v48;
  const char *v49;
  uint64_t v50;
  size_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  int v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  NSObject *v77;
  pid_t v78;
  pid_t v79;
  uint64_t v80;
  const char **v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char **v89;
  const char *v90;
  uint64_t v91;
  NSObject *v92;
  const char **v93;
  int v94;
  const char **v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  const char *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  const char *v111;
  uint8_t buf[4];
  __int128 v113;
  _DWORD *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;

  v132 = -1;
  setprogname(*a2);
  sub_10001BDD0((uint64_t)__stderrp);
  if (os_variant_has_internal_content("com.apple.rsync"))
  {
    dword_100050EE8 = 1;
  }
  else if (!dword_100050EE8)
  {
    goto LABEL_5;
  }
  qword_100050EF8 = (uint64_t)os_log_create("com.apple.rsync", "trace");
LABEL_5:
  setlocale(0, &byte_1000437D5);
  setlocale(2, &byte_1000437D5);
  setlocale(4, &byte_1000437D5);
  if (!sub_10001F55C(a1, (char *const *)a2, 0, 0)
    || (v4 = optind, v5 = (a1 - optind), !qword_1000509F0) && !dword_1000507EC && (int)v5 <= 1
    || (int)v5 < 1)
  {
    sub_100020A9C(1);
  }
  v131 = 0;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v114 = &dword_1000507E8;
  v6 = sub_10001C444(&v114, 0, 0);
  if ((v6 & 1) != 0)
    DWORD2(v124) = 1;
  if ((v6 & 2) != 0)
    HIDWORD(v124) = 1;
  v7 = (uint64_t)&a2[v4];
  if (dword_100050EE8)
  {
    v8 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109632;
      LODWORD(v113) = getpid();
      WORD2(v113) = 1024;
      *(_DWORD *)((char *)&v113 + 6) = DWORD2(v124);
      WORD5(v113) = 1024;
      HIDWORD(v113) = HIDWORD(v124);
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Printing(%d): itemize %d late %d", buf, 0x14u);
    }
  }
  v9 = getpid();
  v108 = DWORD2(v124);
  v109 = HIDWORD(v124);
  sub_10001BE54(2, "Printing(%d): itemize %d late %d", v10, v11, v12, v13, v14, v15, v9);
  sub_10002B450((uint64_t)off_1000506D8);
  if (dword_1000507EC)
  {
    if (dword_1000509E8 < 0)
      dword_1000509E8 = 0;
    v19 = sub_10002A170(off_1000506D8, &dword_1000507E8, v5, v7);
    exit(v19);
  }
  v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x1090040CD3CCCDCuLL);
  if (!v16)
    goto LABEL_31;
  v17 = (uint64_t)v16;
  v18 = v5 - 1;
  v16[3] = v18;
  if (v18)
  {
    v20 = malloc_type_calloc(v18, 8uLL, 0x10040436913F5uLL);
    *(_QWORD *)(v17 + 16) = v20;
    if (v20)
    {
      v21 = 0;
      while (1)
      {
        v22 = strdup(*(const char **)(v7 + 8 * v21));
        *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * v21) = v22;
        if (!v22)
          break;
        if (v18 == ++v21)
          goto LABEL_30;
      }
    }
LABEL_31:
    err(22, 0);
  }
  if (!qword_1000509F0)
    errx(1, "One argument without --read-batch not yet supported");
LABEL_30:
  v23 = strdup(*(const char **)(v7 + 8 * v18));
  *(_QWORD *)(v17 + 32) = v23;
  if (!v23)
    goto LABEL_31;
  v24 = v23;
  v25 = &off_100050000;
  if (qword_1000509F0)
  {
    if (v23[strcspn(v23, ":/")] == 58)
      errx(1, "rsync --read-batch destination must be local", v106);
LABEL_103:
    sub_10002B5B4((uint64_t)off_1000506D8, v17);
    if (v25[318])
    {
      v61 = sub_10000615C(off_1000506D8, (uint64_t)&dword_1000507E8, v17);
      exit(v61);
    }
    v59 = qword_1000509D8;
    if (qword_1000509D8)
    {
      if (!*(_QWORD *)(v17 + 8))
      {
        if (dword_100050EE8)
        {
          v60 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "Remote --files-from with a local transfer is not valid", buf, 2u);
          }
        }
        sub_10001BF64("Remote --files-from with a local transfer is not valid");
        goto LABEL_110;
      }
      if (dword_100050EE8)
      {
        v62 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&v113 = v59;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "--files-from host '%s'", buf, 0xCu);
          LOBYTE(v59) = qword_1000509D8;
        }
      }
      sub_10001BE54(1, "--files-from host '%s'", v53, v54, v55, v56, v57, v58, v59);
      if (*(_BYTE *)qword_1000509D8)
      {
        if (strcmp((const char *)qword_1000509D8, *(const char **)(v17 + 8)))
        {
          if (dword_100050EE8)
          {
            v77 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Cannot have different hostnames for --files-from and paths.", buf, 2u);
            }
          }
          sub_10001BF64("Cannot have different hostnames for --files-from and paths.");
LABEL_110:
          exit(2);
        }
      }
      else
      {
        if (dword_100050EE8)
        {
          v69 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "Inheriting --files-from remote side", buf, 2u);
          }
        }
        sub_10001BE54(1, "Inheriting --files-from remote side", v63, v64, v65, v66, v67, v68, v107);
      }
    }
    if (*(_QWORD *)(v17 + 8))
    {
      v70 = dword_1000509E8;
    }
    else
    {
      v70 = dword_1000509E8;
      if (!*(_DWORD *)(v17 + 44) && dword_1000509E8 < 0)
      {
        v71 = 1;
        goto LABEL_128;
      }
    }
    if ((v70 & 0x80000000) == 0)
    {
LABEL_129:
      if (*(_DWORD *)(v17 + 44) && !qword_1000508E0)
      {
        v72 = sub_10002B7FC((uint64_t)&dword_1000507E8, (int *)&v132, v17);
        if (!v72)
        {
          v72 = sub_10002CED0(off_1000506D8, (uint64_t)&dword_1000507E8, v132, v17);
          close(v132);
        }
        exit(v72);
      }
      if (socketpair(1, 1, 0, &v133) == -1)
        err(14, "socketpair");
      v73 = v133;
      v74 = fcntl(v133, 3, 0, v108, v109);
      if (fcntl(v73, 4, v74 | 4u) == -1 || (v75 = v134, v76 = fcntl(v134, 3, 0), fcntl(v75, 4, v76 | 4u) == -1))
        err(14, "fcntl");
      v78 = fork();
      if (v78)
      {
        v79 = v78;
        if (v78 == -1)
          err(14, "fork");
        sub_10002B5BC((uint64_t)off_1000506D8, v78);
        close(v134);
        if (*(_DWORD *)(v17 + 44))
          v94 = sub_10002CED0(off_1000506D8, (uint64_t)&dword_1000507E8, v133, v17);
        else
          v94 = sub_100002EB8(off_1000506D8, (uint64_t)&dword_1000507E8, v133, v17);
        v96 = v94;
        close(v133);
        if (waitpid(v79, &v131, 0) == -1)
          err(21, "waitpid");
        sub_10002B5BC((uint64_t)off_1000506D8, 0);
        if (!v96)
        {
          if ((v131 & 0x7F) == 0x7F)
          {
            v96 = 21;
          }
          else if ((v131 & 0x7F) == 0x1F)
          {
            v96 = 0;
          }
          else if ((v131 & 0x7F) != 0)
          {
            v96 = 16;
          }
          else
          {
            v96 = BYTE1(v131);
          }
        }
        free((void *)qword_1000509D8);
        free((void *)qword_1000509E0);
        exit(v96);
      }
      close(v133);
      v115 = 0u;
      v116 = 0u;
      v117 = 0u;
      v118 = 0u;
      v119 = 0u;
      v120 = 0u;
      v121 = 0u;
      v122 = 0u;
      v123 = 0u;
      v124 = 0u;
      v125 = 0u;
      v126 = 0u;
      v127 = 0u;
      v128 = 0u;
      v129 = 0u;
      v130 = 0u;
      v114 = &dword_1000507E8;
      DWORD1(v115) = dword_1000507FC;
      sub_10002B5D8(off_1000506D8, (uint64_t)&v114);
      sub_10002B410((uint64_t)off_1000506D8);
      v89 = (const char **)sub_10000E934(&v114, v17, 0);
      v90 = *v89;
      if (*v89)
      {
        v91 = 0;
        do
        {
          if (dword_100050EE8)
          {
            v92 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109378;
              LODWORD(v113) = v91;
              WORD2(v113) = 2080;
              *(_QWORD *)((char *)&v113 + 6) = v90;
              _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "exec[%d] = %s", buf, 0x12u);
            }
          }
          sub_10001BE54(1, "exec[%d] = %s", v83, v84, v85, v86, v87, v88, v91);
          v93 = &v89[v91++];
          v90 = v93[1];
        }
        while (v90);
      }
      if (dup2(v134, 0) == -1 || dup2(v134, 1) == -1)
        err(14, "dup2");
      if (execvp(*v89, (char *const *)v89) == -1)
      {
        if (dword_100050EE8)
        {
          v104 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          {
            v105 = *v89;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&v113 = v105;
            _os_log_error_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "exec on '%s'", buf, 0xCu);
          }
        }
        sub_10001BFE8("exec on '%s'", v97, v98, v99, v100, v101, v102, v103, (char)*v89);
      }
      _exit(14);
    }
    v71 = 0;
LABEL_128:
    dword_1000509E8 = v71;
    goto LABEL_129;
  }
  *(_DWORD *)(v17 + 40) = 0;
  if (v23[strcspn(v23, ":/")] == 58)
  {
    v26 = strdup(v24);
    *(_QWORD *)(v17 + 8) = v26;
    if (!v26)
      goto LABEL_31;
  }
  else
  {
    v26 = *(char **)(v17 + 8);
  }
  v27 = **(const char ***)(v17 + 16);
  if (v27[strcspn(v27, ":/")] == 58)
  {
    if (v26)
      errx(1, "both source and destination cannot be remote files", v106);
    *(_DWORD *)(v17 + 40) = 1;
    v26 = strdup(v27);
    *(_QWORD *)(v17 + 8) = v26;
    if (!v26)
      goto LABEL_31;
  }
  else if (!v26)
  {
    v28 = 0;
    if (!*(_DWORD *)(v17 + 44))
      goto LABEL_45;
    goto LABEL_78;
  }
  if (!strncasecmp(v26, "rsync://", 8uLL))
  {
    *(_DWORD *)(v17 + 44) = 1;
    v31 = v26 + 8;
    v32 = strchr(v26 + 8, 64);
    if (v32)
    {
      v37 = v32;
      v38 = strndup(v26 + 8, v32 - v31);
      *(_QWORD *)v17 = v38;
      if (!v38)
        goto LABEL_31;
      v31 = v37 + 1;
      v33 = strlen(v37 + 1);
    }
    else
    {
      v33 = strlen(v26) - 8;
    }
    memmove(v26, v31, v33 + 1);
    v39 = strchr(*(char **)(v17 + 8), 47);
    if (!v39)
      errx(1, "rsync protocol requires a module name", v106);
    *v39 = 0;
    v42 = v39 + 1;
    *(_QWORD *)(v17 + 48) = v42;
    v43 = strchr(v42, 47);
    if (v43)
      *v43 = 0;
    v44 = strchr(*(char **)(v17 + 8), 58);
    if (v44)
    {
      *v44 = 0;
      qword_1000508E8 = (uint64_t)(v44 + 1);
    }
  }
  else
  {
    v34 = strchr(v26, 58);
    if (!v34)
      __assert_rtn("fargs_parse", "main.c", 351, "cp != NULL");
    *v34 = 0;
    if (v34[1] == 58)
    {
      *(_DWORD *)(v17 + 44) = 1;
      v35 = v34 + 2;
      *(_QWORD *)(v17 + 48) = v35;
      v36 = strchr(v35, 47);
      if (v36)
        *v36 = 0;
    }
  }
  v28 = *(const char **)(v17 + 8);
  v45 = strlen(v28);
  if (!v45)
    errx(1, "empty remote host", v106);
  v26 = (char *)v45;
  if (!*(_DWORD *)(v17 + 44))
  {
    v30 = *(_DWORD *)(v17 + 40);
    if (v30 == 1)
    {
      v110 = *(const char **)(v17 + 8);
      v50 = *(_QWORD *)(v17 + 24);
      if (!v50)
      {
        v30 = 1;
        goto LABEL_93;
      }
      v81 = *(const char ***)(v17 + 16);
      do
      {
        v82 = *v81;
        if (v82[strcspn(*v81, ":/")] != 58 || sub_10002189C(v82))
        {
          if (!sub_10002189C(v82))
            errx(1, "local file in list of remote sources: %s");
          errx(1, "remote daemon in list of remote sources: %s");
        }
        ++v81;
        --v50;
      }
      while (v50);
      v30 = 1;
LABEL_63:
      v25 = &off_100050000;
LABEL_93:
      v28 = v110;
      goto LABEL_94;
    }
    if (v30)
    {
LABEL_94:
      if (!v28)
        goto LABEL_103;
      if (v30 != 1)
      {
        if (!v30)
        {
          if (!v26)
            __assert_rtn("fargs_parse", "main.c", 420, "hostlen > 0");
          v51 = strlen(*(const char **)(v17 + 32));
          memmove(*(void **)(v17 + 32), &v26[*(_QWORD *)(v17 + 32) + 1], v51 - (_QWORD)v26);
        }
        goto LABEL_103;
      }
      if (v26)
        goto LABEL_100;
      goto LABEL_192;
    }
LABEL_45:
    v29 = *(_QWORD *)(v17 + 24);
    if (!v29)
    {
      v30 = 0;
      goto LABEL_94;
    }
    v110 = v28;
    v40 = *(const char ***)(v17 + 16);
    do
    {
      v41 = *v40;
      if (v41[strcspn(*v40, ":/")] == 58)
        goto LABEL_90;
      ++v40;
      --v29;
    }
    while (v29);
    v30 = 0;
    goto LABEL_63;
  }
  if (!**(_BYTE **)(v17 + 48))
    errx(1, "empty remote module", v106);
  v111 = *(const char **)(v17 + 8);
  v46 = *(_DWORD *)(v17 + 40);
  if (v46 == 1)
  {
    v80 = *(_QWORD *)(v17 + 24);
    if (!v80)
    {
      v46 = 1;
      if (v28)
        goto LABEL_87;
LABEL_80:
      __assert_rtn("fargs_parse", "main.c", 428, "f->host != NULL");
    }
    v95 = *(const char ***)(v17 + 16);
    do
    {
      if (!sub_10002189C(*v95))
        errx(1, "non-remote daemon file in list of remote daemon sources: %s");
      ++v95;
      --v80;
    }
    while (v80);
    v46 = 1;
    goto LABEL_85;
  }
  if (v46)
    goto LABEL_86;
LABEL_78:
  v47 = *(_QWORD *)(v17 + 24);
  if (!v47)
  {
    v46 = 0;
    if (!v28)
      goto LABEL_80;
LABEL_87:
    if (v26)
    {
      if (v46 != 1)
      {
        sub_100021908(v17, *(char **)(v17 + 32), (size_t)v26);
        goto LABEL_103;
      }
LABEL_100:
      if (*(_QWORD *)(v17 + 24))
      {
        v52 = 0;
        do
          sub_100021908(v17, *(char **)(*(_QWORD *)(v17 + 16) + 8 * v52++), (size_t)v26);
        while (v52 < *(_QWORD *)(v17 + 24));
      }
      goto LABEL_103;
    }
LABEL_192:
    __assert_rtn("fargs_parse", "main.c", 429, "hostlen > 0");
  }
  v111 = v28;
  v48 = *(const char ***)(v17 + 16);
  do
  {
    v49 = *v48;
    if (v49[strcspn(*v48, ":/")] == 58)
LABEL_90:
      errx(1, "remote file in list of local sources: %s");
    ++v48;
    --v47;
  }
  while (v47);
  v46 = 0;
LABEL_85:
  v25 = &off_100050000;
  v28 = v111;
LABEL_86:
  if (v28)
    goto LABEL_87;
  goto LABEL_80;
}

BOOL sub_10002189C(const char *a1)
{
  size_t v2;

  if (!strncasecmp(a1, "rsync://", 8uLL))
    return 1;
  v2 = strcspn(a1, ":/");
  return a1[v2] == 58 && a1[v2 + 1] == 58;
}

void *sub_100021908(uint64_t a1, char *__s, size_t a3)
{
  size_t v6;
  char *v7;
  size_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  const char *v15;

  v6 = strlen(__s);
  if (*(_DWORD *)(a1 + 44))
  {
    if (!strncasecmp(__s, "rsync://", 8uLL))
    {
      v10 = __s + 8;
      v11 = strchr(__s + 8, 64);
      if (v11)
        v10 = v11 + 1;
      v12 = strchr(v10, 58);
      v13 = v10;
      if (v12)
      {
        *v12 = 0;
        v13 = v12 + 1;
      }
      v14 = strchr(v13 + 1, 47);
      if (v14)
        v15 = v14 + 1;
      else
        v15 = &v13[strlen(v13) - 1];
      if (!strncmp(v10, *(const char **)(a1 + 8), a3) && (!v10[a3] || v10[a3] == 47))
      {
        v8 = strlen(v15) + 1;
        v9 = __s;
        v7 = (char *)v15;
        return memmove(v9, v7, v8);
      }
    }
    else
    {
      if (!strncmp(__s, "::", 2uLL))
      {
        v7 = __s + 2;
        v8 = v6 - 1;
        goto LABEL_21;
      }
      if (!strncmp(__s, *(const char **)(a1 + 8), a3) && (!__s[a3] || __s[a3] == 58))
      {
        v7 = &__s[a3 + 2];
        v8 = v6 + ~a3;
LABEL_21:
        v9 = __s;
        return memmove(v9, v7, v8);
      }
    }
    goto LABEL_28;
  }
  if (*__s != 58)
  {
    if (!strncmp(__s, *(const char **)(a1 + 8), a3) && (!__s[a3] || __s[a3] == 58))
    {
      v7 = &__s[a3 + 1];
      v8 = v6 - a3;
      goto LABEL_21;
    }
LABEL_28:
    errx(1, "different remote host: %s", __s);
  }
  v7 = __s + 1;
  v9 = __s;
  v8 = v6;
  return memmove(v9, v7, v8);
}

void sub_100021AC8(uint64_t a1, const char *a2)
{
  errx(1, a2);
}

void sub_100021AD0()
{
  errx(22, 0);
}

char *sub_100021ADC(uint64_t a1, int a2)
{
  return sub_10000E8F0(a2);
}

void sub_100021AE8(uint64_t a1, const char *a2)
{
  err(1, a2);
}

char *sub_100021AF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unint64_t v10;
  char *v11;
  unsigned int v12;
  char *result;
  char *v14;
  uint64_t v15;
  char *v16[2];

  v16[0] = 0;
  v16[1] = &a9;
  if (vasprintf(v16, a2, &a9) == -1)
    sub_100039590();
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(char **)a1;
  if (*(_QWORD *)a1)
  {
    v12 = (_DWORD)v10 << (*(_DWORD *)(a1 + 8) + 2 >= v10);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    v12 = 32;
  }
  result = sub_1000036A8(v11, v10, v12, 8uLL);
  *(_QWORD *)a1 = result;
  if (!result)
    sub_100038FF0();
  v14 = v16[0];
  v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v12;
  *(_QWORD *)&result[8 * v15] = v14;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (v15 + 1)) = 0;
  return result;
}

uint64_t sub_100021B98(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)a1 && *(unsigned int *)(a1 + 8) >= a2)
    return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
  else
    return 0;
}

uint64_t sub_100021BBC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uid_t v18;
  uint64_t result;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  stat v27;

  memset(&v27, 0, sizeof(v27));
  if (fstat(a2, &v27) == -1)
  {
    if (dword_100050EE8)
    {
      v17 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000395A8(a1, v17, v4, v5, v6, v7, v8, v9);
    }
    sub_10001BFE8("%s: fstat", v3, v4, v5, v6, v7, v8, v9, a1);
    return 0;
  }
  if ((v27.st_mode & 7) != 0)
  {
    if (dword_100050EE8)
    {
      v10 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100039670(a1, v10, v11, v12, v13, v14, v15, v16);
    }
    sub_10001BF64("%s: strict mode violation (other permission bits set)");
    return 0;
  }
  v18 = geteuid();
  result = 1;
  if (!v18 && v27.st_uid)
  {
    if (dword_100050EE8)
    {
      v20 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003960C(a1, v20, v21, v22, v23, v24, v25, v26);
    }
    sub_10001BF64("%s: strict mode violation (root process, file not owned by root)");
    return 0;
  }
  return result;
}

uint64_t sub_100021D20(char *__s)
{
  char *v2;
  const char *v3;
  int v4;
  int v5;
  stat v7;

  v2 = __s;
  memset(&v7, 0, sizeof(v7));
  while (1)
  {
    v3 = &v2[strspn(v2, "/")];
    v2 = (char *)&v3[strcspn(v3, "/")];
    v4 = *v2;
    *v2 = 0;
    if (mkdir(__s, 0x1FFu))
    {
      v5 = *__error();
      if (stat(__s, &v7) == -1)
        goto LABEL_9;
      if ((v7.st_mode & 0xF000) != 0x4000)
        break;
    }
    if (!v4)
      return 0;
    *v2 = 47;
  }
  v5 = 20;
LABEL_9:
  *__error() = v5;
  return 0xFFFFFFFFLL;
}

uint64_t sub_100021E04(int a1, char *a2)
{
  return sub_100021E18(a1, a2, 1, 0, 0, 0);
}

uint64_t sub_100021E18(int a1, char *__s, int a3, const char *a4, __int16 a5, dev_t a6)
{
  size_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int *v15;
  int v16;
  uint64_t result;
  int v18;
  int v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _WORD __buf[16];

  v10 = strlen(__s);
  if (v10 <= 5)
    goto LABEL_6;
  v11 = 0;
  v12 = &__s[v10];
  do
  {
    v13 = v11;
    v14 = &v12[v11];
    if (&v12[v11] <= __s)
      break;
    --v11;
  }
  while (*(v14 - 1) == 88);
  if (-v13 >= 6)
  {
    v18 = 0x7FFFFFFF;
    v19 = a3 - 1;
    while (2)
    {
      v20 = v14;
      do
      {
        arc4random_buf(__buf, 0x20uLL);
        if (v20 == v12)
          break;
        v21 = 0;
        do
        {
          v20[v21] = aAbcdefghijklmn[__buf[v21] % 0x3Eu];
          v22 = (uint64_t)&v20[v21 + 1];
          v23 = v21 + 1;
          if (v21 > 0xE)
            break;
          ++v21;
        }
        while ((char *)v22 != v12);
        v20 += v23;
      }
      while ((char *)v22 != v12);
      switch(v19)
      {
        case 0:
          result = openat(a1, __s, 2562, 384);
          if ((_DWORD)result == -1)
            goto LABEL_30;
          break;
        case 1:
          result = mkdirat(a1, __s, 0x1C0u);
          if ((_DWORD)result)
            goto LABEL_30;
          break;
        case 2:
          result = symlinkat(a4, a1, __s);
          if ((_DWORD)result)
            goto LABEL_30;
          break;
        case 3:
          result = mkfifoat(a1, __s, 0x180u);
          if ((_DWORD)result)
            goto LABEL_30;
          break;
        case 4:
          if ((a5 & 0xBFFF) != 0x2000)
            goto LABEL_6;
          result = mknodat(a1, __s, a5 | 0x180, a6);
          if ((_DWORD)result)
            goto LABEL_30;
          break;
        case 5:
          result = sub_1000222C8((uint64_t)a4, (uint64_t)__s);
          if ((_DWORD)result)
          {
LABEL_30:
            if (*__error() != 17)
              return 0xFFFFFFFFLL;
            goto LABEL_31;
          }
          break;
        default:
LABEL_31:
          if (--v18)
            continue;
          v15 = __error();
          v16 = 17;
          goto LABEL_7;
      }
      break;
    }
  }
  else
  {
LABEL_6:
    v15 = __error();
    v16 = 22;
LABEL_7:
    *v15 = v16;
    return 0xFFFFFFFFLL;
  }
  return result;
}

char *sub_100022068(const char *a1, int a2, char *__s)
{
  if (sub_100021E18(a2, __s, 3, a1, 0, 0) == -1)
    return 0;
  else
    return __s;
}

char *sub_1000220A8(int a1, char *a2)
{
  if (sub_100021E18(a1, a2, 4, 0, 0, 0) == -1)
    return 0;
  else
    return a2;
}

char *sub_1000220E0(int a1, char *a2, __int16 a3, dev_t a4)
{
  if (sub_100021E18(a1, a2, 5, 0, a3, a4) == -1)
    return 0;
  else
    return a2;
}

char *sub_100022118(const char *a1, char *a2)
{
  if (sub_100021E18(0, a2, 6, a1, 0, 0) == -1)
    return 0;
  else
    return a2;
}

uint64_t sub_100022154(char **a1, char *__s, int a3, int a4)
{
  char *v6;
  const char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  char *v17;
  char v18;

  if (!a4)
  {
    if (a3 && (v17 = strrchr(__s, 47)) != 0)
    {
      result = asprintf(a1, "%.*s/.%s.XXXXXXXXXX", (_DWORD)v17 - (_DWORD)__s, __s, &__s[(int)v17 - (int)__s + 1]);
      if ((_DWORD)result != -1)
        return result;
      if (!dword_100050EE8)
        goto LABEL_19;
      v16 = qword_100050EF8;
      if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
    }
    else
    {
      result = asprintf(a1, ".%s.XXXXXXXXXX", __s);
      if ((_DWORD)result != -1)
        return result;
      if (!dword_100050EE8)
        goto LABEL_19;
      v16 = qword_100050EF8;
      if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_19;
    }
LABEL_18:
    sub_1000396D4(v16, v9, v10, v11, v12, v13, v14, v15);
LABEL_19:
    sub_10001BFE8("asprintf", v9, v10, v11, v12, v13, v14, v15, v18);
    *a1 = 0;
    return 0xFFFFFFFFLL;
  }
  v6 = strrchr(__s, 47);
  if (v6)
    v7 = v6 + 1;
  else
    v7 = __s;
  result = asprintf(a1, ".%s.XXXXXXXXXX", v7);
  if ((_DWORD)result == -1)
  {
    if (!dword_100050EE8)
      goto LABEL_19;
    v16 = qword_100050EF8;
    if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1000222C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  sockaddr v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _WORD v14[13];

  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  v12 = 0u;
  v9 = (sockaddr)0;
  v10 = 0u;
  v9.sa_family = 1;
  v3 = __strlcpy_chk(v9.sa_data, a1, 104, 104);
  if (v3 >= 0x68
    || v9.sa_data[v3] != 47 && (unint64_t)__strlcat_chk(v9.sa_data, "/", 104, 104) >= 0x68
    || (unint64_t)__strlcat_chk(v9.sa_data, a2, 104, 104) >= 0x68)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  result = socket(1, 1, 0);
  if ((_DWORD)result != -1)
  {
    v5 = result;
    v6 = fcntl(result, 3, 0);
    result = fcntl(v5, 4, v6 | 4u);
    if ((_DWORD)result != -1)
    {
      v7 = fcntl(v5, 1, 0);
      result = fcntl(v5, 2, v7 | 1u);
      if ((_DWORD)result != -1)
      {
        if (!bind(v5, &v9, 0x6Au))
        {
          close(v5);
          return 0;
        }
        v8 = *__error();
        close(v5);
        *__error() = v8;
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_10002246C(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  _BYTE *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  int i;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  int v32;
  char j;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  char v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  unsigned int v51;
  char *v52;
  char v53;
  char *v54;
  char v55;
  char v56;
  _BYTE *v57;
  int v58;
  unint64_t v59;

  v2 = *(_QWORD *)(result + 56);
  v3 = *(_QWORD *)result - 1;
  v4 = v3 + (*(_DWORD *)(result + 8) - 5);
  v5 = (_BYTE *)(*(_QWORD *)(result + 24) - 1);
  v6 = *(_DWORD *)(result + 32);
  v7 = (_DWORD)v5 - (a2 - v6);
  v8 = &v5[v6 - 257];
  v9 = *(_DWORD *)(v2 + 52);
  v10 = *(_DWORD *)(v2 + 56);
  v11 = *(_DWORD *)(v2 + 60);
  v12 = *(_QWORD *)(v2 + 64);
  v13 = *(_QWORD *)(v2 + 72);
  v14 = *(_DWORD *)(v2 + 80);
  v15 = ~(-1 << *(_DWORD *)(v2 + 112));
  v16 = *(_QWORD *)(v2 + 96);
  v17 = *(_QWORD *)(v2 + 104);
  v18 = ~(-1 << *(_DWORD *)(v2 + 116));
  v19 = "invalid distance too far back";
  while (2)
  {
    if (v14 <= 0xE)
    {
      v20 = *(unsigned __int8 *)(v3 + 2);
      v3 += 2;
      v13 += ((unint64_t)*(unsigned __int8 *)(v3 - 1) << v14)
           + ((unint64_t)v20 << (v14 + 8));
      v14 += 16;
    }
    v21 = (unsigned __int8 *)(v16 + 4 * (v13 & v15));
    v22 = *((unsigned __int16 *)v21 + 1);
    v23 = v21[1];
    for (i = *v21; ; i = *v25)
    {
      v13 >>= v23;
      v14 -= v23;
      if (!i)
      {
        *++v5 = v22;
        goto LABEL_10;
      }
      if ((i & 0x10) != 0)
        break;
      if ((i & 0x40) != 0)
      {
        if ((i & 0x20) != 0)
        {
          v58 = 11;
        }
        else
        {
          v19 = "invalid literal/length code";
LABEL_65:
          *(_QWORD *)(result + 48) = v19;
          v58 = 27;
        }
        *(_DWORD *)v2 = v58;
        goto LABEL_67;
      }
      v25 = (unsigned __int8 *)(v16 + 4 * ((v13 & ~(-1 << i)) + (unint64_t)v22));
      v22 = *((unsigned __int16 *)v25 + 1);
      v23 = v25[1];
    }
    v26 = i & 0xF;
    if (v26)
    {
      if (v14 < v26)
      {
        v27 = *(unsigned __int8 *)++v3;
        v13 += (unint64_t)v27 << v14;
        v14 += 8;
      }
      v22 += v13 & ~(-1 << v26);
      v13 >>= v26;
      v28 = v14 - v26;
    }
    else
    {
      v28 = v14;
    }
    if (v28 <= 0xE)
    {
      v29 = *(unsigned __int8 *)(v3 + 2);
      v3 += 2;
      v13 += ((unint64_t)*(unsigned __int8 *)(v3 - 1) << v28)
           + ((unint64_t)v29 << (v28 + 8));
      v28 += 16;
    }
    v30 = (char *)(v17 + 4 * (v13 & v18));
    v31 = *((unsigned __int16 *)v30 + 1);
    v32 = v30[1];
    for (j = *v30; ; j = *v34)
    {
      v13 >>= v32;
      v28 -= v32;
      if ((j & 0x10) != 0)
        break;
      if ((j & 0x40) != 0)
      {
        v19 = "invalid distance code";
        v14 = v28;
        goto LABEL_65;
      }
      v34 = (char *)(v17 + 4 * ((v13 & ~(-1 << j)) + (unint64_t)v31));
      v31 = *((unsigned __int16 *)v34 + 1);
      v32 = v34[1];
    }
    v35 = j & 0xF;
    if (v28 >= v35)
    {
      v36 = v28;
    }
    else
    {
      v13 += (unint64_t)*(unsigned __int8 *)(v3 + 1) << v28;
      v36 = v28 + 8;
      if (v28 + 8 >= v35)
      {
        ++v3;
      }
      else
      {
        v37 = *(unsigned __int8 *)(v3 + 2);
        v3 += 2;
        v13 += (unint64_t)v37 << v36;
        v36 = v28 + 16;
      }
    }
    v38 = (v13 & ~(-1 << v35)) + v31;
    v13 >>= v35;
    v14 = v36 - v35;
    v39 = v38 - ((_DWORD)v5 - v7);
    if (v38 <= (int)v5 - v7)
    {
      v46 = 0;
      v47 = 0;
      v48 = &v5[-v38];
      do
      {
        v49 = &v5[v47];
        v49[1] = v48[v47 + 1];
        v49[2] = v48[v47 + 2];
        v49[3] = v48[v47 + 3];
        v47 += 3;
        v46 -= 3;
      }
      while (v22 + v46 > 2);
      v50 = &v5[v47];
      if (v22 == (_DWORD)v47 || (v50[1] = v48[v47 + 1], ++v50, v22 - 1 == (_DWORD)v47))
      {
        v5 = v50;
      }
      else
      {
        v57 = &v5[v47];
        v57[2] = v48[v47 + 2];
        v5 = v57 + 2;
      }
      goto LABEL_10;
    }
    if (v39 > v10)
      goto LABEL_65;
    if (!v11)
    {
      v40 = v9 - v39;
      v51 = v22 - v39;
      if (v22 > v39)
      {
        v52 = (char *)(v12 + v40);
        do
        {
          v53 = *v52++;
          *++v5 = v53;
          --v39;
        }
        while (v39);
        goto LABEL_52;
      }
LABEL_53:
      v44 = (_BYTE *)(v12 - 1 + v40);
      goto LABEL_54;
    }
    if (v39 > v11)
    {
      v40 = v11 + v9 - v39;
      v41 = v22 - (v39 - v11);
      if (v22 > v39 - v11)
      {
        v42 = (char *)(v12 + v40);
        do
        {
          v43 = *v42++;
          *++v5 = v43;
          --v39;
        }
        while (v11 != v39);
        v22 = v41;
        v44 = (_BYTE *)(v12 - 1);
        if (v41 > v11)
        {
          v45 = 0;
          do
          {
            v5[v45 + 1] = *(_BYTE *)(v12 + v45);
            ++v45;
          }
          while (v11 != (_DWORD)v45);
          v22 = v41 - v11;
          v5 += v45;
          v44 = &v5[-v38];
        }
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    v40 = v11 - v39;
    v51 = v22 - v39;
    if (v22 <= v39)
      goto LABEL_53;
    v54 = (char *)(v12 + v40);
    do
    {
      v55 = *v54++;
      *++v5 = v55;
      --v39;
    }
    while (v39);
LABEL_52:
    v44 = &v5[-v38];
    v22 = v51;
LABEL_54:
    if (v22 >= 3)
    {
      do
      {
        v5[1] = v44[1];
        v5[2] = v44[2];
        v56 = v44[3];
        v44 += 3;
        v5[3] = v56;
        v5 += 3;
        v22 -= 3;
      }
      while (v22 > 2);
    }
    if (v22)
    {
      v5[1] = v44[1];
      if (v22 == 1)
      {
        ++v5;
      }
      else
      {
        v5[2] = v44[2];
        v5 += 2;
      }
    }
LABEL_10:
    if (v3 < v4 && v5 < v8)
      continue;
    break;
  }
LABEL_67:
  v59 = v3 - (v14 >> 3);
  *(_QWORD *)result = v59 + 1;
  *(_QWORD *)(result + 24) = v5 + 1;
  *(_DWORD *)(result + 8) = v4 - v59 + 5;
  *(_DWORD *)(result + 32) = (_DWORD)v8 - (_DWORD)v5 + 257;
  *(_QWORD *)(v2 + 72) = v13 & ~(-1 << (v14 & 7));
  *(_DWORD *)(v2 + 80) = v14 & 7;
  return result;
}

void *sub_100022930(uint64_t a1, int a2, int a3)
{
  return malloc_type_malloc((a3 * a2), 0xAA8DC6BFuLL);
}

void sub_100022940(int a1, void *a2)
{
  free(a2);
}

uint64_t sub_100022948(uint64_t a1, int a2, int __fd, uint64_t *a4, char a5)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uid_t v20;
  uid_t v21;
  gid_t v22;
  mode_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  stat v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  uid_t v52;
  __int16 v53;
  gid_t v54;
  timespec __times;
  uint64_t v56;
  uint64_t v57;

  memset(&v48, 0, sizeof(v48));
  if (!a2 && (a4[3] & 0xF000) == 0x8000 && *(_DWORD *)(*(_QWORD *)a1 + 572) && !*(_DWORD *)(*(_QWORD *)a1 + 60))
  {
    if (fstat(__fd, &v48) == -1)
    {
      v10 = 1;
      if (*__error() == 2)
        return v10;
    }
    else
    {
      LODWORD(v10) = 1;
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  v11 = *(_DWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 56) && ((a4[3] & 0xF000) != 0x4000 || !v11[32]))
  {
    v12 = a4[6];
    __times.tv_nsec = -1;
    v56 = v12;
    v57 = 0;
    if (futimens(__fd, &__times) == -1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100039704();
      sub_10001BFE8("%s: futimens", v13, v14, v15, v16, v17, v18, v19, a5);
      return 0;
    }
    sub_10001BE54(3, "%s: updated date", v14, v15, v16, v17, v18, v19, *a4);
    v11 = *(_DWORD **)a1;
  }
  if ((v11[52] == 1 || (v20 = geteuid(), v11 = *(_DWORD **)a1, !v20)) && v11[23] && v11[52] != 2)
    v21 = *((_DWORD *)a4 + 7);
  else
    v21 = -1;
  if (v11[22])
    v22 = *((_DWORD *)a4 + 8);
  else
    v22 = -1;
  v23 = *((_WORD *)a4 + 12);
  if (v21 != -1 || v22 != -1)
  {
    if (fchown(__fd, v21, v22) == -1)
    {
      if (*__error() != 1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100037194();
        sub_10001BFE8("%s: fchown", v37, v38, v39, v40, v41, v42, v43, a5);
        return 0;
      }
      if (!geteuid())
      {
        if (dword_100050EE8)
        {
          v44 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
          {
            v45 = *a4;
            *(_DWORD *)buf = 136315650;
            v50 = v45;
            v51 = 1024;
            v52 = v21;
            v53 = 1024;
            v54 = v22;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "%s: identity unknown or not available to user.group: %u.%u", buf, 0x18u);
          }
        }
        sub_10001C1CC("%s: identity unknown or not available to user.group: %u.%u", (const char *)*a4, v21, v22);
      }
    }
    else
    {
      sub_10001BE54(3, "%s: updated uid and/or gid", v24, v25, v26, v27, v28, v29, *a4);
    }
  }
  if (a2 || *(_DWORD *)(*(_QWORD *)a1 + 60))
  {
    if (fchmod(__fd, v23) != -1)
      goto LABEL_27;
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_32;
LABEL_31:
    sub_100037134();
LABEL_32:
    sub_10001BFE8("%s: fchmod", v30, v31, v32, v33, v34, v35, v36, a5);
    return 0;
  }
  if (!(_DWORD)v10 || ((v23 & 0x49) != 0) != ((v48.st_mode & 0x49) == 0))
    return 1;
  v46 = (v23 & 0x49) != 0 ? (v48.st_mode >> 2) & 0x49 | v48.st_mode : v48.st_mode & 0xFFB6;
  if (!v46)
    return 1;
  if (fchmod(__fd, v46) == -1)
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_27:
  sub_10001BE54(3, "%s: updated permissions", v31, v32, v33, v34, v35, v36, *a4);
  return 1;
}

uint64_t sub_100022DA0(uint64_t a1, int a2, int __fd, const char **a4, char *__path)
{
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uid_t v21;
  uid_t v22;
  gid_t v23;
  mode_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  int v55;
  uint64_t v56;
  stat v57;
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  uid_t v61;
  __int16 v62;
  gid_t v63;
  timespec __times;
  const char *v65;
  uint64_t v66;

  memset(&v57, 0, sizeof(v57));
  if (a2)
  {
    v10 = *(_DWORD **)a1;
    goto LABEL_6;
  }
  v10 = *(_DWORD **)a1;
  if (((_WORD)a4[3] & 0xF000) != 0x8000 || !v10[143] || v10[15])
  {
LABEL_6:
    v11 = 0;
    if (!v10[46])
      goto LABEL_9;
    goto LABEL_7;
  }
  v11 = 1;
LABEL_7:
  if (fstatat(__fd, *a4, &v57, 32) == -1 && *__error() == 2)
    return 1;
LABEL_9:
  v12 = *(_DWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 56) && (((_WORD)a4[3] & 0xF000) != 0x4000 || !v12[32]))
  {
    v13 = a4[6];
    __times.tv_nsec = -1;
    v65 = v13;
    v66 = 0;
    if (utimensat(__fd, __path, &__times, 32) == -1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000398C0();
      sub_10001BFE8("%s: utimensat (2)", v14, v15, v16, v17, v18, v19, v20, (char)__path);
      return 0;
    }
    sub_10001BE54(3, "%s: updated date", v15, v16, v17, v18, v19, v20, (char)*a4);
    v12 = *(_DWORD **)a1;
  }
  if ((v12[52] == 1 || (v21 = geteuid(), v12 = *(_DWORD **)a1, !v21)) && v12[23] && v12[52] != 2)
    v22 = *((_DWORD *)a4 + 7);
  else
    v22 = -1;
  if (v12[22])
    v23 = *((_DWORD *)a4 + 8);
  else
    v23 = -1;
  v24 = *((_WORD *)a4 + 12);
  if (v22 != -1 || v23 != -1)
  {
    if (fchownat(__fd, __path, v22, v23, 32) == -1)
    {
      if (*__error() != 1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100039860();
        sub_10001BFE8("%s: fchownat", v46, v47, v48, v49, v50, v51, v52, (char)__path);
        return 0;
      }
      if (!geteuid())
      {
        if (dword_100050EE8)
        {
          v53 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
          {
            v54 = *a4;
            *(_DWORD *)buf = 136315650;
            v59 = v54;
            v60 = 1024;
            v61 = v22;
            v62 = 1024;
            v63 = v23;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "%s: identity unknown or not available to user.group: %u.%u", buf, 0x18u);
          }
        }
        sub_10001C1CC("%s: identity unknown or not available to user.group: %u.%u", *a4, v22, v23);
      }
    }
    else
    {
      sub_10001BE54(3, "%s: updated uid and/or gid", v25, v26, v27, v28, v29, v30, (char)*a4);
    }
  }
  if (!a2 && !*(_DWORD *)(*(_QWORD *)a1 + 60))
  {
    if (!v11 || ((v24 & 0x49) != 0) != ((v57.st_mode & 0x49) == 0))
      return 1;
    v55 = (v24 & 0x49) != 0 ? (v57.st_mode >> 2) & 0x49 | v57.st_mode : v57.st_mode & 0xFFB6;
    if (!v55)
      return 1;
    if (fchmodat(__fd, __path, v55, 32) == -1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100039764();
      sub_10001BFE8("%s: fchmodat", v56, v31, v32, v33, v34, v35, v36, (char)__path);
      return 0;
    }
    goto LABEL_30;
  }
  if (fchmodat(__fd, __path, v24, 32) != -1 || ((_WORD)a4[3] & 0xF000) == 0xA000 && *__error() == 102)
  {
LABEL_30:
    sub_10001BE54(3, "%s: updated permissions", v31, v32, v33, v34, v35, v36, (char)*a4);
    return 1;
  }
  if (dword_100050EE8)
  {
    v38 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000397C4((uint64_t)__path, v38);
  }
  __error();
  sub_10001BFE8("%s: fchmodat (1) %d", v39, v40, v41, v42, v43, v44, v45, (char)__path);
  return 0;
}

uint64_t sub_10002325C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t *v6;

  v2 = a2[2];
  if ((int)v2 >= 1)
  {
    result = 0;
    v5 = 0;
    v6 = (uint64_t *)(*(_QWORD *)a2 + 16);
    do
    {
      if (*(_QWORD *)(a1 + 72) == *(v6 - 1) && *(_QWORD *)(a1 + 64) == *(v6 - 2))
      {
        if (v5)
          return result;
        result = *v6;
        if (*v6 == a1)
          return 0;
        v5 = 1;
      }
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1000232D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  char *v5;
  int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  unint64_t v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  unint64_t v40;
  int v41;
  NSObject *v42;
  char *v43;
  uint64_t v44;
  void **v45;
  void **v46;
  int v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  void **v51;
  char *v52;
  char *v53;
  mode_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int16 *v94;
  char v95;
  __int16 v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v128;
  const char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  char v162;
  char v163;
  char v164;
  NSObject *v165;
  int v166;
  NSObject *log;
  int v168;
  char *v169;
  void *v170;
  uint64_t v171;
  stat v172;
  int v173;
  size_t v174;
  unint64_t v175;
  uint64_t __buf;
  char *v177;
  char *v178;
  _QWORD v179[2];
  uint8_t v180[4];
  char *v181;
  __int16 v182;
  int v183;
  __int16 v184;
  uint64_t v185;
  uint8_t buf[4];
  unint64_t v187;
  __int16 v188;
  __int16 v189;
  int v190;
  __int16 v191;
  __int16 v192;
  int v193;
  __int16 v194;
  __int16 v195;

  v5 = a5;
  v177 = 0;
  v178 = 0;
  v175 = 0;
  __buf = 0;
  v174 = 0;
  v173 = 0;
  memset(&v172, 0, sizeof(v172));
  v170 = 0;
  v171 = 0;
  if (*(int *)(a1 + 260) <= 28)
    v10 = 1;
  else
    v10 = 2;
  v11 = *(_DWORD *)(*(_QWORD *)a1 + 12);
  v179[1] = 0;
  v179[0] = v11;
  *(_QWORD *)(a1 + 200) = v179;
  v12 = 0;
  if (stat(a5, &v172) == -1)
    v12 = *__error() == 2;
  v13 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 4)
    || !*(_QWORD *)(v13 + 520)
    && (sub_100025560((_DWORD *)a1, a4), v13 = *(_QWORD *)a1, *(_DWORD *)(*(_QWORD *)a1 + 4)))
  {
    if (!*(_DWORD *)(v13 + 96)
      || *(_DWORD *)(v13 + 100) && *(int *)(a1 + 260) < 29
      || (sub_100025840(a1, a3), v13 = *(_QWORD *)a1, *(_DWORD *)(*(_QWORD *)a1 + 4)))
    {
      if (*(_QWORD *)(v13 + 432))
      {
        sub_100014168(a1);
        __buf = 0;
        if (*(_QWORD *)(a1 + 176))
        {
          v14 = 0;
          while (1)
          {
            v15 = *(const char **)(*(_QWORD *)(a1 + 168) + 8 * v14);
            v16 = strlen(v15);
            if (v15[v16 - 1] == 10)
            {
              v15[v16 - 1] = 0;
              v15 = *(const char **)(*(_QWORD *)(a1 + 168) + 8 * __buf);
              --v16;
            }
            if (write(a4, v15, v16 + 1) < 0)
              break;
            v14 = __buf + 1;
            __buf = v14;
            if (v14 >= *(_QWORD *)(a1 + 176))
              goto LABEL_18;
          }
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100039B88();
          v24 = "write files-from remote file";
          goto LABEL_60;
        }
LABEL_18:
        __buf = 0;
        if (write(a4, &__buf, 1uLL) < 0)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100039B5C();
          v24 = "write files-from remote file terminator";
LABEL_60:
          sub_10001BFE8(v24, v17, v18, v19, v20, v21, v22, v23, v162);
          return 0;
        }
      }
    }
  }
  v25 = *(_QWORD *)(a1 + 24);
  if (!sub_100010BA8((int *)a1, a3, a4, &v178, &v175))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100039920();
    sub_10001C094("flist_recv");
    goto LABEL_51;
  }
  v26 = (char *)sub_100003660(0, v175, 0x18uLL);
  if (!v26)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003994C();
    sub_10001C094("reallocarray receiver");
LABEL_51:
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v27 = 0;
    goto LABEL_52;
  }
  v27 = v26;
  v28 = v175;
  *(_QWORD *)(a1 + 64) = v175;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 24) - v25;
  v29 = 0;
  if (v28)
  {
    v30 = v178;
    do
    {
      if (*((_OWORD *)v30 + 4) != 0)
      {
        v31 = &v26[24 * v29];
        *(_OWORD *)v31 = *((_OWORD *)v30 + 4);
        ++v29;
        *((_QWORD *)v31 + 2) = v30;
      }
      v30 += 152;
      --v28;
    }
    while (v28);
  }
  qsort(v26, v29, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_10002473C);
  LODWORD(v171) = v29;
  v170 = v27;
  if (sub_10001AF44(a1, a3, &v173))
  {
    v38 = v173;
    if (v173)
    {
      if (dword_100050EE8)
      {
        v39 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v187) = v38;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Got ioerror=%d", buf, 8u);
          LOBYTE(v38) = v173;
        }
      }
      sub_10001BE54(1, "Got ioerror=%d", v32, v33, v34, v35, v36, v37, v38);
      ++*(_QWORD *)(a1 + 240);
    }
    v40 = v175;
    v41 = *(_DWORD *)(*(_QWORD *)a1 + 4);
    if (v175)
    {
      if (!v41)
      {
        if (dword_100050EE8)
        {
          v42 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            v187 = v40;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Transfer starting: %zu files", buf, 0xCu);
            LOBYTE(v40) = v175;
          }
        }
        sub_10001BE54(0, "Transfer starting: %zu files", v32, v33, v34, v35, v36, v37, v40);
      }
    }
    else if (!v41)
    {
      if (dword_100050EE8)
      {
        v119 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_INFO, "receiver has empty file list: exiting", buf, 2u);
        }
      }
      sub_10001C1CC("receiver has empty file list: exiting");
      goto LABEL_148;
    }
    if (dword_100050EE8)
    {
      v49 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v187 = (unint64_t)v5;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "%s: receiver destination", buf, 0xCu);
      }
    }
    sub_10001BE54(1, "%s: receiver destination", v32, v33, v34, v35, v36, v37, (char)v5);
    v50 = *(_QWORD *)a1;
    v168 = v10;
    if (*(_DWORD *)(*(_QWORD *)a1 + 36) || !v175)
    {
      v169 = 0;
      goto LABEL_83;
    }
    if (v175 > 1
      || *(_DWORD *)(v50 + 188) && strchr(*(char **)v178, 47)
      || v5[strlen(v5) - 1] == 47
      || *(_QWORD *)(v50 + 432)
      || (v51 = (void **)v178, (*((_WORD *)v178 + 12) & 0xF000) == 0x4000)
      || !v12 && (v172.st_mode & 0xF000) == 0x4000)
    {
      v52 = strdup(v5);
      if (!v52)
        sub_100038FF0();
      v53 = v52;
      if ((sub_100021D20(v52) & 0x80000000) != 0)
        err(11, "%s: mkpath", v53);
      free(v53);
      v169 = 0;
LABEL_83:
      v54 = umask(0);
      v47 = open(v5, 0x100000, 0);
      v62 = *(_QWORD *)a1;
      if (v47 == -1)
      {
        v72 = *(_DWORD *)(v62 + 36);
        if (!v72 && v175)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100036604();
          sub_10001BFE8("%s: open", v55, v56, v57, v58, v59, v60, v61, (char)v5);
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = -1;
          v48 = -1;
          goto LABEL_172;
        }
        if (!v72)
        {
          if (dword_100050EE8)
          {
            v118 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315138;
              v187 = (unint64_t)v5;
              _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_INFO, "%s: open", buf, 0xCu);
            }
          }
          sub_10001C250(0, "%s: open", v56, v57, v58, v59, v60, v61, (char)v5);
          v62 = *(_QWORD *)a1;
        }
      }
      v63 = *(const char **)(v62 + 544);
      if (v63)
      {
        v48 = open(v63, 0x100000, 0);
        v62 = *(_QWORD *)a1;
        if (v47 == -1 && !*(_DWORD *)(v62 + 36))
        {
          if (dword_100050EE8)
          {
            v71 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            {
              v149 = *(_QWORD *)(v62 + 544);
              *(_DWORD *)buf = 136315138;
              v187 = v149;
              _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%s: open", buf, 0xCu);
              v62 = *(_QWORD *)a1;
            }
          }
          sub_10001BFE8("%s: open", v64, v65, v66, v67, v68, v69, v70, *(_QWORD *)(v62 + 544));
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = -1;
          goto LABEL_172;
        }
      }
      else
      {
        v48 = -1;
      }
      if (*(_DWORD *)(v62 + 96) != 2 || v47 == -1 || !*(_DWORD *)(v62 + 32))
        goto LABEL_103;
      if (sub_100012E14((int *)a1, v5, (void **)&v177, &v174, (uint64_t)v178, v175))
      {
        if (sub_1000139CC((_QWORD *)a1, v47, (uint64_t)v177, v174, v73, v74, v75, v76))
        {
LABEL_103:
          *(_DWORD *)buf = a3;
          HIDWORD(v187) = -1;
          v190 = -1;
          v193 = a4;
          LOWORD(v187) = 1;
          v188 = 1;
          v191 = 1;
          v194 = 4;
          v77 = (void **)sub_10002E4EC(v5, v47, v48, a4, 2, (uint64_t)v178, v175, v54);
          if (v77)
          {
            v46 = v77;
            v78 = (void **)sub_10000A128(a1, a3, (uint64_t)v178, v175, v47, v48);
            if (v78)
            {
              v45 = v78;
              sub_10002B5E0(a2, (uint64_t)v78);
              if (dword_100050EE8)
              {
                log = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)v180 = 136315138;
                  v181 = v5;
                  _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "%s: ready for phase 1 data", v180, 0xCu);
                }
              }
              sub_10001BE54(1, "%s: ready for phase 1 data", v79, v80, v81, v82, v83, v84, (char)v5);
              v166 = 0;
              while (2)
              {
                v85 = poll((pollfd *)buf, 4u, dword_100050F00);
                if (v85 == -1)
                {
                  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                    sub_10003899C();
                  sub_10001BFE8("poll", v86, v87, v88, v89, v90, v91, v92, v164);
                }
                else if (v85)
                {
                  v93 = 0;
                  v94 = (__int16 *)&v187 + 1;
                  do
                  {
                    v96 = *v94;
                    v94 += 4;
                    v95 = v96;
                    if ((v96 & 0x28) != 0)
                    {
                      __buf = v93;
                      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                        sub_100038970();
                      sub_10001BF64("poll: bad fd");
                      goto LABEL_162;
                    }
                    if ((v95 & 0x10) != 0)
                    {
                      __buf = v93;
                      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                        sub_100039B30();
                      sub_10001BF64("poll: hangup");
                      goto LABEL_162;
                    }
                    ++v93;
                  }
                  while (v93 != 4);
                  __buf = 4;
                  if (*(_DWORD *)(a1 + 128) && (v187 & 0x10000) != 0)
                  {
                    if (!sub_10001987C((_QWORD *)a1, a3))
                    {
                      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                        sub_100038B1C();
                      sub_10001C094("io_read_flush");
                      break;
                    }
                    if (!*(_QWORD *)(a1 + 136))
                      WORD1(v187) &= ~1u;
                  }
                  if (((v189 & 1) != 0 || (v195 & 4) != 0)
                    && (sub_10002E820((uint64_t)v46, (char *)&v187 + 4, a1, &v193, (unsigned int *)&v170, v90, v91, v92) & 0x80000000) != 0)
                  {
                    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                      sub_100039B04();
                    sub_10001C094("rsync_uploader");
                  }
                  else
                  {
                    if ((v187 & 0x10000) == 0 && (v192 & 1) == 0)
                      continue;
                    v97 = sub_10000AAE0((uint64_t)v45, (_DWORD *)a1, &v190, v175, (unsigned int *)&v170);
                    if (v97 < 0)
                    {
                      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                        sub_100039A28();
                      sub_10001C094("rsync_downloader");
                    }
                    else
                    {
                      if (v97)
                        continue;
                      if (*(int *)(a1 + 260) < 29 || v166 == 2)
                      {
                        sub_10000A744((void **)a1, v98, v99, v100, v101, v102, v103, v104);
                        free(*(void **)(a1 + 192));
                        *(_QWORD *)(a1 + 192) = 0;
                      }
                      sub_10002E724((uint64_t)v46, a1, a4);
                      if (v166 != v168)
                      {
                        if (dword_100050EE8)
                        {
                          v165 = qword_100050EF8;
                          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
                          {
                            v111 = sub_10000A2F8((uint64_t)v45);
                            *(_DWORD *)v180 = 136315650;
                            v181 = v5;
                            v182 = 1024;
                            v183 = v166 + 2;
                            v184 = 2048;
                            v185 = v111;
                            _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_INFO, "%s: receiver ready for phase %d data (%zu to redo)", v180, 0x1Cu);
                          }
                        }
                        sub_10000A2F8((uint64_t)v45);
                        sub_10001BE54(1, "%s: receiver ready for phase %d data (%zu to redo)", v112, v113, v114, v115, v116, v117, (char)v5);
                        **(_DWORD **)(a1 + 200) = 0;
                        sub_10002E6A4((uint64_t)v46);
                        v193 = a4;
                        ++v166;
                        continue;
                      }
                      v150 = *(_DWORD *)(*(_QWORD *)a1 + 96);
                      if (v150 == 4)
                      {
                        if (!sub_10002E4A8((uint64_t)v46, (_QWORD *)a1))
                        {
                          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                            sub_100039AD8();
                          sub_10001C094("upload_del");
                          break;
                        }
                      }
                      else if (v150 == 5 && v47 != -1 && *(_DWORD *)(*(_QWORD *)a1 + 32))
                      {
                        if (!sub_100012E14((int *)a1, v5, (void **)&v177, &v174, (uint64_t)v178, v175))
                        {
                          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                            sub_100039AAC();
                          sub_10001C094("flist_gen_dels");
                          break;
                        }
                        if (!sub_1000139CC((_QWORD *)a1, v47, (uint64_t)v177, v174, v151, v152, v153, v154))
                        {
                          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                            sub_1000399A4();
                          sub_10001C094("flist_del");
                          break;
                        }
                      }
                      if (sub_1000317D8((uint64_t)v46, a1, v105, v106, v107, v108, v109, v110))
                      {
                        if (sub_10002B148(a1, a3))
                        {
                          if (*(_QWORD *)(*(_QWORD *)a1 + 520) || sub_10001A850(a1, a4, -1))
                          {
                            if (dword_100050EE8)
                            {
                              v161 = qword_100050EF8;
                              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
                              {
                                *(_WORD *)v180 = 0;
                                _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_INFO, "receiver finished updating", v180, 2u);
                              }
                            }
                            v44 = 1;
                            sub_10001BE54(1, "receiver finished updating", v155, v156, v157, v158, v159, v160, v164);
                            goto LABEL_172;
                          }
                          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                            sub_10003516C();
                          sub_10001C094("io_write_int");
                        }
                        else
                        {
                          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                            sub_100039A80();
                          sub_10001C094("sess_stats_recv");
                        }
                      }
                      else
                      {
                        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                          sub_100039A54();
                        sub_10001C094("rsync_uploader_tail");
                      }
                    }
                  }
                }
                else
                {
                  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                    sub_1000389C8();
                  sub_10001BF64("poll: timeout");
                }
                break;
              }
LABEL_162:
              v44 = 0;
            }
            else
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_1000399FC();
              sub_10001C094("download_alloc");
              v44 = 0;
              v45 = 0;
            }
            goto LABEL_172;
          }
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_1000399D0();
          sub_10001C094("upload_alloc");
          goto LABEL_171;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000399A4();
        sub_10001C094("flist_del");
      }
      else
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100039978();
        sub_10001C094("flist_gen_dels");
      }
LABEL_171:
      v44 = 0;
      v45 = 0;
      v46 = 0;
LABEL_172:
      v43 = v169;
      goto LABEL_173;
    }
    v128 = strrchr(v5, 47);
    if (v128)
    {
      v129 = v128 + 1;
      v130 = strndup(v5, v128 + 1 - v5);
      if (v130)
      {
        v5 = v130;
        v138 = strdup(v129);
        if (v138)
        {
          v146 = v138;
          v147 = v5;
LABEL_193:
          free(*v51);
          *(_QWORD *)v178 = v146;
          *((_QWORD *)v178 + 2) = v146;
          v169 = v147;
          goto LABEL_83;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100035654();
        sub_10001BFE8("strdup", v139, v140, v141, v142, v143, v144, v145, v163);
        free(v5);
        v43 = v5;
        goto LABEL_149;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_212;
    }
    else
    {
      v148 = strdup(v5);
      if (v148)
      {
        v146 = v148;
        v147 = 0;
        v5 = ".";
        goto LABEL_193;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_212;
    }
    sub_100035654();
LABEL_212:
    sub_10001BFE8("strdup", v131, v132, v133, v134, v135, v136, v137, v163);
LABEL_148:
    v43 = 0;
LABEL_149:
    v45 = 0;
    v46 = 0;
    v47 = -1;
    v44 = 1;
    goto LABEL_53;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_100035198();
  sub_10001C094("io_read_int");
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
LABEL_52:
  v47 = -1;
LABEL_53:
  v48 = -1;
LABEL_173:
  free(v43);
  sub_10000A744((void **)a1, v120, v121, v122, v123, v124, v125, v126);
  free(*(void **)(a1 + 192));
  *(_QWORD *)(a1 + 192) = 0;
  free(v27);
  sub_10002E6E4(v46);
  sub_10002B3A4(a2);
  sub_10000A300(a1, v45);
  sub_10002B5E0(a2, 0);
  sub_10002B410(a2);
  if (v47 != -1)
    close(v47);
  if (v48 != -1)
    close(v48);
  sub_10000FD10(v178, v175);
  sub_10000FD10(v177, v174);
  return v44;
}

uint64_t sub_10002473C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v5;
  _BOOL4 v6;

  v2 = a1[1];
  v3 = a2[1];
  if (v2 != v3)
    goto LABEL_6;
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  if (*a1 > *a2)
    return 1;
LABEL_6:
  v5 = v2 < v3;
  v6 = v2 > v3;
  if (v5)
    return 0xFFFFFFFFLL;
  else
    return v6;
}

BOOL sub_100024784(unsigned __int8 *a1, char *__s, int a3)
{
  int v4;
  int v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  char *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  char v21;
  char *v22;
  unsigned __int8 *i;
  int v24;
  int v25;
  BOOL v26;
  unsigned __int8 *v28;
  unsigned __int8 *v29;

  v4 = *a1;
  v5 = *__s;
  if (!*a1)
    return v5 && (!a3 || v5 != 47);
  v6 = __s;
  v7 = a1;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (!v5)
      return 1;
    if (v4 == 92 && v7[1] == 47)
      ++v7;
    if (v5 == 47 && *v7 == 47)
    {
      ++v7;
      ++v6;
    }
    v10 = strchr(v6, 47);
    if (!v10)
      v10 = &v6[strlen(v6)];
LABEL_12:
    v4 = *v7;
    if (*v7)
      break;
LABEL_66:
    v5 = *v6;
    v26 = v5 == 47 || v5 == 0;
    if (!v26)
    {
      while (1)
      {
LABEL_73:
        if (!v8)
          return 1;
        if (*v9 == 47)
          v6 = v9 + 1;
        else
          v6 = v9;
        v10 = strchr(v6, 47);
        if (!v10)
          v10 = &v6[strlen(v6)];
        v11 = 1;
        v7 = v8;
        v9 = v10;
        if (v6 >= v10)
          return v11;
LABEL_28:
        if (v6 >= v10)
        {
LABEL_64:
          if (v6 < v10)
            goto LABEL_12;
          v4 = *v7;
          if (v4 == 42)
            goto LABEL_12;
          goto LABEL_66;
        }
        v28 = v7;
        v29 = v7;
        v14 = v10;
        v15 = v7;
        while (1)
        {
          v16 = *v15;
          if (v16 > 0x5B)
            break;
          if (!*v15 || v16 == 42)
          {
            v17 = v11;
            v18 = v6;
            goto LABEL_41;
          }
          if (v16 == 47)
            goto LABEL_39;
LABEL_37:
          sub_100024A90(&v28, 32);
          v15 = v28;
          --v14;
        }
        if (v16 != 92 || v15[1] != 47)
          goto LABEL_37;
LABEL_39:
        v17 = 0;
        v18 = v6;
        if ((_DWORD)v11)
        {
          v17 = 0;
          v18 = v14;
          if (v6 > v14)
            continue;
        }
LABEL_41:
        if (v18 > v14)
          continue;
        v19 = v16 == 0;
        v26 = v17 == 0;
        v20 = v17 != 0;
        v21 = v26 || v19;
        v22 = v6;
        if (v19 && v20)
          v6 = v14;
        else
          v6 = v18;
        while (1)
        {
          for (i = v7; ; i = v29)
          {
            v24 = *i;
            if (v24 == 92)
            {
              v25 = *++i;
              if (v25 != 47)
                goto LABEL_56;
              v29 = i;
              v24 = *i;
            }
            else if (!*i || v24 == 42)
            {
              goto LABEL_63;
            }
            if (v24 == 47)
            {
              if (v6 < v10)
                goto LABEL_73;
LABEL_63:
              v7 = i;
              goto LABEL_64;
            }
LABEL_56:
            if (v6 >= v10)
              goto LABEL_73;
            if (sub_100024A90(&v29, *v6))
              break;
            ++v6;
          }
          if ((v21 & 1) == 0)
          {
            ++v22;
            v29 = v7;
            v6 = v22;
            if (v22 <= v14)
              continue;
          }
          goto LABEL_73;
        }
      }
    }
    if (v4 != 47)
    {
      if (v4)
        goto LABEL_73;
      return v5 && (!a3 || v5 != 47);
    }
  }
  LODWORD(v11) = 0;
  v12 = 0;
  while (v4 == 63)
  {
    if (v12)
    {
      v9 = v10;
      v8 = v7;
      goto LABEL_28;
    }
    if (v6 >= v10 || *v6 == 47)
      return 1;
    v12 = 0;
    ++v6;
LABEL_23:
    v13 = *++v7;
    v4 = v13;
  }
  if (v4 == 42)
  {
    if (v7[1] == 42)
    {
      ++v7;
      v12 = 1;
    }
    LODWORD(v11) = 1;
    goto LABEL_23;
  }
  if (!v12)
    goto LABEL_28;
  v9 = v10;
  v8 = v7;
  if (v4)
    goto LABEL_28;
  return 0;
}

BOOL sub_100024A90(unsigned __int8 **a1, int a2)
{
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  _BOOL8 result;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  const char *v16;
  char **v17;
  int v18;
  char *v19;
  char *v20;
  size_t v21;
  char *v22;
  char v23;
  int v24;
  unsigned int v26;
  int v27;
  int v28;

  v4 = *a1;
  v6 = *a1 + 1;
  v5 = (char)**a1;
  if (v5 == 92)
  {
    v10 = v4 + 2;
    v11 = v4[1];
    if (v11)
    {
      v6 = v10;
      v7 = v11;
    }
    else
    {
      v7 = 92;
    }
    goto LABEL_13;
  }
  v7 = **a1;
  if (v5 != 91)
  {
    if (v5 == 63)
    {
      result = a2 == 47 || a2 == 0;
      goto LABEL_14;
    }
LABEL_13:
    result = v7 != a2;
    goto LABEL_14;
  }
  result = 1;
  if (!a2 || a2 == 47)
    goto LABEL_14;
  v12 = *v6;
  v27 = v7;
  if (v12 == 94 || v12 == 33)
  {
    LOBYTE(v12) = v4[2];
    v28 = 1;
    v13 = 2;
  }
  else
  {
    v28 = 0;
    v13 = 1;
  }
  v14 = 0;
  v15 = (char *)&v4[v13 + 1];
  v26 = a2;
  v16 = "alnum";
  v17 = &off_10004DBE0;
  do
  {
    if (v12 == 92)
    {
      v23 = *v15++;
      LOBYTE(v12) = v23;
LABEL_33:
      if (!(_BYTE)v12)
        goto LABEL_62;
      if (v12 == 47)
        goto LABEL_61;
      v18 = *v15;
LABEL_37:
      if (v18 != 45)
        goto LABEL_44;
      v24 = v15[1];
      if (!v15[1] || v24 == 93)
        goto LABEL_44;
      if (v24 == 92)
      {
        LOBYTE(v24) = v15[2];
        if (!(_BYTE)v24)
        {
LABEL_62:
          v7 = v27;
          goto LABEL_13;
        }
        v20 = v15 + 3;
      }
      else
      {
        v20 = v15 + 2;
      }
      if ((char)v24 >= a2 && (char)v12 <= a2)
        v14 = 1;
      goto LABEL_47;
    }
    if (v12 != 91)
      goto LABEL_33;
    v18 = *v15;
    if (v18 != 58)
    {
      LOBYTE(v12) = 91;
      goto LABEL_37;
    }
    v19 = strchr(v15 + 1, 58);
    if (!v19 || v19[1] != 93)
    {
      LOBYTE(v12) = 91;
LABEL_44:
      if (v12 == a2)
        v14 = 1;
      v20 = v15;
      goto LABEL_47;
    }
    v20 = v19 + 2;
    v21 = v19 - (v15 + 1);
    while (strncmp(v15 + 1, v16, v21) || v16[v21])
    {
      v22 = *v17;
      v17 += 2;
      v16 = v22;
      if (!v22)
      {
        LOBYTE(v12) = 91;
        v16 = "alnum";
        v17 = &off_10004DBE0;
        goto LABEL_44;
      }
    }
    if (((unsigned int (*)(_QWORD))*(v17 - 1))(v26))
      v14 = 1;
    v16 = "alnum";
    v17 = &off_10004DBE0;
LABEL_47:
    LOBYTE(v12) = *v20;
    v15 = v20 + 1;
  }
  while (*v20 != 93);
  if (v14 == v28)
  {
    v6 = (unsigned __int8 *)(v20 + 1);
LABEL_61:
    result = 1;
    goto LABEL_14;
  }
  result = 0;
  v6 = (unsigned __int8 *)(v20 + 1);
LABEL_14:
  *a1 = v6;
  return result;
}

uint64_t sub_100024D08(char *a1, int a2, unsigned int a3)
{
  return sub_100024D28((uint64_t)&unk_100050670, a1, a2, 4096, a3);
}

uint64_t sub_100024D28(uint64_t a1, char *a2, int a3, int a4, unsigned int a5)
{
  char v5;
  __int16 v6;
  char *v8;
  char *v10;
  __darwin_ct_rune_t v11;
  __uint32_t v12;
  uint64_t result;
  int v14;
  size_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __uint32_t v20;
  BOOL v21;
  char *v22;
  char *v23;
  int v24;
  _BOOL4 v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  size_t v32;
  size_t v33;
  __int16 v34;
  char *i;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  unsigned int v41;
  unsigned int v42;
  char __str[1024];

  v42 = 0;
  v5 = *a2;
  if (!*a2)
    return 0;
  v6 = a4;
  v8 = a2;
  v41 = a4 & 0xFFFFE07F;
  while (2)
  {
    if ((v6 & 0x1000) != 0)
    {
      v10 = v8 - 1;
      do
      {
        v11 = v10[1];
        if (v11 < 0)
          v12 = __maskrune(v11, 0x4000uLL);
        else
          v12 = _DefaultRuneLocale.__runetype[v11] & 0x4000;
        ++v10;
      }
      while (v12);
      v5 = *v10;
    }
    else
    {
      v10 = v8;
    }
    if (v5 == 35 || (result = v5, (_DWORD)result == 59))
    {
      if ((v6 & 0x1000) == 0)
        return 0;
    }
    else if (!v5)
    {
      return result;
    }
    v42 = 0;
    if (!a3 || !strncmp(v10, "- ", 2uLL) || !strncmp(v10, "+ ", 2uLL) || !strcmp(v10, "!"))
    {
      v15 = strcspn(v10, " _");
      v16 = sub_100026478((unsigned __int8 *)v10, v15, &v42);
      if (v16)
      {
        v14 = v16;
        if (v10[v15])
          v10 += v15 + 1;
        else
          v10 += v15;
      }
      else
      {
        v14 = a3;
        if (!a3)
          return 0xFFFFFFFFLL;
      }
    }
    else
    {
      v14 = a3;
    }
    if ((v14 & 0xFFFFFFFE) == 4)
      v17 = 8187;
    else
      v17 = 7679;
    if ((v14 - 1) < 2)
    {
      v18 = 127;
    }
    else if ((v14 - 4) > 1)
    {
      v18 = 0;
    }
    else
    {
      if ((~v42 & 0x180) == 0)
        return 0xFFFFFFFFLL;
      v18 = 0x1FFF;
    }
    v42 &= v17 & v18;
    if ((v6 & 0x1000) != 0)
    {
      v8 = v10 - 1;
      do
      {
        v19 = v8[1];
        if (v19 < 0)
          v20 = __maskrune(v8[1], 0x4000uLL);
        else
          v20 = _DefaultRuneLocale.__runetype[v19] & 0x4000;
        ++v8;
        if (v19)
          v21 = v20 == 0;
        else
          v21 = 0;
      }
      while (v21);
    }
    else
    {
      v8 = &v10[strlen(v10)];
    }
    if (v14 == 5 && v8 == v10 && (v42 & 0x200) != 0)
      v22 = strdup(".cvsignore");
    else
      v22 = strndup(v10, v8 - v10);
    v23 = v22;
    if (!v22)
      sub_100039BB4(0);
    v24 = v42;
    v25 = v14 == 3 || v14 == 1 && (v42 & 4) != 0;
    if (v25 != (*v22 == 0))
    {
      free(v22);
      return 0xFFFFFFFFLL;
    }
    if (((v14 == 5) & ((unsigned __int16)(v42 & 0x200) >> 9)) != 0)
      v24 = v42 | 0x1880;
    v26 = v24 | v41;
    v42 = v26;
    if (v26 && (v14 - 4) >= 2)
    {
      if (v14 == 2)
      {
        if ((~v26 & 0x18) != 0)
        {
          if ((v26 & 8) != 0)
          {
            v14 = 6;
          }
          else if ((v26 & 0x10) != 0)
          {
            v14 = 9;
          }
          else
          {
            v14 = 2;
          }
        }
        else
        {
          v14 = 2;
        }
      }
      else
      {
        if (v14 != 1)
        {
          v26 = 0;
LABEL_79:
          v42 = v26;
          goto LABEL_80;
        }
        if ((~v26 & 0x18) != 0)
        {
          if ((v26 & 8) != 0)
          {
            v14 = 7;
          }
          else if ((v26 & 0x10) != 0)
          {
            v14 = 8;
          }
          else
          {
            v14 = 1;
          }
        }
        else
        {
          v14 = 1;
        }
      }
      v26 &= 0xFFFFFFE7;
      goto LABEL_79;
    }
LABEL_80:
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(_QWORD *)(a1 + 24) + 1;
    *(_QWORD *)(a1 + 24) = v28;
    if (v28 <= v27)
    {
      v30 = *(char **)(a1 + 8);
    }
    else
    {
      if (v27)
        v29 = 2 * v27;
      else
        v29 = 16;
      v30 = sub_1000036A8(*(char **)(a1 + 8), v27, v29, 0x30uLL);
      if (!v30)
        sub_100038FF0();
      *(_QWORD *)(a1 + 8) = v30;
      *(_QWORD *)(a1 + 32) = v29;
      v28 = *(_QWORD *)(a1 + 24);
      v26 = v42;
    }
    v31 = &v30[48 * v28];
    *((_QWORD *)v31 - 6) = 0;
    *((_QWORD *)v31 - 5) = v31 - 48;
    *((_DWORD *)v31 - 5) = v26;
    *((_DWORD *)v31 - 4) = v26;
    *((_DWORD *)v31 - 6) = v14;
    if ((v14 & 0xFFFFFFFE) == 4)
    {
      *((_DWORD *)v31 - 4) = v26 & 0x1F80;
      goto LABEL_91;
    }
    if (v14 != 3)
    {
LABEL_91:
      if (v14 == 4)
      {
        *((_QWORD *)v31 - 4) = v23;
        break;
      }
      goto LABEL_93;
    }
    *(_QWORD *)(a1 + 16) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(48 * v28 - 48) >> 4);
LABEL_93:
    if (*v23 == 47)
    {
      ++v23;
      *(v31 - 10) = 1;
    }
    v32 = strlen(v23);
    if (v32 >= 2)
    {
      v33 = v32;
      if (v23[v32 - 1] == 47)
      {
        *(v31 - 7) = 1;
        v23[v32 - 1] = 0;
      }
      if (v32 >= 5 && !*(v31 - 7) && !strcmp(&v23[v32 - 4], "/***"))
      {
        *(v31 - 6) = 1;
        v23[v33 - 4] = 0;
      }
    }
    v34 = 1;
    for (i = v23; *i == 47; ++i)
    {
      ++v34;
LABEL_107:
      ;
    }
    if (*i)
      goto LABEL_107;
    *((_WORD *)v31 - 6) = v34;
    if (v34 == 1 && !*(v31 - 10))
      *(v31 - 9) = 1;
    if (strpbrk(v23, "*?["))
    {
      if (strstr(v23, "**"))
        *((_WORD *)v31 - 6) = -1;
    }
    else
    {
      *(v31 - 8) = 1;
    }
    *((_QWORD *)v31 - 4) = v23;
    if ((v14 & 0xFFFFFFFE) != 4)
    {
LABEL_118:
      if (v14 == 4)
      {
        if ((v42 & 0x80) != 0)
          v36 = 1;
        else
          v36 = (v42 >> 7) & 2;
        sub_100025400(a1, *((char **)v31 - 4), v36, v42, 1, a5);
      }
      else if (v14 == 5)
      {
        v37 = (_QWORD *)a1;
        do
        {
          ++v37[5];
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else if ((v42 & 4) != 0
             && sub_100024D28(&unk_100050670, "RCS SCCS CVS CVS.adm RCSLOG cvslog.* tags TAGS .make.state .nse_depinfo *~ #* .#* ,* _$* *$ *.old *.bak *.BAK *.orig *.rej .del-* *.a *.olb *.o *.obj *.so *.exe *.Z *.elc *.ln core .svn/ ", 1, 4096, 10) != -1)
      {
        v38 = getenv("HOME");
        if (v38 && *v38 && snprintf(__str, 0x400uLL, "%s/.cvsignore", v38) <= 1023)
          sub_100025400((uint64_t)&unk_100050670, __str, 1, 4096, 0, 10);
        v39 = getenv("CVSIGNORE");
        if (v39 && *v39)
          sub_100024D28(&unk_100050670, v39, 1, 4096, 10);
      }
      v5 = *v8;
      if (!*v8)
        return 0;
      continue;
    }
    break;
  }
  if ((v42 & 0x400) == 0)
    goto LABEL_118;
  result = sub_100024D28(a1, v23, 1, 0, a5);
  if ((_DWORD)result != -1)
    goto LABEL_118;
  return result;
}

uint64_t sub_1000253C0(char *a1, int a2, unsigned int a3)
{
  return sub_100024D28((uint64_t)&unk_100050670, a1, a2, 0, a3);
}

int *sub_1000253E0(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_100025400((uint64_t)&unk_100050670, a1, a2, 0, 1, a3);
}

int *sub_100025400(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  FILE *v12;
  int *result;
  uint64_t v15;
  ssize_t v16;
  size_t __linecapp;
  char *__linep;

  __linecapp = 0;
  __linep = 0;
  if (!strcmp(__s1, "-"))
  {
    v12 = __stdinp;
  }
  else
  {
    v12 = fopen(__s1, "r");
    if (!v12)
    {
      result = __error();
      if (*result != 2 || a5 != 0)
        err(1, "open: %s");
      return result;
    }
  }
  v15 = 0;
  while (1)
  {
    v16 = getdelim(&__linep, &__linecapp, a6, v12);
    if (v16 == -1)
      break;
    ++v15;
    __linep[v16 - 1] = 0;
    if (sub_100024D28(a1, __linep, a3, a4, a6) == -1)
      errx(1, "syntax error in %s at entry %zu", __s1, v15);
  }
  free(__linep);
  result = (int *)ferror(v12);
  if ((_DWORD)result)
    err(1, "failed to parse file %s");
  if (v12 != __stdinp)
    return (int *)fclose(v12);
  return result;
}

uint64_t sub_100025560(_DWORD *a1, int a2)
{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  size_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  if (qword_100050688)
  {
    v4 = 0;
    for (i = 0; i < qword_100050688; ++i)
    {
      v6 = qword_100050678;
      v7 = qword_100050678 + v4;
      v8 = *(_DWORD *)(qword_100050678 + v4 + 24);
      v9 = a1[2];
      if (v8 == 4)
      {
        if (v9)
        {
          if ((*(_WORD *)(qword_100050678 + v4 + 32) & 0x180) == 0)
            goto LABEL_17;
          goto LABEL_22;
        }
      }
      else if (v9)
      {
        goto LABEL_17;
      }
      if (v8 <= 9 && ((1 << v8) & 0x306) != 0 && (v8 == 4 || *(_DWORD *)(*(_QWORD *)a1 + 100) == 0))
      {
LABEL_17:
        sub_100025704(qword_100050678 + v4);
        sub_1000257CC(v7);
        v12 = strlen(&byte_100050E58);
        v13 = v6 + v4;
        v14 = strlen(*(const char **)(v6 + v4 + 16));
        v15 = strlen(&byte_100050E68);
        v16 = sub_10001A850((uint64_t)a1, a2, (int)v14 + (int)v12 + (int)v15);
        if (!(_DWORD)v16)
          sub_100039BC8(v16);
        v17 = sub_10001A070((uint64_t)a1, a2, &byte_100050E58, v12);
        if (!(_DWORD)v17)
          sub_100039BC8(v17);
        v18 = sub_10001A070((uint64_t)a1, a2, *(char **)(v13 + 16), v14);
        if (!(_DWORD)v18)
          sub_100039BC8(v18);
        if (v15)
        {
          v19 = sub_10001A070((uint64_t)a1, a2, &byte_100050E68, v15);
          if (!(_DWORD)v19)
            sub_100039BC8(v19);
        }
      }
LABEL_22:
      v4 += 48;
    }
  }
  result = sub_10001A850((uint64_t)a1, a2, 0);
  if (!(_DWORD)result)
    sub_100039BC8(result);
  return result;
}

uint64_t sub_100025704(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  char *v3;
  int v4;
  _BYTE *v5;

  v1 = *(_DWORD *)(result + 24) - 1;
  if (v1 >= 9)
    err(1, "unknown rule type %d", *(_DWORD *)(result + 24));
  v2 = 0;
  byte_100050E58 = aShpr[v1];
  v3 = &byte_100050E59;
  v4 = 1;
  do
  {
    if ((*(_DWORD *)(result + 28) & v4) != 0)
    {
      *v3++ = byte_100041E3C[v2 + 4];
      if (v3 >= byte_100050E65)
        sub_100039BDC();
    }
    v4 = *(_DWORD *)&byte_100041E3C[v2 + 8];
    v2 += 8;
  }
  while (v2 != 88);
  *v3 = 32;
  v5 = v3 + 1;
  if (*(_BYTE *)(result + 38))
  {
    v5 = v3 + 2;
    v3[1] = 47;
  }
  *v5 = 0;
  return result;
}

uint64_t sub_1000257CC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  byte_100050E68 = 0;
  if (*(_BYTE *)(result + 41))
    result = __strlcpy_chk(&byte_100050E68, "/", 8, 8);
  if (*(_BYTE *)(v1 + 42))
    return __strlcpy_chk(&byte_100050E68, "/***", 8, 8);
  return result;
}

uint64_t sub_100025840(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  char *v8;
  int v9;
  int v10;
  size_t v11;
  int v12;
  char __s[8192];

  v11 = 0;
  while (1)
  {
    result = sub_10001AF48(a1, a2, &v11);
    if (!(_DWORD)result)
      sub_100039BF4(result);
    if (!v11)
      break;
    if (v11 >= 0x1FFF)
      sub_100039C08();
    v5 = sub_10001A524(a1, a2, __s, v11);
    if (!(_DWORD)v5)
      sub_100039BF4(v5);
    __s[v11] = 0;
    v12 = 0;
    v6 = strcspn(__s, " _");
    v7 = sub_100026478((unsigned __int8 *)__s, v6, &v12);
    if (v7)
      v8 = &__s[v6 + 1];
    else
      v8 = __s;
    if (v7)
      v9 = v12;
    else
      v9 = 0;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = v7;
    if (sub_100024D28((uint64_t)&unk_100050670, v8, v10, v9, 0) == -1)
      sub_100039C20();
  }
  return result;
}

unint64_t sub_100025990(char *__s1)
{
  unint64_t result;
  char *v3;
  size_t v4;

  if (*__s1 == 47)
  {
    result = __strlcpy_chk(byte_100050A48, __s1, 1024, 1024);
    if (result >= 0x400)
      sub_100039C38();
    qword_100050E48 = 0;
  }
  else
  {
    v3 = (char *)qword_100050E48;
    if (!qword_100050E48)
    {
      getcwd(byte_100050A48, 0x3FFuLL);
      v3 = &byte_100050A48[strlen(byte_100050A48)];
      qword_100050E48 = (uint64_t)v3;
    }
    *(_WORD *)v3 = 47;
    result = strcmp(__s1, ".");
    if ((_DWORD)result)
    {
      v4 = strlen(__s1);
      result = __strlcat_chk(byte_100050A48, __s1, 1024, 1024);
      if (result >= 0x400)
        sub_100039C58();
      if (__s1[v4 - 1] != 47)
      {
        result = __strlcat_chk(byte_100050A48, "/", 1024, 1024);
        if (result >= 0x400)
          sub_100039C58();
      }
    }
  }
  return result;
}

uint64_t sub_100025AA4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  ++qword_100050E50;
  return sub_100025AEC(a1, 5, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100025B28, (uint64_t)v4);
}

uint64_t sub_100025AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t result;

  result = sub_1000265D4((uint64_t)&unk_100050670, a1, a2, a3, a4, a5);
  if ((_DWORD)result == 2)
    sub_100039C78();
  return result;
}

uint64_t sub_100025B28(_QWORD *a1, unint64_t a2, const char *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  stat v19;
  char __str[1024];

  v7 = *a4;
  v8 = *((unsigned int *)a4 + 2);
  if (sub_1000267C0(a1, a2))
    return 2;
  memset(&v19, 0, sizeof(v19));
  snprintf(__str, 0x400uLL, "%s/%s", a3, *(const char **)(a2 + 16));
  if (stat(__str, &v19) == -1)
  {
    v18 = __error();
    if (*v18 != 2)
      sub_100039CA0((uint64_t)v18);
  }
  else
  {
    v10 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B00400FE4F2DFuLL);
    if (!v10)
      sub_100039CB4(0);
    v11 = v10;
    v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x10200401705F15EuLL);
    v11[3] = v12;
    if (!v12)
      sub_100039CB4(0);
    v13 = v12;
    v14 = strdup(&a3[v7]);
    v11[4] = v14;
    if (!v14)
      sub_100039CC8(0);
    *v13 = a1;
    v13[2] = -1;
    v11[2] = a2;
    v15 = *(_DWORD *)(a2 + 32);
    *((_BYTE *)v11 + 48) = (v15 & 0x800) == 0;
    v11[5] = qword_100050E50;
    v16 = *(_QWORD *)a2;
    *v11 = *(_QWORD *)a2;
    if (!v16)
      v16 = a2;
    *(_QWORD *)(v16 + 8) = v11;
    *(_QWORD *)a2 = v11;
    v11[1] = a2;
    if ((v15 & 0x80) != 0)
      v17 = 1;
    else
      v17 = (v15 >> 7) & 2;
    sub_100025400((uint64_t)v13, __str, v17, v15 & 0x1F80, 1, v8);
  }
  return 3;
}

uint64_t sub_100025CEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100025AEC(a1 + a2, 5, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100025D28, 0);
  --qword_100050E50;
  return result;
}

uint64_t sub_100025D28(int a1, const char ***a2, char *__s2)
{
  const char **v3;
  const char ***v5;
  const char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = *a2;
  if (*a2)
  {
    v5 = a2;
    if (!strcmp(v3[4], __s2))
    {
      v6 = *v3;
      v7 = (char *)v3[1];
      if (*v3)
      {
        *((_QWORD *)v6 + 1) = v7;
        v7 = (char *)v3[1];
      }
      else
      {
        v5[1] = (const char **)v7;
      }
      *(_QWORD *)v7 = v6;
      v8 = (char *)v3[3];
      if (*((_QWORD *)v8 + 3))
      {
        v9 = 0;
        do
        {
          v10 = *((_QWORD *)v8 + 1);
          v11 = (uint64_t *)(v10 + 48 * v9);
          if (*((_DWORD *)v11 + 6) == 5)
          {
            if (!*((_QWORD *)v8 + 5))
              sub_100039D2C();
            if (!*(_QWORD *)(*(_QWORD *)v8 + 40))
              sub_100039D54();
            v12 = *v11;
            v13 = v8;
            if (v12)
              sub_100039DA4();
            do
            {
              v14 = *((_QWORD *)v13 + 5);
              if (!v14)
                sub_100039D7C();
              *((_QWORD *)v13 + 5) = v14 - 1;
              v13 = *(char **)v13;
            }
            while (v13);
          }
          free(*(void **)(v10 + 48 * v9++ + 16));
        }
        while (v9 < *((_QWORD *)v8 + 3));
      }
      if (*((_QWORD *)v8 + 5))
        sub_100039D04();
      free(*((void **)v8 + 1));
      free(v8);
      free((void *)v3[4]);
      free(v3);
    }
    while (1)
    {
      v5 = (const char ***)*v5;
      if (!v5)
        break;
      if (!strcmp((const char *)v5[4], __s2))
        sub_100039CDC();
    }
  }
  return 3;
}

uint64_t sub_100025E64(char *__s, int a2, int a3, int a4)
{
  uint64_t result;
  char *v9;
  char *v10;
  _OWORD v11[64];
  char *v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;

  if (!a2 || (result = strcmp(__s, "."), (_DWORD)result) && (result = strcmp(__s, "./"), (_DWORD)result))
  {
    memset(v11, 0, 512);
    v13 = a2;
    v15 = 0;
    v14 = a4;
    v16 = a3;
    v9 = strrchr(__s, 47);
    if (v9)
      v10 = v9 + 1;
    else
      v10 = __s;
    v12 = v10;
    sub_100025AEC((uint64_t)__s, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100025F88, (uint64_t)v11);
    return v15;
  }
  return result;
}

uint64_t sub_100025F88(_QWORD *a1, unint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  char *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;

  if (sub_1000267C0(a1, a2))
    return 2;
  v8 = *(_DWORD *)(a2 + 24);
  if (v8 == 3)
    return 1;
  v9 = *(_DWORD *)(a4 + 1044);
  v10 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a4 + 1036) && (v10 & 0x20) != 0)
    return 3;
  result = 3;
  switch(v8)
  {
    case 1:
      if ((v10 & 4) == 0)
        goto LABEL_14;
      return result;
    case 2:
      goto LABEL_14;
    case 6:
    case 7:
      if (!v9)
        goto LABEL_14;
      return result;
    case 8:
    case 9:
      if (v9 != 1)
        return result;
LABEL_14:
      if (*(_BYTE *)(a2 + 41) && !*(_DWORD *)(a4 + 1032))
      {
        v12 = 0;
        goto LABEL_45;
      }
      if ((v10 & 1) != 0)
      {
        v11 = (char *)a4;
        if (!*(_BYTE *)a4)
        {
          if (*a3 == 47)
          {
            v11 = (char *)a4;
            if (strlcpy((char *)a4, a3, 0x400uLL) >= 0x400)
              sub_100039DF0();
          }
          else
          {
            if (strlcpy((char *)a4, byte_100050A48, 0x400uLL) >= 0x400)
              sub_100039E20();
            v11 = (char *)a4;
            if (strlcat((char *)a4, a3, 0x400uLL) >= 0x400)
            {
              *__error() = 63;
              err(3, "%s/%s", (const char *)a4, a3);
            }
          }
        }
      }
      else
      {
        v11 = (char *)a3;
      }
      if (*(_BYTE *)(a2 + 40))
      {
        if (*(_BYTE *)(a2 + 39))
        {
          v13 = *(_DWORD *)(a2 + 32);
          v14 = strcmp(*(const char **)(a4 + 1024), *(const char **)(a2 + 16));
          if (((v13 & 2) == 0) != ((_DWORD)v14 == 0))
            goto LABEL_41;
          v17 = *(_DWORD *)(a2 + 24) - 1;
          if (v17 >= 9 || ((0x1E3u >> v17) & 1) == 0)
            sub_100039DCC(v14, v15, v16);
        }
        else if (*(_BYTE *)(a2 + 38))
        {
          v18 = *(_DWORD *)(a2 + 32);
          v19 = strcmp(v11, *(const char **)(a2 + 16));
          if (((v18 & 2) == 0) != ((_DWORD)v19 == 0))
            goto LABEL_41;
          v17 = *(_DWORD *)(a2 + 24) - 1;
          if (v17 >= 9 || ((0x1E3u >> v17) & 1) == 0)
            sub_100039DCC(v19, v20, v21);
        }
        else if (*(_BYTE *)(a2 + 42))
        {
          v26 = strlen(*(const char **)(a2 + 16));
          v27 = strstr(v11, *(const char **)(a2 + 16));
          if (!v27 || v27 != v11 && *(v27 - 1) != 47 || v27[v26] != 47 && v27[v26])
            goto LABEL_41;
          v17 = *(_DWORD *)(a2 + 24) - 1;
          if (v17 >= 9 || ((0x1E3u >> v17) & 1) == 0)
            sub_100039DCC((uint64_t)v27, v28, v29);
        }
        else
        {
          v33 = strlen(v11);
          v34 = strlen(*(const char **)(a2 + 16));
          if (v33 < v34)
            goto LABEL_41;
          v35 = v34;
          v36 = *(_DWORD *)(a2 + 32);
          v37 = strcmp(&v11[v33 - v34], *(const char **)(a2 + 16));
          if (((v36 & 2) == 0) != ((_DWORD)v37 == 0) || v33 != v35 && v11[v33 + ~v35] != 47)
            goto LABEL_41;
          v17 = *(_DWORD *)(a2 + 24) - 1;
          if (v17 >= 9 || ((0x1E3u >> v17) & 1) == 0)
            sub_100039DCC(v37, v38, v39);
        }
        goto LABEL_44;
      }
      if (*(_BYTE *)(a2 + 39))
      {
        v11 = *(char **)(a4 + 1024);
        goto LABEL_39;
      }
      if (*(_BYTE *)(a2 + 38) || (v30 = *(__int16 *)(a2 + 36), v30 == -1))
      {
LABEL_39:
        if (v11)
          goto LABEL_40;
        goto LABEL_41;
      }
      v31 = 1;
      v32 = v11;
      break;
    default:
      return result;
  }
  while (*v32 == 47)
  {
    ++v31;
LABEL_62:
    ++v32;
  }
  if (*v32)
    goto LABEL_62;
  if (v30 > v31)
    goto LABEL_41;
  v40 = *v11;
  if (*v11)
  {
    v41 = (__int16)(v31 - v30);
    if (v41 >= 1)
    {
      do
      {
        LOWORD(v41) = v41 - (v40 == 47);
        v42 = *++v11;
        v40 = v42;
        if (v42)
          v43 = (unsigned __int16)v41 == 0;
        else
          v43 = 1;
      }
      while (!v43);
    }
  }
LABEL_40:
  v22 = *(_DWORD *)(a2 + 32);
  v23 = sub_100024784(*(unsigned __int8 **)(a2 + 16), v11, *(unsigned __int8 *)(a2 + 42));
  if (v23 != (v22 & 2) >> 1)
  {
LABEL_41:
    v12 = 0;
    result = 3;
    goto LABEL_45;
  }
  v17 = *(_DWORD *)(a2 + 24) - 1;
  if (v17 >= 9 || ((0x1E3u >> v17) & 1) == 0)
    sub_100039DCC(v23, v24, v25);
LABEL_44:
  result = 0;
  v12 = dword_100041F64[v17];
LABEL_45:
  *(_DWORD *)(a4 + 1040) = v12;
  return result;
}

uint64_t sub_1000263A0(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  v2[0] = v3;
  v2[1] = a1;
  sub_100025AEC(0, 0, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000263E4, (uint64_t)v2);
  return v3[0];
}

uint64_t sub_1000263E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD *)(a2 + 24);
  if (v4 == 4)
    return 2;
  if ((v4 - 1) < 2 || *(_DWORD *)(a4[1] + 16) >= 29)
  {
    v8 = *a4;
    sub_100025704(a2);
    sub_1000257CC(a2);
    sub_100021AF0(v8, "%s%s%s", v9, v10, v11, v12, v13, v14, (char)&byte_100050E58);
  }
  return 3;
}

uint64_t sub_100026478(unsigned __int8 *a1, size_t __n, _DWORD *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  size_t v10;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if (!__n)
    return 0;
  v6 = memchr(a1, 44, __n);
  v7 = v6;
  v8 = 0;
  v9 = v6 + 1;
  if (v6)
    v10 = v6 - a1;
  else
    v10 = __n;
  while (1)
  {
    if (!strncmp(*(const char **)&dword_10004DCA0[v8 + 2], (const char *)a1, v10))
    {
      if (v7)
        goto LABEL_14;
      goto LABEL_24;
    }
    if (LOBYTE(dword_10004DCA0[v8 + 1]) == *a1)
      break;
    v8 += 4;
    if (v8 == 36)
      return 0;
  }
  if (!v7)
  {
    v9 = a1 + 1;
    v12 = a1[1];
    if (!a1[1])
      goto LABEL_26;
  }
LABEL_14:
  v13 = (unsigned __int8 *)(a1 - v9 + __n);
  if (!v13)
  {
LABEL_24:
    v12 = 0;
    goto LABEL_26;
  }
  v14 = 0;
  v12 = 0;
  while (1)
  {
    v15 = v14[(_QWORD)v9];
    if (v15 != 47)
      break;
    v16 = 1;
LABEL_22:
    v12 |= v16;
    if (++v14 == v13)
      goto LABEL_26;
  }
  v17 = 0;
  while (1)
  {
    v18 = v17 + 8;
    if (v17 == 80)
      break;
    v19 = byte_100041E3C[v17 + 12];
    v17 += 8;
    if (v19 == v15)
    {
      v16 = *(_DWORD *)&byte_100041E3C[v18];
      goto LABEL_22;
    }
  }
  if (v13 != v14)
    return 0;
LABEL_26:
  if (a3)
    *a3 = v12;
  return dword_10004DCA0[v8];
}

uint64_t sub_1000265D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (!*(_QWORD *)(a1 + 24))
    return 3;
  v10 = 0;
  v11 = 0;
  v12 = 3;
  while (1)
  {
    v13 = *(_QWORD *)(a1 + 8);
    if ((_DWORD)a3 && *(_DWORD *)(v13 + 48 * v11 + 24) != (_DWORD)a3)
      goto LABEL_25;
    v14 = (uint64_t **)(v13 + 48 * v11);
    if ((_DWORD)a4 && *(_DWORD *)(v13 + 48 * v11 + 24) == 5)
    {
      v15 = 3;
LABEL_11:
      v12 = v15;
      v16 = v10;
      goto LABEL_13;
    }
    v15 = a5(a1, v13 + 48 * v11, a2, a6);
    v12 = 3;
    if ((_DWORD)v15 == 1)
      break;
    if ((_DWORD)v15 != 2)
    {
      if (!(_DWORD)v15)
        return v15;
      goto LABEL_11;
    }
LABEL_25:
    if ((unint64_t)++v11 >= *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 1) != 0)
        v20 = 1;
      else
        v20 = 3;
      v15 = v12;
      if ((_DWORD)v12 == 3)
        return v20;
      return v15;
    }
  }
  v16 = 1;
LABEL_13:
  if (*(_DWORD *)(v13 + 48 * v11 + 24) != 5)
  {
LABEL_24:
    v10 = v16;
    goto LABEL_25;
  }
  v17 = *v14;
  if (!*v14)
  {
LABEL_22:
    if ((_DWORD)a4)
    {
      v18 = a5(a1, (uint64_t)v14, a2, a6);
      v19 = v18;
      v15 = v18;
      v10 = 1;
      v12 = 3;
      switch(v19)
      {
        case 0:
          return v15;
        case 1:
          goto LABEL_25;
        case 2:
          sub_100039E78();
        case 3:
          goto LABEL_24;
        default:
          sub_100039E50();
      }
    }
    goto LABEL_24;
  }
  while (1)
  {
    if (*((_BYTE *)v17 + 48) || qword_100050E50 <= (unint64_t)v17[5])
    {
      v12 = sub_1000265D4(v17[3], a2, a3, a4, a5, a6);
      if ((_DWORD)v12 == 1)
      {
        v12 = 3;
        goto LABEL_22;
      }
      if ((_DWORD)v12 != 3)
        break;
    }
    v17 = (uint64_t *)*v17;
    if (!v17)
      goto LABEL_22;
  }
  if ((_DWORD)v12)
    sub_100039EA0();
  return v12;
}

BOOL sub_1000267C0(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[1];
  if (v2 > a2 || v2 + 48 * a1[3] <= a2)
    sub_100039EC8();
  v3 = a1[2];
  return v3 != -1 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v2) >> 4) < v3;
}

void sub_100026824(uint64_t a1, const char *a2)
{
  err(10, a2);
}

void sub_10002682C(uint64_t a1, const char *a2)
{
  err(3, a2);
}

void sub_100026834(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1061, a4);
}

void sub_10002683C(uint64_t a1, const char *a2)
{
  err(22, a2);
}

uint64_t sub_100026844(_DWORD *a1, void **a2, size_t *a3, size_t *a4, _QWORD *a5, uint64_t a6, int a7)
{
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  void **v20;
  const char *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;

  if (!sub_10001ABD0((uint64_t)a1, a2, a3, a4, 4))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    goto LABEL_24;
  }
  sub_10001ACA0(a1, (uint64_t)*a2, a5, *a3, a7);
  if ((int)a1[65] < 29)
    return 1;
  if (!sub_10001ABD0((uint64_t)a1, a2, a3, a4, 2))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    goto LABEL_24;
  }
  v14 = a7;
  v15 = a6 + 152 * a7;
  v17 = *(_DWORD *)(v15 + 116);
  v16 = (int *)(v15 + 116);
  sub_10001ACF0(a1, (uint64_t)*a2, a5, *a3, v17);
  v18 = *v16;
  if ((*v16 & 0x800) != 0)
  {
    if (!sub_10001ABD0((uint64_t)a1, a2, a3, a4, 1))
    {
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
      goto LABEL_24;
    }
    sub_10001ACC8(a1, (uint64_t)*a2, a5, *a3, *(_BYTE *)(a6 + 152 * v14 + 120));
    v18 = *v16;
  }
  if ((v18 & 0x1000) == 0)
    return 1;
  v19 = a6 + 152 * v14;
  v21 = *(const char **)(v19 + 88);
  v20 = (void **)(v19 + 88);
  v22 = strlen(v21);
  v23 = v22;
  v24 = 1;
  if (v22 > 0x7F)
    v24 = 2;
  if (sub_10001ABD0((uint64_t)a1, a2, a3, a4, v24 + v22))
  {
    sub_10001AA50(a1, (uint64_t)*a2, a5, *a3, *v20, v23);
    return 1;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_24:
    sub_100039EF0();
LABEL_25:
  sub_10001C094("io_lowbuffer_alloc");
  return 0;
}

uint64_t sub_100026A9C(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, const char **a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __darwin_time_t v32;
  __darwin_suseconds_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  NSObject *v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t i;
  __int16 v50;
  char revents;
  int v52;
  unint64_t v53;
  int *v54;
  int *v55;
  int v56;
  int v57;
  unint64_t *v58;
  uint64_t *v59;
  int v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  ssize_t v76;
  ssize_t v77;
  double v78;
  double v79;
  unint64_t v80;
  double v81;
  uint64_t v82;
  int *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t (*v95)(uint64_t);
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  uint64_t v120;
  char *v121;
  char v122;
  int v123;
  _BOOL4 v124;
  uint64_t v125;
  int v126;
  int *v127;
  int *v128;
  int *v129;
  int *v130;
  timeval v131;
  timeval v132;
  timeval v133;
  timeval v134;
  timeval v135;
  size_t v136;
  size_t v137;
  void *v138;
  stat v139;
  int *v140[5];
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  void **v145;
  uint64_t v146;
  int *v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char **v156;
  _QWORD v157[2];
  void *v158[4];
  uint8_t v159[4];
  uint64_t v160;
  __int16 v161;
  char *v162;
  uint8_t buf[4];
  unint64_t v164;
  pollfd v165;
  int v166;
  __int16 v167;
  __int16 v168;
  int v169;
  __int16 v170;
  __int16 v171;

  memset(v158, 0, sizeof(v158));
  v156 = 0;
  v154 = 0;
  v155 = 0;
  v152 = 0;
  v153 = 0;
  v150 = 0;
  v151 = 0;
  v147 = 0;
  memset(&v139, 0, sizeof(v139));
  v137 = 0;
  v138 = 0;
  *(_QWORD *)&v135.tv_usec = 0;
  v136 = 0;
  v135.tv_sec = 0;
  v10 = *(_DWORD *)(a1 + 260);
  v132.tv_sec = 0;
  *(_QWORD *)&v132.tv_usec = 0;
  if (v10 <= 28)
    v11 = 1;
  else
    v11 = 2;
  if (v10 <= 28)
    v12 = 4;
  else
    v12 = 6;
  v131.tv_sec = 0;
  *(_QWORD *)&v131.tv_usec = 0;
  sub_100010B20(&v152);
  qword_100050F08 = (uint64_t)&v152;
  v157[0] = *(unsigned int *)(*(_QWORD *)a1 + 12);
  v157[1] = (char *)&v150 + 4;
  *(_QWORD *)(a1 + 200) = v157;
  v142 = 0u;
  v146 = 0;
  v143 = 0u;
  v144 = 0;
  memset(v140, 0, sizeof(v140));
  v148 = 0;
  v149 = &v148;
  DWORD2(v142) = -1;
  v141 = -1;
  v145 = (void **)sub_100001DD0();
  v13 = *(_DWORD **)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 432))
  {
    if (a4 != 1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003A4B8();
      sub_10001BF64("Only one src dir allowed with --files-from");
      goto LABEL_194;
    }
    if (!sub_100014168(a1))
      goto LABEL_194;
    if (chdir(*a5) == -1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003A430();
      sub_10001BFE8("%s: chdir", v14, v15, v16, v17, v18, v19, v20, (char)*a5);
      goto LABEL_194;
    }
    a5 = *(const char ***)(a1 + 168);
    a4 = *(_QWORD *)(a1 + 176);
    v13 = *(_DWORD **)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 496))
    {
      if (v13[1])
        sub_10003A490();
      *(_DWORD *)(a1 + 128) = 1;
    }
  }
  if (v13[1]
    || v13[24]
    && (!v13[25] || *(int *)(a1 + 260) >= 29)
    && (sub_100025560((_DWORD *)a1, a3), *(_DWORD *)(*(_QWORD *)a1 + 4)))
  {
    sub_100025840(a1, a2);
  }
  v134.tv_sec = 0;
  *(_QWORD *)&v134.tv_usec = 0;
  gettimeofday(&v134, 0);
  if (!sub_100012454(a1, a4, (char **)a5, (uint64_t)&v152))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100039F1C();
    sub_10001C094("flist_gen");
    goto LABEL_194;
  }
  v133.tv_sec = 0;
  *(_QWORD *)&v133.tv_usec = 0;
  gettimeofday(&v133, 0);
  v21 = v133.tv_usec - v134.tv_usec + 1000000;
  if (v133.tv_usec >= v134.tv_usec)
    v21 = v133.tv_usec - v134.tv_usec;
  *(_QWORD *)(a1 + 112) = 1000 * (v133.tv_sec - v134.tv_sec + ((v133.tv_usec - v134.tv_usec) >> 31)) + v21 / 1000;
  *(_QWORD *)(a1 + 64) = v153;
  gettimeofday(&v132, 0);
  v22 = *(_QWORD *)(a1 + 48);
  if (!sub_10000FD74(a1, a2, a3, (uint64_t)v152, v153, v23, v24, v25))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100039F48();
    sub_10001C094("flist_send");
    goto LABEL_194;
  }
  if (!sub_10001A850(a1, a3, *(_QWORD *)(a1 + 240) != 0))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003516C();
    sub_10001C094("io_write_int");
    goto LABEL_194;
  }
  gettimeofday(&v131, 0);
  v32 = v131.tv_sec - v132.tv_sec;
  v135.tv_sec = v131.tv_sec - v132.tv_sec;
  v33 = v131.tv_usec - v132.tv_usec;
  v135.tv_usec = v131.tv_usec - v132.tv_usec;
  if (v131.tv_usec - v132.tv_usec < 0)
  {
    v135.tv_sec = --v32;
    v33 += 1000000;
    v135.tv_usec = v33;
  }
  *(_QWORD *)(a1 + 120) = 1000 * v32 + v33 / 1000;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 48) - v22;
  v34 = v153;
  v35 = *(_QWORD *)a1;
  v36 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v153)
  {
    if (v36)
      goto LABEL_60;
  }
  else if (v36)
  {
    if (dword_100050EE8)
    {
      v37 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "sender has empty file list: exiting", buf, 2u);
      }
    }
    sub_10001C1CC("sender has empty file list: exiting");
    goto LABEL_207;
  }
  if (dword_100050EE8)
  {
    v38 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v164 = v34;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Transfer starting: %zu files", buf, 0xCu);
      LOBYTE(v34) = v153;
    }
  }
  sub_10001BE54(0, "Transfer starting: %zu files", v26, v27, v28, v29, v30, v31, v34);
  v35 = *(_QWORD *)a1;
LABEL_60:
  if (*(_DWORD *)(v35 + 204))
  {
    v155 = a1;
    v156 = &v152;
    if (!sub_10001A1F8(100, (uint64_t)sub_100028058, (uint64_t)&v155))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003A404();
      sub_10001BF64("Failed to install remove-source-files handler; exiting");
LABEL_207:
      v97 = 1;
      goto LABEL_195;
    }
  }
  if (!sub_10001B428(a1, v158, 0x14uLL))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100039F74();
    sub_10001C094("iobuf_alloc");
    goto LABEL_194;
  }
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v125 = 0;
  v126 = 0;
  v39 = 0;
  v165.fd = a2;
  v165.events = 1;
  v166 = -1;
  v167 = 4;
  v169 = -1;
  v170 = 1;
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_64:
        if (v165.fd == -1)
          sub_100039FA0();
        if (!sub_10001B4D8((uint64_t)v158))
          break;
        if (poll(&v165, 3u, 0) != -1)
          goto LABEL_73;
        if (*__error() != 4)
        {
          if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_218;
          goto LABEL_217;
        }
      }
      v48 = poll(&v165, 3u, dword_100050F00);
      if (v48 != -1)
        break;
      if (*__error() != 4)
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_218;
LABEL_217:
        sub_10003899C();
LABEL_218:
        v102 = "poll";
LABEL_219:
        sub_10001BFE8(v102, v41, v42, v43, v44, v45, v46, v47, v122);
        goto LABEL_194;
      }
    }
    if (!v48)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_1000389C8();
      sub_10001BF64("poll: timeout");
      goto LABEL_194;
    }
LABEL_73:
    for (i = 6; i != 30; i += 8)
    {
      v50 = *(_WORD *)((char *)&v165.fd + i);
      if ((v50 & 0x28) != 0)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100038970();
        sub_10001BF64("poll: bad fd");
        goto LABEL_194;
      }
      if ((v50 & 0x10) != 0)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100039B30();
        sub_10001BF64("poll: hangup");
        goto LABEL_194;
      }
    }
    revents = v165.revents;
    if (*(_DWORD *)(a1 + 128))
    {
      if ((v165.revents & 1) != 0)
        break;
    }
LABEL_86:
    if ((revents & 1) != 0 && (!*(_DWORD *)(a1 + 128) || *(_QWORD *)(a1 + 136)))
    {
      if (!sub_10001B4E0(a1, v158, a2))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003A3D8();
        sub_10001C094("iobuf_fill");
        goto LABEL_194;
      }
      revents = v165.revents & 0xFE;
      v165.revents &= ~1u;
    }
    if ((revents & 1) == 0 && !sub_10001B4D8((uint64_t)v158) || v129 || v39)
    {
      v54 = v128;
    }
    else
    {
      v53 = sub_10001B4D8((uint64_t)v158);
      if (v53 == 4)
      {
        if (sub_10001BA4C(v158) != -1 && v10 > 28)
          goto LABEL_98;
      }
      else if (v53 < v12)
      {
        goto LABEL_98;
      }
      sub_10001BA78(v158, &v150);
      if ((_DWORD)v150 == -1)
      {
        v39 = v126 >= (int)v11;
        ++HIDWORD(v150);
        ++v126;
      }
      else
      {
        v39 = 0;
      }
      if (!sub_1000282F4((int *)a1, (uint64_t)&v148, v150, (uint64_t)v152, v153, v158, &v147))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100039FC8();
        sub_10001C094("send_dl_enqueue");
        goto LABEL_194;
      }
      v54 = v147;
      if ((_DWORD)v150 == -1)
      {
        v127 = v147;
        v129 = v147;
        if (v147)
          sub_10003A3B0();
      }
      else
      {
        v127 = v147;
        v129 = v147;
      }
    }
    v128 = v54;
    if ((v165.revents & 1) != 0)
    {
      if (!v129)
      {
        v129 = 0;
        goto LABEL_134;
      }
    }
    else if (!sub_10001B4D8((uint64_t)v158) || (v54 = v128, !v127))
    {
      v129 = v127;
      goto LABEL_134;
    }
    v55 = v54 + 6;
    v56 = v54[6];
    if (v56 && v56 != 2)
    {
      v130 = v54 + 6;
      if (v56 != 1)
        goto LABEL_126;
      v57 = sub_1000286B0(v158, (uint64_t)v152, v54);
      if (v57 < 0)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003A358();
        sub_10001C094("sender_get_iflags");
        return 0;
      }
      if (!v57)
      {
        v54 = v128;
        v56 = *v130;
        goto LABEL_126;
      }
      v54 = v128;
      if ((v152[152 * *v128 + 117] & 0x80) == 0)
        goto LABEL_129;
      if (*(_DWORD *)(*(_QWORD *)a1 + 36) == 2)
      {
        v54 = v128;
        *v130 = 3;
LABEL_128:
        *((_QWORD *)v54 + 7) = 0;
        v59 = v149;
        *((_QWORD *)v54 + 8) = v149;
        *v59 = (uint64_t)v54;
        v149 = (uint64_t *)(v54 + 14);
        v147 = 0;
        v128 = 0;
        goto LABEL_130;
      }
      v54 = v128;
      v55 = v130;
      *v130 = 0;
    }
    v58 = sub_10000251C(a1, a2, v158, *(_QWORD *)&v152[152 * *v54], *((_QWORD *)v54 + 1), (uint64_t)(v54 + 4), v55, v40);
    v54 = v128;
    *((_QWORD *)v128 + 1) = v58;
    v56 = v128[6];
    if (!v56)
      goto LABEL_130;
    if (!v58)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003A384();
      sub_10001C094("blk_recv");
      return 0;
    }
LABEL_126:
    if (v56 == 4)
    {
LABEL_129:
      free(v54);
      v128 = 0;
      v147 = 0;
      goto LABEL_130;
    }
    if (v56 == 3)
      goto LABEL_128;
LABEL_130:
    v165.revents &= ~1u;
    v60 = sub_1000196F4(a1, a2);
    if (v60 < 0)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_239;
      goto LABEL_240;
    }
    v127 = v128;
    v129 = v128;
    if (v60)
      goto LABEL_64;
LABEL_134:
    v123 = v10;
    v124 = v39;
    if ((v171 & 1) != 0)
    {
      if (!v140[0])
        sub_10003A2B8();
      if (DWORD2(v142) == -1)
        sub_10003A2E0();
      if (v141 != -1)
        sub_10003A330();
      if ((_QWORD)v142)
        sub_10003A308();
      v61 = v152;
      v62 = *v140[0];
      if (fstat(SDWORD2(v142), &v139) == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000367CC();
        sub_10001BFE8("%s: fstat", v63, v64, v65, v66, v67, v68, v40, *(_QWORD *)&v61[152 * v62]);
        goto LABEL_194;
      }
      *(_QWORD *)&v142 = v139.st_size;
      if (v139.st_size)
      {
        v141 = (uint64_t)mmap(0, v139.st_size, 1, 1, SDWORD2(v142), 0);
        if (v141 == -1)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_1000365A4();
          sub_10001BFE8("%s: mmap", v69, v70, v71, v72, v73, v74, v40, *(_QWORD *)&v61[152 * v62]);
          goto LABEL_194;
        }
      }
      v169 = -1;
      v166 = a3;
    }
    if ((v168 & 4) != 0 && v137)
    {
      if (v169 != -1)
        sub_10003A290();
      if (v137 == v125)
        sub_10003A020();
      v75 = a3;
      if (HIDWORD(v142) != 6)
      {
        v75 = a3;
        if (*(_DWORD *)(a1 + 188) != -1)
        {
          if (*(_DWORD *)(*(_QWORD *)a1 + 36) == 1)
            v75 = *(_DWORD *)(a1 + 188);
          else
            v75 = a3;
        }
      }
      v76 = write(v75, (char *)v138 + v125, v137 - v125);
      if (v76 == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003A048();
        v102 = "write";
        goto LABEL_219;
      }
      v77 = v76;
      if (!sub_100019B04(a1, v75, (char *)v138 + v125, v76))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003A074();
        sub_10001C094("io_data_written");
        goto LABEL_194;
      }
      v125 += v77;
      if (v125 == v137)
      {
        v125 = 0;
        v137 = 0;
      }
      v168 &= ~4u;
      if (*(_QWORD *)(*(_QWORD *)a1 + 472))
      {
        gettimeofday(&v135, 0);
        v78 = (double)v135.tv_usec / 1000000.0 + (double)v135.tv_sec;
        v79 = *(double *)(a1 + 224);
        if (v79 == 0.0)
        {
          *(double *)(a1 + 224) = v78;
        }
        else
        {
          v80 = *(_QWORD *)(a1 + 48);
          v81 = v78 - v79;
          v82 = *(_QWORD *)(*(_QWORD *)a1 + 472);
          if ((double)v80 / v81 > (double)v82)
            usleep((((double)(v80 / v82) - v81) * 1000.0 * 1000.0));
        }
      }
    }
    v83 = v140[0];
    if ((v168 & 4) != 0 && v140[0])
    {
      if (v169 != -1)
        sub_10003A268();
      if (v125 | v137)
        sub_10003A0A0();
      if (*(_DWORD *)(*(_QWORD *)a1 + 552))
        v84 = sub_100028784(a1, &v151, v140, &v138, &v137, &v136, (uint64_t)v152, v40);
      else
        v84 = sub_10002955C(a1, &v151, v140, &v138, &v137, &v136, (uint64_t)v152, v40);
      if (!v84)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003A0C8();
        sub_10001C094("send_up_fsm");
        goto LABEL_194;
      }
      if (v151 > v11)
      {
        if (v148)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003A14C();
          sub_10001BF64("phases complete with files still queued");
          goto LABEL_194;
        }
        if (!sub_10002AAF8(a1, a3, v85, v86, v87, v88, v89, v90))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003A0F4();
          sub_10001C094("sess_stats_end");
          goto LABEL_194;
        }
        v103 = sub_100029C50(a1, (uint64_t)&v152, v158, a2, a3);
        if ((_DWORD)v103)
        {
          v97 = v103;
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003A120();
          sub_10001C094("sender_finalize");
        }
        else
        {
          if (dword_100050EE8)
          {
            v119 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_INFO, "sender finished updating", buf, 2u);
            }
          }
          v97 = 1;
          sub_10001BE54(1, "sender finished updating", v104, v105, v106, v107, v108, v109, v122);
        }
        goto LABEL_195;
      }
      v83 = v140[0];
    }
    v10 = v123;
    v39 = v124;
    if (!v83)
    {
      if (v169 != -1)
        sub_10003A240();
      if (DWORD2(v142) != -1)
        sub_10003A218();
      if (v141 != -1)
        sub_10003A1F0();
      if ((_QWORD)v142)
        sub_10003A1C8();
      if (v137 | v125)
        sub_10003A178();
      v125 = 0;
      v166 = -1;
      v91 = v148;
      v140[0] = (int *)v148;
      v10 = v123;
      v39 = v124;
      if (v148)
      {
        if (*(_DWORD *)(v148 + 24) != 3)
          sub_10003A1A0();
        v92 = *(_QWORD *)(v148 + 56);
        v93 = *(_QWORD **)(v148 + 64);
        if (v92)
        {
          *(_QWORD *)(v92 + 64) = v93;
          v93 = *(_QWORD **)(v91 + 64);
        }
        else
        {
          v149 = *(uint64_t **)(v148 + 64);
        }
        *v93 = v92;
        sub_100001ED4((uint64_t)v145, *((_QWORD *)v140[0] + 1));
        if (*v140[0] == -1)
        {
          v125 = 0;
          v166 = a3;
        }
        else
        {
          v94 = &v152[152 * *v140[0]];
          v95 = (uint64_t (*)(uint64_t))*((_QWORD *)v94 + 16);
          if (v95)
          {
            v96 = v95(a1);
          }
          else
          {
            v122 = 0;
            v96 = open(*(const char **)v94, 4);
          }
          DWORD2(v142) = v96;
          if (v96 == -1)
          {
            if (dword_100050EE8)
            {
              v110 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
                v120 = *(_QWORD *)&v152[152 * *v140[0]];
                v121 = getcwd((char *)buf, 0x400uLL);
                *(_DWORD *)v159 = 136315394;
                v160 = v120;
                v161 = 2080;
                v162 = v121;
                _os_log_error_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "%s: open (2) in %s", v159, 0x16u);
              }
            }
            v111 = *(_QWORD *)&v152[152 * *v140[0]];
            getcwd((char *)buf, 0x400uLL);
            sub_10001BFE8("%s: open (2) in %s", v112, v113, v114, v115, v116, v117, v118, v111);
            goto LABEL_194;
          }
          v125 = 0;
          v169 = v96;
        }
        v10 = v123;
        v39 = v124;
        goto LABEL_64;
      }
    }
  }
  if (sub_10001987C((_QWORD *)a1, a2))
  {
    if (*(_QWORD *)(a1 + 136) || v39)
    {
      revents = v165.revents;
      goto LABEL_86;
    }
    v52 = sub_1000196F4(a1, a2);
    if ((v52 & 0x80000000) == 0)
    {
      if (!v52)
      {
        revents = v165.revents & 0xFE;
        v165.revents &= ~1u;
        goto LABEL_86;
      }
LABEL_98:
      v39 = 0;
      goto LABEL_64;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_239:
      sub_100039FF4();
LABEL_240:
    sub_10001C094("io_read_check");
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100038B1C();
    sub_10001C094("io_read_flush");
  }
LABEL_194:
  v97 = 0;
LABEL_195:
  sub_100029F3C((uint64_t)v140);
  while (1)
  {
    v98 = v148;
    if (!v148)
      break;
    v99 = *(_QWORD *)(v148 + 56);
    v100 = *(_QWORD **)(v148 + 64);
    if (v99)
    {
      *(_QWORD *)(v99 + 64) = v100;
      v100 = *(_QWORD **)(v98 + 64);
    }
    else
    {
      v149 = *(uint64_t **)(v148 + 64);
    }
    *v100 = v99;
    free(*(void **)(v98 + 8));
    free((void *)v98);
  }
  sub_10000FD10(v152, v153);
  free(v138);
  sub_10000201C(v145);
  sub_100014104(a1);
  return v97;
}

uint64_t sub_100028058(_QWORD *a1, uint64_t a2, size_t a3)
{
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  const char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  unsigned int v25;
  uint64_t v26;
  stat v27;

  v26 = 0;
  v25 = 0;
  sub_10001B194(a2, &v26, a3, &v25);
  if (v26 != a3)
  {
    if (dword_100050EE8)
    {
      v16 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003A5A4(a3, v16, v17, v18, v19, v20, v21, v22);
    }
    sub_10001BF64("bad success payload size %zu");
    return 0;
  }
  v5 = v25;
  if ((v25 & 0x80000000) != 0 || (v6 = (uint64_t *)a1[1], v6[1] <= (unint64_t)v25))
  {
    if (dword_100050EE8)
    {
      v23 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        v27.st_dev = 67109120;
        *(_DWORD *)&v27.st_mode = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "success idx %d out of range", (uint8_t *)&v27, 8u);
      }
    }
    sub_10001BF64("success idx %d out of range");
    return 0;
  }
  if (*(_DWORD *)(*(_QWORD *)*a1 + 204))
  {
    memset(&v27, 0, sizeof(v27));
    v7 = *v6;
    v8 = (const char **)(*v6 + 152 * v25);
    if (lstat(*v8, &v27) != -1)
    {
      if (v27.st_size == *(_QWORD *)(v7 + 152 * v5 + 40)
        && v27.st_mtimespec.tv_sec == *(_QWORD *)(v7 + 152 * v5 + 48))
      {
        if (unlink(*v8) == -1)
        {
          if (dword_100050EE8)
          {
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003A4E4();
          }
          sub_10001BFE8("%s: unlink", v9, v10, v11, v12, v13, v14, v15, (char)*v8);
        }
      }
      else
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003A544();
        sub_10001BF64("%s: not removed, size or mtime changed", *v8);
      }
    }
  }
  return 1;
}

uint64_t sub_1000282F4(int *a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, void **a6, _QWORD *a7)
{
  int *v14;
  int v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v27;
  int v28;
  const char *v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  char v33;

  if (a3 == -1)
  {
    v17 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B00408FA80C24uLL);
    if (!v17)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034E48();
      v29 = "calloc";
      goto LABEL_27;
    }
    *(_DWORD *)v17 = -1;
    v17[1] = 0;
    *((_DWORD *)v17 + 6) = 3;
    v17[7] = 0;
    v25 = *(_QWORD **)(a2 + 8);
    v17[8] = v25;
    *v25 = v17;
    *(_QWORD *)(a2 + 8) = v17 + 7;
    *a7 = 0;
    return 1;
  }
  if ((a3 & 0x80000000) != 0 || a3 >= a5)
  {
    if (dword_100050EE8)
    {
      v27 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003A754(a3, a5, v27);
    }
    sub_10001BF64("file index out of bounds: invalid %d out of %zu");
    return 0;
  }
  v14 = (int *)(a4 + 152 * a3 + 116);
  if (a1[65] <= 28)
  {
    LOWORD(v15) = 0x8000;
    *v14 = 0x8000;
LABEL_16:
    v28 = *(_WORD *)(a4 + 152 * a3 + 24) & 0xF000;
    if (v28 == 40960)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003A6F4();
      sub_10001BF64("blocks requested for symlink: %s");
      return 0;
    }
    if (v28 != 0x8000)
    {
      if (v28 == 0x4000)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003A694();
        sub_10001BF64("blocks requested for directory: %s");
      }
      else
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003A634();
        sub_10001BF64("blocks requested for special: %s");
      }
      return 0;
    }
    goto LABEL_29;
  }
  sub_10001BB30(a6, (_DWORD *)(a4 + 152 * a3 + 116));
  v15 = *v14;
  if (*v14 == 0x2000)
    return 1;
  if ((v15 & 0x8000) != 0)
    goto LABEL_16;
LABEL_29:
  if ((v15 & 0x1000) != 0)
  {
    v30 = a4 + 152 * a3;
    free(*(void **)(v30 + 88));
    *(_QWORD *)(v30 + 88) = 0;
    if (!sub_10001B428((uint64_t)a1, a6, 0x400uLL))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100039F74();
      sub_10001C094("iobuf_alloc");
      return 0;
    }
  }
  v31 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B00408FA80C24uLL);
  if (v31)
  {
    *(_DWORD *)v31 = a3;
    v31[1] = 0;
    if (*(_DWORD *)(*(_QWORD *)a1 + 36) == 2)
      v32 = 3;
    else
      v32 = 0;
    if (a1[65] > 28)
      v32 = 1;
    *((_DWORD *)v31 + 6) = v32;
    *a7 = v31;
    return 1;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_10003A608();
  v29 = "callloc";
LABEL_27:
  sub_10001BFE8(v29, v18, v19, v20, v21, v22, v23, v24, v33);
  return 0;
}

uint64_t sub_1000286B0(_QWORD *a1, uint64_t a2, int *a3)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  int v10;
  uint64_t result;
  char **v12;
  unsigned __int8 v13;

  v6 = *a3;
  v7 = a2 + 152 * *a3;
  v10 = *(_DWORD *)(v7 + 116);
  v9 = (unsigned int *)(v7 + 116);
  LOWORD(v8) = v10;
  if ((v10 & 0x800) != 0)
  {
    v13 = 0;
    result = sub_10001B4D8((uint64_t)a1);
    if (!result)
      return result;
    sub_10001BA0C(a1, &v13);
    *(_DWORD *)(a2 + 152 * v6 + 120) = v13;
    v8 = *v9;
    if ((*v9 & 0x1000) != 0)
    {
      v8 = v8 & 0xFFFBF7FF | 0x40000;
      *v9 = v8;
    }
  }
  if ((v8 & 0x1000) != 0)
  {
    v12 = (char **)(a3 + 8);
    result = sub_10001BBCC(a1, v12);
    if ((int)result < 1)
      return result;
    *(_QWORD *)(a2 + 152 * v6 + 88) = *v12;
    if ((*v9 & 0x40000) != 0)
      *v9 = *v9 & 0xFFFBF7FF | 0x800;
  }
  return 1;
}

uint64_t sub_100028784(uint64_t a1, _QWORD *a2, int **a3, void **a4, size_t *a5, size_t *a6, uint64_t a7, uint64_t a8)
{
  int *v14;
  int *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  _DWORD *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  int v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  size_t v52;
  int v53;
  uint64_t v54;
  NSObject *v55;
  unint64_t v56;
  int v57;
  uint64_t result;
  int v59;
  NSObject *v60;
  NSObject *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  void *v71;
  NSObject *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int **v88;
  char *__src;
  _BYTE *__srca;
  void **v91;
  size_t *v92;
  size_t *v93;
  _DWORD *v94;
  _DWORD *v95;
  uint64_t v96;
  uint8_t buf[4];
  unint64_t v98;
  __int16 v99;
  unint64_t v100;

  v96 = 0;
  switch(*((_DWORD *)a3 + 15))
  {
    case 0:
      v53 = **a3;
      if ((v53 & 0x80000000) == 0)
      {
        v54 = *(_QWORD *)a1;
        if (*(_DWORD *)(*(_QWORD *)a1 + 36))
        {
          if (!*(_DWORD *)(v54 + 4))
          {
            if (dword_100050EE8)
            {
              v55 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
              {
                v56 = *(_QWORD *)(a7 + 152 * v53 + 16);
                *(_DWORD *)buf = 136315138;
                v98 = v56;
                _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                v53 = **a3;
              }
            }
            sub_10001BE54(0, "%s", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(_QWORD *)(a7 + 152 * v53 + 16));
            v53 = **a3;
          }
          sub_100026844((_DWORD *)a1, a4, a5, a6, &v96, a7, v53);
          goto LABEL_61;
        }
        if (*((_DWORD *)a3 + 14) == -1)
          sub_10003AA1C();
        if (!*(_DWORD *)(v54 + 4))
        {
          if (dword_100050EE8)
          {
            v61 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
            {
              v62 = *(_QWORD *)(a7 + 152 * v53 + 16);
              *(_DWORD *)buf = 136315138;
              v98 = v62;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
              v53 = **a3;
            }
          }
          sub_10001BE54(0, "%s", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(_QWORD *)(a7 + 152 * v53 + 16));
          v53 = **a3;
        }
        sub_100026844((_DWORD *)a1, a4, a5, a6, &v96, a7, v53);
        if (sub_10001ABD0(a1, a4, a5, a6, 16))
        {
          sub_100002494((uint64_t)buf, *((int **)*a3 + 1));
          sub_10001A964((_DWORD *)a1, (uint64_t)*a4, &v96, *a5, buf, 0x10uLL);
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
            sub_10003AA44();
          sub_10001BE54(2, "%s: primed for %jd B total", v63, v64, v65, v66, v67, v68, *(_QWORD *)(a7 + 152 * **a3));
          result = 1;
          *((_DWORD *)a3 + 15) = 1;
          return result;
        }
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_124;
        goto LABEL_123;
      }
      if (sub_10001ABD0(a1, a4, a5, a6, 4))
      {
        sub_10001ACA0((_DWORD *)a1, (uint64_t)*a4, &v96, *a5, -1);
        v57 = 6;
        goto LABEL_62;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_124;
      goto LABEL_89;
    case 1:
      if (*((_DWORD *)a3 + 14) == -1)
        sub_10003A9F4();
      sub_10000204C(a1, *((uint64_t **)*a3 + 1), *(_QWORD *)(a7 + 152 * **a3), (uint64_t)(a3 + 1), (uint64_t)a5, (uint64_t)a6, a7, a8);
      return 1;
    case 2:
      v14 = a3[8];
      v15 = a3[5];
      if ((unint64_t)((char *)a3[6] - (char *)v14) >= 0x8000)
        v16 = 0x8000;
      else
        v16 = (char *)a3[6] - (char *)v14;
      v17 = malloc_type_malloc(0x4001uLL, 0x70582B6EuLL);
      if (v17)
      {
        v18 = v17;
        if (!sub_100029FB8(a1))
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003A7FC();
          sub_10001C094("decompress_reinit");
          goto LABEL_133;
        }
        v94 = (_DWORD *)a1;
        if (dword_100050E70 != 3)
          sub_10003A88C();
        qword_100050E78 = (uint64_t)v14 + (_QWORD)v15;
        dword_100050E80 = v16;
        __src = (char *)v16;
        while (1)
        {
          qword_100050E90 = (uint64_t)(v18 + 2);
          dword_100050E98 = 0x3FFF;
          v19 = sub_10001D2A0((uint64_t)&qword_100050E78, 0);
          if ((_DWORD)v19)
            break;
          if (dword_100050E98 == 0x3FFF)
            goto LABEL_105;
          v20 = (0x3FFF - dword_100050E98);
          if (!sub_10001ABD0((uint64_t)v94, a4, a5, a6, v20 + 2))
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100039EF0();
            sub_10001BF64("io_lowbuffer_alloc");
LABEL_133:
            v71 = v18;
            goto LABEL_134;
          }
          *v18 = BYTE1(v20) + 64;
          v18[1] = v20;
          sub_10001A964(v94, (uint64_t)*a4, &v96, *a5, v18, v20 + 2);
          if (dword_100050E98)
            goto LABEL_105;
        }
        v69 = v19;
        if ((_DWORD)v19 != -5)
        {
          if (dword_100050EE8)
          {
            v73 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003A828(v69, v73, v74, v75, v76, v77, v78, v79);
          }
          sub_10001BF64("deflate res=%d");
          goto LABEL_133;
        }
LABEL_105:
        free(v18);
        v70 = (int *)&__src[(_QWORD)a3[8]];
        a3[8] = v70;
        if (v70 != a3[6])
          return 1;
        v57 = 7;
LABEL_62:
        *((_DWORD *)a3 + 15) = v57;
        return 1;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_80;
      goto LABEL_79;
    case 3:
      v21 = *((_DWORD *)a3 + 20);
      if (v21)
        v22 = 1;
      else
        v22 = 7;
      *((_DWORD *)a3 + 15) = v22;
      if (!v21)
        return 1;
      if (!sub_10001ABD0(a1, a4, a5, a6, 1))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_89:
          sub_100039EF0();
        goto LABEL_124;
      }
      sub_10001ACC8((_DWORD *)a1, (uint64_t)*a4, &v96, *a5, 32);
      if (!sub_10001ABD0(a1, a4, a5, a6, 4))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_123:
          sub_100039EF0();
LABEL_124:
        sub_10001C094("io_lowbuffer_alloc");
        return 0;
      }
      sub_10001ACA0((_DWORD *)a1, (uint64_t)*a4, &v96, *a5, ~*((_DWORD *)a3 + 20));
      v23 = ~*((_DWORD *)a3 + 20);
      v24 = (_QWORD *)*((_QWORD *)*a3 + 1);
      v25 = v24[5];
      if (v25 <= v23)
      {
        if (dword_100050EE8)
        {
          v72 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            v98 = v23;
            v99 = 2048;
            v100 = v25;
            _os_log_error_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "token not in block set: %zu (have %zu blocks)", buf, 0x16u);
            v25 = *(_QWORD *)(*((_QWORD *)*a3 + 1) + 40);
          }
        }
        sub_10001BF64("token not in block set: %zu (have %zu blocks)", v23, v25);
      }
      else
      {
        v26 = a1;
        if (v25 - 1 != v23 || (v27 = v24[1]) == 0)
        {
          v27 = v24[2];
          if (!v27)
            sub_10003A8B4();
        }
        v28 = a3[5];
        if (v28 == (int *)-1)
          sub_10003A8DC();
        v29 = v24[2];
        v30 = malloc_type_malloc(0x8030uLL, 0x187100CEuLL);
        if (v30)
        {
          v31 = v30;
          if (sub_100029FB8(v26))
          {
            v32 = (uint64_t)v28 + v29 * v23;
            while (1)
            {
              qword_100050E78 = v32;
              v33 = v27 >= 0x8000 ? 0x8000 : v27;
              dword_100050E80 = v33;
              qword_100050E90 = (uint64_t)v31;
              dword_100050E98 = 0x3FFF;
              v34 = sub_10001D2A0((uint64_t)&qword_100050E78, 6);
              if (v34 | dword_100050E80)
                break;
              v32 += v33;
              v27 -= v33;
              if (!v27)
                goto LABEL_148;
            }
            v80 = v34;
            if (dword_100050EE8)
            {
              v81 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003A904(v80, v81, v82, v83, v84, v85, v86, v87);
            }
            sub_10001BF64("deflate ff res=%d", v80);
          }
          else
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003A7FC();
            sub_10001C094("decompress_reinit");
          }
LABEL_148:
          free(v31);
          return 1;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000379C8();
        sub_10001C094("malloc");
      }
      return 1;
    case 4:
      sub_100018BCC((char *)a3[5], (unint64_t)a3[6], buf, a1);
      if (!sub_10001ABD0(a1, a4, a5, a6, 16))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100039EF0();
        goto LABEL_124;
      }
      sub_10001A964((_DWORD *)a1, (uint64_t)*a4, &v96, *a5, buf, 0x10uLL);
LABEL_61:
      v57 = 5;
      goto LABEL_62;
    case 5:
      if (!*(_DWORD *)(*(_QWORD *)a1 + 36))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
          sub_10003A990((uint64_t)a3);
        sub_10001BE54(2, "%s: flushed %jd KB total, %.2f%% uploaded", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(_QWORD *)(a7 + 152 * **a3));
      }
      sub_100029F3C((uint64_t)a3);
      return 1;
    case 6:
      dword_100050E70 = 4;
      sub_100029F3C((uint64_t)a3);
      ++*a2;
      **(_DWORD **)(a1 + 200) = 0;
      return 1;
    case 7:
      v36 = (char *)malloc_type_malloc(0x4001uLL, 0x2935C832uLL);
      if (v36)
      {
        v91 = a4;
        v92 = a6;
        v93 = a5;
        v95 = (_DWORD *)a1;
        v88 = a3;
        __srca = v36;
        dword_100050E80 = 0;
        v37 = v36 + 2;
        qword_100050E78 = 0;
        v38 = v36 + 16381;
        v39 = v36 + 6;
        v40 = (uint64_t)(v36 + 2);
        v41 = 0x3FFF;
        v42 = (_DWORD *)a1;
        while (1)
        {
          qword_100050E90 = v40;
          dword_100050E98 = v41;
          v43 = sub_10001D2A0((uint64_t)&qword_100050E78, 2);
          if (v43)
            break;
          v50 = (0x3FFF - dword_100050E98);
          if (v50 <= 3)
            sub_10003A968();
          v51 = 16379 - dword_100050E98;
          if (v50 != 4)
          {
            v52 = v50 - 2;
            if (!sub_10001ABD0((uint64_t)v42, v91, v93, v92, v50 - 2))
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                goto LABEL_112;
              goto LABEL_113;
            }
            *__srca = HIBYTE(v51) + 64;
            __srca[1] = v51;
            sub_10001A964(v42, (uint64_t)*v91, &v96, *v93, __srca, v52);
          }
          qword_100050E90 = (uint64_t)v37;
          dword_100050E98 = 0x3FFF;
          *v37 = *v38;
          v41 = 16379;
          v40 = (uint64_t)v39;
        }
        v59 = v43;
        if (v43 != -5)
        {
          if (dword_100050EE8)
          {
            v60 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v98) = v59;
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "final deflate() res=%d", buf, 8u);
            }
          }
          sub_10001BE54(1, "final deflate() res=%d", v44, v45, v46, v47, v48, v49, v59);
        }
        if (sub_10001ABD0((uint64_t)v95, v91, v93, v92, 1))
        {
          sub_10001ACC8(v95, (uint64_t)*v91, &v96, *v93, 0);
          free(__srca);
          dword_100050E70 = 4;
          *((_DWORD *)v88 + 15) = 4;
          return 1;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_112:
          sub_100039EF0();
LABEL_113:
        sub_10001BF64("io_lowbuffer_alloc");
        v71 = __srca;
LABEL_134:
        free(v71);
        return 0;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_80;
LABEL_79:
      sub_1000379C8();
LABEL_80:
      sub_10001C094("malloc");
      return 0;
    default:
      sub_10003A7D4();
  }
}

uint64_t sub_10002955C(uint64_t a1, _QWORD *a2, int **a3, void **a4, size_t *a5, size_t *a6, uint64_t a7, uint64_t a8)
{
  size_t v14;
  int *v15;
  int *v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t result;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  uint64_t v34;

  v32 = 0;
  switch(*((_DWORD *)a3 + 15))
  {
    case 0:
      v20 = **a3;
      if ((v20 & 0x80000000) == 0)
      {
        v21 = *(_QWORD *)a1;
        if (*(_DWORD *)(*(_QWORD *)a1 + 36) == 2)
        {
          if (!*(_DWORD *)(v21 + 4))
          {
            if (dword_100050EE8)
            {
              v22 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
              {
                v23 = *(_QWORD *)(a7 + 152 * v20 + 16);
                *(_DWORD *)buf = 136315138;
                v34 = v23;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                v20 = **a3;
              }
            }
            sub_10001BE54(0, "%s", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(_QWORD *)(a7 + 152 * (int)v20 + 16));
            v20 = **a3;
          }
          sub_100026844((_DWORD *)a1, a4, a5, a6, &v32, a7, v20);
          goto LABEL_33;
        }
        if (*((_DWORD *)a3 + 14) == -1)
          sub_10003AB1C();
        if (*(_DWORD *)(v21 + 4))
          v25 = 1;
        else
          v25 = dword_100050EEC < 1;
        if (!v25 && !*(_DWORD *)(a1 + 164) && !*(_DWORD *)(a1 + 160))
        {
          sub_10001C314(a1, "%s\n", *(_BYTE **)(a7 + 152 * v20 + 16));
          v20 = **a3;
        }
        sub_100026844((_DWORD *)a1, a4, a5, a6, &v32, a7, v20);
        if (sub_10001ABD0(a1, a4, a5, a6, 16))
        {
          sub_100002494((uint64_t)buf, *((int **)*a3 + 1));
          sub_10001A964((_DWORD *)a1, (uint64_t)*a4, &v32, *a5, buf, 0x10uLL);
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
            sub_10003AA44();
          sub_10001BE54(2, "%s: primed for %jd B total", v26, v27, v28, v29, v30, v31, *(_QWORD *)(a7 + 152 * **a3));
          result = 1;
          *((_DWORD *)a3 + 15) = 1;
          return result;
        }
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_69;
        goto LABEL_68;
      }
      if (sub_10001ABD0(a1, a4, a5, a6, 4))
      {
        sub_10001ACA0((_DWORD *)a1, (uint64_t)*a4, &v32, *a5, -1);
        v17 = 6;
        goto LABEL_34;
      }
      if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_69;
      goto LABEL_65;
    case 1:
      if (*((_DWORD *)a3 + 14) == -1)
        sub_10003AAF4();
      sub_10000204C(a1, *((uint64_t **)*a3 + 1), *(_QWORD *)(a7 + 152 * **a3), (uint64_t)(a3 + 1), (uint64_t)a5, (uint64_t)a6, a7, a8);
      return 1;
    case 2:
      if ((char *)a3[9] - (char *)a3[8] >= 0x8000)
        v14 = 0x8000;
      else
        v14 = (char *)a3[9] - (char *)a3[8];
      if (!sub_10001ABD0(a1, a4, a5, a6, 4))
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_69;
        goto LABEL_65;
      }
      sub_10001ACA0((_DWORD *)a1, (uint64_t)*a4, &v32, *a5, v14);
      if (!sub_10001ABD0(a1, a4, a5, a6, v14))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_68:
          sub_100039EF0();
        goto LABEL_69;
      }
      sub_10001A964((_DWORD *)a1, (uint64_t)*a4, &v32, *a5, (char *)a3[8] + (_QWORD)a3[5], v14);
      v15 = a3[9];
      v16 = (int *)((char *)a3[8] + v14);
      a3[8] = v16;
      if (v16 != v15)
        return 1;
      v17 = 3;
      goto LABEL_34;
    case 3:
      if (sub_10001ABD0(a1, a4, a5, a6, 4))
      {
        sub_10001ACA0((_DWORD *)a1, (uint64_t)*a4, &v32, *a5, *((_DWORD *)a3 + 20));
        if (*((_DWORD *)a3 + 20))
          v17 = 1;
        else
          v17 = 4;
        goto LABEL_34;
      }
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_65:
        sub_100039EF0();
      goto LABEL_69;
    case 4:
      sub_100018BCC((char *)a3[5], (unint64_t)a3[6], buf, a1);
      if (sub_10001ABD0(a1, a4, a5, a6, 16))
      {
        sub_10001A964((_DWORD *)a1, (uint64_t)*a4, &v32, *a5, buf, 0x10uLL);
LABEL_33:
        v17 = 5;
LABEL_34:
        *((_DWORD *)a3 + 15) = v17;
        return 1;
      }
      else
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100039EF0();
LABEL_69:
        sub_10001C094("io_lowbuffer_alloc");
        return 0;
      }
    case 5:
      if (*(_DWORD *)(*(_QWORD *)a1 + 36) != 2)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
          sub_10003A990((uint64_t)a3);
        sub_10001BE54(2, "%s: flushed %jd KB total, %.2f%% uploaded", (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *(_QWORD *)(a7 + 152 * **a3));
      }
      v18 = *(_QWORD *)(a1 + 80);
      ++*(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 80) = v18 + *(_QWORD *)(a7 + 152 * **a3 + 40);
      sub_100029F3C((uint64_t)a3);
      return 1;
    case 6:
      sub_100029F3C((uint64_t)a3);
      ++*a2;
      **(_DWORD **)(a1 + 200) = 0;
      return 1;
    case 7:
      sub_10003AACC();
    default:
      sub_10003AAA4();
  }
}

uint64_t sub_100029C50(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, int a5)
{
  int v10;
  unint64_t i;
  char v13;
  _BYTE v14[15];
  char v15;
  _BYTE v16[15];
  char v17;
  _BYTE v18[7];
  int v19;
  int v20;

  v20 = 0;
  if (*(int *)(a1 + 260) <= 28)
  {
    do
    {
      if ((unint64_t)sub_10001B4D8((uint64_t)a3) > 3)
      {
        sub_10001BA78(a3, &v20);
        goto LABEL_31;
      }
    }
    while (sub_10001B4E0(a1, a3, a4));
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003ABF4();
    sub_10001C094("iobuf_fill on final goodbye");
    return 2;
  }
  v10 = 0;
  v19 = 0;
  for (i = 4; ; i = 4)
  {
    while (1)
    {
      do
      {
        if (sub_10001B4D8((uint64_t)a3) >= i)
          goto LABEL_9;
      }
      while (sub_10001B4E0(a1, a3, a4));
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003ABC8(&v17, v18);
      sub_10001C094("iobuf_fill on final goodbye");
LABEL_9:
      if (v10 == 1)
        break;
      sub_10001BA78(a3, &v20);
      if (*(_QWORD *)(a2 + 8) != v20)
        goto LABEL_31;
      v10 = 1;
      i = 2;
    }
    sub_10001BB30(a3, &v19);
    if (v19 != 0x2000)
      goto LABEL_31;
    if (!sub_10001A850(a1, a5, *(_DWORD *)(a2 + 8)))
      break;
    if (!sub_10001A8E8(a1, a5, 0x2000))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003AB9C(&v13, v14);
      sub_10001C094("io_write_short");
      goto LABEL_31;
    }
    v10 = 0;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_10003AB70(&v15, v16);
  sub_10001C094("io_write_int");
LABEL_31:
  if (v20 != -1)
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003AB44();
    }
    sub_10001BF64("read incorrect update complete ack");
    return 2;
  }
  return 0;
}

double sub_100029F3C(uint64_t a1)
{
  void *v2;
  int v3;
  double result;

  if (!a1)
    sub_10003AC20();
  if (*(_QWORD *)a1)
  {
    free(*(void **)(*(_QWORD *)a1 + 8));
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
  }
  v2 = *(void **)(a1 + 40);
  if (v2 != (void *)-1)
    munmap(v2, *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = *(_DWORD *)(a1 + 56);
  if (v3 != -1)
    close(v3);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_100029FB8(uint64_t a1)
{
  int v1;

  if (dword_100050E70)
  {
    if (dword_100050E70 < 4)
      return 1;
    qword_100050E78 = 0;
    dword_100050E80 = 0;
    qword_100050E90 = 0;
    dword_100050E98 = 0;
    sub_10001D16C((uint64_t)&qword_100050E78);
LABEL_9:
    dword_100050E70 = 3;
    return 1;
  }
  qword_100050E78 = 0;
  dword_100050E80 = 0;
  qword_100050E90 = 0;
  dword_100050E98 = 0;
  qword_100050EB8 = 0;
  unk_100050EC0 = 0;
  sub_10001CE20(&qword_100050E78, *(_DWORD *)(*(_QWORD *)a1 + 556), 8, -15, 8, 0, "1.2.3", 112);
  if (!v1)
    goto LABEL_9;
  if (dword_100050EE8)
  {
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003AC48();
  }
  sub_10001BF64("deflateInit2");
  return 0;
}

double sub_10002A0A8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = a2;
  return (double)*(uint64_t *)(a1 + 24) * 100.0;
}

double sub_10002A0E4(double a1)
{
  uint64_t v1;

  return a1 / (double)v1;
}

void sub_10002A10C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_10002A130(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_10002A144(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x20u);
}

uint64_t sub_10002A170(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint32_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  char *v42;
  size_t v43;
  char v44;
  _QWORD v45[15];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint8_t buf[4];
  __int128 v56;
  __int16 v57;
  int v58;

  memset(&v45[1], 0, 112);
  v50 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45[0] = a2;
  LODWORD(v45[1]) = *a2 == 0;
  DWORD1(v50) = -1;
  sub_10002B5D8(a1, (uint64_t)v45);
  sub_10002B410((uint64_t)a1);
  if (!sub_10002AA10(0) || !sub_10002AA10(1))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003AC74();
    sub_10001C094("fcntl_nonblock");
    return 1;
  }
  HIDWORD(v54) = *(_DWORD *)(v45[0] + 8);
  LODWORD(v45[2]) = HIDWORD(v54);
  v8 = a2[5];
  if (!v8)
    v8 = arc4random();
  HIDWORD(v45[1]) = v8;
  if (!sub_10001AF44(v45, 0, (char *)&v45[2] + 4))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035198();
    sub_10001C094("io_read_int");
    return 1;
  }
  if (!sub_10001A850((uint64_t)v45, 1, v45[2]))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
LABEL_27:
    sub_10003516C();
LABEL_28:
    sub_10001C094("io_write_int");
    return 1;
  }
  if (!sub_10001A850((uint64_t)v45, 1, SHIDWORD(v45[1])))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    goto LABEL_27;
  }
  v15 = HIDWORD(v45[2]);
  if (SHIDWORD(v45[2]) <= 26)
  {
    if (dword_100050EE8)
    {
      v16 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109376;
        LODWORD(v56) = v15;
        WORD2(v56) = 1024;
        *(_DWORD *)((char *)&v56 + 6) = 27;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "remote protocol %d is older than our minimum supported %d: exiting", buf, 0xEu);
        v15 = HIDWORD(v45[2]);
      }
    }
    sub_10001BF64("remote protocol %d is older than our minimum supported %d: exiting", v15, 27);
    return 2;
  }
  v18 = v45[2];
  if (SHIDWORD(v45[2]) < SLODWORD(v45[2]))
    HIDWORD(v54) = HIDWORD(v45[2]);
  if (dword_100050EE8)
  {
    v19 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109888;
      LODWORD(v56) = v15;
      WORD2(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 6) = v18;
      WORD5(v56) = 1024;
      HIDWORD(v56) = HIDWORD(v54);
      v57 = 1024;
      v58 = HIDWORD(v45[1]);
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "server detected client version %d, server version %d, negotiated protocol version %d, seed %d", buf, 0x1Au);
      LOBYTE(v15) = BYTE4(v45[2]);
    }
  }
  sub_10001BE54(1, "server detected client version %d, server version %d, negotiated protocol version %d, seed %d", v9, v10, v11, v12, v13, v14, v15);
  DWORD2(v47) = 1;
  v26 = *(_DWORD *)(v45[0] + 512);
  if (v26 == -1)
    sub_10003ACA0();
  if (dword_100050EE8)
  {
    v27 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      if (v26)
        v28 = "disabled";
      else
        v28 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&v56 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Delta transmission %s for this transfer", buf, 0xCu);
      v26 = *(_DWORD *)(v45[0] + 512);
    }
  }
  if (v26)
    v29 = "disabled";
  else
    v29 = "enabled";
  sub_10001BE54(1, "Delta transmission %s for this transfer", v20, v21, v22, v23, v24, v25, (char)v29);
  v36 = *(const char **)a4;
  if (*(_QWORD *)a4)
  {
    v37 = 0;
    do
    {
      if (dword_100050EE8)
      {
        v38 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109378;
          LODWORD(v56) = v37;
          WORD2(v56) = 2080;
          *(_QWORD *)((char *)&v56 + 6) = v36;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "exec[%d] = %s", buf, 0x12u);
        }
      }
      sub_10001BE54(1, "exec[%d] = %s", v30, v31, v32, v33, v34, v35, v37);
      v39 = a4 + 8 * v37++;
      v36 = *(const char **)(v39 + 8);
    }
    while (v36);
  }
  if (*(_DWORD *)v45[0])
  {
    if (dword_100050EE8)
    {
      v40 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "server starting sender", buf, 2u);
      }
    }
    sub_10001BE54(1, "server starting sender", v30, v31, v32, v33, v34, v35, v44);
    if (a3)
    {
      if (strcmp(*(const char **)a4, "."))
      {
        if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_67;
        goto LABEL_66;
      }
      if (a3 == 1)
        v43 = 1;
      else
        v43 = a3 - 1;
      if (*(_DWORD *)(v45[0] + 204))
        DWORD2(v46) = 1;
      if (!sub_100026A9C((uint64_t)v45, 0, 1, v43, (const char **)(a4 + 8 * (a3 != 1))))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003526C();
        sub_10001C094("rsync_sender");
        return 1;
      }
      goto LABEL_89;
    }
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    {
LABEL_84:
      sub_10001BF64("must have arguments");
      return 1;
    }
LABEL_83:
    sub_10003ACC8();
    goto LABEL_84;
  }
  if (dword_100050EE8)
  {
    v41 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "server starting receiver", buf, 2u);
    }
  }
  sub_10001BE54(1, "server starting receiver", v30, v31, v32, v33, v34, v35, v44);
  if (!a3)
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_84;
    goto LABEL_83;
  }
  v42 = *(char **)a4;
  if (strcmp(*(const char **)a4, "."))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_67;
LABEL_66:
    sub_10003AD74();
LABEL_67:
    sub_10001BF64("first argument must be a standalone period");
    return 1;
  }
  if (a3 != 1)
  {
    if (a3 != 2)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003ACF4();
      sub_10001BF64("server receiver mode requires two argument");
      return 1;
    }
    v42 = *(char **)(a4 + 8);
  }
  if (!sub_1000232D0((uint64_t)v45, (uint64_t)a1, 0, 1, v42))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_1000351EC();
    sub_10001C094("rsync_receiver");
    return 1;
  }
LABEL_89:
  if (sub_1000196F4((uint64_t)v45, 0))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003AD48();
    sub_10001C094("data remains in read pipe");
    return 14;
  }
  else if (BYTE8(v54))
  {
    if ((uint64_t)v54 < *(_QWORD *)(v45[0] + 592))
      sub_10003AD20();
    return 25;
  }
  else if (*((_QWORD *)&v53 + 1))
  {
    return 23;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10002AA10(int a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v11;
  char v12;

  v12 = 0;
  v2 = fcntl(a1, 3);
  if (v2 == -1)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003ADA0();
    v11 = "fcntl: F_GETFL";
  }
  else
  {
    v12 = v2 | 4;
    if (fcntl(a1, 4) != -1)
      return 1;
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003ADCC();
    }
    v11 = "fcntl: F_SETFL";
  }
  sub_10001BFE8(v11, v3, v4, v5, v6, v7, v8, v9, v12);
  return 0;
}

uint64_t sub_10002AAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v8 = a2;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(*(_QWORD *)a1 + 216))
    sub_10002AD3C((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (dword_100050EEC > 0 || (v15 = *(_QWORD *)a1, *(_DWORD *)(*(_QWORD *)a1 + 216)))
  {
    sub_10002AF58((unint64_t *)a1, v10, v12, v11, a5, a6, a7, a8);
    v15 = *(_QWORD *)a1;
  }
  if (!*(_DWORD *)(v15 + 4))
    v8 = *(_DWORD *)(a1 + 188);
  if (v8 == -1)
    return 1;
  if (!sub_10001A708(a1, v8, v10))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    goto LABEL_30;
  }
  if (!sub_10001A708(a1, v8, v12))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    goto LABEL_30;
  }
  if (!sub_10001A708(a1, v8, v11))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    goto LABEL_30;
  }
  if (*(int *)(a1 + 260) < 29)
    return 1;
  if (!sub_10001A708(a1, v8, v14))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_31;
    goto LABEL_30;
  }
  if (sub_10001A708(a1, v8, v13))
    return 1;
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_30:
    sub_10003ADF8();
LABEL_31:
  sub_10001C094("io_write_ulong");
  return 0;
}

void sub_10002AD3C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  _OWORD v72[16];

  memset(v72, 0, sizeof(v72));
  sub_10001BE54(-1, "Number of files: %llu", a3, a4, a5, a6, a7, a8, a1[8]);
  sub_10001BE54(-1, "Number of files transferred: %llu", v9, v10, v11, v12, v13, v14, a1[9]);
  sub_10001CD14((uint64_t)a1, (char *)v72, 0x100uLL, a1[5]);
  sub_10001BE54(-1, "Total file size: %s", v15, v16, v17, v18, v19, v20, (char)v72);
  sub_10001CD14((uint64_t)a1, (char *)v72, 0x100uLL, a1[10]);
  sub_10001BE54(-1, "Total transferred file size: %s", v21, v22, v23, v24, v25, v26, (char)v72);
  sub_10001CD14((uint64_t)a1, (char *)v72, 0x100uLL, a1[11]);
  sub_10001BE54(-1, "Unmatched data: %s", v27, v28, v29, v30, v31, v32, (char)v72);
  sub_10001CD14((uint64_t)a1, (char *)v72, 0x100uLL, a1[12]);
  sub_10001BE54(-1, "Matched data: %s", v33, v34, v35, v36, v37, v38, (char)v72);
  sub_10001CD14((uint64_t)a1, (char *)v72, 0x100uLL, a1[13]);
  sub_10001BE54(-1, "File list size: %s", v39, v40, v41, v42, v43, v44, (char)v72);
  v51 = a1[14];
  if (v51)
  {
    v52 = (double)v51 / 1000.0;
    sub_10001BE54(-1, "File list generation time: %.3f seconds", v45, v46, v47, v48, v49, v50, SLOBYTE(v52));
    v71 = (double)(unint64_t)a1[15] / 1000.0;
    sub_10001BE54(-1, "File list transfer time: %.3f seconds", v53, v54, v55, v56, v57, v58, SLOBYTE(v71));
  }
  sub_10001CD14((uint64_t)a1, (char *)v72, 0x100uLL, a1[6]);
  sub_10001BE54(-1, "Total sent: %s", v59, v60, v61, v62, v63, v64, (char)v72);
  sub_10001CD14((uint64_t)a1, (char *)v72, 0x100uLL, a1[3]);
  sub_10001BE54(-1, "Total received: %s", v65, v66, v67, v68, v69, v70, (char)v72);
}

void sub_10002AF58(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  double v26;
  char v27[32];
  char v28[32];
  char v29[32];
  char v30[32];

  if (!*(_DWORD *)(*a1 + 4))
  {
    v10 = a2;
    if (dword_100050EEC > 0 || *(_DWORD *)(*a1 + 216))
    {
      v12 = (uint64_t)((double)(unint64_t)(a3 + a2) / ((double)a1[15] + 0.5));
      sub_10001CD14((uint64_t)a1, v30, 0x20uLL, a2);
      sub_10001CD14((uint64_t)a1, v29, 0x20uLL, a3);
      sub_10001CD14((uint64_t)a1, v28, 0x20uLL, a4);
      sub_10001CD14((uint64_t)a1, v27, 0x20uLL, v12);
      sub_10002B368(v30);
      sub_10002B368(v29);
      sub_10002B368(v28);
      sub_10002B368(v27);
      sub_10001BE54(-1, "\nsent %s bytes  received %s bytes  %s bytes/sec", v13, v14, v15, v16, v17, v18, (char)v29);
      sub_10001BE54(-1, "total size is %s  speedup is %.2lf", v19, v20, v21, v22, v23, v24, (char)v28);
    }
    if (dword_100050EE8)
    {
      v25 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
        sub_10003AE24((uint64_t)a1, v25);
    }
    v26 = (double)a1[14] / 1000.0;
    sub_10001BE54(2, "File list generation time: %.3f seconds, transfer time: %.3f seconds", a3, v10, a5, a6, a7, a8, SLOBYTE(v26));
  }
}

uint64_t sub_10002B148(uint64_t a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  if (*(_DWORD *)(*(_QWORD *)a1 + 4))
    return 1;
  if (!sub_10001AE3C(a1, a2, &v19))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
LABEL_15:
    sub_10003AEC0();
    goto LABEL_28;
  }
  if (!sub_10001AE3C(a1, a2, &v20))
  {
    if (!dword_100050EE8 || !os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    goto LABEL_15;
  }
  if (sub_10001AE3C(a1, a2, &v18))
  {
    if (*(int *)(a1 + 260) < 29)
    {
LABEL_9:
      if (dword_100050EEC > 0 || *(_DWORD *)(*(_QWORD *)a1 + 216))
      {
        sub_10002AF58((unint64_t *)a1, v20, v19, v18, v5, v6, v7, v8);
        if (*(_DWORD *)(*(_QWORD *)a1 + 216))
          sub_10002AD3C((_QWORD *)a1, v9, v10, v11, v12, v13, v14, v15);
      }
      return 1;
    }
    if (sub_10001AE3C(a1, a2, &v17))
    {
      if (sub_10001AE3C(a1, a2, &v16))
        goto LABEL_9;
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003AEC0();
    }
    else if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    {
      sub_10003AEC0();
    }
  }
  else if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
  {
    sub_10003AEC0();
  }
LABEL_28:
  sub_10001C094("io_read_ulong");
  return 0;
}

char *sub_10002B368(char *a1)
{
  char *result;
  int v2;

  result = strchr(a1, 32);
  if (result)
  {
    v2 = result[1];
    if (result[1])
    {
      if (v2 != 66)
        *result++ = v2;
      *result = 0;
    }
  }
  return result;
}

uint64_t sub_10002B3A4(uint64_t result)
{
  int v1;
  uint64_t v2;
  sigset_t v3;

  v1 = *(_DWORD *)(result + 48);
  if (v1 < 0)
    sub_10003AEEC();
  v2 = result;
  *(_DWORD *)(result + 48) = v1 + 1;
  if (!v1)
  {
    v3 = 1610629123;
    result = sigprocmask(1, &v3, (sigset_t *)(result + 52));
    *(_DWORD *)(v2 + 52) &= 0x9FFFBFFC;
  }
  return result;
}

uint64_t sub_10002B410(uint64_t result)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(result + 48);
  if (v1 <= 0)
    sub_10003AF14();
  v2 = v1 - 1;
  *(_DWORD *)(result + 48) = v2;
  if (!v2)
    return sigprocmask(3, (const sigset_t *)(result + 52), 0);
  return result;
}

uint64_t sub_10002B450(uint64_t a1)
{
  signal(30, (void (__cdecl *)(int))sub_10002B4B4);
  signal(31, (void (__cdecl *)(int))sub_10002B4B4);
  signal(1, (void (__cdecl *)(int))sub_10002B4B4);
  signal(2, (void (__cdecl *)(int))sub_10002B4B4);
  signal(15, (void (__cdecl *)(int))sub_10002B4B4);
  return sub_10002B3A4(a1);
}

uint64_t sub_10002B4B4(int a1)
{
  int v1;

  if (a1 == 30)
  {
    v1 = 19;
  }
  else
  {
    if (a1 == 31)
      _exit(0);
    v1 = 20;
  }
  return sub_10002B4E8(v1, 1);
}

uint64_t sub_10002B4E8(int a1, int a2)
{
  _DWORD *v4;
  int v5;
  void (**v6)(void *);
  int v7;
  int v9;

  v4 = off_1000506D8;
  sub_10002B3A4((uint64_t)off_1000506D8);
  signal(30, (void (__cdecl *)(int))1);
  v5 = v4[11];
  v4[11] = v5 + 1;
  if (v4[9] == -1)
    v4[9] = a1;
  v6 = (void (**)(void *))*((_QWORD *)v4 + 3);
  if (*v6)
  {
    do
    {
      *((_QWORD *)v4 + 3) = v6 + 1;
      sub_10002B410((uint64_t)v4);
      (*v6)(v4);
      sub_10002B3A4((uint64_t)v4);
      v6 = (void (**)(void *))*((_QWORD *)v4 + 3);
    }
    while (*v6);
    v7 = v4[11] - 1;
  }
  else
  {
    v7 = v5;
  }
  v4[11] = v7;
  if (v5 < 1)
  {
    v9 = v4[9];
    if (a2)
      _exit(v9);
    exit(v9);
  }
  return sub_10002B410((uint64_t)v4);
}

uint64_t sub_10002B5B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_10002B5BC(uint64_t result, int a2)
{
  if (a2 < 0)
    sub_10003AF3C();
  *(_DWORD *)(result + 32) = a2;
  return result;
}

_QWORD *sub_10002B5D8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t sub_10002B5E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_10002B5E8(uint64_t result)
{
  pid_t v1;
  uint64_t v2;
  int v3;
  int v4;

  v1 = *(_DWORD *)(result + 32);
  if (v1)
  {
    v2 = result;
    v4 = 0;
    result = waitpid(v1, &v4, 1);
    if ((int)result >= 1)
    {
      do
      {
        if ((_DWORD)result == v1)
        {
          v3 = BYTE1(v4);
          v4 = v3;
          if (v3 > *(_DWORD *)(v2 + 36))
            *(_DWORD *)(v2 + 36) = v3;
        }
        result = waitpid(v1, &v4, 1);
      }
      while ((int)result > 0);
    }
  }
  return result;
}

uint64_t sub_10002B668(uint64_t *a1)
{
  return sub_10000A44C(*a1, a1[1]);
}

uint64_t sub_10002B674(uint64_t result)
{
  if (*(_DWORD *)(result + 36))
    return kill(0, 30);
  return result;
}

uint64_t sub_10002B68C(const char *a1, const char *a2, char *a3, size_t a4)
{
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  int data;
  CC_MD4_CTX c;
  unsigned __int8 md[16];

  memset(&c, 0, sizeof(c));
  data = 0;
  CC_MD4_Init(&c);
  CC_MD4_Update(&c, &data, 4u);
  v8 = strlen(a1);
  if (v8)
  {
    v9 = v8;
    do
    {
      if (v9 >= 0xFFFFFFFF)
        v10 = 0xFFFFFFFFLL;
      else
        v10 = v9;
      CC_MD4_Update(&c, a1, v10);
      a1 += v10;
      v9 -= v10;
    }
    while (v9);
  }
  v11 = strlen(a2);
  if (v11)
  {
    v12 = v11;
    do
    {
      if (v12 >= 0xFFFFFFFF)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v12;
      CC_MD4_Update(&c, a2, v13);
      a2 += v13;
      v12 -= v13;
    }
    while (v12);
  }
  CC_MD4_Final(md, &c);
  if (res_9_b64_ntop(md, 0x10uLL, a3, a4) < 0)
    return 0;
  v14 = strlen(a3);
  if (v14)
  {
    v15 = a3 - 1;
    do
    {
      if (v15[v14] != 61)
        break;
      v15[v14--] = 0;
    }
    while (v14);
  }
  return 1;
}

uint64_t sub_10002B7FC(uint64_t a1, int *a2, uint64_t a3)
{
  char *v4;
  const char **v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  NSObject *v33;
  _BOOL4 v34;
  char *v35;
  NSObject *v36;
  _BOOL4 v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  const char *v49;
  int v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  socklen_t v73[2];
  pollfd v74;
  uint8_t buf[4];
  uint64_t v76;
  __int16 v77;
  const char *v78;

  v54 = 0;
  v55 = 0;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v56 = a1;
  v5 = (const char **)(a3 + 8);
  v4 = *(char **)(a3 + 8);
  if (!v4)
    sub_10003AF64();
  v7 = sub_10002BF68(&v56, v4, &v55, 0);
  if (!v7)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003AF8C();
    sub_10001C094("inet_resolve");
LABEL_82:
    exit(1);
  }
  v14 = v7;
  v15 = *(char **)(a1 + 264);
  if (v15)
  {
    v53 = sub_10002BF68(&v56, v15, (size_t *)&v54, 1);
    if (!v53)
    {
      if (dword_100050EE8)
      {
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B13C();
      }
      sub_10001C094("inet_resolve bind");
      goto LABEL_82;
    }
  }
  else
  {
    v53 = 0;
  }
  v16 = v55;
  if (!v55)
    sub_10003AFB8();
  v17 = 0;
  v18 = 0;
  v52 = v54;
  v51 = v14 + 4;
  while (1)
  {
    v19 = *v5;
    if (*a2 != -1)
      close(*a2);
    *(_QWORD *)v73 = 0;
    v74 = 0;
    if (dword_100050EE8)
    {
      v20 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v76 = (uint64_t)&v51[v17];
        v77 = 2080;
        v78 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "trying: %s, %s", buf, 0x16u);
      }
    }
    sub_10001BE54(1, "trying: %s, %s", v8, v9, v10, v11, v12, v13, (_BYTE)v14 + v17 + 4);
    v21 = socket(*(_DWORD *)&v14[v17], 1, 0);
    *a2 = v21;
    if (v21 == -1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B00C();
      v49 = "socket";
      goto LABEL_59;
    }
    v29 = v21;
    v50 = fcntl(v21, 3, 0, v19) | 4;
    if (fcntl(v29, 4) == -1)
      sub_10003B038();
    if (sub_10002CB34(*a2, *(char **)(a1 + 464)) == -1)
      goto LABEL_60;
    if (sub_10002E050(*a2, v14[v17], v53, v52) == -1)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B050();
      v49 = "bind";
      goto LABEL_59;
    }
    v30 = connect(*a2, (const sockaddr *)&v14[v17 + 56], *(_DWORD *)&v14[v17 + 184]);
    if (!v30)
      goto LABEL_42;
    v31 = v30;
    if (*__error() == 36)
      break;
LABEL_26:
    if (v31 != -1)
      goto LABEL_42;
LABEL_27:
    if (*__error() != 49)
    {
      if (*__error() != 61 && *__error() != 65)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B110();
        v49 = "connect";
LABEL_59:
        sub_10001BFE8(v49, v22, v23, v24, v25, v26, v27, v28, v50);
LABEL_60:
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003AFE0();
        sub_10001C094("inet_connect");
LABEL_64:
        free(v14);
        free(v53);
        if (*a2 != -1)
          close(*a2);
        return 1;
      }
      if (dword_100050EE8)
      {
        v33 = qword_100050EF8;
        v34 = os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO);
        v35 = "connect refused: %s, %s";
        if (!v34)
          goto LABEL_38;
        *(_DWORD *)buf = 136315394;
        v76 = (uint64_t)&v51[v17];
        v77 = 2080;
        v78 = v19;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "connect refused: %s, %s", buf, 0x16u);
      }
      sub_10001C1CC("connect refused: %s, %s");
    }
LABEL_39:
    ++v18;
    v17 += 192;
    if (v18 >= v16)
      goto LABEL_42;
  }
  v74.fd = *a2;
  v74.events = 4;
  v32 = poll(&v74, 1u, dword_100050EF0);
  if (!v32)
  {
    *__error() = 60;
    if (dword_100050EE8)
    {
      v36 = qword_100050EF8;
      v37 = os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO);
      v35 = "connect timeout: %s, %s";
      if (!v37)
      {
LABEL_38:
        sub_10001C1CC(v35, &v14[v17 + 4], v19);
        goto LABEL_39;
      }
      *(_DWORD *)buf = 136315394;
      v76 = (uint64_t)&v51[v17];
      v77 = 2080;
      v78 = v19;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "connect timeout: %s, %s", buf, 0x16u);
    }
    v35 = "connect timeout: %s, %s";
    goto LABEL_38;
  }
  if (v32 != 1)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B0E4();
    v49 = "poll failed";
    goto LABEL_59;
  }
  v73[1] = 4;
  v31 = getsockopt(*a2, 0xFFFF, 4103, v73, &v73[1]);
  if (v31)
    goto LABEL_26;
  v38 = v73[0];
  *__error() = v38;
  if (v73[0])
    goto LABEL_27;
LABEL_42:
  if (v18 == v16)
  {
    if (dword_100050EE8)
    {
      v39 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B07C((uint64_t)v5, v39, v40, v41, v42, v43, v44, v45);
    }
    sub_10001BF64("cannot connect to host: %s", *v5);
    goto LABEL_64;
  }
  if (dword_100050EE8)
  {
    v46 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      v47 = *v5;
      *(_DWORD *)buf = 136315394;
      v76 = (uint64_t)&v14[192 * v18 + 4];
      v77 = 2080;
      v78 = v47;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "connected: %s, %s", buf, 0x16u);
    }
  }
  sub_10001BE54(1, "connected: %s, %s", v8, v9, v10, v11, v12, v13, (_BYTE)v14 - ((_BYTE)v18 << 6) + 4);
  free(v14);
  free(v53);
  return 0;
}

char *sub_10002BF68(uint64_t *a1, char *a2, size_t *a3, int a4)
{
  uint64_t v6;
  const char *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  addrinfo *v24;
  size_t v25;
  int ai_family;
  char *v28;
  char *v29;
  addrinfo *v30;
  size_t v31;
  int v32;
  size_t ai_addrlen;
  char *v35;
  sockaddr *ai_addr;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  addrinfo *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  NSObject *v54;
  addrinfo *v56;
  addrinfo v57;
  uint8_t buf[4];
  char *v59;
  __int16 v60;
  char *v61;

  v6 = *a1;
  v7 = *(const char **)(*a1 + 256);
  *a3 = 0;
  memset(&v57, 0, sizeof(v57));
  v8 = *(_DWORD *)(v6 + 560);
  if (v8 == 4)
  {
    v9 = 2;
    goto LABEL_5;
  }
  if (v8 == 6)
  {
    v9 = 30;
LABEL_5:
    v57.ai_family = v9;
  }
  v57.ai_socktype = 1;
  if (a4)
  {
    v7 = 0;
    v57.ai_flags = 1;
  }
  v56 = 0;
  v16 = getaddrinfo(a2, v7, &v57, &v56);
  if (dword_100050EE8)
  {
    v17 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v59 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "resolving: %s", buf, 0xCu);
    }
  }
  sub_10001BE54(1, "resolving: %s", v10, v11, v12, v13, v14, v15, (char)a2);
  switch(v16)
  {
    case 0:
      v24 = v56;
      if (!v56)
        goto LABEL_67;
      v25 = 0;
      do
      {
        ai_family = v24->ai_family;
        if (ai_family == 30 || ai_family == 2)
          ++v25;
        v24 = v24->ai_next;
      }
      while (v24);
      if (!v25)
      {
LABEL_67:
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B2B8();
        sub_10001BF64("no addresses resolved: %s");
        goto LABEL_57;
      }
      v28 = (char *)malloc_type_calloc(v25, 0xC0uLL, 0x10000401560AAC9uLL);
      if (!v28)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_100034E48();
        sub_10001BF64("calloc");
LABEL_57:
        freeaddrinfo(v56);
        return 0;
      }
      v29 = v28;
      v30 = v56;
      if (v56)
      {
        v31 = 0;
        do
        {
          v32 = v30->ai_family;
          if (v32 == 30 || v32 == 2)
          {
            if (v31 >= v25)
              sub_10003B318();
            ai_addrlen = v30->ai_addrlen;
            v35 = &v29[192 * v31];
            *((_DWORD *)v35 + 46) = ai_addrlen;
            memcpy(v35 + 56, v30->ai_addr, ai_addrlen);
            ai_addr = v30->ai_addr;
            v37 = v35 + 4;
            if (v30->ai_family == 2)
            {
              *(_DWORD *)v35 = 2;
              v38 = &ai_addr->sa_data[2];
              v39 = 2;
            }
            else
            {
              *(_DWORD *)v35 = 30;
              v38 = &ai_addr->sa_data[6];
              v39 = 30;
            }
            inet_ntop(v39, v38, v35 + 4, 0x2Eu);
            if (dword_100050EE8)
            {
              v46 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315394;
                v59 = a2;
                v60 = 2080;
                v61 = v37;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "hostname resolved: %s: %s", buf, 0x16u);
              }
            }
            sub_10001BE54(1, "hostname resolved: %s: %s", v40, v41, v42, v43, v44, v45, (char)a2);
            ++v31;
          }
          v30 = v30->ai_next;
        }
        while (v30);
        v47 = v56;
      }
      else
      {
        v47 = 0;
      }
      freeaddrinfo(v47);
      *a3 = v25;
      return v29;
    case 2:
    case 8:
      if (dword_100050EE8)
      {
        v18 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B1D4((int)a2, v16, v18, v19, v20, v21, v22, v23);
      }
      gai_strerror(v16);
      sub_10001BF64("could not resolve hostname %s: %s");
      return 0;
    case 9:
      if (dword_100050EE8)
      {
        v54 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B240(v54);
      }
      gai_strerror(9);
      sub_10001BF64("could not resolve service rsync: %s");
      return 0;
    default:
      if (dword_100050EE8)
      {
        v48 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B168((int)a2, v16, v48, v49, v50, v51, v52, v53);
      }
      gai_strerror(v16);
      sub_10001BF64("getaddrinfo: %s: %s");
      return 0;
  }
}

uint64_t sub_10002C3D0(uint64_t *a1, uint64_t (*a2)(uint64_t *, uint64_t, char **, _QWORD))
{
  uint64_t v2;
  const char *v3;
  char *v6;
  char *v7;
  int *v8;
  size_t v9;
  unsigned int v10;
  servent *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  size_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int *v31;
  const char *v32;
  int *v34;
  size_t v35;
  pollfd *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int fd;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  pollfd *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v74;
  pollfd *v75;
  int v76;
  pollfd *v77;
  int v78;
  int v79;
  char v80;
  socklen_t v81;
  size_t v82;
  sigaction v83;
  char *__errstrp[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  pollfd v92;
  int v93;
  __int16 v94;

  v2 = *a1;
  v82 = 0;
  v3 = *(const char **)(v2 + 256);
  if (!v3)
    sub_10003B340();
  v83.__sigaction_u.__sa_handler = 0;
  *(_QWORD *)&v83.sa_mask = 0;
  v93 = -1;
  v92.fd = -1;
  v94 = 1;
  v92.events = 1;
  v6 = *(char **)(v2 + 264);
  if (!v6)
  {
    if ((*v3 - 48) > 9
      || (__errstrp[0] = 0, v10 = strtonum(v3, 0, 0xFFFFLL, (const char **)__errstrp), __errstrp[0]))
    {
      v11 = getservbyname(v3, "tcp");
      if (!v11)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B440();
        sub_10001BFE8("getservbyname: %s", v12, v13, v14, v15, v16, v17, v18, (char)v3);
        return 14;
      }
      v19 = bswap32(LOWORD(v11->s_port)) >> 16;
    }
    else
    {
      v19 = v10;
    }
    v20 = *(_DWORD *)(*a1 + 560);
    if (v20)
      v21 = 1;
    else
      v21 = 2;
    v22 = (int *)malloc_type_calloc(v21, 0xC0uLL, 0x10000401560AAC9uLL);
    if (!v22)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100034E48();
      v32 = "calloc";
      goto LABEL_51;
    }
    v8 = v22;
    v30 = bswap32(v19);
    if ((v20 | 4) == 4)
    {
      *v22 = 2;
      *((_QWORD *)v22 + 7) = 0;
      *((_QWORD *)v22 + 8) = 0;
      *((_WORD *)v22 + 28) = 528;
      *((_WORD *)v22 + 29) = HIWORD(v30);
      v22[15] = 0;
      v31 = v22;
      v22[46] = 16;
    }
    else
    {
      v31 = 0;
    }
    if (v20 == 6 || v20 == 0)
    {
      if (v31)
        v34 = v31 + 48;
      else
        v34 = v22;
      *v34 = 30;
      *((_QWORD *)v34 + 8) = 0;
      *((_QWORD *)v34 + 9) = 0;
      *((_QWORD *)v34 + 7) = 0;
      v34[20] = 0;
      *((_WORD *)v34 + 28) = 7708;
      *((_WORD *)v34 + 29) = HIWORD(v30);
      *((in6_addr *)v34 + 4) = in6addr_any;
      v34[46] = 28;
    }
    v82 = v21;
LABEL_36:
    v35 = 0;
    v36 = &v92;
    while (1)
    {
      v37 = socket(*v8, 1, 0);
      v36->fd = v37;
      if (v37 == -1)
        break;
      fd = v37;
      if (*v8 == 30)
      {
        LODWORD(__errstrp[0]) = 1;
        if (setsockopt(v37, 41, 27, __errstrp, 4u) == -1)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003B368();
          v74 = "setsockopt";
          goto LABEL_91;
        }
      }
      if (sub_10002CB34(fd, *(char **)(v2 + 464)) == -1)
        goto LABEL_92;
      if (sub_10002E050(fd, *(unsigned __int8 *)v8, v8, 1) == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B050();
        sub_10001BFE8("bind", v53, v54, v55, v56, v57, v58, v59, v80);
        fd = v36->fd;
        goto LABEL_92;
      }
      fd = v36->fd;
      v80 = 0;
      v60 = fcntl(v36->fd, 3);
      if (v60 == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_81:
          sub_10003B394();
LABEL_82:
        v74 = "fcntl";
LABEL_91:
        sub_10001BFE8(v74, v46, v47, v48, v49, v50, v51, v52, v80);
LABEL_92:
        close(fd);
        v36->fd = -1;
        if (!v35)
          return 14;
LABEL_93:
        v75 = &v92;
        do
        {
          v76 = v75->fd;
          ++v75;
          close(v76);
          --v35;
        }
        while (v35);
        return 14;
      }
      v80 = v60 | 4;
      if (fcntl(fd, 4) == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_81;
        goto LABEL_82;
      }
      if (listen(fd, 5) == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B3C0();
        v74 = "listen";
        goto LABEL_91;
      }
      ++v35;
      v9 = v82;
      ++v36;
      v8 += 48;
      if (v35 >= v82)
        goto LABEL_46;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B00C();
    sub_10001BFE8("socket", v38, v39, v40, v41, v42, v43, v44, v80);
    if (v35)
      goto LABEL_93;
    return 14;
  }
  v7 = sub_10002BF68(a1, v6, &v82, 1);
  if (!v7)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B13C();
    sub_10001C094("inet_resolve bind");
    exit(1);
  }
  v8 = (int *)v7;
  if (v82)
    goto LABEL_36;
  v9 = 0;
LABEL_46:
  v83.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_10002CAFC;
  *(_QWORD *)&v83.sa_mask = 0x800000000;
  if (sigaction(20, &v83, 0))
  {
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B414();
    }
    v32 = "sigaction";
LABEL_51:
    sub_10001BFE8(v32, v23, v24, v25, v26, v27, v28, v29, v80);
    return 14;
  }
  do
  {
    while (1)
    {
      v61 = poll(&v92, v9, -1);
      if (v61 == -1)
        break;
      if (v61 < 1)
        sub_10003B3EC();
      if (v9)
      {
        v62 = &v92;
        v63 = v9;
        do
        {
          v91 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          *(_OWORD *)__errstrp = 0u;
          if ((v62->revents & 1) != 0)
          {
            v81 = 128;
            v64 = accept(v62->fd, (sockaddr *)__errstrp, &v81);
            if ((v64 & 0x80000000) == 0)
            {
              v65 = v64;
              if (!fork())
              {
                v77 = &v92;
                do
                {
                  v78 = v77->fd;
                  ++v77;
                  close(v78);
                  --v9;
                }
                while (v9);
                signal(20, 0);
                v79 = a2(a1, v65, __errstrp, v81);
                _exit(v79);
              }
              close(v65);
            }
          }
          ++v62;
          --v63;
        }
        while (v63);
      }
    }
  }
  while (*__error() == 4);
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_10003899C();
  sub_10001BFE8("poll", v66, v67, v68, v69, v70, v71, v72, v80);
  return 1;
}

uint64_t sub_10002CAFC()
{
  uint64_t result;
  int v1;

  v1 = 0;
  do
    result = waitpid(0, &v1, 1);
  while ((int)result > 0);
  return result;
}

uint64_t sub_10002CB34(int a1, char *__s1)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v37;
  char v38;
  char *__errstrp;
  char *__stringp;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;

  if (!__s1 || !*__s1)
    return 0;
  v3 = strdup(__s1);
  if (v3)
  {
    v11 = v3;
    __stringp = v3;
    v12 = strsep(&__stringp, ",");
    if (v12)
    {
      v13 = v12;
      do
      {
        if (*v13)
        {
          v14 = strchr(v13, 61);
          v15 = v14;
          if (v14)
          {
            *v14 = 0;
            v15 = v14 + 1;
          }
          v16 = 0;
          while (1)
          {
            v17 = (&off_10004DD40)[v16];
            if (!strcmp(v13, v17))
              break;
            v16 += 3;
            if (v16 == 27)
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003B560();
              sub_10001BF64("Unresolvable socket option '%s'");
LABEL_33:
              v35 = 0xFFFFFFFFLL;
              goto LABEL_35;
            }
          }
          if (v15)
          {
            __errstrp = 0;
            v24 = strtonum(v15, 0, 0x7FFFFFFFLL, (const char **)&__errstrp);
            v25 = __errstrp;
            if (__errstrp)
            {
              if (dword_100050EE8)
              {
                v37 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  v42 = v17;
                  v43 = 2080;
                  v44 = v25;
                  _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Error parsing value for socket option '%s': %s", buf, 0x16u);
                }
              }
              sub_10001BF64("Error parsing value for socket option '%s': %s");
              goto LABEL_33;
            }
            v26 = v24;
            if (v24 < 0)
            {
LABEL_37:
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003B4A0();
              sub_10001BF64("Value required for socket option '%s'");
              goto LABEL_33;
            }
          }
          else
          {
            v26 = (int)(&off_10004DD40)[v16 + 2];
            if (v26 < 0)
              goto LABEL_37;
          }
          LODWORD(__errstrp) = v26;
          if (dword_100050EE8)
          {
            v27 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v42 = v17;
              v43 = 1024;
              LODWORD(v44) = v26;
              _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "sockopts: setting '%s' to '%d'", buf, 0x12u);
            }
          }
          sub_10001BE54(2, "sockopts: setting '%s' to '%d'", v18, v19, v20, v21, v22, v23, (char)v17);
          if (setsockopt(a1, 0xFFFF, (int)(&off_10004DD40)[v16 + 1], &__errstrp, 4u) == -1)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003B500();
            sub_10001BFE8("setsockopt %s", v28, v29, v30, v31, v32, v33, v34, (char)v17);
            goto LABEL_33;
          }
        }
        v13 = strsep(&__stringp, ",");
      }
      while (v13);
    }
    v35 = 0;
LABEL_35:
    free(v11);
  }
  else
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100035654();
    sub_10001BFE8("strdup", v4, v5, v6, v7, v8, v9, v10, v38);
    return 0xFFFFFFFFLL;
  }
  return v35;
}

uint64_t sub_10002CED0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  BOOL v28;
  uint64_t *v29;
  const char *v30;
  NSObject *v31;
  uint64_t *v32;
  uint64_t v33;
  __uint32_t v34;
  int v35;
  __uint32_t v36;
  char *v37;
  const char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  ssize_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  ssize_t v57;
  unint64_t v58;
  int v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  NSObject *v78;
  const char *v79;
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  NSObject *v105;
  const char *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t v117;
  NSObject *v118;
  char v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[15];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint8_t v135;
  char v136[15];
  char __str[8];
  char v138;
  uint64_t v139;
  char __s[16];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint8_t buf[32];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;

  v122 = 0;
  v123 = 0;
  memset(&v124[1], 0, 112);
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v124[0] = a2;
  v7 = *(_DWORD *)(a4 + 40);
  v8 = *(_DWORD *)(a2 + 8);
  DWORD1(v129) = -1;
  HIDWORD(v133) = v8;
  LODWORD(v124[1]) = v7;
  LODWORD(v124[2]) = v8;
  sub_10002B5D8(a1, (uint64_t)v124);
  sub_10002B410((uint64_t)a1);
  if (!*(_QWORD *)(a4 + 8))
    sub_10003B5C0();
  if (!*(_QWORD *)(a4 + 48))
    sub_10003B5E8();
  v9 = (_QWORD *)sub_10000E934(v124, a4, &v122);
  snprintf(__str, 0x400uLL, "@RSYNCD: %d", LODWORD(v124[2]));
  if (!sub_10001A078((uint64_t)v124, a3, __str))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_79;
    goto LABEL_80;
  }
  if (dword_100050EE8)
  {
    v16 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      v17 = *(_QWORD *)(a4 + 48);
      v18 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "requesting module: %s, %s", buf, 0x16u);
    }
  }
  sub_10001BE54(1, "requesting module: %s, %s", v10, v11, v12, v13, v14, v15, *(_QWORD *)(a4 + 48));
  if (!sub_10001A078((uint64_t)v124, a3, *(char **)(a4 + 48)))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      goto LABEL_79;
    goto LABEL_80;
  }
  v120 = (uint64_t)a1;
  v123 = 1024;
  if (!sub_10001A3D4((uint64_t)v124, a3, (uint64_t)__str, &v123))
  {
LABEL_73:
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B610();
    sub_10001C094("io_read_line");
    goto LABEL_81;
  }
  while (1)
  {
    v25 = v123;
    if (v123)
      break;
LABEL_68:
    v123 = 1024;
    if (!sub_10001A3D4((uint64_t)v124, a3, (uint64_t)__str, &v123))
      goto LABEL_73;
  }
  if (v123 == 1024)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B920();
    sub_10001BF64("line buffer overrun");
    goto LABEL_81;
  }
  __str[v123] = 0;
  v26 = v25 - 1;
  if (__str[v26] == 13)
    __str[v26] = 0;
  v27 = *(char **)a4;
  v134 = 0;
  v28 = *(_QWORD *)__str == 0x3A44434E59535240 && v138 == 32;
  v29 = &v139;
  v30 = &v138;
  if (!v28)
  {
    if (!*(_DWORD *)(v124[0] + 116))
    {
      if (dword_100050EE8)
      {
        v31 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = __str;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
      sub_10001BE54(0, "%s", v19, v20, v21, v22, v23, v24, (char)__str);
    }
    goto LABEL_68;
  }
  do
  {
    v32 = v29;
    v33 = *((unsigned __int8 *)v30 + 1);
    if (v30[1] < 0)
      v34 = __maskrune(v33, 0x4000uLL);
    else
      v34 = _DefaultRuneLocale.__runetype[v33] & 0x4000;
    ++v30;
    v29 = (uint64_t *)((char *)v32 + 1);
  }
  while (v34);
  if (strcmp(v30, "OK"))
  {
    if (strncmp(v30, "AUTHREQD", 7uLL))
    {
      if (sscanf(v30, "%d.%d", (char *)&v134 + 4, &v134) == 2 || sscanf(v30, "%d", (char *)&v134 + 4) == 1)
      {
        HIDWORD(v124[2]) = HIDWORD(v134);
        goto LABEL_68;
      }
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B8F4();
      sub_10001BF64("rsyncd protocol error: unknown command");
LABEL_153:
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B6B8();
      sub_10001C094("protocol_line");
      goto LABEL_81;
    }
    do
    {
      v35 = *((char *)v32 + 1);
      if (v35 < 0)
        v36 = __maskrune(*((char *)v32 + 1), 0x4000uLL);
      else
        v36 = _DefaultRuneLocale.__runetype[v35] & 0x4000;
      v32 = (uint64_t *)((char *)v32 + 1);
    }
    while (v36);
    if (!v35)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B6E4();
      sub_10001BF64("Malformed auth challenge");
      goto LABEL_153;
    }
    v121 = v9;
    if (!v27)
    {
      v27 = getenv("USER");
      if (!v27)
        v27 = getenv("LOGNAME");
    }
    if (!v27)
      v27 = "nobody";
    v186 = 0u;
    v185 = 0u;
    v184 = 0u;
    v183 = 0u;
    v182 = 0u;
    v181 = 0u;
    v180 = 0u;
    v179 = 0u;
    v178 = 0u;
    v177 = 0u;
    v176 = 0u;
    v175 = 0u;
    v174 = 0u;
    v173 = 0u;
    v172 = 0u;
    v171 = 0u;
    v170 = 0u;
    v169 = 0u;
    v168 = 0u;
    v167 = 0u;
    v166 = 0u;
    v165 = 0u;
    v164 = 0u;
    v163 = 0u;
    v162 = 0u;
    v161 = 0u;
    v160 = 0u;
    v159 = 0u;
    v158 = 0u;
    v157 = 0u;
    memset(buf, 0, sizeof(buf));
    v37 = getenv("RSYNC_PASSWORD");
    v38 = *(const char **)(v124[0] + 536);
    if (v38)
    {
      v39 = open(v38, 0);
      if (v39 == -1)
      {
        if (dword_100050EE8)
        {
          v80 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003B7D4((uint64_t)v124, v80, v41, v42, v43, v44, v45, v46);
        }
        sub_10001BFE8("%s: open", v40, v41, v42, v43, v44, v45, v46, *(_QWORD *)(v124[0] + 536));
        v9 = v121;
        goto LABEL_149;
      }
      v47 = v39;
      if (sub_100021BBC(*(_QWORD *)(v124[0] + 536), v39))
      {
        if (v37)
        {
          if (dword_100050EE8)
          {
            v48 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003B8B8(&v135, v136, v48);
          }
          sub_10001BF64("RSYNC_PASSWORD environment variable set but not used in favor of --password-file");
        }
        v49 = read(v47, buf, 0x1FFuLL);
        if (v49 < 0)
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_10003B87C();
          sub_10001BFE8("%s: read", v50, v51, v52, v53, v54, v55, v56, *(_QWORD *)(v124[0] + 536));
          close(v47);
        }
        else
        {
          v57 = v49;
          close(v47);
          if (v57)
          {
            buf[strcspn((const char *)buf, "\r\n")] = 0;
            v9 = v121;
            goto LABEL_64;
          }
        }
        goto LABEL_63;
      }
      close(v47);
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B840();
      sub_10001BF64("Ignoring password file '%s' due to strict mode violation", *(const char **)(v124[0] + 536));
    }
    if (!v37)
    {
LABEL_63:
      v9 = v121;
      if (!readpassphrase("Password: ", (char *)buf, 0x200uLL, 0))
        goto LABEL_149;
LABEL_64:
      v155 = 0u;
      v154 = 0u;
      v153 = 0u;
      v152 = 0u;
      v151 = 0u;
      v150 = 0u;
      v149 = 0u;
      v148 = 0u;
      v147 = 0u;
      v146 = 0u;
      v145 = 0u;
      v144 = 0u;
      v143 = 0u;
      v142 = 0u;
      v141 = 0u;
      *(_OWORD *)__s = 0u;
      v59 = sub_10002B68C((const char *)buf, (const char *)v32, __s, 0x100uLL);
      sub_10000364C(buf, 0x200uLL);
      if (v59)
      {
        v60 = strlen(v27);
        if (sub_10001A070((uint64_t)v124, a3, v27, v60))
        {
          if (sub_10001A170((uint64_t)v124, a3, 32))
          {
            if (sub_10001A078((uint64_t)v124, a3, __s))
              goto LABEL_68;
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100035DC0();
            v79 = "io_write_line";
          }
          else
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_100034C50();
            v79 = "io_write_byte";
          }
        }
        else
        {
          if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            sub_100035E3C();
          v79 = "io_write_buf";
        }
        sub_10001BFE8(v79, v61, v62, v63, v64, v65, v66, v67, v119);
      }
      else
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B73C();
        sub_10001BF64("Password hashing failed");
      }
      goto LABEL_153;
    }
    v58 = __strlcpy_chk(buf, v37, 512, 512);
    v9 = v121;
    if (v58 < 0x200)
      goto LABEL_64;
    if (dword_100050EE8)
    {
      v81 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003B768(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    sub_10001BF64("RSYNC_PASSWORD value too large (max %zu)", 0x1FFuLL);
LABEL_149:
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B710();
    sub_10001BF64("Failed to obtain password");
    goto LABEL_153;
  }
  v123 = v122;
  v70 = (char *)v9[v122];
  if (!v70)
  {
LABEL_90:
    if (!sub_10001A170((uint64_t)v124, a3, 10))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        goto LABEL_79;
      goto LABEL_80;
    }
    if (!sub_10001AF44(v124, a3, (char *)&v124[1] + 4))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_100035198();
      sub_10001C094("io_read_int");
      goto LABEL_81;
    }
    v77 = HIDWORD(v124[2]);
    if (SHIDWORD(v124[2]) <= 26)
    {
      if (dword_100050EE8)
      {
        v78 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v77;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = 27;
          _os_log_error_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "remote protocol %d is older than our minimum supported %d: exiting", buf, 0xEu);
          v77 = HIDWORD(v124[2]);
        }
      }
      sub_10001BF64("remote protocol %d is older than our minimum supported %d: exiting", v77, 27);
LABEL_144:
      v68 = 2;
      goto LABEL_82;
    }
    if (SHIDWORD(v124[2]) < SLODWORD(v124[2]))
      HIDWORD(v133) = HIDWORD(v124[2]);
    if (*(_QWORD *)(v124[0] + 528))
    {
      if (sub_100006750(v124))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003B68C();
        sub_10001C094("batch_open");
        goto LABEL_144;
      }
      v89 = v9;
      v68 = 0;
    }
    else
    {
      v89 = v9;
      v68 = 1;
    }
    DWORD2(v125) = 1;
    if (dword_100050EE8)
    {
      v90 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_INFO, "read multiplexing enabled", buf, 2u);
      }
    }
    sub_10001BE54(1, "read multiplexing enabled", v71, v72, v73, v74, v75, v76, v119);
    if (dword_100050EE8)
    {
      v97 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v124[2];
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = HIDWORD(v124[2]);
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = HIDWORD(v133);
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&buf[22] = HIDWORD(v124[1]);
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "socket detected client version %d, server version %d, negotiated protocol version %d, seed %d", buf, 0x1Au);
      }
    }
    sub_10001BE54(1, "socket detected client version %d, server version %d, negotiated protocol version %d, seed %d", v91, v92, v93, v94, v95, v96, v124[2]);
    v104 = *(_DWORD *)(v124[0] + 512);
    if (v104 == -1)
      sub_10003B63C();
    if (dword_100050EE8)
    {
      v105 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
      {
        if (v104)
          v106 = "disabled";
        else
          v106 = "enabled";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v106;
        _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_INFO, "Delta transmission %s for this transfer", buf, 0xCu);
        v104 = *(_DWORD *)(v124[0] + 512);
      }
    }
    if (v104)
      v107 = "disabled";
    else
      v107 = "enabled";
    sub_10001BE54(1, "Delta transmission %s for this transfer", v98, v99, v100, v101, v102, v103, (char)v107);
    if (*(_DWORD *)(a4 + 40) == 1)
    {
      if (dword_100050EE8)
      {
        v114 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v115 = *(_QWORD *)(a4 + 8);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v115;
          _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_INFO, "client starting receiver: %s", buf, 0xCu);
        }
      }
      sub_10001BE54(1, "client starting receiver: %s", v108, v109, v110, v111, v112, v113, *(_QWORD *)(a4 + 8));
      v9 = v89;
      if (!sub_1000232D0((uint64_t)v124, v120, a3, a3, *(char **)(a4 + 32)))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000351EC();
        sub_10001C094("rsync_receiver");
        goto LABEL_82;
      }
    }
    else
    {
      v9 = v89;
      if (dword_100050EE8)
      {
        v116 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          v117 = *(_QWORD *)(a4 + 8);
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v117;
          _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_INFO, "client starting sender: %s", buf, 0xCu);
        }
      }
      sub_10001BE54(1, "client starting sender: %s", v108, v109, v110, v111, v112, v113, *(_QWORD *)(a4 + 8));
      if (!sub_100026A9C((uint64_t)v124, a3, a3, *(_QWORD *)(a4 + 24), *(const char ***)(a4 + 16)))
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003526C();
        sub_10001C094("rsync_sender");
        goto LABEL_82;
      }
    }
    if (sub_10001979C(v124, a3))
    {
      if (BYTE8(v133))
      {
        if ((uint64_t)v133 < *(_QWORD *)(v124[0] + 592))
          sub_10003B664();
        v68 = 25;
      }
      else if (*((_QWORD *)&v132 + 1))
      {
        v68 = 23;
      }
      else
      {
        v68 = 0;
      }
    }
    else
    {
      if (dword_100050EE8)
      {
        v118 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_INFO, "data remains in read pipe", buf, 2u);
        }
      }
      sub_10001C1CC("data remains in read pipe");
      v68 = 14;
    }
    goto LABEL_82;
  }
  while (sub_10001A078((uint64_t)v124, a3, v70))
  {
    v70 = (char *)v9[++v123];
    if (!v70)
      goto LABEL_90;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
LABEL_79:
    sub_100035DC0();
LABEL_80:
  sub_10001C094("io_write_line");
LABEL_81:
  v68 = 1;
LABEL_82:
  sub_100006978(v124, a4, v68);
  free(v9);
  return v68;
}

BOOL sub_10002E000(int a1)
{
  stat v3;

  memset(&v3, 0, sizeof(v3));
  return fstat(a1, &v3) != -1 && (v3.st_mode & 0xF000) == 49152;
}

uint64_t sub_10002E050(int a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _DWORD *v7;
  int v8;

  if (!a3)
    return 0;
  v4 = a4;
  if (!a4)
    return 0xFFFFFFFFLL;
  v7 = a3;
  while (1)
  {
    v8 = *v7;
    v7 += 48;
    if (v8 == a2 && bind(a1, (const sockaddr *)(a3 + 14), a3[46]) != -1)
      break;
    a3 = v7;
    if (!--v4)
      return 0xFFFFFFFFLL;
  }
  return 0;
}

void sub_10002E0CC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10002E0D8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

const char *sub_10002E110(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return gai_strerror(a2);
}

char *sub_10002E130(const char *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  ssize_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  char *v22;
  char v24;

  v2 = (char *)malloc_type_realloc(0, 0x401uLL, 0x5D82581AuLL);
  if (v2)
  {
    v10 = v2;
    v11 = 1024;
    while (1)
    {
      v12 = readlink(a1, v10, v11);
      if (!v12)
        break;
      if (v12 == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_1000380BC();
        sub_10001BFE8("%s: readlink", v13, v14, v15, v16, v17, v18, v19, (char)a1);
LABEL_21:
        v22 = v10;
        goto LABEL_22;
      }
      if (v12 < v11)
      {
        if (v12 <= 0)
          sub_10003B980();
        v10[v12] = 0;
        return v10;
      }
      v20 = v10;
      v10 = (char *)malloc_type_realloc(v10, (2 * v11) | 1, 0x5D82581AuLL);
      v11 *= 2;
      if (!v10)
        goto LABEL_9;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B9A8();
    sub_10001BF64("%s: empty link", a1);
    goto LABEL_21;
  }
  v20 = 0;
LABEL_9:
  if (dword_100050EE8)
  {
    v21 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B94C(v21, v3, v4, v5, v6, v7, v8, v9);
  }
  sub_10001BFE8("realloc", v3, v4, v5, v6, v7, v8, v9, v24);
  v22 = v20;
LABEL_22:
  free(v22);
  return 0;
}

char *sub_10002E2E8(int a1, const char *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  ssize_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  char *v24;
  char v26;

  v4 = (char *)malloc_type_realloc(0, 0x401uLL, 0x84573BAAuLL);
  if (v4)
  {
    v12 = v4;
    v13 = 1024;
    while (1)
    {
      v14 = readlinkat(a1, a2, v12, v13);
      if (!v14)
        break;
      if (v14 == -1)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003BA30();
        sub_10001BFE8("%s: readlinkat", v15, v16, v17, v18, v19, v20, v21, (char)a2);
LABEL_21:
        v24 = v12;
        goto LABEL_22;
      }
      if (v14 < v13)
      {
        if (v14 <= 0)
          sub_10003BA08();
        v12[v14] = 0;
        return v12;
      }
      v22 = v12;
      v12 = (char *)malloc_type_realloc(v12, (2 * v13) | 1, 0x84573BAAuLL);
      v13 *= 2;
      if (!v12)
        goto LABEL_9;
    }
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B9A8();
    sub_10001BF64("%s: empty link", a2);
    goto LABEL_21;
  }
  v22 = 0;
LABEL_9:
  if (dword_100050EE8)
  {
    v23 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003B94C(v23, v5, v6, v7, v8, v9, v10, v11);
  }
  sub_10001BFE8("realloc", v5, v6, v7, v8, v9, v10, v11, v26);
  v24 = v22;
LABEL_22:
  free(v24);
  return 0;
}

uint64_t sub_10002E4A8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  qsort(*(void **)(a1 + 112), *(_QWORD *)(a1 + 120), 0x98uLL, (int (__cdecl *)(const void *, const void *))sub_10000F7D8);
  return sub_1000139CC(a2, *(_DWORD *)(a1 + 64), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4, v5, v6, v7);
}

void *sub_10002E4EC(const char *a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, size_t a7, __int16 a8)
{
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;

  v16 = malloc_type_calloc(1uLL, 0x98uLL, 0x1030040C06138BFuLL);
  if (!v16)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003BA90();
    sub_10001BFE8("calloc", v17, v18, v19, v20, v21, v22, v23, v42);
    return 0;
  }
  v24 = v16;
  *(_DWORD *)v16 = 0;
  v16[24] = a8;
  v25 = strdup(a1);
  *((_QWORD *)v24 + 7) = v25;
  if (!v25)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100036664();
    sub_10001BFE8("strdup", v26, v27, v28, v29, v30, v31, v32, v42);
    goto LABEL_16;
  }
  *((_DWORD *)v24 + 16) = a2;
  *((_DWORD *)v24 + 17) = a3;
  *((_QWORD *)v24 + 9) = a5;
  *((_DWORD *)v24 + 20) = a4;
  *((_QWORD *)v24 + 11) = a6;
  *((_QWORD *)v24 + 12) = a7;
  *((_QWORD *)v24 + 13) = 0;
  v33 = malloc_type_calloc(a7, 4uLL, 0x100004052888210uLL);
  *((_QWORD *)v24 + 17) = v33;
  if (!v33)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003BA90();
    sub_10001BFE8("calloc", v34, v35, v36, v37, v38, v39, v40, v42);
    free(*((void **)v24 + 7));
LABEL_16:
    free(v24);
    return 0;
  }
  return v24;
}

uint64_t sub_10002E6A4(uint64_t result)
{
  if (*(_DWORD *)result != 2)
    sub_10003BAC0();
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 144);
  *(_QWORD *)(result + 72) = 16;
  return result;
}

void sub_10002E6E4(void **a1)
{
  if (a1)
  {
    free(a1[7]);
    free(a1[17]);
    free(a1[1]);
    free(a1);
  }
}

uint64_t sub_10002E724(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (*(_DWORD *)result == 1)
    sub_10003BAE8();
  v3 = result;
  v4 = *(_QWORD *)(result + 104);
  if (v4 != *(_QWORD *)(result + 96) && *(_DWORD *)(*(_QWORD *)a2 + 204))
  {
    v6 = *(_QWORD *)(result + 40);
    if (v4 < v6)
    {
      v8 = 152 * v4;
      do
      {
        v9 = *(_QWORD *)(v3 + 88) + v8;
        if ((*(_WORD *)(v9 + 24) & 0xF000) == 0x8000)
        {
          v10 = *(_DWORD *)(v9 + 112);
          if ((v10 & 0xE) == 0)
            break;
          if ((v10 & 8) == 0)
          {
            if ((v10 & 2) != 0 && *(int *)(v3 + 144) > 0)
              break;
            if ((*(_DWORD *)(v9 + 112) & 0x16) == 4)
            {
              result = sub_10001A8E4(a2, a3, v4, 100);
              if (!(_DWORD)result)
                break;
              *(_DWORD *)(v9 + 112) |= 0x10u;
              v6 = *(_QWORD *)(v3 + 40);
            }
          }
        }
        ++v4;
        v8 += 152;
      }
      while (v4 < v6);
    }
    *(_QWORD *)(v3 + 104) = v4;
  }
  return result;
}

uint64_t sub_10002E820(uint64_t a1, char *a2, uint64_t a3, int *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  uint64_t v9;
  int *v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  size_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _WORD *v27;
  unsigned int v28;
  const char **v29;
  _DWORD *v30;
  int v31;
  NSObject *v32;
  char **v33;
  uint64_t v34;
  NSObject *v35;
  char *v36;
  int *v37;
  int v38;
  uint64_t v39;
  NSObject *v40;
  mode_t v41;
  int v42;
  char *v43;
  int v44;
  _DWORD *v45;
  NSObject *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  _DWORD *v56;
  _DWORD *v57;
  int v58;
  mode_t st_mode;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  __darwin_ino64_t *v64;
  const char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  NSObject *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  mode_t v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  char *v96;
  NSObject *v97;
  unsigned int v98;
  _DWORD *v99;
  int v100;
  char *v101;
  int v102;
  NSObject *v103;
  _DWORD *v104;
  unsigned int v105;
  unsigned int v106;
  NSObject *v107;
  int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  int v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  NSObject *v127;
  const char *v128;
  int v129;
  int v130;
  const char *v131;
  int v132;
  const char *v133;
  int *v134;
  int v135;
  int *v136;
  _DWORD *v137;
  unsigned int v138;
  const char *v139;
  const char *v140;
  int *v141;
  int *v142;
  int v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  size_t v147;
  size_t v148;
  size_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  NSObject *v161;
  int *v162;
  int v163;
  unsigned int v164;
  NSObject *v165;
  int *v166;
  int *v167;
  int v168;
  NSObject *v169;
  const char **v170;
  int *v171;
  char *v172;
  int *v173;
  int v174;
  int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  const char *v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSObject *v193;
  _DWORD *v194;
  char *v195;
  char *v196;
  int v197;
  const char *v198;
  char *v199;
  uint64_t v200;
  int v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  char *v211;
  int v212;
  int v213;
  int v214;
  NSObject *v215;
  const char *v216;
  const char *v217;
  __darwin_ino64_t v218;
  const char *v219;
  NSObject *v220;
  const char *v221;
  __darwin_ino64_t v222;
  NSObject *v223;
  const char *v224;
  __darwin_ino64_t v225;
  const char *v226;
  const char *v227;
  const char *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  unint64_t v233;
  uint64_t v234;
  _DWORD *v235;
  size_t v236;
  int v237;
  int64_t v238;
  unint64_t v239;
  size_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  off_t v259;
  ssize_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  BOOL v268;
  char *v269;
  unint64_t v271;
  unint64_t v272;
  unsigned __int8 *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  NSObject *v286;
  size_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  size_t v293;
  size_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  _DWORD *v306;
  uint64_t v307;
  uint64_t v309;
  const char *v310;
  char *v311;
  int *v312;
  int *v313;
  int *v314;
  int *v315;
  off_t st_size;
  __darwin_ino64_t v317;
  int *v319;
  int *v320;
  int *v321;
  unint64_t v322;
  size_t v323;
  unint64_t *v324;
  char *v325;
  uint64_t v326;
  char v327;
  char v328[15];
  char v329;
  char v330[15];
  char v331;
  char v332[15];
  char v333;
  char v334[15];
  char v335;
  char v336[3];
  int v337;
  char *v338;
  char v339;
  char v340[15];
  char v341;
  char v342[15];
  char v343;
  char v344[15];
  char v345;
  char v346[15];
  char v347;
  char v348[15];
  char v349;
  char v350[15];
  char v351;
  char v352[15];
  char v353;
  char v354[15];
  char v355;
  char v356[7];
  char *__s;
  stat buf[7];
  stat v359;

  v8 = a4;
  v9 = a3;
  v10 = (int *)a2;
  v326 = 0;
  v12 = *(_QWORD *)(a3 + 200);
  if (!*(_QWORD *)(v12 + 8))
    *(_QWORD *)(v12 + 8) = a1 + 144;
  v13 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 1)
  {
    v14 = *(_QWORD *)(a1 + 8);
    if (!v14)
      sub_10003BB60();
    if (*a4 == -1)
      sub_10003BB88();
    if (*(_DWORD *)a2 != -1)
      sub_10003BBE0();
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = v16 > v15;
    v18 = v16 - v15;
    if (!v17)
      goto LABEL_17;
    if (v18 >= 0x8000)
      v19 = 0x8000;
    else
      v19 = v18;
    if (!sub_10001A070(a3, *(_DWORD *)(a1 + 80), (char *)(v14 + v15), v19))
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003BBB0();
      sub_10001C094("io_write_nonblocking");
      return 0xFFFFFFFFLL;
    }
    v20 = *(_QWORD *)(a1 + 32) + v19;
    *(_QWORD *)(a1 + 32) = v20;
    if (v20 >= *(_QWORD *)(a1 + 16))
    {
LABEL_17:
      *(_DWORD *)a1 = 0;
      ++*(_QWORD *)(a1 + 40);
      if (!*(_DWORD *)(*(_QWORD *)v9 + 196))
        sub_10002E724(a1, v9, *v8);
    }
    return 1;
  }
  if (v13)
  {
    if (v13 != 2)
      sub_10003BB10();
    sub_10003BB38();
  }
  if (*(_DWORD *)a2 != -1)
    sub_10003C218();
  if (*a4 == -1)
    sub_10003BC08();
  v21 = *(_QWORD *)(a1 + 40);
  v324 = (unint64_t *)(a1 + 40);
  v22 = *(_QWORD *)(a1 + 96);
  if (v21 >= v22)
  {
    v323 = 0;
    v233 = 0;
    goto LABEL_500;
  }
  v323 = 0;
  v319 = (int *)a2;
  v321 = (int *)(a1 + 64);
  v315 = (int *)(a1 + 68);
  st_size = 0;
  while (2)
  {
    v23 = *(_QWORD *)(a1 + 88);
    if (*(_DWORD *)(v23 + 152 * v21 + 144) == -1)
      sub_10003BC30();
    v24 = *(_DWORD *)(a1 + 144);
    if (v24 == 2 || v24 == 1 && (*(_BYTE *)(v23 + 152 * v21 + 112) & 2) == 0)
      goto LABEL_290;
    v25 = 0;
    v26 = v23 + 152 * v21;
    v28 = *(unsigned __int16 *)(v26 + 24);
    v27 = (_WORD *)(v26 + 24);
    switch((v28 >> 12) ^ 8)
    {
      case 0u:
        __s = 0;
        v338 = 0;
        memset(&v359, 0, sizeof(v359));
        v337 = -1;
        if ((*v27 & 0xF000) != 0x8000)
          sub_10003BFF8();
        v33 = (char **)(v23 + 152 * v21);
        v34 = *(_QWORD *)v9;
        if (*(_DWORD *)(*(_QWORD *)v9 + 36) == 2 || *(_QWORD *)(v34 + 520))
        {
          if (!*(_DWORD *)(v34 + 4))
          {
            if (dword_100050EE8)
            {
              v35 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
              {
                v36 = *v33;
                buf[0].st_dev = 136315138;
                *(_QWORD *)&buf[0].st_mode = v36;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buf, 0xCu);
              }
            }
            sub_10001BE54(0, "%s", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v33);
          }
          goto LABEL_270;
        }
        v74 = *(_QWORD *)(v34 + 224);
        if ((v74 & 0x8000000000000000) == 0 && *(_QWORD *)(v23 + 152 * v21 + 40) > v74)
        {
          if (dword_100050EE8)
          {
            v75 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              v76 = *v33;
              buf[0].st_dev = 136315138;
              *(_QWORD *)&buf[0].st_mode = v76;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "skipping over max-size file %s", (uint8_t *)buf, 0xCu);
            }
          }
          sub_10001C1CC("skipping over max-size file %s");
          goto LABEL_270;
        }
        v94 = *(_QWORD *)(v34 + 232);
        if ((v94 & 0x8000000000000000) == 0 && *(_QWORD *)(v23 + 152 * v21 + 40) < v94)
        {
          if (dword_100050EE8)
          {
            v95 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              v96 = *v33;
              buf[0].st_dev = 136315138;
              *(_QWORD *)&buf[0].st_mode = v96;
              _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "skipping under min-size file %s", (uint8_t *)buf, 0xCu);
            }
          }
          sub_10001C1CC("skipping under min-size file %s");
          goto LABEL_270;
        }
        *v319 = -1;
        v98 = sub_1000325CC(*v321, v23 + 152 * v21, &v359, (_DWORD **)v9, a5, 0);
        v25 = v98;
        if (v98 == -1)
        {
          st_size = 0;
          goto LABEL_271;
        }
        if (v98 != 2)
        {
          if (v98 == 4)
            goto LABEL_435;
          if (v98 <= 2)
          {
            v99 = *(_DWORD **)v9;
            if (v98)
            {
LABEL_427:
              v100 = 0;
            }
            else
            {
              if (v99[46])
                goto LABEL_431;
              v100 = 1;
            }
            if (!v99[9] && !sub_100022DA0(v9, 0, *v321, (const char **)(v23 + 152 * v21), *v33))
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003BF54(&v335, v336);
              sub_10001C094("rsync_set_metadata");
              goto LABEL_478;
            }
            if (v100)
            {
LABEL_431:
              if (dword_100050EE8)
              {
                v193 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
                {
                  v229 = *v33;
                  buf[0].st_dev = 136315138;
                  *(_QWORD *)&buf[0].st_mode = v229;
                  _os_log_debug_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_DEBUG, "%s: skipping: up to date", (uint8_t *)buf, 0xCu);
                }
              }
              sub_10001BE54(2, "%s: skipping: up to date", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v33);
LABEL_435:
              st_size = 0;
              goto LABEL_270;
            }
          }
LABEL_436:
          v194 = *(_DWORD **)v9;
          v195 = *(char **)(*(_QWORD *)v9 + 48);
          if (v195)
          {
            v196 = sub_100009F20(v9, (char **)(v23 + 152 * v21), (char *)buf, 0x400uLL);
            v197 = sub_100032A54((_DWORD **)v9, a1, &v338, &v359, v196, (uint64_t *)(v23 + 152 * v21), a5, v25, 2, &v337, 1u);
            if (v197 < 1)
            {
              st_size = 0;
              v25 = v197;
              goto LABEL_271;
            }
            v195 = v338;
            if (v338)
            {
              __s = v338;
              st_size = v359.st_size;
            }
            else
            {
              st_size = 0;
            }
            v194 = *(_DWORD **)v9;
          }
          else
          {
            st_size = 0;
          }
          v199 = (char *)*((_QWORD *)v194 + 34);
          if (v199)
          {
            v311 = v195;
            v313 = v8;
            v200 = 280;
            while (1)
            {
              v201 = sub_100032A54((_DWORD **)v9, a1, &__s, &v359, v199, (uint64_t *)(v23 + 152 * v21), a5, v25, v194[35], 0, 0);
              if (v201 <= 0)
                break;
              v194 = *(_DWORD **)v9;
              v199 = *(char **)(*(_QWORD *)v9 + v200);
              v200 += 8;
              if (!v199)
              {
                v202 = __s;
                v195 = v311;
                v8 = v313;
                goto LABEL_450;
              }
            }
            v214 = v201;
            if (v337 != -1)
              close(v337);
            st_size = 0;
            v25 = v214;
            v8 = v313;
            goto LABEL_271;
          }
          v202 = v195;
LABEL_450:
          if (v195 || !v202)
          {
            if (v195)
            {
              v210 = v337;
              v211 = sub_10000A0F8((char **)(v23 + 152 * v21));
              v212 = openat(v210, v211, 256);
              *v319 = v212;
              if (v212 == -1)
                goto LABEL_483;
              *(_DWORD *)(v23 + 152 * v21 + 8) = v337;
              goto LABEL_481;
            }
LABEL_458:
            if (v25 != 3 || !v194[145] || sub_100032DC4(a1, v23 + 152 * v21, (uint64_t)&v359, v319))
            {
              if (v337 != -1)
                sub_10003BFA8();
              st_size = v359.st_size;
              v213 = openat(*v321, *v33, 256);
              *v319 = v213;
LABEL_482:
              if (v213 != -1)
              {
LABEL_485:
                v25 = 1;
                goto LABEL_271;
              }
LABEL_483:
              if (*__error() != 2 && *__error() != 31)
              {
                if (dword_100050EE8)
                {
                  v223 = qword_100050EF8;
                  if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                  {
                    v232 = *v33;
                    buf[0].st_dev = 136315138;
                    *(_QWORD *)&buf[0].st_mode = v232;
                    _os_log_error_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_ERROR, "%s: pre_file: openat", (uint8_t *)buf, 0xCu);
                  }
                }
                sub_10001BFE8("%s: pre_file: openat", (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v33);
                if (v337 != -1)
                  close(v337);
                goto LABEL_249;
              }
              goto LABEL_485;
            }
            if (v337 != -1)
              sub_10003BF80();
            st_size = v359.st_size;
LABEL_481:
            v213 = *v319;
            goto LABEL_482;
          }
          if (v337 != -1)
            sub_10003BFD0();
          sub_100009E08(*v321, v202, (const char **)(v23 + 152 * v21));
          if (fstatat(*v321, *v33, &v359, 32) != -1)
          {
            v194 = *(_DWORD **)v9;
            goto LABEL_458;
          }
          if (dword_100050EE8)
          {
            v220 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            {
              v231 = *v33;
              buf[0].st_dev = 136315138;
              *(_QWORD *)&buf[0].st_mode = v231;
              _os_log_error_impl((void *)&_mh_execute_header, v220, OS_LOG_TYPE_ERROR, "%s: fstatat", (uint8_t *)buf, 0xCu);
            }
          }
          sub_10001BFE8("%s: fstatat", v203, v204, v205, v206, v207, v208, v209, (char)*v33);
LABEL_478:
          st_size = 0;
          goto LABEL_249;
        }
        v163 = v359.st_mode & 0xF000;
        v99 = *(_DWORD **)v9;
        if (v163 == 0x8000)
          goto LABEL_427;
        if (v163 == 0x4000 && v99[141])
        {
          v164 = v99[24];
          LODWORD(a3) = 128;
          if (v164 > 5 || ((1 << v164) & 0x35) == 0)
            goto LABEL_425;
        }
        else if (v99[24] != 2)
        {
          goto LABEL_413;
        }
        if (!sub_100031C84(a1, (_QWORD *)v9, 3))
          goto LABEL_478;
        v163 = v359.st_mode & 0xF000;
LABEL_413:
        if (v163 == 0x4000)
        {
          LODWORD(a3) = 128;
        }
        else
        {
          a3 = 0;
          v99 = *(_DWORD **)v9;
          if (!*(_DWORD *)(*(_QWORD *)v9 + 40))
            goto LABEL_427;
        }
LABEL_425:
        if (unlinkat(*v321, *v33, a3) != -1)
        {
          v25 = 3;
          goto LABEL_436;
        }
        if (dword_100050EE8)
        {
          v215 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          {
            v230 = *v33;
            buf[0].st_dev = 136315138;
            *(_QWORD *)&buf[0].st_mode = v230;
            _os_log_error_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_ERROR, "%s: unlinkat", (uint8_t *)buf, 0xCu);
          }
        }
        sub_10001BFE8("%s: unlinkat", v186, v187, v188, v189, v190, v191, v192, (char)*v33);
        st_size = 0;
LABEL_409:
        v25 = 0;
        ++*(_QWORD *)(v9 + 240);
LABEL_271:
        if (!*(_DWORD *)(v9 + 164))
          sub_10001C444((_QWORD *)v9, *(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40), 1);
        if (v25 < 0)
          return 0xFFFFFFFFLL;
        v21 = *v324;
        if (!v25)
        {
          v145 = *(_QWORD *)(a1 + 88);
          *(_DWORD *)(v145 + 152 * v21 + 112) |= 4u;
          if (*(int *)(v9 + 260) >= 29)
          {
            v146 = v145 + 152 * v21;
            if ((*(_DWORD *)(v146 + 116) & 0x800) != 0)
              v147 = 7;
            else
              v147 = 6;
            *(_QWORD *)(a1 + 16) = v147;
            if ((*(_BYTE *)(v146 + 117) & 0x10) != 0)
            {
              *(_QWORD *)(a1 + 16) = v147 + 1;
              v148 = strlen(*(const char **)(v145 + 152 * v21 + 88));
              v149 = v147 + 2;
              if (v148 <= 0x7F)
                v149 = v147 + 1;
              v323 = v148;
              v147 = v149 + v148;
              *(_QWORD *)(a1 + 16) = v149 + v148;
            }
            v150 = *(void **)(a1 + 8);
            if (v147 > *(_QWORD *)(a1 + 24))
            {
              v150 = malloc_type_realloc(v150, v147, 0x778E0BBuLL);
              if (!v150)
              {
                if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                  sub_10003BC58();
                sub_10001BFE8("realloc", v151, v152, v153, v154, v155, v156, v157, (char)v310);
                return 0xFFFFFFFFLL;
              }
              *(_QWORD *)(a1 + 8) = v150;
              v147 = *(_QWORD *)(a1 + 16);
              *(_QWORD *)(a1 + 24) = v147;
              v21 = *(_QWORD *)(a1 + 40);
            }
            v326 = 0;
            *(_QWORD *)(a1 + 32) = 0;
            sub_10001AA28((uint64_t)v150, &v326, v147, v21);
            sub_10001AD18(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), *(_DWORD *)(*(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40) + 116));
            v158 = *(_QWORD *)(a1 + 88);
            v159 = *(_QWORD *)(a1 + 40);
            v160 = *(_DWORD *)(v158 + 152 * v159 + 116);
            if ((v160 & 0x800) != 0)
            {
              sub_10001AD40(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), *(_BYTE *)(v158 + 152 * v159 + 120));
              v158 = *(_QWORD *)(a1 + 88);
              v159 = *(_QWORD *)(a1 + 40);
              v160 = *(_DWORD *)(v158 + 152 * v159 + 116);
            }
            if ((v160 & 0x1000) != 0)
              sub_10001AB24(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), *(void **)(v158 + 152 * v159 + 88), v323);
          }
LABEL_290:
          v21 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v21;
          v22 = *(_QWORD *)(a1 + 96);
          if (v21 >= v22)
            goto LABEL_499;
          continue;
        }
        v22 = *(_QWORD *)(a1 + 96);
LABEL_499:
        v10 = v319;
        v233 = st_size;
LABEL_500:
        *v8 = -1;
        if (v21 != v22)
        {
          *(_DWORD *)a1 = 1;
          v235 = *(_DWORD **)v9;
          if (*(_QWORD *)(*(_QWORD *)v9 + 520))
          {
            v325 = 0;
          }
          else
          {
            v236 = *(_QWORD *)(a1 + 72);
            v237 = *v10;
            if (*v10 == -1 || (uint64_t)v233 < 1)
            {
              if (v237 != -1)
              {
                close(v237);
                *v10 = -1;
              }
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
                sub_10003BD88();
              sub_10001BE54(2, "%s: not mapped", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40)));
              if (*v10 != -1)
                sub_10003BD60();
              v240 = 0;
              v325 = 0;
              LODWORD(v239) = 0;
              LODWORD(v238) = 0x8000;
            }
            else
            {
              v238 = *((_QWORD *)v235 + 61);
              if (v238 >= 536870913)
                errx(1, "--block-size=%ld: must be no greater than %d", v238, 0x20000000);
              if (v235[128])
              {
                v239 = 0;
                v238 = 0;
                v236 = 0;
                v240 = 0;
              }
              else
              {
                if (v238 <= 0)
                {
                  if (v233 < 0x77A10)
                  {
                    v238 = 700;
                  }
                  else
                  {
                    v238 = vcvtpd_u64_f64(sqrt((double)(uint64_t)v233));
                    if ((v238 & 7) != 0)
                      v238 = (v238 & 0xFFFFFFFFFFFFFFF8) + 8;
                  }
                }
                v239 = v233;
                v240 = v233 / v238;
                if (v238 > v233 || (v239 = v233 % v238) != 0)
                  ++v240;
              }
              if (v235[28])
                fcntl(v237, 48);
              if (!*(_DWORD *)(a1 + 144) && (**(_DWORD **)(v9 + 200) || *(_DWORD *)(*(_QWORD *)v9 + 512)))
              {
                v325 = 0;
              }
              else
              {
                if (!v240)
                  sub_10003BCE0();
                v325 = (char *)malloc_type_calloc(v240, 0x30uLL, 0x100004064842E6AuLL);
                if (!v325)
                {
                  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                    sub_10003BA90();
                  sub_10001BFE8("calloc", v241, v242, v243, v244, v245, v246, v247, (char)v310);
                  close(*v10);
                  v234 = 0xFFFFFFFFLL;
                  *v10 = -1;
                  return v234;
                }
                v248 = malloc_type_malloc(v238, 0x14DA2970uLL);
                if (!v248)
                {
                  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                    sub_100036390();
                  sub_10001BFE8("malloc", v249, v250, v251, v252, v253, v254, v255, (char)v310);
                  close(*v10);
                  v234 = 0xFFFFFFFFLL;
                  *v10 = -1;
LABEL_607:
                  free(v325);
                  return v234;
                }
                v256 = v248;
                v317 = v233;
                v320 = v10;
                v322 = v239;
                v314 = v8;
                v257 = 0;
                v258 = 0;
                v259 = 0;
                do
                {
                  v260 = pread(*v320, v256, v238, v259);
                  v268 = v260 == v238 || v260 == v239;
                  if (!v268)
                  {
                    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                      sub_10003BD30();
                    sub_10001BFE8("pread", v261, v262, v263, v264, v265, v266, v267, (char)v310);
                    close(*v320);
                    v234 = 0xFFFFFFFFLL;
                    *v320 = -1;
                    free(v256);
                    goto LABEL_607;
                  }
                  v268 = v239 == 0;
                  v269 = &v325[v257];
                  if (!v268 && v240 - 1 == v258)
                    v271 = v322;
                  else
                    v271 = v238;
                  *((_QWORD *)v269 + 1) = v258;
                  *((_QWORD *)v269 + 2) = v271;
                  *(_QWORD *)v269 = v259;
                  *((_DWORD *)v269 + 6) = sub_100018A8C((uint64_t)v256, v271);
                  v272 = *((_QWORD *)v269 + 2);
                  v273 = (unsigned __int8 *)(v269 + 28);
                  v239 = v322;
                  sub_100018B24((char *)v256, v272, v273, v9);
                  v259 += v238;
                  sub_10001BE54(3, "i=%ld, offs=%lld, msz=%ld, blk.len=%lu, blk.rem=%lu", v274, v275, v276, v277, v278, v279, v258++);
                  v257 += 48;
                }
                while (v240 != v258);
                free(v256);
                if (dword_100050EE8)
                {
                  v286 = qword_100050EF8;
                  if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
                  {
                    v309 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40));
                    buf[0].st_dev = 136315650;
                    *(_QWORD *)&buf[0].st_mode = v309;
                    WORD2(buf[0].st_ino) = 2048;
                    *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 6) = v317;
                    HIWORD(buf[0].st_gid) = 2048;
                    *(_QWORD *)&buf[0].st_rdev = v240;
                    _os_log_debug_impl((void *)&_mh_execute_header, v286, OS_LOG_TYPE_DEBUG, "%s: mapped %jd B with %zu blocks", (uint8_t *)buf, 0x20u);
                  }
                }
                sub_10001BE54(2, "%s: mapped %jd B with %zu blocks", v280, v281, v282, v283, v284, v285, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40)));
                v8 = v314;
                v10 = v320;
                LODWORD(v239) = v322;
              }
              close(*v10);
              *v10 = -1;
            }
            *(_QWORD *)(a1 + 16) = 20;
            if (*(int *)(a1 + 144) <= 0 && **(_DWORD **)(v9 + 200))
            {
              v287 = 20;
            }
            else
            {
              v287 = (v236 + 4) * v240 + 20;
              *(_QWORD *)(a1 + 16) = v287;
            }
            if (*(int *)(v9 + 260) >= 29)
            {
              v288 = *(_QWORD *)(a1 + 88);
              v289 = *(_QWORD *)(a1 + 40);
              v290 = v288 + 152 * v289;
              v291 = *(_DWORD *)(v290 + 116);
              *(_DWORD *)(v290 + 116) = v291 | 0x8000;
              v292 = 2;
              if ((v291 & 0x800) != 0)
                v292 = 3;
              v287 += v292;
              *(_QWORD *)(a1 + 16) = v287;
              if ((v291 & 0x1000) != 0)
              {
                *(_QWORD *)(a1 + 16) = v287 + 1;
                v293 = strlen(*(const char **)(v288 + 152 * v289 + 88));
                v294 = v287 + 2;
                if (v293 <= 0x7F)
                  v294 = v287 + 1;
                v323 = v293;
                v287 = v294 + v293;
                *(_QWORD *)(a1 + 16) = v294 + v293;
              }
            }
            v295 = *(void **)(a1 + 8);
            if (v287 > *(_QWORD *)(a1 + 24))
            {
              v295 = malloc_type_realloc(v295, v287, 0x98F014A7uLL);
              if (!v295)
              {
                if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                  sub_10003BC58();
                sub_10001BFE8("realloc", v296, v297, v298, v299, v300, v301, v302, (char)v310);
                free(v325);
                return 0xFFFFFFFFLL;
              }
              *(_QWORD *)(a1 + 8) = v295;
              v287 = *(_QWORD *)(a1 + 16);
              *(_QWORD *)(a1 + 24) = v287;
            }
            v326 = 0;
            *(_QWORD *)(a1 + 32) = 0;
            sub_10001AA28((uint64_t)v295, &v326, v287, *(_DWORD *)(*(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40) + 144));
            if (*(int *)(v9 + 260) >= 29)
            {
              sub_10001AD18(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), *(_DWORD *)(*(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40) + 116));
              v303 = *(_QWORD *)(a1 + 88);
              v304 = *(_QWORD *)(a1 + 40);
              v305 = *(_DWORD *)(v303 + 152 * v304 + 116);
              if ((v305 & 0x800) != 0)
              {
                sub_10001AD40(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), *(_BYTE *)(v303 + 152 * v304 + 120));
                v303 = *(_QWORD *)(a1 + 88);
                v304 = *(_QWORD *)(a1 + 40);
                v305 = *(_DWORD *)(v303 + 152 * v304 + 116);
              }
              if ((v305 & 0x1000) != 0)
                sub_10001AB24(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), *(void **)(v303 + 152 * v304 + 88), v323);
            }
            sub_10001AA28(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), v240);
            sub_10001AA28(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), v238);
            sub_10001AA28(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), v236);
            sub_10001AA28(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), v239);
            if (!**(_DWORD **)(v9 + 200) && !*(_DWORD *)(*(_QWORD *)v9 + 512) && v240)
            {
              v306 = v325 + 28;
              do
              {
                sub_10001AA28(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), *(v306 - 1));
                sub_10001A914(*(_QWORD *)(a1 + 8), &v326, *(_QWORD *)(a1 + 16), v306, v236);
                v306 += 12;
                --v240;
              }
              while (v240);
            }
            if (v326 != *(_QWORD *)(a1 + 16))
              sub_10003BD08();
            v307 = *(_QWORD *)(v9 + 80);
            ++*(_QWORD *)(v9 + 72);
            *(_QWORD *)(v9 + 80) = v307 + *(_QWORD *)(*(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40) + 40);
          }
          *v8 = *(_DWORD *)(a1 + 80);
          free(v325);
          return 1;
        }
        if (*v10 != -1)
          sub_10003BCB8();
        if (*(_QWORD *)(*(_QWORD *)v9 + 520) || sub_10001A850(v9, *(_DWORD *)(a1 + 80), -1))
        {
          *(_DWORD *)a1 = 2;
          sub_10001BE54(3, "uploader: finished", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)v310);
          return 0;
        }
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          sub_10003BC88();
        sub_10001C094("io_write_int");
        return 0xFFFFFFFFLL;
      case 2u:
        memset(buf, 0, 144);
        __s = 0;
        if ((*v27 & 0xF000) != 0xA000)
          sub_10003BF2C();
        v29 = (const char **)(v23 + 152 * v21);
        if (!*(_DWORD *)(*(_QWORD *)v9 + 84))
        {
          if (dword_100050EE8)
          {
            v46 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              v47 = *v29;
              v359.st_dev = 136315138;
              *(_QWORD *)&v359.st_mode = v47;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "%s: ignoring symlink", (uint8_t *)&v359, 0xCu);
            }
          }
          sub_10001C1CC("%s: ignoring symlink");
          goto LABEL_270;
        }
        if (*(_DWORD *)(*(_QWORD *)v9 + 36))
          goto LABEL_47;
        if (*v321 == -1)
          sub_10003BE54();
        if (fstatat(*v321, *v29, buf, 32) == -1)
        {
          if (*__error() != 2)
          {
            if (!dword_100050EE8)
              goto LABEL_247;
            v103 = qword_100050EF8;
            if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_247;
            goto LABEL_246;
          }
          goto LABEL_332;
        }
        v57 = *(_DWORD **)v9;
        v58 = *(_DWORD *)(*(_QWORD *)v9 + 40);
        st_mode = buf[0].st_mode;
        v60 = buf[0].st_mode & 0xF000;
        if (!v58 && v60 == 40960)
        {
          v61 = sub_10002E2E8(*v321, *v29);
          if (!v61)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003BF00(&v333, v334);
            sub_10001C094("symlinkat_read");
            goto LABEL_249;
          }
          v62 = v61;
          v312 = v8;
          v63 = v23 + 152 * v21;
          v65 = *(const char **)(v63 + 88);
          v64 = (__darwin_ino64_t *)(v63 + 88);
          v66 = strcmp(v65, v61);
          free(v62);
          if (!v66)
          {
            v168 = 0;
            v167 = v321;
            v8 = v312;
            v166 = v315;
            goto LABEL_372;
          }
          if (dword_100050EE8)
          {
            v73 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
            {
              v224 = *v29;
              v225 = *v64;
              v359.st_dev = 136315394;
              *(_QWORD *)&v359.st_mode = v224;
              WORD2(v359.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&v359.st_ino + 6) = v225;
              _os_log_debug_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "%s: updating symlink: %s", (uint8_t *)&v359, 0x16u);
            }
          }
          sub_10001BE54(2, "%s: updating symlink: %s", v67, v68, v69, v70, v71, v72, (char)*v29);
          v8 = v312;
LABEL_332:
          if (!*(_DWORD *)(*(_QWORD *)v9 + 40))
          {
            if (dword_100050EE8)
            {
              v169 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
              {
                v221 = *v29;
                v222 = *(_QWORD *)(v23 + 152 * v21 + 88);
                v359.st_dev = 136315394;
                *(_QWORD *)&v359.st_mode = v221;
                WORD2(v359.st_ino) = 2080;
                *(__darwin_ino64_t *)((char *)&v359.st_ino + 6) = v222;
                _os_log_debug_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEBUG, "%s: creating symlink: %s", (uint8_t *)&v359, 0x16u);
              }
            }
            v170 = (const char **)(v23 + 152 * v21 + 88);
            sub_10001BE54(2, "%s: creating symlink: %s", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v29);
            if (sub_100022154(&__s, (char *)*v29, *(_DWORD *)(*(_QWORD *)v9 + 32), *(_QWORD *)(*(_QWORD *)v9 + 544) != 0) == -1)
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003BE7C(&v329, v330);
              goto LABEL_396;
            }
            v166 = v315;
            if (*(_QWORD *)(*(_QWORD *)v9 + 544))
              v171 = v315;
            else
              v171 = v321;
            if (!sub_100022068(*v170, *v171, __s))
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003BEA8(&v327, v328);
              v184 = "mkstemplinkat";
              goto LABEL_423;
            }
            v172 = __s;
            if (*(_QWORD *)(*(_QWORD *)v9 + 544))
              v173 = v315;
            else
              v173 = v321;
            v174 = *v173;
            v168 = 1;
            if (!__s)
              goto LABEL_373;
LABEL_374:
            sub_100022DA0(v9, v168, v174, v29, v172);
            if (v168)
            {
              a2 = __s;
              if (__s)
              {
                if (*(_QWORD *)(*(_QWORD *)v9 + 544))
                  v175 = v166;
                else
                  v175 = v321;
                if (sub_100009BA8(*v175, __s, *v321, *v29, 1) == -1)
                {
                  if (dword_100050EE8)
                  {
                    v183 = qword_100050EF8;
                    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                    {
                      v228 = *v29;
                      v359.st_dev = 136315394;
                      *(_QWORD *)&v359.st_mode = __s;
                      WORD2(v359.st_ino) = 2080;
                      *(__darwin_ino64_t *)((char *)&v359.st_ino + 6) = (__darwin_ino64_t)v228;
                      _os_log_error_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_ERROR, "%s: move_file %s", (uint8_t *)&v359, 0x16u);
                    }
                  }
                  sub_10001BFE8("%s: move_file %s", v176, v177, v178, v179, v180, v181, v182, (char)__s);
                  v162 = v321;
                  if (*(_QWORD *)(*(_QWORD *)v9 + 544))
                    v162 = v166;
                  goto LABEL_320;
                }
                free(__s);
              }
            }
            if (v168)
            {
LABEL_47:
              sub_1000324EC((uint64_t *)v29, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
              goto LABEL_270;
            }
            goto LABEL_270;
          }
          if (dword_100050EE8)
          {
            v165 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
            {
              v217 = *v29;
              v218 = *(_QWORD *)(v23 + 152 * v21 + 88);
              v359.st_dev = 136315394;
              *(_QWORD *)&v359.st_mode = v217;
              WORD2(v359.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&v359.st_ino + 6) = v218;
              _os_log_debug_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEBUG, "%s: creating symlink in-place: %s", (uint8_t *)&v359, 0x16u);
            }
          }
          sub_10001BE54(2, "%s: creating symlink in-place: %s", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v29);
          if (symlinkat(*(const char **)(v23 + 152 * v21 + 88), *v321, *v29) == -1)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003BED4(&v331, v332);
            v140 = "symlinkat";
            goto LABEL_248;
          }
          v166 = v315;
          if (*(_QWORD *)(*(_QWORD *)v9 + 544))
            v167 = v315;
          else
            v167 = v321;
          v168 = 1;
LABEL_372:
          v174 = *v167;
LABEL_373:
          v172 = (char *)*v29;
          goto LABEL_374;
        }
        if (v60 == 0x4000 && v57[141])
        {
          v106 = v57[24];
          if (v106 > 5 || ((1 << v106) & 0x35) == 0)
            goto LABEL_214;
        }
        else if (v57[24] != 2)
        {
          goto LABEL_214;
        }
        if (!sub_100031C84(a1, (_QWORD *)v9, 3))
          goto LABEL_249;
        v58 = *(_DWORD *)(*(_QWORD *)v9 + 40);
        st_mode = buf[0].st_mode;
LABEL_214:
        v129 = st_mode & 0xF000;
        if (v58)
        {
          v130 = *v321;
          v131 = *v29;
          if (v129 != 0x4000)
          {
            v132 = 0;
            goto LABEL_331;
          }
        }
        else
        {
          if (v129 != 0x4000)
            goto LABEL_332;
          v130 = *v321;
          v131 = *v29;
        }
        v132 = 128;
LABEL_331:
        if (unlinkat(v130, v131, v132) == -1)
        {
          if (!dword_100050EE8)
            goto LABEL_408;
          v40 = qword_100050EF8;
          if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_408;
          goto LABEL_407;
        }
        goto LABEL_332;
      case 4u:
        memset(buf, 0, 144);
        __s = 0;
        if ((*v27 & 0xF000) != 0xC000)
          sub_10003C1F0();
        v29 = (const char **)(v23 + 152 * v21);
        if (!*(_DWORD *)(*(_QWORD *)v9 + 108))
        {
          if (!dword_100050EE8)
            goto LABEL_82;
          v32 = qword_100050EF8;
          if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            goto LABEL_82;
          goto LABEL_81;
        }
        if (*(_DWORD *)(*(_QWORD *)v9 + 36))
          goto LABEL_269;
        if (*v321 == -1)
          sub_10003C170();
        v37 = v315;
        if (fstatat(*v321, *v29, buf, 32) == -1)
        {
          if (*__error() != 2)
          {
            if (!dword_100050EE8)
              goto LABEL_247;
            v103 = qword_100050EF8;
            if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_247;
            goto LABEL_246;
          }
        }
        else
        {
          v38 = buf[0].st_mode & 0xF000;
          if (v38 == 49152)
          {
            v101 = 0;
            v102 = 0;
            goto LABEL_223;
          }
          if (v38 == 0x4000 && unlinkat(*v321, *v29, 128) == -1)
          {
            if (!dword_100050EE8)
              goto LABEL_408;
            v40 = qword_100050EF8;
            if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_408;
            goto LABEL_407;
          }
        }
        if (*(_DWORD *)(*(_QWORD *)v9 + 40))
        {
          if (sub_1000222C8(0, *(_QWORD *)(a1 + 56)) == -1)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003C1C4(&v355, v356);
            v140 = "mksock";
            goto LABEL_248;
          }
          v101 = 0;
          v102 = 1;
        }
        else
        {
          if (sub_100022154(&__s, (char *)*v29, *(_DWORD *)(*(_QWORD *)v9 + 32), *(_QWORD *)(*(_QWORD *)v9 + 544) != 0) == -1)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003BE7C(&v353, v354);
            goto LABEL_396;
          }
          v133 = *(const char **)(*(_QWORD *)v9 + 544);
          if (!v133)
            v133 = *(const char **)(a1 + 56);
          if (!sub_100022118(v133, __s))
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003C198(&v351, v352);
            v184 = "mkstempsock";
            goto LABEL_423;
          }
          v102 = 1;
          v101 = __s;
        }
LABEL_223:
        v134 = v321;
        if (*(_QWORD *)(*(_QWORD *)v9 + 544))
          v134 = v315;
        if (!v102 || !v101)
          v101 = (char *)*v29;
        sub_100022DA0(v9, v102, *v134, v29, v101);
        a2 = __s;
        if (__s)
          v135 = v102;
        else
          v135 = 0;
        if (v135 != 1)
          goto LABEL_269;
        if (*(_QWORD *)(*(_QWORD *)v9 + 544))
          v136 = v315;
        else
          v136 = v321;
        if (sub_100009BA8(*v136, __s, *v321, *v29, 1) != -1)
          goto LABEL_268;
        if (!dword_100050EE8)
          goto LABEL_318;
        v126 = qword_100050EF8;
        if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_318;
        goto LABEL_491;
      case 9u:
        memset(buf, 0, 144);
        __s = 0;
        if ((*v27 & 0xF000) != 0x1000)
          sub_10003C148();
        v29 = (const char **)(v23 + 152 * v21);
        if (!*(_DWORD *)(*(_QWORD *)v9 + 108))
        {
          if (!dword_100050EE8)
            goto LABEL_82;
          v32 = qword_100050EF8;
          if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            goto LABEL_82;
          goto LABEL_81;
        }
        if (*(_DWORD *)(*(_QWORD *)v9 + 36))
          goto LABEL_269;
        if (*v321 == -1)
          sub_10003C0C8();
        v37 = v315;
        if (fstatat(*v321, *v29, buf, 32) == -1)
        {
          if (*__error() != 2)
          {
            if (!dword_100050EE8)
              goto LABEL_247;
            v103 = qword_100050EF8;
            if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_247;
            goto LABEL_246;
          }
LABEL_208:
          if (*(_DWORD *)(*(_QWORD *)v9 + 40))
          {
            if (mkfifoat(*v321, *v29, 0x180u) == -1)
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003C11C(&v349, v350);
              v140 = "mkfifoat";
              goto LABEL_248;
            }
            v43 = 0;
            v44 = 1;
          }
          else
          {
            if (sub_100022154(&__s, (char *)*v29, *(_DWORD *)(*(_QWORD *)v9 + 32), *(_QWORD *)(*(_QWORD *)v9 + 544) != 0) == -1)
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003BE7C(&v347, v348);
              goto LABEL_396;
            }
            v141 = v321;
            if (*(_QWORD *)(*(_QWORD *)v9 + 544))
              v141 = v315;
            if (!sub_1000220A8(*v141, __s))
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003C0F0(&v345, v346);
              v184 = "mkstempfifoat";
              goto LABEL_423;
            }
            v44 = 1;
            v43 = __s;
          }
LABEL_255:
          v142 = v321;
          if (*(_QWORD *)(*(_QWORD *)v9 + 544))
            v142 = v315;
          if (!v44 || !v43)
            v43 = (char *)*v29;
          sub_100022DA0(v9, v44, *v142, v29, v43);
          a2 = __s;
          if (__s)
            v143 = v44;
          else
            v143 = 0;
          if (v143 != 1)
            goto LABEL_269;
          if (*(_QWORD *)(*(_QWORD *)v9 + 544))
            v144 = v315;
          else
            v144 = v321;
          if (sub_100009BA8(*v144, __s, *v321, *v29, 1) != -1)
            goto LABEL_268;
          if (dword_100050EE8)
          {
            v126 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              goto LABEL_491;
          }
          goto LABEL_318;
        }
        v41 = buf[0].st_mode;
        v42 = buf[0].st_mode & 0xF000;
        if (v42 == 4096)
        {
          v43 = 0;
          v44 = 0;
          goto LABEL_255;
        }
        v104 = *(_DWORD **)v9;
        if (v42 == 0x4000 && v104[141])
        {
          v105 = v104[24];
          if (v105 > 5 || ((1 << v105) & 0x35) == 0)
            goto LABEL_206;
        }
        else if (v104[24] != 2)
        {
          goto LABEL_206;
        }
        if (!sub_100031C84(a1, (_QWORD *)v9, 3))
          goto LABEL_249;
        v41 = buf[0].st_mode;
LABEL_206:
        if ((v41 & 0xF000) == 0x4000 && unlinkat(*v321, *v29, 128) == -1)
        {
          if (!dword_100050EE8)
            goto LABEL_408;
          v40 = qword_100050EF8;
          if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            goto LABEL_408;
          goto LABEL_407;
        }
        goto LABEL_208;
      case 0xAu:
      case 0xEu:
        memset(buf, 0, 144);
        __s = 0;
        if ((*v27 & 0xB000 | 0x4000) != 0x6000)
          sub_10003C020();
        v29 = (const char **)(v23 + 152 * v21);
        v30 = *(_DWORD **)v9;
        if (!*(_DWORD *)(*(_QWORD *)v9 + 104))
          goto LABEL_33;
        v31 = v30[52];
        if (v31 == 1)
          goto LABEL_114;
        if (v31 == 2 || geteuid())
        {
LABEL_33:
          if (dword_100050EE8)
          {
            v32 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
LABEL_81:
              v48 = *v29;
              v359.st_dev = 136315138;
              *(_QWORD *)&v359.st_mode = v48;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "skipping non-regular file %s", (uint8_t *)&v359, 0xCu);
            }
          }
LABEL_82:
          sub_10001C1CC("skipping non-regular file %s");
          goto LABEL_270;
        }
        v30 = *(_DWORD **)v9;
LABEL_114:
        if (v30[9])
          goto LABEL_269;
        if (*v321 == -1)
          sub_10003C048();
        if (fstatat(*v321, *v29, buf, 32) == -1)
        {
          if (*__error() != 2)
          {
            if (dword_100050EE8)
            {
              v103 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              {
LABEL_246:
                v139 = *v29;
                v359.st_dev = 136315138;
                *(_QWORD *)&v359.st_mode = v139;
                _os_log_error_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "%s: fstatat", (uint8_t *)&v359, 0xCu);
              }
            }
LABEL_247:
            v310 = *v29;
            v140 = "%s: fstatat";
            goto LABEL_248;
          }
LABEL_173:
          if (*(_DWORD *)(*(_QWORD *)v9 + 40))
          {
            if (mknodat(*v321, *v29, *v27 & 0x6000, *(_DWORD *)(v23 + 152 * v21 + 36)) == -1)
            {
              if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
                sub_10003C09C(&v343, v344);
              v140 = "mknodat";
LABEL_248:
              sub_10001BFE8(v140, v86, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)v310);
              goto LABEL_249;
            }
            v84 = 0;
            v85 = 1;
            goto LABEL_184;
          }
          if (sub_100022154(&__s, (char *)*v29, *(_DWORD *)(*(_QWORD *)v9 + 32), *(_QWORD *)(*(_QWORD *)v9 + 544) != 0) == -1)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003BE7C(&v341, v342);
LABEL_396:
            sub_10001C094("mktemplate");
          }
          else
          {
            v108 = v321;
            if (*(_QWORD *)(*(_QWORD *)v9 + 544))
              v108 = v315;
            if (sub_1000220E0(*v108, __s, *v27 & 0x6000, *(_DWORD *)(v23 + 152 * v21 + 36)))
            {
              v85 = 1;
              v84 = __s;
              goto LABEL_184;
            }
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003C070(&v339, v340);
            v184 = "mkstempnodat";
LABEL_423:
            sub_10001BFE8(v184, v109, v110, v111, v112, v113, v114, v115, (char)v310);
            free(__s);
          }
LABEL_249:
          v25 = -1;
          goto LABEL_271;
        }
        v83 = buf[0].st_mode;
        if ((buf[0].st_mode & 0xB000 | 0x4000) == 0x6000)
        {
          if (((*v27 ^ buf[0].st_mode) & 0x6000) != 0 || *(_DWORD *)(v23 + 152 * v21 + 36) != buf[0].st_rdev)
          {
            if (dword_100050EE8)
            {
              v107 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
              {
                v216 = *v29;
                v359.st_dev = 136315138;
                *(_QWORD *)&v359.st_mode = v216;
                _os_log_debug_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "%s: updating device", (uint8_t *)&v359, 0xCu);
              }
            }
            sub_10001BE54(2, "%s: updating device", v77, v78, v79, v80, v81, v82, (char)*v29);
            goto LABEL_173;
          }
          v84 = 0;
          v85 = 0;
LABEL_184:
          v116 = v321;
          v37 = v315;
          if (*(_QWORD *)(*(_QWORD *)v9 + 544))
            v116 = v315;
          if (!v85 || !v84)
            v84 = (char *)*v29;
          sub_100022DA0(v9, v85, *v116, v29, v84);
          a2 = __s;
          if (__s)
            v117 = v85;
          else
            v117 = 0;
          if (v117 != 1)
            goto LABEL_269;
          if (*(_QWORD *)(*(_QWORD *)v9 + 544))
            v118 = v315;
          else
            v118 = v321;
          if (sub_100009BA8(*v118, __s, *v321, *v29, 1) != -1)
          {
LABEL_268:
            free(__s);
LABEL_269:
            sub_1000331DC((uint64_t *)v29, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
            goto LABEL_270;
          }
          if (dword_100050EE8)
          {
            v126 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            {
LABEL_491:
              v227 = *v29;
              v359.st_dev = 136315394;
              *(_QWORD *)&v359.st_mode = __s;
              WORD2(v359.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&v359.st_ino + 6) = (__darwin_ino64_t)v227;
              _os_log_error_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_ERROR, "%s: move_file %s", (uint8_t *)&v359, 0x16u);
            }
          }
LABEL_318:
          sub_10001BFE8("%s: move_file %s", v119, v120, v121, v122, v123, v124, v125, (char)__s);
          v162 = v321;
          if (*(_QWORD *)(*(_QWORD *)v9 + 544))
            v162 = v37;
LABEL_320:
          unlinkat(*v162, __s, 0);
          ++*(_QWORD *)(v9 + 240);
          free(__s);
LABEL_270:
          v25 = 0;
          goto LABEL_271;
        }
        v137 = *(_DWORD **)v9;
        if ((buf[0].st_mode & 0xF000) == 0x4000 && v137[141])
        {
          v138 = v137[24];
          if (v138 > 5 || ((1 << v138) & 0x35) == 0)
            goto LABEL_299;
        }
        else if (v137[24] != 2)
        {
          goto LABEL_299;
        }
        if (!sub_100031C84(a1, (_QWORD *)v9, 3))
          goto LABEL_249;
        v83 = buf[0].st_mode;
LABEL_299:
        if ((v83 & 0xF000) != 0x4000 || unlinkat(*v321, *v29, 128) != -1)
          goto LABEL_173;
        if (dword_100050EE8)
        {
          v40 = qword_100050EF8;
          if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          {
LABEL_407:
            v185 = *v29;
            v359.st_dev = 136315138;
            *(_QWORD *)&v359.st_mode = v185;
            _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%s: unlinkat", (uint8_t *)&v359, 0xCu);
          }
        }
LABEL_408:
        sub_10001BFE8("%s: unlinkat", v39, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)*v29);
        goto LABEL_409;
      case 0xCu:
        memset(buf, 0, 144);
        if ((*v27 & 0xF000) != 0x4000)
          sub_10003BE2C();
        v29 = (const char **)(v23 + 152 * v21);
        v45 = *(_DWORD **)v9;
        if (!*(_DWORD *)(*(_QWORD *)v9 + 32) && !v45[47] && !v45[48])
        {
          if (dword_100050EE8)
          {
            v127 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
            {
              v128 = *v29;
              v359.st_dev = 136315394;
              *(_QWORD *)&v359.st_mode = v128;
              WORD2(v359.st_ino) = 1024;
              *(_DWORD *)((char *)&v359.st_ino + 6) = 0;
              _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_INFO, "%s: ignoring directory 1 %d", (uint8_t *)&v359, 0x12u);
            }
          }
          sub_10001C1CC("%s: ignoring directory 1 %d");
          goto LABEL_270;
        }
        if (v45[9])
          goto LABEL_71;
        if (*v321 == -1)
          sub_10003BE04();
        if (fstatat(*v321, *v29, buf, 32) != -1)
        {
          if ((buf[0].st_mode & 0xF000) == 0x4000)
          {
            if (dword_100050EE8)
            {
              v55 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
              {
                v198 = *v29;
                v359.st_dev = 136315138;
                *(_QWORD *)&v359.st_mode = v198;
                _os_log_debug_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "%s: updating directory", (uint8_t *)&v359, 0xCu);
              }
            }
            sub_10001BE54(2, "%s: updating directory", v49, v50, v51, v52, v53, v54, (char)*v29);
            v56 = *(_DWORD **)v9;
            if (*(_DWORD *)(*(_QWORD *)v9 + 60) && buf[0].st_mode != *v27
              || v56[14] && !v56[32] && buf[0].st_mtimespec.tv_sec != *(_QWORD *)(v23 + 152 * v21 + 48))
            {
              sub_100031A84((const char **)(v23 + 152 * v21));
              v56 = *(_DWORD **)v9;
            }
            a3 = v56[24];
            if ((a3 - 3) <= 1)
              sub_100031C84(a1, (_QWORD *)v9, a3);
            goto LABEL_270;
          }
          if (*(_DWORD *)(*(_QWORD *)v9 + 80) && sub_100031BB0((uint64_t)buf, (const char **)(v23 + 152 * v21), *v321))
            goto LABEL_270;
          if (dword_100050EE8)
          {
            v97 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            {
              v219 = *v29;
              v359.st_dev = 136315138;
              *(_QWORD *)&v359.st_mode = v219;
              _os_log_error_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "%s: not a directory", (uint8_t *)&v359, 0xCu);
            }
          }
          sub_10001BF64("%s: not a directory", *v29);
          goto LABEL_249;
        }
        if (*__error() == 2)
        {
          if (mkdirat(*(_DWORD *)(a1 + 64), *v29, ~*(_WORD *)(a1 + 48) & 0x1FF) != -1)
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * *(_QWORD *)(a1 + 40)) = 1;
LABEL_71:
            sub_100031A84((const char **)(v23 + 152 * v21));
            goto LABEL_270;
          }
          if (dword_100050EE8)
          {
            v161 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
            {
              v226 = *v29;
              v359.st_dev = 136315138;
              *(_QWORD *)&v359.st_mode = v226;
              _os_log_error_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_ERROR, "%s: mkdirat", (uint8_t *)&v359, 0xCu);
            }
          }
          sub_10001BFE8("%s: mkdirat", v87, v88, v89, v90, v91, v92, v93, (char)*v29);
          goto LABEL_249;
        }
        if (!dword_100050EE8)
          goto LABEL_247;
        v103 = qword_100050EF8;
        if (!os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
          goto LABEL_247;
        goto LABEL_246;
      default:
        goto LABEL_271;
    }
  }
}

uint64_t sub_1000317D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  timespec v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  NSObject *v27;
  uint64_t v28;
  char v29;
  stat buf;
  uint8_t v31[4];
  uint64_t v32;

  if (!*(_DWORD *)(*(_QWORD *)a2 + 56) && !*(_DWORD *)(*(_QWORD *)a2 + 60))
    return 1;
  if (dword_100050EE8)
  {
    v10 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.st_dev) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "fixing up directory times and permissions", (uint8_t *)&buf, 2u);
    }
  }
  v11 = 1;
  sub_10001BE54(1, "fixing up directory times and permissions", a3, a4, a5, a6, a7, a8, v29);
  if (*(_QWORD *)(a1 + 96))
  {
    v12 = 0;
    v13 = 0;
    v14 = (timespec)0;
    while (1)
    {
      v15 = *(_QWORD *)(a1 + 88);
      v16 = v15 + v12;
      if ((*(_WORD *)(v15 + v12 + 24) & 0xF000) == 0x4000)
      {
        *(timespec *)&buf.st_blksize = v14;
        *(timespec *)buf.st_qspare = v14;
        buf.st_birthtimespec = v14;
        *(timespec *)&buf.st_size = v14;
        buf.st_mtimespec = v14;
        buf.st_ctimespec = v14;
        *(timespec *)&buf.st_uid = v14;
        buf.st_atimespec = v14;
        *(timespec *)&buf.st_dev = v14;
        if ((*(_WORD *)(v16 + 24) & 0xF000) != 0x4000)
          sub_10003C2A0();
        if (*(_DWORD *)(*(_QWORD *)a2 + 32) && !*(_DWORD *)(*(_QWORD *)a2 + 36))
        {
          if (fstatat(*(_DWORD *)(a1 + 64), *(const char **)v16, &buf, 32) == -1)
          {
            if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003C240();
            sub_10001BFE8("%s: fstatat", v17, v18, v19, v20, v21, v22, v23, *(_QWORD *)(v15 + v12));
            return 0;
          }
          if ((buf.st_mode & 0xF000) == 0x4000)
          {
            v24 = sub_100022DA0(a2, *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v13), *(_DWORD *)(a1 + 64), (const char **)(v15 + v12), *(char **)v16);
            v14 = (timespec)0;
            if (!v24)
              return 0;
          }
          else if (!*(_DWORD *)(*(_QWORD *)a2 + 80)
                 || (v25 = sub_100031BB0((uint64_t)&buf, (const char **)(v15 + v12), *(_DWORD *)(a1 + 64)),
                     v14 = (timespec)0,
                     !v25))
          {
            if (dword_100050EE8)
            {
              v27 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
              {
                v28 = *(_QWORD *)(v15 + v12);
                *(_DWORD *)v31 = 136315138;
                v32 = v28;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "%s: not a directory", v31, 0xCu);
              }
            }
            sub_10001C1CC("%s: not a directory", *(const char **)(v15 + v12));
            return 0;
          }
        }
      }
      ++v13;
      v12 += 152;
      if (v13 >= *(_QWORD *)(a1 + 96))
        return 1;
    }
  }
  return v11;
}

void sub_100031A84(const char **a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  NSObject *v11;
  char *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;

  v2 = *a1;
  v3 = strlen(*a1);
  if (!v3)
    sub_10003C2C8();
  v10 = v3;
  if (dword_100050EE8)
  {
    v11 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
    {
      if (v2[v10 - 1] == 47)
        v12 = &byte_1000437D5;
      else
        v12 = "/";
      *(_DWORD *)buf = 136315394;
      v14 = v2;
      v15 = 2080;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s%s", buf, 0x16u);
      v2 = *a1;
    }
  }
  sub_10001BE54(0, "%s%s", v4, v5, v6, v7, v8, v9, (char)v2);
}

BOOL sub_100031BB0(uint64_t a1, const char **a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  stat v12;

  if ((*(_WORD *)(a1 + 4) & 0xF000) == 0xA000)
  {
    memset(&v12, 0, sizeof(v12));
    if (fstatat(a3, *a2, &v12, 0) != -1)
      return (v12.st_mode & 0xF000) == 0x4000;
    if (dword_100050EE8)
    {
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003C240();
    }
    sub_10001BFE8("%s: fstatat", v4, v5, v6, v7, v8, v9, v10, (char)*a2);
  }
  return 0;
}

uint64_t sub_100031C84(uint64_t a1, _QWORD *a2, int a3)
{
  const char **v6;
  const char *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  ENTRY v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *key;
  FTS *v34;
  FTS *v35;
  size_t v36;
  FTSENT *v37;
  FTSENT *v38;
  FTSENT *v39;
  unint64_t v40;
  int fts_info;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *fts_path;
  int v49;
  ENTRY *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  NSObject *v58;
  int fts_namelen;
  NSObject *v60;
  char *v61;
  NSObject *v62;
  char *v63;
  NSObject *v64;
  char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  int v74;
  _QWORD *v75;
  size_t v76;
  char *__s1;
  uint8_t buf[4];
  _QWORD v79[2];
  char *v80;
  uint64_t v81;
  ENTRY v82;

  __s1 = 0;
  v80 = 0;
  v81 = 0;
  v6 = (const char **)(*(_QWORD *)(a1 + 88) + 152 * *(_QWORD *)(a1 + 40));
  v7 = *v6;
  v8 = strcmp(*v6, ".");
  v9 = &byte_1000437D5;
  if (v8)
    v9 = v7;
  if (asprintf(&__s1, "%s/%s", *(const char **)(a1 + 56), v9) == -1)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003C2F0();
    sub_10001C094("%s: asprintf", *v6);
    return 0;
  }
  if (!hcreate(*(_QWORD *)(a1 + 96)))
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003C350();
    v67 = "hcreate";
    goto LABEL_92;
  }
  v74 = a3;
  v75 = a2;
  v17 = strlen(*v6);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 96);
  if (v18 >= v19)
  {
LABEL_21:
    v80 = __s1;
    v81 = 0;
    sub_100025990(__s1);
    v34 = fts_open(&v80, 16, 0);
    if (v34)
    {
      v35 = v34;
      v36 = strlen(*(const char **)(a1 + 56));
      v37 = fts_read(v35);
      a2 = v75;
      a3 = v74;
      if (!v37)
      {
LABEL_87:
        v66 = 1;
        goto LABEL_93;
      }
      v38 = v37;
      v39 = 0;
      v40 = v36 + 1;
      while (1)
      {
        fts_info = v38->fts_info;
        if (fts_info == 10 || v40 >= v38->fts_pathlen)
          goto LABEL_69;
        if (fts_info != 6 && !sub_10000F858(v75, (uint64_t)v38, 1))
        {
          if (v38->fts_errno)
          {
            if (v38->fts_info == 4)
            {
              if (dword_100050EE8)
              {
                v58 = qword_100050EF8;
                if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
                {
                  fts_namelen = v38->fts_namelen;
                  *(_DWORD *)buf = 68157954;
                  LODWORD(v79[0]) = fts_namelen;
                  WORD2(v79[0]) = 2080;
                  *(_QWORD *)((char *)v79 + 6) = v38->fts_name;
                  _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "%.*s", buf, 0x12u);
                }
              }
              sub_10001BE54(0, "%.*s", v42, v43, v44, v45, v46, v47, v38->fts_namelen);
            }
            ++v75[30];
          }
          *__error() = 0;
          goto LABEL_69;
        }
        if (!v38->fts_statp)
          sub_10003C3B0();
        fts_path = v38->fts_path;
        if (fts_path[v40] == 47)
          ++v40;
        v49 = v38->fts_info;
        if (!*(_DWORD *)(*v75 + 100))
        {
          if (v49 == 6)
            goto LABEL_36;
          if (sub_100025E64(&fts_path[v40], v49 == 1, 1, v39 != 0) == -1)
          {
            if (dword_100050EE8)
            {
              v60 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
              {
                v61 = &v38->fts_path[v40];
                *(_DWORD *)buf = 136315138;
                v79[0] = v61;
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "skip excluded file %s", buf, 0xCu);
              }
            }
            sub_10001C1CC("skip excluded file %s", &v38->fts_path[v40]);
            fts_set(v35, v38, 4);
            goto LABEL_68;
          }
          v49 = v38->fts_info;
        }
        if (v49 == 1 && v39)
          goto LABEL_69;
LABEL_36:
        if (v49 == 6 && !v39)
          goto LABEL_69;
        v82.key = &v38->fts_path[v40];
        v82.data = 0;
        v50 = hsearch(v82, FIND);
        v57 = v38->fts_info;
        if (v50)
        {
          if (v57 == 1 && strcmp(v38->fts_path, v80))
            fts_set(v35, v38, 4);
          goto LABEL_69;
        }
        if (v57 == 1)
        {
          v39 = v38;
          goto LABEL_69;
        }
        if (v38 == v39)
        {
          if (v57 != 6)
            sub_10003C400();
          v39 = 0;
LABEL_63:
          if (v38->fts_number)
          {
            if (dword_100050EE8)
            {
              v62 = qword_100050EF8;
              if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_INFO))
              {
                v63 = v38->fts_path;
                *(_DWORD *)buf = 136315138;
                v79[0] = v63;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "%s: not empty, cannot delete", buf, 0xCu);
              }
            }
            sub_10001C1CC("%s: not empty, cannot delete", v38->fts_path);
LABEL_68:
            ++v38->fts_parent->fts_number;
            goto LABEL_69;
          }
          goto LABEL_71;
        }
        if (v57 == 6)
          goto LABEL_63;
LABEL_71:
        if (v74 == 3)
        {
          if (dword_100050EE8)
          {
            v64 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
            {
              v65 = &v38->fts_path[v40];
              *(_DWORD *)buf = 136315138;
              v79[0] = v65;
              _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "%s: deleting", buf, 0xCu);
            }
          }
          sub_10001BE54(0, "%s: deleting", v51, v52, v53, v54, v55, v56, LOBYTE(v38->fts_path) + v40);
          if (*(_DWORD *)(*v75 + 36))
            goto LABEL_69;
        }
        else if (v74 != 4)
        {
          sub_10003C3D8();
        }
        sub_100013878((uint64_t)v75, v38->fts_path, v40, (char **)(a1 + 112), (unint64_t *)(a1 + 120), (unint64_t *)(a1 + 128), &v38->fts_statp->st_dev);
LABEL_69:
        v38 = fts_read(v35);
        if (!v38)
          goto LABEL_87;
      }
    }
    a2 = v75;
    a3 = v74;
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003C380();
    v67 = "fts_open";
LABEL_92:
    sub_10001BFE8(v67, v10, v11, v12, v13, v14, v15, v16, v73);
    v35 = 0;
    v66 = 0;
    goto LABEL_93;
  }
  v20 = v17;
  v76 = v17 + 1;
  v21 = 152 * v18 + 16;
  while (1)
  {
    v22 = *(_QWORD *)(a1 + 88);
    v23 = *(char **)(v22 + v21);
    if (!strcmp(v23, "."))
      goto LABEL_20;
    if (v8 && strncmp(*v6, v23, v20))
      goto LABEL_21;
    v24 = strrchr(v23, 47);
    v25 = v24 - v23;
    if (!v24)
      v25 = 0;
    if (v8)
      break;
    if (!v25)
      goto LABEL_16;
LABEL_20:
    ++v18;
    v21 += 152;
    if (v18 >= v19)
      goto LABEL_21;
  }
  if (v25 >= v76)
    goto LABEL_20;
LABEL_16:
  v26.key = strdup(v23);
  if (!v26.key)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_100036664();
    v26.key = "strdup";
    goto LABEL_108;
  }
  key = v26.key;
  v26.data = 0;
  v26.key = (char *)hsearch(v26, ENTER);
  if (!v26.key)
  {
    if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
      sub_10003C428();
    v26.key = "hsearch";
LABEL_108:
    sub_10001BFE8(v26.key, (uint64_t)v26.data, v27, v28, v29, v30, v31, v32, v73);
    goto LABEL_113;
  }
  if (*(char **)v26.key == key)
  {
    v19 = *(_QWORD *)(a1 + 96);
    goto LABEL_20;
  }
  if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
    sub_10003C458();
  sub_10001BF64("%s: duplicate", *(const char **)(v22 + v21));
  free(key);
LABEL_113:
  v35 = 0;
  v66 = 0;
  a2 = v75;
  a3 = v74;
LABEL_93:
  if (a3 == 3)
  {
    qsort(*(void **)(a1 + 112), *(_QWORD *)(a1 + 120), 0x98uLL, (int (__cdecl *)(const void *, const void *))sub_10000F7D8);
    if (sub_1000139CC(a2, *(_DWORD *)(a1 + 64), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v68, v69, v70, v71))v66 = v66;
    else
      v66 = 0;
    sub_10000FD10(*(char **)(a1 + 112), *(_QWORD *)(a1 + 120));
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
  }
  fts_close(v35);
  free(__s1);
  hdestroy();
  return v66;
}

void sub_1000324EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (dword_100050EE8)
  {
    v9 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a1;
      v11 = a1[11];
      *(_DWORD *)buf = 136315394;
      v13 = v10;
      v14 = 2080;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s -> %s", buf, 0x16u);
    }
  }
  sub_10001BE54(0, "%s -> %s", a3, a4, a5, a6, a7, a8, *a1);
}

uint64_t sub_1000325CC(int a1, uint64_t a2, stat *a3, _DWORD **a4, unsigned int *a5, int a6)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  NSObject *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  char *v29;
  NSObject *v31;
  char *v32;
  uint64_t v33;
  unsigned int st_nlink;
  int64_t st_size;
  int64_t v36;
  NSObject *v37;
  char *v38;
  uint64_t v40;
  __darwin_time_t tv_sec;
  __darwin_time_t v42;
  __int128 buf;

  if (a6)
    v11 = sub_10000A0F8((char **)a2);
  else
    v11 = *(const char **)a2;
  if (fstatat(a1, v11, a3, 32) == -1)
  {
    if (*__error() != 2)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003C240();
      sub_10001BFE8("%s: fstatat", v21, v22, v23, v24, v25, v26, v27, *(_QWORD *)a2);
      return 0xFFFFFFFFLL;
    }
    if ((*a4)[46])
    {
      if (dword_100050EE8)
      {
        v28 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
        {
          v29 = *(char **)a2;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Skip non existing '%s'", (uint8_t *)&buf, 0xCu);
        }
      }
      sub_10001BE54(0, "Skip non existing '%s'", v22, v23, v24, v25, v26, v27, *(_QWORD *)a2);
      return 0;
    }
    return 3;
  }
  if ((*a4)[45] || !(*a4)[50])
    goto LABEL_6;
  v33 = sub_10002325C(a2, a5);
  st_nlink = a3->st_nlink;
  if (v33)
  {
    if (st_nlink == 1)
      return 3;
    goto LABEL_41;
  }
  if (st_nlink > 1)
    return 3;
LABEL_41:
  if (!sub_10002325C(a2, a5) && a3->st_nlink > 1u)
    return 3;
LABEL_6:
  v18 = *a4;
  if ((*a4)[37] && a3->st_mtimespec.tv_sec > *(_QWORD *)(a2 + 48))
  {
    if (dword_100050EE8)
    {
      v19 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *(char **)a2;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Skip newer '%s'", (uint8_t *)&buf, 0xCu);
      }
    }
    sub_10001BE54(0, "Skip newer '%s'", v12, v13, v14, v15, v16, v17, *(_QWORD *)a2);
    return 4;
  }
  if (v18[45])
  {
    if (dword_100050EE8)
    {
      v31 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(char **)a2;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Skip existing '%s'", (uint8_t *)&buf, 0xCu);
      }
    }
    sub_10001BE54(0, "Skip existing '%s'", v12, v13, v14, v15, v16, v17, *(_QWORD *)a2);
    return 4;
  }
  if ((a3->st_mode & 0xF000) != 0x8000)
    return 2;
  st_size = a3->st_size;
  v36 = *(_QWORD *)(a2 + 40);
  if (*a4[25])
  {
    if (st_size >= v36)
    {
      if (dword_100050EE8)
      {
        v37 = qword_100050EF8;
        if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
        {
          v38 = *(char **)a2;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Skip append '%s'", (uint8_t *)&buf, 0xCu);
        }
      }
      sub_10001BE54(0, "Skip append '%s'", st_size, v13, v14, v15, v16, v17, *(_QWORD *)a2);
      return 4;
    }
    return 2;
  }
  if (st_size != v36)
    return 2;
  if (v18[120])
    return 0;
  if (v18[4])
  {
    if (sub_100018C7C(a1, *(const char **)a2, st_size, (unsigned __int8 *)&buf))
      return 2;
    if ((_QWORD)buf != *(_QWORD *)(a2 + 96) || *((_QWORD *)&buf + 1) != *(_QWORD *)(a2 + 104))
      return 2;
    return 0;
  }
  if (v18[33])
    return 2;
  v40 = *(_QWORD *)(a2 + 48);
  tv_sec = a3->st_mtimespec.tv_sec;
  v42 = v40 - tv_sec;
  if (v40 - tv_sec < 0)
    v42 = tv_sec - v40;
  if (v42 <= (int)v18[144])
  {
    if (v40 != tv_sec)
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
        sub_10003C4B8();
      sub_10001BE54(2, "%s: fits time modify window", st_size, v13, v14, v15, v16, v17, *(_QWORD *)a2);
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100032A54(_DWORD **a1, uint64_t a2, _QWORD *a3, stat *a4, char *a5, uint64_t *a6, unsigned int *a7, int a8, int a9, int *a10, unsigned __int8 a11)
{
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;

  v19 = openat(*(_DWORD *)(a2 + 64), a5, 0x100000);
  if (v19 == -1)
  {
    v28 = *__error();
    result = 1;
    if (v28 != 2 && (a11 & 1) == 0)
    {
      if (*__error() != 13)
        err(11, "%s: pre_file_check_altdir: openat", a5);
      return 1;
    }
  }
  else
  {
    v20 = v19;
    v21 = sub_1000325CC(v19, (uint64_t)a6, a4, a1, a7, a11);
    if (v21)
    {
      if (v21 > 2 || *a3 || (*a3 = a5, !a10))
      {
        close(v20);
      }
      else
      {
        if (*a10 != -1)
          close(*a10);
        *a10 = v20;
      }
      return 1;
    }
    if (a8 < 0 || unlinkat(*(_DWORD *)(a2 + 64), (const char *)*a6, 0) != -1 || *__error() == 2)
    {
      if (a9 == 3)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
          sub_10003C660();
        sub_10001BE54(2, "%s: hardlinking: up to date in %s", v22, v23, v24, v25, v26, v27, *a6);
        if (linkat(v20, (const char *)*a6, *(_DWORD *)(a2 + 64), (const char *)*a6, 0) == -1)
        {
          if (dword_100050EE8)
          {
            v38 = qword_100050EF8;
            if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
              sub_10003C5DC((uint64_t)a5, a6, v38);
          }
          sub_10001BFE8("hard link '%s/%s'", v31, v32, v33, v34, v35, v36, v37, (char)a5);
        }
      }
      else if (a9 == 2)
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
          sub_10003C57C();
        sub_10001BE54(2, "%s: copying: up to date in %s", v22, v23, v24, v25, v26, v27, *a6);
        sub_100009E08(*(_DWORD *)(a2 + 64), a5, (const char **)a6);
        sub_100022DA0((uint64_t)a1, 1, *(_DWORD *)(a2 + 64), (const char **)a6, (char *)*a6);
      }
      else
      {
        if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEBUG))
          sub_10003C51C();
        sub_10001BE54(2, "%s: skipping: up to date in %s", v22, v23, v24, v25, v26, v27, *a6);
      }
      close(v20);
      return 0;
    }
    else
    {
      if (dword_100050EE8 && os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003C6C0();
      sub_10001BFE8("%s: unlinkat", v30, v22, v23, v24, v25, v26, v27, *a6);
      close(v20);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_100032DC4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  DIR *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  DIR *v26;
  dirent *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  _BOOL4 v37;
  const char *v38;
  NSObject *v39;
  _BOOL4 v40;
  NSObject *v42;
  __int128 v43;
  timespec st_mtimespec;
  timespec st_birthtimespec;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  stat v53;
  uint8_t buf[4];
  char *v55;
  char __s[1024];
  char __str[1024];

  if ((*(_WORD *)(a2 + 24) & 0xF000) != 0x8000 || !*(_QWORD *)(a2 + 40) || !*(_QWORD *)(a2 + 48))
    return 1;
  memset(&v53, 0, sizeof(v53));
  __strlcpy_chk(__s, *(_QWORD *)a2, 1024, 1024);
  v8 = strrchr(__s, 47);
  if (!v8)
  {
    __s[0] = 0;
    goto LABEL_12;
  }
  v8[1] = 0;
  if (!__s[0])
  {
LABEL_12:
    v16 = dup(*(_DWORD *)(a1 + 64));
    goto LABEL_13;
  }
  v16 = openat(*(_DWORD *)(a1 + 64), __s, 0x100000);
  if (v16 < 0)
  {
    if (dword_100050EE8)
    {
      v17 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003C784((uint64_t)__s, v17, v10, v11, v12, v13, v14, v15);
    }
    sub_10001BFE8("%s: pre_file_fuzzy: openat", v9, v10, v11, v12, v13, v14, v15, (char)__s);
    return 0xFFFFFFFFLL;
  }
LABEL_13:
  v18 = fdopendir(v16);
  if (!v18)
  {
    if (dword_100050EE8)
    {
      v42 = qword_100050EF8;
      if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR))
        sub_10003C720((uint64_t)__s, v42, v20, v21, v22, v23, v24, v25);
    }
    sub_10001BFE8("%s: pre_file_fuzzy: opendirfd", v19, v20, v21, v22, v23, v24, v25, (char)__s);
    close(v16);
    return 0xFFFFFFFFLL;
  }
  v26 = v18;
  v27 = readdir(v18);
  if (!v27)
  {
LABEL_35:
    closedir(v26);
    return 1;
  }
  while (1)
  {
    if (v27->d_name[0] == 46 && (!v27->d_name[1] || v27->d_name[1] == 46 && !v27->d_name[2])
      || (v27->d_type & 0xF) != 8
      || snprintf(__str, 0x400uLL, "%s%s", __s, v27->d_name) > 0x400)
    {
      goto LABEL_34;
    }
    if (fstatat(*(_DWORD *)(a1 + 64), __str, &v53, 32) == -1)
    {
      if (!dword_100050EE8)
        goto LABEL_32;
      v39 = qword_100050EF8;
      v40 = os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR);
      v38 = "%s: pre_file_fuzzy: fstatat";
      if (v40)
      {
        *(_DWORD *)buf = 136315138;
        v55 = __str;
        _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%s: pre_file_fuzzy: fstatat", buf, 0xCu);
LABEL_32:
        v38 = "%s: pre_file_fuzzy: fstatat";
        goto LABEL_33;
      }
      goto LABEL_33;
    }
    if (v53.st_size != *(_QWORD *)(a2 + 40) || v53.st_mtimespec.tv_sec != *(_QWORD *)(a2 + 48))
      goto LABEL_34;
    v35 = openat(*(_DWORD *)(a1 + 64), __str, 256);
    if (v35 != -1)
      break;
    if (!dword_100050EE8)
      goto LABEL_28;
    v36 = qword_100050EF8;
    v37 = os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_ERROR);
    v38 = "%s: pre_file_fuzzy: openat";
    if (v37)
    {
      *(_DWORD *)buf = 136315138;
      v55 = __str;
      _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%s: pre_file_fuzzy: openat", buf, 0xCu);
LABEL_28:
      v38 = "%s: pre_file_fuzzy: openat";
    }
LABEL_33:
    sub_10001BFE8(v38, v28, v29, v30, v31, v32, v33, v34, (char)__str);
LABEL_34:
    v27 = readdir(v26);
    if (!v27)
      goto LABEL_35;
  }
  v43 = *(_OWORD *)&v53.st_blksize;
  *(_OWORD *)(a3 + 96) = *(_OWORD *)&v53.st_size;
  *(_OWORD *)(a3 + 112) = v43;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)v53.st_qspare;
  st_mtimespec = v53.st_mtimespec;
  *(timespec *)(a3 + 32) = v53.st_atimespec;
  *(timespec *)(a3 + 48) = st_mtimespec;
  st_birthtimespec = v53.st_birthtimespec;
  *(timespec *)(a3 + 64) = v53.st_ctimespec;
  *(timespec *)(a3 + 80) = st_birthtimespec;
  v46 = *(_OWORD *)&v53.st_uid;
  *(_OWORD *)a3 = *(_OWORD *)&v53.st_dev;
  *(_OWORD *)(a3 + 16) = v46;
  *a4 = v35;
  *(_DWORD *)(a2 + 116) |= 0x1800u;
  *(_DWORD *)(a2 + 120) = 131;
  free(*(void **)(a2 + 88));
  *(_QWORD *)(a2 + 88) = strdup(__str);
  sub_10001BE54(3, "fuzzy basis selected for %s: %s", v47, v48, v49, v50, v51, v52, *(_QWORD *)a2);
  closedir(v26);
  return 0;
}

void sub_1000331DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  if (dword_100050EE8)
  {
    v9 = qword_100050EF8;
    if (os_log_type_enabled((os_log_t)qword_100050EF8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a1;
      *(_DWORD *)buf = 136315138;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
  }
  sub_10001BE54(0, "%s", a3, a4, a5, a6, a7, a8, *a1);
}

void sub_1000332A8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

double sub_1000332B4(uint64_t a1)
{
  *(_QWORD *)(a1 + 2888) = a1 + 196;
  *(_QWORD *)(a1 + 2904) = &off_100050700;
  *(_QWORD *)(a1 + 2912) = a1 + 2488;
  *(_QWORD *)(a1 + 2928) = &off_100050720;
  *(_QWORD *)(a1 + 2936) = a1 + 2732;
  *(_QWORD *)(a1 + 2952) = &unk_100050740;
  *(_WORD *)(a1 + 5920) = 0;
  *(_DWORD *)(a1 + 5924) = 0;
  *(_DWORD *)(a1 + 5916) = 8;
  return sub_100033304(a1);
}

double sub_100033304(uint64_t a1)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  double result;

  for (i = 196; i != 1340; i += 4)
    *(_WORD *)(a1 + i) = 0;
  for (j = 0; j != 120; j += 4)
    *(_WORD *)(a1 + 2488 + j) = 0;
  for (k = 0; k != 76; k += 4)
    *(_WORD *)(a1 + 2732 + k) = 0;
  *(_WORD *)(a1 + 1220) = 1;
  *(_DWORD *)(a1 + 5884) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 5896) = 0u;
  *(_DWORD *)(a1 + 5912) = 0;
  return result;
}

uint64_t sub_100033368(uint64_t a1, char *a2, int a3, int a4)
{
  int v4;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a3;
  v7 = *(_DWORD *)(a1 + 5924);
  v8 = *(unsigned __int16 *)(a1 + 5920);
  v9 = v8 | (a4 << v7);
  *(_WORD *)(a1 + 5920) = v8 | ((_WORD)a4 << v7);
  if (v7 < 14)
  {
    v15 = v7 + 3;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11 + 1;
    *(_BYTE *)(v10 + v11) = v9;
    v12 = *(_BYTE *)(a1 + 5921);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v14 + 1;
    *(_BYTE *)(v13 + v14) = v12;
    LODWORD(v13) = *(_DWORD *)(a1 + 5924);
    *(_WORD *)(a1 + 5920) = (unsigned __int16)a4 >> (16 - v13);
    v15 = v13 - 13;
  }
  *(_DWORD *)(a1 + 5924) = v15;
  v16 = ~(_WORD)a3;
  result = sub_100034458(a1);
  *(_DWORD *)(a1 + 5916) = 8;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(unsigned int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v19 + 1;
  *(_BYTE *)(v18 + v19) = v4;
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(unsigned int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v21 + 1;
  *(_BYTE *)(v20 + v21) = BYTE1(v4);
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(unsigned int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v23 + 1;
  *(_BYTE *)(v22 + v23) = v16;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(unsigned int *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v25 + 1;
  for (*(_BYTE *)(v24 + v25) = HIBYTE(v16); v4; --v4)
  {
    v26 = *a2++;
    v27 = *(_QWORD *)(a1 + 16);
    v28 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v28 + 1;
    *(_BYTE *)(v27 + v28) = v26;
  }
  return result;
}

uint64_t sub_10003349C(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v2 = *(_DWORD *)(a1 + 5924);
  v3 = *(unsigned __int16 *)(a1 + 5920);
  v4 = v3 | (2 << v2);
  *(_WORD *)(a1 + 5920) = v3 | (2 << v2);
  if (v2 < 14)
  {
    v10 = v2 + 3;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v6 + 1;
    *(_BYTE *)(v5 + v6) = v4;
    v7 = *(_BYTE *)(a1 + 5921);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v9 + 1;
    *(_BYTE *)(v8 + v9) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 5924);
    v4 = 2u >> (16 - v8);
    *(_WORD *)(a1 + 5920) = v4;
    v10 = v8 - 13;
  }
  *(_DWORD *)(a1 + 5924) = v10;
  if (v10 < 10)
  {
    v16 = v10 + 7;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12 + 1;
    *(_BYTE *)(v11 + v12) = v4;
    v13 = *(_BYTE *)(a1 + 5921);
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v15 + 1;
    *(_BYTE *)(v14 + v15) = v13;
    *(_WORD *)(a1 + 5920) = 0;
    v16 = *(_DWORD *)(a1 + 5924) - 9;
  }
  *(_DWORD *)(a1 + 5924) = v16;
  result = sub_10003367C(a1);
  v18 = *(_DWORD *)(a1 + 5924);
  if (*(_DWORD *)(a1 + 5916) - v18 + 11 <= 8)
  {
    v19 = *(unsigned __int16 *)(a1 + 5920);
    v20 = v19 | (2 << v18);
    *(_WORD *)(a1 + 5920) = v19 | (2 << v18);
    if (v18 < 14)
    {
      v26 = v18 + 3;
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v22 + 1;
      *(_BYTE *)(v21 + v22) = v20;
      v23 = *(_BYTE *)(a1 + 5921);
      v24 = *(_QWORD *)(a1 + 16);
      v25 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v25 + 1;
      *(_BYTE *)(v24 + v25) = v23;
      LODWORD(v24) = *(_DWORD *)(a1 + 5924);
      v20 = 2u >> (16 - v24);
      *(_WORD *)(a1 + 5920) = v20;
      v26 = v24 - 13;
    }
    *(_DWORD *)(a1 + 5924) = v26;
    if (v26 < 10)
    {
      v32 = v26 + 7;
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 16);
      v28 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v28 + 1;
      *(_BYTE *)(v27 + v28) = v20;
      v29 = *(_BYTE *)(a1 + 5921);
      v30 = *(_QWORD *)(a1 + 16);
      v31 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v31 + 1;
      *(_BYTE *)(v30 + v31) = v29;
      *(_WORD *)(a1 + 5920) = 0;
      v32 = *(_DWORD *)(a1 + 5924) - 9;
    }
    *(_DWORD *)(a1 + 5924) = v32;
    result = sub_10003367C(a1);
  }
  *(_DWORD *)(a1 + 5916) = 7;
  return result;
}

uint64_t sub_10003367C(uint64_t result)
{
  int v1;
  int v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_DWORD *)(result + 5924);
  if (v1 == 16)
  {
    v2 = 0;
    v3 = *(_BYTE *)(result + 5920);
    v4 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v4 + 1;
    *(_BYTE *)(*(_QWORD *)(result + 16) + v4) = v3;
    v5 = *(_BYTE *)(result + 5921);
    v6 = *(_QWORD *)(result + 16);
    v7 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v7 + 1;
    *(_BYTE *)(v6 + v7) = v5;
    *(_WORD *)(result + 5920) = 0;
  }
  else
  {
    if (v1 < 8)
      return result;
    v8 = *(_BYTE *)(result + 5920);
    v9 = *(_QWORD *)(result + 16);
    v10 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v10 + 1;
    *(_BYTE *)(v9 + v10) = v8;
    *(_WORD *)(result + 5920) = *(unsigned __int8 *)(result + 5921);
    v2 = *(_DWORD *)(result + 5924) - 8;
  }
  *(_DWORD *)(result + 5924) = v2;
  return result;
}

void sub_10003370C(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  if (*(int *)(a1 + 180) < 1)
  {
    v14 = 0;
    v15 = a3 + 5;
    v16 = a3 + 5;
    if (!a2)
      goto LABEL_25;
  }
  else
  {
    if (a3 && *(_DWORD *)(*(_QWORD *)a1 + 88) == 2)
    {
      v8 = 0;
      v9 = (unsigned __int16 *)(a1 + 196);
      while (1)
      {
        v10 = *v9;
        v9 += 2;
        if (v10)
          break;
        if (++v8 == 9)
        {
          v11 = (unsigned __int16 *)(a1 + 252);
          v8 = -18;
          while (1)
          {
            v12 = *v11;
            v11 += 2;
            if (v12)
              break;
            if (__CFADD__(v8++, 1))
            {
              LODWORD(v8) = 32;
              goto LABEL_15;
            }
          }
          LODWORD(v8) = v8 + 32;
          break;
        }
      }
LABEL_15:
      *(_DWORD *)(*(_QWORD *)a1 + 88) = v8 == 32;
    }
    sub_100033C08(a1, a1 + 2888);
    sub_100033C08(a1, a1 + 2912);
    sub_1000345D4((_WORD *)a1, a1 + 196, *(_DWORD *)(a1 + 2896));
    sub_1000345D4((_WORD *)a1, a1 + 2488, *(_DWORD *)(a1 + 2920));
    sub_100033C08(a1, a1 + 2936);
    v14 = &dword_100000010 + 2;
    while (!*(_WORD *)(a1 + 4 * byte_100042928[v14] + 2734))
    {
      if (v14-- <= 3)
      {
        v14 = 2;
        break;
      }
    }
    v18 = *(_QWORD *)(a1 + 5896) + (int)(3 * v14 + 17);
    *(_QWORD *)(a1 + 5896) = v18;
    v19 = v18 + 10;
    v16 = (unint64_t)(v18 + 10) >> 3;
    v15 = (unint64_t)(*(_QWORD *)(a1 + 5904) + 10) >> 3;
    if (v15 < v19 >> 3)
      v16 = (unint64_t)(*(_QWORD *)(a1 + 5904) + 10) >> 3;
    if (!a2)
      goto LABEL_25;
  }
  if (a3 + 4 <= v16)
  {
    sub_100033368(a1, a2, a3, a4);
    goto LABEL_51;
  }
LABEL_25:
  v20 = *(_DWORD *)(a1 + 5924);
  v21 = *(unsigned __int16 *)(a1 + 5920);
  if (v15 == v16 || *(_DWORD *)(a1 + 184) == 4)
  {
    v29 = v21 | ((a4 + 2) << v20);
    *(_WORD *)(a1 + 5920) = v21 | (((_WORD)a4 + 2) << v20);
    if (v20 < 14)
    {
      v36 = v20 + 3;
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 16);
      v31 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v31 + 1;
      *(_BYTE *)(v30 + v31) = v29;
      v32 = *(_BYTE *)(a1 + 5921);
      v33 = *(_QWORD *)(a1 + 16);
      v34 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v34 + 1;
      *(_BYTE *)(v33 + v34) = v32;
      v35 = *(_DWORD *)(a1 + 5924);
      *(_WORD *)(a1 + 5920) = (unsigned __int16)(a4 + 2) >> (16 - v35);
      v36 = v35 - 13;
    }
    *(_DWORD *)(a1 + 5924) = v36;
    v46 = &unk_1000422F8;
    v47 = &unk_100042778;
    v48 = a1;
  }
  else
  {
    v22 = v21 | ((a4 + 4) << v20);
    if (v20 < 14)
    {
      v28 = v20 + 3;
    }
    else
    {
      *(_WORD *)(a1 + 5920) = v22;
      v23 = *(_QWORD *)(a1 + 16);
      v24 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v24 + 1;
      *(_BYTE *)(v23 + v24) = v22;
      v25 = *(_BYTE *)(a1 + 5921);
      v26 = *(_QWORD *)(a1 + 16);
      v27 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v27 + 1;
      *(_BYTE *)(v26 + v27) = v25;
      LODWORD(v26) = *(_DWORD *)(a1 + 5924);
      v22 = (unsigned __int16)(a4 + 4) >> (16 - v26);
      v28 = v26 - 13;
    }
    *(_DWORD *)(a1 + 5924) = v28;
    v37 = *(_DWORD *)(a1 + 2896);
    v38 = *(_DWORD *)(a1 + 2920);
    if (v28 < 12)
    {
      v44 = v22 | ((v37 + 65280) << v28);
      v45 = v28 + 5;
    }
    else
    {
      v39 = v22 | ((v37 - 256) << v28);
      *(_WORD *)(a1 + 5920) = v39;
      v40 = *(_QWORD *)(a1 + 16);
      v41 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v41 + 1;
      *(_BYTE *)(v40 + v41) = v39;
      LOBYTE(v39) = *(_BYTE *)(a1 + 5921);
      v42 = *(_QWORD *)(a1 + 16);
      v43 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v43 + 1;
      *(_BYTE *)(v42 + v43) = v39;
      LODWORD(v42) = *(_DWORD *)(a1 + 5924);
      v44 = (unsigned __int16)(v37 - 256) >> (16 - v42);
      v45 = v42 - 11;
    }
    *(_DWORD *)(a1 + 5924) = v45;
    v49 = v44 | (v38 << v45);
    if (v45 < 12)
    {
      v55 = v45 + 5;
    }
    else
    {
      *(_WORD *)(a1 + 5920) = v49;
      v50 = *(_QWORD *)(a1 + 16);
      v51 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v51 + 1;
      *(_BYTE *)(v50 + v51) = v49;
      v52 = *(_BYTE *)(a1 + 5921);
      v53 = *(_QWORD *)(a1 + 16);
      v54 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v54 + 1;
      *(_BYTE *)(v53 + v54) = v52;
      LODWORD(v53) = *(_DWORD *)(a1 + 5924);
      v49 = (unsigned __int16)v38 >> (16 - v53);
      v55 = v53 - 11;
    }
    *(_DWORD *)(a1 + 5924) = v55;
    if (v55 < 13)
    {
      v61 = v49 | ((v14 + 65533) << v55);
      v62 = v55 + 4;
    }
    else
    {
      v56 = v49 | ((v14 - 3) << v55);
      *(_WORD *)(a1 + 5920) = v56;
      v57 = *(_QWORD *)(a1 + 16);
      v58 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v58 + 1;
      *(_BYTE *)(v57 + v58) = v56;
      LOBYTE(v56) = *(_BYTE *)(a1 + 5921);
      v59 = *(_QWORD *)(a1 + 16);
      v60 = *(unsigned int *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v60 + 1;
      *(_BYTE *)(v59 + v60) = v56;
      LODWORD(v59) = *(_DWORD *)(a1 + 5924);
      v61 = (unsigned __int16)(v14 - 3) >> (16 - v59);
      v62 = v59 - 12;
    }
    *(_WORD *)(a1 + 5920) = v61;
    *(_DWORD *)(a1 + 5924) = v62;
    if ((v14 & 0x80000000) == 0)
    {
      v63 = v14 + 1;
      v64 = byte_100042928;
      do
      {
        v65 = *v64++;
        v66 = *(unsigned __int16 *)(a1 + 4 * v65 + 2734);
        v61 |= v66 << v62;
        *(_WORD *)(a1 + 5920) = v61;
        if (v62 < 14)
        {
          v62 += 3;
        }
        else
        {
          v67 = *(_QWORD *)(a1 + 16);
          v68 = *(unsigned int *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v68 + 1;
          *(_BYTE *)(v67 + v68) = v61;
          v69 = *(_BYTE *)(a1 + 5921);
          v70 = *(_QWORD *)(a1 + 16);
          v71 = *(unsigned int *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v71 + 1;
          *(_BYTE *)(v70 + v71) = v69;
          LODWORD(v70) = *(_DWORD *)(a1 + 5924);
          v61 = v66 >> (16 - v70);
          *(_WORD *)(a1 + 5920) = v61;
          v62 = v70 - 13;
        }
        *(_DWORD *)(a1 + 5924) = v62;
        --v63;
      }
      while (v63);
    }
    sub_1000346C8(a1, a1 + 196, v37);
    sub_1000346C8(a1, a1 + 2488, v38);
    v48 = a1;
    v46 = (void *)(a1 + 196);
    v47 = (void *)(a1 + 2488);
  }
  sub_1000340B0(v48, (uint64_t)v46, (uint64_t)v47);
LABEL_51:
  sub_100033304(a1);
  if (a4)
    sub_100034458(a1);
}

uint64_t sub_100033C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  _WORD *v28;
  unsigned int v29;
  uint64_t result;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  _WORD *v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int16 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned __int16 v71[16];

  v4 = *(_QWORD *)a2;
  v5 = *(uint64_t **)(a2 + 16);
  v6 = *v5;
  v7 = *((unsigned int *)v5 + 5);
  v8 = (int *)(a1 + 5284);
  *(_QWORD *)(a1 + 5284) = 0x23D00000000;
  if ((int)v7 < 1)
  {
    v13 = 0;
    v11 = -1;
  }
  else
  {
    v9 = 0;
    v10 = (_WORD *)(v4 + 2);
    v11 = -1;
    do
    {
      if (*(v10 - 1))
      {
        v12 = *(int *)(a1 + 5284) + 1;
        *(_DWORD *)(a1 + 5284) = v12;
        *(_DWORD *)(a1 + 4 * v12 + 2992) = v9;
        *(_BYTE *)(a1 + 5292 + v9) = 0;
        v11 = v9;
      }
      else
      {
        *v10 = 0;
      }
      v10 += 2;
      ++v9;
    }
    while (v7 != v9);
    v13 = *v8;
    if (*v8 > 1)
      goto LABEL_20;
  }
  v14 = v11;
  do
  {
    if (v14 >= 2)
      v11 = v14;
    else
      v11 = v14 + 1;
    if (v14 < 2)
      v15 = v14 + 1;
    else
      v15 = 0;
    v16 = v13 + 1;
    *(_DWORD *)(a1 + 5284) = v16;
    *(_DWORD *)(a1 + 4 * v16 + 2992) = v15;
    *(_WORD *)(v4 + 4 * v15) = 1;
    *(_BYTE *)(a1 + v15 + 5292) = 0;
    --*(_QWORD *)(a1 + 5896);
    if (v6)
      *(_QWORD *)(a1 + 5904) -= *(unsigned __int16 *)(v6 + 4 * v15 + 2);
    v13 = *v8;
    v14 = v11;
  }
  while (*v8 < 2);
LABEL_20:
  *(_DWORD *)(a2 + 8) = v11;
  v17 = v13 >> 1;
  do
  {
    sub_1000344CC(a1, v4, v17);
    v18 = v17-- != 0;
  }
  while (v17 != 0 && v18);
  v19 = *(_DWORD *)(a1 + 5284);
  v20 = (int)v7;
  v21 = 4 * (int)v7;
  do
  {
    v22 = *(int *)(a1 + 2996);
    *(_DWORD *)(a1 + 5284) = v19 - 1;
    v23 = a1 + 2992;
    *(_DWORD *)(a1 + 2996) = *(_DWORD *)(a1 + 2992 + 4 * v19);
    sub_1000344CC(a1, v4, 1);
    v24 = *(int *)(a1 + 2996);
    v25 = *(int *)(a1 + 5288) - 1;
    *(_DWORD *)(a1 + 5288) = v25;
    *(_DWORD *)(v23 + 4 * v25) = v22;
    v26 = *(int *)(a1 + 5288) - 1;
    *(_DWORD *)(a1 + 5288) = v26;
    *(_DWORD *)(v23 + 4 * v26) = v24;
    v27 = (_WORD *)(v4 + 4 * v22);
    v28 = (_WORD *)(v4 + 4 * v24);
    *(_WORD *)(v4 + v21) = *v28 + *v27;
    v29 = *(unsigned __int8 *)(a1 + 5292 + v24);
    if (*(unsigned __int8 *)(a1 + 5292 + v22) > v29)
      LOBYTE(v29) = *(_BYTE *)(a1 + 5292 + v22);
    *(_BYTE *)(a1 + 5292 + v20) = v29 + 1;
    v28[1] = v20;
    v27[1] = v20;
    *(_DWORD *)(a1 + 2996) = v20;
    result = sub_1000344CC(a1, v4, 1);
    v19 = *(_DWORD *)(a1 + 5284);
    v21 += 4;
    ++v20;
  }
  while (v19 > 1);
  v31 = *(_DWORD *)(a1 + 2996);
  v32 = *(int *)(a1 + 5288) - 1;
  *(_DWORD *)(a1 + 5288) = v32;
  *(_DWORD *)(v23 + 4 * v32) = v31;
  v33 = *(_QWORD *)a2;
  v34 = *(_DWORD *)(a2 + 8);
  v35 = *(uint64_t **)(a2 + 16);
  v36 = *v35;
  v37 = v35[1];
  v38 = *((_DWORD *)v35 + 4);
  v39 = *((int *)v35 + 6);
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_WORD *)(v33 + 4 * *(int *)(v23 + 4 * *(int *)(a1 + 5288)) + 2) = 0;
  v40 = *(int *)(a1 + 5288);
  if ((int)v40 <= 571)
  {
    v41 = 0;
    do
    {
      v42 = *(int *)(a1 + 2996 + 4 * v40);
      result = v33 + 4 * v42;
      v43 = *(unsigned __int16 *)(v33 + 4 * *(unsigned __int16 *)(result + 2) + 2);
      v44 = (int)v39 <= v43;
      if ((int)v39 > v43)
        v45 = v43 + 1;
      else
        v45 = v39;
      if (v44)
        ++v41;
      *(_WORD *)(result + 2) = v45;
      if ((int)v42 <= v34)
      {
        ++*(_WORD *)(a1 + 2 * v45 + 2960);
        v46 = (int)v42 >= v38 ? *(_DWORD *)(v37 + 4 * ((int)v42 - v38)) : 0;
        result = *(unsigned __int16 *)result;
        *(_QWORD *)(a1 + 5896) += (int)result * (uint64_t)(v46 + v45);
        if (v36)
          *(_QWORD *)(a1 + 5904) += (*(unsigned __int16 *)(v36 + 4 * v42 + 2) + (uint64_t)v46) * result;
      }
    }
    while ((_DWORD)v40++ != 571);
    if (v41)
    {
      do
      {
        v48 = (_WORD *)(a1 + 2 * v39 + 2960);
        v49 = (uint64_t)&_mh_execute_header + (v39 << 32);
        do
        {
          v51 = (unsigned __int16)*--v48;
          v50 = v51;
          v49 -= 0x100000000;
        }
        while (!v51);
        *v48 = v50 - 1;
        *(_WORD *)(a1 + (v49 >> 31) + 2960) += 2;
        --*(_WORD *)(a1 + 2 * v39 + 2960);
        v52 = __OFSUB__(v41, 2);
        v41 -= 2;
      }
      while (!((v41 < 0) ^ v52 | (v41 == 0)));
      if ((_DWORD)v39)
      {
        v53 = 573;
        do
        {
          v54 = *(unsigned __int16 *)(a1 + 2 * v39 + 2960);
          if (*(_WORD *)(a1 + 2 * v39 + 2960))
          {
            do
            {
              v55 = (int *)(a1 + 2988 + 4 * v53);
              do
              {
                v57 = *v55--;
                v56 = v57;
                --v53;
              }
              while ((int)v57 > v34);
              v58 = v33 + 4 * v56;
              v61 = *(unsigned __int16 *)(v58 + 2);
              v59 = (_WORD *)(v58 + 2);
              v60 = v61;
              if ((_DWORD)v39 != v61)
              {
                *(_QWORD *)(a1 + 5896) += (v39 - v60) * *(unsigned __int16 *)(v33 + 4 * v56);
                *v59 = v39;
              }
              --v54;
            }
            while (v54);
          }
          --v39;
        }
        while ((_DWORD)v39);
      }
    }
  }
  v62 = 0;
  v63 = 0;
  do
  {
    v63 = 2 * ((v63 & 0xFFFE) + *(_WORD *)(a1 + 2960 + v62 * 2));
    v71[++v62] = v63;
  }
  while (v62 != 15);
  if ((v11 & 0x80000000) == 0)
  {
    v64 = 0;
    do
    {
      v65 = v4 + 4 * v64;
      v66 = *(unsigned __int16 *)(v65 + 2);
      if (*(_WORD *)(v65 + 2))
      {
        v67 = 0;
        v68 = v71[*(unsigned __int16 *)(v65 + 2)];
        v71[v66] = v68 + 1;
        v69 = v66 + 1;
        do
        {
          v70 = v67 | v68 & 1;
          v68 >>= 1;
          v67 = 2 * v70;
          --v69;
        }
        while (v69 > 1);
        *(_WORD *)(v4 + 4 * v64) = v70;
      }
      ++v64;
    }
    while (v64 != v11 + 1);
  }
  return result;
}

uint64_t sub_1000340B0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int16 *v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;

  if (*(_DWORD *)(result + 5884))
  {
    v3 = 0;
    while (1)
    {
      v4 = *(unsigned __int16 *)(*(_QWORD *)(result + 5888) + 2 * v3);
      v5 = *(unsigned __int8 *)(*(_QWORD *)(result + 5872) + v3);
      if (*(_WORD *)(*(_QWORD *)(result + 5888) + 2 * v3))
        break;
      v19 = (unsigned __int16 *)(a2 + 4 * v5);
      v20 = v19[1];
      v21 = *(_DWORD *)(result + 5924);
      v22 = *v19;
      v23 = *(unsigned __int16 *)(result + 5920);
      v24 = v23 | (v22 << v21);
      *(_WORD *)(result + 5920) = v23 | ((_WORD)v22 << v21);
      if (v21 > 16 - v20)
      {
        v25 = *(_QWORD *)(result + 16);
        v26 = *(unsigned int *)(result + 40);
        *(_DWORD *)(result + 40) = v26 + 1;
        *(_BYTE *)(v25 + v26) = v24;
        v27 = *(_BYTE *)(result + 5921);
        v28 = *(_QWORD *)(result + 16);
        v29 = *(unsigned int *)(result + 40);
        *(_DWORD *)(result + 40) = v29 + 1;
        *(_BYTE *)(v28 + v29) = v27;
        v30 = *(_DWORD *)(result + 5924);
        *(_WORD *)(result + 5920) = v22 >> (16 - v30);
        v31 = v20 + v30;
LABEL_24:
        v39 = v31 - 16;
        goto LABEL_26;
      }
      v39 = v21 + v20;
LABEL_26:
      *(_DWORD *)(result + 5924) = v39;
LABEL_27:
      if (++v3 >= (unint64_t)*(unsigned int *)(result + 5884))
        goto LABEL_30;
    }
    v6 = byte_1000421F8[v5];
    v7 = a2 + 4 * v6;
    v8 = *(unsigned __int16 *)(v7 + 1030);
    v9 = *(_DWORD *)(result + 5924);
    v10 = *(unsigned __int16 *)(v7 + 1028);
    v11 = *(unsigned __int16 *)(result + 5920);
    v12 = v11 | (v10 << v9);
    *(_WORD *)(result + 5920) = v11 | ((_WORD)v10 << v9);
    if (v9 <= 16 - v8)
    {
      v18 = v9 + v8;
    }
    else
    {
      v13 = *(_QWORD *)(result + 16);
      v14 = *(unsigned int *)(result + 40);
      *(_DWORD *)(result + 40) = v14 + 1;
      *(_BYTE *)(v13 + v14) = v12;
      v15 = *(_BYTE *)(result + 5921);
      v16 = *(_QWORD *)(result + 16);
      v17 = *(unsigned int *)(result + 40);
      *(_DWORD *)(result + 40) = v17 + 1;
      *(_BYTE *)(v16 + v17) = v15;
      LODWORD(v16) = *(_DWORD *)(result + 5924);
      v12 = v10 >> (16 - v16);
      *(_WORD *)(result + 5920) = v12;
      v18 = v8 + v16 - 16;
    }
    *(_DWORD *)(result + 5924) = v18;
    if ((unint64_t)(v6 - 28) >= 0xFFFFFFFFFFFFFFECLL)
    {
      v32 = dword_1000427F0[v6];
      v33 = v5 - dword_10004293C[v6];
      v12 |= v33 << v18;
      *(_WORD *)(result + 5920) = v12;
      if (v18 <= 16 - v32)
      {
        v18 += v32;
      }
      else
      {
        v34 = *(_QWORD *)(result + 16);
        v35 = *(unsigned int *)(result + 40);
        *(_DWORD *)(result + 40) = v35 + 1;
        *(_BYTE *)(v34 + v35) = v12;
        v36 = *(_BYTE *)(result + 5921);
        v37 = *(_QWORD *)(result + 16);
        v38 = *(unsigned int *)(result + 40);
        *(_DWORD *)(result + 40) = v38 + 1;
        *(_BYTE *)(v37 + v38) = v36;
        LODWORD(v37) = *(_DWORD *)(result + 5924);
        v12 = (unsigned __int16)v33 >> (16 - v37);
        *(_WORD *)(result + 5920) = v12;
        v18 = v32 + v37 - 16;
      }
      *(_DWORD *)(result + 5924) = v18;
    }
    v40 = v4 - 1;
    if (v4 >= 0x101)
      v41 = ((v4 - 1) >> 7) + 256;
    else
      v41 = v4 - 1;
    v42 = byte_100041FF8[v41];
    v43 = (unsigned __int16 *)(a3 + 4 * v42);
    v44 = v43[1];
    v45 = *v43;
    v46 = v12 | (v45 << v18);
    *(_WORD *)(result + 5920) = v46;
    if (v18 <= 16 - v44)
    {
      v39 = v18 + v44;
    }
    else
    {
      v47 = *(_QWORD *)(result + 16);
      v48 = *(unsigned int *)(result + 40);
      *(_DWORD *)(result + 40) = v48 + 1;
      *(_BYTE *)(v47 + v48) = v46;
      v49 = *(_BYTE *)(result + 5921);
      v50 = *(_QWORD *)(result + 16);
      v51 = *(unsigned int *)(result + 40);
      *(_DWORD *)(result + 40) = v51 + 1;
      *(_BYTE *)(v50 + v51) = v49;
      LODWORD(v50) = *(_DWORD *)(result + 5924);
      v46 = v45 >> (16 - v50);
      *(_WORD *)(result + 5920) = v46;
      v39 = v44 + v50 - 16;
    }
    *(_DWORD *)(result + 5924) = v39;
    if (v42 < 4)
      goto LABEL_27;
    v52 = dword_100042864[v42];
    v53 = v40 - dword_1000429B0[v42];
    v54 = v46 | (v53 << v39);
    *(_WORD *)(result + 5920) = v54;
    if (v39 <= 16 - v52)
    {
      v39 += v52;
      goto LABEL_26;
    }
    v55 = *(_QWORD *)(result + 16);
    v56 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v56 + 1;
    *(_BYTE *)(v55 + v56) = v54;
    LOBYTE(v55) = *(_BYTE *)(result + 5921);
    v57 = *(_QWORD *)(result + 16);
    v58 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v58 + 1;
    *(_BYTE *)(v57 + v58) = v55;
    LODWORD(v57) = *(_DWORD *)(result + 5924);
    *(_WORD *)(result + 5920) = (unsigned __int16)v53 >> (16 - v57);
    v31 = v52 + v57;
    goto LABEL_24;
  }
  v39 = *(_DWORD *)(result + 5924);
LABEL_30:
  v59 = *(unsigned __int16 *)(a2 + 1026);
  v60 = *(unsigned __int16 *)(a2 + 1024);
  v61 = *(unsigned __int16 *)(result + 5920);
  v62 = v61 | (v60 << v39);
  *(_WORD *)(result + 5920) = v61 | ((_WORD)v60 << v39);
  if (v39 <= 16 - v59)
  {
    v69 = v39 + v59;
  }
  else
  {
    v63 = *(_QWORD *)(result + 16);
    v64 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v64 + 1;
    *(_BYTE *)(v63 + v64) = v62;
    v65 = *(_BYTE *)(result + 5921);
    v66 = *(_QWORD *)(result + 16);
    v67 = *(unsigned int *)(result + 40);
    *(_DWORD *)(result + 40) = v67 + 1;
    *(_BYTE *)(v66 + v67) = v65;
    v68 = *(_DWORD *)(result + 5924);
    *(_WORD *)(result + 5920) = v60 >> (16 - v68);
    v69 = v59 + v68 - 16;
  }
  *(_DWORD *)(result + 5924) = v69;
  *(_DWORD *)(result + 5916) = *(unsigned __int16 *)(a2 + 1026);
  return result;
}

uint64_t sub_100034458(uint64_t result)
{
  int v1;
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_DWORD *)(result + 5924);
  if (v1 >= 9)
  {
    v2 = (uint64_t *)(result + 16);
    v3 = *(_QWORD *)(result + 16);
    v4 = (_DWORD *)(result + 40);
    v5 = *(unsigned int *)(result + 40);
    v6 = *(_BYTE *)(result + 5920);
    *(_DWORD *)(result + 40) = v5 + 1;
    *(_BYTE *)(v3 + v5) = v6;
    v7 = *(_BYTE *)(result + 5921);
LABEL_5:
    v8 = *v2;
    v9 = *v4;
    *v4 = v9 + 1;
    *(_BYTE *)(v8 + v9) = v7;
    goto LABEL_6;
  }
  if (v1 >= 1)
  {
    v7 = *(_BYTE *)(result + 5920);
    v2 = (uint64_t *)(result + 16);
    v4 = (_DWORD *)(result + 40);
    goto LABEL_5;
  }
LABEL_6:
  *(_WORD *)(result + 5920) = 0;
  *(_DWORD *)(result + 5924) = 0;
  return result;
}

uint64_t sub_1000344CC(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v3 = *(_DWORD *)(result + 4 * a3 + 2992);
  v4 = 2 * a3;
  v5 = *(_DWORD *)(result + 5284);
  if (2 * a3 <= v5)
  {
    v7 = result + 5292;
    while (1)
    {
      if (v4 >= v5)
      {
        v6 = v4;
        v8 = v4;
      }
      else
      {
        v8 = v4;
        v9 = *(int *)(result + 2992 + 4 * (v4 | 1));
        v10 = *(unsigned __int16 *)(a2 + 4 * v9);
        v11 = *(int *)(result + 2992 + 4 * v4);
        v12 = *(unsigned __int16 *)(a2 + 4 * v11);
        if (v10 >= v12)
        {
          if (v10 != v12)
          {
            v6 = v4;
            goto LABEL_11;
          }
          v13 = *(unsigned __int8 *)(v7 + v9);
          v6 = v4;
          if (v13 > *(unsigned __int8 *)(v7 + v11))
            goto LABEL_11;
        }
        v8 = v4 | 1;
        v6 = v4 | 1;
      }
LABEL_11:
      v14 = *(unsigned __int16 *)(a2 + 4 * v3);
      v15 = *(_DWORD *)(result + 4 * v8 + 2992);
      v16 = *(unsigned __int16 *)(a2 + 4 * v15);
      if (v14 < v16
        || v14 == v16
        && *(unsigned __int8 *)(result + v3 + 5292) <= *(unsigned __int8 *)(result + v15 + 5292))
      {
        break;
      }
      *(_DWORD *)(result + 4 * a3 + 2992) = v15;
      v4 = 2 * v6;
      v5 = *(_DWORD *)(result + 5284);
      a3 = v6;
      if (2 * v6 > v5)
        goto LABEL_15;
    }
  }
  v6 = a3;
LABEL_15:
  *(_DWORD *)(result + 4 * v6 + 2992) = v3;
  return result;
}

_WORD *sub_1000345D4(_WORD *result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;

  v3 = *(unsigned __int16 *)(a2 + 2);
  v4 = (a3 + 1);
  *(_WORD *)(a2 + 4 * (int)v4 + 2) = -1;
  if ((a3 & 0x80000000) == 0)
  {
    v5 = 0;
    if (v3)
      v6 = 4;
    else
      v6 = 3;
    if (v3)
      v7 = 7;
    else
      v7 = 138;
    v8 = (unsigned __int16 *)(a2 + 6);
    v9 = -1;
    do
    {
      v11 = *v8;
      v8 += 2;
      v10 = v11;
      v12 = v5 + 1;
      if (v5 + 1 >= v7 || v3 != v10)
      {
        if (v12 >= v6)
        {
          if (v3)
          {
            if (v3 != v9)
              ++result[2 * v3 + 1366];
            ++result[1398];
          }
          else if (v5 > 9)
          {
            ++result[1402];
          }
          else
          {
            ++result[1400];
          }
        }
        else
        {
          result[2 * v3 + 1366] += v12;
        }
        if (v3 == v10)
          v14 = 6;
        else
          v14 = 7;
        if (v3 == v10)
          v15 = 3;
        else
          v15 = 4;
        v12 = 0;
        if (v10)
          v7 = v14;
        else
          v7 = 138;
        if (v10)
          v6 = v15;
        else
          v6 = 3;
        v9 = v3;
      }
      v5 = v12;
      v3 = v10;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1000346C8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;

  if ((a3 & 0x80000000) == 0)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(unsigned __int16 *)(a2 + 2);
    if (*(_WORD *)(a2 + 2))
      v6 = 7;
    else
      v6 = 138;
    if (*(_WORD *)(a2 + 2))
      v7 = 4;
    else
      v7 = 3;
    v8 = -1;
    do
    {
      ++v3;
      v9 = *(unsigned __int16 *)(a2 + 4 * v3 + 2);
      v10 = v4 + 1;
      if (v4 + 1 >= v6 || v5 != v9)
      {
        if (v10 >= v7)
        {
          v23 = *(_DWORD *)(result + 5924);
          if (v5)
          {
            if (v5 != v8)
            {
              v24 = result + 4 * v5;
              v25 = *(unsigned __int16 *)(v24 + 2734);
              v26 = *(unsigned __int16 *)(v24 + 2732);
              v27 = *(unsigned __int16 *)(result + 5920);
              v28 = v27 | (v26 << v23);
              *(_WORD *)(result + 5920) = v27 | ((_WORD)v26 << v23);
              if (v23 <= 16 - v25)
              {
                v23 += v25;
              }
              else
              {
                v29 = *(_QWORD *)(result + 16);
                v30 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v30 + 1;
                *(_BYTE *)(v29 + v30) = v28;
                LOBYTE(v29) = *(_BYTE *)(result + 5921);
                v31 = *(_QWORD *)(result + 16);
                v32 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v32 + 1;
                *(_BYTE *)(v31 + v32) = v29;
                LODWORD(v29) = *(_DWORD *)(result + 5924);
                *(_WORD *)(result + 5920) = v26 >> (16 - v29);
                v23 = v25 + v29 - 16;
              }
              *(_DWORD *)(result + 5924) = v23;
              v10 = v4;
            }
            v52 = *(unsigned __int16 *)(result + 2798);
            v53 = *(unsigned __int16 *)(result + 2796);
            v54 = *(unsigned __int16 *)(result + 5920) | (v53 << v23);
            if (v23 <= 16 - v52)
            {
              v60 = v23 + v52;
            }
            else
            {
              *(_WORD *)(result + 5920) = v54;
              v55 = *(_QWORD *)(result + 16);
              v56 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v56 + 1;
              *(_BYTE *)(v55 + v56) = v54;
              v57 = *(_BYTE *)(result + 5921);
              v58 = *(_QWORD *)(result + 16);
              v59 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v59 + 1;
              *(_BYTE *)(v58 + v59) = v57;
              LODWORD(v58) = *(_DWORD *)(result + 5924);
              v54 = v53 >> (16 - v58);
              v60 = v52 + v58 - 16;
            }
            *(_DWORD *)(result + 5924) = v60;
            if (v60 < 15)
            {
              *(_WORD *)(result + 5920) = v54 | ((v10 + 65533) << v60);
              v69 = v60 + 2;
            }
            else
            {
              v61 = v10 - 3;
              v62 = v54 | (v61 << v60);
              *(_WORD *)(result + 5920) = v62;
              v63 = *(_QWORD *)(result + 16);
              v64 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v64 + 1;
              *(_BYTE *)(v63 + v64) = v62;
              LOBYTE(v62) = *(_BYTE *)(result + 5921);
              v65 = *(_QWORD *)(result + 16);
              v66 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v66 + 1;
              *(_BYTE *)(v65 + v66) = v62;
              v67 = (unsigned __int16)v61;
              v68 = *(_DWORD *)(result + 5924);
              *(_WORD *)(result + 5920) = v67 >> (16 - v68);
              v69 = v68 - 14;
            }
          }
          else
          {
            v33 = *(unsigned __int16 *)(result + 5920);
            if (v4 > 9)
            {
              v43 = *(unsigned __int16 *)(result + 2806);
              v44 = *(unsigned __int16 *)(result + 2804);
              v45 = v33 | (v44 << v23);
              if (v23 <= 16 - v43)
              {
                v51 = v23 + v43;
              }
              else
              {
                *(_WORD *)(result + 5920) = v45;
                v46 = *(_QWORD *)(result + 16);
                v47 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v47 + 1;
                *(_BYTE *)(v46 + v47) = v45;
                v48 = *(_BYTE *)(result + 5921);
                v49 = *(_QWORD *)(result + 16);
                v50 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v50 + 1;
                *(_BYTE *)(v49 + v50) = v48;
                LODWORD(v49) = *(_DWORD *)(result + 5924);
                v45 = v44 >> (16 - v49);
                v51 = v43 + v49 - 16;
              }
              *(_DWORD *)(result + 5924) = v51;
              if (v51 < 10)
              {
                *(_WORD *)(result + 5920) = v45 | ((v4 + 65526) << v51);
                v69 = v51 + 7;
              }
              else
              {
                v77 = v4 - 10;
                v78 = v45 | (v77 << v51);
                *(_WORD *)(result + 5920) = v78;
                v79 = *(_QWORD *)(result + 16);
                v80 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v80 + 1;
                *(_BYTE *)(v79 + v80) = v78;
                LOBYTE(v78) = *(_BYTE *)(result + 5921);
                v81 = *(_QWORD *)(result + 16);
                v82 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v82 + 1;
                *(_BYTE *)(v81 + v82) = v78;
                v83 = *(_DWORD *)(result + 5924);
                *(_WORD *)(result + 5920) = (unsigned __int16)v77 >> (16 - v83);
                v69 = v83 - 9;
              }
            }
            else
            {
              v34 = *(unsigned __int16 *)(result + 2802);
              v35 = *(unsigned __int16 *)(result + 2800);
              v36 = v33 | (v35 << v23);
              if (v23 <= 16 - v34)
              {
                v42 = v23 + v34;
              }
              else
              {
                *(_WORD *)(result + 5920) = v36;
                v37 = *(_QWORD *)(result + 16);
                v38 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v38 + 1;
                *(_BYTE *)(v37 + v38) = v36;
                v39 = *(_BYTE *)(result + 5921);
                v40 = *(_QWORD *)(result + 16);
                v41 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v41 + 1;
                *(_BYTE *)(v40 + v41) = v39;
                LODWORD(v40) = *(_DWORD *)(result + 5924);
                v36 = v35 >> (16 - v40);
                v42 = v34 + v40 - 16;
              }
              *(_DWORD *)(result + 5924) = v42;
              if (v42 < 14)
              {
                *(_WORD *)(result + 5920) = v36 | ((v4 + 65534) << v42);
                v69 = v42 + 3;
              }
              else
              {
                v70 = v4 - 2;
                v71 = v36 | (v70 << v42);
                *(_WORD *)(result + 5920) = v71;
                v72 = *(_QWORD *)(result + 16);
                v73 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v73 + 1;
                *(_BYTE *)(v72 + v73) = v71;
                LOBYTE(v71) = *(_BYTE *)(result + 5921);
                v74 = *(_QWORD *)(result + 16);
                v75 = *(unsigned int *)(result + 40);
                *(_DWORD *)(result + 40) = v75 + 1;
                *(_BYTE *)(v74 + v75) = v71;
                v76 = *(_DWORD *)(result + 5924);
                *(_WORD *)(result + 5920) = (unsigned __int16)v70 >> (16 - v76);
                v69 = v76 - 13;
              }
            }
          }
          *(_DWORD *)(result + 5924) = v69;
        }
        else
        {
          v11 = result + 4 * v5;
          v12 = (unsigned __int16 *)(v11 + 2732);
          v13 = (unsigned __int16 *)(v11 + 2734);
          v14 = *(_DWORD *)(result + 5924);
          do
          {
            v15 = *v13;
            v16 = *v12;
            v17 = *(unsigned __int16 *)(result + 5920);
            v18 = v17 | (v16 << v14);
            *(_WORD *)(result + 5920) = v17 | ((_WORD)v16 << v14);
            if (v14 <= 16 - v15)
            {
              v14 += v15;
            }
            else
            {
              v19 = *(_QWORD *)(result + 16);
              v20 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v20 + 1;
              *(_BYTE *)(v19 + v20) = v18;
              LOBYTE(v19) = *(_BYTE *)(result + 5921);
              v21 = *(_QWORD *)(result + 16);
              v22 = *(unsigned int *)(result + 40);
              *(_DWORD *)(result + 40) = v22 + 1;
              *(_BYTE *)(v21 + v22) = v19;
              LODWORD(v19) = *(_DWORD *)(result + 5924);
              *(_WORD *)(result + 5920) = v16 >> (16 - v19);
              v14 = v15 + v19 - 16;
            }
            *(_DWORD *)(result + 5924) = v14;
            --v10;
          }
          while (v10);
        }
        if (v5 == v9)
          v84 = 3;
        else
          v84 = 4;
        if (v5 == v9)
          v85 = 6;
        else
          v85 = 7;
        if (v9)
          v7 = v84;
        else
          v7 = 3;
        if (v9)
          v6 = v85;
        else
          v6 = 138;
        v10 = 0;
        v8 = v5;
      }
      v5 = v9;
      v4 = v10;
    }
    while (v3 != a3 + 1);
  }
  return result;
}

void sub_100034B7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "asprintf --extended-attributes path", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100034BA8()
{
  __assert_rtn("apple_open_xattrs", "platform.c", 35, "strstr(f->path, \"._\") != NULL");
}

void sub_100034BD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "asprintf", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100034BFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "copyfile", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100034C28()
{
  __assert_rtn("apple_flist_sent", "platform.c", 86, "sess->opts->extended_attributes");
}

void sub_100034C50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_byte", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100034C7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_byte", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100034CA8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 136315394;
  v4 = a1;
  v5 = 2080;
  v6 = a2;
  sub_100001DC4((void *)&_mh_execute_header, a3, (uint64_t)a3, "%s: move_file: %s", (uint8_t *)&v3);
  sub_100001DBC();
}

void sub_100034D20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "snprintf", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100034D4C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: openat", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100034DB0(uint64_t a1, NSObject *a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  char *v10;

  v4 = __error();
  v5 = strerror(*v4);
  v7 = 136315394;
  v8 = a1;
  v9 = 2080;
  v10 = v5;
  sub_100001DC4((void *)&_mh_execute_header, a2, v6, "%s: unlink: %s", (uint8_t *)&v7);
}

void sub_100034E48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "calloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100034E74(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v2 = *a1;
  v3 = 134218240;
  v4 = v2;
  v5 = 2048;
  v6 = 24;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "reallocarray 3 %ld * %ld bytes", (uint8_t *)&v3, 0x16u);
}

void sub_100034EFC()
{
  __assert_rtn("blk_find", "blocks.c", 159, "remain");
}

void sub_100034F24()
{
  __assert_rtn("blk_match", "blocks.c", 310, "st->curtok != 0");
}

void sub_100034F4C()
{
  __assert_rtn("blk_match", "blocks.c", 271, "(off_t)st->mapsz >= blks->size");
}

void sub_100034F74()
{
  __assert_rtn("blk_recv_ack", "blocks.c", 366, "pos == sz");
}

void sub_100034F9C()
{
  __assert_rtn("blk_recv", "blocks.c", 386, "meta || s != NULL");
}

void sub_100034FC4()
{
  __assert_rtn("blk_recv", "blocks.c", 387, "*state == SDL_META || *state == SDL_BLOCKS");
}

void sub_100034FEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "iobuf_alloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035018()
{
  __assert_rtn("blk_recv", "blocks.c", 480, "s->csum <= sizeof(b->chksum_long)");
}

void sub_100035040()
{
  __assert_rtn("blk_recv", "blocks.c", 492, "b->len != 0");
}

void sub_100035068()
{
  __assert_rtn("blk_recv", "blocks.c", 449, "*state == SDL_BLOCKS");
}

void sub_100035090()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "iobuf_read_size", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000350BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_buf", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000350E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_unbuffer_size", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035114()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "inappropriate checksum length", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035140()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "non-zero length is less than remainder", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003516C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_int", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035198()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_int", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000351C4()
{
  __assert_rtn("rsync_client", "client.c", 108, "sess.opts->whole_file != -1");
}

void sub_1000351EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "rsync_receiver", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035218()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "data remains in read pipe", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035244()
{
  __assert_rtn("rsync_client", "client.c", 158, "sess.total_deleted >= sess.opts->max_delete");
}

void sub_10003526C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "rsync_sender", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035298()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "batch_open", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000352C4()
{
  __assert_rtn("daemon_apply_chmod", "daemon_misc.c", 62, "rc == 0");
}

void sub_1000352EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035318()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: 'numeric ids' invalid", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100035378()
{
  __assert_rtn("daemon_chuser_setup", "daemon_misc.c", 203, "rc == 0");
}

void sub_1000353A0()
{
  __assert_rtn("daemon_chuser_setup", "daemon_misc.c", 195, "rc == 0");
}

void sub_1000353C8()
{
  __assert_rtn("daemon_configure_filter_type", "daemon_misc.c", 284, "rc == 0");
}

void sub_1000353F0()
{
  __assert_rtn("daemon_connection_allowed", "daemon_misc.c", 539, "rc == 0");
}

void sub_100035418()
{
  __assert_rtn("daemon_connection_allowed", "daemon_misc.c", 514, "rc == 0");
}

void sub_100035440()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: 'lock file' is empty with 'max connections' in place", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000354A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: lock fcntl", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100035500()
{
  __assert_rtn("daemon_connection_limited", "daemon_misc.c", 601, "rc == 0");
}

void sub_100035528()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: 'max connections' invalid", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100035588()
{
  __assert_rtn("daemon_do_execcmds_pre", "daemon_misc.c", 777, "ret < (int)sizeof(envname)");
}

void sub_1000355B0()
{
  __assert_rtn("daemon_do_execcmds", "daemon_misc.c", 878, "rc == 0");
}

void sub_1000355D8()
{
  __assert_rtn("daemon_do_execcmds", "daemon_misc.c", 870, "rc == 0");
}

void sub_100035600()
{
  __assert_rtn("daemon_finish_prexfer", "daemon_misc.c", 926, "fd != -1 && child > 0");
}

void sub_100035628()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "write", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035654()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "strdup", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035680()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "make_safe_link", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000356AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: 'max verbosity' invalid", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003570C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: fopen", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003576C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: 'read only' invalid", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000357CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: 'write only' invalid", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003582C()
{
  __assert_rtn("daemon_parse_refuse", "daemon_misc.c", 1490, "rc != 0");
}

void sub_100035854()
{
  __assert_rtn("daemon_parse_refuse", "daemon_misc.c", 1502, "rc != 0");
}

void sub_10003587C()
{
  __assert_rtn("daemon_parse_refuse", "daemon_misc.c", 1372, "rc == 0");
}

void sub_1000358A4()
{
  __assert_rtn("daemon_can_refuse_wildcard", "daemon_misc.c", 1337, "(option != NULL) ^ (shopt != 0)");
}

void sub_1000358CC()
{
  __assert_rtn("daemon_can_refuse_wildcard", "daemon_misc.c", 1336, "option != NULL || shopt != 0");
}

void sub_1000358F4()
{
  __assert_rtn("daemon_add_short_refuse", "daemon_misc.c", 1274, "*shoptlen < *shoptsz");
}

void sub_10003591C()
{
  __assert_rtn("daemon_add_long_refuse", "daemon_misc.c", 1304, "*optlen < *optsz");
}

void sub_100035944()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_100006150();
  v3 = 2080;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%s: 'syslog facility' does not exist: %s", v2, 0x16u);
  sub_100001DBC();
}

void sub_1000359C4()
{
  __assert_rtn("daemon_setup_logfile", "daemon_misc.c", 1614, "rc == 0");
}

void sub_1000359EC()
{
  __assert_rtn("daemon_setup_logfile", "daemon_misc.c", 1594, "rc == 0");
}

void sub_100035A14(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: open", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100035A80()
{
  __assert_rtn("batch_open", "batch.c", 232, "sess->opts->write_batch != NULL");
}

void sub_100035AA8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: open", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100035B14()
{
  __assert_rtn("batch_open", "batch.c", 233, "sess->wbatch_fd == -1");
}

void sub_100035B3C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: fopen", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100035BA0(uint64_t a1)
{
  sub_100009004(a1, "daemon");
}

void sub_100035BB4()
{
  __assert_rtn("rsync_daemon", "daemon.c", 1425, "errno != ENOENT");
}

void sub_100035BDC(uint64_t a1)
{
  sub_100009004(a1, "strdup");
}

void sub_100035BF0(uint64_t a1)
{
  sub_100009004(a1, "getpeername");
}

void sub_100035C04(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: fopen", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100035C6C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: failed to obtain lock (is another rsyncd running?)", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100035CD4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: acquiring lock", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100035D3C()
{
  err(1, "bad bwlimit");
}

void sub_100035D54()
{
  errx(1, "--daemon may not be specified multiple times");
}

void sub_100035D6C()
{
  __assert_rtn("daemon_extract_addr", "daemon.c", 928, "family == AF_INET || family == AF_INET6");
}

void sub_100035D94()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "inet_ntop", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035DC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_line", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035DEC()
{
  __assert_rtn("rsync_daemon_handler", "daemon.c", 1078, "rc == 0");
}

void sub_100035E14()
{
  __assert_rtn("rsync_daemon_handler", "daemon.c", 969, "role->lockfd == -1");
}

void sub_100035E3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_buf", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100035E68()
{
  __assert_rtn("daemon_auth", "daemon.c", 841, "rc == 0");
}

void sub_100035E90()
{
  __assert_rtn("daemon_auth", "daemon.c", 834, "rc == 0");
}

void sub_100035EB8()
{
  __assert_rtn("daemon_list_module", "daemon.c", 136, "rc == 0");
}

void sub_100035EE0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: 'list' is not valid", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100035F44(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "rsync_password_hash", buf, 2u);
}

void sub_100035F80()
{
  __assert_rtn("daemon_auth_user", "daemon.c", 771, "strip > user");
}

void sub_100035FA8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "malloc", v1, 2u);
}

void sub_100035FE8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;

  sub_100009F08();
  sub_100009EF4((void *)&_mh_execute_header, v0, v1, "%s: mk_backup_dir: %s", v2, v3);
  sub_100001DBC();
}

void sub_10003604C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: mkdirat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000360AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: symlinkat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003610C()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;

  sub_100009F08();
  sub_100009EF4((void *)&_mh_execute_header, v0, v1, "%s: move_file: %s", v2, v3);
  sub_100001DBC();
}

void sub_100036170()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: mkdir", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000361D0()
{
  __assert_rtn("mk_backup_dir", "copy.c", 367, "bpp < bpend");
}

void sub_1000361F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: stat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100036258()
{
  __assert_rtn("mk_backup_dir", "copy.c", 349, "bpp < bpend");
}

void sub_100036280()
{
  __assert_rtn("mk_backup_dir", "copy.c", 324, "rpath < bpend");
}

void sub_1000362A8(const char **a1)
{
  err(11, "%s: copy_file tofd: openat", *a1);
}

void sub_1000362CC(const char **a1)
{
  err(11, "%s: copy file", *a1);
}

void sub_1000362F0()
{
  __assert_rtn("download_partial_path", "downloader.c", 194, "sess->opts->partial_dir != NULL");
}

void sub_100036318()
{
  __assert_rtn("download_partial_path", "downloader.c", 195, "f != NULL");
}

void sub_100036340()
{
  __assert_rtn("download_partial_path", "downloader.c", 216, "dirsep != dir");
}

void sub_100036368()
{
  __assert_rtn("download_partial_path", "downloader.c", 221, "dirlen > 0");
}

void sub_100036390()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "malloc", v2);
  sub_100001D98();
}

void sub_1000363C0()
{
  __assert_rtn("download_reinit", "downloader.c", 142, "p->state == DOWNLOAD_READ_NEXT");
}

void sub_1000363E8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000E5A4();
  sub_100001DC4((void *)&_mh_execute_header, v0, v1, "%s: partial cleanup failed, left at %s", v2);
  sub_100001DBC();
}

void sub_100036464()
{
  __assert_rtn("download_cleanup", "downloader.c", 415, "p->mapsz");
}

void sub_10003648C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "linkat", v3);
}

void sub_1000364B8(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "unlink", v3);
}

void sub_1000364E4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "io_read_int", v2);
  sub_100001D98();
}

void sub_100036514()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "get_iflags", v2);
  sub_100001D98();
}

void sub_100036544()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "io_read_short", v2);
  sub_100001D98();
}

void sub_100036574()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "blk_send_ack", v2);
  sub_100001D98();
}

void sub_1000365A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: mmap", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100036604()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: open", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100036664()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "strdup", v2);
  sub_100001D98();
}

void sub_100036694()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "lseek", v2);
  sub_100001D98();
}

void sub_1000366C4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "mktemplate", v2);
  sub_100001D98();
}

void sub_1000366F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "mkstempat: '%s'", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100036754()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10000E5A4();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s: temporary: %s", v1, 0x16u);
  sub_100001DBC();
}

void sub_1000367CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: fstat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003682C()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1466, "p->fname == NULL");
}

void sub_100036854()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1633, "p->fname != NULL || sess->opts->dry_run");
}

void sub_10003687C()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1634, "p->fd != -1 || sess->opts->dry_run");
}

void sub_1000368A4()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1635, "p->fdin != -1");
}

void sub_1000368CC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "buf_copy", v2);
  sub_100001D98();
}

void sub_1000368FC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "io_read_buf", v2);
  sub_100001D98();
}

void sub_10003692C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "rsync_set_metadata", v2);
  sub_100001D98();
}

void sub_10003695C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "linkat", v2);
  sub_100001D98();
}

void sub_10003698C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "unlink", v2);
  sub_100001D98();
}

void sub_1000369BC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "malloc dlrenamer entries", v2);
  sub_100001D98();
}

void sub_1000369EC()
{
  int v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  int v9;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  v4 = 1040;
  v5 = v0;
  v6 = 2080;
  v7 = v1;
  v8 = 1024;
  v9 = 1024;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s: delayed-update: compound path too long: %.*s.~tmp~ > %d", v3, 0x22u);
  sub_10000E5BC();
}

void sub_100036A80()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  __int16 v5;
  int v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  v3 = 2080;
  v4 = v0;
  v5 = 1024;
  v6 = 1024;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "%s: delayed-update: compound path too long: .~tmp~/%s > %d", v2, 0x1Cu);
  sub_10000E5BC();
}

void sub_100036B04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "mkdir '%s'", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100036B64()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1796, "usethis == f->path || *(usethis - 1) == '/'");
}

void sub_100036B8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: stat during --backup", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100036BEC()
{
  uint64_t v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  int v9;

  sub_10000E574();
  v4 = 2080;
  v5 = v0;
  v6 = 2080;
  v7 = v1;
  v8 = 1024;
  v9 = 1024;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s: backup: compound backup path too long: %s%s > %d", v3, 0x26u);
  sub_10000E5BC();
}

void sub_100036C88()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10000E580(__stack_chk_guard);
  sub_100009F08();
  sub_100001DC4((void *)&_mh_execute_header, v0, (uint64_t)v0, "%s: move_file: %s", v1);
  sub_100001DBC();
}

void sub_100036CF0()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "%s: doing backup", v1, 0xCu);
  sub_100001DBC();
}

void sub_100036D5C()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10000E580(__stack_chk_guard);
  sub_100009F08();
  sub_100001DC4((void *)&_mh_execute_header, v0, (uint64_t)v0, "%s: backup_to_dir: %s", v1);
  sub_100001DBC();
}

void sub_100036DC4()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1658, "p->obufsz == 0");
}

void sub_100036DEC(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_read_int", v3);
}

void sub_100036E18(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "malloc", v3);
}

void sub_100036E44(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_read_buf", v3);
}

void sub_100036E70(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "buf_copy", v3);
}

void sub_100036E9C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_read_check", v3);
}

void sub_100036EC8(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_read_byte", v3);
}

void sub_100036EF4()
{
  __assert_rtn("protocol_token_compressed", "downloader.c", 1156, "dectx.avail_in == 0");
}

void sub_100036F1C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "buf_copy dbuf", v3);
}

void sub_100036F48(uint8_t *a1, _DWORD *a2, NSObject *a3)
{
  *(_DWORD *)a1 = 67109120;
  *a2 = 0;
  sub_10000E58C((void *)&_mh_execute_header, a3, (uint64_t)a3, "protocol_token_cflush=%d", a1);
}

void sub_100036F84()
{
  __assert_rtn("rsync_downloader", "downloader.c", 1632, "p->state == DOWNLOAD_READ_REMOTE");
}

void sub_100036FAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: rsync_downloader: openat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003700C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "calloc hlink vstring", v2);
  sub_100001D98();
}

void sub_10003703C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "io_read_vstring", v2);
  sub_100001D98();
}

void sub_10003706C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "io_read_byte", v2);
  sub_100001D98();
}

void sub_10003709C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "index out of bounds", v2);
  sub_100001D98();
}

void sub_1000370CC()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100001DA0();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "downloader: phase complete", v1, 2u);
  sub_100001D98();
}

void sub_100037104()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "malloc renamer", v2);
  sub_100001D98();
}

void sub_100037134()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: fchmod", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100037194()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: fchown", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000371F4()
{
  __assert_rtn("buf_copy", "downloader.c", 526, "p->obufsz <= p->obufmax");
}

void sub_10003721C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E598(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: write", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003727C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E598(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: short write", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000372DC()
{
  __assert_rtn("buf_copy", "downloader.c", 552, "p->obufmax");
}

void sub_100037304()
{
  __assert_rtn("buf_copy", "downloader.c", 553, "p->obufsz <= p->obufmax");
}

void sub_10003732C()
{
  __assert_rtn("buf_copy", "downloader.c", 554, "p->obuf != NULL");
}

void sub_100037354()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E598(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: lseek", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000373B4()
{
  __assert_rtn("buf_copy", "downloader.c", 536, "p->obuf != NULL");
}

void sub_1000373DC()
{
  __assert_rtn("buf_copy", "downloader.c", 544, "p->obufsz <= p->obufmax");
}

void sub_100037404(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = a1;
  sub_10000E58C((void *)&_mh_execute_header, a2, a3, "inflateInit2 res=%d", (uint8_t *)v3);
  sub_100001D98();
}

void sub_10003746C()
{
  __assert_rtn("protocol_token_ff", "downloader.c", 1013, "sz");
}

void sub_100037494()
{
  __assert_rtn("protocol_token_ff", "downloader.c", 1014, "p->map != MAP_FAILED");
}

void sub_1000374BC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "io_read_check", v2);
  sub_100001D98();
}

void sub_1000374EC()
{
  __assert_rtn("protocol_token_ff_compress", "downloader.c", 938, "sz");
}

void sub_100037514()
{
  __assert_rtn("protocol_token_ff_compress", "downloader.c", 939, "p->map != MAP_FAILED");
}

void sub_10003753C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "protocol_token_ff_compress", v2);
  sub_100001D98();
}

void sub_10003756C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "decompress_reinit", v2);
  sub_100001D98();
}

void sub_10003759C(int a1, NSObject *a2, uint64_t a3)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = a1;
  sub_10000E58C((void *)&_mh_execute_header, a2, a3, "inflate ff res=%d", (uint8_t *)v3);
  sub_100001D98();
}

void sub_100037604()
{
  __assert_rtn("fargs_cmdline", "fargs.c", 166, "f != NULL");
}

void sub_10003762C()
{
  __assert_rtn("fargs_cmdline", "fargs.c", 167, "f->sourcesz > 0 || f->mode != FARGS_RECEIVER");
}

void sub_100037654()
{
  __assert_rtn("fargs_cmdline", "fargs.c", 398, "0 && \"Invalid value for supermode\"");
}

void sub_10003767C()
{
  err(14, "strdup");
}

void sub_100037694()
{
  __assert_rtn("fargs_cmdline_prog", "fargs.c", 112, "walker > arg");
}

void sub_1000376BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "idents_send", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000376E8()
{
  __assert_rtn("flist_send", "flist.c", 473, "sz > 0");
}

void sub_100037710()
{
  __assert_rtn("flist_send", "flist.c", 474, "sz < INT32_MAX");
}

void sub_100037738()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_long", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037764()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_uint", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037790()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "platform sent", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000377BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_buf checksum", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000377E8()
{
  __assert_rtn("flist_send", "flist.c", 630, "sz < INT32_MAX");
}

void sub_100037810()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "idents_add", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003783C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_flush", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037868()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "recallocarray flist", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037894()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist index error", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000378C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_byte", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000378EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "idents_recv", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "remote sent too many files", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037944()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_realloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037970()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_recv_name", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003799C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "security violation: zero-length pathname", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000379C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "malloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000379F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_buf", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037A20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_long", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037A4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_uint", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037A78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "same device without last entry", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037AA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_size", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037AD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "empty link name", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037AFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "symlink_filter", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037B28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "same device major without last entry", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037B54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "same mode without last entry", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037B80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "same time without last entry", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037BAC()
{
  __assert_rtn("flist_gen", "flist.c", 2168, "argc > 0");
}

void sub_100037BD4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_dedupe", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037C00()
{
  __assert_rtn("flist_dedupe", "flist.c", 287, "*sz");
}

void sub_100037C28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "'%s': (l)stat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100037C88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_append", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037CB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "hcreate", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037CE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "fts_open", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037D0C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "fts_read", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037D38()
{
  __assert_rtn("flist_gen_dels", "flist.c", 2372, "ent->fts_statp != NULL");
}

void sub_100037D60()
{
  __assert_rtn("flist_gen_dels", "flist.c", 2446, "ent->fts_info == FTS_DP");
}

void sub_100037D88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: stat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100037DEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "hsearch", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100037E18()
{
  __assert_rtn("flist_gen_dels", "flist.c", 2258, "S_ISDIR(wfl[i].st.mode)");
}

void sub_100037E40()
{
  __assert_rtn("flist_del", "flist.c", 2543, "sess->opts->del || sess->opts->force_delete");
}

void sub_100037E68()
{
  __assert_rtn("flist_del", "flist.c", 2544, "sess->opts->recursive || sess->opts->force_delete");
}

void sub_100037E90()
{
  __assert_rtn("flist_del", "flist.c", 2589, "root != -1");
}

void sub_100037EB8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015E3C(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "fclose: '%s'", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100037F18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015E3C(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "fdgets: '%s'", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100037F78()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015E3C(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "fopen ro: '%s'", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100037FD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "read(2) of files-from file failed", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038004()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "Can't have files-from with '..'", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038030()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "realloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003805C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: (l)stat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000380BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: readlink", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003811C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: flist_normalize_path", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003817C()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_10000E574();
  v3 = 2080;
  v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "generated %zu filenames: %s", v2, 0x16u);
  sub_100001DBC();
}

void sub_1000381FC()
{
  __assert_rtn("flist_gen_dirent", "flist.c", 1705, "ent->fts_statp != NULL");
}

void sub_100038224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100015E4C("fl_pop", "flist.c", a3, "fl->sz > 0");
}

void sub_100038248(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "symlink_read", buf, 2u);
}

void sub_100038284()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "reallocarray flist_gen_dirent()", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000382B0()
{
  __assert_rtn("flist_dirent_strip", "flist.c", 1533, "stripdir > 0");
}

void sub_1000382D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "fl_new failed", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038304()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "symlink_read", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038330()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "hash_file_by_path", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003835C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_append_dirs", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038388()
{
  __assert_rtn("cfg_free", "daemon_cfg.c", 347, "dcfg != NULL");
}

void sub_1000383B0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 136315138;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: open", (uint8_t *)&v2, 0xCu);
}

void sub_100038424()
{
  __assert_rtn("cfg_glue_values", "daemon_cfg.c", 420, "fraglen == *valuelen");
}

void sub_10003844C()
{
  __assert_rtn("cfg_parse_module_name", "daemon_cfg.c", 326, "wr - section <= end - start");
}

void sub_100038474()
{
  __assert_rtn("cfg_is_valid_module", "daemon_cfg.c", 648, "module != NULL");
}

void sub_10003849C()
{
  __assert_rtn("cfg_param_resolve", "daemon_cfg.c", 666, "dparam != NULL");
}

void sub_1000384C4()
{
  __assert_rtn("idents_assign_gid", "ids.c", 59, "!sess->opts->numeric_ids");
}

void sub_1000384EC()
{
  __assert_rtn("idents_assign_uid", "ids.c", 81, "!sess->opts->numeric_ids");
}

void sub_100038514()
{
  __assert_rtn("idents_remap", "ids.c", 114, "ids[i].id != 0");
}

void sub_10003853C()
{
  __assert_rtn("idents_remap", "ids.c", 111, "!sess->opts->numeric_ids");
}

void sub_100038564(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000196E4((void *)&_mh_execute_header, a2, a3, "%u: unknown uid", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_1000385C8(uint64_t a1, int a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;

  v3[0] = 67109378;
  v3[1] = a2;
  v4 = 2080;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%u: name too long: %s", (uint8_t *)v3, 0x12u);
}

void sub_10003864C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000196E4((void *)&_mh_execute_header, a2, a3, "%u: zero-length name", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_1000386B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "reallocarray", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000386DC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000196E4((void *)&_mh_execute_header, a2, a3, "%u: unknown gid", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_100038740()
{
  __assert_rtn("idents_send", "ids.c", 249, "ids[i].name != NULL");
}

void sub_100038768()
{
  __assert_rtn("idents_send", "ids.c", 250, "ids[i].id != 0");
}

void sub_100038790()
{
  __assert_rtn("idents_send", "ids.c", 252, "sz > 0 && sz <= UINT8_MAX");
}

void sub_1000387B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "poll", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000387E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_blocking", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038810()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "multiplex buffer overflow", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003883C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "error from remote host", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038868()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "write outgoing to batch", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038894()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_nonblocking", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000388C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "poll: unknown event", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000388EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "write", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038918()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_nonblocking: short write", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038944()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "poll: hangup", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038970()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "poll: bad fd", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003899C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "poll", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000389C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "poll: timeout", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000389F4()
{
  __assert_rtn("io_write_buf_tagged", "io.c", 248, "iotag == IT_DATA");
}

void sub_100038A1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_blocking", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038A48()
{
  __assert_rtn("io_register_handler", "io.c", 387, "ihandler->tag != tag");
}

void sub_100038A70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_nonblocking", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038A9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_nonblocking: short read", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038AC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "write incoming to batch", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038AF4()
{
  __assert_rtn("io_read_buf", "io.c", 560, "sess->mplex_read_remain == 0");
}

void sub_100038B1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_flush", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038B48()
{
  __assert_rtn("io_buffer_buf", "io.c", 722, "*bufpos + valsz <= buflen");
}

void sub_100038B70()
{
  __assert_rtn("io_lowbuffer_buf", "io.c", 746, "*bufpos + valsz + sizeof(int32_t) <= buflen");
}

void sub_100038B98()
{
  __assert_rtn("io_lowbuffer_buf", "io.c", 747, "valsz == (valsz & 0xFFFFFF)");
}

void sub_100038BC0()
{
  __assert_rtn("io_lowbuffer_vstring", "io.c", 771, "*bufpos + sz + sizeof(int32_t) <= buflen");
}

void sub_100038BE8()
{
  __assert_rtn("io_lowbuffer_vstring", "io.c", 772, "sz == (sz & 0xFFFFFF)");
}

void sub_100038C10()
{
  __assert_rtn("io_buffer_vstring", "io.c", 884, "sz <= 0x7fff");
}

void sub_100038C38()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "realloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038C64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_long negative", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038C90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_size: negative value", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038CBC()
{
  __assert_rtn("io_unbuffer_buf", "io.c", 1029, "*bufpos + valsz <= bufsz");
}

void sub_100038CE4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_unbuffer_size: negative value", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038D10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_vstring byte 1", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038D3C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_vstring buf", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038D68(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 134218240;
  v4 = a1;
  v5 = 2048;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "io_read_vstring: incoming string too large (%zu > %zu)", (uint8_t *)&v3, 0x16u);
  sub_100001DBC();
}

void sub_100038DE8()
{
  __assert_rtn("iobuf_fill", "io.c", 1228, "buf->size != 0");
}

void sub_100038E10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "unexpected eof", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038E3C()
{
  __assert_rtn("iobuf_fill", "io.c", 1293, "read <= sess->mplex_read_remain");
}

void sub_100038E64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "read", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038E90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "unexpected end of file", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100038EBC()
{
  __assert_rtn("iobuf_peek_buf", "io.c", 1316, "valsz <= buf->resid");
}

void sub_100038EE4(os_log_t log)
{
  int v1;
  const char *v2;

  v1 = 136315138;
  v2 = "iobuf_read_size";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: negative value", (uint8_t *)&v1, 0xCu);
  sub_100001DBC();
}

void sub_100038F60(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001D88((void *)&_mh_execute_header, a1, a3, "Insufficient buffer for width format", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_100038F90(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001D88((void *)&_mh_execute_header, a1, a3, "missing format character", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_100038FC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001D88((void *)&_mh_execute_header, a1, a3, "malloc", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_100038FF0()
{
  err(22, 0);
}

void sub_100039004()
{
  __assert_rtn("rsync_getopt", "main.c", 1479, "opts.ipf == 0 || opts.ipf == 4 || opts.ipf == 6");
}

void sub_10003902C(uint64_t a1)
{
  sub_100021AC8(a1, "options --append and --whole-file cannot be combined");
}

void sub_100039040(uint64_t a1)
{
  sub_100021AE8(a1, "--write-batch and --read-batch are incompatible");
}

void sub_100039054()
{
  __assert_rtn("rsync_getopt", "main.c", 1625, "ret == 0");
}

void sub_10003907C()
{
  __assert_rtn("rsync_getopt", "main.c", 1622, "ret == 0");
}

void sub_1000390A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "Cannot use --dirs and --no-dirs at the same time", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000390D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "Cannot use --relative and --no-relative at the same time", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000390FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "strdup filesfrom no host", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039128()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "malloc hostspec", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039154()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "malloc path", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039180()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "malloc hostspec path", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000391AC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 136315138;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Missing path in --files-from: %s", (uint8_t *)&v2, 0xCu);
}

void sub_100039220()
{
  sub_100021AD0();
}

void sub_10003922C(uint64_t a1)
{
  sub_100021AC8(a1, "option --partial-dir conflicts with --inplace");
}

void sub_100039240(uint64_t a1)
{
  sub_100021AC8(a1, "--block-size=%s: invalid numeric value");
}

void sub_100039268(uint64_t a1)
{
  sub_100021AC8(a1, "--block-size=%s: must be no less than 0");
}

void sub_100039290()
{
  __assert_rtn("rsync_getopt", "main.c", 1026, "ret == 0");
}

void sub_1000392B8(uint64_t a1)
{
  sub_100021AC8(a1, "syntax error in filter: %s");
}

void sub_1000392E0(uint64_t a1)
{
  sub_100021AC8(a1, "timeout is %s: %s");
}

void sub_100039308(uint64_t a1)
{
  sub_100021AC8(a1, "syntax error in exclude: %s");
}

void sub_100039330(uint64_t a1)
{
  sub_100021AC8(a1, "syntax error in include: %s");
}

void sub_100039358(uint64_t a1, int a2)
{
  char *v2;

  v2 = sub_100021ADC(a1, a2);
  sub_100021AC8((uint64_t)v2, "option --%s conflicts with %s");
}

void sub_10003938C(uint64_t a1)
{
  sub_100021AC8(a1, "too many --%s directories specified");
}

void sub_1000393BC(uint64_t a1)
{
  sub_100021AC8(a1, "may only specify one --delete-* option");
}

void sub_1000393D0(uint64_t a1)
{
  sub_100021AE8(a1, "bad max-size");
}

void sub_1000393E4(uint64_t a1)
{
  sub_100021AE8(a1, "bad min-size");
}

void sub_1000393F8(uint64_t a1)
{
  sub_100021AE8(a1, "bad bwlimit");
}

void sub_10003940C(uint64_t a1)
{
  sub_100021AC8(a1, "--checksum-seed=%s: must be no less than %d");
}

void sub_100039438(uint64_t a1)
{
  sub_100021AC8(a1, "--checksum-seed=%s: must be no greater than %d");
}

void sub_100039464(uint64_t a1)
{
  sub_100021AC8(a1, "--checksum-seed=%s: invalid numeric value");
}

void sub_10003948C(uint64_t a1)
{
  sub_100021AC8(a1, "--protocol=%s: out of range, min: %d, max: %d");
}

void sub_1000394C0(uint64_t a1)
{
  sub_100021AC8(a1, "--protocol=%s: invalid value");
}

void sub_1000394E8(uint64_t a1)
{
  sub_100021AC8(a1, "--compress-level=%s: must be no less than %d");
}

void sub_100039514(uint64_t a1)
{
  sub_100021AC8(a1, "--compress-level=%s: must be no greater than %d");
}

void sub_100039540(uint64_t a1)
{
  sub_100021AC8(a1, "--compress-level=%s: invalid numeric value");
}

void sub_100039568(uint64_t a1)
{
  sub_100021AC8(a1, "--max-delete=%s: invalid numeric value");
}

void sub_100039590()
{
  err(22, "addargs: argument too long");
}

void sub_1000395A8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: fstat", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_10003960C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: strict mode violation (root process, file not owned by root)", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_100039670(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: strict mode violation (other permission bits set)", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_1000396D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001D88((void *)&_mh_execute_header, a1, a3, "asprintf", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_100039704()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: futimens", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100039764()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: fchmodat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000397C4(uint64_t a1, NSObject *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;

  v4 = *__error();
  v5 = 136315394;
  v6 = a1;
  v7 = 1024;
  v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: fchmodat (1) %d", (uint8_t *)&v5, 0x12u);
}

void sub_100039860()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: fchownat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_1000398C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: utimensat (2)", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_100039920()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_recv", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003994C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "reallocarray receiver", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039978()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_gen_dels", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000399A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_del", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000399D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "upload_alloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_1000399FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "download_alloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039A28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "rsync_downloader", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039A54()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "rsync_uploader_tail", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039A80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "sess_stats_recv", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039AAC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_gen_dels", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039AD8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "upload_del", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039B04()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "rsync_uploader", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039B30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "poll: hangup", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039B5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "write files-from remote file terminator", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039B88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "write files-from remote file", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039BB4(uint64_t a1)
{
  sub_10002683C(a1, "strndup");
}

void sub_100039BC8(uint64_t a1)
{
  sub_100026824(a1, "send rules");
}

void sub_100039BDC()
{
  err(1, "rule modifiers overflow");
}

void sub_100039BF4(uint64_t a1)
{
  sub_100026824(a1, "receive rules");
}

void sub_100039C08()
{
  errx(10, "received rule too long");
}

void sub_100039C20()
{
  errx(2, "syntax error in received rules");
}

void sub_100039C38()
{
  int *v0;

  v0 = __error();
  *v0 = 63;
  sub_10002682C((uint64_t)v0, "strlcpy");
}

void sub_100039C58()
{
  int *v0;

  v0 = __error();
  *v0 = 63;
  sub_10002682C((uint64_t)v0, "strlcat");
}

void sub_100039C78()
{
  __assert_rtn("rule_iter", "rules.c", 1380, "ret != RULE_ITER_SKIP");
}

void sub_100039CA0(uint64_t a1)
{
  sub_10002682C(a1, "stat");
}

void sub_100039CB4(uint64_t a1)
{
  sub_10002683C(a1, "calloc");
}

void sub_100039CC8(uint64_t a1)
{
  sub_10002683C(a1, "strdup");
}

void sub_100039CDC()
{
  __assert_rtn("rule_dir_pop", "rules.c", 1486, "strcmp(mrule->path, path) != 0");
}

void sub_100039D04()
{
  __assert_rtn("ruleset_free", "rules.c", 541, "ruleset->numdrules == 0");
}

void sub_100039D2C()
{
  __assert_rtn("ruleset_free", "rules.c", 526, "ruleset->numdrules > 0");
}

void sub_100039D54()
{
  __assert_rtn("ruleset_free", "rules.c", 527, "ruleset->parent_set->numdrules > 0");
}

void sub_100039D7C()
{
  __assert_rtn("ruleset_remove_merge", "rules.c", 510, "rs->numdrules != 0");
}

void sub_100039DA4()
{
  __assert_rtn("ruleset_free", "rules.c", 533, "TAILQ_EMPTY(&r->merge_rule_chain)");
}

void sub_100039DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100026834("rule_matched", "rules.c", a3, "ret != 0");
}

void sub_100039DF0()
{
  int *v0;

  v0 = __error();
  *v0 = 63;
  sub_10002682C((uint64_t)v0, "%s");
}

void sub_100039E20()
{
  int *v0;

  v0 = __error();
  *v0 = 63;
  sub_10002682C((uint64_t)v0, "%s");
}

void sub_100039E50()
{
  __assert_rtn("rule_iter_impl", "rules.c", 1353, "ract == RULE_ITER_HALT");
}

void sub_100039E78()
{
  __assert_rtn("rule_iter_impl", "rules.c", 1348, "ract != RULE_ITER_SKIP");
}

void sub_100039EA0()
{
  __assert_rtn("rule_iter_impl", "rules.c", 1341, "ract == RULE_ITER_HALT");
}

void sub_100039EC8()
{
  __assert_rtn("rule_cleared", "rules.c", 1246, "r >= ruleset->rules && r < ruleset->rules + ruleset->numrules");
}

void sub_100039EF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_lowbuffer_alloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039F1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_gen", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039F48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "flist_send", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039F74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "iobuf_alloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039FA0()
{
  __assert_rtn("rsync_sender", "sender.c", 1162, "pfd[0].fd != -1");
}

void sub_100039FC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "send_dl_enqueue", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_100039FF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_check", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A020()
{
  __assert_rtn("rsync_sender", "sender.c", 1399, "wbufsz - wbufpos");
}

void sub_10003A048()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "write", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A074()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_data_written", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A0A0()
{
  __assert_rtn("rsync_sender", "sender.c", 1458, "wbufpos == 0 && wbufsz == 0");
}

void sub_10003A0C8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "send_up_fsm", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A0F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "sess_stats_end", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A120()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "sender_finalize", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A14C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "phases complete with files still queued", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A178()
{
  __assert_rtn("rsync_sender", "sender.c", 1488, "wbufsz == 0 && wbufpos == 0");
}

void sub_10003A1A0()
{
  __assert_rtn("rsync_sender", "sender.c", 1499, "up.cur->dlstate == SDL_DONE");
}

void sub_10003A1C8()
{
  __assert_rtn("rsync_sender", "sender.c", 1487, "up.stat.mapsz == 0");
}

void sub_10003A1F0()
{
  __assert_rtn("rsync_sender", "sender.c", 1486, "up.stat.map == MAP_FAILED");
}

void sub_10003A218()
{
  __assert_rtn("rsync_sender", "sender.c", 1485, "up.stat.fd == -1");
}

void sub_10003A240()
{
  __assert_rtn("rsync_sender", "sender.c", 1484, "pfd[2].fd == -1");
}

void sub_10003A268()
{
  __assert_rtn("rsync_sender", "sender.c", 1457, "pfd[2].fd == -1");
}

void sub_10003A290()
{
  __assert_rtn("rsync_sender", "sender.c", 1398, "pfd[2].fd == -1");
}

void sub_10003A2B8()
{
  __assert_rtn("rsync_sender", "sender.c", 1355, "up.cur != NULL");
}

void sub_10003A2E0()
{
  __assert_rtn("rsync_sender", "sender.c", 1356, "up.stat.fd != -1");
}

void sub_10003A308()
{
  __assert_rtn("rsync_sender", "sender.c", 1358, "up.stat.mapsz == 0");
}

void sub_10003A330()
{
  __assert_rtn("rsync_sender", "sender.c", 1357, "up.stat.map == MAP_FAILED");
}

void sub_10003A358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "sender_get_iflags", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A384()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "blk_recv", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A3B0()
{
  __assert_rtn("rsync_sender", "sender.c", 1285, "mdl == NULL");
}

void sub_10003A3D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "iobuf_fill", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A404()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "Failed to install remove-source-files handler; exiting",
    v2,
    v3,
    v4,
    v5,
    v6);
  sub_100001D98();
}

void sub_10003A430()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: chdir", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003A490()
{
  __assert_rtn("rsync_sender", "sender.c", 1063, "!sess->opts->server");
}

void sub_10003A4B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "Only one src dir allowed with --files-from", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A4E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: unlink", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003A544()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: not removed, size or mtime changed", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003A5A4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "bad success payload size %zu", a5, a6, a7, a8, 0);
  sub_100001DBC();
}

void sub_10003A608()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "callloc", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A634()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "blocks requested for special: %s", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003A694()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "blocks requested for directory: %s", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003A6F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "blocks requested for symlink: %s", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003A754(int a1, uint64_t a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;

  v3[0] = 67109376;
  v3[1] = a1;
  v4 = 2048;
  v5 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "file index out of bounds: invalid %d out of %zu", (uint8_t *)v3, 0x12u);
  sub_100001DBC();
}

void sub_10003A7D4()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 423, "BLKSTAT_NONE == up->stat.curst");
}

void sub_10003A7FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "decompress_reinit", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003A828(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000196E4((void *)&_mh_execute_header, a2, a3, "deflate res=%d", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_10003A88C()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 243, "comp_state == COMPRESS_RUN");
}

void sub_10003A8B4()
{
  __assert_rtn("token_ff_compressed", "sender.c", 160, "sz");
}

void sub_10003A8DC()
{
  __assert_rtn("token_ff_compressed", "sender.c", 161, "up->stat.map != MAP_FAILED");
}

void sub_10003A904(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000196E4((void *)&_mh_execute_header, a2, a3, "deflate ff res=%d", a5, a6, a7, a8, 0);
  sub_100001D98();
}

void sub_10003A968()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 346, "ssz >= 4");
}

void sub_10003A990(uint64_t a1)
{
  double v1;
  uint64_t v2;
  os_log_t v3;
  const char *v4;
  uint64_t v5;
  double v6;

  v1 = sub_10002A0A8(a1, __stack_chk_guard);
  sub_10002A0E4(v1);
  sub_10002A144((void *)&_mh_execute_header, v2, v3, "%s: flushed %jd KB total, %.2f%% uploaded", v4, v5, v6);
}

void sub_10003A9F4()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 415, "up->stat.fd != -1");
}

void sub_10003AA1C()
{
  __assert_rtn("send_up_fsm_compressed", "sender.c", 446, "up->stat.fd != -1");
}

void sub_10003AA44()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  uint64_t v3;

  sub_10002A10C(__stack_chk_guard);
  sub_10002A158();
  sub_10002A130((void *)&_mh_execute_header, v0, v1, "%s: primed for %jd B total", v2, v3);
  sub_100001DBC();
}

void sub_10003AAA4()
{
  __assert_rtn("send_up_fsm", "sender.c", 601, "BLKSTAT_NONE == up->stat.curst");
}

void sub_10003AACC()
{
  __assert_rtn("send_up_fsm", "sender.c", 555, "0");
}

void sub_10003AAF4()
{
  __assert_rtn("send_up_fsm", "sender.c", 593, "up->stat.fd != -1");
}

void sub_10003AB1C()
{
  __assert_rtn("send_up_fsm", "sender.c", 624, "up->stat.fd != -1");
}

void sub_10003AB44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "read incorrect update complete ack", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003AB70(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_write_int", v3);
}

void sub_10003AB9C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "io_write_short", v3);
}

void sub_10003ABC8(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "iobuf_fill on final goodbye", v3);
}

void sub_10003ABF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "iobuf_fill on final goodbye", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003AC20()
{
  __assert_rtn("send_up_reset", "sender.c", 81, "p != NULL");
}

void sub_10003AC48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "deflateInit2", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003AC74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "fcntl_nonblock", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003ACA0()
{
  __assert_rtn("rsync_server", "server.c", 125, "sess.opts->whole_file != -1");
}

void sub_10003ACC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "must have arguments", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003ACF4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "server receiver mode requires two argument", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003AD20()
{
  __assert_rtn("rsync_server", "server.c", 212, "sess.total_deleted >= sess.opts->max_delete");
}

void sub_10003AD48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "data remains in read pipe", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003AD74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "first argument must be a standalone period", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003ADA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "fcntl: F_GETFL", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003ADCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "fcntl: F_SETFL", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003ADF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_write_ulong", v2, v3, v4, v5, v6);
  sub_100001D98();
}

double sub_10003AE24(uint64_t a1, NSObject *a2)
{
  double v2;
  double v3;
  double result;
  int v5;
  double v6;
  __int16 v7;
  double v8;

  v2 = (double)*(unint64_t *)(a1 + 112) / 1000.0;
  v3 = (double)*(unint64_t *)(a1 + 120) / 1000.0;
  v5 = 134218240;
  v6 = v2;
  v7 = 2048;
  v8 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "File list generation time: %.3f seconds, transfer time: %.3f seconds", (uint8_t *)&v5, 0x16u);
  return result;
}

void sub_10003AEC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_ulong", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003AEEC()
{
  __assert_rtn("cleanup_hold", "cleanup.c", 111, "ctx->hold >= 0");
}

void sub_10003AF14()
{
  __assert_rtn("cleanup_release", "cleanup.c", 145, "ctx->hold > 0");
}

void sub_10003AF3C()
{
  __assert_rtn("cleanup_set_child", "cleanup.c", 197, "pid >= 0");
}

void sub_10003AF64()
{
  __assert_rtn("rsync_connect", "socket.c", 792, "f->host != NULL");
}

void sub_10003AF8C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "inet_resolve", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003AFB8()
{
  __assert_rtn("rsync_connect", "socket.c", 820, "srcsz");
}

void sub_10003AFE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "inet_connect", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B00C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "socket", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B038()
{
  err(14, "fcntl");
}

void sub_10003B050()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "bind", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B07C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "cannot connect to host: %s", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_10003B0E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "poll failed", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B110()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "connect", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B13C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "inet_resolve bind", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B168(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10002E110(a1, a2, a3, a4, a5, a6, a7, a8, v14, v16, v17, v18);
  sub_10002E0F8();
  sub_10002E0D8((void *)&_mh_execute_header, v8, v9, "getaddrinfo: %s: %s", v10, v11, v12, v13, v15);
  sub_10002E0EC();
}

void sub_10003B1D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_10002E110(a1, a2, a3, a4, a5, a6, a7, a8, v14, v16, v17, v18);
  sub_10002E0F8();
  sub_10002E0D8((void *)&_mh_execute_header, v8, v9, "could not resolve hostname %s: %s", v10, v11, v12, v13, v15);
  sub_10002E0EC();
}

void sub_10003B240(NSObject *a1)
{
  uint64_t v2;
  uint8_t v3[24];

  gai_strerror(9);
  sub_100006150();
  sub_10002E0CC((void *)&_mh_execute_header, a1, v2, "could not resolve service rsync: %s", v3);
  sub_10002E0EC();
}

void sub_10003B2B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "no addresses resolved: %s", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003B318()
{
  __assert_rtn("inet_resolve", "socket.c", 537, "i < srcsz");
}

void sub_10003B340()
{
  __assert_rtn("rsync_listen", "socket.c", 878, "opts->port != NULL");
}

void sub_10003B368()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "setsockopt", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B394()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "fcntl", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B3C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "listen", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B3EC()
{
  __assert_rtn("rsync_listen", "socket.c", 944, "c > 0");
}

void sub_10003B414()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "sigaction", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B440()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "getservbyname: %s", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003B4A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "Value required for socket option '%s'", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003B500()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "setsockopt %s", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003B560()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "Unresolvable socket option '%s'", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003B5C0()
{
  __assert_rtn("rsync_socket", "socket.c", 1023, "f->host != NULL");
}

void sub_10003B5E8()
{
  __assert_rtn("rsync_socket", "socket.c", 1024, "f->module != NULL");
}

void sub_10003B610()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "io_read_line", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B63C()
{
  __assert_rtn("rsync_socket", "socket.c", 1140, "sess.opts->whole_file != -1");
}

void sub_10003B664()
{
  __assert_rtn("rsync_socket", "socket.c", 1168, "sess.total_deleted >= sess.opts->max_delete");
}

void sub_10003B68C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "batch_open", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B6B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "protocol_line", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B6E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "Malformed auth challenge", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B710()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "Failed to obtain password", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B73C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "Password hashing failed", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B768(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a1, a3, "RSYNC_PASSWORD value too large (max %zu)", a5, a6, a7, a8, 0);
  sub_100001DBC();
}

void sub_10003B7D4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: open", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_10003B840()
{
  _DWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint8_t *v3;
  NSObject *v4;

  sub_10002E11C();
  *v0 = 136315138;
  *v1 = v2;
  sub_10002E0CC((void *)&_mh_execute_header, v4, (uint64_t)v1, "Ignoring password file '%s' due to strict mode violation", v3);
}

void sub_10003B87C()
{
  _DWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint8_t *v3;
  NSObject *v4;

  sub_10002E11C();
  *v0 = 136315138;
  *v1 = v2;
  sub_10002E0CC((void *)&_mh_execute_header, v4, (uint64_t)v1, "%s: read", v3);
}

void sub_10003B8B8(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "RSYNC_PASSWORD environment variable set but not used in favor of --password-file", buf, 2u);
}

void sub_10003B8F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "rsyncd protocol error: unknown command", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B920()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100001DA0();
  sub_100001D88((void *)&_mh_execute_header, v0, v1, "line buffer overrun", v2, v3, v4, v5, v6);
  sub_100001D98();
}

void sub_10003B94C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001D88((void *)&_mh_execute_header, a1, a3, "realloc", a5, a6, a7, a8, 0);
}

void sub_10003B980()
{
  __assert_rtn("symlink_read", "symlinks.c", 60, "nsz > 0");
}

void sub_10003B9A8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: empty link", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003BA08()
{
  __assert_rtn("symlinkat_read", "symlinks.c", 99, "nsz > 0");
}

void sub_10003BA30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100006150();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: readlinkat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003BA90()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "calloc", v2);
  sub_100001D98();
}

void sub_10003BAC0()
{
  __assert_rtn("upload_next_phase", "uploader.c", 1480, "p->state == UPLOAD_FINISHED");
}

void sub_10003BAE8()
{
  __assert_rtn("upload_ack_complete", "uploader.c", 1512, "p->state != UPLOAD_WRITE");
}

void sub_10003BB10()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1753, "u->state == UPLOAD_WRITE");
}

void sub_10003BB38()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1588, "u->state != UPLOAD_FINISHED");
}

void sub_10003BB60()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1598, "u->buf != NULL");
}

void sub_10003BB88()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1599, "*fileoutfd != -1");
}

void sub_10003BBB0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "io_write_nonblocking", v2);
  sub_100001D98();
}

void sub_10003BBE0()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1600, "*fileinfd == -1");
}

void sub_10003BC08()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1653, "*fileoutfd != -1");
}

void sub_10003BC30()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1656, "u->fl[u->idx].sendidx != -1");
}

void sub_10003BC58()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "realloc", v2);
  sub_100001D98();
}

void sub_10003BC88()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "io_write_int", v2);
  sub_100001D98();
}

void sub_10003BCB8()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1735, "*fileinfd == -1");
}

void sub_10003BCE0()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1789, "blk.blksz");
}

void sub_10003BD08()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1911, "pos == u->bufsz");
}

void sub_10003BD30()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "pread", v2);
  sub_100001D98();
}

void sub_10003BD60()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1845, "*fileinfd == -1");
}

void sub_10003BD88()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_10000E574();
  sub_1000332A8((void *)&_mh_execute_header, v0, (uint64_t)v0, "%s: not mapped", v1);
  sub_100001DBC();
}

void sub_10003BE04()
{
  __assert_rtn("pre_dir", "uploader.c", 891, "p->rootfd != -1");
}

void sub_10003BE2C()
{
  __assert_rtn("pre_dir", "uploader.c", 879, "S_ISDIR(f->st.mode)");
}

void sub_10003BE54()
{
  __assert_rtn("pre_symlink", "uploader.c", 253, "p->rootfd != -1");
}

void sub_10003BE7C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "mktemplate", v3);
}

void sub_10003BEA8(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkstemplinkat", v3);
}

void sub_10003BED4(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "symlinkat", v3);
}

void sub_10003BF00(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "symlinkat_read", v3);
}

void sub_10003BF2C()
{
  __assert_rtn("pre_symlink", "uploader.c", 235, "S_ISLNK(f->st.mode)");
}

void sub_10003BF54(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "rsync_set_metadata", v3);
}

void sub_10003BF80()
{
  __assert_rtn("pre_file", "uploader.c", 1416, "pdfd == -1");
}

void sub_10003BFA8()
{
  __assert_rtn("pre_file", "uploader.c", 1419, "pdfd == -1");
}

void sub_10003BFD0()
{
  __assert_rtn("pre_file", "uploader.c", 1396, "pdfd == -1");
}

void sub_10003BFF8()
{
  __assert_rtn("pre_file", "uploader.c", 1279, "S_ISREG(f->st.mode)");
}

void sub_10003C020()
{
  __assert_rtn("pre_dev", "uploader.c", 360, "S_ISBLK(f->st.mode) || S_ISCHR(f->st.mode)");
}

void sub_10003C048()
{
  __assert_rtn("pre_dev", "uploader.c", 378, "p->rootfd != -1");
}

void sub_10003C070(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkstempnodat", v3);
}

void sub_10003C09C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "mknodat", v3);
}

void sub_10003C0C8()
{
  __assert_rtn("pre_fifo", "uploader.c", 485, "p->rootfd != -1");
}

void sub_10003C0F0(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkstempfifoat", v3);
}

void sub_10003C11C(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkfifoat", v3);
}

void sub_10003C148()
{
  __assert_rtn("pre_fifo", "uploader.c", 468, "S_ISFIFO(f->st.mode)");
}

void sub_10003C170()
{
  __assert_rtn("pre_sock", "uploader.c", 577, "p->rootfd != -1");
}

void sub_10003C198(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "mkstempsock", v3);
}

void sub_10003C1C4(_BYTE *a1, _BYTE *a2)
{
  NSObject *v2;
  uint8_t *v3;

  sub_10000E564(a1, a2);
  sub_10000E558((void *)&_mh_execute_header, v2, (uint64_t)v2, "mksock", v3);
}

void sub_10003C1F0()
{
  __assert_rtn("pre_sock", "uploader.c", 560, "S_ISSOCK(f->st.mode)");
}

void sub_10003C218()
{
  __assert_rtn("rsync_uploader", "uploader.c", 1652, "*fileinfd == -1");
}

void sub_10003C240()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: fstatat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003C2A0()
{
  __assert_rtn("post_dir", "uploader.c", 954, "S_ISDIR(f->st.mode)");
}

void sub_10003C2C8()
{
  __assert_rtn("log_dir", "uploader.c", 108, "sz > 0");
}

void sub_10003C2F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: asprintf", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003C350()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "hcreate", v2);
  sub_100001D98();
}

void sub_10003C380()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "fts_open", v2);
  sub_100001D98();
}

void sub_10003C3B0()
{
  __assert_rtn("pre_dir_delete", "uploader.c", 742, "ent->fts_statp != NULL");
}

void sub_10003C3D8()
{
  __assert_rtn("pre_dir_delete", "uploader.c", 806, "delmode == DMODE_DELAY");
}

void sub_10003C400()
{
  __assert_rtn("pre_dir_delete", "uploader.c", 785, "ent->fts_info == FTS_DP");
}

void sub_10003C428()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  sub_100001DA0();
  sub_10000E558((void *)&_mh_execute_header, v0, v1, "hsearch", v2);
  sub_100001D98();
}

void sub_10003C458()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: duplicate", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003C4B8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_1000332A8((void *)&_mh_execute_header, v0, v1, "%s: fits time modify window", v2);
  sub_100001DBC();
}

void sub_10003C51C()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;

  sub_10000E580(__stack_chk_guard);
  sub_100009F08();
  sub_10002A130((void *)&_mh_execute_header, v0, v1, "%s: skipping: up to date in %s", v2, v3);
  sub_100001DBC();
}

void sub_10003C57C()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;

  sub_10000E580(__stack_chk_guard);
  sub_100009F08();
  sub_10002A130((void *)&_mh_execute_header, v0, v1, "%s: copying: up to date in %s", v2, v3);
  sub_100001DBC();
}

void sub_10003C5DC(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *a2;
  v4 = 136315394;
  v5 = a1;
  v6 = 2080;
  v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "hard link '%s/%s'", (uint8_t *)&v4, 0x16u);
  sub_100001DBC();
}

void sub_10003C660()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;

  sub_10000E580(__stack_chk_guard);
  sub_100009F08();
  sub_10002A130((void *)&_mh_execute_header, v0, v1, "%s: hardlinking: up to date in %s", v2, v3);
  sub_100001DBC();
}

void sub_10003C6C0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10000E580(__stack_chk_guard);
  sub_10000E574();
  sub_100001DAC((void *)&_mh_execute_header, v0, v1, "%s: unlinkat", v2, v3, v4, v5, v6);
  sub_100001DBC();
}

void sub_10003C720(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: pre_file_fuzzy: opendirfd", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}

void sub_10003C784(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100001DAC((void *)&_mh_execute_header, a2, a3, "%s: pre_file_fuzzy: openat", a5, a6, a7, a8, 2u);
  sub_100001DBC();
}
