int main(int argc, const char **argv, const char **envp)
{
  id v3;

  if (qword_1000CFA68 != -1)
    swift_once(&qword_1000CFA68, sub_10002A1D4);
  sub_10002A30C();
  if (qword_1000CFA60 != -1)
    swift_once(&qword_1000CFA60, sub_100028A24);
  v3 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  objc_msgSend(v3, "run");

  exit(1);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10000610C(a1, &qword_1000CFB58, (uint64_t)&unk_1000C3358);
}

void type metadata accessor for AMSError(uint64_t a1)
{
  sub_10000610C(a1, &qword_1000CFB60, (uint64_t)&unk_1000C3380);
}

uint64_t sub_100005614(uint64_t a1, id *a2)
{
  return sub_100005F6C(a1, a2);
}

uint64_t sub_100005628(uint64_t a1, id *a2)
{
  return sub_100005EFC(a1, a2) & 1;
}

id sub_100005640()
{
  id *v0;

  return *v0;
}

uint64_t sub_100005648@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_100005650()
{
  uint64_t *v0;

  sub_1000060C8(*v0, (void (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_100005670(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_100005FD0(a1);
  *a2 = v3;
}

void sub_100005694()
{
  uint64_t *v0;

  sub_1000060C8(*v0, (void (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000056B4(uint64_t a1)
{
  uint64_t *v1;

  return sub_100005E4C(a1, *v1);
}

Swift::Int sub_1000056CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_100005E8C(a1, *v1);
}

uint64_t sub_1000056D8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
}

uint64_t sub_1000056E8(uint64_t a1)
{
  uint64_t v2;

  sub_100005B28(&qword_1000CFBB0, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F980);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100005728(uint64_t a1)
{
  uint64_t v2;

  sub_100005B28(&qword_1000CFBB0, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F980);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100005768(void *a1, uint64_t a2)
{
  uint64_t v4;

  sub_100005B28(&qword_1000CFBB0, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F980);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000057CC()
{
  void **v0;

  return sub_100006000(*v0);
}

uint64_t sub_1000057D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100005B28(&qword_1000CFBB0, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F980);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100005824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

void sub_100005880(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_1000058B0();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

uint64_t sub_1000058B8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = nullsub_1(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000058E4(uint64_t *a1, uint64_t *a2)
{
  return sub_100005DC0(*a1, *a2) & 1;
}

uint64_t sub_100005908@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100005930(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100005B28(&qword_1000CFC10, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_10009FD10);
  v3 = v2;
  sub_100005B28(&qword_1000CFC18, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_10009FCB0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1000059B4(uint64_t a1)
{
  uint64_t v2;

  sub_100005B28(&qword_1000CFB78, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F93C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000059F4(uint64_t a1)
{
  uint64_t v2;

  sub_100005B28(&qword_1000CFB78, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F93C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005A38(uint64_t a1)
{
  uint64_t v2;

  sub_100005B28(&qword_1000CFBB0, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F980);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100005A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_100005B28(&qword_1000CFBB0, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F980);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

void sub_100005AD0()
{
  sub_100005B28(&qword_1000CFB68, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F854);
}

void sub_100005AFC()
{
  sub_100005B28(&qword_1000CFB70, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F880);
}

void sub_100005B28(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100006200();
}

void sub_100005B64()
{
  sub_100005B28(&qword_1000CFB78, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F93C);
}

void sub_100005B90()
{
  sub_100005B28(&qword_1000CFB80, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F908);
}

void sub_100005BBC()
{
  sub_100005B28(&qword_1000CFB88, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F8C4);
}

void sub_100005BE8()
{
  sub_100005B28(&qword_1000CFB90, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10009FA28);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_10000610C(a1, &qword_1000CFBC0, (uint64_t)&unk_1000C33D0);
}

void sub_100005C28()
{
  sub_100005B28(&qword_1000CFB98, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10009F9EC);
}

unint64_t sub_100005C58()
{
  unint64_t result;

  result = qword_1000CFBA0;
  if (!qword_1000CFBA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000CFBA0);
  }
  return result;
}

void sub_100005C94()
{
  sub_100005B28(&qword_1000CFBA8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10009FA64);
}

void sub_100005CC0()
{
  sub_100005B28(&qword_1000CFBB0, (uint64_t (*)(uint64_t))type metadata accessor for AMSError, (uint64_t)&unk_10009F980);
}

BOOL sub_100005CEC(uint64_t *a1, uint64_t *a2)
{
  return sub_100005E40(*a1, *a2);
}

uint64_t sub_100005CF8@<X0>(_QWORD *a1@<X8>)
{
  NSString v2;
  uint64_t result;

  v2 = String._bridgeToObjectiveC()();
  result = sub_1000061E8();
  *a1 = v2;
  return result;
}

uint64_t sub_100005D3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100005B28((unint64_t *)&qword_1000CFBE0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10009FBF4);
  v3 = v2;
  sub_100005B28(&qword_1000CFBE8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10009FB48);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_100005DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease(v5);
  sub_1000061E8();
  return v9 & 1;
}

BOOL sub_100005E40(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_100005E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100005E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t sub_100005EFC(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  sub_1000061F0(a1, a2);
  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *v2 = v6;
  return v4 & 1;
}

uint64_t sub_100005F6C(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  NSString v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000061F0(a1, a2);
  v6 = 0;
  v7 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(v3, &v6);
  if (v7)
  {
    v5 = String._bridgeToObjectiveC()();
    result = sub_1000061E8();
  }
  else
  {
    v5 = 0;
  }
  *v2 = v5;
  return result;
}

void sub_100005FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v2 = v1;
  String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  sub_100006200();
}

uint64_t sub_100006000(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = NSObject.hashValue.getter();

  return v2;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_10000610C(a1, &qword_1000CFBB8, (uint64_t)&unk_1000C33A8);
}

void sub_100006044()
{
  sub_100005B28(&qword_1000CFBC8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10009FB0C);
}

void sub_100006070()
{
  sub_100005B28(&qword_1000CFBD0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10009FAE0);
}

void sub_10000609C()
{
  sub_100005B28(&qword_1000CFBD8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_10009FB7C);
}

void sub_1000060C8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_1000061E8();
  sub_100006200();
}

void type metadata accessor for AMSBagKey(uint64_t a1)
{
  sub_10000610C(a1, &qword_1000CFBF0, (uint64_t)&unk_1000C33F0);
}

void sub_10000610C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void sub_100006150()
{
  sub_100005B28(&qword_1000CFBF8, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_10009FC74);
}

void sub_10000617C()
{
  sub_100005B28(&qword_1000CFC00, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_10009FC48);
}

void sub_1000061A8()
{
  sub_100005B28(&qword_1000CFC08, (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey, (uint64_t)&unk_10009FCE4);
}

uint64_t sub_1000061E8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_1000061F0(uint64_t a1, id *a2)
{

}

uint64_t sub_100006208()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = sub_100009094(v0);
  if (!v1)
  {
    v5 = 0u;
    v6 = 0u;
    goto LABEL_6;
  }
  v2 = v1;
  sub_1000754DC(0xD00000000000001ALL, 0x80000001000A5E50, v1, &v5);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v6 + 1))
  {
LABEL_6:
    sub_10000A47C((uint64_t)&v5, (uint64_t *)&unk_1000CFF70);
    return 3157555;
  }
  if (swift_dynamicCast(&v4, &v5, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v4;
  return 3157555;
}

void sub_1000062DC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(__int128 *, _QWORD);
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _UNKNOWN **v42;
  _QWORD v43[3];
  ValueMetadata *v44;
  _UNKNOWN **v45;
  uint64_t v46;
  uint64_t v47;

  sub_10000A758();
  v46 = v2;
  v47 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  sub_10000738C(&qword_1000CFDC8);
  sub_10000A680();
  __chkstk_darwin(v14);
  v15 = sub_10000A770();
  v16 = ((uint64_t (*)(uint64_t))type metadata accessor for JSONDecoder.DateDecodingStrategy)(v15);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_10000A7E4();
  *(_BYTE *)(v13 + 48) = v7;
  sub_100009D1C((uint64_t)v5, v13 + 56);
  sub_100009D5C(v11, (uint64_t)&v40, &qword_1000CFDD0);
  if (v41)
  {
    sub_100009DDC(&v40, (uint64_t)v43);
    sub_10000A80C();
  }
  else
  {
    sub_10000A47C((uint64_t)&v40, &qword_1000CFDD0);
    v18 = String._bridgeToObjectiveC()();
    v19 = ((uint64_t (*)(void))MGGetBoolAnswer)();

    v39 = v11;
    if ((v19 & 1) != 0)
    {
      type metadata accessor for BagProvider();
      type metadata accessor for ContainerConstants(0);
      static ContainerConstants.tempoUrlUserDefaultKey.getter();
      v21 = v20;
      sub_100024988();
      v23 = v22;
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v23);
      v38 = v23 != 0;
    }
    else
    {
      v38 = 0;
    }
    v24 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "defaultSessionConfiguration");
    v25 = objc_msgSend(objc_allocWithZone((Class)AMSURLSession), "initWithConfiguration:", v24);

    if (qword_1000CFB10 != -1)
      swift_once(&qword_1000CFB10, sub_1000947D0);
    v26 = qword_1000DDB78;
    v41 = type metadata accessor for SportsPerformanceMeasurement(0);
    v42 = &off_1000C98C8;
    *(_QWORD *)&v40 = v26;
    swift_retain(v26);
    v27 = sub_100043DEC();
    v29 = v28;
    v44 = &type metadata for ApiAgent;
    v45 = &off_1000C5168;
    v43[0] = sub_10000A748((uint64_t)&unk_1000C3788, 112);
    sub_1000219E0(v25, (uint64_t)&v40, v38, v27, v29, (_QWORD *)(v43[0] + 16));

    swift_bridgeObjectRelease(v29);
    sub_100007618(&v40);
    sub_10000A80C();
    v11 = v39;
  }
  v30 = type metadata accessor for JSONDecoder(0);
  sub_10000A85C(v30);
  v31 = ((uint64_t (*)(void))JSONDecoder.init())();
  *v1 = sub_10002FE34;
  v1[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v1, enum case for JSONDecoder.DateDecodingStrategy.custom(_:), v16);
  ((void (*)(_QWORD *))dispatch thunk of JSONDecoder.dateDecodingStrategy.setter)(v1);
  v32 = v9;
  if (!v9)
  {
    swift_retain(v31);
    v32 = v31;
  }
  *(_QWORD *)(v13 + 40) = v32;
  swift_retain(v9);
  v33 = swift_retain(v32);
  ((void (*)(uint64_t))static SportsJSONContext.Property<A>.initFailureObserver.getter)(v33);
  v34 = ((uint64_t (*)(_QWORD))type metadata accessor for DefaultSportsJSONInitFailureObserver)(0);
  sub_10000A85C(v34);
  v35 = ((uint64_t (*)(void))DefaultSportsJSONInitFailureObserver.init())();
  v44 = (ValueMetadata *)v34;
  v45 = (_UNKNOWN **)&protocol witness table for DefaultSportsJSONInitFailureObserver;
  v43[0] = v35;
  v36 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *))dispatch thunk of JSONDecoder.userInfo.modify)(&v40);
  v37 = sub_10000738C(&qword_1000CFDD8);
  ((void (*)(_QWORD *, uint64_t, uint64_t))Dictionary<>.subscript.setter)(v43, v0, v37);
  v36(&v40, 0);
  swift_release(v31);
  swift_release(v32);
  swift_release(v9);
  sub_100007618(v5);
  sub_10000A47C(v11, &qword_1000CFDD0);
}

void sub_100006660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[12];
  uint64_t v60;

  sub_10000A758();
  v55 = v24;
  v56 = v23;
  v51 = v25;
  v52 = v26;
  v53 = v27;
  v54 = v28;
  v50 = v29;
  v49 = v30;
  v31 = sub_10000738C(&qword_1000CFDE0);
  v57 = *(_QWORD *)(v31 - 8);
  sub_10000A680();
  __chkstk_darwin(v32);
  sub_10000A6E4();
  v33 = sub_10000738C(&qword_1000CFDE8);
  v58 = *(_QWORD *)(v33 - 8);
  sub_10000A680();
  __chkstk_darwin(v34);
  sub_10000A6FC();
  v59[0] = *(_QWORD *)(*sub_1000073CC((_QWORD *)(v21 + 56), *(_QWORD *)(v21 + 80)) + 24);
  v60 = *(_QWORD *)(*sub_1000073CC((_QWORD *)(v21 + 56), *(_QWORD *)(v21 + 80)) + 48);
  swift_retain(v59[0]);
  swift_retain(v60);
  v35 = sub_10000738C(&qword_1000CFCF0);
  v36 = sub_10000738C(&qword_1000CFDF0);
  sub_10000A7CC(&qword_1000CFD00, &qword_1000CFCF0);
  v38 = v37;
  sub_10000A7CC(&qword_1000CFDF8, &qword_1000CFDF0);
  Publishers.Zip.init(_:_:)(v59, &v60, v35, v36, v38, v39);
  sub_1000075A4(v21, (uint64_t)v59);
  v40 = sub_10000A748((uint64_t)&unk_1000C3878, 176);
  *(_QWORD *)(v40 + 16) = v51;
  *(_QWORD *)(v40 + 24) = v52;
  *(_QWORD *)(v40 + 32) = v49;
  *(_QWORD *)(v40 + 40) = v50;
  *(_QWORD *)(v40 + 48) = v53;
  *(_QWORD *)(v40 + 56) = v54;
  *(_BYTE *)(v40 + 64) = v55;
  *(_BYTE *)(v40 + 65) = v56;
  memcpy((void *)(v40 + 72), v59, 0x60uLL);
  *(_QWORD *)(v40 + 168) = a21;
  v41 = sub_10000A748((uint64_t)&unk_1000C38A0, 32);
  *(_QWORD *)(v41 + 16) = sub_10000A228;
  *(_QWORD *)(v41 + 24) = v40;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(a21);
  sub_10000A848();
  v42 = swift_bridgeObjectRetain(v50);
  v43 = static Subscribers.Demand.unlimited.getter(v42);
  v44 = sub_10000738C(&qword_1000CFE00);
  sub_10000A40C(&qword_1000CFE08, &qword_1000CFDE0);
  v46 = v45;
  sub_10000A40C(&qword_1000CFE10, &qword_1000CFE00);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v43, sub_10000A270, v41, v31, v44, v46, v47);
  swift_release(v41);
  sub_10000A7B4(v57);
  sub_10000A40C(&qword_1000CFE18, &qword_1000CFDE8);
  Publisher.eraseToAnyPublisher()(v33, v48);
  sub_10000A798(v22, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
  sub_10000A668();
}

uint64_t sub_100006934(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, unsigned __int8 a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  char v63;
  Swift::String v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *object;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  Swift::String v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  ValueMetadata *v123;
  unint64_t v124;

  v116._countAndFlagsBits = a2;
  v116._object = a3;
  v118 = a1;
  v18 = sub_10000738C(&qword_1000CFE28);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  __chkstk_darwin(v23);
  v27 = (char *)&v104 - v26;
  v28 = HIBYTE(a5) & 0xF;
  v117 = a5;
  if ((a5 & 0x2000000000000000) == 0)
    v28 = a4 & 0xFFFFFFFFFFFFLL;
  if (!v28)
  {
    v34 = 0xD000000000000012;
    v35 = 0x80000001000A5E30;
LABEL_19:
    v121 = (uint64_t)sub_100027C78(1u, v34, v35);
    v56 = sub_10000738C(&qword_1000CFE40);
    v57 = sub_10000738C((uint64_t *)&unk_1000D1690);
    Fail.init(error:)(&v121, v56, v57, &protocol self-conformance witness table for Error);
    sub_10000A40C(&qword_1000CFE48, &qword_1000CFE28);
    v59 = Publisher.eraseToAnyPublisher()(v18, v58);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    return v59;
  }
  v29 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v29 = a6 & 0xFFFFFFFFFFFFLL;
  if (!v29)
  {
    v35 = 0x80000001000A5E10;
    v34 = 0xD000000000000014;
    goto LABEL_19;
  }
  v30 = a6;
  v111 = v25;
  v112 = v24;
  if (!a9)
    goto LABEL_13;
  v31 = HIBYTE(a9) & 0xF;
  if ((a9 & 0x2000000000000000) == 0)
    v31 = a8 & 0xFFFFFFFFFFFFLL;
  if (v31)
  {
    v121 = a8;
    v122 = a9;
    swift_bridgeObjectRetain(a9);
    v32._countAndFlagsBits = 58;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    v33._countAndFlagsBits = a6;
    v33._object = (void *)a7;
    String.append(_:)(v33);
    v30 = v121;
    a7 = v122;
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRetain(a7);
  }
  v36 = v118;
  v113 = a7;
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v37 = a10;
  v38 = type metadata accessor for Logger(0);
  v39 = sub_1000096EC(v38, (uint64_t)qword_1000DDAB8);
  v110 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v40 = v110(v27, v36, v119);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.debug.getter(v41);
  v43 = os_log_type_enabled(v41, v42);
  v114 = v22;
  v115 = a4;
  if (v43)
  {
    v44 = swift_slowAlloc(12, -1);
    v108 = v39;
    v45 = (uint8_t *)v44;
    v46 = swift_slowAlloc(32, -1);
    v109 = v30;
    v47 = v46;
    v121 = v46;
    LODWORD(v107) = a10;
    *(_DWORD *)v45 = 136315138;
    sub_10000A378(&qword_1000CFE38, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    v48 = v119;
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v119, v49);
    v52 = v51;
    sub_100014B44(v50, v51, &v121);
    v120 = v53;
    v37 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease(v52);
    v54 = v48;
    v36 = v118;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v54);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Tempo /register base url: %s", v45, 0xCu);
    swift_arrayDestroy(v47, 1);
    v55 = v47;
    v30 = v109;
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v119);
  }

  v60 = Dictionary.init(dictionaryLiteral:)(&off_1000C2838, &type metadata for String);
  v61 = v60;
  if ((v37 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(v60);
    v121 = v61;
    sub_1000979E0();
    v109 = v121;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    v109 = v60;
  }
  v118 = a13;
  v108 = a12;
  v62 = a11;
  v123 = &type metadata for TVAppFeatureFlags;
  v124 = sub_10000A278();
  v63 = isFeatureEnabled(_:)(&v121);
  sub_100007618(&v121);
  if ((v63 & 1) != 0)
  {
    v121 = 791901743;
    v122 = 0xE400000000000000;
    String.append(_:)(v116);
    v64._object = (void *)0xE900000000000072;
    v64._countAndFlagsBits = 0x657473696765722FLL;
    String.append(_:)(v64);
    v66 = v121;
    v65 = (void *)v122;
  }
  else
  {
    v65 = (void *)0xEC00000072657473;
    v66 = 0x696765722F33762FLL;
  }
  v67 = swift_bridgeObjectRetain_n(v65, 2);
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.debug.getter(v68);
  v70 = os_log_type_enabled(v68, v69);
  v116._countAndFlagsBits = v66;
  v116._object = v65;
  if (v70)
  {
    v71 = swift_slowAlloc(12, -1);
    LODWORD(v107) = a11;
    v72 = (uint8_t *)v71;
    v73 = v30;
    v74 = v36;
    v75 = swift_slowAlloc(32, -1);
    v121 = v75;
    *(_DWORD *)v72 = 136315138;
    swift_bridgeObjectRetain(v65);
    sub_100014B44(v66, (unint64_t)v65, &v121);
    v120 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v72 + 4, v72 + 12);
    swift_bridgeObjectRelease_n(v65, 3);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Tempo /register path: %s", v72, 0xCu);
    swift_arrayDestroy(v75, 1);
    v77 = v75;
    v36 = v74;
    v30 = v73;
    swift_slowDealloc(v77, -1, -1);
    v78 = v72;
    v62 = v107;
    swift_slowDealloc(v78, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v65, 2);
  }
  v79 = v113;
  v80 = v114;
  v81 = v112;
  v82 = v36;
  v83 = v119;
  v110(v112, v82, v119);
  v106 = sub_100006208();
  v105 = v84;
  v110 = (uint64_t (*)(char *, uint64_t, uint64_t))sub_1000685E4(v62);
  v107 = v85;
  v86 = sub_10000738C(&qword_1000CFE30);
  v87 = swift_allocObject(v86, 48, 7);
  *(_OWORD *)(v87 + 16) = xmmword_10009FDB0;
  *(_QWORD *)(v87 + 32) = v30;
  *(_QWORD *)(v87 + 40) = v79;
  v88 = (_QWORD *)v108;
  LODWORD(v113) = *(unsigned __int8 *)(v108 + 48);
  v89 = v117;
  swift_bridgeObjectRetain(v117);
  v104 = sub_1000680F4();
  v90 = *(unsigned __int8 *)(v80 + 80);
  v91 = (v90 + 32) & ~v90;
  v92 = v91 + v111;
  v93 = (v91 + v111) & 0xFFFFFFFFFFFFFFF8;
  v94 = swift_allocObject(&unk_1000C38C8, v93 + 121, v90 | 7);
  v95 = v93 + v94;
  object = v116._object;
  *(_QWORD *)(v94 + 16) = v116._countAndFlagsBits;
  *(_QWORD *)(v94 + 24) = object;
  (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v94 + v91, v81, v83);
  *(_BYTE *)(v94 + v92) = 1;
  v97 = v105;
  *(_QWORD *)(v95 + 8) = v106;
  *(_QWORD *)(v95 + 16) = v97;
  *(_QWORD *)(v95 + 24) = 0x302E302E31;
  *(_QWORD *)(v95 + 32) = 0xE500000000000000;
  *(_QWORD *)(v95 + 40) = v115;
  *(_QWORD *)(v95 + 48) = v89;
  *(_QWORD *)(v95 + 56) = 0x544E455645;
  *(_QWORD *)(v95 + 64) = 0xE500000000000000;
  v98 = v107;
  *(_QWORD *)(v95 + 72) = v110;
  *(_QWORD *)(v95 + 80) = v98;
  v99 = v109;
  *(_QWORD *)(v95 + 88) = v87;
  *(_QWORD *)(v95 + 96) = v99;
  *(_BYTE *)(v95 + 104) = 1;
  *(_QWORD *)(v95 + 112) = v104;
  *(_BYTE *)(v95 + 120) = v113;
  v100 = sub_1000073CC(v88, v88[3]);
  v101 = v88[5];
  v102 = v118;
  swift_bridgeObjectRetain(v118);
  v59 = sub_100009190((uint64_t)sub_10000A33C, v94, v102, 0, v101, (uint64_t)v100);
  swift_bridgeObjectRelease(v102);
  swift_release(v94);
  return v59;
}

uint64_t sub_10000713C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_10000738C(&qword_1000CFE20);
  result = a2(a1, *(_QWORD *)(a1 + *(int *)(v6 + 48)), *(_QWORD *)(a1 + *(int *)(v6 + 48) + 8));
  *a3 = result;
  return result;
}

void sub_100007190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[13];

  sub_10000A758();
  v2 = v0;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v21 = sub_10000738C(&qword_1000CFCE0);
  v22 = *(_QWORD *)(v21 - 8);
  sub_10000A680();
  __chkstk_darwin(v9);
  sub_10000A6E4();
  sub_10000738C(&qword_1000CFCE8);
  sub_10000A680();
  __chkstk_darwin(v10);
  sub_10000A6FC();
  v11 = *(_QWORD *)(*sub_1000073CC((_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 80)) + 24);
  v23[12] = v11;
  sub_1000075A4(v2, (uint64_t)v23);
  v12 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C35D0, 136);
  v12[2] = v8;
  v12[3] = v6;
  sub_10000A78C(v12 + 4);
  v12[16] = v4;
  swift_retain(v11);
  sub_10000A848();
  v13 = sub_10000A834();
  v14 = static Subscribers.Demand.unlimited.getter(v13);
  v15 = sub_10000A82C();
  v16 = sub_10000738C(&qword_1000CFCF8);
  sub_10000A40C(&qword_1000CFD00, &qword_1000CFCF0);
  v18 = v17;
  sub_10000A40C(&qword_1000CFD08, &qword_1000CFCF8);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v14, sub_100007638, v12, v15, v16, v18, v19);
  swift_release(v12);
  sub_10000A824();
  sub_10000A40C(&qword_1000CFD10, &qword_1000CFCE0);
  Publisher.map<A>(_:)(sub_10000768C, 0, v21, &type metadata for Bool);
  sub_10000A798(v1, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  sub_10000A40C(&qword_1000CFD18, &qword_1000CFCE8);
  sub_10000A7A0(v20);
  sub_10000A730();
  sub_10000A668();
}

uint64_t sub_10000738C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *sub_1000073CC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000073F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;

  v30 = a5;
  v31 = a6;
  v28 = (_QWORD *)a4;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v13);
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v32 = 0x65726E752F33762FLL;
  v33 = 0xEF2F726574736967;
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  v17 = v32;
  v16 = v33;
  v29 = *(unsigned __int8 *)(a4 + 48);
  v18 = sub_1000680F4();
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = v20 + v12;
  v22 = swift_allocObject(&unk_1000C35F8, (v21 & 0xFFFFFFFFFFFFFFF8) + 17, v19 | 7);
  v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + v22;
  *(_QWORD *)(v22 + 16) = v17;
  *(_QWORD *)(v22 + 24) = v16;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v22 + v20, v14, v10);
  *(_BYTE *)(v22 + v21) = 1;
  *(_QWORD *)(v23 + 8) = v18;
  *(_BYTE *)(v23 + 16) = v29;
  v24 = sub_1000073CC(v28, v28[3]);
  v25 = v30;
  swift_bridgeObjectRetain(v30);
  v26 = sub_100009444((uint64_t)sub_100009418, v22, v25, 0, (uint64_t)v24);
  swift_bridgeObjectRelease();
  result = swift_release(v22);
  *v31 = v26;
  return result;
}

uint64_t sub_1000075A4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TempoApiAgent(a2, a1);
  return a2;
}

uint64_t sub_1000075D8()
{
  _QWORD *v0;

  sub_10000A750();
  sub_100007618(v0 + 4);
  swift_release(v0[9]);
  sub_100007618(v0 + 11);
  swift_bridgeObjectRelease(v0[16]);
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_100007618(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100007638@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1000073F0(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), v2 + 32, *(_QWORD *)(v2 + 128), a2);
}

uint64_t sub_100007648(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

int *sub_10000768C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = (int *)sub_10000738C(&qword_1000CFD20);
  v5 = *(_QWORD *)(a1 + result[8]);
  if (v5
    && (v6 = objc_opt_self(NSHTTPURLResponse), (result = (int *)swift_dynamicCastObjCClass(v5, v6)) != 0))
  {
    result = (int *)objc_msgSend(result, "statusCode");
    v7 = (unint64_t)(result - 50) < 0x64;
  }
  else
  {
    v7 = 1;
  }
  *a2 = v7;
  return result;
}

void sub_100007704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[13];

  sub_10000A758();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v25 = sub_10000738C(&qword_1000CFCE0);
  v26 = *(_QWORD *)(v25 - 8);
  sub_10000A680();
  __chkstk_darwin(v12);
  sub_10000A6E4();
  sub_10000738C(&qword_1000CFD60);
  sub_10000A680();
  __chkstk_darwin(v13);
  sub_10000A6FC();
  v14 = *(_QWORD *)(*sub_1000073CC((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80)) + 24);
  v27[12] = v14;
  sub_1000075A4(v1, (uint64_t)v27);
  v15 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C3670, 152);
  v15[2] = v11;
  v15[3] = v9;
  v15[4] = v7;
  v15[5] = v5;
  sub_10000A78C(v15 + 6);
  v15[18] = v3;
  swift_retain(v14);
  swift_bridgeObjectRetain(v9);
  sub_10000A848();
  v16 = sub_10000A834();
  v17 = static Subscribers.Demand.unlimited.getter(v16);
  v18 = sub_10000A82C();
  v19 = sub_10000738C(&qword_1000CFCF8);
  sub_10000A40C(&qword_1000CFD00, &qword_1000CFCF0);
  v21 = v20;
  sub_10000A40C(&qword_1000CFD08, &qword_1000CFCF8);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v17, sub_10000974C, v15, v18, v19, v21, v22);
  swift_release(v15);
  sub_10000A824();
  v23 = sub_10000738C(&qword_1000CFD68);
  sub_10000A40C(&qword_1000CFD10, &qword_1000CFCE0);
  Publisher.map<A>(_:)(sub_100007AEC, 0, v25, v23);
  sub_10000A7B4(v26);
  sub_10000A40C(&qword_1000CFD70, &qword_1000CFD60);
  sub_10000A7A0(v24);
  sub_10000A730();
  sub_10000A668();
}

uint64_t sub_100007918@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  char *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;

  v36 = a7;
  v37 = a8;
  v34 = (_QWORD *)a6;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v18 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v18, a1, v14, v17);
  v38 = 0;
  v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v39);
  v38 = 0x65726E752F33762FLL;
  v39 = 0xEF2F726574736967;
  v19._countAndFlagsBits = a2;
  v19._object = a3;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 47;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = a4;
  v21._object = a5;
  String.append(_:)(v21);
  v22 = v38;
  v23 = v39;
  v35 = *(unsigned __int8 *)(a6 + 48);
  v24 = sub_1000680F4();
  v25 = *(unsigned __int8 *)(v15 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = v26 + v16;
  v28 = swift_allocObject(&unk_1000C3698, (v27 & 0xFFFFFFFFFFFFFFF8) + 17, v25 | 7);
  v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + v28;
  *(_QWORD *)(v28 + 16) = v22;
  *(_QWORD *)(v28 + 24) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v28 + v26, v18, v14);
  *(_BYTE *)(v28 + v27) = 1;
  *(_QWORD *)(v29 + 8) = v24;
  *(_BYTE *)(v29 + 16) = v35;
  v30 = sub_1000073CC(v34, v34[3]);
  v31 = v36;
  swift_bridgeObjectRetain(v36);
  v32 = sub_100009444((uint64_t)sub_1000097FC, v28, v31, 0, (uint64_t)v30);
  swift_bridgeObjectRelease(v31);
  result = swift_release(v28);
  *v37 = v32;
  return result;
}

id sub_100007AEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  void *v20;

  v4 = type metadata accessor for URLRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000738C(&qword_1000D1660);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000738C(&qword_1000CFD20);
  v20 = *(void **)(a1 + *(int *)(v11 + 32));
  if (v20
    && (v12 = objc_opt_self(NSHTTPURLResponse), (v13 = (void *)swift_dynamicCastObjCClass(v20, v12)) != 0))
  {
    v14 = (char *)objc_msgSend(v13, "statusCode");
    sub_100009D5C(a1, (uint64_t)v10, &qword_1000D1660);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + *(int *)(v11 + 28), v4);
    v15 = (int *)sub_10000738C(&qword_1000CFD68);
    *(_BYTE *)(a2 + v15[10]) = (unint64_t)(v14 - 200) < 0x64;
    sub_100009760((uint64_t)v10, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + v15[7], v7, v4);
  }
  else
  {
    sub_100009D5C(a1, a2, &qword_1000D1660);
    v16 = a1 + *(int *)(v11 + 28);
    v15 = (int *)sub_10000738C(&qword_1000CFD68);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2 + v15[7], v16, v4);
    *(_BYTE *)(a2 + v15[10]) = 1;
  }
  v17 = v20;
  *(_QWORD *)(a2 + v15[8]) = v20;
  *(_OWORD *)(a2 + v15[9]) = xmmword_10009FDC0;
  return v17;
}

void sub_100007CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[13];

  sub_10000A758();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = sub_10000738C(&qword_1000CFD80);
  v23 = *(_QWORD *)(v8 - 8);
  sub_10000A680();
  __chkstk_darwin(v9);
  sub_10000A7D4();
  v12 = v11 - v10;
  v13 = *(_QWORD *)(*sub_1000073CC((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80)) + 24);
  v24[12] = v13;
  sub_1000075A4(v1, (uint64_t)v24);
  v14 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C36C0, 136);
  v14[2] = v7;
  v14[3] = v5;
  v14[4] = v3;
  sub_10000A78C(v14 + 5);
  swift_bridgeObjectRetain(v5);
  sub_10000A834();
  v15 = swift_retain(v13);
  v16 = static Subscribers.Demand.unlimited.getter(v15);
  v17 = sub_10000A82C();
  v18 = sub_10000738C(&qword_1000CFD88);
  sub_10000A7CC(&qword_1000CFD00, &qword_1000CFCF0);
  v20 = v19;
  sub_10000A7CC(&qword_1000CFD90, &qword_1000CFD88);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v16, sub_100009904, v14, v17, v18, v20, v21);
  swift_release(v14);
  sub_10000A824();
  sub_10000A40C(&qword_1000CFD98, &qword_1000CFD80);
  Publisher.eraseToAnyPublisher()(v8, v22);
  sub_10000A798(v12, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  sub_10000A668();
}

uint64_t sub_100007E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  void *v14;
  Swift::String v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;

  v33 = a5;
  v34 = a4;
  v35 = a6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v13, a1, v9, v12);
  v14 = (void *)0xE000000000000000;
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v37);
  v36 = 0xD000000000000018;
  v37 = 0x80000001000A5DD0;
  if (a3)
    v14 = a3;
  else
    a2 = 0;
  swift_bridgeObjectRetain(a3);
  v15._countAndFlagsBits = a2;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16 = v36;
  v17 = v37;
  v32 = sub_1000680F4();
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v11 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 39) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_1000C36E8, v21 + 8, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22 + v19, v13, v9);
  v23 = (unint64_t *)(v22 + v20);
  *v23 = v16;
  v23[1] = v17;
  v24 = v22 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 0;
  v25 = v33;
  *(_QWORD *)(v22 + v21) = v32;
  v26 = v25;
  v27 = sub_1000073CC(v25, v25[3]);
  v28 = v26[5];
  v29 = v34;
  swift_bridgeObjectRetain(v34);
  v30 = sub_100009A24((uint64_t)sub_1000099B0, v22, v29, 0, v28, (uint64_t)v27);
  swift_bridgeObjectRelease(v29);
  result = swift_release(v22);
  *v35 = v30;
  return result;
}

uint64_t sub_100008040(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000A4B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008068(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000A4B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100008090(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a2);
  return 1;
}

uint64_t sub_1000080AC()
{
  return 1;
}

uint64_t sub_1000080B4()
{
  return 0;
}

uint64_t sub_1000080C0()
{
  return 0;
}

uint64_t sub_1000080CC(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = sub_10000738C(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10000A7D4();
  v11 = v10 - v9;
  v12 = a1[3];
  v13 = a1[4];
  sub_1000073CC(a1, v12);
  v14 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_100008194(_QWORD *a1)
{
  return sub_1000080CC(a1, &qword_1000CFE78, (uint64_t (*)(void))sub_10000A4B4, (uint64_t)&_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0);
}

uint64_t sub_1000081C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100008090(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000081E8()
{
  return sub_1000080B4();
}

uint64_t sub_100008200@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000080AC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100008228(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000A4F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008250(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000A4F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100008278(_QWORD *a1)
{
  return sub_1000080CC(a1, &qword_1000CFE88, (uint64_t (*)(void))sub_10000A4F0, (uint64_t)&type metadata for TempoApiAgent.EmptyBody.CodingKeys);
}

char *sub_1000082A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const void *a5, uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSURL *v30;
  void *v31;
  void *v32;
  id v33;
  unint64_t v34;
  id v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unint64_t v45;
  Class isa;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  NSString v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE __dst[112];

  v59 = a7;
  v58 = a6;
  v61 = a4;
  v63 = a3;
  v64 = a1;
  v65 = a2;
  v8 = type metadata accessor for URLError.Code(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URLError(0);
  v60 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  __chkstk_darwin(v14);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v57 - v18;
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(__dst, a5, 0x61uLL);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v16, v63, v20);
  sub_10000964C((uint64_t)v16, 0, 1, v20);
  URL.init(string:relativeTo:)(v64, v65, v16);
  sub_10000A47C((uint64_t)v16, (uint64_t *)&unk_1000D16E0);
  if (sub_100009658((uint64_t)v19, 1, v20) == 1)
  {
    sub_10000A47C((uint64_t)v19, (uint64_t *)&unk_1000D16E0);
    static URLError.Code.badURL.getter(v24);
    v25 = sub_100022820((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A378((unint64_t *)&qword_1000CFD50, (uint64_t (*)(uint64_t))&type metadata accessor for URLError);
    v27 = _BridgedStoredNSError.init(_:userInfo:)(v10, v25, v11, v26);
    URLError._nsError.getter(v27);
    v28 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v13, v11);
    swift_willThrow(v28);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
    v29 = objc_allocWithZone((Class)AMSURLRequest);
    URL._bridgeToObjectiveC()(v30);
    v32 = v31;
    v33 = objc_msgSend(v29, "initWithURL:", v31);

    objc_msgSend(v33, "setTimeoutInterval:", 10.0);
    if ((_BYTE)v61)
    {
      if (v61 == 1)
        v34 = 0xE400000000000000;
      else
        v34 = 0xE600000000000000;
    }
    else
    {
      v34 = 0xE300000000000000;
    }
    v35 = v33;
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v34);
    objc_msgSend(v35, "setHTTPMethod:", v36);

    v37 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v19 = (char *)v35;
    v38 = JSONEncoder.init()();
    v39 = sub_10000A440();
    v40 = v62;
    v41 = dispatch thunk of JSONEncoder.encode<A>(_:)(__dst, &unk_1000C7810, v39);
    if (v40)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);

      swift_release(v38);
    }
    else
    {
      v44 = v41;
      v45 = v42;
      swift_release(v38);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000096A0(v44, v45);
      objc_msgSend(v19, "setHTTPBody:", isa);

      __chkstk_darwin(v47);
      *(&v57 - 2) = (uint64_t)v19;
      sub_100021B9C(v58, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10000A64C);
      if ((v59 & 1) != 0)
      {
        v48 = objc_msgSend(v19, "HTTPBody");
        if (v48)
        {
          v49 = v48;
          v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
          v52 = v51;

          type metadata accessor for MescalSignature();
          sub_10007B3D0(v50, v52);
          v54 = v53;
          if (v53)
          {
            v55 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v54);
          }
          else
          {
            v55 = 0;
          }
          v56 = String._bridgeToObjectiveC()();
          objc_msgSend(v19, "setValue:forHTTPHeaderField:", v55, v56);

          sub_1000096A0(v50, v52);
        }
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    }
  }
  return v19;
}

id sub_1000089CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t (*a7)(void), uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSURL *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v49;
  unint64_t v50;
  Class isa;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  NSString v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(void);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a7;
  v67 = a8;
  v69 = a2;
  v63 = a6;
  v62 = a5;
  LODWORD(v65) = a4;
  type metadata accessor for URLError.Code(0);
  sub_10000A680();
  __chkstk_darwin(v13);
  v14 = sub_10000A770();
  v15 = type metadata accessor for URLError(v14);
  v64 = *(_QWORD *)(v15 - 8);
  sub_10000A680();
  __chkstk_darwin(v16);
  sub_10000A7E4();
  sub_10000738C((uint64_t *)&unk_1000D16E0);
  sub_10000A680();
  __chkstk_darwin(v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (char *)&v61 - v21;
  v23 = sub_10000A7C4();
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_10000A7D4();
  v27 = (void *)(v26 - v25);
  v28 = a3;
  v30 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v19, v28, v29);
  sub_10000964C((uint64_t)v19, 0, 1, v30);
  URL.init(string:relativeTo:)(a1, v69, v19);
  sub_10000A47C((uint64_t)v19, (uint64_t *)&unk_1000D16E0);
  if (sub_100009658((uint64_t)v22, 1, v30) == 1)
  {
    sub_10000A47C((uint64_t)v22, (uint64_t *)&unk_1000D16E0);
    static URLError.Code.badURL.getter(v31);
    v32 = sub_100022820((uint64_t)_swiftEmptyArrayStorage);
    sub_10000A378((unint64_t *)&qword_1000CFD50, (uint64_t (*)(uint64_t))&type metadata accessor for URLError);
    v34 = _BridgedStoredNSError.init(_:userInfo:)(v9, v32, v15, v33);
    URLError._nsError.getter(v34);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v10, v15);
    swift_willThrow(v35);
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v24 + 32))(v27, v22, v30);
    v36 = objc_allocWithZone((Class)AMSURLRequest);
    URL._bridgeToObjectiveC()(v37);
    v39 = v38;
    v40 = objc_msgSend(v36, "initWithURL:", v38);

    objc_msgSend(v40, "setTimeoutInterval:", 10.0);
    v41 = v40;
    String._bridgeToObjectiveC()();
    sub_10000A83C();
    objc_msgSend(v41, "setHTTPMethod:", v27);

    v42 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    v9 = v41;
    v43 = JSONEncoder.init()();
    v44 = v66();
    v45 = v68;
    v46 = dispatch thunk of JSONEncoder.encode<A>(_:)(v44, v67, v44);
    if (v45)
    {
      sub_10000A7FC();

      swift_release(v43);
    }
    else
    {
      v49 = v46;
      v50 = v47;
      swift_release(v43);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000096A0(v49, v50);
      objc_msgSend(v9, "setHTTPBody:", isa);

      __chkstk_darwin(v52);
      *(&v61 - 2) = (uint64_t)v9;
      sub_100021B9C(v62, a9);
      if ((v63 & 1) != 0)
      {
        v53 = objc_msgSend(v9, "HTTPBody");
        if (v53)
        {
          v54 = v53;
          v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v57 = v56;

          v58 = (void *)type metadata accessor for MescalSignature();
          sub_10007B3D0(v55, v57);
          v69 = v55;
          if (v59)
          {
            String._bridgeToObjectiveC()();
            sub_10000A83C();
          }
          else
          {
            v58 = 0;
          }
          v60 = String._bridgeToObjectiveC()();
          objc_msgSend(v9, "setValue:forHTTPHeaderField:", v58, v60);

          sub_1000096A0(v69, v57);
        }
      }
      sub_10000A7FC();
    }
  }
  return v9;
}

uint64_t sub_100009024(char *a1, uint64_t (*a2)(uint64_t, uint64_t, char *, _QWORD, char *))
{
  uint64_t v4;
  uint64_t v5;
  int *v6;

  v4 = *(_QWORD *)a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = (int *)sub_10000738C(&qword_1000CFD48);
  return a2(v4, v5, &a1[v6[12]], *(_QWORD *)&a1[v6[16]], &a1[v6[20]]);
}

uint64_t sub_100009094(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "infoDictionary");

  if (!v2)
    return 0;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  return v3;
}

char *sub_100009108(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *__src, uint64_t a6, int a7)
{
  _BYTE __dst[104];

  memcpy(__dst, __src, 0x61uLL);
  return sub_1000082A4(a1, a2, a3, a4, __dst, a6, a7);
}

uint64_t sub_100009190(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33[2];
  _BYTE __src[96];
  uint64_t v35;
  _QWORD v36[6];

  v12 = sub_10000738C(&qword_1000CFE50);
  v32 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[3] = &type metadata for AMSApiRequest;
  v36[4] = &off_1000C41A0;
  v15 = (_QWORD *)swift_allocObject(&unk_1000C3710, 48, 7);
  v36[0] = v15;
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10005EAC0();
  v35 = v17;
  sub_1000095FC(a6, (uint64_t)__src);
  sub_100009D1C((uint64_t)v36, (uint64_t)v33);
  v18 = swift_allocObject(&unk_1000C38F0, 160, 7);
  *(_QWORD *)(v18 + 16) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_100009DDC(v33, v18 + 120);
  v19 = swift_allocObject(&unk_1000C3918, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10000A3FC;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_retain(a5);
  v21 = static Subscribers.Demand.unlimited.getter(v20);
  v22 = sub_10000738C(&qword_1000CFD30);
  v23 = sub_10000738C(&qword_1000CFE40);
  v24 = sub_10000738C(&qword_1000CFE58);
  sub_10000A40C(&qword_1000CFD38, &qword_1000CFD30);
  v26 = v25;
  sub_10000A40C(&qword_1000CFE60, &qword_1000CFE58);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_100009D14, v19, v22, v23, v24, v26, v27);
  swift_release(v19);
  swift_release(v35);
  sub_10000A40C(&qword_1000CFE68, &qword_1000CFE50);
  v29 = Publisher.eraseToAnyPublisher()(v12, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  sub_100007618(v36);
  return v29;
}

id sub_100009418()
{
  return sub_100009828((uint64_t (*)(void))sub_100009664, (uint64_t)&_s7sportsd13TempoApiAgentV9EmptyBodyVN_0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000096E4);
}

uint64_t sub_100009444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE __src[96];
  uint64_t v20;

  v6 = sub_10000738C(&qword_1000CFD28);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &__src[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10005EAC0();
  v20 = v10;
  sub_1000095FC(a5, (uint64_t)__src);
  v11 = swift_allocObject(&unk_1000C3620, 112, 7);
  memcpy((void *)(v11 + 16), __src, 0x60uLL);
  v12 = swift_allocObject(&unk_1000C3648, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_10000963C;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = sub_10000738C(&qword_1000CFD30);
  v14 = sub_10000738C(&qword_1000CFD20);
  sub_10000A40C(&qword_1000CFD38, &qword_1000CFD30);
  Publisher.map<A>(_:)(sub_100009644, v12, v13, v14);
  swift_release(v12);
  swift_release(v20);
  sub_10000A40C(&qword_1000CFD40, &qword_1000CFD28);
  v16 = Publisher.eraseToAnyPublisher()(v6, v15);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return v16;
}

uint64_t sub_1000095FC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ApiAgent(a2, a1);
  return a2;
}

uint64_t sub_10000963C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_100041A74(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100009644(char *a1)
{
  uint64_t v1;

  return sub_100009024(a1, *(uint64_t (**)(uint64_t, uint64_t, char *, _QWORD, char *))(v1 + 16));
}

uint64_t sub_10000964C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100009658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

unint64_t sub_100009664()
{
  unint64_t result;

  result = qword_1000CFD58;
  if (!qword_1000CFD58)
  {
    result = swift_getWitnessTable(&unk_10009FE44, &_s7sportsd13TempoApiAgentV9EmptyBodyVN_0);
    atomic_store(result, (unint64_t *)&qword_1000CFD58);
  }
  return result;
}

uint64_t sub_1000096A0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000096E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100021FFC(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1000096EC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100009704()
{
  _QWORD *v0;

  sub_10000A750();
  swift_bridgeObjectRelease(v0[5]);
  sub_100007618(v0 + 6);
  swift_release(v0[11]);
  sub_100007618(v0 + 13);
  swift_bridgeObjectRelease(v0[18]);
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_10000974C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100007918(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), v2 + 48, *(_QWORD *)(v2 + 144), a2);
}

uint64_t sub_100009760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D1660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000097AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000A7C4();
  sub_10000A68C();
  v6 = v5 + 17;
  sub_10000A750();
  sub_10000A798(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  return sub_10000A714(v0, v6, v1);
}

id sub_1000097FC()
{
  return sub_100009828((uint64_t (*)(void))sub_100009888, (uint64_t)&type metadata for TempoApiAgent.EmptyBody, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10000A64C);
}

id sub_100009828(uint64_t (*a1)(void), uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_10000A7C4();
  v7 = sub_10000A6B8();
  return sub_1000089CC(v7, v10, v11, *(unsigned __int8 *)(v3 + v9), *(_QWORD *)(v8 + 8), *(unsigned __int8 *)(v8 + 16), a1, a2, a3);
}

unint64_t sub_100009888()
{
  unint64_t result;

  result = qword_1000CFD78;
  if (!qword_1000CFD78)
  {
    result = swift_getWitnessTable(&unk_10009FE1C, &type metadata for TempoApiAgent.EmptyBody);
    atomic_store(result, (unint64_t *)&qword_1000CFD78);
  }
  return result;
}

uint64_t sub_1000098C4()
{
  _QWORD *v0;

  sub_10000A750();
  swift_bridgeObjectRelease(v0[4]);
  sub_100007618(v0 + 5);
  swift_release(v0[10]);
  sub_100007618(v0 + 12);
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_100009904@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100007E64(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), (_QWORD *)(v2 + 40), a2);
}

uint64_t sub_100009914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = sub_10000A7C4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFF8)));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

id sub_1000099B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_10000A7C4() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100022000(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((v3 + 39) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100009A24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33[2];
  _BYTE __src[96];
  uint64_t v35;
  _QWORD v36[6];

  v12 = sub_10000738C(&qword_1000CFDA0);
  v32 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[3] = &type metadata for AMSApiRequest;
  v36[4] = &off_1000C41A0;
  v15 = (_QWORD *)swift_allocObject(&unk_1000C3710, 48, 7);
  v36[0] = v15;
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10005EAC0();
  v35 = v17;
  sub_1000095FC(a6, (uint64_t)__src);
  sub_100009D1C((uint64_t)v36, (uint64_t)v33);
  v18 = swift_allocObject(&unk_1000C3738, 160, 7);
  *(_QWORD *)(v18 + 16) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_100009DDC(v33, v18 + 120);
  v19 = swift_allocObject(&unk_1000C3760, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_100009CE0;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_retain(a5);
  v21 = static Subscribers.Demand.unlimited.getter(v20);
  v22 = sub_10000738C(&qword_1000CFD30);
  v23 = sub_10000738C(&qword_1000CFDA8);
  v24 = sub_10000738C(&qword_1000CFDB0);
  sub_10000A40C(&qword_1000CFD38, &qword_1000CFD30);
  v26 = v25;
  sub_10000A40C(&qword_1000CFDB8, &qword_1000CFDB0);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_100009D14, v19, v22, v23, v24, v26, v27);
  swift_release(v19);
  swift_release(v35);
  sub_10000A40C(&qword_1000CFDC0, &qword_1000CFDA0);
  v29 = Publisher.eraseToAnyPublisher()(v12, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  sub_100007618(v36);
  return v29;
}

uint64_t sub_100009CA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100009CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  sub_10005834C(a1, a2, a3, a4, a5, *(_QWORD *)(v20 + 16), v20 + 24, v20 + 120, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

uint64_t sub_100009CF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100009D14(uint64_t a1)
{
  uint64_t v1;

  return sub_100059880(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100009D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  sub_100006200();
}

void sub_100009D5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000738C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_100006200();
}

uint64_t sub_100009DA0()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  sub_100007618((_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100009DDC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

ValueMetadata *type metadata accessor for TempoApiAgent.EmptyBody()
{
  return &type metadata for TempoApiAgent.EmptyBody;
}

ValueMetadata *_s7sportsd13TempoApiAgentV9EmptyBodyVMa_0()
{
  return &_s7sportsd13TempoApiAgentV9EmptyBodyVN_0;
}

uint64_t initializeBufferWithCopyOfBuffer for TempoApiAgent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for TempoApiAgent(_QWORD *a1)
{
  sub_100007618(a1);
  swift_release(a1[5]);
  return sub_100007618(a1 + 7);
}

uint64_t initializeWithCopy for TempoApiAgent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = a2 + 56;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain(v5);
  v9(a1 + 56, v6, v8);
  return a1;
}

uint64_t assignWithCopy for TempoApiAgent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_100009F58((_QWORD *)a1, (_QWORD *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  sub_100009F58((_QWORD *)(a1 + 56), (_QWORD *)(a2 + 56));
  return a1;
}

_QWORD *sub_100009F58(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

void *initializeWithTake for TempoApiAgent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for TempoApiAgent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  sub_100007618((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release(v6);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  sub_100007618((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TempoApiAgent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TempoApiAgent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TempoApiAgent()
{
  return &type metadata for TempoApiAgent;
}

uint64_t sub_10000A1D8()
{
  _QWORD *v0;

  sub_10000A750();
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  sub_100007618(v0 + 9);
  swift_release(v0[14]);
  sub_100007618(v0 + 16);
  swift_bridgeObjectRelease(v0[21]);
  return swift_deallocObject(v0, 176, 7);
}

uint64_t sub_10000A228(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_100006934(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_BYTE *)(v3 + 64), *(_BYTE *)(v3 + 65), v3 + 72, *(_QWORD *)(v3 + 168));
}

uint64_t sub_10000A270@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10000713C(a1, *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2 + 16), a2);
}

unint64_t sub_10000A278()
{
  unint64_t result;

  result = qword_1000CFFD0[0];
  if (!qword_1000CFFD0[0])
  {
    result = swift_getWitnessTable(&unk_1000A463C, &type metadata for TVAppFeatureFlags);
    atomic_store(result, qword_1000CFFD0);
  }
  return result;
}

uint64_t sub_10000A2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000A7C4();
  sub_10000A68C();
  v6 = v5 + 121;
  sub_10000A750();
  sub_10000A798(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_bridgeObjectRelease(v4[2]);
  swift_bridgeObjectRelease(v4[4]);
  swift_bridgeObjectRelease(v4[6]);
  swift_bridgeObjectRelease(v4[8]);
  swift_bridgeObjectRelease(v4[10]);
  swift_bridgeObjectRelease(v4[11]);
  swift_bridgeObjectRelease(v4[12]);
  swift_bridgeObjectRelease(v4[14]);
  return sub_10000A714(v0, v6, v1);
}

char *sub_10000A33C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_10000A7C4();
  v1 = sub_10000A6B8();
  return sub_100009108(v1, v4, v5, *(unsigned __int8 *)(v0 + v3), (void *)(v2 + 8), *(_QWORD *)(v2 + 112), *(unsigned __int8 *)(v2 + 120));
}

void sub_10000A378(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = a2(255);
    atomic_store(sub_10000A850(v3), a1);
  }
  sub_100006200();
}

uint64_t sub_10000A3B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  sub_100007618((_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  sub_100007618((_QWORD *)(v0 + 80));
  sub_100007618((_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 160, 7);
}

void sub_10000A3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  sub_10005806C(a1, a2, a3, a4, a5, *(_QWORD *)(v20 + 16), v20 + 24, v20 + 120, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

void sub_10000A40C(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100007648(a2);
    atomic_store(sub_10000A850(v3), a1);
  }
  sub_100006200();
}

unint64_t sub_10000A440()
{
  unint64_t result;

  result = qword_1000CFE70;
  if (!qword_1000CFE70)
  {
    result = swift_getWitnessTable(&unk_1000A3770, &unk_1000C7810);
    atomic_store(result, (unint64_t *)&qword_1000CFE70);
  }
  return result;
}

void sub_10000A47C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000738C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_100006200();
}

unint64_t sub_10000A4B4()
{
  unint64_t result;

  result = qword_1000CFE80;
  if (!qword_1000CFE80)
  {
    result = swift_getWitnessTable(&unk_10009FF68, &_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1000CFE80);
  }
  return result;
}

unint64_t sub_10000A4F0()
{
  unint64_t result;

  result = qword_1000CFE90;
  if (!qword_1000CFE90)
  {
    result = swift_getWitnessTable(&unk_10009FF18, &type metadata for TempoApiAgent.EmptyBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CFE90);
  }
  return result;
}

ValueMetadata *type metadata accessor for TempoApiAgent.EmptyBody.CodingKeys()
{
  return &type metadata for TempoApiAgent.EmptyBody.CodingKeys;
}

ValueMetadata *_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysOMa_0()
{
  return &_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0;
}

unint64_t sub_10000A550()
{
  unint64_t result;

  result = qword_1000CFE98;
  if (!qword_1000CFE98)
  {
    result = swift_getWitnessTable(&unk_10009FEC8, &type metadata for TempoApiAgent.EmptyBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CFE98);
  }
  return result;
}

unint64_t sub_10000A590()
{
  unint64_t result;

  result = qword_1000CFEA0;
  if (!qword_1000CFEA0)
  {
    result = swift_getWitnessTable(&unk_10009FEF0, &type metadata for TempoApiAgent.EmptyBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CFEA0);
  }
  return result;
}

unint64_t sub_10000A5D0()
{
  unint64_t result;

  result = qword_1000CFEA8;
  if (!qword_1000CFEA8)
  {
    result = swift_getWitnessTable(&unk_10009FE78, &_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1000CFEA8);
  }
  return result;
}

unint64_t sub_10000A610()
{
  unint64_t result;

  result = qword_1000CFEB0;
  if (!qword_1000CFEB0)
  {
    result = swift_getWitnessTable(&unk_10009FEA0, &_s7sportsd13TempoApiAgentV9EmptyBodyV10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1000CFEB0);
  }
  return result;
}

uint64_t sub_10000A6B8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_10000A714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10000A728()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10000A730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 192) + 8))(v1, v0);
}

uint64_t sub_10000A748(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_10000A750()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10000A770()
{
  return 0;
}

void *sub_10000A78C(void *a1)
{
  uint64_t v1;

  return memcpy(a1, (const void *)(v1 - 184), 0x60uLL);
}

uint64_t sub_10000A798@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10000A7A0(uint64_t a1)
{
  uint64_t v1;

  return Publisher.eraseToAnyPublisher()(*(_QWORD *)(v1 - 208), a1);
}

uint64_t sub_10000A7B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_10000A7C4()
{
  return type metadata accessor for URL(0);
}

void sub_10000A7CC(unint64_t *a1, uint64_t *a2)
{
  sub_10000A40C(a1, a2);
}

uint64_t sub_10000A7FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_10000A80C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100009DDC((__int128 *)(v1 - 120), v0);
}

uint64_t sub_10000A818(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_10000A824()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 88));
}

uint64_t sub_10000A82C()
{
  uint64_t *v0;

  return sub_10000738C(v0);
}

uint64_t sub_10000A834()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000A83C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000A848()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10000A850(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_10000A85C(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_10000A868(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[6];
  _BYTE v49[24];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[6];
  uint64_t v56;
  uint64_t v57;
  char v58;

  v3 = v2;
  v5 = type metadata accessor for URL(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = String._bridgeToObjectiveC()();
  v9 = sub_10000AE94();

  if (v9)
  {
    sub_10000AEC4();
    swift_unknownObjectRelease(v9);
  }
  else
  {
    sub_10000AEA4();
  }
  v10 = sub_10000AED0();
  if (v50)
  {
    if (sub_10000AE80(v10, v11, v12, (uint64_t)&type metadata for String))
    {
      v46 = v56;
      v13 = v57;
      v14 = (uint64_t *)&v58;
LABEL_17:
      *(v14 - 32) = v13;
      goto LABEL_19;
    }
  }
  else
  {
    sub_10000ADD4((uint64_t)v49);
  }
  v15 = String._bridgeToObjectiveC()();
  v16 = sub_10000AE94();

  if (v16)
  {
    sub_10000AEC4();
    swift_unknownObjectRelease(v16);
  }
  else
  {
    sub_10000AEA4();
  }
  v17 = sub_10000AED0();
  if (v50)
  {
    v20 = sub_10000AE80(v17, v18, v19, (uint64_t)&type metadata for String);
    v13 = v56;
    v21 = v57;
    if (!v20)
      v21 = 0;
    v47 = v21;
    if (!v20)
      v13 = 0;
    v14 = &v57;
    goto LABEL_17;
  }
  sub_10000ADD4((uint64_t)v49);
  v47 = 0;
  v46 = 0;
LABEL_19:
  v22 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_entitlement);
  v23 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_entitlement + 8);
  sub_10000AE14(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_apsListening, (uint64_t)v49);
  v24 = qword_1000CFA68;
  swift_bridgeObjectRetain(v23);
  v25 = a2;
  if (v24 != -1)
    swift_once(&qword_1000CFA68, sub_10002A1D4);
  v26 = qword_1000DDA40;
  v27 = (void *)objc_opt_self(NSFileManager);
  swift_retain(v26);
  v28 = objc_msgSend(v27, "defaultManager");
  NSFileManager.currentContainerURL.getter();

  v29 = type metadata accessor for PlaysStore(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = PlaysStore.init(storeUrl:)(v7);
  sub_10000AE14(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_metadataProvider, (uint64_t)&v53);
  sub_10000AE14(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_tempoApiProvider, (uint64_t)&v54);
  sub_10000AE14(v3 + OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_supressionManager, (uint64_t)v55);
  v51 = v26;
  v52 = v30;
  v31 = (objc_class *)type metadata accessor for ActivityAuthorization(0);
  v32 = objc_msgSend(objc_allocWithZone(v31), "init");
  v33 = sub_100043DEC();
  v35 = v34;
  v48[4] = &off_1000C5188;
  v48[3] = v31;
  v48[0] = v32;
  v36 = type metadata accessor for ActivityCapUtility();
  v37 = (_QWORD *)swift_allocObject(v36, 72, 7);
  v38 = sub_10000AE58((uint64_t)v48, (uint64_t)v31);
  __chkstk_darwin(v38);
  v40 = (uint64_t *)((char *)&v46 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v41 + 16))(v40);
  v42 = *v40;
  v37[5] = v31;
  v37[6] = &off_1000C5188;
  v37[2] = v42;
  v37[7] = v33;
  v37[8] = v35;
  sub_100007618(v48);
  v55[5] = v37;
  v43 = objc_allocWithZone((Class)type metadata accessor for SportsKitRequestXPCSession());
  v44 = sub_10006E338(v22, v23, v25, (uint64_t)v49, v46, v47);
  sub_100088210();

  return 1;
}

void sub_10000ACA0()
{
  _swift_stdlib_reportUnimplementedInitializer("sportsd.SportsKitRequestXPCServer", 33, "init()", 6, 0);
  __break(1u);
}

id sub_10000ACD8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SportsKitRequestXPCServer()
{
  return objc_opt_self(_TtC7sportsd25SportsKitRequestXPCServer);
}

uint64_t sub_10000AD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C((uint64_t *)&unk_1000CFF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000ADD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000738C((uint64_t *)&unk_1000CFF70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000AE14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000AE58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10000AE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_dynamicCast(v5 - 104, v5 - 288, v4 + 8, a4, 6);
}

id sub_10000AE94()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(v0, *(SEL *)(v2 + 2880), v1);
}

double sub_10000AEA4()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 320) = 0u;
  *(_OWORD *)(v0 - 336) = 0u;
  return result;
}

uint64_t sub_10000AEBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100007618((_QWORD *)(v1 + a1));
}

uint64_t sub_10000AEC4()
{
  uint64_t v0;

  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_10000AED0()
{
  uint64_t v0;

  return sub_10000AD8C(v0 - 336, v0 - 288);
}

uint64_t sub_10000AEDC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  _QWORD v35[3];
  ValueMetadata *v36;
  _UNKNOWN **v37;
  _QWORD v38[7];
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[7];

  v3 = v2;
  v5 = type metadata accessor for URL(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_entitlement);
  v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_entitlement + 8);
  sub_10000AE14(v3 + OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_apsListening, (uint64_t)v38);
  v10 = qword_1000CFA68;
  swift_bridgeObjectRetain(v9);
  v11 = a2;
  if (v10 != -1)
    swift_once(&qword_1000CFA68, sub_10002A1D4);
  v12 = qword_1000DDA40;
  v13 = (void *)objc_opt_self(NSFileManager);
  swift_retain(v12);
  v14 = objc_msgSend(v13, "defaultManager");
  NSFileManager.currentContainerURL.getter();

  v15 = type metadata accessor for PlaysStore(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = PlaysStore.init(storeUrl:)(v7);
  sub_10000AE14(v3 + OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_metadataProvider, (uint64_t)&v39);
  sub_10000AE14(v3 + OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_tempoApiProvider, (uint64_t)&v40);
  sub_10000AE14(v3 + OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_supressionManager, (uint64_t)v41);
  v38[5] = v12;
  v38[6] = v16;
  v17 = (objc_class *)type metadata accessor for ActivityAuthorization(0);
  v18 = objc_msgSend(objc_allocWithZone(v17), "init");
  v19 = sub_100043DEC();
  v21 = v20;
  v37 = &off_1000C5188;
  v36 = (ValueMetadata *)v17;
  v35[0] = v18;
  v22 = type metadata accessor for ActivityCapUtility();
  v23 = swift_allocObject(v22, 72, 7);
  v24 = sub_10000AE58((uint64_t)v35, (uint64_t)v17);
  __chkstk_darwin(v24);
  v26 = (_QWORD *)((char *)&v35[-1] - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  v28 = *v26;
  *(_QWORD *)(v23 + 40) = v17;
  *(_QWORD *)(v23 + 48) = &off_1000C5188;
  *(_QWORD *)(v23 + 16) = v28;
  *(_QWORD *)(v23 + 56) = v19;
  *(_QWORD *)(v23 + 64) = v21;
  sub_100007618(v35);
  v41[5] = v23;
  v36 = &type metadata for TVAppFeatureFlags;
  v37 = (_UNKNOWN **)sub_10000A278();
  LOBYTE(v23) = isFeatureEnabled(_:)(v35);
  sub_100007618(v35);
  type metadata accessor for SportsManager(0);
  v29 = static SportsManager.shared.getter();
  v30 = swift_allocObject(&unk_1000C3A10, 24, 7);
  *(_QWORD *)(v30 + 16) = v29;
  v31 = objc_allocWithZone((Class)type metadata accessor for DirectActivityRequestXPCSession());
  v32 = sub_100051028(v8, v9, v11, v38, v23 & 1, (uint64_t)sub_10000B310, v30);
  sub_100088210();

  return 1;
}

void sub_10000B234()
{
  _swift_stdlib_reportUnimplementedInitializer("sportsd.DirectActivityRequestXPCServer", 38, "init()", 6, 0);
  __break(1u);
}

uint64_t type metadata accessor for DirectActivityRequestXPCServer()
{
  return objc_opt_self(_TtC7sportsd30DirectActivityRequestXPCServer);
}

uint64_t sub_10000B2EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10000B310()
{
  sub_10005100C();
}

uint64_t sub_10000B31C(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

BOOL sub_10000B36C(char a1, char a2)
{
  return a1 == a2;
}

void sub_10000B37C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_10000B3A0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  char v18;

  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7365536F706D6574 && a2 == 0xEE0064496E6F6973)
  {
    v8 = 0xEE0064496E6F6973;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365536F706D6574, 0xEE0064496E6F6973, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6556616D65686373 && a2 == 0xED00006E6F697372)
  {
    v10 = 0xED00006E6F697372;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556616D65686373, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v12 = 0xE400000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v14 = 0xE900000000000070;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x6E756F4365747962 && a2 == 0xE900000000000074)
  {
    v16 = 0xE900000000000074;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F4365747962, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5;
  }
  if (a1 == 0x496C656E6E616863 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease(0xE900000000000044);
    return 6;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496C656E6E616863, 0xE900000000000044, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_10000B6B0()
{
  return 7;
}

Swift::Int sub_10000B6B8(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_10000B6FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000B730 + 4 * byte_1000A0020[a1]))(0x746E65746E6F63, 0xE700000000000000);
}

uint64_t sub_10000B730()
{
  return 0x7365536F706D6574;
}

uint64_t sub_10000B754()
{
  return 0x6556616D65686373;
}

uint64_t sub_10000B778()
{
  return 1701869940;
}

uint64_t sub_10000B788()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10000B7A8()
{
  return 0x6E756F4365747962;
}

uint64_t sub_10000B7C8()
{
  return 0x496C656E6E616863;
}

BOOL sub_10000B7E4(char *a1, char *a2)
{
  return sub_10000B36C(*a1, *a2);
}

Swift::Int sub_10000B7F8()
{
  unsigned __int8 *v0;

  return sub_10000B6B8(*v0);
}

void sub_10000B804(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10000B37C(a1, *v1);
}

Swift::Int sub_10000B810()
{
  unsigned __int8 *v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  sub_10000B37C((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_10000B854@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  char *v60;
  uint64_t *v61;
  int *v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v48 = a4;
  v57 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  sub_10000CD48();
  v51 = v7;
  v56 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v8);
  sub_10000CD48();
  v55 = v9;
  v11 = type metadata accessor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper.CodingKeys(255, a2, a3, v10);
  WitnessTable = swift_getWitnessTable(&unk_1000A0220, v11);
  v54 = type metadata accessor for KeyedDecodingContainer(0, v11, WitnessTable);
  v49 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v14 = (char *)&v47 - v13;
  v50 = a3;
  v16 = type metadata accessor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper(0, a2, a3, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v47 - v19;
  v21 = (uint64_t *)((char *)&v47 + *(int *)(v18 + 52) - v19);
  *v21 = 0;
  *((_BYTE *)v21 + 8) = 1;
  v62 = (int *)v18;
  v22 = (uint64_t *)((char *)&v47 + *(int *)(v18 + 56) - v19);
  *v22 = 0;
  v22[1] = 0;
  v59 = v22;
  v60 = v20;
  v23 = a1[3];
  v24 = a1[4];
  v58 = a1;
  sub_1000073CC(a1, v23);
  v53 = v14;
  v25 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, WitnessTable, v23, v24);
  if (v25)
  {
    v28 = v59;
    sub_10000CD2C();
    return swift_bridgeObjectRelease(v28[1]);
  }
  else
  {
    v61 = v21;
    v26 = v49;
    v69 = 0;
    v27 = v54;
    KeyedDecodingContainer.decode<A>(_:forKey:)(a2, &v69, v54, a2);
    v29 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v60, v55, a2);
    v68 = 1;
    v30 = KeyedDecodingContainer.decode(_:forKey:)(&v68, v27);
    v31 = v27;
    v32 = v62;
    v33 = (uint64_t *)&v29[v62[9]];
    *v33 = v30;
    v33[1] = v34;
    v67 = 2;
    v35 = KeyedDecodingContainer.decode(_:forKey:)(&v67, v31);
    v36 = v59;
    v37 = (uint64_t *)&v29[v32[10]];
    *v37 = v35;
    v37[1] = v38;
    v66 = 3;
    *(_QWORD *)&v29[v32[11]] = KeyedDecodingContainer.decode(_:forKey:)(&v66, v54);
    v65 = 4;
    sub_10000CB2C();
    v39 = v57;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v57, &v65, v54, v57);
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(&v29[v32[12]], v51, v39);
    v64 = 5;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v64, v54);
    v41 = v61;
    *v61 = v40;
    *((_BYTE *)v41 + 8) = v42 & 1;
    v63 = 6;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v63, v54);
    v45 = v44;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v53, v54);
    swift_bridgeObjectRelease(v36[1]);
    *v36 = v43;
    v36[1] = v45;
    (*(void (**)(uint64_t, char *, int *))(v17 + 16))(v48, v29, v32);
    sub_10000CD2C();
    return (*(uint64_t (**)(char *, int *))(v17 + 8))(v29, v32);
  }
}

uint64_t sub_10000BCF8()
{
  unsigned __int8 *v0;

  return sub_10000B6FC(*v0);
}

uint64_t sub_10000BD04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000B3A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000BD30()
{
  return sub_1000080B4();
}

uint64_t sub_10000BD50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10000B6B0();
  *a1 = result;
  return result;
}

uint64_t sub_10000BD7C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000A0220, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_10000BDB0(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000A0220, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t sub_10000BDE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10000B854(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_10000BE00(void **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = sub_100017DCC(*a1);
  if (v4)
  {
    v5 = v4;
    if (*(_QWORD *)(a2 + 16))
    {
      sub_10006D7C8(v3, v4, a2);
      v7 = v6;
    }
    else
    {
      v7 = 1;
    }
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_10000BE60(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (a3)
  {
    v5 = sub_100017DD8(*a1);
    if (v6)
    {
      v7 = v6;
      if (v5 == a2 && v6 == a3)
        v9 = 1;
      else
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v5, v6, 0);
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 1;
  }
  return v9 & 1;
}

uint64_t sub_10000BEE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t sub_10000BF0C()
{
  uint64_t v0;

  sub_10000BEE8();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for CloudChannelMessageProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BF38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CloudChannelMessageProcessor);
}

uint64_t sub_10000BF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10000BF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_10000BF6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_1000A00C8;
    v5[2] = &unk_1000A00C8;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = &unk_1000A00E0;
      v5[6] = &unk_1000A00F8;
      swift_initStructMetadata(a1, 0, 7, v5, a1 + 32);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10000C020(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12
       + ((v10 + 8 + ((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v10)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain(v16);
  }
  else
  {
    v17 = v8;
    v18 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v19 = (_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = v20[1];
    v19[1] = v21;
    v22 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v22 = *v23;
    v24 = v23[1];
    v22[1] = v24;
    v25 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = ((unint64_t)v25 + v11) & v18;
    v28 = ((unint64_t)v26 + v11) & v18;
    v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    v29(v27, v28, v17);
    v30 = (v27 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v31 = (v28 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = *(_QWORD *)v31;
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    *(_QWORD *)v30 = v32;
    v33 = (_QWORD *)((v27 + v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)((v28 + v12 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v35 = v34[1];
    v33[1] = v35;
    swift_bridgeObjectRetain(v35);
  }
  return a1;
}

uint64_t sub_10000C1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  return swift_bridgeObjectRelease(*(_QWORD *)(((*(_QWORD *)(v7 + 64) + v8 + 23) & 0xFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10000C294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v7[1] = v9;
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = v11[1];
  v10[1] = v12;
  v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = ((unint64_t)v13 + v17 + 8) & ~v17;
  v19 = ((unint64_t)v14 + v17 + 8) & ~v17;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  v20(v18, v19, v15);
  v21 = *(_QWORD *)(v16 + 64);
  v22 = v18 + v21;
  v23 = v19 + v21;
  v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = v26;
  v27 = (_QWORD *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = v28[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  return a1;
}

uint64_t sub_10000C3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = ((unint64_t)v15 + v19 + 8) & ~v19;
  v21 = ((unint64_t)v16 + v19 + 8) & ~v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 24))(v20, v21, v17);
  v22 = *(_QWORD *)(v18 + 64);
  v23 = v20 + v22;
  v24 = v21 + v22;
  v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = v27;
  v28 = (_QWORD *)((v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)((v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_10000C52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((unint64_t)v11 + v15 + 8) & ~v15;
  v17 = ((unint64_t)v12 + v15 + 8) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, v17, v13);
  v18 = *(_QWORD *)(v14 + 64);
  v19 = v16 + v18;
  v20 = v17 + v18;
  v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_BYTE *)(v22 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = v23;
  *(_OWORD *)((v19 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v20 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10000C624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v7[1];
  v7[1] = v8[1];
  swift_bridgeObjectRelease(v9);
  v10 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = v10[1];
  v10[1] = v11[1];
  swift_bridgeObjectRelease(v12);
  v13 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = ((unint64_t)v13 + v17 + 8) & ~v17;
  v19 = ((unint64_t)v14 + v17 + 8) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40))(v18, v19, v15);
  v20 = *(_QWORD *)(v16 + 64);
  v21 = v18 + v20;
  v22 = v19 + v20;
  v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = v25;
  v26 = (_QWORD *)((v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v28 = v26[1];
  v26[1] = v27[1];
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_10000C764(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v7 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = v14 + 8;
  if (v12 < a2)
  {
    if (((((*(_QWORD *)(v9 + 64)
           + ((v15 + ((((((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v12 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X17 }
  }
  if ((_DWORD)v7 == v12)
    return sub_100009658(a1, v7, v5);
  v20 = (a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 0x80000000) != 0)
    return sub_100009658((v15 + ((((v20 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v14, v10, v8);
  v21 = *(_QWORD *)(v20 + 8);
  if (v21 >= 0xFFFFFFFF)
    LODWORD(v21) = -1;
  return (v21 + 1);
}

void sub_10000C918(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  if (v8 <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = v8;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = ((*(_QWORD *)(v9 + 64)
        + ((*(unsigned __int8 *)(v9 + 80)
          + 8
          + ((((((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v11 >= a3)
  {
    v15 = 0;
  }
  else
  {
    if ((_DWORD)v12)
      v13 = 2;
    else
      v13 = a3 - v11 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
  }
  if (a2 > v11)
  {
    if ((_DWORD)v12)
    {
      v16 = ~v11 + a2;
      bzero(a1, v12);
      *a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X15 }
}

void sub_10000CA58(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  *(_BYTE *)(v8 + v11) = 0;
  if ((_DWORD)v7)
  {
    if ((_DWORD)v10 == v3)
    {
      v12 = v8;
      v13 = v7;
      a1 = v10;
      a2 = v9;
LABEL_8:
      sub_10000964C(v12, v13, a1, a2);
      return;
    }
    v14 = (_QWORD *)((v8 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (a3 < 0)
    {
      v12 = (v4 + (((((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & v6;
      v13 = v7;
      goto LABEL_8;
    }
    if ((v7 & 0x80000000) != 0)
    {
      *v14 = v7 ^ 0x80000000;
      v14[1] = 0;
    }
    else
    {
      v14[1] = (v7 - 1);
    }
  }
}

uint64_t type metadata accessor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BF38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper);
}

uint64_t type metadata accessor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BF38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CloudChannelMessageProcessor.CloudChannelMessageContentWrapper.CodingKeys);
}

unint64_t sub_10000CB2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D00E0[0];
  if (!qword_1000D00E0[0])
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, qword_1000D00E0);
  }
  return result;
}

uint64_t sub_10000CB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

_BYTE *initializeBufferWithCopyOfBuffer for SportsEnvironment(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LiveActivityAutostartContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10000CC0C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10000CC58 + 4 * byte_1000A003B[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10000CC8C + 4 * byte_1000A0036[v4]))();
}

uint64_t sub_10000CC8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000CC94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000CC9CLL);
  return result;
}

uint64_t sub_10000CCA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000CCB0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10000CCB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000CCBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000CCC8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000CCD0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t sub_10000CCD8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000A01F8, a1);
}

uint64_t sub_10000CCE8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000A0168, a1);
}

uint64_t sub_10000CCF8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1000A0190, a1);
}

uint64_t sub_10000CD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10000CD1C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10000CD2C()
{
  uint64_t v0;

  return sub_100007618(*(_QWORD **)(v0 - 120));
}

uint64_t sub_10000CD34@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 152));
}

uint64_t sub_10000CD3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_10000CD5C(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C2878, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_10000CDAC(char a1)
{
  if ((a1 & 1) != 0)
    return 7759204;
  else
    return 1685025392;
}

void sub_10000CDD4(char *a1, unsigned __int8 *a2)
{
  sub_100055F4C(*a1, *a2);
}

void sub_10000CDE0()
{
  char *v0;

  sub_1000563FC(*v0);
}

uint64_t sub_10000CDE8(uint64_t a1)
{
  char *v1;

  return sub_100056824(a1, *v1);
}

void sub_10000CDF0(uint64_t a1)
{
  char *v1;

  sub_100056BC4(a1, *v1);
}

uint64_t sub_10000CDF8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10000CD5C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000CE24@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10000CDAC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000CE4C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v0 = sub_10000738C(&qword_1000D0208);
  v13[0] = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000CFA58 != -1)
    swift_once(&qword_1000CFA58, sub_100024D38);
  v3 = *(_QWORD *)(qword_1000DDA30 + 24);
  v13[1] = v3;
  v4 = swift_retain(v3);
  v5 = static Subscribers.Demand.unlimited.getter(v4);
  v6 = sub_10000738C(&qword_1000CFCF0);
  v7 = sub_10000738C(&qword_1000D0210);
  v8 = sub_10000D358(&qword_1000CFD00, &qword_1000CFCF0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v9 = sub_10000D358(&qword_1000D0218, &qword_1000D0210, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v5, sub_10000CFEC, 0, v6, v7, v8, v9);
  swift_release(v3);
  v10 = sub_10000D358(&qword_1000D0220, &qword_1000D0208, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v11 = Publisher.eraseToAnyPublisher()(v0, v10);
  (*(void (**)(char *, uint64_t))(v13[0] + 8))(v2, v0);
  return v11;
}

uint64_t sub_10000CFEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  char v29[152];

  v25 = a1;
  v1 = sub_10000738C(&qword_1000D0228);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10000738C(&qword_1000D0230);
  v23 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000738C(&qword_1000CFE30);
  result = swift_initStackObject(v6, v29);
  v8 = result;
  v9 = 0;
  *(_OWORD *)(result + 16) = xmmword_1000A0270;
  *(_QWORD *)(result + 40) = 0xE400000000000000;
  v10 = (_QWORD *)(result + 40);
  *(_QWORD *)(result + 32) = 1936553065;
  *(_QWORD *)(result + 48) = 0x6567617473;
  *(_QWORD *)(result + 56) = 0xE500000000000000;
  *(_QWORD *)(result + 64) = 7630441;
  *(_QWORD *)(result + 72) = 0xE300000000000000;
  *(_QWORD *)(result + 80) = 24945;
  *(_QWORD *)(result + 88) = 0xE200000000000000;
  *(_QWORD *)(result + 96) = 7759204;
  *(_QWORD *)(result + 104) = 0xE300000000000000;
  *(_QWORD *)(result + 112) = 6516592;
  *(_QWORD *)(result + 120) = 0xE300000000000000;
  *(_QWORD *)(result + 128) = 1953719668;
  *(_QWORD *)(result + 136) = 0xE400000000000000;
  while (v9 < *(_QWORD *)(v8 + 16))
  {
    v12 = *(v10 - 1);
    v11 = *v10;
    v13 = swift_bridgeObjectRetain(*v10);
    v27 = URL.absoluteString.getter(v13);
    v28 = v14;
    v26[0] = v12;
    v26[1] = v11;
    v15 = type metadata accessor for Locale(0);
    sub_10000964C((uint64_t)v3, 1, 1, v15);
    v16 = sub_10000D2DC();
    StringProtocol.range<A>(of:options:range:locale:)(v26, 1, 0, 0, 1, v3, &type metadata for String, &type metadata for String, v16, v16);
    v18 = v17;
    sub_10000D318((uint64_t)v3);
    v19 = v28;
    swift_bridgeObjectRelease(v11);
    result = swift_bridgeObjectRelease(v19);
    if ((v18 & 1) == 0)
    {
      swift_setDeallocating(v8);
      sub_10007DE04();
      LOBYTE(v27) = 1;
      goto LABEL_7;
    }
    ++v9;
    v10 += 2;
    if (v9 == 7)
    {
      swift_setDeallocating(v8);
      sub_10007DE04();
      LOBYTE(v27) = 0;
LABEL_7:
      Just.init(_:)(&v27);
      v20 = sub_10000D358(&qword_1000D0238, &qword_1000D0230, (uint64_t)&protocol conformance descriptor for Just<A>);
      v21 = v24;
      v22 = Publisher.eraseToAnyPublisher()(v24, v20);
      result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v5, v21);
      *v25 = v22;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10000D2AC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for SportsEnvironmentPublisher()
{
  return objc_opt_self(_TtC7sportsd26SportsEnvironmentPublisher);
}

unint64_t sub_10000D2DC()
{
  unint64_t result;

  result = qword_1000D0420;
  if (!qword_1000D0420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000D0420);
  }
  return result;
}

uint64_t sub_10000D318(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000738C(&qword_1000D0228);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000D358(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007648(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SportsEnvironment(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsEnvironment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10000D46C + 4 * byte_1000A0285[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000D4A0 + 4 * byte_1000A0280[v4]))();
}

uint64_t sub_10000D4A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000D4A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000D4B0);
  return result;
}

uint64_t sub_10000D4BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000D4C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10000D4C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000D4D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10000D4DC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SportsEnvironment()
{
  return &type metadata for SportsEnvironment;
}

unint64_t sub_10000D4FC()
{
  unint64_t result;

  result = qword_1000D0240;
  if (!qword_1000D0240)
  {
    result = swift_getWitnessTable(&unk_1000A033C, &type metadata for SportsEnvironment);
    atomic_store(result, (unint64_t *)&qword_1000D0240);
  }
  return result;
}

uint64_t sub_10000D538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for CloudChannelTaskActor();
  v1 = swift_allocObject(v0, 112, 15);
  result = swift_defaultActor_initialize();
  qword_1000DD9B0 = v1;
  return result;
}

uint64_t *sub_10000D570()
{
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  return &qword_1000DD9B0;
}

uint64_t sub_10000D5B0()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CloudChannelTaskActor()
{
  return objc_opt_self(_TtC7sportsd21CloudChannelTaskActor);
}

uint64_t sub_10000D5EC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10000D5F8()
{
  return sub_10000D5EC();
}

uint64_t sub_10000D610()
{
  sub_10000D570();
  return swift_retain(qword_1000DD9B0);
}

uint64_t sub_10000D62C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for CloudChannelTaskActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

void sub_10000D650(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42[24];

  v2 = *a1;
  v3 = a2 + 16;
  sub_100018E20(a2 + 16, (uint64_t)v42);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    v6 = &APSEnvironmentDevelopment;
    if (!v2)
      v6 = &APSEnvironmentProduction;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v6);
    v9 = v8;
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v10 = sub_1000187DC();
    sub_1000096EC(v10, (uint64_t)qword_1000DDAB8);
    v11 = sub_100018974(v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)sub_100018554(12);
      v15 = sub_100018554(32);
      v41 = v15;
      *(_DWORD *)v14 = 136315138;
      sub_1000185C8();
      v16 = sub_100018C04();
      sub_100014B44(v16, v17, v18);
      v40 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v14 + 4, v14 + 12);
      sub_100018A58(v9);
      sub_100018948((void *)&_mh_execute_header, v12, v13, "Current environment: %s", v14);
      sub_100018940(v15);
      sub_10000A818(v15);
      sub_10000A818((uint64_t)v14);

    }
    else
    {

      v20 = sub_100018540(v9);
    }
    sub_100018DF0(v20, (unint64_t *)&qword_1000D05D8, OS_dispatch_queue_ptr);
    v21 = sub_1000185C8();
    v22 = (void *)static OS_dispatch_queue.main.getter(v21);
    v23 = objc_allocWithZone((Class)APSConnection);
    v24 = sub_100018C04();
    v27 = sub_10001338C(v24, v25, 0xD000000000000015, v26, v22);
    v28 = OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection;
    v29 = *(void **)&v5[OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection];
    *(_QWORD *)&v5[OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection] = v27;

    v30 = *(void **)&v5[v28];
    if (v30)
    {
      sub_100017E48((uint64_t)&off_1000C28C8, v30, (SEL *)&selRef__setEnabledTopics_);
      v31 = *(void **)&v5[v28];
      if (v31)
      {
        sub_100017E48((uint64_t)&off_1000C28F8, v31, (SEL *)&selRef__setOpportunisticTopics_);
        v32 = *(void **)&v5[v28];
        if (v32)
          objc_msgSend(v32, "setDelegate:", v5);
      }
    }
    v33 = (uint64_t *)&v5[OBJC_IVAR____TtC7sportsd11ApsListener_currentAPSConnectionEnvironment];
    v34 = *(_QWORD *)&v5[OBJC_IVAR____TtC7sportsd11ApsListener_currentAPSConnectionEnvironment + 8];
    *v33 = v7;
    v33[1] = v9;
    swift_bridgeObjectRelease(v34);
    v35 = *(void **)&v5[v28];
    if (v35)
    {
      v36 = *(os_unfair_lock_s **)&v5[OBJC_IVAR____TtC7sportsd11ApsListener_connection];
      v37 = (uint64_t)&v36[4];
      v38 = v36 + 7;
      v39 = v35;
      os_unfair_lock_lock(v38);
      sub_10000D928(v37, v39);
      os_unfair_lock_unlock(v38);

      v5 = v39;
    }

  }
}

void sub_10000D928(uint64_t a1, void *a2)
{
  id v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) != 1)
    {
      *(_QWORD *)a1 = a2;
      *(_BYTE *)(a1 + 8) = 1;
      v2 = a2;
    }
  }
  else
  {
    v3 = *(uint64_t **)a1;
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 8) = 1;
    v4 = v3[2];
    if (v4)
    {
      v5 = v3 + 4;
      v6 = a2;
      sub_100013178(v3, 0);
      do
      {
        v7 = *v5++;
        **(_QWORD **)(*(_QWORD *)(v7 + 64) + 40) = v6;
        v8 = v6;
        swift_continuation_resume(v7);
        --v4;
      }
      while (v4);
      sub_1000131A4(v3, 0);
    }
    else
    {
      v9 = a2;
    }
    sub_1000131A4(v3, 0);
  }
}

uint64_t sub_10000D9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100018E50();
  return swift_task_switch(v0, v1, v2);
}

uint64_t sub_10000DA08()
{
  uint64_t v0;
  uint64_t v1;

  sub_100018A88();
  *(_QWORD *)(v0 + 16) = sub_100018A80();
  sub_100018734(&qword_1000D03F0);
  sub_100018A00(v1);
  sub_1000189F4();
  sub_1000188E4();
  return sub_1000184D0();
}

uint64_t sub_10000DA70()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  dispatch thunk of CloudChannelSubscriptionManager.clearChannelMap()();
  *(_QWORD *)(v0 + 24) = 0;
  swift_release(*(_QWORD *)(v0 + 16));
  v1 = (uint64_t (*)(void))sub_1000186B0();
  return sub_1000184FC(v1);
}

uint64_t sub_10000DACC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000DAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000DB90(a1, a2);
  v3 = v2;
  v4 = sub_10000738C(&qword_1000D0440);
  sub_10000A40C((unint64_t *)&qword_1000D0448, &qword_1000D0440);
  v6 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v4, v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

void sub_10000DB90(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_10000DBEC(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;

  v7 = v3;
  if (v3)
  {
    v27 = v3;
    v26 = v2;
    *(_QWORD *)(v6 - 104) = v5;
    v8 = v3 & ~(v3 >> 63);
    sub_100015688();
    v5 = *(_QWORD *)(v6 - 104);
    if ((_DWORD)v4)
    {
      if ((_DWORD)v4 == 1)
        v9 = (int)a1;
      else
        v9 = *(_QWORD *)(a1 + 16);
      if (v7 < 0)
        goto LABEL_40;
    }
    else
    {
      if (v7 < 0)
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
      }
      v9 = 0;
    }
    *(_QWORD *)(v6 - 136) = a2 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v6 - 128) = v4;
    while (v8)
    {
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
        {
          if (v9 < (int)a1 || v9 >= a1 >> 32)
            goto LABEL_34;
          v11 = ((uint64_t (*)(void))__DataStorage._bytes.getter)();
          if (!v11)
            goto LABEL_42;
          v12 = v11;
          v13 = ((uint64_t (*)(void))__DataStorage._offset.getter)();
          v14 = v9 - v13;
          if (__OFSUB__(v9, v13))
            goto LABEL_37;
        }
        else
        {
          if (v9 < *(_QWORD *)(a1 + 16))
            goto LABEL_36;
          if (v9 >= *(_QWORD *)(a1 + 24))
            goto LABEL_38;
          v16 = ((uint64_t (*)(void))__DataStorage._bytes.getter)();
          if (!v16)
            goto LABEL_43;
          v12 = v16;
          v17 = ((uint64_t (*)(void))__DataStorage._offset.getter)();
          v14 = v9 - v17;
          if (__OFSUB__(v9, v17))
            goto LABEL_39;
        }
        v15 = *(_BYTE *)(v12 + v14);
      }
      else
      {
        if (v9 >= v27)
          goto LABEL_35;
        *(_DWORD *)(v6 - 118) = a1;
        *(_BYTE *)(v6 - 114) = v26;
        *(_WORD *)(v6 - 113) = *(_WORD *)((char *)&a1 + 5);
        *(_BYTE *)(v6 - 111) = HIBYTE(a1);
        *(_DWORD *)(v6 - 110) = a2;
        *(_WORD *)(v6 - 106) = WORD2(a2);
        v15 = *(_BYTE *)(v6 - 118 + v9);
      }
      v18 = sub_10000738C(&qword_1000D05A8);
      v19 = swift_allocObject(v18, 72, 7);
      *(_OWORD *)(v19 + 16) = xmmword_10009FDB0;
      *(_QWORD *)(v19 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v19 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v19 + 32) = v15;
      v20 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))(0x786868322E323025, 0xE800000000000000, v19);
      v22 = v21;
      *(_QWORD *)(v6 - 104) = v5;
      v23 = *(_QWORD *)(v5 + 16);
      if (v23 >= *(_QWORD *)(v5 + 24) >> 1)
      {
        sub_100015688();
        v5 = *(_QWORD *)(v6 - 104);
      }
      *(_QWORD *)(v5 + 16) = v23 + 1;
      v24 = v5 + 16 * v23;
      *(_QWORD *)(v24 + 32) = v20;
      *(_QWORD *)(v24 + 40) = v22;
      ++v9;
      --v8;
      --v7;
      v4 = *(_QWORD *)(v6 - 128);
      if (!v7)
        return v5;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    JUMPOUT(0x10000DEF8);
  }
  return v5;
}

void sub_10000DF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v1 = sub_10000738C(&qword_1000D0520);
  __chkstk_darwin(v1);
  sub_100018AD8();
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd11ApsListener_pushToken + 8);
  if (v2)
  {
    v8[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd11ApsListener_pushToken);
    v8[1] = v2;
    swift_bridgeObjectRetain(v2);
    Just.init(_:)(v8);
    sub_10000A40C(&qword_1000D0538, &qword_1000D0520);
    Publisher.eraseToAnyPublisher()(v1, v3);
    v4 = sub_100018884();
    v5(v4);
  }
  else
  {
    v8[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd11ApsListener_tokenPublisher);
    v6 = sub_10000738C(&qword_1000D0528);
    sub_10000A40C(&qword_1000D0530, &qword_1000D0528);
    Publisher.eraseToAnyPublisher()(v6, v7);
  }
  sub_10001860C();
}

uint64_t sub_10000E034()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = v0;
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  return sub_1000184B8();
}

uint64_t sub_10000E090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v2 = qword_1000DD9B0;
  sub_1000181E4(&qword_1000D03C0, a2, (uint64_t (*)(uint64_t))type metadata accessor for CloudChannelTaskActor);
  if (v2)
  {
    v4 = v3;
    ObjectType = swift_getObjectType(v2);
    dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v4);
  }
  return sub_1000184AC();
}

uint64_t sub_10000E108()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v1 = v0 + 2;
  v2 = v0[11];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_10000E1D4;
  v3 = swift_continuation_init(v0 + 2, 0);
  v4 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC7sportsd11ApsListener_connection);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v3;
  os_unfair_lock_lock(v4 + 7);
  sub_10000E20C((uint64_t)&v4[4], *(_QWORD *)(v5 + 16));
  os_unfair_lock_unlock(v4 + 7);
  swift_task_dealloc(v5);
  return swift_continuation_await(v1);
}

uint64_t sub_10000E1D4()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1000189A0();
  v1 = *v0;
  *v2 = v1;
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v3 + 80));
}

void sub_10000E20C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v4 = *(_QWORD **)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      **(_QWORD **)(*(_QWORD *)(a2 + 64) + 40) = v4;
      v5 = v4;
      swift_continuation_resume(a2);
      return;
    }
    v7 = sub_10000738C(&qword_1000D0458);
    v8 = swift_allocObject(v7, 40, 7);
    *(_OWORD *)(v8 + 16) = xmmword_10009FDB0;
    *(_QWORD *)(v8 + 32) = a2;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)a1) & 1) == 0)
    {
      sub_10001383C();
      v4 = v9;
    }
    v6 = v4[2];
    if (v6 >= v4[3] >> 1)
    {
      sub_10001383C();
      v4 = v10;
    }
    v4[2] = v6 + 1;
    v4[v6 + 4] = a2;
    *(_QWORD *)a1 = v4;
  }
  *(_BYTE *)(a1 + 8) = 0;
}

void sub_10000E324()
{
  _swift_stdlib_reportUnimplementedInitializer("sportsd.ApsListener", 19, "init()", 6, 0);
  __break(1u);
}

uint64_t type metadata accessor for ApsListener()
{
  return objc_opt_self(_TtC7sportsd11ApsListener);
}

void sub_10000E41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];

  v4 = sub_10000DAF8(a2, a3);
  v5 = (uint64_t *)&v3[OBJC_IVAR____TtC7sportsd11ApsListener_pushToken];
  v6 = *(_QWORD *)&v3[OBJC_IVAR____TtC7sportsd11ApsListener_pushToken + 8];
  *v5 = v4;
  v5[1] = v7;
  swift_bridgeObjectRelease(v6);
  v8 = sub_100018C04();
  v23[0] = sub_10000DAF8(v8, v9);
  v23[1] = v10;
  PassthroughSubject.send(_:)(v23);
  sub_100018574();
  if (qword_1000CFAB8 != -1)
    swift_once(&qword_1000CFAB8, sub_10006CC6C);
  v11 = sub_1000187DC();
  sub_1000096EC(v11, (uint64_t)qword_1000DDAA0);
  v12 = v3;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)sub_100018554(12);
    v16 = sub_100018554(32);
    v23[0] = v16;
    *(_DWORD *)v15 = 136380675;
    v17 = v5[1];
    if (v17)
    {
      v18 = *v5;
      v19 = v5[1];
    }
    else
    {
      v18 = 0;
      v19 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain(v17);
    sub_100014B44(v18, v19, v23);
    sub_100018DC8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21, v15 + 4, v22);

    sub_100018D80();
    sub_100018948((void *)&_mh_execute_header, v13, v14, "Did receive push token %{private}s", v15);
    sub_100018940(v16);
    sub_10000A818(v16);
    sub_10000A818((uint64_t)v15);

  }
  else
  {

  }
}

void sub_10000E674()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  _QWORD v50[6];

  sub_10000A758();
  v1 = v0;
  v3 = v2;
  sub_10000738C(&qword_1000D0570);
  sub_100018BD0();
  __chkstk_darwin(v4);
  sub_10000A7D4();
  v7 = v6 - v5;
  sub_10000738C(&qword_1000D0578);
  sub_100018BD0();
  __chkstk_darwin(v8);
  sub_10000A7D4();
  v11 = v10 - v9;
  sub_100018288(v3, (SEL *)&selRef_channelID);
  v13 = v12;
  swift_bridgeObjectRelease(v12);
  if (v13)
  {
    if (qword_1000CFA70 != -1)
      swift_once(&qword_1000CFA70, sub_10002FEF8);
    v50[0] = v3;
    swift_retain(qword_1000DDA48);
    PassthroughSubject.send(_:)(v50);
    sub_1000188AC();
    sub_10000EBC8();
    goto LABEL_20;
  }
  v48 = sub_100018288(v3, (SEL *)&selRef_topic);
  if (v14)
  {
    v15 = v14;
    if (qword_1000CFAB8 != -1)
      swift_once(&qword_1000CFAB8, sub_10006CC6C);
    v16 = sub_1000187DC();
    sub_1000096EC(v16, (uint64_t)qword_1000DDAA0);
    v17 = sub_100018974(v15);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v47 = v1;
      v20 = (uint8_t *)sub_100018554(12);
      v21 = sub_100018554(32);
      v50[0] = v21;
      *(_DWORD *)v20 = 136315138;
      sub_100018A3C();
      sub_100018B60();
      v23 = sub_100018D38(v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v23, v24, v20 + 4, v20 + 12);
      sub_100018A58(v15);
      sub_100018948((void *)&_mh_execute_header, v18, v19, "Did receive push notification for topic %s", v20);
      sub_100018940(v21);
      sub_10000A818(v21);
      v25 = (uint64_t)v20;
      v1 = v47;
      sub_10000A818(v25);

    }
    else
    {

      sub_100018540(v15);
    }
    if (v48 == 0xD000000000000011 && v15 == 0x80000001000A5730
      || (sub_100018830(0xD000000000000011, 0x80000001000A5730, v48) & 1) != 0)
    {
      sub_10001883C();
      v31 = type metadata accessor for TaskPriority(0);
      sub_10000964C(v11, 1, 1, v31);
      v32 = sub_10000A748((uint64_t)&unk_1000C3E08, 24);
      swift_unknownObjectWeakInit(v32 + 16, v1);
      v33 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C3E80, 48);
      v33[2] = 0;
      v33[3] = 0;
      v33[4] = v32;
      v33[5] = v3;
      v34 = v3;
      v35 = sub_100043B28(v11, (uint64_t)&unk_1000D0588, (uint64_t)v33);
      swift_release(v35);
LABEL_20:
      sub_10000A668();
      return;
    }
    if ((v48 != 0xD000000000000020 || v15 != 0x80000001000A5750)
      && (sub_100018830(0xD000000000000020, 0x80000001000A5750, v48) & 1) == 0)
    {
      v39 = sub_100018A3C();
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)sub_100018554(12);
        v43 = sub_100018554(32);
        v50[0] = v43;
        *(_DWORD *)v42 = 136315138;
        sub_100018A3C();
        sub_100018B60();
        v45 = sub_100018D38(v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, v46, v42 + 4, v42 + 12);
        sub_100018A58(v15);
        sub_100018948((void *)&_mh_execute_header, v40, v41, "Topic not supported: %s", v42);
        sub_100018940(v43);
        sub_10000A818(v43);
        sub_10000A818((uint64_t)v42);

      }
      else
      {

        sub_100018540(v15);
      }
      goto LABEL_20;
    }
    sub_10001883C();
    sub_10000AE14(v1 + OBJC_IVAR____TtC7sportsd11ApsListener_messageProcessing, (uint64_t)v50);
    sub_1000073CC(v50, v50[3]);
    sub_100017DE4(v3);
    if (v36)
    {
      v37 = v36;
      v38 = type metadata accessor for Date(0);
      sub_10000964C(v7, 1, 1, v38);
      sub_10009C1BC(v37, 1, v7, (uint64_t)nullsub_1, 0);
      sub_1000185B4();
      sub_10000A47C(v7, &qword_1000D0570);
      sub_100007618(v50);
      goto LABEL_20;
    }
    __break(1u);
  }
  else
  {
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v26 = sub_1000187DC();
    v27 = sub_1000096EC(v26, (uint64_t)qword_1000DDAB8);
    v49 = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.debug.getter(v49);
    if (os_log_type_enabled(v49, v28))
    {
      v29 = (uint8_t *)sub_100018554(2);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v28, "This message has no topic", v29, 2u);
      sub_10000A818((uint64_t)v29);
    }
    sub_10000A668();

  }
}

void sub_10000EBC8()
{
  char *v0;
  double *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;

  v2 = v0;
  v3 = type metadata accessor for CloudChannelPreferences.AuditStrategy(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100018AD8();
  static CloudChannelPreferences.subscriptionAuditStrategy.getter();
  if ((*(unsigned int (**)(double *, uint64_t))(v4 + 88))(v1, v3) == enum case for CloudChannelPreferences.AuditStrategy.nextPush(_:))
  {
    sub_100018D78((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96));
    v5 = *v1;
    v6 = OBJC_IVAR____TtC7sportsd11ApsListener_cloudChannelAuditDebouncer;
    v7 = *(id *)&v2[OBJC_IVAR____TtC7sportsd11ApsListener_cloudChannelAuditDebouncer];
    if (v7)
      v7 = objc_msgSend(v7, "invalidate");
    sub_100018DF0((uint64_t)v7, &qword_1000D0590, NSTimer_ptr);
    v8 = sub_10000A748((uint64_t)&unk_1000C3EA8, 24);
    *(_QWORD *)(v8 + 16) = v2;
    v9 = v2;
    v10 = sub_10000F958(0, (uint64_t)sub_1000183D8, v8, v5);
    v11 = *(void **)&v2[v6];
    *(_QWORD *)&v2[v6] = v10;

    v12 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v13 = *(_QWORD *)&v2[v6];
    if (v13)
    {
      v14 = v12;
      objc_msgSend(v12, "addTimer:forMode:", v13, NSRunLoopCommonModes);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_100018D78((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
}

uint64_t sub_10000ED2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[10] = a4;
  v5[11] = a5;
  v6 = sub_10000738C(&qword_1000D0570);
  v5[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000ED88, 0, 0);
}

uint64_t sub_10000ED88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 80) + 16;
  sub_100018E20(v1, v0 + 56);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  *(_QWORD *)(v0 + 104) = Strong;
  if (Strong)
  {
    if (qword_1000CFAF0 != -1)
      swift_once(&qword_1000CFAF0, sub_10006CE20);
    *(_QWORD *)(v0 + 112) = qword_1000DDB48;
    return sub_1000184B8();
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10000EE1C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 120) = sub_10006CEA4() & 1;
  sub_100018E50();
  return sub_1000184B8();
}

void sub_10000EE54()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _UNKNOWN **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(unsigned __int8 *)(v0 + 120);
  v2 = sub_10000EFD0();
  if (v1 == 1)
  {
    if ((v2 & 1) == 0)
      goto LABEL_11;
    v3 = *(_QWORD *)(v0 + 104);
    v4 = OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection;
    v5 = *(void **)(v3 + OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection);
    if (!v5)
      goto LABEL_11;
    sub_100017E48((uint64_t)&off_1000C2928, v5, (SEL *)&selRef__setEnabledTopics_);
    v6 = *(void **)(v3 + v4);
    if (!v6)
      goto LABEL_11;
    v7 = &off_1000C2958;
  }
  else
  {
    if ((v2 & 1) != 0)
      goto LABEL_11;
    v8 = *(_QWORD *)(v0 + 104);
    v9 = OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection;
    v10 = *(void **)(v8 + OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection);
    if (!v10)
      goto LABEL_11;
    sub_100017E48((uint64_t)_swiftEmptyArrayStorage, v10, (SEL *)&selRef__setEnabledTopics_);
    v6 = *(void **)(v8 + v9);
    if (!v6)
      goto LABEL_11;
    v7 = &off_1000C2988;
  }
  sub_100017E48((uint64_t)v7, v6, (SEL *)&selRef__setOpportunisticTopics_);
LABEL_11:
  v11 = *(void **)(v0 + 88);
  sub_10000AE14(*(_QWORD *)(v0 + 104) + OBJC_IVAR____TtC7sportsd11ApsListener_messageProcessing, v0 + 16);
  sub_1000073CC((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  sub_100017DE4(v11);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)(v0 + 96);
    v15 = *(void **)(v0 + 104);
    v16 = type metadata accessor for Date(0);
    sub_10000964C(v14, 1, 1, v16);
    sub_10009C1BC(v13, 0, v14, (uint64_t)nullsub_1, 0);
    sub_100018574();

    sub_100018BB0(v17, &qword_1000D0570);
    sub_100007618((_QWORD *)(v0 + 16));
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    (*(void (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10000EFD0()
{
  uint64_t v0;
  void *v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection);
  if (!v1)
    return 0;
  result = sub_100017EA4(v1);
  if (result)
  {
    v3 = *(_QWORD *)(result + 16);
    swift_bridgeObjectRelease(result);
    return v3 == 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000F080(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v22[4];

  v3 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  sub_10000964C((uint64_t)v5, 1, 1, v6);
  v7 = (_QWORD *)swift_allocObject(&unk_1000C3EF8, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = a2;
  v9 = sub_100009658((uint64_t)v5, 1, v6);
  v10 = a2;
  if (v9 == 1)
  {
    sub_10000A47C((uint64_t)v5, &qword_1000D0578);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  if (v12 | v11)
  {
    v22[0] = 0;
    v22[1] = 0;
    v19 = v22;
    v22[2] = v11;
    v22[3] = v12;
  }
  else
  {
    v19 = 0;
  }
  v20 = swift_task_create(v13, v19, (char *)&type metadata for () + 8, &unk_1000D05A0, v7);
  return swift_release(v20);
}

uint64_t sub_10000F220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10000F238, 0, 0);
}

uint64_t sub_10000F238()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 24) = sub_100018A88();
  *(_QWORD *)(v0 + 32) = sub_100018A80();
  sub_100018734(&qword_1000D03F0);
  sub_100018A00(v1);
  sub_1000189F4();
  sub_1000188E4();
  return sub_1000184D0();
}

uint64_t sub_10000F2A4()
{
  _QWORD *v0;

  v0[5] = dispatch thunk of CloudChannelSubscriptionManager.audit(clearExpiredEntries:)(1);
  v0[6] = 0;
  swift_release(v0[4]);
  sub_100018E50();
  return sub_1000184D0();
}

uint64_t sub_10000F300()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  static CloudChannelSubscriptionManager.topic.getter();
  v0[7] = v1;
  v2 = (uint64_t **)swift_task_alloc(dword_1000D0404);
  v0[8] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_10000F368;
  v3 = sub_100018DF8(v0[5]);
  return sub_10000F424(v3, v4, v5);
}

uint64_t sub_10000F368()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(void);

  sub_1000185FC();
  sub_100018994(v2);
  *(_QWORD *)(v0 + 72) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    sub_100018E50();
    return sub_1000184AC();
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
    sub_1000061E8();
    v5 = (uint64_t (*)(void))sub_1000186B0();
    return sub_1000184F0(v5);
  }
}

uint64_t sub_10000F3C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000F3F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  sub_1000061E8();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000F424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = sub_1000187DC();
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = sub_100018850(v6);
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  v4[11] = qword_1000DD9B0;
  v7 = (_QWORD *)swift_task_alloc(dword_1000D03FC);
  v4[12] = v7;
  v8 = sub_100018784(v7, (uint64_t)sub_10000F4BC);
  return sub_100018520(v8, v9);
}

uint64_t sub_10000F4BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 96);
  v4 = *v2;
  *(_QWORD *)(v4 + 104) = a1;
  *(_QWORD *)(v4 + 112) = v1;
  sub_10001872C(v3);
  if (!v1)
    return sub_1000184AC();
  swift_task_dealloc(*(_QWORD *)(v4 + 80));
  return sub_1000184F0(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_10000F524()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  os_log_type_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;

  v3 = *(_QWORD *)(v0 + 104);
  if (!v3)
  {
    v8 = _swiftEmptyArrayStorage;
    goto LABEL_22;
  }
  sub_100018D88();
  if (v5)
  {
    sub_10000A834();
    v6 = sub_10001898C();
    if (v6)
      goto LABEL_4;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 16);
    sub_10000A834();
    if (v6)
    {
LABEL_4:
      if (v6 < 1)
      {
        __break(1u);
        goto LABEL_48;
      }
      v7 = *(_QWORD *)(v0 + 104) & 0xC000000000000001;
      v8 = _swiftEmptyArrayStorage;
      do
      {
        if (v7)
          v9 = (void *)sub_100018844();
        else
          v9 = sub_10001887C(v3);
        sub_100018D6C(v9);
        sub_100018764();
        if (v2)
        {
          if ((sub_100018BE0() & 1) == 0)
          {
            sub_10001857C();
            v8 = v13;
          }
          v10 = v8[2];
          if (v10 >= v8[3] >> 1)
          {
            sub_1000185BC();
            v8 = v14;
          }
          v8[2] = v10 + 1;
          v11 = &v8[2 * v10];
          v11[4] = v1;
          v11[5] = v2;
        }
        sub_100018BA4();
      }
      while (!v12);
      goto LABEL_21;
    }
  }
  v8 = _swiftEmptyArrayStorage;
LABEL_21:
  sub_100018540(v3);
LABEL_22:
  v15 = *(_QWORD *)(v76 + 32);
  sub_10000A834();
  v16 = sub_100015D18((uint64_t)v8, v15);
  sub_100018A44();
  v17 = (unint64_t)sub_1000121AC(v16);
  *(_QWORD *)(v76 + 120) = v17;
  sub_1000188AC();
  if (v17 >> 62)
  {
    sub_1000185C8();
    v18 = sub_100018C80();
    sub_100018574();
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v19 = v76;
  if (!v18)
  {
    sub_100018574();
    sub_100018B58();
    return sub_1000186F4(*(uint64_t (**)(void))(v76 + 8));
  }
  if (qword_1000CFAE0 != -1)
    swift_once(&qword_1000CFAE0, sub_10006CD0C);
  v20 = *(_QWORD *)(v76 + 80);
  v21 = sub_1000096EC(*(_QWORD *)(v76 + 64), (uint64_t)qword_1000DDB18);
  sub_100018A0C(v21);
  v22 = sub_100018974(v17);
  v23 = (void *)Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  if (!sub_100018B70(v24))
  {
    v37 = *(_QWORD *)(v76 + 72);
    v36 = *(_QWORD *)(v76 + 80);
    v38 = *(_QWORD *)(v76 + 64);
    sub_100018540(v17);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
LABEL_45:
    v59 = (_QWORD *)swift_task_alloc(dword_1000D043C);
    *(_QWORD *)(v19 + 128) = v59;
    sub_10001897C(v59, (uint64_t)sub_10000F8E8);
    return sub_100018710();
  }
  HIDWORD(v69) = v20;
  v25 = (_DWORD *)sub_100018554(12);
  v26 = sub_100018554(32);
  v66 = v26;
  *v25 = 136315138;
  if (v17 >> 62)
  {
    sub_1000185C8();
    v34 = sub_100018C80();
    v26 = sub_100018574();
  }
  else
  {
    v34 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v34)
  {
LABEL_44:
    sub_100018798(v26, v27, v28, v29, v30, v31, v32, v33, v60, v63, v66, v69, (uint64_t)v25, (uint64_t)v23, v76 + 32, v76);
    sub_10000738C(&qword_1000D0440);
    sub_10000A40C((unint64_t *)&qword_1000D0448, &qword_1000D0440);
    sub_1000189B8(v42);
    v43 = sub_100018C30();
    sub_100018AF0(v43, v44, v45, v46, v47, v48, v49, v50);
    sub_1000188CC(v51, v52, v53, v54, v55, v56, v57, v58, v61, v64, v67, v70, v72, v73, v75);
    sub_100018D80();
    sub_100018540(v17);
    sub_100018948((void *)&_mh_execute_header, v74, v71, "unsubscribing from channels [%s]", v2);
    sub_100018940(v68);
    sub_10000A818(v68);
    sub_10000A818((uint64_t)v2);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v65, v62);
    goto LABEL_45;
  }
  sub_100018908();
  if ((v34 & 0x8000000000000000) == 0)
  {
    v2 = 0;
    while (1)
    {
      v39 = (v17 & 0xC000000000000001) != 0 ? (id)sub_100018D58() : sub_10001887C(v17);
      sub_100018288(v39, (SEL *)&selRef_channelID);
      if (!v40)
        goto LABEL_49;
      sub_100018DDC();
      sub_100018D24();
      if (v41)
        sub_1000188F0();
      sub_100018B20();
      if (v12)
        goto LABEL_44;
    }
  }
LABEL_48:
  __break(1u);
LABEL_49:
  result = sub_100018574();
  __break(1u);
  return result;
}

uint64_t sub_10000F8E8(uint64_t a1)
{
  sub_100018644(a1);
  sub_100018950();
  return sub_1000184B8();
}

uint64_t sub_10000F914()
{
  uint64_t *v0;
  void *v1;
  uint64_t (*v2)(void);

  v1 = (void *)v0[17];
  sub_100017F04(v0[15], v0[5], v0[6], v1, (SEL *)&selRef_unsubscribeFromChannels_forTopic_);

  sub_100018B58();
  v2 = (uint64_t (*)(void))sub_1000186B0();
  return sub_1000184C4(v2);
}

id sub_10000F958(char a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  void *v7;
  id v8;
  _QWORD v10[5];
  uint64_t v11;

  v10[4] = a2;
  v11 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10000FA0C;
  v10[3] = &unk_1000C3EC0;
  v7 = _Block_copy(v10);
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "timerWithTimeInterval:repeats:block:", a1 & 1, v7, a4);
  _Block_release(v7);
  swift_release(v11);
  return v8;
}

void sub_10000FA0C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10000FA5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  sub_100013350(a1, v1 + 16);
  if (*(_BYTE *)(v1 + 48))
  {
    if (*(_BYTE *)(v1 + 48) == 1)
    {
      v3 = (_QWORD *)swift_task_alloc(dword_1000D03DC);
      *(_QWORD *)(v1 + 64) = v3;
      v4 = sub_100018A90(v3, (uint64_t)sub_10000FBA8);
      return sub_1000104F4(v4, v5, v6, v7);
    }
    else
    {
      v11 = (_QWORD *)swift_task_alloc(dword_1000D03D4);
      *(_QWORD *)(v1 + 72) = v11;
      v12 = sub_100018A90(v11, (uint64_t)sub_10000FBD4);
      return sub_1000107A4(v12, v13, v14, v15);
    }
  }
  else
  {
    v9 = *(_QWORD *)(v1 + 16);
    v10 = (_QWORD *)swift_task_alloc(dword_1000D03E4);
    *(_QWORD *)(v1 + 56) = v10;
    *v10 = v1;
    v10[1] = sub_10000FB7C;
    return sub_10000FC00(v9);
  }
}

uint64_t sub_10000FB7C()
{
  uint64_t v0;

  sub_1000189A0();
  sub_1000185EC();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000FBA8()
{
  uint64_t v0;

  sub_1000189A0();
  sub_1000185EC();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000FBD4()
{
  uint64_t v0;

  sub_1000189A0();
  sub_1000185EC();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10000FC00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v2[6] = a1;
  v2[7] = v1;
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  v2[8] = qword_1000DD9B0;
  v4 = (_QWORD *)swift_task_alloc(dword_1000D03EC);
  v2[9] = v4;
  *v4 = v2;
  v4[1] = sub_10000FC84;
  return sub_100011308(a1);
}

uint64_t sub_10000FC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  sub_1000185FC();
  sub_100018994(v3);
  *(_QWORD *)(v0 + 80) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return sub_1000184F0(*(uint64_t (**)(void))(v2 + 8));
  else
    return sub_1000184AC();
}

uint64_t sub_10000FCD4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 88) = sub_100018A88();
  *(_QWORD *)(v0 + 96) = sub_100018A80();
  sub_100018734(&qword_1000D03F0);
  sub_100018A00(v1);
  sub_1000189F4();
  sub_1000188E4();
  return sub_1000184D0();
}

uint64_t sub_10000FD40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[10];
  v2 = dispatch thunk of CloudChannelSubscriptionManager.signal(demand:)(v0[6]);
  v0[13] = v1;
  v0[14] = v2;
  v0[15] = v3;
  if (!v1)
    swift_release(v0[12]);
  return sub_1000184D0();
}

uint64_t sub_10000FDAC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  static CloudChannelSubscriptionManager.topic.getter();
  *(_QWORD *)(v0 + 128) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_1000D03FC);
  *(_QWORD *)(v0 + 136) = v2;
  sub_10001897C(v2, (uint64_t)sub_10000FE00);
  v3 = sub_100018884();
  return sub_100018520(v3, v4);
}

uint64_t sub_10000FE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v7 = *v2;
  sub_100018994(&v7);
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_100018574();
    sub_1000185B4();
    return sub_1000184FC((uint64_t (*)(void))v2[1]);
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    sub_100018950();
    return sub_1000184D0();
  }
}

uint64_t sub_10000FE80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  id v7;
  unint64_t v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  if (v0[18])
    v3 = v0[18];
  else
    v3 = (unint64_t)_swiftEmptyArrayStorage;
  if (v3 >> 62)
  {
    sub_100018D64();
    result = sub_10001898C();
    v4 = result;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = sub_100018D64();
  }
  if (!v4)
  {
    v6 = _swiftEmptyArrayStorage;
LABEL_22:
    v14 = v0[14];
    v13 = v0[15];
    sub_100018540(v3);
    sub_100012394((uint64_t)v6);
    v0[19] = sub_10001258C(v14, v15);
    sub_100018E34();
    v16 = sub_1000185C8();
    v17 = sub_100011BE4(v16, v13);
    v0[20] = v17;
    v18 = static CloudChannelSubscriptionManager.topic.getter();
    v20 = v19;
    v0[21] = v19;
    v21 = (_QWORD *)swift_task_alloc(dword_1000D0404);
    v0[22] = v21;
    sub_10001897C(v21, (uint64_t)sub_100010048);
    return sub_10000F424(v17, v18, v20);
  }
  if (v4 >= 1)
  {
    v6 = _swiftEmptyArrayStorage;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
      else
        v7 = sub_10001887C(v3);
      sub_100018A4C(v7);
      sub_100018764();
      if (v2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        {
          sub_100018D0C();
          v6 = v11;
        }
        v8 = v6[2];
        if (v8 >= v6[3] >> 1)
        {
          sub_100018D0C();
          v6 = v12;
        }
        v6[2] = v8 + 1;
        v9 = &v6[2 * v8];
        v9[4] = v1;
        v9[5] = v2;
      }
      sub_100018BA4();
    }
    while (!v10);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_100010048()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1000185FC();
  sub_100018994(v2);
  *(_QWORD *)(v0 + 184) = v1;
  swift_task_dealloc(v3);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    sub_1000061E8();
  }
  return sub_1000184AC();
}

uint64_t sub_1000100AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  static CloudChannelSubscriptionManager.topic.getter();
  v0[24] = v1;
  v2 = (uint64_t **)swift_task_alloc(dword_1000D040C);
  v0[25] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_100010114;
  v3 = sub_100018DF8(v0[14]);
  return sub_1000125DC(v3, v4, v5);
}

uint64_t sub_100010114()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1000185FC();
  sub_100018994(v2);
  *(_QWORD *)(v0 + 208) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_bridgeObjectRelease();
  return sub_1000184AC();
}

uint64_t sub_100010174()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v25;
  uint64_t v26;
  NSObject *log;
  uint64_t v28;
  uint64_t v29;

  if (qword_1000CFAE0 != -1)
    swift_once(&qword_1000CFAE0, sub_10006CD0C);
  v2 = v0[14];
  v1 = v0[15];
  v3 = sub_1000187DC();
  sub_1000096EC(v3, (uint64_t)qword_1000DDB18);
  swift_bridgeObjectRetain_n(v1, 3);
  swift_bridgeObjectRetain_n(v2, 3);
  v4 = sub_10000A834();
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  v7 = sub_100018B38(v6);
  v8 = v0[19];
  v10 = v0[14];
  v9 = v0[15];
  if (v7)
  {
    log = v5;
    v11 = sub_100018554(22);
    v26 = sub_100018554(64);
    *(_DWORD *)v11 = 136315394;
    v0[2] = v10;
    v28 = v8;
    v29 = v26;
    v25 = sub_10000738C(&qword_1000D0410);
    sub_10000A40C(&qword_1000D0418, &qword_1000D0410);
    v13 = v12;
    v14 = sub_10000D2DC();
    v15 = Sequence<>.joined(separator:)(44, 0xE100000000000000, v25, v13, v14);
    sub_100014B44(v15, v16, &v29);
    v0[3] = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v11 + 4, v11 + 12);
    sub_1000061E8();
    sub_100018540(v10);
    sub_100018540(v9);
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v28);
    v0[4] = sub_100011BE4(v18, v9);
    v19 = Sequence<>.joined(separator:)(44, 0xE100000000000000, v25, v13, v14);
    v21 = v20;
    sub_100018A44();
    sub_100014B44(v19, v21, &v29);
    v0[5] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v11 + 14, v11 + 22);
    sub_100018574();
    sub_100018540(v10);
    sub_100018540(v9);
    sub_100018540(v28);
    v5 = log;
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v1, "active channels: [%s], expired channels: [%s]", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v26, 2);
    sub_10000A818(v26);
    sub_10000A818(v11);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[14], 4);
    swift_bridgeObjectRelease_n(v9, 4);
    sub_100018540(v8);
  }

  v23 = (uint64_t (*)(void))sub_1000186B0();
  return v23();
}

uint64_t sub_10001042C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100010458()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1000061E8();
  sub_1000185B4();
  sub_10001883C();
  sub_100018574();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000104AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1000061E8();
  sub_100018574();
  sub_1000185B4();
  return sub_1000184FC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000104F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  sub_100018B8C(a1, a2, a3, a4);
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  *(_QWORD *)(v4 + 56) = qword_1000DD9B0;
  v5 = (_QWORD *)swift_task_alloc(dword_1000D03FC);
  *(_QWORD *)(v4 + 64) = v5;
  v6 = sub_100018784(v5, (uint64_t)sub_100010568);
  return sub_100018520(v6, v7);
}

uint64_t sub_100010568(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 64);
  v4 = *v2;
  *(_QWORD *)(v4 + 72) = a1;
  *(_QWORD *)(v4 + 80) = v1;
  sub_10001872C(v3);
  if (v1)
    return sub_1000184F0(*(uint64_t (**)(void))(v4 + 8));
  else
    return sub_1000184AC();
}

uint64_t sub_1000105C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  id v19;
  _QWORD *v20;

  v3 = v0[9];
  if (!v3)
  {
LABEL_20:
    v19 = objc_allocWithZone((Class)PKPublicChannel);
    sub_10000A834();
    v0[11] = sub_100018C48();
    v20 = (_QWORD *)swift_task_alloc(dword_1000D043C);
    v0[12] = v20;
    *v20 = v0;
    v20[1] = sub_100010748;
    return sub_1000186D8();
  }
  sub_100018D88();
  if (v5)
  {
    sub_10000A834();
    result = sub_10001898C();
    v6 = result;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 16);
    result = sub_10000A834();
  }
  if (!v6)
  {
LABEL_18:
    sub_100018540(v3);
    sub_100018E34();
    sub_100018BE8();
    v17 = *(_QWORD *)(v16 + 16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      v18 = (uint64_t (*)(void))sub_1000186B0();
      return sub_1000186BC(v18);
    }
    goto LABEL_20;
  }
  if (v6 >= 1)
  {
    v8 = v0[9] & 0xC000000000000001;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      if (v8)
        v10 = (void *)sub_100018844();
      else
        v10 = sub_10001887C(v3);
      sub_100018A4C(v10);
      sub_100018764();
      if (v2)
      {
        if ((sub_100018BE0() & 1) == 0)
        {
          sub_10001857C();
          v9 = v14;
        }
        v11 = v9[2];
        if (v11 >= v9[3] >> 1)
        {
          sub_1000185BC();
          v9 = v15;
        }
        v9[2] = v11 + 1;
        v12 = &v9[2 * v11];
        v12[4] = v1;
        v12[5] = v2;
      }
      sub_100018BA4();
    }
    while (!v13);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100010748(uint64_t a1)
{
  sub_100018618(a1);
  sub_100018950();
  return sub_1000184B8();
}

uint64_t sub_100010774()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);

  v2 = sub_100018C68();
  sub_100017F98(v2, v3, v4, v5);

  v6 = (uint64_t (*)(void))sub_1000186B0();
  return sub_1000184F0(v6);
}

uint64_t sub_1000107A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  sub_100018B8C(a1, a2, a3, a4);
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  *(_QWORD *)(v4 + 56) = qword_1000DD9B0;
  v5 = (_QWORD *)swift_task_alloc(dword_1000D03FC);
  *(_QWORD *)(v4 + 64) = v5;
  v6 = sub_100018784(v5, (uint64_t)sub_100010818);
  return sub_100018520(v6, v7);
}

uint64_t sub_100010818(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 64);
  v4 = *v2;
  *(_QWORD *)(v4 + 72) = a1;
  *(_QWORD *)(v4 + 80) = v1;
  sub_10001872C(v3);
  if (v1)
    return sub_1000184F0(*(uint64_t (**)(void))(v4 + 8));
  else
    return sub_1000184AC();
}

uint64_t sub_100010878()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t (*v20)(void);

  v3 = v0[9];
  if (!v3)
  {
LABEL_20:
    v20 = (uint64_t (*)(void))sub_1000186B0();
    return sub_1000186BC(v20);
  }
  sub_100018D88();
  if (v5)
  {
    sub_10000A834();
    result = sub_10001898C();
    v6 = result;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 16);
    result = sub_10000A834();
  }
  if (!v6)
  {
LABEL_18:
    sub_100018540(v3);
    sub_100018E34();
    sub_100018BE8();
    v17 = *(_QWORD *)(v16 + 16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      v18 = objc_allocWithZone((Class)PKPublicChannel);
      sub_10000A834();
      v0[11] = sub_100018C48();
      v19 = (_QWORD *)swift_task_alloc(dword_1000D043C);
      v0[12] = v19;
      *v19 = v0;
      v19[1] = sub_1000109F8;
      return sub_1000186D8();
    }
    goto LABEL_20;
  }
  if (v6 >= 1)
  {
    v8 = v0[9] & 0xC000000000000001;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      if (v8)
        v10 = (void *)sub_100018844();
      else
        v10 = sub_10001887C(v3);
      sub_100018A4C(v10);
      sub_100018764();
      if (v2)
      {
        if ((sub_100018BE0() & 1) == 0)
        {
          sub_10001857C();
          v9 = v14;
        }
        v11 = v9[2];
        if (v11 >= v9[3] >> 1)
        {
          sub_1000185BC();
          v9 = v15;
        }
        v9[2] = v11 + 1;
        v12 = &v9[2 * v11];
        v12[4] = v1;
        v12[5] = v2;
      }
      sub_100018BA4();
    }
    while (!v13);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000109F8(uint64_t a1)
{
  sub_100018618(a1);
  sub_100018950();
  return sub_1000184B8();
}

uint64_t sub_100010A24()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);

  v2 = sub_100018C68();
  sub_100017FEC(v2, v3, v4, v5);

  v6 = (uint64_t (*)(void))sub_1000186B0();
  return sub_1000184F0(v6);
}

uint64_t sub_100010A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  v3[6] = qword_1000DD9B0;
  v4 = (_QWORD *)swift_task_alloc(dword_1000D043C);
  v3[7] = v4;
  *v4 = v3;
  v4[1] = sub_100010AD4;
  return sub_10000E034();
}

uint64_t sub_100010AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  sub_10001872C(v2);
  sub_100018950();
  return sub_1000184B8();
}

uint64_t sub_100010B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = qword_1000DD9B0;
  sub_1000181E4(&qword_1000D03C0, a2, (uint64_t (*)(uint64_t))type metadata accessor for CloudChannelTaskActor);
  v7 = v6;
  v8 = swift_task_alloc(48);
  *(_QWORD *)(v2 + 72) = v8;
  v9 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v4;
  *(_OWORD *)(v8 + 32) = v9;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v2 + 80) = v10;
  v11 = sub_10000738C(&qword_1000D0468);
  *v10 = v2;
  v10[1] = sub_100010C0C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2 + 16, v5, v7, 0xD00000000000001BLL, 0x80000001000A6360, sub_1000180D4, v8, v11);
}

uint64_t sub_100010C0C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1000185FC();
  sub_100018994(v2);
  *(_QWORD *)(v0 + 88) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return sub_1000184AC();
}

uint64_t sub_100010C6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100010CA0()
{
  uint64_t v0;

  sub_1000189B0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100010CD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v10 = sub_10000738C(&qword_1000D0470);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = swift_allocObject(&unk_1000C3E08, 24, 7);
  swift_unknownObjectWeakInit(v13 + 16, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_1000C3E30, v15 + v12, v14 | 7);
  *(_QWORD *)(v16 + 16) = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_10001817C;
  v19 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001127C;
  aBlock[3] = &unk_1000C3E48;
  v17 = _Block_copy(aBlock);
  swift_release(v19);
  sub_100018040(a3, a4, (uint64_t)v17, a2);
  _Block_release(v17);
}

uint64_t sub_100010E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  Swift::String v29;
  void *object;
  unint64_t v31;
  uint64_t v32;
  char *Strong;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  char v45[8];
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[3];
  char v50[8];

  v8 = sub_10000738C(&qword_1000D0478);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CloudChannelError(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char **)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    v43 = a3 + 16;
    swift_errorRetain(a2);
    if (qword_1000CFAE0 != -1)
      swift_once(&qword_1000CFAE0, sub_10006CD0C);
    v15 = type metadata accessor for Logger(0);
    sub_1000096EC(v15, (uint64_t)qword_1000DDB18);
    swift_errorRetain(a2);
    v16 = swift_errorRetain(a2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(12, -1);
      v41 = v12;
      v20 = (uint8_t *)v19;
      v21 = swift_slowAlloc(32, -1);
      v47 = v21;
      v40 = v10;
      *(_DWORD *)v20 = 136315138;
      v42 = a4;
      swift_getErrorValue(a2, v45, v44);
      v22 = Error.localizedDescription.getter(v44[1], v44[2]);
      v24 = v23;
      sub_100014B44(v22, v23, &v47);
      v46 = v25;
      v10 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to fetch registered channels - error: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1);
      swift_slowDealloc(v21, -1, -1);
      v26 = v20;
      v12 = v41;
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v47 = 0;
    v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    swift_bridgeObjectRelease(v48);
    v47 = 0xD00000000000002DLL;
    v48 = 0x80000001000A63A0;
    swift_getErrorValue(a2, v50, v49);
    v29._countAndFlagsBits = Error.localizedDescription.getter(v49[1], v49[2]);
    object = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(object);
    v31 = v48;
    *v14 = v47;
    v14[1] = v31;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for CloudChannelError.failedToFetchRegisteredChannels(_:), v11);
    v32 = v43;
    swift_beginAccess(v43, &v47, 0, 0);
    Strong = (char *)swift_unknownObjectWeakLoadStrong(v32);
    if (Strong)
    {
      v34 = Strong;
      v35 = *(_QWORD *)&Strong[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor];
      if (v35)
      {
        swift_retain(*(_QWORD *)&Strong[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor]);

        (*(void (**)(char *, _QWORD *, uint64_t))(v12 + 16))(v10, v14, v11);
        sub_10000964C((uint64_t)v10, 0, 1, v11);
        sub_10003B4A0((uint64_t)v10);
        swift_release(v35);
        sub_10000A47C((uint64_t)v10, &qword_1000D0478);
      }
      else
      {

      }
    }
    sub_1000181E4((unint64_t *)&unk_1000D0480, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CloudChannelError);
    v37 = swift_allocError(v11, v36, 0, 0);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v12 + 16))(v38, v14, v11);
    v46 = v37;
    v39 = sub_10000738C(&qword_1000D0470);
    CheckedContinuation.resume(throwing:)(&v46, v39);
    swift_errorRelease(a2);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    v47 = a1;
    swift_bridgeObjectRetain(a1);
    v27 = sub_10000738C(&qword_1000D0470);
    return CheckedContinuation.resume(returning:)(&v47, v27);
  }
}

uint64_t sub_10001127C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_100018468(0, &qword_1000D0450, PKPublicChannel_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100011308(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_10000738C(&qword_1000D0478);
  v2[6] = sub_100018850(*(_QWORD *)(v3 - 8));
  v4 = type metadata accessor for CloudChannelSubscription.Demand(0);
  v2[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[8] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v6);
  v2[10] = swift_task_alloc(v6);
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  v2[11] = qword_1000DD9B0;
  return sub_1000184B8();
}

uint64_t sub_1000113B8()
{
  uint64_t v0;

  if (qword_1000CFA80 != -1)
    swift_once(&qword_1000CFA80, sub_100030834);
  *(_QWORD *)(v0 + 96) = qword_1000DDA58;
  return sub_1000184B8();
}

uint64_t sub_100011414()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 112);
  *(_QWORD *)(v0 + 104) = v1;
  swift_retain(v1);
  sub_100018950();
  return sub_1000184B8();
}

uint64_t sub_10001144C()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;

  v3 = v2[13];
  if (v3)
  {
    v4 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v2[14] = v4;
    v5 = sub_10000738C(&qword_1000D0490);
    v6 = sub_10000738C((uint64_t *)&unk_1000D1690);
    *v4 = v2;
    v4[1] = sub_100011618;
    return Task.value.getter(v2 + 3, v3, v5, v6, &protocol self-conformance witness table for Error);
  }
  else
  {
    v2[16] = 0;
    v8 = *(_QWORD *)(v2[4] + 16);
    if (v8)
    {
      sub_1000187FC();
      v9 = enum case for CloudChannelSubscription.Demand.leagues(_:);
      v17 = enum case for CloudChannelSubscription.Demand.all(_:);
      swift_bridgeObjectRetain(v10);
      do
      {
        sub_100018860();
        sub_1000189E0();
        v11 = sub_100018AC8();
        if (v11 == v9)
        {
          sub_100018A6C();
          sub_1000185C8();
          v12 = (void *)sub_100018E5C();
        }
        else if (v11 == v17)
        {
          v13 = sub_1000185C8();
          sub_1000188B4(v13, v14, v15);
          swift_bridgeObjectRelease();
          v12 = v19;
        }
        else
        {
          sub_1000185C8();
          sub_100018C98();
          v12 = v1;
        }
        sub_100018B48();
        sub_100018574();
        v0 += v18;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = &_swiftEmptySetSingleton;
    }
    v2[17] = v12;
    v2[18] = sub_100018A88();
    v2[19] = sub_100018A80();
    sub_100018734(&qword_1000D03F0);
    sub_100018B10(v16);
    sub_1000189F4();
    sub_1000188E4();
    return sub_100018694();
  }
}

uint64_t sub_100011618()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1000185FC();
  sub_100018994(v2);
  *(_QWORD *)(v0 + 120) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_bridgeObjectRelease();
  return sub_1000184AC();
}

uint64_t sub_100011678()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  void *v15;

  swift_release(v2[13]);
  v2[16] = v2[15];
  v3 = *(_QWORD *)(v2[4] + 16);
  if (v3)
  {
    sub_1000187FC();
    v4 = enum case for CloudChannelSubscription.Demand.leagues(_:);
    v13 = enum case for CloudChannelSubscription.Demand.all(_:);
    swift_bridgeObjectRetain(v5);
    do
    {
      sub_100018860();
      sub_1000189E0();
      v6 = sub_100018AC8();
      if (v6 == v4)
      {
        sub_100018A6C();
        sub_1000185C8();
        v7 = (void *)sub_100018E5C();
      }
      else if (v6 == v13)
      {
        v8 = sub_1000185C8();
        sub_1000188B4(v8, v9, v10);
        swift_bridgeObjectRelease();
        v7 = v15;
      }
      else
      {
        sub_1000185C8();
        sub_100018C98();
        v7 = v1;
      }
      sub_100018B48();
      sub_100018574();
      v0 += v14;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = &_swiftEmptySetSingleton;
  }
  v2[17] = v7;
  v2[18] = sub_100018A88();
  v2[19] = sub_100018A80();
  sub_100018734(&qword_1000D03F0);
  sub_100018B10(v11);
  sub_1000189F4();
  sub_1000188E4();
  return sub_100018694();
}

uint64_t sub_1000117C8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[16];
  v0[21] = dispatch thunk of CloudChannelSubscriptionManager.readChannelMap()();
  v0[22] = v1;
  swift_release(v0[19]);
  if (v1)
    sub_1000061E8();
  return sub_1000184D0();
}

uint64_t sub_10001183C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v1 = v0[21];
  v2 = v0[17];
  sub_10000A834();
  sub_100011D64(v2, v1);
  v4 = v3;
  sub_1000061E8();
  sub_1000185B4();
  if ((v4 & 1) != 0)
  {
    v5 = (_QWORD *)swift_task_alloc(dword_1000D0F84);
    v0[23] = v5;
    *v5 = v0;
    v5[1] = sub_1000118D4;
    return sub_100030870();
  }
  else
  {
    sub_100018E44();
    sub_1000189B0();
    sub_100018E2C();
    v7 = (uint64_t (*)(void))sub_1000186B0();
    return sub_1000184FC(v7);
  }
}

uint64_t sub_1000118D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000185FC();
  v2 = v0[23];
  v0[24] = v3;
  v0[25] = v1;
  sub_10001872C(v2);
  return sub_1000184AC();
}

uint64_t sub_10001192C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 208) = static CloudChannelSubscriptionManager.shared.getter();
  v1 = sub_100018884();
  dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  sub_1000189F4();
  sub_1000188E4();
  return sub_1000184D0();
}

uint64_t sub_100011980()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v3)(void);

  v1 = v0[25];
  dispatch thunk of CloudChannelSubscriptionManager.updateChannelMap(_:)(v0[24]);
  v0[27] = v1;
  if (v1)
    return sub_1000184D0();
  swift_bridgeObjectRelease();
  sub_1000188AC();
  sub_100018E44();
  sub_1000189B0();
  sub_100018E2C();
  v3 = (uint64_t (*)(void))sub_1000186B0();
  return sub_1000184FC(v3);
}

uint64_t sub_1000119F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  sub_100018E2C();
  sub_100018C28();
  return sub_1000184FC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100011A3C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor))
  {
    sub_100018770();
    sub_100018E3C();
    sub_10000738C((uint64_t *)&unk_1000D1690);
    v1 = sub_100018A60();
    v2 = sub_1000185D0(v1);
    sub_100018670(v2);
    v3 = sub_1000188AC();
    sub_100018BB0(v3, &qword_1000D0478);
  }
  sub_100018DE8();
  sub_100018AAC();
  sub_1000189B0();
  sub_100018C28();
  return sub_10001855C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100011AC4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor))
  {
    sub_100018770();
    sub_100018E3C();
    sub_10000738C((uint64_t *)&unk_1000D1690);
    v1 = sub_100018A60();
    v2 = sub_1000185D0(v1);
    sub_100018670(v2);
    v3 = sub_1000188AC();
    sub_100018BB0(v3, &qword_1000D0478);
  }
  sub_100018DE8();
  sub_100018AAC();
  sub_1000189B0();
  sub_100018C28();
  return sub_10001855C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100011B4C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 208));
  sub_1000061E8();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor))
  {
    sub_100018770();
    sub_100018E3C();
    sub_10000738C((uint64_t *)&unk_1000D1690);
    v1 = sub_100018A60();
    v2 = sub_1000185D0(v1);
    sub_100018670(v2);
    v3 = sub_1000188AC();
    sub_100018BB0(v3, &qword_1000D0478);
  }
  sub_100018DE8();
  sub_100018AAC();
  sub_1000189B0();
  sub_100018C28();
  return sub_10001855C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100011BE4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_1000165E8(&v17, v15, v16);
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v7 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v18;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100011D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int64_t v55;

  v47 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v49 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v48 = (char *)&v42 - v6;
  v7 = sub_10000738C(&qword_1000D0498);
  v8 = __chkstk_darwin(v7);
  v51 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CloudChannelSubscription.CacheValue(0, v8);
  v53 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v45 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 56);
  v43 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v44 = (unint64_t)(v13 + 63) >> 6;
  v52 = a1;
  swift_bridgeObjectRetain(a1);
  v16 = 0;
  v46 = v10;
  v17 = v53;
  v18 = v49;
  while (1)
  {
    if (v15)
    {
      v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v20 = v19 | (v16 << 6);
      v21 = (uint64_t)v51;
      goto LABEL_21;
    }
    v22 = v16 + 1;
    v21 = (uint64_t)v51;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v44)
      goto LABEL_27;
    v23 = *(_QWORD *)(v43 + 8 * v22);
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v44)
        goto LABEL_27;
      v23 = *(_QWORD *)(v43 + 8 * v16);
      if (!v23)
      {
        v16 = v22 + 2;
        if (v22 + 2 >= v44)
          goto LABEL_27;
        v23 = *(_QWORD *)(v43 + 8 * v16);
        if (!v23)
        {
          v16 = v22 + 3;
          if (v22 + 3 >= v44)
            goto LABEL_27;
          v23 = *(_QWORD *)(v43 + 8 * v16);
          if (!v23)
          {
            v24 = v22 + 4;
            if (v24 >= v44)
              goto LABEL_27;
            v23 = *(_QWORD *)(v43 + 8 * v24);
            v16 = v24;
            if (!v23)
              break;
          }
        }
      }
    }
LABEL_20:
    v15 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_21:
    v25 = (uint64_t *)(*(_QWORD *)(v52 + 48) + 16 * v20);
    v26 = v25[1];
    if (!*(_QWORD *)(a2 + 16))
    {
      sub_10000964C(v21, 1, 1, v10);
      swift_bridgeObjectRetain(v26);
LABEL_29:
      sub_10000A47C(v21, &qword_1000D0498);
      swift_bridgeObjectRelease();
      swift_release(v52);
      swift_bridgeObjectRelease();
      return;
    }
    v27 = *v25;
    swift_bridgeObjectRetain_n(v25[1], 2);
    v28 = sub_100015050(v27, v26);
    if ((v29 & 1) != 0)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v53 + 16))(v21, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v53 + 72) * v28, v10);
      v30 = 0;
    }
    else
    {
      v30 = 1;
    }
    sub_10000964C(v21, v30, 1, v10);
    swift_bridgeObjectRelease();
    if (sub_100009658(v21, 1, v10) == 1)
      goto LABEL_29;
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 32);
    v55 = v16;
    v32 = v45;
    v33 = v31(v45, v21, v10);
    v34 = v48;
    v35 = CloudChannelSubscription.CacheValue.expiration.getter(v33);
    static Date.now.getter(v35);
    sub_1000181E4(&qword_1000D04A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    v36 = v47;
    v54 = dispatch thunk of static Comparable.< infix(_:_:)(v34, v18, v47, v37);
    v38 = a2;
    v39 = *(void (**)(char *, uint64_t))(v50 + 8);
    v39(v18, v36);
    v40 = v34;
    v10 = v46;
    v39(v40, v36);
    a2 = v38;
    v41 = v32;
    v16 = v55;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v41, v10);
    swift_bridgeObjectRelease();
    if ((v54 & 1) != 0)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      swift_release(v52);
      return;
    }
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v44)
      goto LABEL_27;
    v23 = *(_QWORD *)(v43 + 8 * v16);
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_32:
  __break(1u);
}

_QWORD *sub_1000121AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    objc_allocWithZone((Class)PKPublicChannel);
    sub_100018A3C();
    result = sub_100013434(v15, v16);
    if (result)
    {
      v17 = result;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v19 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      result = (_QWORD *)specialized Array._endMutation()(v20);
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return _swiftEmptyArrayStorage;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100012394(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[3];

  v4[2] = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1 + 40;
    do
    {
      sub_10001896C();
      sub_100018D94(v4);
      swift_bridgeObjectRelease(v4[1]);
      v3 += 16;
      --v2;
    }
    while (v2);
    sub_1000185B4();
  }
  else
  {
    sub_1000185B4();
  }
  sub_100018A20();
}

_QWORD *sub_100012420(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11[2];
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;

  v12 = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  result = sub_100073004(v13, a1);
  v3 = v13[1];
  v4 = v13[3];
  v5 = v14;
  v6 = (unint64_t)(v13[2] + 64) >> 6;
  if (!v14)
    goto LABEL_3;
LABEL_2:
  v5 &= v5 - 1;
  while (1)
  {
    sub_10001896C();
    sub_100018D94(v11);
    result = (_QWORD *)swift_bridgeObjectRelease(v11[1]);
    if (v5)
      goto LABEL_2;
LABEL_3:
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    if (v7 >= v6)
      goto LABEL_21;
    v8 = *(_QWORD *)(v3 + 8 * v7);
    v9 = v4 + 1;
    if (!v8)
    {
      v9 = v4 + 2;
      if (v4 + 2 >= v6)
        goto LABEL_21;
      v8 = *(_QWORD *)(v3 + 8 * v9);
      if (!v8)
      {
        v9 = v4 + 3;
        if (v4 + 3 >= v6)
          goto LABEL_21;
        v8 = *(_QWORD *)(v3 + 8 * v9);
        if (!v8)
        {
          v9 = v4 + 4;
          if (v4 + 4 >= v6)
            goto LABEL_21;
          v8 = *(_QWORD *)(v3 + 8 * v9);
          if (!v8)
          {
            v9 = v4 + 5;
            if (v4 + 5 >= v6)
              goto LABEL_21;
            v8 = *(_QWORD *)(v3 + 8 * v9);
            if (!v8)
            {
              v10 = v4 + 6;
              while (v10 < v6)
              {
                v8 = *(_QWORD *)(v3 + 8 * v10++);
                if (v8)
                {
                  v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              sub_1000187F4();
              return (_QWORD *)v12;
            }
          }
        }
      }
    }
LABEL_18:
    v5 = (v8 - 1) & v8;
    v4 = v9;
  }
  __break(1u);
  return result;
}

unint64_t *sub_10001258C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16) >> 3)
    return sub_100016B4C(a1, a2);
  sub_100016758(a1);
  return (unint64_t *)a2;
}

uint64_t sub_1000125DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = sub_1000187DC();
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = sub_100018850(v6);
  if (qword_1000CFA20 != -1)
    swift_once(&qword_1000CFA20, sub_10000D538);
  v4[11] = qword_1000DD9B0;
  v7 = (_QWORD *)swift_task_alloc(dword_1000D03FC);
  v4[12] = v7;
  v8 = sub_100018784(v7, (uint64_t)sub_100012674);
  return sub_100018520(v8, v9);
}

uint64_t sub_100012674(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 96);
  v4 = *v2;
  *(_QWORD *)(v4 + 104) = a1;
  *(_QWORD *)(v4 + 112) = v1;
  sub_10001872C(v3);
  if (!v1)
    return sub_1000184AC();
  swift_task_dealloc(*(_QWORD *)(v4 + 80));
  return sub_1000184F0(*(uint64_t (**)(void))(v4 + 8));
}

uint64_t sub_1000126DC()
{
  uint64_t v0;
  uint64_t v1;
  uint8_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  os_log_type_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;

  v3 = *(_QWORD *)(v0 + 104);
  if (!v3)
    goto LABEL_21;
  sub_100018D88();
  if (v5)
  {
    sub_10000A834();
    v6 = sub_10001898C();
    if (v6)
      goto LABEL_4;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 16);
    sub_10000A834();
    if (v6)
    {
LABEL_4:
      if (v6 < 1)
      {
        __break(1u);
        goto LABEL_47;
      }
      v7 = *(_QWORD *)(v0 + 104) & 0xC000000000000001;
      v8 = _swiftEmptyArrayStorage;
      do
      {
        if (v7)
          v9 = (void *)sub_100018844();
        else
          v9 = sub_10001887C(v3);
        sub_100018D6C(v9);
        sub_100018764();
        if (v2)
        {
          if ((sub_100018BE0() & 1) == 0)
          {
            sub_10001857C();
            v8 = v13;
          }
          v10 = v8[2];
          if (v10 >= v8[3] >> 1)
          {
            sub_1000185BC();
            v8 = v14;
          }
          v8[2] = v10 + 1;
          v11 = &v8[2 * v10];
          v11[4] = v1;
          v11[5] = v2;
        }
        sub_100018BA4();
      }
      while (!v12);
    }
  }
  sub_100018540(v3);
LABEL_21:
  sub_10000A834();
  sub_1000168F0();
  v16 = v15;
  sub_100018A44();
  v17 = (unint64_t)sub_1000121AC(v16);
  *(_QWORD *)(v76 + 120) = v17;
  sub_1000188AC();
  if (v17 >> 62)
  {
    sub_1000185C8();
    v18 = sub_100018C80();
    sub_100018574();
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v19 = v76;
  if (!v18)
  {
    sub_100018574();
    sub_100018B58();
    return sub_1000186F4(*(uint64_t (**)(void))(v76 + 8));
  }
  if (qword_1000CFAE0 != -1)
    swift_once(&qword_1000CFAE0, sub_10006CD0C);
  v20 = *(_QWORD *)(v76 + 80);
  v21 = sub_1000096EC(*(_QWORD *)(v76 + 64), (uint64_t)qword_1000DDB18);
  sub_100018A0C(v21);
  v22 = sub_100018974(v17);
  v23 = (void *)Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  if (!sub_100018B70(v24))
  {
    v37 = *(_QWORD *)(v76 + 72);
    v36 = *(_QWORD *)(v76 + 80);
    v38 = *(_QWORD *)(v76 + 64);
    sub_100018540(v17);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
LABEL_44:
    v59 = (_QWORD *)swift_task_alloc(dword_1000D043C);
    *(_QWORD *)(v19 + 128) = v59;
    sub_10001897C(v59, (uint64_t)sub_100012AA0);
    return sub_100018710();
  }
  HIDWORD(v69) = v20;
  v25 = (_DWORD *)sub_100018554(12);
  v26 = sub_100018554(32);
  v66 = v26;
  *v25 = 136315138;
  if (v17 >> 62)
  {
    sub_1000185C8();
    v34 = sub_100018C80();
    v26 = sub_100018574();
  }
  else
  {
    v34 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v34)
  {
LABEL_43:
    sub_100018798(v26, v27, v28, v29, v30, v31, v32, v33, v60, v63, v66, v69, (uint64_t)v25, (uint64_t)v23, v76 + 32, v76);
    sub_10000738C(&qword_1000D0440);
    sub_10000A40C((unint64_t *)&qword_1000D0448, &qword_1000D0440);
    sub_1000189B8(v42);
    v43 = sub_100018C30();
    sub_100018AF0(v43, v44, v45, v46, v47, v48, v49, v50);
    sub_1000188CC(v51, v52, v53, v54, v55, v56, v57, v58, v61, v64, v67, v70, v72, v73, v75);
    sub_100018D80();
    sub_100018540(v17);
    sub_100018948((void *)&_mh_execute_header, v74, v71, "subscribing to channels [%s]", v2);
    sub_100018940(v68);
    sub_10000A818(v68);
    sub_10000A818((uint64_t)v2);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v65, v62);
    goto LABEL_44;
  }
  sub_100018908();
  if ((v34 & 0x8000000000000000) == 0)
  {
    v2 = 0;
    while (1)
    {
      v39 = (v17 & 0xC000000000000001) != 0 ? (id)sub_100018D58() : sub_10001887C(v17);
      sub_100018288(v39, (SEL *)&selRef_channelID);
      if (!v40)
        goto LABEL_48;
      sub_100018DDC();
      sub_100018D24();
      if (v41)
        sub_1000188F0();
      sub_100018B20();
      if (v12)
        goto LABEL_43;
    }
  }
LABEL_47:
  __break(1u);
LABEL_48:
  result = sub_100018574();
  __break(1u);
  return result;
}

uint64_t sub_100012AA0(uint64_t a1)
{
  sub_100018644(a1);
  sub_100018950();
  return sub_1000184B8();
}

uint64_t sub_100012ACC()
{
  uint64_t *v0;
  void *v1;
  uint64_t (*v2)(void);

  v1 = (void *)v0[17];
  sub_100017F04(v0[15], v0[5], v0[6], v1, (SEL *)&selRef_subscribeToChannels_forTopic_);

  sub_100018B58();
  v2 = (uint64_t (*)(void))sub_1000186B0();
  return sub_1000184C4(v2);
}

void sub_100012B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = 0;
  v6 = a1 + 40;
  v7 = -*(_QWORD *)(a1 + 16);
  v15 = a1 + 40;
LABEL_2:
  v8 = v5 + 1;
  v9 = (uint64_t *)(v6 + 16 * v5);
  while (1)
  {
    if (v7 + v8 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v5 = v8;
    if ((unint64_t)(v8 - 1) >= *(_QWORD *)(a1 + 16))
      break;
    v10 = *(v9 - 1);
    v11 = *v9;
    if (v10 == a2 && v11 == a3)
    {
      v10 = a2;
      v11 = a3;
LABEL_12:
      sub_10000A848();
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_100015688();
      v13 = _swiftEmptyArrayStorage[2];
      if (v13 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_100015688();
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v14 = &_swiftEmptyArrayStorage[2 * v13];
      v14[4] = v10;
      v14[5] = v11;
      v6 = v15;
      goto LABEL_2;
    }
    ++v8;
    v9 += 2;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, a2, a3, 0) & 1) != 0)
      goto LABEL_12;
  }
  __break(1u);
}

void sub_100012C74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  sub_10000A758();
  v1 = v0;
  v3 = v2;
  sub_10000738C(&qword_1000D0478);
  sub_100018BD0();
  __chkstk_darwin(v4);
  sub_10000A7D4();
  v41 = (_QWORD *)(v6 - v5);
  if (v3)
  {
    if (v3 >> 62)
      goto LABEL_32;
    v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    sub_10001896C();
    for (; v7; v7 = sub_10001898C())
    {
      v44 = v3 & 0xC000000000000001;
      v42 = OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor;
      v8 = 4;
      v40 = enum case for CloudChannelError.failedToSubscribe(_:);
      v43 = v7;
      while (1)
      {
        v9 = v44 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v3) : *(id *)(v3 + 8 * v8);
        v10 = v9;
        if (__OFADD__(v8 - 4, 1))
          break;
        v11 = sub_100018288(v9, (SEL *)&selRef_channelID);
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        v48 = v13;
        if (v12)
          v14 = v12;
        else
          v14 = (void *)0xE000000000000000;
        v15 = sub_100018288(v10, (SEL *)&selRef_pushTopic);
        if (v16)
          v17 = v15;
        else
          v17 = 0;
        v46 = v17;
        if (v16)
          v18 = v16;
        else
          v18 = (void *)0xE000000000000000;
        v47 = objc_msgSend(v10, "failureReason");
        if (qword_1000CFAE0 != -1)
          swift_once(&qword_1000CFAE0, sub_10006CD0C);
        v19 = sub_1000187DC();
        sub_1000096EC(v19, (uint64_t)qword_1000DDB18);
        sub_100018974((uint64_t)v18);
        v20 = sub_100018974((uint64_t)v14);
        v21 = Logger.logObject.getter(v20);
        v22 = static os_log_type_t.error.getter();
        v45 = v8 - 3;
        if (sub_100018B38(v22))
        {
          v23 = sub_100018554(28);
          v24 = v1;
          v25 = v3;
          v26 = sub_100018554(64);
          v49 = v26;
          *(_DWORD *)v23 = 136315650;
          sub_10000A848();
          sub_100014B44(v46, (unint64_t)v18, &v49);
          *(_QWORD *)(v23 + 4) = v27;
          sub_100018A58((uint64_t)v18);
          *(_WORD *)(v23 + 12) = 2080;
          sub_100018D64();
          sub_100014B44(v48, (unint64_t)v14, &v49);
          *(_QWORD *)(v23 + 14) = v28;
          sub_100018A58((uint64_t)v14);
          *(_WORD *)(v23 + 22) = 1024;
          *(_DWORD *)(v23 + 24) = v47;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Failed to subscribe to channel [%s:%s] with failure reason: %d", (uint8_t *)v23, 0x1Cu);
          swift_arrayDestroy(v26, 2);
          v29 = v26;
          v3 = v25;
          v1 = v24;
          sub_10000A818(v29);
          sub_10000A818(v23);

        }
        else
        {

          sub_100018540((uint64_t)v14);
          sub_100018540((uint64_t)v18);
        }
        v30 = *(_QWORD *)(v1 + v42);
        if (v30)
        {
          v49 = 0;
          v50 = 0xE000000000000000;
          swift_retain(v30);
          _StringGuts.grow(_:)(62);
          v31._countAndFlagsBits = 0xD000000000000020;
          v31._object = (void *)0x80000001000A6430;
          String.append(_:)(v31);
          v32._countAndFlagsBits = v46;
          v32._object = v18;
          String.append(_:)(v32);
          swift_bridgeObjectRelease(v18);
          v33._countAndFlagsBits = 58;
          v33._object = (void *)0xE100000000000000;
          String.append(_:)(v33);
          v34._countAndFlagsBits = v48;
          v34._object = v14;
          String.append(_:)(v34);
          sub_100018A44();
          v35._countAndFlagsBits = 0xD000000000000017;
          v35._object = (void *)0x80000001000A6460;
          String.append(_:)(v35);
          v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
          String.append(_:)(v36);
          sub_1000185B4();
          v37 = v50;
          *v41 = v49;
          v41[1] = v37;
          v38 = type metadata accessor for CloudChannelError(0);
          (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v41, v40, v38);
          sub_10000964C((uint64_t)v41, 0, 1, v38);
          sub_10003B4A0((uint64_t)v41);

          swift_release(v30);
          sub_10000A47C((uint64_t)v41, &qword_1000D0478);
        }
        else
        {
          swift_bridgeObjectRelease(v18);
          sub_100018A44();

        }
        ++v8;
        if (v45 == v43)
        {
          sub_100018DAC();
          sub_10000A668();
          return;
        }
      }
      __break(1u);
LABEL_32:
      sub_10001896C();
    }
    sub_10000A668();
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    __break(1u);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ApsListener.ConnectionState(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100013178(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_100013178(id result, char a2)
{
  if (a2 == 1)
    return result;
  if (!a2)
    return (id)swift_bridgeObjectRetain(result);
  return result;
}

void destroy for ApsListener.ConnectionState(uint64_t a1)
{
  sub_1000131A4(*(void **)a1, *(_BYTE *)(a1 + 8));
}

void sub_1000131A4(void *a1, char a2)
{
  if (a2 == 1)
  {

  }
  else if (!a2)
  {
    swift_bridgeObjectRelease(a1);
  }
}

uint64_t assignWithCopy for ApsListener.ConnectionState(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100013178(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1000131A4(v5, v6);
  return a1;
}

uint64_t initializeWithTake for ApsListener.ConnectionState(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ApsListener.ConnectionState(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1000131A4(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApsListener.ConnectionState(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApsListener.ConnectionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1000132E4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000132FC(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ApsListener.ConnectionState()
{
  return &type metadata for ApsListener.ConnectionState;
}

void sub_100013324(uint64_t a1, uint64_t a2)
{
  sub_1000181E4(&qword_1000D03C0, a2, (uint64_t (*)(uint64_t))type metadata accessor for CloudChannelTaskActor);
}

uint64_t sub_100013350(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CloudChannelOperation(a2, a1);
  return a2;
}

id sub_10001338C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  id v11;

  if (!a2)
  {
    v9 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    goto LABEL_6;
  }
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  v11 = objc_msgSend(v5, "initWithEnvironmentName:namedDelegatePort:queue:", v9, v10, a5);

  return v11;
}

id sub_100013434(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend(v2, "initWithChannelID:", v4);

  return v5;
}

void sub_100013494()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_100018B80();
  if ((v3 & 1) != 0)
  {
    sub_1000185A4();
    if (v4 != v5)
    {
      sub_1000187D0();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100018594();
    }
  }
  sub_1000187C0();
  if (v2)
  {
    v6 = sub_10000738C(&qword_1000CFE30);
    v7 = (const void *)sub_10000A748(v6, 16 * v2 + 32);
    v8 = j__malloc_size(v7);
    sub_10001895C(v8 - 32);
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_100018BF8();
    sub_100013F48(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000185B4();
  }
  else
  {
    v12 = sub_1000187E4();
    sub_100013998(v12, v13, v14, v15);
  }
  sub_10001860C();
}

void sub_10001353C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  sub_100018B80();
  if ((v4 & 1) != 0)
  {
    sub_1000185A4();
    if (v5 != v6)
    {
      sub_1000187D0();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_100018594();
    }
  }
  sub_1000187C0();
  if (v3)
  {
    v7 = sub_10000738C(&qword_1000D0430);
    v8 = (_QWORD *)sub_10000A748(v7, v3 + 32);
    v9 = j__malloc_size(v8);
    v8[2] = v2;
    v8[3] = 2 * v9 - 64;
  }
  if ((v1 & 1) != 0)
  {
    v10 = (char *)sub_100018BF8();
    sub_100014058(v10, v11, v12);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000185B4();
  }
  else
  {
    v13 = sub_1000187E4();
    sub_100013A8C(v13, v14, v15, v16);
  }
  sub_10001860C();
}

void sub_1000135E0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_100018B80();
  if ((v3 & 1) != 0)
  {
    sub_1000185A4();
    if (v4 != v5)
    {
      sub_1000187D0();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100018594();
    }
  }
  sub_1000187C0();
  if (v2)
  {
    v6 = sub_10000738C(&qword_1000D0500);
    v7 = (const void *)sub_10000A748(v6, 32 * v2 + 32);
    v8 = j__malloc_size(v7);
    sub_10001895C(v8 - 32);
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_100018BF8();
    sub_10001421C(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000185B4();
  }
  else
  {
    v12 = sub_1000187E4();
    sub_100013B78(v12, v13, v14, v15);
  }
  sub_10001860C();
}

uint64_t sub_100013688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000136B0(a1, a2, a3, a4, &qword_1000D05E0, (void (*)(_QWORD))&type metadata accessor for SportingEventRunningClockFeature);
}

uint64_t sub_10001369C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000136B0(a1, a2, a3, a4, &qword_1000D0510, (void (*)(_QWORD))&type metadata accessor for SportingEventSubscription.Competitor);
}

uint64_t sub_1000136B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  const char *v23;
  uint64_t v24;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    sub_1000185A4();
    if (v12 != v13)
    {
      sub_1000187D0();
      if (v12)
      {
        __break(1u);
LABEL_23:
        sub_1000184DC();
        v23 = "Division by zero";
        v24 = 16;
LABEL_25:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v23, v24, 2, "Swift/IntegerTypes.swift", 24);
        __break(1u);
        return result;
      }
      sub_100018594();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (!v15)
  {
    v17 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_100018A34(a1, a2, a3, a4, a5);
  v16 = sub_100018C40();
  v17 = (_QWORD *)sub_100018740(v16);
  v18 = j__malloc_size(v17);
  if (!v6)
    goto LABEL_23;
  if (v18 - v7 == 0x8000000000000000 && v6 == -1)
  {
    sub_1000184DC();
    v23 = "Division results in an overflow";
    v24 = 31;
    goto LABEL_25;
  }
  v17[2] = v14;
  v17[3] = 2 * ((uint64_t)(v18 - v7) / v6);
LABEL_18:
  sub_100018C40();
  sub_100018BB8();
  if ((v10 & 1) != 0)
  {
    sub_100014274(a4 + v21, v14, v20, a6);
    *(_QWORD *)(a4 + 16) = 0;
    sub_1000185B4();
  }
  else
  {
    sub_100013E5C(0, v14, v20, a4, (uint64_t (*)(_QWORD))a6);
  }
  return (uint64_t)v17;
}

uint64_t sub_10001381C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000136B0(a1, a2, a3, a4, &qword_1000D0548, (void (*)(_QWORD))&type metadata accessor for IngestionError);
}

void sub_100013830()
{
  sub_10001383C();
}

void sub_10001383C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  sub_100018B80();
  if ((v3 & 1) != 0)
  {
    sub_1000185A4();
    if (v4 != v5)
    {
      sub_1000187D0();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100018594();
    }
  }
  sub_1000187C0();
  if (v2)
  {
    v11 = sub_100018A34(v6, v7, v8, v9, v10);
    v12 = (const void *)sub_10000A748(v11, 8 * v2 + 32);
    v13 = j__malloc_size(v12);
    sub_10001895C(v13 - 32);
  }
  if ((v1 & 1) != 0)
  {
    v14 = (char *)sub_100018BF8();
    sub_1000140D8(v14, v15, v16);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000185B4();
  }
  else
  {
    v17 = sub_1000187E4();
    sub_100013C8C(v17, v18, v19, v20);
  }
  sub_10001860C();
}

void sub_1000138DC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_100018B80();
  if ((v3 & 1) != 0)
  {
    sub_1000185A4();
    if (v4 != v5)
    {
      sub_1000187D0();
      if (v4)
      {
        __break(1u);
        return;
      }
      sub_100018594();
    }
  }
  sub_1000187C0();
  if (v2)
  {
    v6 = sub_10000738C(&qword_1000D04C0);
    v7 = (const void *)sub_10000A748(v6, 8 * v2 + 32);
    v8 = j__malloc_size(v7);
    sub_10001895C(v8 - 32);
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)sub_100018BF8();
    sub_1000140D8(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
    sub_1000185B4();
  }
  else
  {
    v12 = sub_1000187E4();
    sub_100013D48(v12, v13, v14, v15);
  }
  sub_10001860C();
}

uint64_t sub_100013984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000136B0(a1, a2, a3, a4, &qword_1000D04A8, (void (*)(_QWORD))&type metadata accessor for CloudChannelSubscription.Demand);
}

uint64_t sub_100013998(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100013A8C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + a1 + 32);
  v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100013B78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  const char *v11;
  uint64_t v12;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v11 = "UnsafeMutablePointer.initialize with negative count";
    v12 = 51;
    goto LABEL_11;
  }
  v7 = a4 + 32 * a1 + 32;
  v8 = a3 + 32 * v4;
  if (v7 >= v8 || v7 + 32 * v4 <= a3)
  {
    sub_10000738C(&qword_1000D0508);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  v11 = "UnsafeMutablePointer.initialize overlapping range";
  v12 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

char *sub_100013C8C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_1000184DC();
    sub_100018930();
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 8 * a1 + 32);
  v6 = &__dst[8 * v4];
  if (v5 >= v6 || &v5[8 * v4] <= __dst)
  {
    memcpy(__dst, v5, 8 * v4);
    sub_1000185B4();
    return v6;
  }
  sub_1000184DC();
  sub_100018920();
LABEL_11:
  result = (char *)sub_100018548(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19);
  __break(1u);
  return result;
}

uint64_t sub_100013D48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  const char *v11;
  uint64_t v12;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    v11 = "UnsafeMutablePointer.initialize with negative count";
    v12 = 51;
    goto LABEL_11;
  }
  v7 = a4 + 8 * a1 + 32;
  v8 = a3 + 8 * v4;
  if (v7 >= v8 || v7 + 8 * v4 <= a3)
  {
    sub_10000738C(&qword_1000D04C8);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  v11 = "UnsafeMutablePointer.initialize overlapping range";
  v12 = 49;
LABEL_11:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100013E5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_1000184DC();
    sub_100018930();
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    sub_1000185B4();
    return v14;
  }
  sub_1000184DC();
  sub_100018920();
LABEL_11:
  result = sub_100018548(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28);
  __break(1u);
  return result;
}

char *sub_100013F48(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_100013FCC(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_100014058(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_1000140D8(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_1000184DC();
    result = (char *)sub_100018508((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100018530(a3, result);
  }
  return result;
}

char *sub_100014130(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_1000184DC();
    result = (char *)sub_100018508((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100018530(a3, result);
  }
  return result;
}

char *sub_100014190(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

char *sub_10001421C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_1000184DC();
    result = (char *)sub_100018508((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100018530(a3, result);
  }
  return result;
}

uint64_t sub_100014274(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_1000184DC();
    result = sub_100018508((uint64_t)"Fatal error", v11, v12, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v13, v14, (uint64_t)"Swift/UnsafePointer.swift", v15, v16, v17, v18);
    __break(1u);
  }
  else if (a3 < a1
         || (result = ((uint64_t (*)(_QWORD))a4)(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    v10 = sub_100018CBC();
    return swift_arrayInitWithTakeFrontToBack(v10);
  }
  else if (a3 != a1)
  {
    v9 = sub_100018CBC();
    return swift_arrayInitWithTakeBackToFront(v9);
  }
  return result;
}

uint64_t sub_10001433C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100014408(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  if (a2 < 0)
  {
    v6 = "UnsafeMutablePointer.initialize with negative count";
    v7 = 51;
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_10000738C(&qword_1000D05C8);
      return swift_arrayInitWithCopy(a3);
    }
    v6 = "UnsafeMutablePointer.initialize overlapping range";
    v7 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v6, v7, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1000144F8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  if (a2 < 0)
  {
    v6 = "UnsafeMutablePointer.initialize with negative count";
    v7 = 51;
  }
  else
  {
    if (a3 + 24 * a2 <= a1 || a1 + 24 * a2 <= a3)
    {
      sub_10000738C(&qword_1000D04F8);
      return swift_arrayInitWithCopy(a3);
    }
    v6 = "UnsafeMutablePointer.initialize overlapping range";
    v7 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v6, v7, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1000145E8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  if (a2 < 0)
  {
    v6 = "UnsafeMutablePointer.initialize with negative count";
    v7 = 51;
  }
  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
    {
      sub_10000738C(&qword_1000D04E8);
      return swift_arrayInitWithCopy(a3);
    }
    v6 = "UnsafeMutablePointer.initialize overlapping range";
    v7 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v6, v7, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1000146D4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  if (a2 < 0)
  {
    v6 = "UnsafeMutablePointer.initialize with negative count";
    v7 = 51;
  }
  else
  {
    if (a3 + 40 * a2 <= a1 || a1 + 40 * a2 <= a3)
    {
      sub_10000738C(&qword_1000D05B8);
      return swift_arrayInitWithCopy(a3);
    }
    v6 = "UnsafeMutablePointer.initialize overlapping range";
    v7 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v6, v7, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_1000147C4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if (a2 < 0)
  {
    sub_1000184DC();
    sub_100018930();
  }
  else
  {
    v3 = a1 + 8 * a2;
    if (a3 + 8 * a2 > a1)
    {
      v4 = v3 >= a3;
      v5 = v3 == a3;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      type metadata accessor for SportingEventCompetitorContainer(0);
      v6 = sub_100018CD0();
      return sub_100018820(v6);
    }
    sub_1000184DC();
    sub_100018920();
  }
  result = sub_100018548(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_100014864(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  if (a2 < 0)
  {
    v6 = "UnsafeMutablePointer.initialize with negative count";
    v7 = 51;
  }
  else
  {
    if (a3 + 32 * a2 <= a1 || a1 + 32 * a2 <= a3)
    {
      sub_10000738C(&qword_1000D0560);
      return swift_arrayInitWithCopy(a3);
    }
    v6 = "UnsafeMutablePointer.initialize overlapping range";
    v7 = 49;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, v6, v7, 2, "Swift/UnsafePointer.swift", 25);
  __break(1u);
  return result;
}

uint64_t sub_100014950(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  if (a2 < 0)
  {
    sub_1000184DC();
    sub_100018930();
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a4(0) - 8) + 72) * a2;
    v7 = a3 + v6;
    v8 = a1 + v6;
    if (v7 <= a1 || v8 <= a3)
    {
      v10 = sub_100018CD0();
      return sub_100018820(v10);
    }
    sub_1000184DC();
    sub_100018920();
  }
  result = sub_100018548(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  __break(1u);
  return result;
}

void *sub_1000149FC(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if (a2 < 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[16 * a2] <= __src || &__src[16 * a2] <= __dst)
      return memcpy(__dst, __src, 16 * a2);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100014AC4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100014AE4(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = a4();
  sub_100014B44(v6, v7, a3);
  v8 = *a1 + 8;
  sub_100018DC8();
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v10, v11, v8);
  result = sub_1000061E8();
  *a1 = v8;
  return result;
}

void sub_100014B44(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  void *ObjectType;

  sub_100018E50();
  v9 = sub_100014BFC(v6, v7, v8, 1, a1, a2);
  if (v9)
  {
    v10 = v9;
    ObjectType = (void *)swift_getObjectType(v9);
    v13[0] = v10;
    v11 = *a3;
    if (*a3)
    {
      sub_100018090((uint64_t)v13, *a3);
      *a3 = v11 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    v12 = *a3;
    if (*a3)
    {
      sub_100018090((uint64_t)v13, *a3);
      *a3 = v12 + 32;
    }
    sub_1000185C8();
  }
  sub_100007618(v13);
  sub_100018A20();
}

uint64_t sub_100014BFC(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100014D50((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = (uint64_t)sub_100014E14(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_100014D50(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100014E14(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_100024718(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100014EA8(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_100014EA8((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

char *sub_100014EA8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000738C(&qword_1000D0430);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100014058(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100014F7C(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_100014F7C(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

_BYTE **sub_100015040(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

unint64_t sub_100015050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[72];

  sub_100018CB0(a1);
  String.hash(into:)(v8, a1, a2);
  sub_100018CA8();
  v4 = sub_100018C04();
  return sub_100015200(v4, v5, v6);
}

unint64_t sub_1000150A4(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _BYTE v6[72];

  v1 = a1;
  sub_100018CB0(a1);
  v2 = sub_10007B6F4(v1);
  String.hash(into:)(v6, v2, v3);
  sub_1000061E8();
  v4 = sub_100018CA8();
  return sub_1000152E0(v1, v4);
}

unint64_t sub_100015108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100015454(a1, v4);
}

void sub_100015138()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100018E0C();
  type metadata accessor for SportingEventPlayLevel(v0);
  sub_100018D18(&qword_1000D04D0);
  sub_100018B00(v1);
  sub_100018C88();
  sub_100018AB8();
}

void sub_10001519C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100018E0C();
  type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(v0);
  sub_100018D18(&qword_1000D04B0);
  sub_100018B00(v1);
  sub_100018C88();
  sub_100018AB8();
}

unint64_t sub_100015200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000152E0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = sub_10007B6F4(*(_BYTE *)(*(_QWORD *)(v2 + 48) + v5));
    v9 = v8;
    v10 = sub_10007B6F4(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = sub_10007B6F4(*(_BYTE *)(*(_QWORD *)(v2 + 48) + v5));
          v9 = v17;
          v18 = sub_10007B6F4(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100015454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100018218(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100018254((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void sub_100015518()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t, __n128);
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  sub_10000A758();
  v22 = v1;
  v23 = v2;
  v3 = v0;
  v5 = v4;
  v20 = v6;
  v21 = v7;
  v8 = v7(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  v13 = -1 << *(_BYTE *)(v3 + 32);
  v14 = v5 & ~v13;
  if (((*(_QWORD *)(v3 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    v16 = *(_QWORD *)(v9 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16);
    do
    {
      v17(v12, *(_QWORD *)(v3 + 48) + v16 * v14, v8, v10);
      sub_1000181E4(v22, 255, v21);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v20, v8, v18);
      sub_100018D78((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  sub_10000A668();
}

uint64_t sub_100015638(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_100015654()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000158F8();
  *v0 = v1;
}

void sub_100015688()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100015C58();
  *v0 = v1;
}

void sub_1000156BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1000157FC(a1, a2, a3, *v3, &qword_1000D0518, (void (*)(_QWORD))&type metadata accessor for URLQueryItem);
  *v3 = v4;
}

void sub_1000156E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1000157FC(a1, a2, a3, *v3, &qword_1000D0510, (void (*)(_QWORD))&type metadata accessor for SportingEventSubscription.Competitor);
  *v3 = v4;
}

void sub_100015714()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000158F8();
  *v0 = v1;
}

char *sub_100015748(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_1000159B0(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_100015764(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100015A90(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_100015780(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100015B78(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void sub_10001579C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  sub_1000157FC(a1, a2, a3, *v3, &qword_1000D05E8, (void (*)(_QWORD))type metadata accessor for SportsActivityManagedContext);
  *v3 = v4;
}

void sub_1000157C8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_100015C58();
  *v0 = v1;
}

void sub_1000157FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    sub_1000185A4();
    if (v12 != v13)
    {
      sub_1000187D0();
      if (v12)
      {
LABEL_23:
        __break(1u);
        return;
      }
      sub_100018594();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (!v15)
    goto LABEL_17;
  sub_100018A34(a1, a2, a3, a4, a5);
  v16 = sub_100018C40();
  v17 = (_QWORD *)sub_100018740(v16);
  v18 = j__malloc_size(v17);
  if (!v6)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v7 == 0x8000000000000000 && v6 == -1)
    goto LABEL_22;
  v17[2] = v14;
  v17[3] = 2 * ((uint64_t)(v18 - v7) / v6);
LABEL_17:
  sub_100018C40();
  sub_100018BB8();
  v22 = a4 + v21;
  if ((v10 & 1) != 0)
  {
    sub_100014274(v22, v14, v20, a6);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100014950(v22, v14, v20, (uint64_t (*)(_QWORD))a6);
  }
  sub_1000187F4();
  sub_1000189CC();
}

void sub_1000158DC()
{
  sub_1000158F8();
}

void sub_1000158F8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD *);
  void (*v2)(uint64_t, uint64_t, _QWORD *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;

  sub_100018DB4();
  if ((v6 & 1) != 0)
  {
    sub_1000185A4();
    if (v10 != v11)
    {
      sub_1000187D0();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_100018594();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (v13)
  {
    v14 = sub_100018A34(v4, v5, v6, v7, v8);
    v15 = (_QWORD *)sub_10000A748(v14, 24 * v13 + 32);
    v16 = j__malloc_size(v15);
    v15[2] = v12;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
  }
  else
  {
    v15 = _swiftEmptyArrayStorage;
  }
  v17 = v15 + 4;
  v18 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v18, v12, v17);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v18, v12, v17);
  }
  sub_1000187F4();
  sub_1000189CC();
}

char *sub_1000159B0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000738C(&qword_1000D04E0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000140D8(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000145E8((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_100015A90(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000738C(&qword_1000D05B0);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_100014190(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000146D4((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_100015B78(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000738C(&qword_1000D0558);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10001421C(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100014864((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

void sub_100015C58()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD *);
  void (*v2)(uint64_t, uint64_t, _QWORD *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;

  sub_100018DB4();
  if ((v6 & 1) != 0)
  {
    sub_1000185A4();
    if (v10 != v11)
    {
      sub_1000187D0();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_100018594();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (v13)
  {
    v14 = sub_100018A34(v4, v5, v6, v7, v8);
    v15 = (_QWORD *)sub_10000A748(v14, 16 * v13 + 32);
    v16 = j__malloc_size(v15);
    v15[2] = v12;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }
  else
  {
    v15 = _swiftEmptyArrayStorage;
  }
  v17 = v15 + 4;
  v18 = v0 + 32;
  if ((v3 & 1) != 0)
  {
    v2(v18, v12, v17);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v18, v12, v17);
  }
  sub_1000187F4();
}

Swift::Int sub_100015D18(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  Swift::Int v10;
  unint64_t *v11;
  uint64_t v13;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v9 = (unint64_t *)((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100015638(0, v7, v9);
    v10 = sub_10001617C(v9, v7, v3, a2);
    swift_release(a2);
  }
  else
  {
    v11 = (unint64_t *)swift_slowAlloc(v8, -1);
    sub_100015638(0, v7, v11);
    v10 = sub_10001617C(v11, v7, v3, a2);
    swift_release(a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v10;
}

Swift::Int sub_100015EA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000738C(&qword_1000D0460);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    if (!v9)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v20, v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v20;
      v30[1] = v21;
      ++*(_QWORD *)(v6 + 16);
      if (v9)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_41;
      if (v16 >= v10)
        goto LABEL_35;
      v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v10)
          goto LABEL_35;
        v17 = v33[v13];
        if (!v17)
        {
          v13 = v16 + 2;
          if (v16 + 2 >= v10)
            goto LABEL_35;
          v17 = v33[v13];
          if (!v17)
          {
            v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              v2 = v32;
              v31 = 1 << *(_BYTE *)(v3 + 32);
              if (v31 > 63)
                sub_100015638(0, (unint64_t)(v31 + 63) >> 6, v33);
              else
                *v33 = -1 << v31;
              *(_QWORD *)(v3 + 16) = 0;
              break;
            }
            v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_42;
                if (v13 >= v10)
                  goto LABEL_35;
                v17 = v33[v13];
                ++v18;
                if (v17)
                  goto LABEL_23;
              }
            }
            v13 = v18;
          }
        }
      }
LABEL_23:
      v9 = (v17 - 1) & v17;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_10001617C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  Swift::Int result;
  unint64_t v20;
  uint64_t v22;
  unint64_t j;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[9];
  uint64_t v36;

  v5 = a2;
  v34 = *(_QWORD *)(a3 + 16);
  if (!v34)
  {
    v28 = 0;
    goto LABEL_27;
  }
  v36 = a4 + 56;
  v33 = a3 + 32;
  swift_bridgeObjectRetain(a3);
  v31 = 0;
  for (i = 0; i != v34; ++i)
  {
    v7 = (uint64_t *)(v33 + 16 * i);
    v9 = *v7;
    v8 = v7[1];
    Hasher.init(_seed:)(v35);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v35, v9, v8);
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(a4 + 32);
    v12 = v10 & ~v11;
    v13 = v12 >> 6;
    v14 = 1 << v12;
    if (((1 << v12) & *(_QWORD *)(v36 + 8 * (v12 >> 6))) == 0)
      goto LABEL_22;
    v15 = *(_QWORD *)(a4 + 48);
    v16 = (_QWORD *)(v15 + 16 * v12);
    v17 = v16[1];
    v18 = *v16 == v9 && v17 == v8;
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v9, v8, 0) & 1) == 0)
    {
      v22 = ~v11;
      for (j = v12 + 1; ; j = v24 + 1)
      {
        v24 = j & v22;
        if (((*(_QWORD *)(v36 + (((j & v22) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v22)) & 1) == 0)
          break;
        v25 = (_QWORD *)(v15 + 16 * v24);
        v26 = v25[1];
        v27 = *v25 == v9 && v26 == v8;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v25, v26, v9, v8, 0) & 1) != 0)
        {
          result = swift_bridgeObjectRelease(v8);
          v13 = v24 >> 6;
          v14 = 1 << v24;
          goto LABEL_10;
        }
      }
LABEL_22:
      swift_bridgeObjectRelease(v8);
      continue;
    }
    result = swift_bridgeObjectRelease(v8);
LABEL_10:
    v20 = a1[v13];
    a1[v13] = v14 | v20;
    if ((v14 & v20) == 0 && __OFADD__(v31++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease(a3);
  v5 = a2;
  v28 = v31;
LABEL_27:
  swift_retain(a4);
  return sub_100016388(a1, v5, v28, a4);
}

Swift::Int sub_100016388(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_33:
    sub_1000187F4();
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10000738C(&qword_1000D0460);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_22;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_37;
    if (v14 >= v30)
      goto LABEL_33;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_33;
      v15 = a1[v10];
      if (!v15)
        break;
    }
LABEL_21:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32);
    sub_10000A848();
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << v8[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*((_QWORD *)v8 + 6) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
      goto LABEL_36;
    if (!v5)
      goto LABEL_33;
  }
  v16 = v14 + 2;
  if (v16 >= v30)
    goto LABEL_33;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_33;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_21;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000165E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  _QWORD v26[9];

  v7 = *v3;
  Hasher.init(_seed:)(v26);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v26, a2, a3);
  v8 = sub_100018CA8();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  sub_100018CF8();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (uint64_t *)(v12 + 16 * v10);
    v14 = v13[1];
    v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_100018C58(*v13, v14) & 1) != 0)
    {
LABEL_7:
      sub_100018DAC();
      swift_bridgeObjectRelease(v7);
      v16 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0;
    }
    v19 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v19;
      sub_100018CF8();
      if ((v20 & 1) == 0)
        break;
      v21 = (uint64_t *)(v12 + 16 * v10);
      v22 = v21[1];
      v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_100018C58(*v21, v22) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v26[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_10001896C();
  sub_100016FBC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v25 = *v3;
  *v3 = v26[0];
  swift_bridgeObjectRelease(v25);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_100016758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  if (!v6)
    goto LABEL_6;
LABEL_5:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain(v16);
    sub_100017574(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_5;
LABEL_6:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_21:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

void sub_1000168F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t isStackAllocationSafe;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[9];
  uint64_t v31;
  uint64_t v32;

  sub_10000A758();
  v2 = v1;
  if (!*(_QWORD *)(v1 + 16))
  {
    sub_1000187F4();
    goto LABEL_28;
  }
  v31 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  if (!v3)
    goto LABEL_28;
  v4 = v1 + 56;
  v29 = v0 + 32;
  sub_10001896C();
  v5 = 0;
  while (1)
  {
    v6 = (uint64_t *)(v29 + 16 * v5);
    v8 = *v6;
    v7 = v6[1];
    ++v5;
    Hasher.init(_seed:)(v30);
    sub_100018A3C();
    String.hash(into:)(v30, v8, v7);
    v9 = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v2 + 32);
    v11 = v9 & ~v10;
    sub_100018CE4();
    if ((v12 & 1) != 0)
      break;
LABEL_18:
    sub_10001883C();
    if (v5 == v3)
    {
      sub_100018DAC();
      goto LABEL_28;
    }
  }
  v13 = *(_QWORD *)(v2 + 48);
  v14 = (uint64_t *)(v13 + 16 * v11);
  v15 = v14[1];
  v16 = *v14 == v8 && v15 == v7;
  if (!v16 && (sub_100018830(*v14, v15, v8) & 1) == 0)
  {
    v17 = ~v10;
    while (1)
    {
      v11 = (v11 + 1) & v17;
      sub_100018CE4();
      if ((v18 & 1) == 0)
        goto LABEL_18;
      v19 = (uint64_t *)(v13 + 16 * v11);
      v20 = v19[1];
      v21 = *v19 == v8 && v20 == v7;
      if (v21 || (sub_100018830(*v19, v20, v8) & 1) != 0)
      {
        v32 = v5;
        isStackAllocationSafe = sub_10001883C();
        goto LABEL_22;
      }
    }
  }
  isStackAllocationSafe = sub_10001883C();
  v32 = v5;
LABEL_22:
  v23 = *(_BYTE *)(v2 + 32);
  v24 = v23 & 0x3F;
  v25 = (1 << v23) + 63;
  v26 = 8 * (v25 >> 6);
  if (v24 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v25 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    v27 = (char *)v30 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0);
    sub_100018DA0(v27);
    sub_100018890();
    v28 = sub_1000187F4();
    if (v2 == -56)
    {
      swift_bridgeObjectRelease(v31);
      goto LABEL_28;
    }
    swift_willThrow(v28);
    swift_errorRelease(v2 + 56);
    __break(1u);
LABEL_31:
    swift_errorRelease(v4);
    sub_10000A818((uint64_t)v27);
    __break(1u);
  }
  else
  {
    v27 = (char *)sub_100018554(v26);
    sub_100018DA0(v27);
    sub_100018890();
    sub_1000187F4();
    if (v2 != -56)
      goto LABEL_31;
    swift_bridgeObjectRelease(v31);
    sub_10000A818((uint64_t)v27);
LABEL_28:
    sub_10000A668();
  }
}

unint64_t *sub_100016B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
    while (1)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42);
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7)
        goto LABEL_6;
LABEL_7:
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v40)
        goto LABEL_48;
      v13 = *(_QWORD *)(v41 + 8 * v12);
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= v40)
          goto LABEL_48;
        v13 = *(_QWORD *)(v41 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= v40)
            goto LABEL_48;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 4;
            if (v9 + 4 >= v40)
              goto LABEL_48;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v15 = v9 + 5;
              if (v9 + 5 >= v40)
              {
LABEL_48:
                sub_1000180CC(a1);
                return (unint64_t *)v2;
              }
              v13 = *(_QWORD *)(v41 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v14 >= v40)
                    goto LABEL_48;
                  v13 = *(_QWORD *)(v41 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_22;
                }
LABEL_50:
                __break(1u);
              }
              v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
      v9 = v14;
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease();
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_37;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_100017924((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_1000180CC(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_100017924((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_1000180CC(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100016FBC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100015EA4(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100017154();
      goto LABEL_22;
    }
    sub_1000172F0(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void *sub_100017154()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  sub_10000738C(&qword_1000D0460);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain(v21);
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v14)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_23:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 2;
  if (v19 >= v14)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Int sub_1000172F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10000738C(&qword_1000D0460);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = v3 + 56;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v31 = v2;
    v32 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain_n(v3, 2);
    v13 = 0;
    if (!v10)
      goto LABEL_10;
LABEL_9:
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)(v33);
      swift_bridgeObjectRetain(v21);
      String.hash(into:)(v33, v20, v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          v28 = v24 == v27;
          if (v24 == v27)
            v24 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v30 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v25);
      *v30 = v20;
      v30[1] = v21;
      ++*(_QWORD *)(v6 + 16);
      if (v10)
        goto LABEL_9;
LABEL_10:
      v16 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_36;
      if (v16 >= v32)
        goto LABEL_32;
      v17 = *(_QWORD *)(v8 + 8 * v16);
      ++v13;
      if (!v17)
      {
        v13 = v16 + 1;
        if (v16 + 1 >= v32)
          goto LABEL_32;
        v17 = *(_QWORD *)(v8 + 8 * v13);
        if (!v17)
        {
          v18 = v16 + 2;
          if (v18 >= v32)
          {
LABEL_32:
            result = swift_release_n(v3, 3);
            v2 = v31;
            goto LABEL_34;
          }
          v17 = *(_QWORD *)(v8 + 8 * v18);
          v13 = v18;
          if (!v17)
            break;
        }
      }
LABEL_20:
      v10 = (v17 - 1) & v17;
    }
    while (1)
    {
      v13 = v18 + 1;
      if (__OFADD__(v18, 1))
        break;
      if (v13 >= v32)
        goto LABEL_32;
      v17 = *(_QWORD *)(v8 + 8 * v13);
      ++v18;
      if (v17)
        goto LABEL_20;
    }
LABEL_37:
    __break(1u);
  }
  else
  {
    result = swift_release(v3);
LABEL_34:
    *v2 = v6;
  }
  return result;
}

uint64_t sub_100017574(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v21[9];

  v5 = *v2;
  Hasher.init(_seed:)(v21);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v21, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v16 = ~v7;
    do
    {
      v8 = (v8 + 1) & v16;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v17 = (_QWORD *)(v9 + 16 * v8);
      v18 = v17[1];
      v19 = *v17 == a1 && v18 == a2;
    }
    while (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v21[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100017154();
    v14 = v21[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_100017C14(v8);
  *v2 = v21[0];
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t *sub_100017700(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t *v32;
  uint64_t v33;
  _QWORD v34[9];
  uint64_t v35;

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v32 = result;
  v33 = v6 - 1;
  v8 = *a5;
  v7 = a5[1];
  v9 = *(_QWORD *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain(a3);
    return (unint64_t *)sub_100016388(v32, a2, v33, a3);
  }
  v35 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9)
      goto LABEL_30;
    v11 = v8 + 16 * v7;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)(v34);
    swift_bridgeObjectRetain(v12);
    String.hash(into:)(v34, v13, v12);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = 1 << v16;
    if (((1 << v16) & *(_QWORD *)(v35 + 8 * (v16 >> 6))) == 0)
      goto LABEL_25;
    v19 = *(_QWORD *)(a3 + 48);
    v20 = (_QWORD *)(v19 + 16 * v16);
    v21 = v20[1];
    v22 = *v20 == v13 && v21 == v12;
    if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v13, v12, 0) & 1) == 0)
    {
      v25 = ~v15;
      for (i = v16 + 1; ; i = v27 + 1)
      {
        v27 = i & v25;
        if (((*(_QWORD *)(v35 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v19 + 16 * v27);
        v29 = v28[1];
        v30 = *v28 == v13 && v29 == v12;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v13, v12, 0) & 1) != 0)
        {
          result = (unint64_t *)swift_bridgeObjectRelease(v12);
          v17 = v27 >> 6;
          v18 = 1 << v27;
          goto LABEL_13;
        }
      }
LABEL_25:
      result = (unint64_t *)swift_bridgeObjectRelease(v12);
      goto LABEL_26;
    }
    result = (unint64_t *)swift_bridgeObjectRelease(v12);
LABEL_13:
    v23 = v32[v17];
    v32[v17] = v23 & ~v18;
    if ((v18 & v23) != 0)
    {
      v24 = v33 - 1;
      if (__OFSUB__(v33, 1))
        goto LABEL_31;
      --v33;
      if (!v24)
        return (unint64_t *)&_swiftEmptySetSingleton;
    }
LABEL_26:
    v8 = *a5;
    v7 = a5[1];
    v9 = *(_QWORD *)(*a5 + 16);
    if (v7 == v9)
      goto LABEL_2;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t *sub_100017924(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v40;
  unint64_t *v41;
  _QWORD v42[9];
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v43 = a3 + 56;
  while (2)
  {
    v40 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_46;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_46;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_14;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_46;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_46;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v38 = v9 + 6;
                while (v38 < v14)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    v13 = v38 - 1;
                    goto LABEL_14;
                  }
                }
                v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain(a3);
                return (unint64_t *)sub_100016388(v41, a2, v40, a3);
              }
              goto LABEL_14;
            }
          }
          v13 = v18;
        }
LABEL_14:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_15:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42);
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v43 + 8 * (v24 >> 6))) == 0)
          goto LABEL_32;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = v28[1];
        v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) != 0)
          break;
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v43 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease();
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_22;
          }
        }
LABEL_32:
        result = (unint64_t *)swift_bridgeObjectRelease();
      }
      result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_22:
      v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v40 - 1;
    if (__OFSUB__(v40, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v40 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t sub_100017C14(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v24);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            v17 = *(_QWORD *)(v3 + 48);
            v18 = (_OWORD *)(v17 + 16 * v2);
            v19 = (_OWORD *)(v17 + 16 * v6);
            v20 = v2 != v6 || v18 >= v19 + 1;
            v2 = v6;
            if (v20)
            {
              *v18 = *v19;
              v2 = v6;
            }
          }
        }
        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100017DCC(void *a1)
{
  return sub_100018288(a1, (SEL *)&selRef_channelID);
}

uint64_t sub_100017DD8(void *a1)
{
  return sub_100018288(a1, (SEL *)&selRef_topic);
}

void sub_100017DE4(void *a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(a1, "userInfo");
  if (v1)
  {
    v2 = v1;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  }
  sub_100006200();
}

void sub_100017E48(uint64_t a1, void *a2, SEL *a3)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100018574();
  objc_msgSend(a2, *a3, isa);

}

uint64_t sub_100017EA4(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "enabledTopics");

  if (!v2)
    return 0;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);

  return v3;
}

void sub_100017F04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  Class isa;
  NSString v8;

  sub_100018DF0(a1, &qword_1000D0450, PKPublicChannel_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_10001883C();
  sub_100018C04();
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, *a5, isa, v8);

}

void sub_100017F98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6;

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, "subscribeToChannel:forTopic:", a1, v6);

}

void sub_100017FEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6;

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, "unsubscribeFromChannel:forTopic:", a1, v6);

}

void sub_100018040(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6;

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, "getRegisteredChannelsForTopic:withCompletion:", v6, a3);

}

uint64_t sub_100018090(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000180CC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_1000180D4(uint64_t a1)
{
  uint64_t v1;

  sub_100010CD8(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000180E0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100018104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000738C(&qword_1000D0470);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001817C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10000738C(&qword_1000D0470);
  v0 = sub_100018884();
  return sub_100010E44(v0, v1, v2, v3);
}

uint64_t sub_1000181CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000181DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000181E4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  if (!*a1)
  {
    v4 = a3(a2);
    atomic_store(sub_10000A850(v4), a1);
  }
  sub_100006200();
}

uint64_t sub_100018218(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100018254(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100018288(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_1000182E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100018318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_1000D0584);
  *(_QWORD *)(v1 + 16) = v4;
  v5 = sub_100018C10(v4);
  return sub_10000ED2C(v5, v6, v7, v3, v2);
}

uint64_t sub_100018380()
{
  uint64_t v0;

  sub_1000185EC();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000183B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000183D8(uint64_t a1)
{
  uint64_t v1;

  return sub_10000F080(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000183E0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001840C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1000D059C);
  *(_QWORD *)(v1 + 16) = v3;
  v4 = sub_100018C10(v3);
  return sub_10000F220(v4, v5, v6, v2);
}

uint64_t sub_100018468(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000184AC()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000184B8()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000184C4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000184D0()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000184F0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000184FC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100018508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_100018520(uint64_t a1, uint64_t a2)
{
  return sub_100010A54(a1, a2);
}

void *sub_100018530@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_100018540(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_100018548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_100018554(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_10001855C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100018574()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10001857C()
{
  sub_100013494();
}

uint64_t sub_1000185B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_1000185BC()
{
  sub_100013494();
}

uint64_t sub_1000185C8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000185D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return swift_dynamicCast(v2, v1, v3, a1, 6);
}

uint64_t sub_1000185EC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

void sub_1000185FC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_100018618(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  *(_QWORD *)(v2 - 8) = *v1;
  v4 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v2 - 8) = *v1;
  *(_QWORD *)(v3 + 104) = a1;
  return swift_task_dealloc(v4);
}

uint64_t sub_100018644(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  *(_QWORD *)(v2 - 8) = *v1;
  v4 = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(v2 - 8) = *v1;
  *(_QWORD *)(v3 + 136) = a1;
  return swift_task_dealloc(v4);
}

void sub_100018670(int a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10000964C(v1, a1 ^ 1u, 1, v2);
  sub_10003B4A0(v1);
}

uint64_t sub_100018694()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_1000186B0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_1000186BC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000186D8()
{
  return sub_10000E034();
}

uint64_t sub_1000186F4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100018710()
{
  return sub_10000E034();
}

uint64_t sub_10001872C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_dealloc(a1);
}

void sub_100018734(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_1000181E4(a1, 255, v1);
}

uint64_t sub_100018740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(v1, ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) | 7);
}

void sub_100018764()
{
  void *v0;

}

uint64_t sub_100018770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v0;
  return swift_retain(v1);
}

uint64_t sub_100018784@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_100018798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  *(_QWORD *)(a16 + 16) = v16;
}

uint64_t sub_1000187DC()
{
  return type metadata accessor for Logger(0);
}

uint64_t sub_1000187E4()
{
  return 0;
}

uint64_t sub_1000187F4()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100018820(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_100018830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0);
}

uint64_t sub_10001883C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100018844()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100018850@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(_QWORD *)(a1 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100018860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t, _QWORD);

  return v2(*(_QWORD *)(v1 + 80), v0, *(_QWORD *)(v1 + 56));
}

id sub_10001887C@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t sub_100018884()
{
  uint64_t v0;

  return v0;
}

unint64_t *sub_100018890()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;

  return sub_100017700(v3, v2, v0, v1, (_QWORD *)(v4 - 104));
}

uint64_t sub_1000188AC()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_1000188B4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_1000165E8((uint64_t *)va, 5000257, 0xE300000000000000);
}

uint64_t sub_1000188CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v16 + 24) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v15, a15, v17, v18 + 12);
}

void sub_1000188F0()
{
  sub_100015688();
}

void sub_100018908()
{
  sub_100015688();
}

uint64_t sub_100018940(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

void sub_100018948(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

void sub_10001895C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_10001896C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100018974(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2);
}

_QWORD *sub_10001897C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *result = v2;
  result[1] = a2;
  return result;
}

uint64_t sub_10001898C()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void sub_100018994(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_1000189A0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_1000189B0()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_1000189B8(uint64_t a1)
{
  uint64_t v1;

  return BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v1, a1);
}

uint64_t sub_1000189E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v0, v2);
}

uint64_t sub_100018A00(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of Actor.unownedExecutor.getter(v1, a1);
}

uint64_t sub_100018A0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, a1, v1);
}

uint64_t sub_100018A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return sub_10000738C(a5);
}

uint64_t sub_100018A3C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100018A44()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100018A4C(void *a1)
{
  SEL *v1;

  return sub_100018288(a1, v1);
}

uint64_t sub_100018A58(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

uint64_t sub_100018A60()
{
  return type metadata accessor for CloudChannelError(0);
}

uint64_t sub_100018A6C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 96))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100018A80()
{
  return static CloudChannelSubscriptionManager.shared.getter();
}

uint64_t sub_100018A88()
{
  return type metadata accessor for CloudChannelSubscriptionManager(0);
}

uint64_t sub_100018A90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100018AAC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_100018AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v0, v1);
}

void sub_100018AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  unint64_t v9;
  va_list va;

  va_start(va, a8);
  sub_100014B44(v8, v9, (uint64_t *)va);
}

uint64_t sub_100018B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return dispatch thunk of Hashable._rawHashValue(seed:)(v1, v2, a1);
}

uint64_t sub_100018B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = a1;
  return dispatch thunk of Actor.unownedExecutor.getter(v1, a1);
}

void sub_100018B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = v0;
  v5 = v4 + 16 * v1;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v2;
}

BOOL sub_100018B38(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100018B48()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100018B58()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

void sub_100018B60()
{
  unint64_t v0;
  uint64_t v1;

  sub_100014B44(*(_QWORD *)(v1 - 136), v0, (uint64_t *)(v1 - 128));
}

BOOL sub_100018B70(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100018B8C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = result;
  return result;
}

void sub_100018BB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10000A47C(v2, a2);
}

uint64_t sub_100018BE0()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

void sub_100018BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100012B10(v2, v1, v0);
}

uint64_t sub_100018BF8()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t sub_100018C04()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100018C10(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_100018C28()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100018C30()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100018C40()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

id sub_100018C48()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100013434(v0, v1);
}

uint64_t sub_100018C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_100018C68()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t sub_100018C80()
{
  uint64_t v0;

  return _CocoaArrayWrapper.endIndex.getter(v0);
}

void sub_100018C88()
{
  sub_100015518();
}

uint64_t sub_100018C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

Swift::Int sub_100018CA8()
{
  return Hasher._finalize()();
}

_QWORD *sub_100018CB0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_100018CBC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100018CD0()
{
  uint64_t v0;

  return v0;
}

void sub_100018D0C()
{
  sub_100013494();
}

void sub_100018D18(unint64_t *a1)
{
  uint64_t (*v1)(uint64_t);

  sub_1000181E4(a1, 255, v1);
}

uint64_t sub_100018D38(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t sub_100018D4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_100018D58()
{
  uint64_t v0;
  uint64_t v1;

  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100018D64()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100018D6C(void *a1)
{
  SEL *v1;

  return sub_100018288(a1, v1);
}

uint64_t sub_100018D78@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100018D80()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100018D94(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_1000165E8(a1, v1, v2);
}

void *sub_100018DA0(void *a1)
{
  const void *v1;
  size_t v2;

  return memcpy(a1, v1, v2);
}

uint64_t sub_100018DAC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_100018DDC()
{
  void *v0;

}

uint64_t sub_100018DE8()
{
  return swift_willThrow();
}

uint64_t sub_100018DF0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_100018468(0, a2, a3);
}

uint64_t sub_100018DF8@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_100018E0C()
{
  return 0;
}

uint64_t sub_100018E20(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

uint64_t sub_100018E2C()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_100018E34()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100018E3C()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_100018E44()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 80));
}

uint64_t sub_100018E5C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100011BE4(v0, v1);
}

uint64_t sub_100018E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v0 = sub_10000738C(&qword_1000D0688);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100018F94();
  v11[1] = v4;
  v5 = sub_10000738C(&qword_1000D0690);
  v6 = sub_10000738C(&qword_1000D0698);
  v7 = sub_10000D358(&qword_1000D06A0, &qword_1000D0690, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.tryMap<A>(_:)(sub_1000191A0, 0, v5, v6, v7);
  swift_release(v4);
  v8 = sub_10000D358(&qword_1000D06A8, &qword_1000D0688, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v9 = Publisher.eraseToAnyPublisher()(v0, v8);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v9;
}

uint64_t sub_100018F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v0 = sub_10000738C(&qword_1000D06B0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000738C(&qword_1000D06B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  v9 = objc_msgSend(v8, "ams_activeiTunesAccount");

  if (v9)
  {
    v19 = (uint64_t)v9;
    v10 = v9;
    sub_10000738C(&qword_1000D0698);
    Just.init(_:)(&v19);
    v11 = sub_10000738C((uint64_t *)&unk_1000D1690);
    Just.setFailureType<A>(to:)(v11, v0, v11, &protocol self-conformance witness table for Error);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v12 = sub_10000D358(qword_1000D06D0, &qword_1000D06B8, (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    v13 = Publisher.eraseToAnyPublisher()(v4, v12);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v14 = sub_10000738C(&qword_1000D06C0);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v15 = Future.init(_:)(sub_1000191CC, 0);
    v19 = v15;
    v16 = sub_10000D358(&qword_1000D06C8, &qword_1000D06C0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v13 = Publisher.eraseToAnyPublisher()(v14, v16);
    swift_release(v15);
  }
  return v13;
}

id sub_1000191A0@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = *a1;
  return v2;
}

void sub_1000191CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  uint64_t v11;

  v4 = swift_allocObject(&unk_1000C3F78, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = (void *)objc_opt_self(ACAccountStore);
  swift_retain(a2);
  v6 = objc_msgSend(v5, "ams_sharedAccountStore");
  v7 = objc_msgSend(v6, "ams_fetchLocaliTunesAccount");

  v8 = swift_allocObject(&unk_1000C3FA0, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100019408;
  *(_QWORD *)(v8 + 24) = v4;
  v10[4] = sub_100019440;
  v11 = v8;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100019350;
  v10[3] = &unk_1000C3FB8;
  v9 = _Block_copy(v10);
  swift_release(v11);
  objc_msgSend(v7, "addFinishBlock:", v9);
  _Block_release(v9);

}

uint64_t sub_1000192F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (!a2)
    return a3();
  swift_errorRetain(a2);
  ((void (*)(uint64_t, uint64_t))a3)(a2, 1);
  return swift_errorRelease(a2);
}

void sub_100019350(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t type metadata accessor for AccountManager()
{
  return objc_opt_self(_TtC7sportsd14AccountManager);
}

uint64_t sub_1000193E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100019408(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_100019440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000192F4(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_100019448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100019458(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100019464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void sub_10001946C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100021618(319, (unint64_t *)&qword_1000D0758, type metadata accessor for ApiRequestMetrics);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for URLRequest(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = "\b";
      v8[3] = &unk_1000A0558;
      v6 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 0, 5, v8, a1 + 24);
      }
    }
  }
}

uint64_t *sub_100019534(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  size_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  unint64_t v38;
  const void *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  const void *v45;
  void *v46;
  const void *v47;
  void *v48;
  const void *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  void *v55;
  const void *v56;
  void *v57;
  const void *v58;
  void *v59;
  const void *v60;
  void *v61;
  const void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  size_t v81;
  uint64_t v82;
  _QWORD *v83;
  void **v84;
  void *v85;
  unint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  id v89;
  uint64_t v90;
  size_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t __n;
  size_t v105;
  uint64_t v106;
  size_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  size_t v111;
  uint64_t v112;
  unsigned int v113;
  size_t v114;
  uint64_t v116;

  v112 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v112 - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  v109 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v109 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(unsigned int *)(v7 + 84);
  v10 = v9 - 1;
  if (!(_DWORD)v9)
    v10 = 0;
  if (v6 <= v10)
    v11 = v10;
  else
    v11 = v6;
  if (v11 <= 0x7FFFFFFE)
    v12 = 2147483646;
  else
    v12 = v11;
  v110 = v12;
  v113 = v5;
  v106 = *(_QWORD *)(v4 + 64);
  if (v5)
    v13 = *(_QWORD *)(v4 + 64);
  else
    v13 = *(_QWORD *)(v4 + 64) + 1;
  v116 = v4;
  v14 = *(_DWORD *)(v4 + 80);
  v15 = v14;
  v16 = *(_DWORD *)(v7 + 80);
  v102 = *(_QWORD *)(v109 - 8);
  v17 = *(_QWORD *)(v7 + 64);
  if (!(_DWORD)v9)
    ++v17;
  v114 = v17;
  v18 = type metadata accessor for URLRequest(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v19 + 80);
  v21 = *(_QWORD *)(a3 + 16);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_DWORD *)(v22 + 80);
  v24 = v16 | v14 | v20 | v23;
  if (v24 > 7
    || ((v8 | v14 | v20 | *(_DWORD *)(v22 + 80)) & 0x100000) != 0
    || (v25 = v13 + v14,
        v108 = v14 + 24,
        v107 = v13 + v8,
        v105 = v114 + v14,
        __n = ((((((((((v13
                      + 23
                      + ((v25
                        + ((v25
                          + ((v105
                            + ((v107
                              + ((v108
                                + ((((v25
                                    + ((v25
                                      + ((v14
                                        + 8
                                        + ((((v13 + 7 + (v25 & ~(unint64_t)v14)) & 0xFFFFFFFFFFFFFFF8)
                                          + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v14)) & ~(unint64_t)v14)) & ~(unint64_t)v14)
                                  + v13) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v14)) & ~v16)) & ~(unint64_t)v14)) & ~(unint64_t)v14)) & ~(unint64_t)v14)) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 16,
        v26 = v23 + 16,
        ((v23
        + 16
        + ((((*(_QWORD *)(v19 + 64) + 7 + ((__n + v20) & ~(unint64_t)v20)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v23)
      + *(_QWORD *)(v22 + 64) > 0x18))
  {
    v33 = *a2;
    *a1 = *a2;
    v29 = (uint64_t *)(v33 + ((v24 & 0xF8 ^ 0x1F8) & (v24 + 16)));
    swift_retain(v33);
    return v29;
  }
  v27 = ~v15;
  v103 = ~v16;
  v93 = ~(unint64_t)v20;
  v94 = *(_QWORD *)(v19 + 64) + 7;
  v28 = v6 == v110;
  v111 = v13 + 7;
  v100 = *(_QWORD *)(v21 - 8);
  v101 = v15 + 8;
  v98 = *(_QWORD *)(v18 - 8);
  v99 = v18;
  v96 = *(_DWORD *)(v22 + 80);
  v97 = *(_DWORD *)(v19 + 80);
  v95 = v21;
  v92 = v13 + 23;
  if (v28)
  {
    v29 = a1;
    v30 = a2;
    v31 = v112;
    if (v113 < 2)
      goto LABEL_33;
    v32 = sub_100009658((uint64_t)a2, v113, v112);
    v30 = a2;
    if (v32 < 2)
      goto LABEL_33;
  }
  else
  {
    v34 = (((v25
           + ((v25
             + ((v15
               + 8
               + ((((v13 + 7 + (((unint64_t)a2 + v25) & v27)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v27)) & v27)) & v27)
         + v13) & 0xFFFFFFFFFFFFFFF8;
    v29 = a1;
    if (v11 <= 0x7FFFFFFE)
    {
      v35 = *(_QWORD *)(v34 + 16);
      if (v35 >= 0xFFFFFFFF)
        LODWORD(v35) = -1;
      v30 = a2;
      v31 = v112;
      if ((v35 + 1) >= 2)
        goto LABEL_35;
LABEL_33:
      v37 = v30;
      if (sub_100009658((uint64_t)v30, 1, v31))
      {
        memcpy(v29, v37, v13);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v116 + 16))(v29, v37, v31);
        sub_10000964C((uint64_t)v29, 0, 1, v31);
      }
      v39 = (const void *)(((unint64_t)v37 + v25) & v27);
      if (sub_100009658((uint64_t)v39, 1, v31))
      {
        memcpy((void *)(((unint64_t)v29 + v25) & v27), v39, v13);
      }
      else
      {
        (*(void (**)(unint64_t, const void *, uint64_t))(v116 + 16))(((unint64_t)v29 + v25) & v27, v39, v31);
        sub_10000964C(((unint64_t)v29 + v25) & v27, 0, 1, v31);
      }
      v40 = (_QWORD *)((v111 + (((unint64_t)v29 + v25) & v27)) & 0xFFFFFFFFFFFFF8);
      v41 = (_QWORD *)(((unint64_t)v39 + v111) & 0xFFFFFFFFFFFFFFF8);
      *v40 = *v41;
      v42 = (_QWORD *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
      v43 = (_QWORD *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v42 = *v43;
      v44 = (void *)(((unint64_t)v42 + v101) & v27);
      v45 = (const void *)(((unint64_t)v43 + v101) & v27);
      if (sub_100009658((uint64_t)v45, 1, v31))
      {
        memcpy(v44, v45, v13);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v44, v45, v31);
        sub_10000964C((uint64_t)v44, 0, 1, v31);
      }
      v46 = (void *)(((unint64_t)v44 + v25) & v27);
      v47 = (const void *)(((unint64_t)v45 + v25) & v27);
      if (sub_100009658((uint64_t)v47, 1, v31))
      {
        memcpy(v46, v47, v13);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v46, v47, v31);
        sub_10000964C((uint64_t)v46, 0, 1, v31);
      }
      v48 = (void *)(((unint64_t)v46 + v25) & v27);
      v49 = (const void *)(((unint64_t)v47 + v25) & v27);
      if (sub_100009658((uint64_t)v49, 1, v31))
      {
        memcpy(v48, v49, v13);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v48, v49, v31);
        sub_10000964C((uint64_t)v48, 0, 1, v31);
      }
      *((_BYTE *)v48 + v13) = *((_BYTE *)v49 + v13);
      v50 = ((unint64_t)v48 + v13) & 0xFFFFFFFFFFFFFFF8;
      v51 = ((unint64_t)v49 + v13) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v50 + 8) = *(_QWORD *)(v51 + 8);
      v52 = *(_QWORD *)(v51 + 16);
      *(_QWORD *)(v50 + 16) = v52;
      v53 = (void *)((v108 + v50) & v27);
      v54 = (const void *)((v108 + v51) & v27);
      swift_bridgeObjectRetain(v52);
      if (sub_100009658((uint64_t)v54, 1, v31))
      {
        memcpy(v53, v54, v13);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v53, v54, v31);
        sub_10000964C((uint64_t)v53, 0, 1, v31);
      }
      v55 = (void *)(((unint64_t)v53 + v107) & v103);
      v56 = (const void *)(((unint64_t)v54 + v107) & v103);
      if (sub_100009658((uint64_t)v56, 1, v109))
      {
        memcpy(v55, v56, v114);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v102 + 16))(v55, v56, v109);
        sub_10000964C((uint64_t)v55, 0, 1, v109);
      }
      v57 = (void *)(((unint64_t)v55 + v105) & v27);
      v58 = (const void *)(((unint64_t)v56 + v105) & v27);
      if (sub_100009658((uint64_t)v58, 1, v31))
      {
        memcpy(v57, v58, v13);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v57, v58, v31);
        sub_10000964C((uint64_t)v57, 0, 1, v31);
      }
      v59 = (void *)(((unint64_t)v57 + v25) & v27);
      v60 = (const void *)(((unint64_t)v58 + v25) & v27);
      if (sub_100009658((uint64_t)v60, 1, v31))
      {
        memcpy(v59, v60, v13);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v59, v60, v31);
        sub_10000964C((uint64_t)v59, 0, 1, v31);
      }
      v61 = (void *)(((unint64_t)v59 + v25) & v27);
      v62 = (const void *)(((unint64_t)v60 + v25) & v27);
      v63 = v26;
      if (sub_100009658((uint64_t)v62, 1, v31))
      {
        memcpy(v61, v62, v13);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v61, v62, v31);
        sub_10000964C((uint64_t)v61, 0, 1, v31);
      }
      v64 = ((unint64_t)v61 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      v65 = ((unint64_t)v62 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      v66 = *(_QWORD *)v65;
      *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
      *(_QWORD *)v64 = v66;
      v67 = (_QWORD *)(((unint64_t)v61 + v13 + 23) & 0xFFFFFFFFFFFFFFF8);
      v68 = (_QWORD *)(((unint64_t)v62 + v13 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v67 = *v68;
      v69 = v68[1];
      v67[1] = v69;
      v70 = (_QWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
      v71 = (_QWORD *)(((unint64_t)v68 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v70 = *v71;
      v72 = v71[1];
      v70[1] = v72;
      v73 = (_QWORD *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8);
      v74 = (_QWORD *)(((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v73 = *v74;
      v75 = v74[1];
      v73[1] = v75;
      v76 = (_QWORD *)(((unint64_t)v73 + 23) & 0xFFFFFFFFFFFFFFF8);
      v77 = (_QWORD *)(((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v76 = *v77;
      v78 = v77[1];
      v76[1] = v78;
      v79 = (_QWORD *)(((unint64_t)v76 + 23) & 0xFFFFFFFFFFFFFFF8);
      v80 = (_QWORD *)(((unint64_t)v77 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v79 = *v80;
      v81 = v13;
      v82 = v80[1];
      v79[1] = v82;
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v82);
      v26 = v63;
      v38 = __n;
      if (v113)
        v38 = ((((((((((v92
                      + ((v25
                        + ((v25
                          + ((v105
                            + ((v107
                              + ((v108
                                + ((((v25
                                    + ((v25
                                      + ((v101
                                        + ((((v111 + ((v106 + v15) & v27)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v27)) & v27)) & v27)
                                  + v81) & 0xFFFFFFFFFFFFFFF8)) & v27)) & v103)) & v27)) & v27)) & v27)) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      goto LABEL_66;
    }
    v30 = a2;
    v31 = v112;
    if (v9 < 2)
      goto LABEL_33;
    v36 = sub_100009658((v107 + ((v108 + v34) & v27)) & v103, v9, v109);
    v30 = a2;
    if (v36 <= 1)
      goto LABEL_33;
  }
LABEL_35:
  v38 = __n;
  memcpy(v29, v30, __n);
LABEL_66:
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v98 + 16))(((unint64_t)v29 + v97 + v38) & v93, ((unint64_t)a2 + v97 + v38) & v93, v99);
  v83 = (_QWORD *)((v94 + (((unint64_t)v29 + v97 + v38) & v93)) & 0xFFFFFFFFFFFFF8);
  v84 = (void **)((v94 + (((unint64_t)a2 + v97 + v38) & v93)) & 0xFFFFFFFFFFFFF8);
  v85 = *v84;
  *v83 = *v84;
  v86 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
  v87 = (uint64_t *)(((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8);
  v88 = v87[1];
  v89 = v85;
  if ((v88 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v86 = *(_OWORD *)v87;
  }
  else
  {
    v90 = *v87;
    sub_100019F6C(*v87, v88);
    *(_QWORD *)v86 = v90;
    *(_QWORD *)(v86 + 8) = v88;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v100 + 16))((v26 + v86) & ~v96, ((unint64_t)v87 + v26) & ~v96, v95);
  return v29;
}

uint64_t sub_100019F6C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100019FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned int *)(v4 + 84);
  if ((_DWORD)v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  v45 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v45 - 8);
  v51 = *(_DWORD *)(v7 + 84);
  v8 = v51 - 1;
  if (!v51)
    v8 = 0;
  if (v6 > v8)
    v8 = v6;
  if (v8 <= 0x7FFFFFFE)
    v9 = 2147483646;
  else
    v9 = v8;
  v10 = *(_QWORD *)(v4 + 64);
  v11 = *(unsigned __int8 *)(v4 + 80);
  v12 = ~v11;
  v49 = *(unsigned __int8 *)(v7 + 80);
  v50 = a1;
  v48 = ~v49;
  v47 = *(_QWORD *)(v7 + 64);
  if (v6 == v9)
  {
    if (v5 >= 2 && sub_100009658(a1, v5, v3) >= 2)
    {
      v13 = v10 + v11;
      v14 = v10 + 7;
      v15 = v11 + 8;
      v16 = v10;
      goto LABEL_51;
    }
    goto LABEL_25;
  }
  if ((_DWORD)v5)
    v16 = *(_QWORD *)(v4 + 64);
  else
    v16 = v10 + 1;
  v13 = v16 + v11;
  v14 = v16 + 7;
  v17 = (((v16 + 7 + ((v16 + v11 + a1) & v12)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = v11 + 8;
  v18 = (((v16 + v11 + ((v16 + v11 + ((v11 + 8 + v17) & v12)) & v12)) & v12) + v16) & 0xFFFFFFFFFFFFFFF8;
  if (v8 > 0x7FFFFFFE)
  {
    if (v51 >= 2)
    {
      v20 = sub_100009658((v16 + v49 + ((v11 + v18 + 24) & v12)) & v48, v51, v45);
      v14 = v16 + 7;
      if (v20 > 1)
        goto LABEL_51;
    }
    goto LABEL_25;
  }
  v19 = *(_QWORD *)(v18 + 16);
  if (v19 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  if ((v19 + 1) < 2)
  {
LABEL_25:
    if (!sub_100009658(v50, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v50, v3);
    if ((_DWORD)v5)
      v16 = v10;
    else
      v16 = v10 + 1;
    v21 = (v16 + v50 + v11) & v12;
    if (!sub_100009658(v21, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v21, v3);
    v15 = v11 + 8;
    v22 = (v11 + 8 + ((((v16 + 7 + v21) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v12;
    if (!sub_100009658(v22, 1, v3))
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v22, v3);
    v13 = v16 + v11;
    v23 = (v16 + v11 + v22) & v12;
    if (!sub_100009658(v23, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v23, v3);
    v24 = (v13 + v23) & v12;
    if (!sub_100009658(v24, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v24, v3);
    v25 = (v24 + v16) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRelease(*(_QWORD *)(v25 + 16));
    v26 = (v11 + v25 + 24) & v12;
    if (!sub_100009658(v26, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v26, v3);
    v27 = (v16 + v49 + v26) & v48;
    if (!sub_100009658(v27, 1, v45))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v45);
    v28 = v47 + v11;
    if (!v51)
      ++v28;
    v29 = (v28 + v27) & v12;
    if (!sub_100009658(v29, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v29, v3);
    v30 = (v13 + v29) & v12;
    if (!sub_100009658(v30, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v30, v3);
    v31 = (v13 + v30) & v12;
    if (!sub_100009658(v31, 1, v3))
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v31, v3);
    v32 = (v16 + v31 + 23) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRelease(*(_QWORD *)(v32 + 8));
    v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRelease(*(_QWORD *)(v33 + 8));
    v34 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRelease(*(_QWORD *)(v34 + 8));
    v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRelease(*(_QWORD *)(v35 + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(((v35 + 23) & 0xFFFFFFFFFFFFF8) + 8));
    v14 = v16 + 7;
  }
LABEL_51:
  v36 = v47 + v11;
  if (!v51)
    ++v36;
  v37 = (((((((((v16
               + ((v13
                 + ((v13
                   + ((v36
                     + ((v16
                       + v49
                       + ((v11
                         + ((((v13
                             + ((v13
                               + ((v15 + ((((v14 + (v13 & v12)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v12)) & v12)) & v12)
                           + v16) & 0xFFFFFFFFFFFFFFF8)
                         + 24) & v12)) & v48)) & v12)) & v12)) & v12)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;
  v38 = type metadata accessor for URLRequest(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (v50 + *(unsigned __int8 *)(v39 + 80) + v37 + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  (*(void (**)(unint64_t, uint64_t))(v39 + 8))(v40, v38);
  v41 = (id *)((*(_QWORD *)(v39 + 64) + v40 + 7) & 0xFFFFFFFFFFFFFFF8);

  v42 = (uint64_t *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  v43 = v42[1];
  if ((v43 & 0x3000000000000000) == 0)
    sub_1000096A0(*v42, v43);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v42 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

void *sub_10001A500(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _BOOL8 v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  void *v29;
  const void *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  const void *v36;
  void *v37;
  const void *v38;
  void *v39;
  const void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  void *v46;
  const void *v47;
  BOOL v48;
  size_t v49;
  size_t v50;
  void *v51;
  const void *v52;
  void *v53;
  const void *v54;
  void *v55;
  const void *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  void **v84;
  void *v85;
  unint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  void *v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  unsigned int v99;
  _BOOL8 v100;
  size_t v101;
  unsigned int v102;
  size_t v103;
  uint64_t v104;
  const void *v105;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v99 = *(_DWORD *)(v10 + 84);
  v11 = v99 - 1;
  if (!v99)
    v11 = 0;
  if (v8 > v11)
    v11 = v8;
  if (v11 <= 0x7FFFFFFE)
    v12 = 2147483646;
  else
    v12 = v11;
  v13 = *(unsigned __int8 *)(v6 + 80);
  v14 = ~v13;
  v15 = *(unsigned __int8 *)(v10 + 80);
  v104 = ~v15;
  v103 = *(_QWORD *)(v10 + 64);
  v105 = (const void *)a2;
  v102 = v7;
  v101 = *(_QWORD *)(v6 + 64);
  v95 = v9;
  if (v8 != v12)
  {
    if (v7)
      v16 = *(_QWORD *)(v6 + 64);
    else
      v16 = *(_QWORD *)(v6 + 64) + 1;
    v17 = v16 + v13;
    v20 = (v16 + v13 + a2) & v14;
    v18 = v16 + 7;
    v19 = v13 + 8;
    v21 = (((v16
           + v13
           + ((v16 + v13 + ((v13 + 8 + ((((v16 + 7 + v20) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)
         + v16) & 0xFFFFFFFFFFFFFFF8;
    if (v11 > 0x7FFFFFFE)
    {
      if (v99 >= 2)
      {
        v23 = sub_100009658((v16 + v15 + ((v13 + v21 + 24) & v14)) & v104, v99, v9);
        v19 = v13 + 8;
        if (v23 > 1)
          goto LABEL_30;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v21 + 16);
      if (v22 >= 0xFFFFFFFF)
        LODWORD(v22) = -1;
      if ((v22 + 1) >= 2)
        goto LABEL_30;
    }
LABEL_25:
    if (sub_100009658((uint64_t)v105, 1, v5))
    {
      if (v102)
        v16 = v101;
      else
        v16 = v101 + 1;
      memcpy(a1, v105, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, v105, v5);
      sub_10000964C((uint64_t)a1, 0, 1, v5);
      if (v102)
        v16 = v101;
      else
        v16 = v101 + 1;
    }
    v93 = a1;
    v29 = (void *)(((unint64_t)a1 + v13 + v16) & v14);
    v30 = (const void *)(((unint64_t)v105 + v13 + v16) & v14);
    if (sub_100009658((uint64_t)v30, 1, v5))
    {
      memcpy(v29, v30, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v29, v30, v5);
      sub_10000964C((uint64_t)v29, 0, 1, v5);
    }
    v31 = (_QWORD *)(((unint64_t)v30 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v29 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v32 = *v31;
    v33 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v35 = (void *)(((unint64_t)v33 + v13 + 8) & v14);
    v96 = v13 + 8;
    v36 = (const void *)(((unint64_t)v34 + v13 + 8) & v14);
    v97 = v16 + 7;
    if (sub_100009658((uint64_t)v36, 1, v5))
    {
      memcpy(v35, v36, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v35, v36, v5);
      sub_10000964C((uint64_t)v35, 0, 1, v5);
    }
    v28 = v16 + v13;
    v37 = (void *)(((unint64_t)v35 + v16 + v13) & v14);
    v38 = (const void *)(((unint64_t)v36 + v16 + v13) & v14);
    if (sub_100009658((uint64_t)v38, 1, v5))
    {
      memcpy(v37, v38, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v37, v38, v5);
      sub_10000964C((uint64_t)v37, 0, 1, v5);
    }
    v39 = (void *)(((unint64_t)v37 + v28) & v14);
    v40 = (const void *)(((unint64_t)v38 + v28) & v14);
    if (sub_100009658((uint64_t)v40, 1, v5))
    {
      memcpy(v39, v40, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v39, v40, v5);
      sub_10000964C((uint64_t)v39, 0, 1, v5);
    }
    *((_BYTE *)v39 + v16) = *((_BYTE *)v40 + v16);
    v41 = ((unint64_t)v39 + v16) & 0xFFFFFFFFFFFFFFF8;
    v42 = ((unint64_t)v40 + v16) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v41 + 8) = *(_QWORD *)(v42 + 8);
    v43 = *(_QWORD *)(v42 + 16);
    *(_QWORD *)(v41 + 16) = v43;
    v44 = (void *)((v13 + 24 + v41) & v14);
    v45 = (const void *)((v13 + 24 + v42) & v14);
    swift_bridgeObjectRetain(v43);
    if (sub_100009658((uint64_t)v45, 1, v5))
    {
      memcpy(v44, v45, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v44, v45, v5);
      sub_10000964C((uint64_t)v44, 0, 1, v5);
    }
    v46 = (void *)(((unint64_t)v44 + v16 + v15) & v104);
    v94 = v16 + v15;
    v47 = (const void *)(((unint64_t)v45 + v16 + v15) & v104);
    if (sub_100009658((uint64_t)v47, 1, v95))
    {
      v48 = v99 == 0;
      v100 = v99 == 0;
      if (v48)
        v49 = v103 + 1;
      else
        v49 = v103;
      memcpy(v46, v47, v49);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v46, v47, v95);
      sub_10000964C((uint64_t)v46, 0, 1, v95);
      v48 = v99 == 0;
      v100 = v99 == 0;
      if (v48)
        v49 = v103 + 1;
      else
        v49 = v103;
    }
    v50 = v49 + v13;
    v51 = (void *)(((unint64_t)v46 + v49 + v13) & v14);
    v52 = (const void *)(((unint64_t)v47 + v50) & v14);
    if (sub_100009658((uint64_t)v52, 1, v5))
    {
      memcpy(v51, v52, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v51, v52, v5);
      sub_10000964C((uint64_t)v51, 0, 1, v5);
    }
    a1 = v93;
    v53 = (void *)(((unint64_t)v51 + v28) & v14);
    v54 = (const void *)(((unint64_t)v52 + v28) & v14);
    if (sub_100009658((uint64_t)v54, 1, v5))
    {
      memcpy(v53, v54, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v53, v54, v5);
      sub_10000964C((uint64_t)v53, 0, 1, v5);
    }
    v55 = (void *)(((unint64_t)v53 + v28) & v14);
    v56 = (const void *)(((unint64_t)v54 + v28) & v14);
    if (sub_100009658((uint64_t)v56, 1, v5))
    {
      memcpy(v55, v56, v16);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v55, v56, v5);
      sub_10000964C((uint64_t)v55, 0, 1, v5);
    }
    v25 = v13 + 24;
    v57 = ((unint64_t)v55 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v58 = ((unint64_t)v56 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
    v59 = *(_QWORD *)v58;
    *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
    *(_QWORD *)v57 = v59;
    v60 = (_QWORD *)(((unint64_t)v55 + v16 + 23) & 0xFFFFFFFFFFFFFFF8);
    v61 = (_QWORD *)(((unint64_t)v56 + v16 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v60 = *v61;
    v62 = v61[1];
    v60[1] = v62;
    v63 = (_QWORD *)(((unint64_t)v60 + 23) & 0xFFFFFFFFFFFFFFF8);
    v64 = (_QWORD *)(((unint64_t)v61 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v63 = *v64;
    v65 = v64[1];
    v63[1] = v65;
    v66 = (_QWORD *)(((unint64_t)v63 + 23) & 0xFFFFFFFFFFFFFFF8);
    v67 = (_QWORD *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v66 = *v67;
    v68 = v67[1];
    v66[1] = v68;
    v69 = (_QWORD *)(((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF8);
    v70 = (_QWORD *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v69 = *v70;
    v71 = v70[1];
    v69[1] = v71;
    v72 = (_QWORD *)(((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8);
    v73 = (_QWORD *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v72 = *v73;
    v74 = v73[1];
    v72[1] = v74;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v74);
    v24 = v100;
    if (v102)
      v17 = v101 + v13;
    else
      v17 = v16 + v13;
    v26 = v94;
    goto LABEL_72;
  }
  if (v7 < 2 || sub_100009658(a2, v7, v5) < 2)
    goto LABEL_25;
  v16 = v101;
  v17 = v101 + v13;
  v18 = v101 + 7;
  v19 = v13 + 8;
LABEL_30:
  v24 = v99 == 0;
  v96 = v19;
  v97 = v18;
  v25 = v13 + 24;
  v26 = v16 + v15;
  v27 = v103 + v13;
  if (!v99)
    ++v27;
  memcpy(a1, v105, ((((((((((v16+ ((v17+ ((v17+ ((v27+ ((v16+ v15+ ((v13+ 24+ ((((v17+ ((v17+ ((v19 + ((((v18 + (v17 & v14)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)+ v16) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v104)) & v14)) & v14)) & v14)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)
  + 16);
  v28 = v17;
LABEL_72:
  v75 = (((((((((v16
               + ((v28
                 + ((v28
                   + ((v103
                     + v13
                     + v24
                     + ((v26
                       + ((v25
                         + ((((v28
                             + ((v28
                               + ((v96 + ((((v97 + (v17 & v14)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)
                           + v16) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v104)) & v14)) & v14)) & v14)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;
  v76 = type metadata accessor for URLRequest(0);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = *(unsigned __int8 *)(v77 + 80);
  v79 = v75 + v78 + 16;
  v80 = ((unint64_t)a1 + v79) & ~v78;
  v81 = ((unint64_t)v105 + v79) & ~v78;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v77 + 16))(v80, v81, v76);
  v82 = *(_QWORD *)(v77 + 64) + 7;
  v83 = (_QWORD *)((v82 + v80) & 0xFFFFFFFFFFFFFFF8);
  v84 = (void **)((v82 + v81) & 0xFFFFFFFFFFFFFFF8);
  v85 = *v84;
  *v83 = *v84;
  v86 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
  v87 = (uint64_t *)(((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8);
  v88 = v87[1];
  v89 = v85;
  if ((v88 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v86 = *(_OWORD *)v87;
  }
  else
  {
    v90 = *v87;
    sub_100019F6C(*v87, v88);
    *(_QWORD *)v86 = v90;
    *(_QWORD *)(v86 + 8) = v88;
  }
  v91 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v91 + 16))((v86 + *(unsigned __int8 *)(v91 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80), ((unint64_t)v87 + *(unsigned __int8 *)(v91 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
  return a1;
}

void *sub_10001AE98(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  unsigned int v17;
  unsigned int v18;
  size_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  size_t v55;
  _BOOL8 v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  unsigned int v64;
  BOOL v65;
  _BOOL8 v66;
  size_t v67;
  size_t v68;
  void *v69;
  const void *v70;
  int v71;
  int v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  const void *v78;
  int v79;
  int v80;
  void *v81;
  const void *v82;
  int v83;
  int v84;
  _BYTE *v85;
  _BYTE *v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const void *v95;
  int v96;
  void *v97;
  const void *v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  size_t v103;
  size_t v104;
  size_t v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  int v109;
  int v110;
  void *v111;
  const void *v112;
  int v113;
  int v114;
  void *v115;
  const void *v116;
  int v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  size_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void **v151;
  void **v152;
  void *v153;
  void *v154;
  id v155;
  uint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  const void *v167;
  void *v168;
  const void *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  void *v174;
  const void *v175;
  void *v176;
  const void *v177;
  void *v178;
  const void *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  void *v183;
  const void *v184;
  void *v185;
  const void *v186;
  size_t v187;
  size_t v188;
  void *v189;
  const void *v190;
  void *v191;
  const void *v192;
  void *v193;
  const void *v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  size_t v222;
  size_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  size_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  _BOOL8 v233;
  size_t v234;
  uint64_t v236;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  v232 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v232 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = v9 - 1;
  if (!(_DWORD)v9)
    v10 = 0;
  if (v7 <= v10)
    v11 = v10;
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFE)
    v12 = 2147483646;
  else
    v12 = v11;
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = ~v13;
  v15 = *(unsigned __int8 *)(v8 + 80);
  v236 = ~v15;
  v214 = *(_QWORD *)(v232 - 8);
  v234 = *(_QWORD *)(v8 + 64);
  v231 = v6;
  v224 = *(_QWORD *)(v5 + 64);
  if (v7 != v12)
  {
    v227 = *(unsigned __int8 *)(v8 + 80);
    if (v6)
      v19 = *(_QWORD *)(v5 + 64);
    else
      v19 = *(_QWORD *)(v5 + 64) + 1;
    v20 = v19 + v13;
    v21 = v19 + 7;
    v22 = v13 + 8;
    v23 = (((v19
           + v13
           + ((v19
             + v13
             + ((v13
               + 8
               + ((((v19 + 7 + (((unint64_t)a1 + v19 + v13) & v14)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)
         + v19) & 0xFFFFFFFFFFFFFFF8;
    if (v11 > 0x7FFFFFFE)
    {
      if (v9 >= 2)
      {
        v25 = sub_100009658((v19 + v227 + ((v13 + v23 + 24) & v14)) & v236, v9, v232);
        v21 = v19 + 7;
        v9 = v9;
        if (v25 >= 2)
          goto LABEL_32;
      }
    }
    else
    {
      v24 = *(_QWORD *)(v23 + 16);
      if (v24 >= 0xFFFFFFFF)
        LODWORD(v24) = -1;
      if ((v24 + 1) >= 2)
      {
LABEL_32:
        v28 = (((v20
               + ((v20
                 + ((v22 + ((((v21 + ((v19 + a2 + v13) & v14)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)
             + v19) & 0xFFFFFFFFFFFFFFF8;
        if (v11 > 0x7FFFFFFE)
        {
          v16 = (const void *)a2;
          if (v9 >= 2)
          {
            v58 = (v19 + v227 + ((v13 + v28 + 24) & v14)) & v236;
            v59 = v9;
            v219 = v9;
            v9 = (uint64_t)a1;
            v60 = v13;
            v61 = v5;
            v62 = v22;
            v63 = v21;
            v64 = sub_100009658(v58, v59, v232);
            v21 = v63;
            v22 = v62;
            v5 = v61;
            v13 = v60;
            a1 = (void *)v9;
            LODWORD(v9) = v219;
            if (v64 > 1)
              goto LABEL_83;
          }
        }
        else
        {
          v29 = *(_QWORD *)(v28 + 16);
          if (v29 >= 0xFFFFFFFF)
            LODWORD(v29) = -1;
          v16 = (const void *)a2;
          if ((v29 + 1) >= 2)
            goto LABEL_83;
        }
        goto LABEL_78;
      }
    }
    v26 = (((v20
           + ((v20
             + ((v22 + ((((v21 + ((v19 + a2 + v13) & v14)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)
         + v19) & 0xFFFFFFFFFFFFFFF8;
    if (v11 > 0x7FFFFFFE)
    {
      v16 = (const void *)a2;
      v15 = v227;
      if (v9 >= 2
        && sub_100009658((v19 + v227 + ((v13 + v26 + 24) & v14)) & v236, v9, v232) > 1)
      {
        goto LABEL_48;
      }
    }
    else
    {
      v27 = *(_QWORD *)(v26 + 16);
      if (v27 >= 0xFFFFFFFF)
        LODWORD(v27) = -1;
      v16 = (const void *)a2;
      v15 = v227;
      if ((v27 + 1) >= 2)
        goto LABEL_48;
    }
    goto LABEL_39;
  }
  v16 = (const void *)a2;
  if (v6 < 2)
    goto LABEL_39;
  v17 = sub_100009658((uint64_t)a1, v6, v4);
  v18 = sub_100009658(a2, v231, v4);
  if (v17 < 2)
  {
    if (v18 >= 2)
    {
LABEL_48:
      v218 = v9;
      if (!sub_100009658((uint64_t)a1, 1, v4))
        (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
      v228 = v15;
      if (v231)
        v19 = v224;
      else
        v19 = v224 + 1;
      v35 = ((unint64_t)a1 + v13 + v19) & v14;
      if (!sub_100009658(v35, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v35, v4);
      v36 = v13 + 8;
      v37 = (v13 + 8 + ((((v19 + 7 + v35) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14;
      if (!sub_100009658(v37, 1, v4))
        (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v37, v4);
      v20 = v19 + v13;
      v38 = (v19 + v13 + v37) & v14;
      if (!sub_100009658(v38, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v38, v4);
      v39 = (v20 + v38) & v14;
      if (!sub_100009658(v39, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v39, v4);
      v40 = (v39 + v19) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v40 + 16));
      v225 = v13;
      v230 = v13 + 24;
      v41 = (v13 + 24 + v40) & v14;
      if (!sub_100009658(v41, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v41, v4);
      v42 = v5;
      v220 = v36;
      v229 = v19 + v228;
      v43 = (v229 + v41) & v236;
      if (!sub_100009658(v43, 1, v232))
        (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v43, v232);
      v44 = v234;
      if (!v218)
        v44 = v234 + 1;
      v45 = v44 + v225;
      v46 = (v44 + v225 + v43) & v14;
      if (!sub_100009658(v46, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v46, v4);
      v47 = (v20 + v46) & v14;
      v48 = a3;
      if (!sub_100009658(v47, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v47, v4);
      v49 = (v20 + v47) & v14;
      if (!sub_100009658(v49, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v49, v4);
      v50 = (v19 + 23 + v49) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v50 + 8));
      v51 = (v50 + 23) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v51 + 8));
      v52 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v52 + 8));
      v53 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v53 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(((v53 + 23) & 0xFFFFFFFFFFFFF8) + 8));
      v54 = v45
          + ((v229
            + ((v230
              + ((((v20
                  + ((v20
                    + ((v220 + ((((v19 + 7 + (v20 & v14)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)
                + v19) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v236);
      v22 = v220;
      memcpy(a1, v16, ((((((((((v19 + 23 + ((v20 + ((v20 + (v54 & v14)) & v14)) & v14)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      v55 = v19 + 7;
      v56 = v218 == 0;
      v57 = v234;
      v13 = v225;
      goto LABEL_160;
    }
LABEL_39:
    v30 = sub_100009658((uint64_t)a1, 1, v4);
    v31 = sub_100009658((uint64_t)v16, 1, v4);
    v217 = v9;
    if (v30)
    {
      if (!v31)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, v16, v4);
        sub_10000964C((uint64_t)a1, 0, 1, v4);
LABEL_87:
        v32 = v231;
        v34 = v224;
        goto LABEL_88;
      }
    }
    else
    {
      if (!v31)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(a1, v16, v4);
        goto LABEL_87;
      }
      (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    }
    v32 = v231;
    if (v231)
      v33 = v224;
    else
      v33 = v224 + 1;
    memcpy(a1, v16, v33);
    v34 = v224;
LABEL_88:
    if (v32)
      v19 = v34;
    else
      v19 = v34 + 1;
    v215 = a1;
    v69 = (void *)(((unint64_t)a1 + v13 + v19) & v14);
    v70 = (const void *)(((unint64_t)v16 + v13 + v19) & v14);
    v71 = sub_100009658((uint64_t)v69, 1, v4);
    v72 = sub_100009658((uint64_t)v70, 1, v4);
    if (v71)
    {
      if (!v72)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v69, v70, v4);
        sub_10000964C((uint64_t)v69, 0, 1, v4);
        goto LABEL_97;
      }
    }
    else
    {
      if (!v72)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(v69, v70, v4);
LABEL_97:
        v222 = v19 + 7;
        v73 = (_QWORD *)(((unint64_t)v70 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
        v74 = (_QWORD *)(((unint64_t)v69 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
        *v74 = *v73;
        v75 = (_QWORD *)(((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFFFF8);
        v76 = (_QWORD *)(((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v75 = *v76;
        v77 = (void *)(((unint64_t)v75 + v13 + 8) & v14);
        v78 = (const void *)(((unint64_t)v76 + v13 + 8) & v14);
        v79 = sub_100009658((uint64_t)v77, 1, v4);
        v80 = sub_100009658((uint64_t)v78, 1, v4);
        v221 = v13 + 8;
        if (v79)
        {
          if (!v80)
          {
            (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v77, v78, v4);
            sub_10000964C((uint64_t)v77, 0, 1, v4);
            goto LABEL_103;
          }
        }
        else
        {
          if (!v80)
          {
            (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(v77, v78, v4);
LABEL_103:
            v20 = v19 + v13;
            v81 = (void *)(((unint64_t)v77 + v19 + v13) & v14);
            v82 = (const void *)(((unint64_t)v78 + v19 + v13) & v14);
            v83 = sub_100009658((uint64_t)v81, 1, v4);
            v84 = sub_100009658((uint64_t)v82, 1, v4);
            if (v83)
            {
              if (!v84)
              {
                (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v81, v82, v4);
                sub_10000964C((uint64_t)v81, 0, 1, v4);
                goto LABEL_109;
              }
            }
            else
            {
              if (!v84)
              {
                (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(v81, v82, v4);
LABEL_109:
                v85 = (_BYTE *)(((unint64_t)v81 + v20) & v14);
                v86 = (_BYTE *)(((unint64_t)v82 + v20) & v14);
                v87 = sub_100009658((uint64_t)v85, 1, v4);
                v88 = sub_100009658((uint64_t)v86, 1, v4);
                if (v87)
                {
                  if (!v88)
                  {
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v85, v86, v4);
                    sub_10000964C((uint64_t)v85, 0, 1, v4);
                    goto LABEL_115;
                  }
                }
                else
                {
                  if (!v88)
                  {
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 24))(v85, v86, v4);
LABEL_115:
                    v89 = (unint64_t)&v86[v19];
                    v85[v19] = v86[v19];
                    v90 = (unint64_t)&v85[v19] & 0xFFFFFFFFFFFFFFF8;
                    v91 = v89 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v90 + 8) = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFFF8) + 8);
                    v92 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFFF8) + 16);
                    v93 = *(_QWORD *)(v90 + 16);
                    *(_QWORD *)(v90 + 16) = v92;
                    swift_bridgeObjectRetain(v92);
                    swift_bridgeObjectRelease(v93);
                    v94 = (void *)((v13 + 24 + v90) & v14);
                    v230 = v13 + 24;
                    v95 = (const void *)((v13 + 24 + v91) & v14);
                    LODWORD(v91) = sub_100009658((uint64_t)v94, 1, v4);
                    v96 = sub_100009658((uint64_t)v95, 1, v4);
                    if ((_DWORD)v91)
                    {
                      if (!v96)
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v94, v95, v4);
                        sub_10000964C((uint64_t)v94, 0, 1, v4);
                        goto LABEL_121;
                      }
                    }
                    else
                    {
                      if (!v96)
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v5 + 24))(v94, v95, v4);
LABEL_121:
                        v97 = (void *)(((unint64_t)v94 + v19 + v15) & v236);
                        v229 = v19 + v15;
                        v98 = (const void *)(((unint64_t)v95 + v19 + v15) & v236);
                        v99 = sub_100009658((uint64_t)v97, 1, v232);
                        v100 = sub_100009658((uint64_t)v98, 1, v232);
                        v226 = v13;
                        v101 = v5;
                        if (v99)
                        {
                          if (!v100)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v214 + 16))(v97, v98, v232);
                            sub_10000964C((uint64_t)v97, 0, 1, v232);
LABEL_136:
                            a1 = v215;
                            v103 = v234;
                            v102 = v217;
                            goto LABEL_137;
                          }
                        }
                        else
                        {
                          if (!v100)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v214 + 24))(v97, v98, v232);
                            goto LABEL_136;
                          }
                          (*(void (**)(void *, uint64_t))(v214 + 8))(v97, v232);
                        }
                        v102 = v217;
                        v103 = v234;
                        if (v217)
                          v104 = v234;
                        else
                          v104 = v234 + 1;
                        memcpy(v97, v98, v104);
                        a1 = v215;
LABEL_137:
                        v233 = v102 == 0;
                        if (v102)
                          v105 = v103;
                        else
                          v105 = v103 + 1;
                        v106 = v105 + v226;
                        v107 = (void *)(((unint64_t)v97 + v106) & v14);
                        v108 = (const void *)(((unint64_t)v98 + v106) & v14);
                        v109 = sub_100009658((uint64_t)v107, 1, v4);
                        v110 = sub_100009658((uint64_t)v108, 1, v4);
                        if (v109)
                        {
                          v16 = (const void *)a2;
                          if (!v110)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v101 + 16))(v107, v108, v4);
                            sub_10000964C((uint64_t)v107, 0, 1, v4);
                            goto LABEL_146;
                          }
                        }
                        else
                        {
                          v16 = (const void *)a2;
                          if (!v110)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v101 + 24))(v107, v108, v4);
LABEL_146:
                            v111 = (void *)(((unint64_t)v107 + v20) & v14);
                            v112 = (const void *)(((unint64_t)v108 + v20) & v14);
                            v113 = sub_100009658((uint64_t)v111, 1, v4);
                            v114 = sub_100009658((uint64_t)v112, 1, v4);
                            if (v113)
                            {
                              if (!v114)
                              {
                                (*(void (**)(void *, const void *, uint64_t))(v101 + 16))(v111, v112, v4);
                                sub_10000964C((uint64_t)v111, 0, 1, v4);
                                goto LABEL_152;
                              }
                            }
                            else
                            {
                              if (!v114)
                              {
                                (*(void (**)(void *, const void *, uint64_t))(v101 + 24))(v111, v112, v4);
LABEL_152:
                                v115 = (void *)(((unint64_t)v111 + v20) & v14);
                                v116 = (const void *)(((unint64_t)v112 + v20) & v14);
                                v117 = sub_100009658((uint64_t)v115, 1, v4);
                                v118 = sub_100009658((uint64_t)v116, 1, v4);
                                if (v117)
                                {
                                  if (!v118)
                                  {
                                    (*(void (**)(void *, const void *, uint64_t))(v101 + 16))(v115, v116, v4);
                                    sub_10000964C((uint64_t)v115, 0, 1, v4);
LABEL_158:
                                    v48 = a3;
                                    v13 = v226;
                                    v119 = ((unint64_t)v115 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
                                    v120 = ((unint64_t)v116 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
                                    v121 = *(_QWORD *)v120;
                                    *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
                                    *(_QWORD *)v119 = v121;
                                    v122 = (_QWORD *)(((unint64_t)v115 + v19 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v123 = (_QWORD *)(((unint64_t)v116 + v19 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v122 = *v123;
                                    v124 = v123[1];
                                    v125 = v122[1];
                                    v122[1] = v124;
                                    swift_bridgeObjectRetain(v124);
                                    swift_bridgeObjectRelease(v125);
                                    v126 = (_QWORD *)(((unint64_t)v122 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v127 = (_QWORD *)(((unint64_t)v123 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v126 = *v127;
                                    v128 = v127[1];
                                    v129 = v126[1];
                                    v126[1] = v128;
                                    swift_bridgeObjectRetain(v128);
                                    swift_bridgeObjectRelease(v129);
                                    v130 = (_QWORD *)(((unint64_t)v126 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v131 = (_QWORD *)(((unint64_t)v127 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v130 = *v131;
                                    v132 = v131[1];
                                    v133 = v130[1];
                                    v130[1] = v132;
                                    swift_bridgeObjectRetain(v132);
                                    swift_bridgeObjectRelease(v133);
                                    v134 = (_QWORD *)(((unint64_t)v130 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v135 = (_QWORD *)(((unint64_t)v131 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v134 = *v135;
                                    v136 = v135[1];
                                    v137 = v134[1];
                                    v134[1] = v136;
                                    swift_bridgeObjectRetain(v136);
                                    swift_bridgeObjectRelease(v137);
                                    v138 = (_QWORD *)(((unint64_t)v134 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v139 = (_QWORD *)(((unint64_t)v135 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v138 = *v139;
                                    v140 = v139[1];
                                    v141 = v138[1];
                                    v138[1] = v140;
                                    swift_bridgeObjectRetain(v140);
                                    swift_bridgeObjectRelease(v141);
LABEL_159:
                                    v56 = v233;
                                    v57 = v234;
                                    v22 = v221;
                                    v55 = v222;
LABEL_160:
                                    v142 = v20;
                                    goto LABEL_161;
                                  }
                                }
                                else
                                {
                                  if (!v118)
                                  {
                                    (*(void (**)(void *, const void *, uint64_t))(v101 + 24))(v115, v116, v4);
                                    goto LABEL_158;
                                  }
                                  (*(void (**)(void *, uint64_t))(v101 + 8))(v115, v4);
                                }
                                memcpy(v115, v116, v19);
                                goto LABEL_158;
                              }
                              (*(void (**)(void *, uint64_t))(v101 + 8))(v111, v4);
                            }
                            memcpy(v111, v112, v19);
                            goto LABEL_152;
                          }
                          (*(void (**)(void *, uint64_t))(v101 + 8))(v107, v4);
                        }
                        memcpy(v107, v108, v19);
                        goto LABEL_146;
                      }
                      (*(void (**)(void *, uint64_t))(v5 + 8))(v94, v4);
                    }
                    memcpy(v94, v95, v19);
                    goto LABEL_121;
                  }
                  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v85, v4);
                }
                memcpy(v85, v86, v19);
                goto LABEL_115;
              }
              (*(void (**)(void *, uint64_t))(v5 + 8))(v81, v4);
            }
            memcpy(v81, v82, v19);
            goto LABEL_109;
          }
          (*(void (**)(void *, uint64_t))(v5 + 8))(v77, v4);
        }
        memcpy(v77, v78, v19);
        goto LABEL_103;
      }
      (*(void (**)(void *, uint64_t))(v5 + 8))(v69, v4);
    }
    memcpy(v69, v70, v19);
    goto LABEL_97;
  }
  v227 = v15;
  if (v18 >= 2)
  {
    v19 = v224;
    v20 = v224 + v13;
    v21 = v224 + 7;
    v22 = v13 + 8;
LABEL_83:
    v65 = (_DWORD)v9 == 0;
    v66 = (_DWORD)v9 == 0;
    v230 = v13 + 24;
    v229 = v19 + v227;
    v57 = v234;
    v67 = v234 + v13;
    if (v65)
      ++v67;
    v68 = v21;
    memcpy(a1, v16, ((((((((((v19+ ((v20+ ((v20+ ((v67+ ((v229+ ((v13+ 24+ ((((v20+ ((v20+ ((v22 + ((((v21 + (v20 & v14)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)+ v19) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v236)) & v14)) & v14)) & v14)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
    v56 = v66;
    v55 = v68;
    v48 = a3;
    goto LABEL_160;
  }
LABEL_78:
  if (sub_100009658((uint64_t)v16, 1, v4))
  {
    if (v231)
      v19 = v224;
    else
      v19 = v224 + 1;
    memcpy(a1, v16, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, v16, v4);
    sub_10000964C((uint64_t)a1, 0, 1, v4);
    if (v231)
      v19 = v224;
    else
      v19 = v224 + 1;
  }
  v167 = v16;
  v216 = a1;
  v168 = (void *)(((unint64_t)a1 + v13 + v19) & v14);
  v169 = (const void *)(((unint64_t)v167 + v13 + v19) & v14);
  if (sub_100009658((uint64_t)v169, 1, v4))
  {
    memcpy(v168, v169, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v168, v169, v4);
    sub_10000964C((uint64_t)v168, 0, 1, v4);
  }
  v222 = v19 + 7;
  v170 = (_QWORD *)(((unint64_t)v169 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v171 = (_QWORD *)(((unint64_t)v168 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v171 = *v170;
  v172 = (_QWORD *)(((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFFFF8);
  v173 = (_QWORD *)(((unint64_t)v170 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v172 = *v173;
  v174 = (void *)(((unint64_t)v172 + v13 + 8) & v14);
  v175 = (const void *)(((unint64_t)v173 + v13 + 8) & v14);
  if (sub_100009658((uint64_t)v175, 1, v4))
  {
    memcpy(v174, v175, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v174, v175, v4);
    sub_10000964C((uint64_t)v174, 0, 1, v4);
  }
  v20 = v19 + v13;
  v176 = (void *)(((unint64_t)v174 + v19 + v13) & v14);
  v177 = (const void *)(((unint64_t)v175 + v19 + v13) & v14);
  if (sub_100009658((uint64_t)v177, 1, v4))
  {
    memcpy(v176, v177, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v176, v177, v4);
    sub_10000964C((uint64_t)v176, 0, 1, v4);
  }
  v178 = (void *)(((unint64_t)v176 + v20) & v14);
  v179 = (const void *)(((unint64_t)v177 + v20) & v14);
  if (sub_100009658((uint64_t)v179, 1, v4))
  {
    memcpy(v178, v179, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v178, v179, v4);
    sub_10000964C((uint64_t)v178, 0, 1, v4);
  }
  *((_BYTE *)v178 + v19) = *((_BYTE *)v179 + v19);
  v180 = ((unint64_t)v178 + v19) & 0xFFFFFFFFFFFFFFF8;
  v181 = ((unint64_t)v179 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v180 + 8) = *(_QWORD *)(v181 + 8);
  v182 = *(_QWORD *)(v181 + 16);
  *(_QWORD *)(v180 + 16) = v182;
  v183 = (void *)((v13 + 24 + v180) & v14);
  v230 = v13 + 24;
  v184 = (const void *)((v13 + 24 + v181) & v14);
  swift_bridgeObjectRetain(v182);
  if (sub_100009658((uint64_t)v184, 1, v4))
  {
    memcpy(v183, v184, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v183, v184, v4);
    sub_10000964C((uint64_t)v183, 0, 1, v4);
  }
  v213 = v5;
  v185 = (void *)(((unint64_t)v183 + v19 + v227) & v236);
  v229 = v19 + v227;
  v186 = (const void *)(((unint64_t)v184 + v229) & v236);
  v221 = v13 + 8;
  if (sub_100009658((uint64_t)v186, 1, v232))
  {
    v233 = (_DWORD)v9 == 0;
    if ((_DWORD)v9)
      v187 = v234;
    else
      v187 = v234 + 1;
    memcpy(v185, v186, v187);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v214 + 16))(v185, v186, v232);
    sub_10000964C((uint64_t)v185, 0, 1, v232);
    v233 = (_DWORD)v9 == 0;
    if ((_DWORD)v9)
      v187 = v234;
    else
      v187 = v234 + 1;
  }
  v188 = v187 + v13;
  v189 = (void *)(((unint64_t)v185 + v187 + v13) & v14);
  v190 = (const void *)(((unint64_t)v186 + v188) & v14);
  if (sub_100009658((uint64_t)v190, 1, v4))
  {
    memcpy(v189, v190, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v213 + 16))(v189, v190, v4);
    sub_10000964C((uint64_t)v189, 0, 1, v4);
  }
  a1 = v216;
  v191 = (void *)(((unint64_t)v189 + v20) & v14);
  v192 = (const void *)(((unint64_t)v190 + v20) & v14);
  if (sub_100009658((uint64_t)v192, 1, v4))
  {
    memcpy(v191, v192, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v213 + 16))(v191, v192, v4);
    sub_10000964C((uint64_t)v191, 0, 1, v4);
  }
  v193 = (void *)(((unint64_t)v191 + v20) & v14);
  v194 = (const void *)(((unint64_t)v192 + v20) & v14);
  if (sub_100009658((uint64_t)v194, 1, v4))
  {
    memcpy(v193, v194, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v213 + 16))(v193, v194, v4);
    sub_10000964C((uint64_t)v193, 0, 1, v4);
  }
  v195 = ((unint64_t)v193 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v196 = ((unint64_t)v194 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v197 = *(_QWORD *)v196;
  *(_BYTE *)(v195 + 8) = *(_BYTE *)(v196 + 8);
  *(_QWORD *)v195 = v197;
  v198 = (_QWORD *)(((unint64_t)v193 + v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  v199 = (_QWORD *)(((unint64_t)v194 + v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v198 = *v199;
  v200 = v199[1];
  v198[1] = v200;
  v201 = (_QWORD *)(((unint64_t)v198 + 23) & 0xFFFFFFFFFFFFFFF8);
  v202 = (_QWORD *)(((unint64_t)v199 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v201 = *v202;
  v203 = v202[1];
  v201[1] = v203;
  v204 = (_QWORD *)(((unint64_t)v201 + 23) & 0xFFFFFFFFFFFFFFF8);
  v205 = (_QWORD *)(((unint64_t)v202 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v204 = *v205;
  v206 = v205[1];
  v204[1] = v206;
  v207 = (_QWORD *)(((unint64_t)v204 + 23) & 0xFFFFFFFFFFFFFFF8);
  v208 = (_QWORD *)(((unint64_t)v205 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v207 = *v208;
  v209 = v208[1];
  v207[1] = v209;
  v210 = (_QWORD *)(((unint64_t)v207 + 23) & 0xFFFFFFFFFFFFFFF8);
  v211 = (_QWORD *)(((unint64_t)v208 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v210 = *v211;
  v212 = v211[1];
  v210[1] = v212;
  swift_bridgeObjectRetain(v200);
  swift_bridgeObjectRetain(v203);
  swift_bridgeObjectRetain(v206);
  swift_bridgeObjectRetain(v209);
  swift_bridgeObjectRetain(v212);
  if (!v231)
  {
    v48 = a3;
    v16 = (const void *)a2;
    goto LABEL_159;
  }
  v48 = a3;
  v142 = v224 + v13;
  v16 = (const void *)a2;
  v56 = v233;
  v57 = v234;
  v22 = v13 + 8;
  v55 = v19 + 7;
LABEL_161:
  v143 = (((((((((v19
                + ((v20
                  + ((v20
                    + ((v57
                      + v13
                      + v56
                      + ((v229
                        + ((v230
                          + ((((v20
                              + ((v20
                                + ((v22 + ((((v55 + (v142 & v14)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v14)) & v14)
                            + v19) & 0xFFFFFFFFFFFFFFF8)) & v14)) & v236)) & v14)) & v14)) & v14)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8;
  v144 = type metadata accessor for URLRequest(0);
  v145 = *(_QWORD *)(v144 - 8);
  v146 = *(unsigned __int8 *)(v145 + 80);
  v147 = v143 + v146 + 16;
  v148 = ((unint64_t)a1 + v147) & ~v146;
  v149 = ((unint64_t)v16 + v147) & ~v146;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v145 + 24))(v148, v149, v144);
  v150 = *(_QWORD *)(v145 + 64) + 7;
  v151 = (void **)((v150 + v148) & 0xFFFFFFFFFFFFFFF8);
  v152 = (void **)((v150 + v149) & 0xFFFFFFFFFFFFFFF8);
  v153 = *v152;
  v154 = *v151;
  *v151 = *v152;
  v155 = v153;

  v156 = (uint64_t *)(((unint64_t)v151 + 15) & 0xFFFFFFFFFFFFFFF8);
  v157 = ((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFFFF8;
  v158 = v156[1];
  v159 = *(_QWORD *)(v157 + 8);
  v160 = v159 & 0x3000000000000000;
  if ((v158 & 0x3000000000000000) == 0)
  {
    if (!v160)
    {
      v164 = *(_QWORD *)v157;
      sub_100019F6C(*(_QWORD *)v157, *(_QWORD *)(v157 + 8));
      v165 = *v156;
      v166 = v156[1];
      *v156 = v164;
      v156[1] = v159;
      sub_1000096A0(v165, v166);
      goto LABEL_167;
    }
    sub_1000096A0(*v156, v158);
    goto LABEL_166;
  }
  if (v160)
  {
LABEL_166:
    *(_OWORD *)v156 = *(_OWORD *)v157;
    goto LABEL_167;
  }
  v161 = *(_QWORD *)v157;
  sub_100019F6C(*(_QWORD *)v157, *(_QWORD *)(v157 + 8));
  *v156 = v161;
  v156[1] = v159;
LABEL_167:
  v162 = *(_QWORD *)(*(_QWORD *)(v48 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v162 + 24))(((unint64_t)v156 + *(unsigned __int8 *)(v162 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80), (v157 + *(unsigned __int8 *)(v162 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
  return a1;
}

void *sub_10001C668(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  const void *v31;
  size_t v32;
  unint64_t v33;
  size_t v34;
  size_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  void *v41;
  const void *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  const void *v48;
  void *v49;
  const void *v50;
  void *v51;
  const void *v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  const void *v56;
  void *v57;
  const void *v58;
  size_t v59;
  size_t v60;
  void *v61;
  const void *v62;
  void *v63;
  const void *v64;
  void *v65;
  const void *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  _OWORD *v71;
  _OWORD *v72;
  _OWORD *v73;
  _OWORD *v74;
  _OWORD *v75;
  _OWORD *v76;
  _OWORD *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _OWORD *v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v92;
  int v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  size_t v100;
  unsigned int v101;
  size_t v102;
  uint64_t v103;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  v12 = v11 - 1;
  if (!(_DWORD)v11)
    v12 = 0;
  if (v8 > v12)
    v12 = v8;
  if (v12 <= 0x7FFFFFFE)
    v13 = 2147483646;
  else
    v13 = v12;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = ~v14;
  v16 = *(unsigned __int8 *)(v10 + 80);
  v103 = ~v16;
  v92 = *(_QWORD *)(v9 - 8);
  v102 = *(_QWORD *)(v10 + 64);
  v96 = v9;
  v98 = a2;
  v101 = v7;
  v100 = *(_QWORD *)(v6 + 64);
  if (v8 == v13)
  {
    v17 = (const void *)a2;
    if (v7 >= 2)
    {
      v18 = *(_DWORD *)(v10 + 84);
      v19 = sub_100009658(a2, v101, v5);
      LODWORD(v11) = v18;
      if (v19 >= 2)
      {
        v20 = v100;
        v21 = v100 + v14;
        v22 = v100 + 7;
        v23 = v14 + 8;
LABEL_30:
        v28 = v16;
        v29 = (_DWORD)v11 == 0;
        v30 = v14 + 24;
        v31 = v17;
        v32 = v20 + v28;
        v33 = (v20
             + v28
             + ((v14
               + 24
               + ((((v21
                   + ((v21 + ((v23 + ((((v22 + (v21 & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)
                 + v20) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v103;
        v34 = v102 + v14;
        if (!(_DWORD)v11)
          ++v34;
        v35 = v22;
        v36 = v23;
        memcpy(a1, v31, ((((((((((v20 + ((v21 + ((v21 + ((v34 + v33) & v15)) & v15)) & v15) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
        v37 = v29;
        v38 = v36;
        v39 = v35;
        v40 = v21;
        goto LABEL_72;
      }
    }
  }
  else
  {
    if (v7)
      v20 = *(_QWORD *)(v6 + 64);
    else
      v20 = *(_QWORD *)(v6 + 64) + 1;
    v21 = v20 + v14;
    v22 = v20 + 7;
    v23 = v14 + 8;
    v24 = (((v20
           + v14
           + ((v20
             + v14
             + ((v14 + 8 + ((((v20 + 7 + ((v20 + v14 + a2) & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)
         + v20) & 0xFFFFFFFFFFFFFFF8;
    v17 = (const void *)a2;
    if (v12 > 0x7FFFFFFE)
    {
      if (v11 >= 2)
      {
        v26 = *(_DWORD *)(v10 + 84);
        v27 = sub_100009658((v20 + v16 + ((v14 + v24 + 24) & v15)) & v103, v11, v9);
        LODWORD(v11) = v26;
        v23 = v14 + 8;
        v22 = v20 + 7;
        if (v27 > 1)
          goto LABEL_30;
      }
    }
    else
    {
      v25 = *(_QWORD *)(v24 + 16);
      if (v25 >= 0xFFFFFFFF)
        LODWORD(v25) = -1;
      if ((v25 + 1) >= 2)
        goto LABEL_30;
    }
  }
  v93 = v11;
  if (sub_100009658((uint64_t)v17, 1, v5))
  {
    if (v101)
      v20 = v100;
    else
      v20 = v100 + 1;
    memcpy(a1, v17, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, v17, v5);
    sub_10000964C((uint64_t)a1, 0, 1, v5);
    if (v101)
      v20 = v100;
    else
      v20 = v100 + 1;
  }
  v94 = a1;
  v41 = (void *)(((unint64_t)a1 + v14 + v20) & v15);
  v42 = (const void *)(((unint64_t)v17 + v14 + v20) & v15);
  if (sub_100009658((uint64_t)v42, 1, v5))
  {
    memcpy(v41, v42, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v41, v42, v5);
    sub_10000964C((uint64_t)v41, 0, 1, v5);
  }
  v43 = (_QWORD *)(((unint64_t)v42 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  v44 = (_QWORD *)(((unint64_t)v41 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v44 = *v43;
  v45 = (_QWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  v46 = (_QWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v45 = *v46;
  v47 = (void *)(((unint64_t)v45 + v14 + 8) & v15);
  v48 = (const void *)(((unint64_t)v46 + v14 + 8) & v15);
  if (sub_100009658((uint64_t)v48, 1, v5))
  {
    memcpy(v47, v48, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v47, v48, v5);
    sub_10000964C((uint64_t)v47, 0, 1, v5);
  }
  v40 = v20 + v14;
  v49 = (void *)(((unint64_t)v47 + v20 + v14) & v15);
  v50 = (const void *)(((unint64_t)v48 + v20 + v14) & v15);
  if (sub_100009658((uint64_t)v50, 1, v5))
  {
    memcpy(v49, v50, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v49, v50, v5);
    sub_10000964C((uint64_t)v49, 0, 1, v5);
  }
  v51 = (void *)(((unint64_t)v49 + v40) & v15);
  v52 = (const void *)(((unint64_t)v50 + v40) & v15);
  if (sub_100009658((uint64_t)v52, 1, v5))
  {
    memcpy(v51, v52, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v51, v52, v5);
    sub_10000964C((uint64_t)v51, 0, 1, v5);
  }
  *((_BYTE *)v51 + v20) = *((_BYTE *)v52 + v20);
  v53 = ((unint64_t)v51 + v20) & 0xFFFFFFFFFFFFFFF8;
  v54 = ((unint64_t)v52 + v20) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v53 + 8) = *(_OWORD *)(v54 + 8);
  v55 = (void *)((v14 + 24 + v53) & v15);
  v56 = (const void *)((v14 + 24 + v54) & v15);
  if (sub_100009658((uint64_t)v56, 1, v5))
  {
    memcpy(v55, v56, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v55, v56, v5);
    sub_10000964C((uint64_t)v55, 0, 1, v5);
  }
  v32 = v20 + v16;
  v57 = (void *)(((unint64_t)v55 + v20 + v16) & v103);
  v58 = (const void *)(((unint64_t)v56 + v20 + v16) & v103);
  v95 = v6;
  if (sub_100009658((uint64_t)v58, 1, v96))
  {
    v97 = v93 == 0;
    if (v93)
      v59 = v102;
    else
      v59 = v102 + 1;
    memcpy(v57, v58, v59);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v92 + 32))(v57, v58, v96);
    sub_10000964C((uint64_t)v57, 0, 1, v96);
    v97 = v93 == 0;
    if (v93)
      v59 = v102;
    else
      v59 = v102 + 1;
  }
  v60 = v59 + v14;
  v61 = (void *)(((unint64_t)v57 + v59 + v14) & v15);
  v62 = (const void *)(((unint64_t)v58 + v60) & v15);
  if (sub_100009658((uint64_t)v62, 1, v5))
  {
    memcpy(v61, v62, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v95 + 32))(v61, v62, v5);
    sub_10000964C((uint64_t)v61, 0, 1, v5);
  }
  a1 = v94;
  v63 = (void *)(((unint64_t)v61 + v40) & v15);
  v64 = (const void *)(((unint64_t)v62 + v40) & v15);
  if (sub_100009658((uint64_t)v64, 1, v5))
  {
    memcpy(v63, v64, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v95 + 32))(v63, v64, v5);
    sub_10000964C((uint64_t)v63, 0, 1, v5);
  }
  v65 = (void *)(((unint64_t)v63 + v40) & v15);
  v66 = (const void *)(((unint64_t)v64 + v40) & v15);
  if (sub_100009658((uint64_t)v66, 1, v5))
  {
    memcpy(v65, v66, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v95 + 32))(v65, v66, v5);
    sub_10000964C((uint64_t)v65, 0, 1, v5);
  }
  v39 = v20 + 7;
  v38 = v14 + 8;
  v37 = v97;
  v67 = ((unint64_t)v65 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v68 = ((unint64_t)v66 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v69 = *(_QWORD *)v68;
  *(_BYTE *)(v67 + 8) = *(_BYTE *)(v68 + 8);
  *(_QWORD *)v67 = v69;
  v70 = (_OWORD *)(((unint64_t)v65 + v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v71 = (_OWORD *)(((unint64_t)v66 + v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v70 = *v71;
  v72 = (_OWORD *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8);
  v73 = (_OWORD *)(((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v72 = *v73;
  v74 = (_OWORD *)(((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF8);
  v75 = (_OWORD *)(((unint64_t)v73 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v74 = *v75;
  v76 = (_OWORD *)(((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF8);
  v77 = (_OWORD *)(((unint64_t)v75 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v76 = *v77;
  *(_OWORD *)(((unint64_t)v76 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v77 + 23) & 0xFFFFFFFFFFFFF8);
  if (v101)
    v21 = v100 + v14;
  else
    v21 = v20 + v14;
  v30 = v14 + 24;
LABEL_72:
  v78 = (((((((((v20
               + ((v40
                 + ((v40
                   + ((v102
                     + v14
                     + v37
                     + ((v32
                       + ((v30
                         + ((((v40
                             + ((v40
                               + ((v38 + ((((v39 + (v21 & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)
                           + v20) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v103)) & v15)) & v15)) & v15)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;
  v79 = type metadata accessor for URLRequest(0);
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(unsigned __int8 *)(v80 + 80);
  v82 = v78 + v81 + 16;
  v83 = ((unint64_t)a1 + v82) & ~v81;
  v84 = (v82 + v98) & ~v81;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v80 + 32))(v83, v84, v79);
  v85 = *(_QWORD *)(v80 + 64) + 7;
  v86 = (_QWORD *)((v85 + v83) & 0xFFFFFFFFFFFFFFF8);
  v87 = (_QWORD *)((v85 + v84) & 0xFFFFFFFFFFFFFFF8);
  *v86 = *v87;
  v88 = (_OWORD *)(((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8);
  v89 = (_OWORD *)(((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v88 = *v89;
  v90 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v90 + 32))(((unint64_t)v88 + *(unsigned __int8 *)(v90 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80), ((unint64_t)v89 + *(unsigned __int8 *)(v90 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
  return a1;
}

void *sub_10001CF90(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  _BOOL8 v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  unsigned int v65;
  BOOL v66;
  _BOOL8 v67;
  size_t v68;
  size_t v69;
  uint64_t v70;
  size_t v71;
  void *v72;
  const void *v73;
  int v74;
  int v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  const void *v81;
  int v82;
  int v83;
  void *v84;
  const void *v85;
  int v86;
  int v87;
  _BYTE *v88;
  _BYTE *v89;
  int v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  const void *v96;
  int v97;
  int v98;
  void *v99;
  const void *v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  size_t v105;
  size_t v106;
  size_t v107;
  uint64_t v108;
  void *v109;
  const void *v110;
  int v111;
  int v112;
  void *v113;
  const void *v114;
  int v115;
  int v116;
  void *v117;
  const void *v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  size_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void **v148;
  void **v149;
  void *v150;
  uint64_t *v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v157;
  const void *v158;
  void *v159;
  const void *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  void *v165;
  const void *v166;
  void *v167;
  const void *v168;
  void *v169;
  const void *v170;
  unint64_t v171;
  unint64_t v172;
  void *v173;
  const void *v174;
  void *v175;
  const void *v176;
  size_t v177;
  size_t v178;
  void *v179;
  const void *v180;
  void *v181;
  const void *v182;
  void *v183;
  const void *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  _OWORD *v189;
  _OWORD *v190;
  _OWORD *v191;
  _OWORD *v192;
  _OWORD *v193;
  _OWORD *v194;
  _OWORD *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  size_t v205;
  size_t v207;
  uint64_t v208;
  uint64_t v209;
  size_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  _BOOL8 v215;
  size_t v216;
  uint64_t v218;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  if (v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = v10 - 1;
  if (!(_DWORD)v10)
    v11 = 0;
  if (v7 <= v11)
    v12 = v11;
  else
    v12 = v7;
  if (v12 <= 0x7FFFFFFE)
    v13 = 2147483646;
  else
    v13 = v12;
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = ~v14;
  v16 = *(unsigned __int8 *)(v9 + 80);
  v218 = ~v16;
  v197 = *(_QWORD *)(v8 - 8);
  v214 = v8;
  v216 = *(_QWORD *)(v9 + 64);
  v213 = v6;
  v207 = *(_QWORD *)(v5 + 64);
  if (v7 != v13)
  {
    v20 = v8;
    if (v6)
      v21 = *(_QWORD *)(v5 + 64);
    else
      v21 = *(_QWORD *)(v5 + 64) + 1;
    v22 = v21 + v14;
    v23 = v21 + 7;
    v24 = v14 + 8;
    v25 = (((v21
           + v14
           + ((v21
             + v14
             + ((v14
               + 8
               + ((((v21 + 7 + (((unint64_t)a1 + v21 + v14) & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)
         + v21) & 0xFFFFFFFFFFFFFFF8;
    if (v12 > 0x7FFFFFFE)
    {
      if (v10 >= 2)
      {
        v27 = sub_100009658((v21 + v16 + ((v14 + v25 + 24) & v15)) & v218, v10, v8);
        v23 = v21 + 7;
        v20 = v214;
        v24 = v14 + 8;
        v10 = v10;
        if (v27 >= 2)
          goto LABEL_32;
      }
    }
    else
    {
      v26 = *(_QWORD *)(v25 + 16);
      if (v26 >= 0xFFFFFFFF)
        LODWORD(v26) = -1;
      if ((v26 + 1) >= 2)
      {
LABEL_32:
        v30 = (((v22
               + ((v22
                 + ((v24 + ((((v23 + ((v21 + a2 + v14) & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)
             + v21) & 0xFFFFFFFFFFFFFFF8;
        if (v12 > 0x7FFFFFFE)
        {
          v17 = (const void *)a2;
          if (v10 >= 2)
          {
            v59 = (v21 + v16 + ((v14 + v30 + 24) & v15)) & v218;
            v60 = v10;
            v202 = v10;
            v10 = (uint64_t)a1;
            v61 = v24;
            v211 = v16;
            v62 = v14;
            v63 = v5;
            v64 = v23;
            v65 = sub_100009658(v59, v60, v20);
            v23 = v64;
            v5 = v63;
            v14 = v62;
            v16 = v211;
            v24 = v61;
            a1 = (void *)v10;
            LODWORD(v10) = v202;
            if (v65 > 1)
              goto LABEL_83;
          }
        }
        else
        {
          v31 = *(_QWORD *)(v30 + 16);
          if (v31 >= 0xFFFFFFFF)
            LODWORD(v31) = -1;
          v17 = (const void *)a2;
          if ((v31 + 1) >= 2)
            goto LABEL_83;
        }
        goto LABEL_78;
      }
    }
    v28 = (((v22
           + ((v22
             + ((v24 + ((((v23 + ((v21 + a2 + v14) & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)
         + v21) & 0xFFFFFFFFFFFFFFF8;
    if (v12 > 0x7FFFFFFE)
    {
      v17 = (const void *)a2;
      if (v10 >= 2
        && sub_100009658((v21 + v16 + ((v14 + v28 + 24) & v15)) & v218, v10, v20) > 1)
      {
        goto LABEL_48;
      }
    }
    else
    {
      v29 = *(_QWORD *)(v28 + 16);
      if (v29 >= 0xFFFFFFFF)
        LODWORD(v29) = -1;
      v17 = (const void *)a2;
      if ((v29 + 1) >= 2)
        goto LABEL_48;
    }
    goto LABEL_39;
  }
  v17 = (const void *)a2;
  if (v6 < 2)
    goto LABEL_39;
  v18 = sub_100009658((uint64_t)a1, v6, v4);
  v19 = sub_100009658(a2, v213, v4);
  if (v18 < 2)
  {
    if (v19 >= 2)
    {
LABEL_48:
      v201 = v10;
      if (!sub_100009658((uint64_t)a1, 1, v4))
        (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
      if (v213)
        v21 = v207;
      else
        v21 = v207 + 1;
      v37 = ((unint64_t)a1 + v14 + v21) & v15;
      if (!sub_100009658(v37, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v37, v4);
      v38 = (v14 + 8 + ((((v21 + 7 + v37) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15;
      if (!sub_100009658(v38, 1, v4))
        (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v38, v4);
      v22 = v21 + v14;
      v39 = (v21 + v14 + v38) & v15;
      if (!sub_100009658(v39, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v39, v4);
      v40 = (v22 + v39) & v15;
      if (!sub_100009658(v40, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v40, v4);
      v41 = (v40 + v21) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v41 + 16));
      v208 = v14;
      v212 = v14 + 24;
      v42 = (v14 + 24 + v41) & v15;
      if (!sub_100009658(v42, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v42, v4);
      v203 = v14 + 8;
      v43 = v5;
      v210 = v21 + v16;
      v44 = (v21 + v16 + v42) & v218;
      if (!sub_100009658(v44, 1, v214))
        (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v44, v214);
      v45 = v216;
      if (!v201)
        v45 = v216 + 1;
      v46 = v45 + v208;
      v47 = (v45 + v208 + v44) & v15;
      if (!sub_100009658(v47, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v47, v4);
      v48 = (v22 + v47) & v15;
      v49 = a3;
      if (!sub_100009658(v48, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v48, v4);
      v50 = (v22 + v48) & v15;
      if (!sub_100009658(v50, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v50, v4);
      v51 = (v21 + 23 + v50) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v51 + 8));
      v52 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v52 + 8));
      v53 = (v52 + 23) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v53 + 8));
      v54 = (v53 + 23) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease(*(_QWORD *)(v54 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(((v54 + 23) & 0xFFFFFFFFFFFFF8) + 8));
      memcpy(a1, v17, ((((((((((v21+ 23+ ((v22+ ((v22+ ((v46+ ((v210+ ((v212+ ((((v22+ ((v22+ ((v203+ ((((v21 + 7 + (v22 & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)+ v21) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v218)) & v15)) & v15)) & v15)) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 16);
      v55 = v21 + 7;
      v56 = v203;
      v57 = v201 == 0;
      v58 = v216;
      v14 = v208;
      goto LABEL_160;
    }
LABEL_39:
    v32 = sub_100009658((uint64_t)a1, 1, v4);
    v33 = sub_100009658((uint64_t)v17, 1, v4);
    v200 = v10;
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, v17, v4);
        sub_10000964C((uint64_t)a1, 0, 1, v4);
LABEL_87:
        v34 = v213;
        v36 = v207;
        goto LABEL_88;
      }
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(a1, v17, v4);
        goto LABEL_87;
      }
      (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    }
    v34 = v213;
    if (v213)
      v35 = v207;
    else
      v35 = v207 + 1;
    memcpy(a1, v17, v35);
    v36 = v207;
LABEL_88:
    if (v34)
      v21 = v36;
    else
      v21 = v36 + 1;
    v198 = a1;
    v72 = (void *)(((unint64_t)a1 + v14 + v21) & v15);
    v73 = (const void *)(((unint64_t)v17 + v14 + v21) & v15);
    v74 = sub_100009658((uint64_t)v72, 1, v4);
    v75 = sub_100009658((uint64_t)v73, 1, v4);
    if (v74)
    {
      if (!v75)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v72, v73, v4);
        sub_10000964C((uint64_t)v72, 0, 1, v4);
        goto LABEL_97;
      }
    }
    else
    {
      if (!v75)
      {
        (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(v72, v73, v4);
LABEL_97:
        v205 = v21 + 7;
        v76 = (_QWORD *)(((unint64_t)v73 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
        v77 = (_QWORD *)(((unint64_t)v72 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
        *v77 = *v76;
        v78 = (_QWORD *)(((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8);
        v79 = (_QWORD *)(((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v78 = *v79;
        v80 = (void *)(((unint64_t)v78 + v14 + 8) & v15);
        v81 = (const void *)(((unint64_t)v79 + v14 + 8) & v15);
        v82 = sub_100009658((uint64_t)v80, 1, v4);
        v83 = sub_100009658((uint64_t)v81, 1, v4);
        v204 = v14 + 8;
        if (v82)
        {
          if (!v83)
          {
            (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v80, v81, v4);
            sub_10000964C((uint64_t)v80, 0, 1, v4);
            goto LABEL_103;
          }
        }
        else
        {
          if (!v83)
          {
            (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(v80, v81, v4);
LABEL_103:
            v22 = v21 + v14;
            v84 = (void *)(((unint64_t)v80 + v21 + v14) & v15);
            v85 = (const void *)(((unint64_t)v81 + v21 + v14) & v15);
            v86 = sub_100009658((uint64_t)v84, 1, v4);
            v87 = sub_100009658((uint64_t)v85, 1, v4);
            if (v86)
            {
              if (!v87)
              {
                (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v84, v85, v4);
                sub_10000964C((uint64_t)v84, 0, 1, v4);
                goto LABEL_109;
              }
            }
            else
            {
              if (!v87)
              {
                (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(v84, v85, v4);
LABEL_109:
                v88 = (_BYTE *)(((unint64_t)v84 + v22) & v15);
                v89 = (_BYTE *)(((unint64_t)v85 + v22) & v15);
                v90 = sub_100009658((uint64_t)v88, 1, v4);
                v91 = sub_100009658((uint64_t)v89, 1, v4);
                if (v90)
                {
                  if (!v91)
                  {
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v88, v89, v4);
                    sub_10000964C((uint64_t)v88, 0, 1, v4);
                    goto LABEL_115;
                  }
                }
                else
                {
                  if (!v91)
                  {
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 40))(v88, v89, v4);
LABEL_115:
                    v88[v21] = v89[v21];
                    v92 = (unint64_t)&v88[v21] & 0xFFFFFFFFFFFFFFF8;
                    v93 = (unint64_t)&v89[v21] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v92 + 8) = *(_QWORD *)(v93 + 8);
                    v94 = *(_QWORD *)(v92 + 16);
                    *(_QWORD *)(v92 + 16) = *(_QWORD *)(v93 + 16);
                    swift_bridgeObjectRelease(v94);
                    v95 = (void *)((v14 + 24 + v92) & v15);
                    v212 = v14 + 24;
                    v96 = (const void *)((v14 + 24 + v93) & v15);
                    v97 = sub_100009658((uint64_t)v95, 1, v4);
                    v98 = sub_100009658((uint64_t)v96, 1, v4);
                    if (v97)
                    {
                      if (!v98)
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v95, v96, v4);
                        sub_10000964C((uint64_t)v95, 0, 1, v4);
                        goto LABEL_121;
                      }
                    }
                    else
                    {
                      if (!v98)
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v5 + 40))(v95, v96, v4);
LABEL_121:
                        v99 = (void *)(((unint64_t)v95 + v21 + v16) & v218);
                        v210 = v21 + v16;
                        v100 = (const void *)(((unint64_t)v96 + v21 + v16) & v218);
                        v101 = sub_100009658((uint64_t)v99, 1, v214);
                        v102 = sub_100009658((uint64_t)v100, 1, v214);
                        v209 = v14;
                        v103 = v5;
                        if (v101)
                        {
                          if (!v102)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v197 + 32))(v99, v100, v214);
                            sub_10000964C((uint64_t)v99, 0, 1, v214);
LABEL_136:
                            a1 = v198;
                            v105 = v216;
                            v104 = v200;
                            goto LABEL_137;
                          }
                        }
                        else
                        {
                          if (!v102)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v197 + 40))(v99, v100, v214);
                            goto LABEL_136;
                          }
                          (*(void (**)(void *, uint64_t))(v197 + 8))(v99, v214);
                        }
                        v104 = v200;
                        v105 = v216;
                        if (v200)
                          v106 = v216;
                        else
                          v106 = v216 + 1;
                        memcpy(v99, v100, v106);
                        a1 = v198;
LABEL_137:
                        v215 = v104 == 0;
                        if (v104)
                          v107 = v105;
                        else
                          v107 = v105 + 1;
                        v108 = v107 + v209;
                        v109 = (void *)(((unint64_t)v99 + v108) & v15);
                        v110 = (const void *)(((unint64_t)v100 + v108) & v15);
                        v111 = sub_100009658((uint64_t)v109, 1, v4);
                        v112 = sub_100009658((uint64_t)v110, 1, v4);
                        if (v111)
                        {
                          v17 = (const void *)a2;
                          if (!v112)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v103 + 32))(v109, v110, v4);
                            sub_10000964C((uint64_t)v109, 0, 1, v4);
                            goto LABEL_146;
                          }
                        }
                        else
                        {
                          v17 = (const void *)a2;
                          if (!v112)
                          {
                            (*(void (**)(void *, const void *, uint64_t))(v103 + 40))(v109, v110, v4);
LABEL_146:
                            v113 = (void *)(((unint64_t)v109 + v22) & v15);
                            v114 = (const void *)(((unint64_t)v110 + v22) & v15);
                            v115 = sub_100009658((uint64_t)v113, 1, v4);
                            v116 = sub_100009658((uint64_t)v114, 1, v4);
                            if (v115)
                            {
                              if (!v116)
                              {
                                (*(void (**)(void *, const void *, uint64_t))(v103 + 32))(v113, v114, v4);
                                sub_10000964C((uint64_t)v113, 0, 1, v4);
                                goto LABEL_152;
                              }
                            }
                            else
                            {
                              if (!v116)
                              {
                                (*(void (**)(void *, const void *, uint64_t))(v103 + 40))(v113, v114, v4);
LABEL_152:
                                v117 = (void *)(((unint64_t)v113 + v22) & v15);
                                v118 = (const void *)(((unint64_t)v114 + v22) & v15);
                                v119 = sub_100009658((uint64_t)v117, 1, v4);
                                v120 = sub_100009658((uint64_t)v118, 1, v4);
                                if (v119)
                                {
                                  if (!v120)
                                  {
                                    (*(void (**)(void *, const void *, uint64_t))(v103 + 32))(v117, v118, v4);
                                    sub_10000964C((uint64_t)v117, 0, 1, v4);
LABEL_158:
                                    v49 = a3;
                                    v14 = v209;
                                    v121 = ((unint64_t)v117 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
                                    v122 = ((unint64_t)v118 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
                                    v123 = *(_QWORD *)v122;
                                    *(_BYTE *)(v121 + 8) = *(_BYTE *)(v122 + 8);
                                    *(_QWORD *)v121 = v123;
                                    v124 = (_QWORD *)(((unint64_t)v117 + v21 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v125 = (_QWORD *)(((unint64_t)v118 + v21 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v124 = *v125;
                                    v126 = v124[1];
                                    v124[1] = v125[1];
                                    swift_bridgeObjectRelease(v126);
                                    v127 = (_QWORD *)(((unint64_t)v124 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v128 = (_QWORD *)(((unint64_t)v125 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v127 = *v128;
                                    v129 = v127[1];
                                    v127[1] = v128[1];
                                    swift_bridgeObjectRelease(v129);
                                    v130 = (_QWORD *)(((unint64_t)v127 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v131 = (_QWORD *)(((unint64_t)v128 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v130 = *v131;
                                    v132 = v130[1];
                                    v130[1] = v131[1];
                                    swift_bridgeObjectRelease(v132);
                                    v133 = (_QWORD *)(((unint64_t)v130 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v134 = (_QWORD *)(((unint64_t)v131 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v133 = *v134;
                                    v135 = v133[1];
                                    v133[1] = v134[1];
                                    swift_bridgeObjectRelease(v135);
                                    v136 = (_QWORD *)(((unint64_t)v133 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v137 = (_QWORD *)(((unint64_t)v134 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    *v136 = *v137;
                                    v138 = v136[1];
                                    v136[1] = v137[1];
                                    swift_bridgeObjectRelease(v138);
LABEL_159:
                                    v57 = v215;
                                    v58 = v216;
                                    v56 = v204;
                                    v55 = v205;
LABEL_160:
                                    v139 = v22;
                                    goto LABEL_161;
                                  }
                                }
                                else
                                {
                                  if (!v120)
                                  {
                                    (*(void (**)(void *, const void *, uint64_t))(v103 + 40))(v117, v118, v4);
                                    goto LABEL_158;
                                  }
                                  (*(void (**)(void *, uint64_t))(v103 + 8))(v117, v4);
                                }
                                memcpy(v117, v118, v21);
                                goto LABEL_158;
                              }
                              (*(void (**)(void *, uint64_t))(v103 + 8))(v113, v4);
                            }
                            memcpy(v113, v114, v21);
                            goto LABEL_152;
                          }
                          (*(void (**)(void *, uint64_t))(v103 + 8))(v109, v4);
                        }
                        memcpy(v109, v110, v21);
                        goto LABEL_146;
                      }
                      (*(void (**)(void *, uint64_t))(v5 + 8))(v95, v4);
                    }
                    memcpy(v95, v96, v21);
                    goto LABEL_121;
                  }
                  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v88, v4);
                }
                memcpy(v88, v89, v21);
                goto LABEL_115;
              }
              (*(void (**)(void *, uint64_t))(v5 + 8))(v84, v4);
            }
            memcpy(v84, v85, v21);
            goto LABEL_109;
          }
          (*(void (**)(void *, uint64_t))(v5 + 8))(v80, v4);
        }
        memcpy(v80, v81, v21);
        goto LABEL_103;
      }
      (*(void (**)(void *, uint64_t))(v5 + 8))(v72, v4);
    }
    memcpy(v72, v73, v21);
    goto LABEL_97;
  }
  if (v19 >= 2)
  {
    v21 = v207;
    v22 = v207 + v14;
    v23 = v207 + 7;
    v24 = v14 + 8;
LABEL_83:
    v66 = (_DWORD)v10 == 0;
    v67 = (_DWORD)v10 == 0;
    v212 = v14 + 24;
    v210 = v21 + v16;
    v58 = v216;
    v68 = v216 + v14;
    if (v66)
      ++v68;
    v69 = ((((((((((v21
                  + ((v22
                    + ((v22
                      + ((v68
                        + ((v21
                          + v16
                          + ((v14
                            + 24
                            + ((((v22
                                + ((v22
                                  + ((v24 + ((((v23 + (v22 & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)
                              + v21) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v218)) & v15)) & v15)) & v15)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v70 = v24;
    v71 = v23;
    memcpy(a1, v17, v69);
    v57 = v67;
    v55 = v71;
    v56 = v70;
    v49 = a3;
    goto LABEL_160;
  }
LABEL_78:
  if (sub_100009658((uint64_t)v17, 1, v4))
  {
    if (v213)
      v21 = v207;
    else
      v21 = v207 + 1;
    memcpy(a1, v17, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, v17, v4);
    sub_10000964C((uint64_t)a1, 0, 1, v4);
    if (v213)
      v21 = v207;
    else
      v21 = v207 + 1;
  }
  v158 = v17;
  v199 = a1;
  v159 = (void *)(((unint64_t)a1 + v14 + v21) & v15);
  v160 = (const void *)(((unint64_t)v158 + v14 + v21) & v15);
  if (sub_100009658((uint64_t)v160, 1, v4))
  {
    memcpy(v159, v160, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v159, v160, v4);
    sub_10000964C((uint64_t)v159, 0, 1, v4);
  }
  v205 = v21 + 7;
  v161 = (_QWORD *)(((unint64_t)v160 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  v162 = (_QWORD *)(((unint64_t)v159 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v162 = *v161;
  v163 = (_QWORD *)(((unint64_t)v162 + 15) & 0xFFFFFFFFFFFFFFF8);
  v164 = (_QWORD *)(((unint64_t)v161 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v163 = *v164;
  v165 = (void *)(((unint64_t)v163 + v14 + 8) & v15);
  v166 = (const void *)(((unint64_t)v164 + v14 + 8) & v15);
  if (sub_100009658((uint64_t)v166, 1, v4))
  {
    memcpy(v165, v166, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v165, v166, v4);
    sub_10000964C((uint64_t)v165, 0, 1, v4);
  }
  v22 = v21 + v14;
  v167 = (void *)(((unint64_t)v165 + v21 + v14) & v15);
  v168 = (const void *)(((unint64_t)v166 + v21 + v14) & v15);
  if (sub_100009658((uint64_t)v168, 1, v4))
  {
    memcpy(v167, v168, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v167, v168, v4);
    sub_10000964C((uint64_t)v167, 0, 1, v4);
  }
  v169 = (void *)(((unint64_t)v167 + v22) & v15);
  v170 = (const void *)(((unint64_t)v168 + v22) & v15);
  if (sub_100009658((uint64_t)v170, 1, v4))
  {
    memcpy(v169, v170, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v169, v170, v4);
    sub_10000964C((uint64_t)v169, 0, 1, v4);
  }
  *((_BYTE *)v169 + v21) = *((_BYTE *)v170 + v21);
  v171 = ((unint64_t)v169 + v21) & 0xFFFFFFFFFFFFFFF8;
  v172 = ((unint64_t)v170 + v21) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v171 + 8) = *(_OWORD *)(v172 + 8);
  v173 = (void *)((v14 + 24 + v171) & v15);
  v212 = v14 + 24;
  v174 = (const void *)((v14 + 24 + v172) & v15);
  if (sub_100009658((uint64_t)v174, 1, v4))
  {
    memcpy(v173, v174, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v173, v174, v4);
    sub_10000964C((uint64_t)v173, 0, 1, v4);
  }
  v204 = v14 + 8;
  v175 = (void *)(((unint64_t)v173 + v21 + v16) & v218);
  v210 = v21 + v16;
  v176 = (const void *)(((unint64_t)v174 + v21 + v16) & v218);
  v196 = v5;
  if (sub_100009658((uint64_t)v176, 1, v214))
  {
    v215 = (_DWORD)v10 == 0;
    if ((_DWORD)v10)
      v177 = v216;
    else
      v177 = v216 + 1;
    memcpy(v175, v176, v177);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v197 + 32))(v175, v176, v214);
    sub_10000964C((uint64_t)v175, 0, 1, v214);
    v215 = (_DWORD)v10 == 0;
    if ((_DWORD)v10)
      v177 = v216;
    else
      v177 = v216 + 1;
  }
  v178 = v177 + v14;
  v179 = (void *)(((unint64_t)v175 + v177 + v14) & v15);
  v180 = (const void *)(((unint64_t)v176 + v178) & v15);
  if (sub_100009658((uint64_t)v180, 1, v4))
  {
    memcpy(v179, v180, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v196 + 32))(v179, v180, v4);
    sub_10000964C((uint64_t)v179, 0, 1, v4);
  }
  a1 = v199;
  v17 = (const void *)a2;
  v181 = (void *)(((unint64_t)v179 + v22) & v15);
  v182 = (const void *)(((unint64_t)v180 + v22) & v15);
  if (sub_100009658((uint64_t)v182, 1, v4))
  {
    memcpy(v181, v182, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v196 + 32))(v181, v182, v4);
    sub_10000964C((uint64_t)v181, 0, 1, v4);
  }
  v183 = (void *)(((unint64_t)v181 + v22) & v15);
  v184 = (const void *)(((unint64_t)v182 + v22) & v15);
  if (sub_100009658((uint64_t)v184, 1, v4))
  {
    memcpy(v183, v184, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v196 + 32))(v183, v184, v4);
    sub_10000964C((uint64_t)v183, 0, 1, v4);
  }
  v185 = ((unint64_t)v183 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v186 = ((unint64_t)v184 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v187 = *(_QWORD *)v186;
  *(_BYTE *)(v185 + 8) = *(_BYTE *)(v186 + 8);
  *(_QWORD *)v185 = v187;
  v188 = (_OWORD *)(((unint64_t)v183 + v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v189 = (_OWORD *)(((unint64_t)v184 + v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v188 = *v189;
  v190 = (_OWORD *)(((unint64_t)v188 + 23) & 0xFFFFFFFFFFFFFFF8);
  v191 = (_OWORD *)(((unint64_t)v189 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v190 = *v191;
  v192 = (_OWORD *)(((unint64_t)v190 + 23) & 0xFFFFFFFFFFFFFFF8);
  v193 = (_OWORD *)(((unint64_t)v191 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v192 = *v193;
  v194 = (_OWORD *)(((unint64_t)v192 + 23) & 0xFFFFFFFFFFFFFFF8);
  v195 = (_OWORD *)(((unint64_t)v193 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v194 = *v195;
  *(_OWORD *)(((unint64_t)v194 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v195 + 23) & 0xFFFFFFFFFFFFF8);
  if (!v213)
  {
    v49 = a3;
    goto LABEL_159;
  }
  v49 = a3;
  v139 = v207 + v14;
  v57 = v215;
  v58 = v216;
  v56 = v14 + 8;
  v55 = v21 + 7;
LABEL_161:
  v140 = (((((((((v21
                + ((v22
                  + ((v22
                    + ((v58
                      + v14
                      + v57
                      + ((v210
                        + ((v212
                          + ((((v22
                              + ((v22
                                + ((v56 + ((((v55 + (v139 & v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v15)) & v15)
                            + v21) & 0xFFFFFFFFFFFFFFF8)) & v15)) & v218)) & v15)) & v15)) & v15)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8;
  v141 = type metadata accessor for URLRequest(0);
  v142 = *(_QWORD *)(v141 - 8);
  v143 = *(unsigned __int8 *)(v142 + 80);
  v144 = v140 + v143 + 16;
  v145 = ((unint64_t)a1 + v144) & ~v143;
  v146 = ((unint64_t)v17 + v144) & ~v143;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v142 + 40))(v145, v146, v141);
  v147 = *(_QWORD *)(v142 + 64) + 7;
  v148 = (void **)((v147 + v145) & 0xFFFFFFFFFFFFFFF8);
  v149 = (void **)((v147 + v146) & 0xFFFFFFFFFFFFFFF8);
  v150 = *v148;
  *v148 = *v149;

  v151 = (uint64_t *)(((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFFFF8);
  v152 = (uint64_t *)(((unint64_t)v149 + 15) & 0xFFFFFFFFFFFFFFF8);
  v153 = v151[1];
  if ((v153 & 0x3000000000000000) == 0)
  {
    v154 = v152[1];
    if ((v154 & 0x3000000000000000) == 0)
    {
      v157 = *v151;
      *v151 = *v152;
      v151[1] = v154;
      sub_1000096A0(v157, v153);
      goto LABEL_165;
    }
    sub_1000096A0(*v151, v153);
  }
  *(_OWORD *)v151 = *(_OWORD *)v152;
LABEL_165:
  v155 = *(_QWORD *)(*(_QWORD *)(v49 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v155 + 40))(((unint64_t)v151 + *(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80), ((unint64_t)v152 + *(unsigned __int8 *)(v155 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80));
  return a1;
}

uint64_t sub_10001E680(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v50 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v50 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v6)
    v7 = v6 - 1;
  else
    v7 = 0;
  v49 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v49 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = v9 - 1;
  if (!(_DWORD)v9)
    v10 = 0;
  if (v7 <= v10)
    v11 = v10;
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFE)
    v12 = 2147483646;
  else
    v12 = v11;
  v51 = v12;
  v13 = v12 - 1;
  v14 = type metadata accessor for URLRequest(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  if (v16 <= v13)
    v17 = v13;
  else
    v17 = *(_DWORD *)(v15 + 84);
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned int *)(v19 + 84);
  if (v17 <= v20)
    v21 = *(_DWORD *)(v19 + 84);
  else
    v21 = v17;
  if (v21 <= 0x7FFFFFFE)
    v22 = 2147483646;
  else
    v22 = v21;
  v23 = *(_QWORD *)(v5 + 64);
  if (!(_DWORD)v6)
    ++v23;
  if ((_DWORD)v9)
    v24 = *(_QWORD *)(v8 + 64);
  else
    v24 = *(_QWORD *)(v8 + 64) + 1;
  if (!a2)
    return 0;
  v25 = v14;
  v26 = *(unsigned __int8 *)(v5 + 80);
  v27 = *(unsigned __int8 *)(v8 + 80);
  v28 = *(unsigned __int8 *)(v15 + 80);
  v29 = ((((((((((v23
                + ((v23
                  + v26
                  + ((v23
                    + v26
                    + ((v24
                      + v26
                      + ((v23
                        + v27
                        + ((v26
                          + 24
                          + ((((v23
                              + v26
                              + ((v23
                                + v26
                                + ((v26
                                  + 8
                                  + ((((v23 + 7 + ((v23 + v26) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v26)) & ~v26)) & ~v26)
                            + v23) & 0xFFFFFFFFFFFFFFF8)) & ~v26)) & ~v27)) & ~v26)) & ~v26)) & ~v26)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + v28
      + 16;
  v30 = *(_QWORD *)(v15 + 64) + 7;
  v31 = *(unsigned __int8 *)(v19 + 80);
  v32 = v31 + 16;
  v33 = a1;
  if (a2 <= v22)
    goto LABEL_45;
  v34 = ((v32 + ((((v30 + (v29 & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v31)
      + *(_QWORD *)(v19 + 64);
  v35 = 8 * v34;
  if (v34 > 3)
    goto LABEL_29;
  v37 = ((a2 - v22 + ~(-1 << v35)) >> v35) + 1;
  if (HIWORD(v37))
  {
    v36 = *(_DWORD *)(a1 + v34);
    if (v36)
      goto LABEL_36;
  }
  else
  {
    if (v37 <= 0xFF)
    {
      if (v37 < 2)
        goto LABEL_45;
LABEL_29:
      v36 = *(unsigned __int8 *)(a1 + v34);
      if (!*(_BYTE *)(a1 + v34))
        goto LABEL_45;
LABEL_36:
      v38 = (v36 - 1) << v35;
      if (v34 > 3)
        v38 = 0;
      if ((_DWORD)v34)
      {
        if (v34 <= 3)
          v39 = v34;
        else
          v39 = 4;
        __asm { BR              X12 }
      }
      return v22 + v38 + 1;
    }
    v36 = *(unsigned __int16 *)(a1 + v34);
    if (*(_WORD *)(a1 + v34))
      goto LABEL_36;
  }
LABEL_45:
  if (v13 == v22)
  {
    if (v7 == v51)
    {
      if (v6 < 2)
        return 0;
      v40 = v6;
      v41 = v50;
    }
    else
    {
      v43 = (((v23
             + v26
             + ((v23
               + v26
               + ((v26
                 + 8
                 + ((((v23 + 7 + ((v23 + v26 + a1) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v26)) & ~v26)) & ~v26)
           + v23) & 0xFFFFFFFFFFFFFFF8;
      if (v11 <= 0x7FFFFFFE)
      {
        v44 = *(_QWORD *)(v43 + 16);
        if (v44 >= 0xFFFFFFFF)
          LODWORD(v44) = -1;
        if ((v44 + 1) >= 2)
        {
LABEL_66:
          result = (v44 - 1);
          if (v44 > 1)
            return result;
        }
        return 0;
      }
      if (v9 < 2)
        return 0;
      v33 = (v23 + v27 + ((v26 + 24 + v43) & ~v26)) & ~v27;
      v40 = v9;
      v41 = v49;
    }
    v47 = sub_100009658(v33, v40, v41);
    if (v47 >= 2)
    {
      LODWORD(v44) = v47 - 1;
      goto LABEL_66;
    }
    return 0;
  }
  v42 = (v29 + a1) & ~v28;
  if ((_DWORD)v16 == v22)
  {
    v20 = v16;
    v18 = v25;
    return sub_100009658(v42, v20, v18);
  }
  v45 = (unint64_t *)((v30 + v42) & 0xFFFFFFFFFFFFFFF8);
  if (v21 > 0x7FFFFFFE)
  {
    v42 = (v32 + (((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v31;
    return sub_100009658(v42, v20, v18);
  }
  v46 = *v45;
  if (v46 >= 0xFFFFFFFF)
    LODWORD(v46) = -1;
  if ((v46 + 1) >= 2)
    return v46;
  else
    return 0;
}

void sub_10001EA94(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v36;

  v6 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  v11 = v10 - 1;
  if (!v10)
    v11 = 0;
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  if (v12 <= 0x7FFFFFFE)
    v13 = 2147483646;
  else
    v13 = v12;
  v14 = v13 - 1;
  v36 = 0;
  v15 = *(_QWORD *)(type metadata accessor for URLRequest(0) - 8);
  if (*(_DWORD *)(v15 + 84) <= v14)
    v16 = v14;
  else
    v16 = *(_DWORD *)(v15 + 84);
  v17 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (v16 <= *(_DWORD *)(v17 + 84))
    v18 = *(_DWORD *)(v17 + 84);
  else
    v18 = v16;
  if (v18 <= 0x7FFFFFFE)
    v19 = 2147483646;
  else
    v19 = v18;
  v20 = *(_QWORD *)(v6 + 64);
  if (!v7)
    ++v20;
  v21 = *(unsigned __int8 *)(v6 + 80);
  v23 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v23;
  v24 = *(unsigned __int8 *)(v15 + 80);
  v25 = *(unsigned __int8 *)(v17 + 80);
  v22 = *(unsigned __int8 *)(v9 + 80);
  v26 = ((v25
        + 16
        + ((((*(_QWORD *)(v15 + 64)
            + 7
            + ((((((((((((((v20
                          + v21
                          + ((v20
                            + v21
                            + ((v23
                              + v21
                              + ((v20
                                + v22
                                + ((v21
                                  + 24
                                  + ((((v20
                                      + v21
                                      + ((v20
                                        + v21
                                        + ((v21
                                          + 8
                                          + ((((v20 + 7 + ((v20 + v21) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v21)) & ~v21)) & ~v21)
                                    + v20) & 0xFFFFFFFFFFFFFFF8)) & ~v21)) & ~v22)) & ~v21)) & ~v21)) & ~v21)
                        + v20
                        + 23) & 0xFFFFFFFFFFFFFFF8)
                      + 23) & 0xFFFFFFFFFFFFFFF8)
                    + 23) & 0xFFFFFFFFFFFFFFF8)
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + v24
              + 16) & ~v24)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v25)
      + *(_QWORD *)(v17 + 64);
  v27 = 8 * v26;
  v28 = a3 >= v19;
  v29 = a3 - v19;
  if (v29 != 0 && v28)
  {
    if (v26 <= 3)
    {
      v31 = ((v29 + ~(-1 << v27)) >> v27) + 1;
      if (HIWORD(v31))
      {
        v30 = 4;
      }
      else
      {
        v30 = v31 > 1;
        if (v31 >= 0x100)
          v30 = 2;
      }
    }
    else
    {
      v30 = 1;
    }
    v36 = v30;
  }
  if (v19 >= a2)
    __asm { BR              X28 }
  v32 = ~v19 + a2;
  if (v26 < 4)
  {
    if ((_DWORD)v26)
    {
      v33 = v32 & ~(-1 << v27);
      bzero(a1, v26);
      if ((_DWORD)v26 == 3)
      {
        *(_WORD *)a1 = v33;
        a1[2] = BYTE2(v33);
      }
      else
      {
        if ((_DWORD)v26 != 2)
        {
          v34 = v36;
          *a1 = v33;
LABEL_44:
          __asm { BR              X10 }
        }
        *(_WORD *)a1 = v33;
      }
    }
  }
  else
  {
    bzero(a1, v26);
    *(_DWORD *)a1 = v32;
  }
  v34 = v36;
  goto LABEL_44;
}

uint64_t type metadata accessor for ApiResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000BF38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ApiResponse);
}

uint64_t type metadata accessor for ApiRequestMetrics(uint64_t a1)
{
  uint64_t result;

  result = qword_1000D07B8;
  if (!qword_1000D07B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApiRequestMetrics);
  return result;
}

uint64_t *sub_10001EFE4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    if (sub_100009658((uint64_t)a2, 1, v7))
    {
      v8 = sub_10000738C(&qword_1000D0570);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      sub_10000964C((uint64_t)a1, 0, 1, v7);
    }
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    if (sub_100009658((uint64_t)a2 + v10, 1, v7))
    {
      v13 = sub_10000738C(&qword_1000D0570);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v11, v12, v7);
      sub_10000964C((uint64_t)v11, 0, 1, v7);
    }
    v14 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[8];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    if (sub_100009658((uint64_t)a2 + v15, 1, v7))
    {
      v18 = sub_10000738C(&qword_1000D0570);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v16, v17, v7);
      sub_10000964C((uint64_t)v16, 0, 1, v7);
    }
    v19 = a3[9];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    if (sub_100009658((uint64_t)a2 + v19, 1, v7))
    {
      v22 = sub_10000738C(&qword_1000D0570);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v20, v21, v7);
      sub_10000964C((uint64_t)v20, 0, 1, v7);
    }
    v23 = a3[10];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (sub_100009658((uint64_t)a2 + v23, 1, v7))
    {
      v26 = sub_10000738C(&qword_1000D0570);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v24, v25, v7);
      sub_10000964C((uint64_t)v24, 0, 1, v7);
    }
    v27 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v28 = (uint64_t *)((char *)a1 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = a3[13];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    swift_bridgeObjectRetain(v30);
    if (sub_100009658((uint64_t)v33, 1, v7))
    {
      v34 = sub_10000738C(&qword_1000D0570);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v32, v33, v7);
      sub_10000964C((uint64_t)v32, 0, 1, v7);
    }
    v35 = a3[14];
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    v38 = type metadata accessor for URL(0);
    if (sub_100009658((uint64_t)v37, 1, v38))
    {
      v39 = sub_10000738C((uint64_t *)&unk_1000D16E0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
      sub_10000964C((uint64_t)v36, 0, 1, v38);
    }
    v40 = a3[15];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    if (sub_100009658((uint64_t)a2 + v40, 1, v7))
    {
      v43 = sub_10000738C(&qword_1000D0570);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v41, v42, v7);
      sub_10000964C((uint64_t)v41, 0, 1, v7);
    }
    v44 = a3[16];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    if (sub_100009658((uint64_t)a2 + v44, 1, v7))
    {
      v47 = sub_10000738C(&qword_1000D0570);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v45, v46, v7);
      sub_10000964C((uint64_t)v45, 0, 1, v7);
    }
    v48 = a3[17];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    if (sub_100009658((uint64_t)a2 + v48, 1, v7))
    {
      v51 = sub_10000738C(&qword_1000D0570);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v49, v50, v7);
      sub_10000964C((uint64_t)v49, 0, 1, v7);
    }
    v52 = a3[18];
    v53 = a3[19];
    v54 = (char *)a1 + v52;
    v55 = (char *)a2 + v52;
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v54[8] = v55[8];
    v56 = (uint64_t *)((char *)a1 + v53);
    v57 = (uint64_t *)((char *)a2 + v53);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    v59 = a3[20];
    v60 = a3[21];
    v61 = (uint64_t *)((char *)a1 + v59);
    v62 = (uint64_t *)((char *)a2 + v59);
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = (uint64_t *)((char *)a1 + v60);
    v65 = (uint64_t *)((char *)a2 + v60);
    v66 = v65[1];
    *v64 = *v65;
    v64[1] = v66;
    v67 = a3[22];
    v68 = a3[23];
    v69 = (uint64_t *)((char *)a1 + v67);
    v70 = (uint64_t *)((char *)a2 + v67);
    v71 = v70[1];
    *v69 = *v70;
    v69[1] = v71;
    v72 = (uint64_t *)((char *)a1 + v68);
    v73 = (uint64_t *)((char *)a2 + v68);
    v74 = v73[1];
    *v72 = *v73;
    v72[1] = v74;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v74);
  }
  return a1;
}

uint64_t sub_10001F588(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for Date(0);
  if (!sub_100009658(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  if (!sub_100009658(v5, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v5, v4);
  v6 = a1 + a2[8];
  if (!sub_100009658(v6, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v6, v4);
  v7 = a1 + a2[9];
  if (!sub_100009658(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v7, v4);
  v8 = a1 + a2[10];
  if (!sub_100009658(v8, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v8, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  v9 = a1 + a2[13];
  if (!sub_100009658(v9, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v9, v4);
  v10 = a1 + a2[14];
  v11 = type metadata accessor for URL(0);
  if (!sub_100009658(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[15];
  if (!sub_100009658(v12, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v12, v4);
  v13 = a1 + a2[16];
  if (!sub_100009658(v13, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v13, v4);
  v14 = a1 + a2[17];
  if (!sub_100009658(v14, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v14, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[20] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[21] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[22] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[23] + 8));
}

char *sub_10001F804(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;

  v6 = type metadata accessor for Date(0);
  if (sub_100009658((uint64_t)a2, 1, v6))
  {
    v7 = sub_10000738C(&qword_1000D0570);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    sub_10000964C((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (sub_100009658((uint64_t)&a2[v8], 1, v6))
  {
    v11 = sub_10000738C(&qword_1000D0570);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v9, v10, v6);
    sub_10000964C((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[8];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (sub_100009658((uint64_t)&a2[v13], 1, v6))
  {
    v16 = sub_10000738C(&qword_1000D0570);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v14, v15, v6);
    sub_10000964C((uint64_t)v14, 0, 1, v6);
  }
  v17 = a3[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (sub_100009658((uint64_t)&a2[v17], 1, v6))
  {
    v20 = sub_10000738C(&qword_1000D0570);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v18, v19, v6);
    sub_10000964C((uint64_t)v18, 0, 1, v6);
  }
  v21 = a3[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  if (sub_100009658((uint64_t)&a2[v21], 1, v6))
  {
    v24 = sub_10000738C(&qword_1000D0570);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v22, v23, v6);
    sub_10000964C((uint64_t)v22, 0, 1, v6);
  }
  v25 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  v29 = a3[13];
  v30 = &a1[v29];
  v31 = &a2[v29];
  swift_bridgeObjectRetain(v28);
  if (sub_100009658((uint64_t)v31, 1, v6))
  {
    v32 = sub_10000738C(&qword_1000D0570);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v30, v31, v6);
    sub_10000964C((uint64_t)v30, 0, 1, v6);
  }
  v33 = a3[14];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for URL(0);
  if (sub_100009658((uint64_t)v35, 1, v36))
  {
    v37 = sub_10000738C((uint64_t *)&unk_1000D16E0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    sub_10000964C((uint64_t)v34, 0, 1, v36);
  }
  v38 = a3[15];
  v39 = &a1[v38];
  v40 = &a2[v38];
  if (sub_100009658((uint64_t)&a2[v38], 1, v6))
  {
    v41 = sub_10000738C(&qword_1000D0570);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v39, v40, v6);
    sub_10000964C((uint64_t)v39, 0, 1, v6);
  }
  v42 = a3[16];
  v43 = &a1[v42];
  v44 = &a2[v42];
  if (sub_100009658((uint64_t)&a2[v42], 1, v6))
  {
    v45 = sub_10000738C(&qword_1000D0570);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v43, v44, v6);
    sub_10000964C((uint64_t)v43, 0, 1, v6);
  }
  v46 = a3[17];
  v47 = &a1[v46];
  v48 = &a2[v46];
  if (sub_100009658((uint64_t)&a2[v46], 1, v6))
  {
    v49 = sub_10000738C(&qword_1000D0570);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v47, v48, v6);
    sub_10000964C((uint64_t)v47, 0, 1, v6);
  }
  v50 = a3[18];
  v51 = a3[19];
  v52 = &a1[v50];
  v53 = &a2[v50];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v53[8];
  v54 = &a1[v51];
  v55 = &a2[v51];
  v56 = *((_QWORD *)v55 + 1);
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *((_QWORD *)v54 + 1) = v56;
  v57 = a3[20];
  v58 = a3[21];
  v59 = &a1[v57];
  v60 = &a2[v57];
  v61 = *((_QWORD *)v60 + 1);
  *(_QWORD *)v59 = *(_QWORD *)v60;
  *((_QWORD *)v59 + 1) = v61;
  v62 = &a1[v58];
  v63 = &a2[v58];
  v64 = *((_QWORD *)v63 + 1);
  *(_QWORD *)v62 = *(_QWORD *)v63;
  *((_QWORD *)v62 + 1) = v64;
  v65 = a3[22];
  v66 = a3[23];
  v67 = &a1[v65];
  v68 = &a2[v65];
  v69 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *((_QWORD *)v67 + 1) = v69;
  v70 = &a1[v66];
  v71 = &a2[v66];
  v72 = *((_QWORD *)v71 + 1);
  *(_QWORD *)v70 = *(_QWORD *)v71;
  *((_QWORD *)v70 + 1) = v72;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v72);
  return a1;
}

char *sub_10001FD7C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;

  v6 = type metadata accessor for Date(0);
  v7 = sub_100009658((uint64_t)a1, 1, v6);
  v8 = sub_100009658((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      sub_10000964C((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_10000738C(&qword_1000D0570);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 24))(a1, a2, v6);
LABEL_7:
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = sub_100009658((uint64_t)&a1[v11], 1, v6);
  v15 = sub_100009658((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v12, v13, v6);
      sub_10000964C((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    v17 = sub_10000738C(&qword_1000D0570);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v12, v13, v6);
LABEL_13:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = sub_100009658((uint64_t)&a1[v18], 1, v6);
  v22 = sub_100009658((uint64_t)v20, 1, v6);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v19, v20, v6);
      sub_10000964C((uint64_t)v19, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v23 = *(_QWORD *)(v6 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v6);
LABEL_18:
    v24 = sub_10000738C(&qword_1000D0570);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v6);
LABEL_19:
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = sub_100009658((uint64_t)&a1[v25], 1, v6);
  v29 = sub_100009658((uint64_t)v27, 1, v6);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v26, v27, v6);
      sub_10000964C((uint64_t)v26, 0, 1, v6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v30 = *(_QWORD *)(v6 - 8);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v6);
LABEL_24:
    v31 = sub_10000738C(&qword_1000D0570);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v6);
LABEL_25:
  v32 = a3[10];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = sub_100009658((uint64_t)&a1[v32], 1, v6);
  v36 = sub_100009658((uint64_t)v34, 1, v6);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v33, v34, v6);
      sub_10000964C((uint64_t)v33, 0, 1, v6);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v37 = *(_QWORD *)(v6 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v6);
LABEL_30:
    v38 = sub_10000738C(&qword_1000D0570);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v33, v34, v6);
LABEL_31:
  a1[a3[11]] = a2[a3[11]];
  v39 = a3[12];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v43 = *((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[13];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = sub_100009658((uint64_t)&a1[v44], 1, v6);
  v48 = sub_100009658((uint64_t)v46, 1, v6);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v45, v46, v6);
      sub_10000964C((uint64_t)v45, 0, 1, v6);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v49 = *(_QWORD *)(v6 - 8);
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v6);
LABEL_36:
    v50 = sub_10000738C(&qword_1000D0570);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v49 + 24))(v45, v46, v6);
LABEL_37:
  v51 = a3[14];
  v52 = &a1[v51];
  v53 = &a2[v51];
  v54 = type metadata accessor for URL(0);
  v55 = sub_100009658((uint64_t)v52, 1, v54);
  v56 = sub_100009658((uint64_t)v53, 1, v54);
  if (v55)
  {
    if (!v56)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
      sub_10000964C((uint64_t)v52, 0, 1, v54);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  v57 = *(_QWORD *)(v54 - 8);
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v52, v54);
LABEL_42:
    v58 = sub_10000738C((uint64_t *)&unk_1000D16E0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v57 + 24))(v52, v53, v54);
LABEL_43:
  v59 = a3[15];
  v60 = &a1[v59];
  v61 = &a2[v59];
  v62 = sub_100009658((uint64_t)&a1[v59], 1, v6);
  v63 = sub_100009658((uint64_t)v61, 1, v6);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v60, v61, v6);
      sub_10000964C((uint64_t)v60, 0, 1, v6);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  v64 = *(_QWORD *)(v6 - 8);
  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v60, v6);
LABEL_48:
    v65 = sub_10000738C(&qword_1000D0570);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 24))(v60, v61, v6);
LABEL_49:
  v66 = a3[16];
  v67 = &a1[v66];
  v68 = &a2[v66];
  v69 = sub_100009658((uint64_t)&a1[v66], 1, v6);
  v70 = sub_100009658((uint64_t)v68, 1, v6);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v67, v68, v6);
      sub_10000964C((uint64_t)v67, 0, 1, v6);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  v71 = *(_QWORD *)(v6 - 8);
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v67, v6);
LABEL_54:
    v72 = sub_10000738C(&qword_1000D0570);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 24))(v67, v68, v6);
LABEL_55:
  v73 = a3[17];
  v74 = &a1[v73];
  v75 = &a2[v73];
  v76 = sub_100009658((uint64_t)&a1[v73], 1, v6);
  v77 = sub_100009658((uint64_t)v75, 1, v6);
  if (!v76)
  {
    v78 = *(_QWORD *)(v6 - 8);
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 24))(v74, v75, v6);
      goto LABEL_61;
    }
    (*(void (**)(char *, uint64_t))(v78 + 8))(v74, v6);
    goto LABEL_60;
  }
  if (v77)
  {
LABEL_60:
    v79 = sub_10000738C(&qword_1000D0570);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v74, v75, v6);
  sub_10000964C((uint64_t)v74, 0, 1, v6);
LABEL_61:
  v80 = a3[18];
  v81 = &a1[v80];
  v82 = &a2[v80];
  v83 = *(_QWORD *)v82;
  v81[8] = v82[8];
  *(_QWORD *)v81 = v83;
  v84 = a3[19];
  v85 = &a1[v84];
  v86 = &a2[v84];
  *(_QWORD *)v85 = *(_QWORD *)v86;
  v87 = *((_QWORD *)v86 + 1);
  v88 = *((_QWORD *)v85 + 1);
  *((_QWORD *)v85 + 1) = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease(v88);
  v89 = a3[20];
  v90 = &a1[v89];
  v91 = &a2[v89];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  v92 = *((_QWORD *)v91 + 1);
  v93 = *((_QWORD *)v90 + 1);
  *((_QWORD *)v90 + 1) = v92;
  swift_bridgeObjectRetain(v92);
  swift_bridgeObjectRelease(v93);
  v94 = a3[21];
  v95 = &a1[v94];
  v96 = &a2[v94];
  *(_QWORD *)v95 = *(_QWORD *)v96;
  v97 = *((_QWORD *)v96 + 1);
  v98 = *((_QWORD *)v95 + 1);
  *((_QWORD *)v95 + 1) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  v99 = a3[22];
  v100 = &a1[v99];
  v101 = &a2[v99];
  *(_QWORD *)v100 = *(_QWORD *)v101;
  v102 = *((_QWORD *)v101 + 1);
  v103 = *((_QWORD *)v100 + 1);
  *((_QWORD *)v100 + 1) = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  v104 = a3[23];
  v105 = &a1[v104];
  v106 = &a2[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  v107 = *((_QWORD *)v106 + 1);
  v108 = *((_QWORD *)v105 + 1);
  *((_QWORD *)v105 + 1) = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  return a1;
}

char *sub_100020640(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for Date(0);
  if (sub_100009658((uint64_t)a2, 1, v6))
  {
    v7 = sub_10000738C(&qword_1000D0570);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    sub_10000964C((uint64_t)a1, 0, 1, v6);
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if (sub_100009658((uint64_t)&a2[v8], 1, v6))
  {
    v11 = sub_10000738C(&qword_1000D0570);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v9, v10, v6);
    sub_10000964C((uint64_t)v9, 0, 1, v6);
  }
  v12 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  v13 = a3[8];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (sub_100009658((uint64_t)&a2[v13], 1, v6))
  {
    v16 = sub_10000738C(&qword_1000D0570);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v14, v15, v6);
    sub_10000964C((uint64_t)v14, 0, 1, v6);
  }
  v17 = a3[9];
  v18 = &a1[v17];
  v19 = &a2[v17];
  if (sub_100009658((uint64_t)&a2[v17], 1, v6))
  {
    v20 = sub_10000738C(&qword_1000D0570);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v18, v19, v6);
    sub_10000964C((uint64_t)v18, 0, 1, v6);
  }
  v21 = a3[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  if (sub_100009658((uint64_t)&a2[v21], 1, v6))
  {
    v24 = sub_10000738C(&qword_1000D0570);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v22, v23, v6);
    sub_10000964C((uint64_t)v22, 0, 1, v6);
  }
  v25 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  v26 = a3[13];
  v27 = &a1[v26];
  v28 = &a2[v26];
  if (sub_100009658((uint64_t)&a2[v26], 1, v6))
  {
    v29 = sub_10000738C(&qword_1000D0570);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v27, v28, v6);
    sub_10000964C((uint64_t)v27, 0, 1, v6);
  }
  v30 = a3[14];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v33 = type metadata accessor for URL(0);
  if (sub_100009658((uint64_t)v32, 1, v33))
  {
    v34 = sub_10000738C((uint64_t *)&unk_1000D16E0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
    sub_10000964C((uint64_t)v31, 0, 1, v33);
  }
  v35 = a3[15];
  v36 = &a1[v35];
  v37 = &a2[v35];
  if (sub_100009658((uint64_t)&a2[v35], 1, v6))
  {
    v38 = sub_10000738C(&qword_1000D0570);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v36, v37, v6);
    sub_10000964C((uint64_t)v36, 0, 1, v6);
  }
  v39 = a3[16];
  v40 = &a1[v39];
  v41 = &a2[v39];
  if (sub_100009658((uint64_t)&a2[v39], 1, v6))
  {
    v42 = sub_10000738C(&qword_1000D0570);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v40, v41, v6);
    sub_10000964C((uint64_t)v40, 0, 1, v6);
  }
  v43 = a3[17];
  v44 = &a1[v43];
  v45 = &a2[v43];
  if (sub_100009658((uint64_t)&a2[v43], 1, v6))
  {
    v46 = sub_10000738C(&qword_1000D0570);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v44, v45, v6);
    sub_10000964C((uint64_t)v44, 0, 1, v6);
  }
  v47 = a3[18];
  v48 = a3[19];
  v49 = &a1[v47];
  v50 = &a2[v47];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  *(_OWORD *)&a1[v48] = *(_OWORD *)&a2[v48];
  v51 = a3[21];
  *(_OWORD *)&a1[a3[20]] = *(_OWORD *)&a2[a3[20]];
  *(_OWORD *)&a1[v51] = *(_OWORD *)&a2[v51];
  v52 = a3[23];
  *(_OWORD *)&a1[a3[22]] = *(_OWORD *)&a2[a3[22]];
  *(_OWORD *)&a1[v52] = *(_OWORD *)&a2[v52];
  return a1;
}

char *sub_100020B60(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v6 = type metadata accessor for Date(0);
  v7 = sub_100009658((uint64_t)a1, 1, v6);
  v8 = sub_100009658((uint64_t)a2, 1, v6);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      sub_10000964C((uint64_t)a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v6 - 8);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v6);
LABEL_6:
    v10 = sub_10000738C(&qword_1000D0570);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(a1, a2, v6);
LABEL_7:
  v11 = a3[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = sub_100009658((uint64_t)&a1[v11], 1, v6);
  v15 = sub_100009658((uint64_t)v13, 1, v6);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v12, v13, v6);
      sub_10000964C((uint64_t)v12, 0, 1, v6);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(v6 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v6);
LABEL_12:
    v17 = sub_10000738C(&qword_1000D0570);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v12, v13, v6);
LABEL_13:
  v18 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = sub_100009658((uint64_t)&a1[v19], 1, v6);
  v23 = sub_100009658((uint64_t)v21, 1, v6);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v20, v21, v6);
      sub_10000964C((uint64_t)v20, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v24 = *(_QWORD *)(v6 - 8);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v20, v6);
LABEL_18:
    v25 = sub_10000738C(&qword_1000D0570);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v20, v21, v6);
LABEL_19:
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = sub_100009658((uint64_t)&a1[v26], 1, v6);
  v30 = sub_100009658((uint64_t)v28, 1, v6);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v27, v28, v6);
      sub_10000964C((uint64_t)v27, 0, 1, v6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v31 = *(_QWORD *)(v6 - 8);
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v6);
LABEL_24:
    v32 = sub_10000738C(&qword_1000D0570);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v27, v28, v6);
LABEL_25:
  v33 = a3[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = sub_100009658((uint64_t)&a1[v33], 1, v6);
  v37 = sub_100009658((uint64_t)v35, 1, v6);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v34, v35, v6);
      sub_10000964C((uint64_t)v34, 0, 1, v6);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v38 = *(_QWORD *)(v6 - 8);
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v34, v6);
LABEL_30:
    v39 = sub_10000738C(&qword_1000D0570);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v34, v35, v6);
LABEL_31:
  v40 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v44 = *(_QWORD *)v42;
  v43 = *((_QWORD *)v42 + 1);
  v45 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v41 = v44;
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRelease(v45);
  v46 = a3[13];
  v47 = &a1[v46];
  v48 = &a2[v46];
  v49 = sub_100009658((uint64_t)&a1[v46], 1, v6);
  v50 = sub_100009658((uint64_t)v48, 1, v6);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v47, v48, v6);
      sub_10000964C((uint64_t)v47, 0, 1, v6);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  v51 = *(_QWORD *)(v6 - 8);
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v6);
LABEL_36:
    v52 = sub_10000738C(&qword_1000D0570);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v51 + 40))(v47, v48, v6);
LABEL_37:
  v53 = a3[14];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v56 = type metadata accessor for URL(0);
  v57 = sub_100009658((uint64_t)v54, 1, v56);
  v58 = sub_100009658((uint64_t)v55, 1, v56);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
      sub_10000964C((uint64_t)v54, 0, 1, v56);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  v59 = *(_QWORD *)(v56 - 8);
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v54, v56);
LABEL_42:
    v60 = sub_10000738C((uint64_t *)&unk_1000D16E0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v54, v55, v56);
LABEL_43:
  v61 = a3[15];
  v62 = &a1[v61];
  v63 = &a2[v61];
  v64 = sub_100009658((uint64_t)&a1[v61], 1, v6);
  v65 = sub_100009658((uint64_t)v63, 1, v6);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v62, v63, v6);
      sub_10000964C((uint64_t)v62, 0, 1, v6);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  v66 = *(_QWORD *)(v6 - 8);
  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v62, v6);
LABEL_48:
    v67 = sub_10000738C(&qword_1000D0570);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v66 + 40))(v62, v63, v6);
LABEL_49:
  v68 = a3[16];
  v69 = &a1[v68];
  v70 = &a2[v68];
  v71 = sub_100009658((uint64_t)&a1[v68], 1, v6);
  v72 = sub_100009658((uint64_t)v70, 1, v6);
  if (v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v69, v70, v6);
      sub_10000964C((uint64_t)v69, 0, 1, v6);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  v73 = *(_QWORD *)(v6 - 8);
  if (v72)
  {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v69, v6);
LABEL_54:
    v74 = sub_10000738C(&qword_1000D0570);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(char *, char *, uint64_t))(v73 + 40))(v69, v70, v6);
LABEL_55:
  v75 = a3[17];
  v76 = &a1[v75];
  v77 = &a2[v75];
  v78 = sub_100009658((uint64_t)&a1[v75], 1, v6);
  v79 = sub_100009658((uint64_t)v77, 1, v6);
  if (!v78)
  {
    v80 = *(_QWORD *)(v6 - 8);
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 40))(v76, v77, v6);
      goto LABEL_61;
    }
    (*(void (**)(char *, uint64_t))(v80 + 8))(v76, v6);
    goto LABEL_60;
  }
  if (v79)
  {
LABEL_60:
    v81 = sub_10000738C(&qword_1000D0570);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v76, v77, v6);
  sub_10000964C((uint64_t)v76, 0, 1, v6);
LABEL_61:
  v82 = a3[18];
  v83 = a3[19];
  v84 = &a1[v82];
  v85 = &a2[v82];
  *(_QWORD *)v84 = *(_QWORD *)v85;
  v84[8] = v85[8];
  v86 = &a1[v83];
  v87 = &a2[v83];
  v89 = *(_QWORD *)v87;
  v88 = *((_QWORD *)v87 + 1);
  v90 = *((_QWORD *)v86 + 1);
  *(_QWORD *)v86 = v89;
  *((_QWORD *)v86 + 1) = v88;
  swift_bridgeObjectRelease(v90);
  v91 = a3[20];
  v92 = &a1[v91];
  v93 = &a2[v91];
  v95 = *(_QWORD *)v93;
  v94 = *((_QWORD *)v93 + 1);
  v96 = *((_QWORD *)v92 + 1);
  *(_QWORD *)v92 = v95;
  *((_QWORD *)v92 + 1) = v94;
  swift_bridgeObjectRelease(v96);
  v97 = a3[21];
  v98 = &a1[v97];
  v99 = &a2[v97];
  v101 = *(_QWORD *)v99;
  v100 = *((_QWORD *)v99 + 1);
  v102 = *((_QWORD *)v98 + 1);
  *(_QWORD *)v98 = v101;
  *((_QWORD *)v98 + 1) = v100;
  swift_bridgeObjectRelease(v102);
  v103 = a3[22];
  v104 = &a1[v103];
  v105 = &a2[v103];
  v107 = *(_QWORD *)v105;
  v106 = *((_QWORD *)v105 + 1);
  v108 = *((_QWORD *)v104 + 1);
  *(_QWORD *)v104 = v107;
  *((_QWORD *)v104 + 1) = v106;
  swift_bridgeObjectRelease(v108);
  v109 = a3[23];
  v110 = &a1[v109];
  v111 = &a2[v109];
  v113 = *(_QWORD *)v111;
  v112 = *((_QWORD *)v111 + 1);
  v114 = *((_QWORD *)v110 + 1);
  *(_QWORD *)v110 = v113;
  *((_QWORD *)v110 + 1) = v112;
  swift_bridgeObjectRelease(v114);
  return a1;
}

uint64_t sub_1000213B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000213C4);
}

uint64_t sub_1000213C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v6 = sub_10000738C(&qword_1000D0570);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return sub_100009658(v8, a2, v7);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v7 = sub_10000738C((uint64_t *)&unk_1000D16E0);
    v8 = a1 + *(int *)(a3 + 56);
    return sub_100009658(v8, a2, v7);
  }
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 48) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100021478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021484);
}

uint64_t sub_100021484(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = sub_10000738C(&qword_1000D0570);
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 48) + 8) = a2;
      return result;
    }
    v9 = sub_10000738C((uint64_t *)&unk_1000D16E0);
    v10 = a1 + *(int *)(a4 + 56);
  }
  return sub_10000964C(v10, a2, a2, v9);
}

void sub_100021528(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[20];

  sub_100021618(319, (unint64_t *)&qword_1000D07C8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v7[0] = v4;
    v7[1] = v4;
    v7[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v7[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v7[4] = v4;
    v7[5] = v4;
    v7[6] = v4;
    v7[7] = &unk_1000A0598;
    v7[8] = &unk_1000A05B0;
    v7[9] = v4;
    sub_100021618(319, (unint64_t *)&unk_1000D07D0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v6 <= 0x3F)
    {
      v7[10] = *(_QWORD *)(v5 - 8) + 64;
      v7[11] = v4;
      v7[12] = v4;
      v7[13] = v4;
      v7[14] = &unk_1000A05C8;
      v7[15] = &unk_1000A05B0;
      v7[16] = &unk_1000A05B0;
      v7[17] = &unk_1000A05B0;
      v7[18] = &unk_1000A05B0;
      v7[19] = &unk_1000A05B0;
      swift_initStructMetadata(a1, 256, 20, v7, a1 + 16);
    }
  }
}

void sub_100021618(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_100021664(uint64_t a1, void *a2)
{
  unint64_t v2;
  Swift::String v5;

  v2 = 0xD000000000000013;
  if (a2)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease(0xE000000000000000);
    v5._countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    return 0xD000000000000026;
  }
  return v2;
}

uint64_t sub_10002170C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t inited;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[152];

  v4 = sub_10000738C(&qword_1000D0848);
  inited = swift_initStackObject(v4, v11);
  v6 = (_QWORD *)inited;
  *(_OWORD *)(inited + 16) = xmmword_1000A0600;
  *(_BYTE *)(inited + 32) = 22;
  v7 = 1;
  if (!a2)
    v7 = 2;
  *(_QWORD *)(inited + 64) = &type metadata for Int;
  *(_QWORD *)(inited + 40) = v7;
  *(_BYTE *)(inited + 72) = 23;
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 80) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 88) = 0x80000001000A6520;
  *(_BYTE *)(inited + 112) = 24;
  v8 = sub_100021664(a1, a2);
  v6[18] = &type metadata for String;
  v6[15] = v8;
  v6[16] = v9;
  sub_10000738C((uint64_t *)&unk_1000CFF70);
  sub_100021804();
  return Dictionary.init(dictionaryLiteral:)(v6, &type metadata for SportsMetricsKey);
}

uint64_t sub_1000217FC()
{
  uint64_t v0;

  return sub_10002170C(*(_QWORD *)v0, *(void **)(v0 + 8));
}

unint64_t sub_100021804()
{
  unint64_t result;

  result = qword_1000D1680;
  if (!qword_1000D1680)
  {
    result = swift_getWitnessTable(&unk_1000A44E4, &type metadata for SportsMetricsKey);
    atomic_store(result, (unint64_t *)&qword_1000D1680);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LiveStatsError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for LiveStatsError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for LiveStatsError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for LiveStatsError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for LiveStatsError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveStatsError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LiveStatsError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_100021994(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000219AC(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveStatsError()
{
  return &type metadata for LiveStatsError;
}

void sub_1000219E0(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  if (qword_1000CFA58 != -1)
    swift_once(&qword_1000CFA58, sub_100024D38);
  v12 = *(id *)(qword_1000DDA30 + 16);
  v13 = sub_100022F00();
  sub_100022B5C(a4, a5, v13);

  v14 = sub_100022F00();
  v15 = objc_msgSend((id)objc_opt_self(AMSProcessInfo), "currentProcess");

  v16 = objc_msgSend(objc_allocWithZone((Class)AMSURLRequestEncoder), "initWithBag:", v12);
  objc_msgSend(v16, "setUrlKnownToBeTrusted:", a3 & 1);
  a6[4] = sub_100018468(0, &qword_1000D0870, AMSURLRequestEncoder_ptr);
  a6[5] = &off_1000C4108;
  a6[1] = v16;
  sub_10000AE14(a2, (uint64_t)(a6 + 7));
  v17 = objc_allocWithZone((Class)type metadata accessor for AMSTaskDelegate());
  v18 = a1;
  v19 = v16;
  v20 = objc_msgSend(v17, "init");

  *a6 = v18;
  a6[6] = v20;
}

uint64_t sub_100021B9C(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;

  sub_100073004(v21, a1);
  v4 = v21[0];
  v22 = v21[1];
  v5 = v21[3];
  v6 = v21[4];
  v7 = (unint64_t)(v21[2] + 64) >> 6;
  result = swift_bridgeObjectRetain(a1);
  if (!v6)
    goto LABEL_3;
LABEL_2:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v5 << 6);
  while (1)
  {
    v15 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v10);
    v19 = *v18;
    v20 = v18[1];
    swift_bridgeObjectRetain(v17);
    sub_10000A848();
    a2(v16, v17, v19, v20);
    swift_bridgeObjectRelease(v20);
    result = swift_bridgeObjectRelease(v17);
    if (v6)
      goto LABEL_2;
LABEL_3:
    v11 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v11 >= v7)
      return swift_release(v4);
    v12 = *(_QWORD *)(v22 + 8 * v11);
    v13 = v5 + 1;
    if (!v12)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v7)
        return swift_release(v4);
      v12 = *(_QWORD *)(v22 + 8 * v13);
      if (!v12)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v7)
          return swift_release(v4);
        v12 = *(_QWORD *)(v22 + 8 * v13);
        if (!v12)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v7)
            return swift_release(v4);
          v12 = *(_QWORD *)(v22 + 8 * v13);
          if (!v12)
          {
            v13 = v5 + 5;
            if (v5 + 5 >= v7)
              return swift_release(v4);
            v12 = *(_QWORD *)(v22 + 8 * v13);
            if (!v12)
            {
              v14 = v5 + 6;
              while (v14 < v7)
              {
                v12 = *(_QWORD *)(v22 + 8 * v14++);
                if (v12)
                {
                  v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release(v4);
            }
          }
        }
      }
    }
LABEL_18:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v5 = v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100021D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v3 = type metadata accessor for URLQueryItem(0);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v21 = v1;
  v27 = _swiftEmptyArrayStorage;
  sub_1000156BC(0, v6, 0);
  v7 = v27;
  result = sub_100022BF0(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v10 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v11 = a1 + 64;
      v22 = a1 + 64;
      while ((*(_QWORD *)(v11 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
      {
        if ((_DWORD)v9 != *(_DWORD *)(a1 + 36))
          goto LABEL_18;
        v25 = v6;
        v26 = v9;
        v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
        v14 = *v12;
        v13 = v12[1];
        v15 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v10);
        v16 = *v15;
        v17 = v15[1];
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v17);
        URLQueryItem.init(name:value:)(v14, v13, v16, v17);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v13);
        v27 = v7;
        v19 = v7[2];
        v18 = v7[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000156BC(v18 > 1, v19 + 1, 1);
          v7 = v27;
        }
        v7[2] = v19 + 1;
        result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v23 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72) * v19, v5, v24);
        v20 = -1 << *(_BYTE *)(a1 + 32);
        if ((uint64_t)v10 >= -v20)
          goto LABEL_19;
        v11 = v22;
        if ((*(_QWORD *)(v22 + 8 * (v10 >> 6)) & (1 << v10)) == 0)
          goto LABEL_20;
        if ((_DWORD)v26 != *(_DWORD *)(a1 + 36))
          goto LABEL_21;
        result = _HashTable.occupiedBucket(after:)(v10, v22, ~v20);
        v6 = v25 - 1;
        if (v25 == 1)
          return (uint64_t)v7;
        v10 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v9 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

id sub_100021F90()
{
  uint64_t v0;
  id v1;
  NSURL *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  URL._bridgeToObjectiveC()(v2);
  v4 = v3;
  v5 = objc_msgSend(v1, "initWithURL:", v3);

  v6 = type metadata accessor for URL(0);
  sub_100022EEC(v6);
  return v5;
}

id sub_100022000(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  id v49;
  unint64_t v50;
  NSString v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v60 = a4;
  v58 = a6;
  v59 = a2;
  v56 = a5;
  type metadata accessor for URLError.Code(0);
  sub_100018BD0();
  __chkstk_darwin(v8);
  sub_10000A7D4();
  v62 = v10 - v9;
  v11 = type metadata accessor for URLError(0);
  v63 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10000A7D4();
  v14 = v13 - v12;
  v15 = type metadata accessor for URLComponents(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10000A6E4();
  sub_10000738C((uint64_t *)&unk_1000D16E0);
  sub_100018BD0();
  __chkstk_darwin(v17);
  sub_10000A7D4();
  v20 = v19 - v18;
  v64 = type metadata accessor for URL(0);
  v57 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v54 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v55 = (char *)&v53 - v23;
  sub_10000738C(&qword_1000D0850);
  sub_100018BD0();
  __chkstk_darwin(v24);
  sub_10000A7D4();
  v27 = v26 - v25;
  v29 = URL.absoluteString.getter(v28);
  v31 = v30;
  URLComponents.init(string:)(v29);
  swift_bridgeObjectRelease(v31);
  if (!sub_100022EDC())
  {
    if (a3)
      v32 = v59;
    else
      v32 = 0;
    if (a3)
      v33 = a3;
    else
      v33 = 0xE000000000000000;
    sub_10000A848();
    URLComponents.path.setter(v32, v33);
  }
  if (!sub_100022EDC())
  {
    v34 = v60;
    if (v60)
    {
      v35 = sub_10000A848();
      v36 = v61;
      v37 = sub_100021D44(v35);
      v61 = v36;
      swift_bridgeObjectRelease(v34);
    }
    else
    {
      v37 = 0;
    }
    URLComponents.queryItems.setter(v37);
  }
  if (sub_100022EDC())
  {
    sub_10000964C(v20, 1, 1, v64);
LABEL_17:
    v40 = sub_100022988(v20, (uint64_t *)&unk_1000D16E0);
    v41 = v62;
    static URLError.Code.badURL.getter(v40);
    v42 = (id)sub_100022820((uint64_t)_swiftEmptyArrayStorage);
    v43 = sub_100022948();
    v44 = _BridgedStoredNSError.init(_:userInfo:)(v41, v42, v11, v43);
    URLError._nsError.getter(v44);
    v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v14, v11);
    swift_willThrow(v45);
    sub_100022988(v27, &qword_1000D0850);
    return v42;
  }
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v6, v27, v15);
  URLComponents.url.getter(v38);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v6, v15);
  v39 = v64;
  if (sub_100009658(v20, 1, v64) == 1)
    goto LABEL_17;
  v47 = v57;
  v48 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v55, v20, v39);
  sub_100018468(0, &qword_1000D0858, AMSURLRequest_ptr);
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v54, v48, v39);
  v49 = sub_100021F90();
  objc_msgSend(v49, "setTimeoutInterval:", 10.0);
  if ((_BYTE)v56)
  {
    if (v56 == 1)
      v50 = 0xE400000000000000;
    else
      v50 = 0xE600000000000000;
  }
  else
  {
    v50 = 0xE300000000000000;
  }
  v42 = v49;
  v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v50);
  objc_msgSend(v42, "setHTTPMethod:", v51);

  __chkstk_darwin(v52);
  *(&v53 - 2) = (uint64_t)v42;
  sub_100021B9C(v58, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100022ED8);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v39);
  sub_100022988(v27, &qword_1000D0850);
  return v42;
}

id sub_10002245C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSString v9;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10000A6E4();
  sub_100018468(0, &qword_1000D0858, AMSURLRequest_ptr);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, a1, v5);
  v7 = sub_100021F90();
  objc_msgSend(v7, "setTimeoutInterval:", 10.0);
  v8 = v7;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setHTTPMethod:", v9);

  sub_100021B9C(a2, sub_100022EC0);
  return v8;
}

void sub_100022570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8;

  v8 = String._bridgeToObjectiveC()();
  sub_100022BA0(a3, a4, (uint64_t)v8, a5);

}

uint64_t sub_1000225C4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain(v0[1]);
  return v1;
}

uint64_t sub_1000225F0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000225F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE v22[40];

  sub_10000AE14(a1, (uint64_t)v22);
  v4 = sub_10000738C(&qword_1000D0878);
  v5 = swift_dynamicCast(v18, v22, v4, &type metadata for AMSApiRequest, 6);
  if ((v5 & 1) != 0)
  {
    v6 = v19;
    v7 = v20;
    v8 = v21;
    objc_msgSend(v2, "setAccount:", v21);

    swift_bridgeObjectRelease(v7);
    v5 = swift_release(v6);
  }
  __chkstk_darwin(v5);
  v9 = (void *)sub_10002CADC((void (*)(uint64_t *__return_ptr, uint64_t *))sub_100022CC8);
  v10 = v9;
  if ((v11 & 1) != 0)
  {
    v14 = 1;
    sub_100022CE4(v9, 1);
    v15 = type metadata accessor for ApiAgentError(0);
    swift_storeEnumTagMultiPayload(a2, v15, 3);
  }
  else
  {
    v12 = objc_msgSend(v2, "requestByEncodingRequest:parameters:", v9, 0);
    v13 = *(int *)(sub_10000738C(&qword_1000D16B0) + 48);
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v10);
    sub_100022CE4(v10, 0);
    v14 = 0;
    *(_QWORD *)(a2 + v13) = v12;
  }
  v16 = sub_10000738C(&qword_1000D0880);
  return swift_storeEnumTagMultiPayload(a2, v16, v14);
}

uint64_t sub_10002276C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v6 = a1[3];
  v7 = a1[4];
  sub_1000073CC(a1, v6);
  v8 = (uint64_t (*)(void))(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v10 = v9;
  v11 = v8();
  if (v3)
  {
    result = swift_release(v10);
    *a2 = v3;
  }
  else
  {
    v13 = v11;
    result = swift_release(v10);
    *a3 = v13;
  }
  return result;
}

uint64_t sub_100022800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000225F8(a1, a2);
}

unint64_t sub_100022820(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000738C(&qword_1000D0860);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100022C70(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_1000229B4(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100022CB8(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100022948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CFD50;
  if (!qword_1000CFD50)
  {
    v1 = type metadata accessor for URLError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URLError, v1);
    atomic_store(result, (unint64_t *)&qword_1000CFD50);
  }
  return result;
}

uint64_t sub_100022988(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000738C(a2);
  sub_100022EEC(v3);
  return a1;
}

unint64_t sub_1000229B4(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_100022A18(a1, a2, v4);
}

unint64_t sub_100022A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

void sub_100022B5C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "set_sourceApplicationBundleIdentifier:", v4);

}

void sub_100022BA0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6;

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, "setValue:forHTTPHeaderField:", v6, a3);

}

uint64_t sub_100022BF0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100022C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D0868);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100022CB8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100022CC8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10002276C(*(_QWORD **)(v2 + 16), a1, a2);
}

void sub_100022CE4(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

void destroy for AMSApiRequest(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));

}

_QWORD *initializeWithCopy for AMSApiRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = (void *)a2[3];
  a1[2] = v4;
  a1[3] = v5;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  v6 = v5;
  return a1;
}

_QWORD *assignWithCopy for AMSApiRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (void *)a1[3];
  v9 = (void *)a2[3];
  a1[3] = v9;
  v10 = v9;

  return a1;
}

__n128 initializeWithTake for AMSApiRequest(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for AMSApiRequest(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for AMSApiRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AMSApiRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AMSApiRequest()
{
  return &type metadata for AMSApiRequest;
}

void sub_100022EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100022570(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_100022EDC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100009658(v1, 1, v0);
}

uint64_t sub_100022EEC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

id sub_100022F00()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 3096));
}

uint64_t destroy for SubscriptionOperationFactory(_QWORD *a1)
{
  sub_100007618(a1);
  swift_release(a1[5]);
  swift_release(a1[6]);
  sub_100007618(a1 + 7);
  sub_100007618(a1 + 12);
  sub_100007618(a1 + 17);
  return swift_release(a1[22]);
}

uint64_t initializeWithCopy for SubscriptionOperationFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain(v5);
  swift_retain(v6);
  v9(a1 + 56, a2 + 56, v8);
  v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 96, a2 + 96);
  v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 136, a2 + 136);
  v12 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v12;
  swift_retain(v12);
  return a1;
}

_QWORD *assignWithCopy for SubscriptionOperationFactory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100009F58(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[6];
  v7 = a1[6];
  a1[6] = v6;
  swift_retain(v6);
  swift_release(v7);
  sub_100009F58(a1 + 7, a2 + 7);
  sub_100009F58(a1 + 12, a2 + 12);
  sub_100009F58(a1 + 17, a2 + 17);
  v8 = a2[22];
  v9 = a1[22];
  a1[22] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

void *initializeWithTake for SubscriptionOperationFactory(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB8uLL);
}

uint64_t assignWithTake for SubscriptionOperationFactory(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  sub_100007618((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v7);
  sub_100007618((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  sub_100007618((_QWORD *)(a1 + 96));
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  sub_100007618((_QWORD *)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v9 = *(_QWORD *)(a2 + 176);
  v10 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v9;
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionOperationFactory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 184))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionOperationFactory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionOperationFactory()
{
  return &type metadata for SubscriptionOperationFactory;
}

void sub_100023248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t a24,uint64_t a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97[2];
  __int128 v98[2];
  __int128 v99[3];

  sub_10000A758();
  v90 = v31;
  v93 = v32;
  v84 = v33;
  v95 = v34;
  v36 = v35;
  v38 = v37;
  v80 = v37;
  v85 = v39;
  v94 = v40;
  v83 = v41;
  v92 = a23;
  v88 = a26;
  v91 = a21;
  v87 = a22;
  v89 = a24;
  v86 = a25;
  v81 = a29;
  v82 = a28;
  v42 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_100024034();
  v44 = sub_10000738C(&qword_1000D0888);
  __chkstk_darwin(v44);
  v46 = (char *)&v75 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v46;
  sub_10000AE14(v29, (uint64_t)v99);
  v47 = *(_QWORD *)(v29 + 48);
  v78 = *(_QWORD *)(v29 + 40);
  v77 = v47;
  sub_10000AE14(v29 + 96, (uint64_t)v98);
  sub_10000AE14(v29 + 136, (uint64_t)v97);
  sub_1000236F8(a27, (uint64_t)v46);
  v48 = sub_10000738C(&qword_1000CFE30);
  v49 = sub_10000A748(v48, 64);
  *(_OWORD *)(v49 + 16) = xmmword_1000A06C0;
  *(_QWORD *)(v49 + 32) = v38;
  *(_QWORD *)(v49 + 40) = v36;
  sub_100024060();
  sub_100024058();
  v50 = v36;
  v51 = swift_bridgeObjectRetain(v36);
  v52 = UUID.init()(v51);
  v53 = UUID.uuidString.getter(v52);
  v55 = v54;
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v30, v42);
  *(_QWORD *)(v49 + 48) = v53;
  *(_QWORD *)(v49 + 56) = v55;
  v96 = v49;
  v56 = sub_10000738C(&qword_1000D0440);
  v57 = sub_100023740();
  v76 = BidirectionalCollection<>.joined(separator:)(46, 0xE100000000000000, v56, v57);
  v59 = v58;
  swift_bridgeObjectRelease(v49);
  v60 = v81;
  v61 = v82;
  if (v81)
    v62 = v82;
  else
    v62 = 0x6C7070612E6D6F63;
  if (v81)
    v63 = v81;
  else
    v63 = 0xEC00000076742E65;
  v64 = type metadata accessor for SubscriptionRegisterOperation(0);
  v65 = v83;
  v83[3] = v64;
  v65[4] = &off_1000C4D40;
  v83 = sub_100023784(v65);
  v66 = v84;
  swift_bridgeObjectRetain(v84);
  v67 = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRetain_n(v60, 2);
  swift_bridgeObjectRetain(v50);
  v68 = v86;
  swift_bridgeObjectRetain(v86);
  v69 = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRetain(v90);
  *(_QWORD *)&v74 = v70;
  *((_QWORD *)&v74 + 1) = v91;
  *(_QWORD *)&v73 = v66;
  *((_QWORD *)&v73 + 1) = v93;
  *(_QWORD *)&v72 = v60;
  *((_QWORD *)&v72 + 1) = v95;
  *(_QWORD *)&v71 = v50;
  *((_QWORD *)&v71 + 1) = v61;
  sub_100031DB4(v99, v78, v77, v98, v97, v94, v67, v80, (uint64_t)v83, v71, v72, v73, v74, v69, v92, v89, v68, v88, (uint64_t)v79,
    v76,
    v59,
    v62,
    v63);
  sub_10000A668();
}

uint64_t sub_1000235C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v16[2];
  __int128 v17[2];
  __int128 v18[2];

  v6 = v5;
  sub_10000AE14(v6, (uint64_t)v18);
  v12 = *(_QWORD *)(v6 + 40);
  sub_10000AE14(v6 + 96, (uint64_t)v17);
  sub_10000AE14(v6 + 136, (uint64_t)v16);
  a5[3] = (uint64_t)&type metadata for SubscriptionUnregisterOperation;
  a5[4] = (uint64_t)&off_1000C4A90;
  v13 = sub_10000A748((uint64_t)&unk_1000C4270, 192);
  v14 = (_QWORD *)(v13 + 16);
  *a5 = v13;
  swift_retain(v12);
  swift_bridgeObjectRetain(a2);
  sub_100018E34();
  return sub_10002CB34(v18, v12, v17, v16, a1, a2, a3, a4, v14);
}

uint64_t sub_1000236A4()
{
  _QWORD *v0;

  sub_100007618(v0 + 2);
  swift_release(v0[7]);
  sub_100007618(v0 + 8);
  sub_100007618(v0 + 13);
  swift_bridgeObjectRelease(v0[19]);
  swift_bridgeObjectRelease(v0[21]);
  swift_release(v0[23]);
  return swift_deallocObject(v0, 192, 7);
}

uint64_t sub_1000236F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D0888);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100023740()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D0448;
  if (!qword_1000D0448)
  {
    v1 = sub_100007648(&qword_1000D0440);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000D0448);
  }
  return result;
}

_QWORD *sub_100023784(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

void sub_1000237C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t refreshed;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;

  sub_10000A758();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v17 = v8;
  v10 = v9;
  refreshed = type metadata accessor for SportsManager.RefreshOptions(0);
  v12 = *(_QWORD *)(refreshed - 8);
  __chkstk_darwin(refreshed);
  sub_100024034();
  v13 = *(_QWORD *)(v0 + 40);
  v14 = *(_QWORD *)(v0 + 48);
  sub_10002404C();
  swift_retain(v13);
  sub_100024060();
  sub_100018E34();
  v15 = sub_100023898(v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v1, v3, refreshed);
  v10[3] = type metadata accessor for SubscriptionRefreshOperation(0);
  v10[4] = &off_1000C9A10;
  v16 = sub_100023784(v10);
  sub_10009923C(v13, v14, &v18, v17, v7, v15 & 1, v1, (uint64_t)v16);
  sub_10000A668();
}

uint64_t sub_100023898(char a1)
{
  uint64_t v1;
  unint64_t v3;
  char v4;
  _QWORD v6[22];

  sub_100023E30(v1, (uint64_t)v6);
  if ((a1 & 1) != 0)
  {
    if ((sub_100063B00() & 1) != 0)
    {
      v4 = 1;
      v3 = 0xE400000000000000;
    }
    else
    {
      v3 = 0xE300000000000000;
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)(7827308, 0xE300000000000000, 1751607656, 0xE400000000000000, 0);
    }
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = 1;
  }
  sub_100023FB4(v6);
  return v4 & 1;
}

void sub_100023928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  sub_10000A758();
  v2 = v1;
  v21 = v3;
  v22 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v0 + 40);
  sub_10002404C();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v8, v13);
  sub_100024058();
  swift_bridgeObjectRetain(v10);
  v18 = sub_100023898(v6);
  v12[3] = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
  v12[4] = &off_1000C5658;
  v19 = sub_100023784(v12);
  sub_100018E34();
  sub_10004ED48(v17, &v23, v21, v10, (uint64_t)v16, v18 & 1, v22, v2, v19);
  sub_10000A668();
}

void sub_100023A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,__int128 a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48[2];
  uint64_t v49[15];
  _BYTE __src[192];

  sub_10000A758();
  v24 = v23;
  v26 = v25;
  v46 = v27;
  v47 = v28;
  v30 = v29;
  v32 = v31;
  v44 = v33;
  v45 = v34;
  v36 = v35 & 1;
  sub_100023E30(v22, (uint64_t)__src);
  sub_100023BDC(v49);
  if (qword_1000CFA58 != -1)
    swift_once(&qword_1000CFA58, sub_100024D38);
  v37 = qword_1000DDA30;
  v49[8] = type metadata accessor for BagProvider();
  v49[9] = (uint64_t)&off_1000C42F8;
  v49[5] = v37;
  v38 = type metadata accessor for AccountManager();
  v39 = sub_10000A748(v38, 16);
  v49[13] = v38;
  v49[14] = (uint64_t)&off_1000C3F58;
  v49[10] = v39;
  v40 = *(_QWORD *)(v22 + 40);
  sub_10000AE14(v22 + 56, (uint64_t)v48);
  if (v36)
  {
    LOBYTE(v42) = 0;
    v41 = 0xE400000000000000;
  }
  else
  {
    v41 = 0xE300000000000000;
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(7827308, 0xE300000000000000, 1751607656, 0xE400000000000000, 0) ^ 1;
  }
  swift_retain(v37);
  sub_100024060();
  swift_bridgeObjectRelease(v41);
  sub_100023E64(v30);
  sub_100023F28(v46, v47, v26, v24);
  swift_bridgeObjectRetain(*((_QWORD *)&a22 + 1));
  swift_bridgeObjectRetain(v32);
  *(_QWORD *)&v43 = 0xD000000000000011;
  *((_QWORD *)&v43 + 1) = 0x80000001000A5730;
  sub_100080F7C(__src, v49, v40, v48, v42 & 1, (uint64_t)v30, v46, v47, v45, v26, v24, a21 & 1, v43, a22, v44, v32, v36);
  sub_10000A668();
}

uint64_t sub_100023BDC@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];

  v2 = sub_100043DEC();
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "defaultSessionConfiguration");
  v6 = objc_msgSend(objc_allocWithZone((Class)AMSURLSession), "initWithConfiguration:", v5);

  if (qword_1000CFB10 != -1)
    swift_once(&qword_1000CFB10, sub_1000947D0);
  v7 = qword_1000DDB78;
  v11[3] = type metadata accessor for SportsPerformanceMeasurement(0);
  v11[4] = &off_1000C98C8;
  v11[0] = v7;
  a1[3] = (uint64_t)&type metadata for ApiAgent;
  a1[4] = (uint64_t)&off_1000C5168;
  v8 = sub_10000A748((uint64_t)&unk_1000C4298, 112);
  v9 = (_QWORD *)(v8 + 16);
  *a1 = v8;
  swift_retain(v7);
  sub_1000219E0(v6, (uint64_t)v11, 0, v2, v4, v9);
  swift_bridgeObjectRelease(v4);

  return sub_100007618(v11);
}

uint64_t sub_100023D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14[2];
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  _UNKNOWN **v18;

  v7 = *(_QWORD *)(v3 + 40);
  v8 = qword_1000CFA98;
  swift_retain(a2);
  sub_100024058();
  if (v8 != -1)
    swift_once(&qword_1000CFA98, sub_1000479AC);
  v9 = qword_1000DDA78;
  v17 = &off_1000C51A8;
  v18 = &off_1000C5198;
  v16 = type metadata accessor for LiveActivityManager();
  *(_QWORD *)&v15 = v9;
  v10 = *(_QWORD *)(v3 + 48);
  sub_10000AE14(v3 + 96, (uint64_t)v14);
  a3[3] = (uint64_t)&type metadata for SubscriptionRefreshStaleActivitiesOperation;
  a3[4] = (uint64_t)&off_1000C8A40;
  v11 = sub_10000A748((uint64_t)&unk_1000C42C0, 160);
  v12 = v11 + 16;
  *a3 = v11;
  swift_retain(v9);
  swift_retain(v10);
  return sub_10007E29C(a1, a2, v7, &v15, v10, v14, v12, 300.0);
}

uint64_t sub_100023E30(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubscriptionOperationFactory(a2, a1);
  return a2;
}

uint64_t *sub_100023E64(uint64_t *a1)
{
  sub_100023EB4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return a1;
}

uint64_t sub_100023EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a4 != 1)
  {
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    return swift_bridgeObjectRetain(a11);
  }
  return result;
}

void sub_100023F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a2);
    sub_100023F64(a3, a4);
  }
}

uint64_t sub_100023F64(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_100023F78()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  sub_100007618((_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 112, 7);
}

_QWORD *sub_100023FB4(_QWORD *a1)
{
  destroy for SubscriptionOperationFactory(a1);
  return a1;
}

uint64_t sub_100023FE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100007618((_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 88));
  sub_100007618((_QWORD *)(v0 + 96));

  swift_release(*(_QWORD *)(v0 + 152));
  return swift_deallocObject(v0, 160, 7);
}

uint64_t sub_10002404C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10000AE14(v0 + 96, v1 - 120);
}

uint64_t sub_100024058()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100024060()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100024068()
{
  uint64_t result;
  uint64_t v1;

  result = sub_100024088();
  static Secrets.tempoAPIKey = result;
  qword_1000DD9C0 = v1;
  return result;
}

uint64_t sub_100024088()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v0 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = static Array._allocateBufferUninitialized(minimumCapacity:)(64, &type metadata for UInt8);
  *(_QWORD *)(v3 + 16) = 64;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  v15 = v3;
  sub_1000244B8(0xD000000000000016, 0x80000001000A68E0, 0xD000000000000016, 0x80000001000A68E0, (uint64_t)&v15);
  v4 = v15;
  sub_100024590((uint64_t)&off_1000C27F0, v15);
  v6 = v5;
  v7 = swift_bridgeObjectRelease(v4);
  v15 = v6;
  static String.Encoding.utf8.getter(v7);
  v8 = sub_10000738C(&qword_1000D0890);
  v9 = sub_1000248D8();
  v10 = String.init<A>(bytes:encoding:)(&v15, v2, v8, v9);
  v12 = v11;
  result = swift_bridgeObjectRelease(v6);
  if (v12)
    return v10;
  __break(1u);
  return result;
}

void static Secrets.read(key:salt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = swift_bridgeObjectRetain(a3);
  v4 = sub_100024974(v3, (uint64_t)&type metadata for UInt8);
  v5 = sub_10002491C(v4);
  sub_100024938(v5);
  v6 = sub_1000185B4();
  sub_100024964(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  sub_1000185B4();
  sub_100024954();
}

uint64_t *Secrets.tempoAPIKey.unsafeMutableAddressor()
{
  if (qword_1000CFA28 != -1)
    swift_once(&qword_1000CFA28, sub_100024068);
  return &static Secrets.tempoAPIKey;
}

uint64_t static Secrets.tempoAPIKey.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  if (qword_1000CFA28 != -1)
    swift_once(&qword_1000CFA28, sub_100024068);
  sub_100024980((uint64_t)&static Secrets.tempoAPIKey, (uint64_t)v2, 0);
  v0 = static Secrets.tempoAPIKey;
  swift_bridgeObjectRetain(qword_1000DD9C0);
  return v0;
}

uint64_t static Secrets.tempoAPIKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  if (qword_1000CFA28 != -1)
    swift_once(&qword_1000CFA28, sub_100024068);
  sub_100024980((uint64_t)&static Secrets.tempoAPIKey, (uint64_t)v6, 1);
  v4 = qword_1000DD9C0;
  static Secrets.tempoAPIKey = a1;
  qword_1000DD9C0 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*static Secrets.tempoAPIKey.modify(uint64_t a1))(_QWORD)
{
  if (qword_1000CFA28 != -1)
    swift_once(&qword_1000CFA28, sub_100024068);
  sub_100024980((uint64_t)&static Secrets.tempoAPIKey, a1, 33);
  return j__swift_endAccess;
}

unsigned __int8 *sub_1000243A4@<X0>(const void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unsigned __int8 **a5@<X8>)
{
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  unsigned __int8 *result;

  if ((a3 & 0x1000000000000000) != 0)
  {
    v8 = String.UTF8View._foreignCount()();
    if ((v8 & 0x8000000000000000) != 0)
    {
      v9 = "Negative value is not representable";
      v10 = 35;
      goto LABEL_6;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
LABEL_7:
      v8 = HIBYTE(a3) & 0xF;
      goto LABEL_8;
    }
    v8 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (HIDWORD(v8))
  {
    v9 = "Not enough bits to represent the passed value";
    v10 = 45;
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v10, 2, "Swift/Integers.swift", 20);
    __break(1u);
    goto LABEL_7;
  }
LABEL_8:
  sub_1000246B8(0);
  result = CC_SHA512(a1, v8, (unsigned __int8 *)(*(_QWORD *)a4 + 32));
  *a5 = result;
  return result;
}

unsigned __int8 *sub_1000244B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD v11[2];
  unsigned __int8 *v12;

  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(a4);
    return 0;
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v11[0] = a1;
      v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v9 = v11;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      v9 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v9 = (_QWORD *)_StringObject.sharedUTF8.getter(a1, a2);
    }
    sub_1000243A4(v9, a3, a4, a5, &v12);
    if (v5)
    {
      return (unsigned __int8 *)swift_bridgeObjectRelease(a4);
    }
    else
    {
      swift_bridgeObjectRelease(a4);
      return v12;
    }
  }
}

void sub_100024590(uint64_t a1, uint64_t a2)
{
  size_t v2;
  uint64_t v5;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v5 = static Array._allocateBufferUninitialized(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for UInt8);
    *(_QWORD *)(v5 + 16) = v2;
    bzero((void *)(v5 + 32), v2);
    if (v2 > *(_QWORD *)(a2 + 16))
    {
      __break(1u);
    }
    else
    {
      for (i = 0; i != v2; ++i)
        *(_BYTE *)(v5 + i + 32) = *(_BYTE *)(a2 + 32 + i) ^ *(_BYTE *)(a1 + 32 + i);
    }
  }
}

void static Secrets.generate(key:salt:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRetain(a2);
  v7 = sub_100024718(a1, a2);
  swift_bridgeObjectRelease(a2);
  v8 = swift_bridgeObjectRetain(a4);
  v9 = sub_100024974(v8, (uint64_t)&type metadata for UInt8);
  v10 = sub_10002491C(v9);
  sub_100024938(v10);
  v11 = sub_1000185B4();
  sub_100024964(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  swift_release(v7);
  sub_1000185B4();
  sub_100024954();
}

void sub_1000246B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    sub_10001353C();
    v3 = v4;
  }
  *v1 = v3;
}

_QWORD *sub_100024718(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_100024874(v4, 0);
  if (v4 < 0)
  {
    sub_1000184DC();
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    sub_1000184DC();
    v9 = "Insufficient space allocated to copy string contents";
    v10 = "Swift/StringUTF8View.swift";
    v11 = 52;
    v12 = 26;
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  sub_1000184DC();
  v9 = "invalid Collection: less than 'count' elements in collection";
  v10 = "Swift/ContiguousArrayBuffer.swift";
  v11 = 60;
  v12 = 33;
LABEL_15:
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v11, 2, v10, v12);
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Secrets()
{
  return &type metadata for Secrets;
}

_QWORD *sub_100024874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10000738C(&qword_1000D0430);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

unint64_t sub_1000248D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D0898;
  if (!qword_1000D0898)
  {
    v1 = sub_100007648(&qword_1000D0890);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000D0898);
  }
  return result;
}

uint64_t sub_10002491C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  return swift_bridgeObjectRetain(v1);
}

unsigned __int8 *sub_100024938(uint64_t a1, ...)
{
  unint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return sub_1000244B8(v2, v1, v2, v1, (uint64_t)va);
}

void sub_100024964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sub_100024590(v10, a10);
}

uint64_t sub_100024974(uint64_t a1, uint64_t a2)
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)(64, a2);
}

uint64_t sub_100024980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

uint64_t sub_100024988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v0 = type metadata accessor for CharacterSet(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContainerConstants(0);
  static ContainerConstants.defaultSuiteName.getter();
  v4 = objc_allocWithZone((Class)NSUserDefaults);
  v5 = sub_100027C10();
  if (!v5)
    return 0;
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "stringForKey:", v7);

  if (!v8)
  {

    return 0;
  }
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v19 = v9;
  v20 = v11;
  static CharacterSet.whitespacesAndNewlines.getter(v12);
  v13 = sub_10000D2DC();
  v14 = StringProtocol.trimmingCharacters(in:)(v3, &type metadata for String, v13);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease(v20);

  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = v14 & 0xFFFFFFFFFFFFLL;
  if (!v17)
  {
    swift_bridgeObjectRelease(v16);
    return 0;
  }
  return v14;
}

uint64_t sub_100024B08()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  uint64_t result;

  type metadata accessor for ContainerConstants(0);
  static ContainerConstants.tempoUrlUserDefaultKey.getter();
  v1 = v0;
  v2 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v1);
  qword_1000DD9C8 = (uint64_t)v2;
  unk_1000DD9D0 = 0xD00000000000001FLL;
  qword_1000DD9D8 = 0x80000001000A6AB0;
  return result;
}

NSString sub_100024B6C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1000DD9E0 = (uint64_t)result;
  unk_1000DD9E8 = 0xD000000000000020;
  qword_1000DD9F0 = 0x80000001000A6A50;
  return result;
}

uint64_t sub_100024BB8()
{
  NSString v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = String._bridgeToObjectiveC()();
  v1 = sub_10000738C(&qword_1000D09E8);
  v2 = swift_allocObject(v1, 96, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10009FDB0;
  *(_QWORD *)(v2 + 56) = &type metadata for String;
  *(_QWORD *)(v2 + 32) = 0x427363697274656DLL;
  *(_QWORD *)(v2 + 40) = 0xEB00000000657361;
  v3 = Dictionary.init(dictionaryLiteral:)(&off_1000C2700, &type metadata for String);
  *(_QWORD *)(v2 + 88) = sub_10000738C(&qword_1000D0490);
  *(_QWORD *)(v2 + 64) = v3;
  sub_100018468(0, &qword_1000D09D0, NSDictionary_ptr);
  result = NSDictionary.init(dictionaryLiteral:)(v2);
  qword_1000DD9F8 = (uint64_t)v0;
  qword_1000DDA00 = result;
  return result;
}

NSString sub_100024CAC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1000DDA08 = (uint64_t)result;
  unk_1000DDA10 = 0x53552D6E65;
  qword_1000DDA18 = 0xE500000000000000;
  return result;
}

NSString sub_100024CFC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1000DDA20 = (uint64_t)result;
  *(_QWORD *)algn_1000DDA28 = 5;
  return result;
}

uint64_t sub_100024D38()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for BagProvider();
  swift_allocObject(v0, 64, 7);
  result = sub_100024DF8();
  qword_1000DDA30 = result;
  return result;
}

id sub_100024D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v7;
  NSString v8;
  id v9;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = sub_100027C58();
  swift_bridgeObjectRelease(a4);
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "bagForProfile:profileVersion:", v7, v8);

  return v9;
}

uint64_t sub_100024DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = v0;
  v2 = sub_10000738C(&qword_1000D0968);
  v55 = *(_QWORD *)(v2 - 8);
  v56 = v2;
  __chkstk_darwin(v2);
  v54 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000738C(&qword_1000D0970);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100018468(0, (unint64_t *)&qword_1000D0978, AMSBag_ptr);
  v8 = sub_100024D70(0x647374726F7073, 0xE700000000000000, 49, 0xE100000000000000);
  *(_QWORD *)(v0 + 16) = v8;
  if (qword_1000CFA30 != -1)
  {
    swift_once(&qword_1000CFA30, sub_100024B08);
    v8 = *(id *)(v0 + 16);
  }
  v9 = (void *)qword_1000DD9C8;
  v10 = qword_1000DD9D0;
  v11 = qword_1000DD9D8;
  v12 = v8;
  v13 = sub_10002531C(v9, v10, v11, (uint64_t)v12);

  v57 = v13;
  v14 = sub_10000738C(&qword_1000CFDF0);
  v15 = type metadata accessor for URL(0);
  v52 = sub_10000D358(&qword_1000CFDF8, &qword_1000CFDF0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v53 = v14;
  v51 = v15;
  Publisher.map<A>(_:)(sub_10002576C, 0, v14, v15);
  swift_release(v13);
  v16 = sub_10000D358(&qword_1000D0980, &qword_1000D0970, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v17 = Publisher.eraseToAnyPublisher()(v4, v16);
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v7, v4);
  *(_QWORD *)(v1 + 24) = v17;
  if (qword_1000CFA38 != -1)
    swift_once(&qword_1000CFA38, sub_100024B6C);
  v19 = (void *)qword_1000DD9E0;
  v20 = qword_1000DD9E8;
  v21 = qword_1000DD9F0;
  v22 = *(id *)(v1 + 16);
  v23 = sub_10002531C(v19, v20, v21, (uint64_t)v22);

  v57 = v23;
  v24 = v52;
  v25 = v53;
  Publisher.map<A>(_:)(sub_10002578C, 0, v53, v51);
  swift_release(v23);
  v26 = Publisher.eraseToAnyPublisher()(v4, v16);
  v18(v7, v4);
  *(_QWORD *)(v1 + 32) = v26;
  if (qword_1000CFA40 != -1)
    swift_once(&qword_1000CFA40, sub_100024BB8);
  v27 = (void *)qword_1000DD9F8;
  v28 = (void *)qword_1000DDA00;
  v29 = *(id *)(v1 + 16);
  v30 = sub_100025908(v27, v28, v29);

  v57 = v30;
  v31 = sub_10000738C(&qword_1000D0988);
  sub_10000D358(&qword_1000D0990, &qword_1000D0988, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v32 = v54;
  Publisher.map<A>(_:)(sub_100025A98, 0, v31, &type metadata for String);
  swift_release(v30);
  v33 = sub_10000D358(&qword_1000D0998, &qword_1000D0968, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v34 = v56;
  v35 = Publisher.eraseToAnyPublisher()(v56, v33);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v34);
  *(_QWORD *)(v1 + 40) = v35;
  if (qword_1000CFA48 != -1)
    swift_once(&qword_1000CFA48, sub_100024CAC);
  v36 = (void *)qword_1000DDA08;
  v37 = unk_1000DDA10;
  v38 = qword_1000DDA18;
  v39 = *(id *)(v1 + 16);
  v40 = sub_10002531C(v36, v37, v38, (uint64_t)v39);

  v57 = v40;
  v41 = Publisher.eraseToAnyPublisher()(v25, v24);
  swift_release(v40);
  *(_QWORD *)(v1 + 48) = v41;
  if (qword_1000CFA50 != -1)
    swift_once(&qword_1000CFA50, sub_100024CFC);
  v42 = (void *)qword_1000DDA20;
  v43 = *(_QWORD *)algn_1000DDA28;
  v44 = *(id *)(v1 + 16);
  v45 = sub_100025E18(v42, v43, v44);

  v57 = v45;
  v46 = sub_10000738C(&qword_1000D09A0);
  v47 = sub_10000D358(&qword_1000D09A8, &qword_1000D09A0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v48 = Publisher.eraseToAnyPublisher()(v46, v47);
  swift_release(v45);
  *(_QWORD *)(v1 + 56) = v48;
  return v1;
}

uint64_t sub_10002531C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[2];

  v52 = a2;
  v53 = a4;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = ((uint64_t (*)(void))__chkstk_darwin)();
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - v10;
  v12 = sub_10000738C(&qword_1000D0520);
  v55 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v16 = v15;
  v54 = sub_100024988();
  v18 = v17;
  v19 = swift_bridgeObjectRelease(v16);
  if (v18)
  {
    v20 = a3;
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v21 = type metadata accessor for Logger(0);
    sub_1000096EC(v21, (uint64_t)qword_1000DDAB8);
    v22 = a1;
    swift_bridgeObjectRetain_n(a3, 2);
    swift_bridgeObjectRetain_n(v18, 2);
    v23 = v22;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(64, -1);
      v58[0] = v53;
      *(_DWORD *)v26 = 136315394;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v28 = v20;
      v30 = v29;
      sub_100014B44(v27, v29, v58);
      v57 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(v28, 2);

      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain(v18);
      v32 = v54;
      sub_100014B44(v54, v18, v58);
      v57 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "BagProvider: Successfully resolved preferred AMSBag(%s) value: %s", (uint8_t *)v26, 0x16u);
      v34 = v53;
      swift_arrayDestroy(v53, 2);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease_n(v20, 2);

      v32 = v54;
    }
    v58[0] = v32;
    v58[1] = v18;
    Just.init(_:)(v58);
    v49 = sub_10000D358(&qword_1000D0538, &qword_1000D0520, (uint64_t)&protocol conformance descriptor for Just<A>);
    v50 = v56;
    v48 = Publisher.eraseToAnyPublisher()(v56, v49);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v50);
  }
  else
  {
    Date.init()(v19);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11, v6);
    v35 = *(unsigned __int8 *)(v7 + 80);
    v36 = (v35 + 48) & ~v35;
    v37 = (char *)swift_allocObject(&unk_1000C4478, v36 + v8, v35 | 7);
    v38 = v6;
    v39 = a3;
    v40 = v52;
    v41 = (void *)v53;
    *((_QWORD *)v37 + 2) = v53;
    *((_QWORD *)v37 + 3) = a1;
    *((_QWORD *)v37 + 4) = v40;
    *((_QWORD *)v37 + 5) = v39;
    v42 = v38;
    (*(void (**)(char *, char *))(v7 + 32))(&v37[v36], (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    v43 = sub_10000738C(&qword_1000D09F0);
    swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v44 = a1;
    v45 = v41;
    swift_bridgeObjectRetain(v39);
    v46 = Future.init(_:)(sub_1000279E8, v37);
    v58[0] = v46;
    v47 = sub_10000D358(&qword_1000D09F8, &qword_1000D09F0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v48 = Publisher.eraseToAnyPublisher()(v43, v47);
    swift_release(v46);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v42);
  }
  return v48;
}

uint64_t sub_10002576C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000257AC(a1, &qword_1000CFA30, &qword_1000DD9D0, &qword_1000DD9D8, (uint64_t)sub_100024B08, a2);
}

uint64_t sub_10002578C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000257AC(a1, &qword_1000CFA38, &qword_1000DD9E8, &qword_1000DD9F0, (uint64_t)sub_100024B6C, a2);
}

uint64_t sub_1000257AC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v12 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v20 - v16;
  URL.init(string:)(*a1, a1[1]);
  v18 = type metadata accessor for URL(0);
  if (sub_100009658((uint64_t)v17, 1, v18) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a6, v17, v18);
  if (*a2 != -1)
    swift_once(a2, a5);
  URL.init(string:)(*a3, *a4);
  result = sub_100009658((uint64_t)v15, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a6, v15, v18);
    return sub_100027964((uint64_t)v17, (uint64_t *)&unk_1000D16E0);
  }
  return result;
}

uint64_t sub_100025908(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v25 - v12;
  Date.init()(v11);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = (v14 + 40) & ~v14;
  v16 = (char *)swift_allocObject(&unk_1000C43D8, v15 + v8, v14 | 7);
  *((_QWORD *)v16 + 2) = a3;
  *((_QWORD *)v16 + 3) = a1;
  *((_QWORD *)v16 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v16[v15], v10, v6);
  v17 = sub_10000738C(&qword_1000D09D8);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = a3;
  v19 = a1;
  v20 = a2;
  v21 = Future.init(_:)(sub_100027830, v16);
  v25[1] = v21;
  v22 = sub_10000D358(&qword_1000D09E0, &qword_1000D09D8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  v23 = Publisher.eraseToAnyPublisher()(v17, v22);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  return v23;
}

void sub_100025A98(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  NSString v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  void *v15;
  NSString v16;
  id v17;
  unint64_t v18;
  void *v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v3 = *a1;
  if (qword_1000CFA40 != -1)
    swift_once(&qword_1000CFA40, sub_100024BB8);
  v4 = (void *)qword_1000DDA00;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "objectForKey:", v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  sub_10000AD8C((uint64_t)&v21, (uint64_t)&v23);
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_16;
  v7 = sub_100018468(0, &qword_1000D09D0, NSDictionary_ptr);
  if ((swift_dynamicCast(v20, &v23, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
  {
LABEL_17:
    v12 = 0;
    v11 = 0xE000000000000000;
    goto LABEL_18;
  }
  v8 = *(void **)&v20[0];
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "objectForKey:", v9);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)(v10);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  sub_10000AD8C((uint64_t)&v21, (uint64_t)&v23);
  if (!*((_QWORD *)&v24 + 1))
  {

LABEL_16:
    sub_100027964((uint64_t)&v23, (uint64_t *)&unk_1000CFF70);
    goto LABEL_17;
  }
  if ((swift_dynamicCast(v20, &v23, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {

    goto LABEL_17;
  }
  v11 = *((_QWORD *)&v20[0] + 1);
  v12 = *(_QWORD *)&v20[0];
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v3, "objectForKey:", v13);

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(v14);
    swift_unknownObjectRelease(v14);
  }
  else
  {
    memset(v20, 0, sizeof(v20));
  }
  sub_10000AD8C((uint64_t)v20, (uint64_t)&v21);
  if (!*((_QWORD *)&v22 + 1))
  {

    sub_100027964((uint64_t)&v21, (uint64_t *)&unk_1000CFF70);
LABEL_27:
    v23 = 0u;
    v24 = 0u;
LABEL_28:
    sub_100027964((uint64_t)&v23, (uint64_t *)&unk_1000CFF70);
    goto LABEL_18;
  }
  if ((swift_dynamicCast(&v19, &v21, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
  {

    goto LABEL_27;
  }
  v15 = v19;
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "objectForKey:", v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v17);
    swift_unknownObjectRelease(v17);

  }
  else
  {

    v21 = 0u;
    v22 = 0u;
  }
  sub_10000AD8C((uint64_t)&v21, (uint64_t)&v23);
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_28;
  if ((swift_dynamicCast(&v21, &v23, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v18 = *((_QWORD *)&v21 + 1);
    v12 = v21;
    swift_bridgeObjectRelease(v11);
    v11 = v18;
  }
LABEL_18:
  *a2 = v12;
  a2[1] = v11;
}

uint64_t sub_100025E18(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v43 = a2;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - v10;
  v12 = sub_10000738C(&qword_1000D09B0);
  v45 = *(_QWORD *)(v12 - 8);
  v46 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v16 = v15;
  v44 = sub_1000261E4();
  v18 = v17;
  v19 = swift_bridgeObjectRelease(v16);
  if ((v18 & 1) != 0)
  {
    Date.init()(v19);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    v31 = *(unsigned __int8 *)(v6 + 80);
    v32 = (v31 + 40) & ~v31;
    v33 = (char *)swift_allocObject(&unk_1000C4338, v32 + v7, v31 | 7);
    *((_QWORD *)v33 + 2) = a3;
    *((_QWORD *)v33 + 3) = a1;
    *((_QWORD *)v33 + 4) = v43;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v33[v32], v9, v5);
    v34 = sub_10000738C(&qword_1000D09B8);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v35 = a1;
    v36 = a3;
    v37 = Future.init(_:)(sub_100027780, v33);
    v48 = v37;
    v38 = sub_10000D358(&qword_1000D09C0, &qword_1000D09B8, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v39 = Publisher.eraseToAnyPublisher()(v34, v38);
    swift_release(v37);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v20 = type metadata accessor for Logger(0);
    sub_1000096EC(v20, (uint64_t)qword_1000DDAB8);
    v21 = a1;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(32, -1);
      v48 = v25;
      *(_DWORD *)v24 = 136315394;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v28 = v27;
      sub_100014B44(v26, v27, &v48);
      v47 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v24 + 4, v24 + 12);

      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v24 + 12) = 2048;
      v30 = v44;
      v47 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v24 + 14, v24 + 22);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "BagProvider: Successfully resolved preferred AMSBag(%s) value: %ld", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 1);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      v30 = v44;
    }
    v48 = v30;
    Just.init(_:)(&v48);
    v40 = sub_10000D358(&qword_1000D09C8, &qword_1000D09B0, (uint64_t)&protocol conformance descriptor for Just<A>);
    v41 = v46;
    v39 = Publisher.eraseToAnyPublisher()(v46, v40);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v41);
  }
  return v39;
}

uint64_t sub_1000261E4()
{
  id v0;
  id v1;
  void *v2;
  NSString v3;
  id v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  type metadata accessor for ContainerConstants(0);
  static ContainerConstants.defaultSuiteName.getter();
  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = sub_100027C10();
  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
LABEL_11:
    sub_100027964((uint64_t)&v7, (uint64_t *)&unk_1000CFF70);
    return 0;
  }
  v2 = v1;
  v3 = sub_100027C58();
  v4 = objc_msgSend(v2, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_10000AD8C((uint64_t)v6, (uint64_t)&v7);
  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_11;
  if (swift_dynamicCast(v6, &v7, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
    return *(_QWORD *)&v6[0];
  else
    return 0;
}

void sub_10002630C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)(uint64_t, uint64_t, char);
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v30 = a5;
  v31 = a6;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin();
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_1000C44A0, 32, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  swift_retain(a2);
  v17 = objc_msgSend(a3, "stringForKey:", a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a7, v12);
  v18 = *(unsigned __int8 *)(v13 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_1000C44C8, v21 + 16, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22 + v19, v15, v12);
  v23 = (_QWORD *)(v22 + v20);
  v24 = v30;
  v25 = v31;
  *v23 = a4;
  v23[1] = v24;
  v23[2] = v25;
  v26 = (uint64_t (**)(uint64_t, uint64_t, char))(v22 + v21);
  *v26 = sub_100027A38;
  v26[1] = (uint64_t (*)(uint64_t, uint64_t, char))v16;
  aBlock[4] = sub_100027AE4;
  v33 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100026984;
  aBlock[3] = &unk_1000C44E0;
  v27 = _Block_copy(aBlock);
  v28 = v33;
  v29 = a4;
  swift_bridgeObjectRetain(v25);
  swift_release(v28);
  objc_msgSend(v17, "valueWithCompletion:", v27);
  _Block_release(v27);

}

uint64_t sub_1000264DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD), uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  double v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD);
  uint64_t v57;
  _QWORD v58[3];
  char v59[8];
  double v60;
  uint64_t v61;

  v57 = a9;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v20 = a1;
    Date.init()();
    v21 = Date.timeIntervalSince(_:)(a4);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v22 = type metadata accessor for Logger(0);
    sub_1000096EC(v22, (uint64_t)qword_1000DDAB8);
    v23 = v20;
    v24 = a5;
    swift_bridgeObjectRetain_n(a7, 2);
    v25 = v23;
    v26 = v24;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(32, -1);
      v55 = swift_slowAlloc(64, -1);
      v61 = v55;
      *(_DWORD *)v29 = 136315650;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v56 = a8;
      v32 = v31;
      sub_100014B44(v30, v31, &v61);
      v60 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease_n(a7, 2);

      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v29 + 12) = 2048;
      v60 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v29 + 14, v29 + 22);
      *(_WORD *)(v29 + 22) = 2080;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v36 = v35;
      sub_100014B44(v34, v35, &v61);
      v60 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v29 + 24, v29 + 32);

      v38 = v36;
      a8 = v56;
      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "BagProvider: Successfully resolved AMSBag(%s) value in %f seconds. Value: %s", (uint8_t *)v29, 0x20u);
      v39 = v55;
      swift_arrayDestroy(v55, 2);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a7, 2);
    }
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v51 = v50;
    a8(v49);

    return swift_bridgeObjectRelease(v51);
  }
  else
  {
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v40 = type metadata accessor for Logger(0);
    sub_1000096EC(v40, (uint64_t)qword_1000DDAB8);
    swift_errorRetain(a3);
    v41 = swift_errorRetain(a3);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v61 = v45;
      *(_DWORD *)v44 = 136315138;
      if (a3)
      {
        swift_getErrorValue(a3, v59, v58);
        v46 = Error.localizedDescription.getter(v58[1], v58[2]);
        v48 = v47;
      }
      else
      {
        v46 = 0;
        v48 = 0xE000000000000000;
      }
      sub_100014B44(v46, v48, &v61);
      v60 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v48);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "BagProvider: Unable to load bag. Using hardcoded default value. Error: %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))a8)(a6, a7, 0);
  }
}

void sub_100026988(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t (**v24)(uint64_t, char);
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v29 = a5;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_1000C4360, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_retain(a2);
  v16 = objc_msgSend(a3, "integerForKey:", a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a6, v11);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1000C4388, v20 + 16, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21 + v18, v14, v11);
  v22 = (_QWORD *)(v21 + v19);
  v23 = v29;
  *v22 = a4;
  v22[1] = v23;
  v24 = (uint64_t (**)(uint64_t, char))(v21 + v20);
  *v24 = sub_10002778C;
  v24[1] = (uint64_t (*)(uint64_t, char))v15;
  aBlock[4] = sub_1000277C4;
  v31 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100026984;
  aBlock[3] = &unk_1000C43A0;
  v25 = _Block_copy(aBlock);
  v26 = v31;
  v27 = a4;
  swift_release(v26);
  objc_msgSend(v16, "valueWithCompletion:", v25);
  _Block_release(v25);

}

void sub_100026B4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void (*a7)(_QWORD, _QWORD))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  double v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD);
  unint64_t v29;
  unint64_t v30;
  double v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  char v48[8];
  double v49;
  uint64_t v50;

  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v17 = a1;
    Date.init()(v17);
    v18 = Date.timeIntervalSince(_:)(a4);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v19 = type metadata accessor for Logger(0);
    sub_1000096EC(v19, (uint64_t)qword_1000DDAB8);
    v20 = v17;
    v21 = a5;
    v22 = v20;
    v23 = v21;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(32, -1);
      v46 = swift_slowAlloc(32, -1);
      v50 = v46;
      *(_DWORD *)v26 = 136315650;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v28 = a7;
      v30 = v29;
      sub_100014B44(v27, v29, &v50);
      v49 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 4, v26 + 12);

      v32 = v30;
      a7 = v28;
      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v26 + 12) = 2048;
      v49 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 14, v26 + 22);
      *(_WORD *)(v26 + 22) = 2048;
      v33 = COERCE_DOUBLE(objc_msgSend(v22, "integerValue"));

      v49 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 24, v26 + 32);

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "BagProvider: Successfully resolved AMSBag(%s) value in %f seconds. Value: %ld", (uint8_t *)v26, 0x20u);
      v34 = v46;
      swift_arrayDestroy(v46, 1);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    a7(objc_msgSend(v22, "integerValue"), 0);

  }
  else
  {
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v35 = type metadata accessor for Logger(0);
    sub_1000096EC(v35, (uint64_t)qword_1000DDAB8);
    swift_errorRetain(a3);
    v36 = swift_errorRetain(a3);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v50 = v40;
      *(_DWORD *)v39 = 136315138;
      if (a3)
      {
        swift_getErrorValue(a3, v48, v47);
        v41 = Error.localizedDescription.getter(v47[1], v47[2]);
        v43 = v42;
      }
      else
      {
        v41 = 0;
        v43 = 0xE000000000000000;
      }
      sub_100014B44(v41, v43, &v50);
      v49 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "BagProvider: Unable to load bag. Using hardcoded default value. Error: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    a7(a6, 0);
  }
}

void sub_100026FB8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t (**v24)(uint64_t, char);
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v30 = a5;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_1000C4400, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_retain(a2);
  v16 = objc_msgSend(a3, "dictionaryForKey:", a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a6, v11);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1000C4428, v20 + 16, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21 + v18, v14, v11);
  v22 = (_QWORD *)(v21 + v19);
  v23 = v30;
  *v22 = a4;
  v22[1] = v23;
  v24 = (uint64_t (**)(uint64_t, char))(v21 + v20);
  *v24 = sub_10002778C;
  v24[1] = (uint64_t (*)(uint64_t, char))v15;
  aBlock[4] = sub_1000278F8;
  v32 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100026984;
  aBlock[3] = &unk_1000C4440;
  v25 = _Block_copy(aBlock);
  v26 = v32;
  v27 = a4;
  v28 = v23;
  swift_release(v26);
  objc_msgSend(v16, "valueWithCompletion:", v25);
  _Block_release(v25);

}

void sub_100027180(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void (*a7)(void *, _QWORD), uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  double v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void *, _QWORD);
  _QWORD v56[3];
  char v57[8];
  double v58;
  uint64_t v59;

  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v54 = a8;
    v55 = a7;
    v19 = a1;
    Date.init()(v19);
    v20 = Date.timeIntervalSince(_:)(a4);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v21 = type metadata accessor for Logger(0);
    sub_1000096EC(v21, (uint64_t)qword_1000DDAB8);
    v22 = v19;
    v23 = a5;
    v24 = a6;
    v25 = v22;
    v26 = v23;
    v27 = v24;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(32, -1);
      v53 = swift_slowAlloc(64, -1);
      v59 = v53;
      *(_DWORD *)v30 = 136315650;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v33 = v32;
      sub_100014B44(v31, v32, &v59);
      v58 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v30 + 4, v30 + 12);

      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v30 + 12) = 2048;
      v58 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v30 + 14, v30 + 22);
      *(_WORD *)(v30 + 22) = 2080;
      v35 = objc_msgSend(v25, "description");
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

      sub_100014B44(v36, v38, &v59);
      v58 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v30 + 24, v30 + 32);

      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "BagProvider: Successfully resolved AMSBag(%s) value in %f seconds. Value: %s", (uint8_t *)v30, 0x20u);
      v40 = v53;
      swift_arrayDestroy(v53, 2);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

    }
    v50 = v25;
    v55(a1, 0);

  }
  else
  {
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v41 = type metadata accessor for Logger(0);
    sub_1000096EC(v41, (uint64_t)qword_1000DDAB8);
    swift_errorRetain(a3);
    v42 = swift_errorRetain(a3);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v59 = v46;
      *(_DWORD *)v45 = 136315138;
      if (a3)
      {
        swift_getErrorValue(a3, v57, v56);
        v47 = Error.localizedDescription.getter(v56[1], v56[2]);
        v49 = v48;
      }
      else
      {
        v47 = 0;
        v49 = 0xE000000000000000;
      }
      sub_100014B44(v47, v49, &v59);
      v58 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v49);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "BagProvider: Unable to load bag. Using hardcoded default value. Error: %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
    a7(a6, 0);
  }
}

void sub_100027640(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, uint64_t, void *);
  id v9;
  id v10;

  v8 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v10 = a2;
  v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

uint64_t sub_1000276BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return v0;
}

uint64_t sub_100027700()
{
  uint64_t v0;

  sub_1000276BC();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for BagProvider()
{
  return objc_opt_self(_TtC7sportsd11BagProvider);
}

uint64_t sub_100027740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100027BC8();
  sub_100027BB0();
  sub_100027C50();
  sub_100027BD0();
  v0 = sub_100027C34();
  return sub_100027B60(v0, v1, v2);
}

uint64_t sub_100027780(uint64_t a1, uint64_t a2)
{
  return sub_10002783C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_100026988);
}

uint64_t sub_100027790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_100027BC8();
  sub_100027B70(v2);

  sub_100027C04();
  v3 = sub_100027C24();
  return sub_100027B60(v3, v4, v5);
}

uint64_t sub_1000277C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027904(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100026B4C);
}

uint64_t sub_1000277D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000277E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000277E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100027BC8();
  sub_100027BB0();
  sub_100027C50();

  sub_100027BD0();
  v1 = sub_100027C34();
  return sub_100027B60(v1, v2, v3);
}

uint64_t sub_100027830(uint64_t a1, uint64_t a2)
{
  return sub_10002783C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_100026FB8);
}

uint64_t sub_10002783C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))
{
  char *v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_100027BC8() - 8) + 80);
  return a3(a1, a2, *((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3), *((_QWORD *)v3 + 4), &v3[(v6 + 40) & ~v6]);
}

uint64_t sub_10002789C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000278C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100027BC8();
  sub_100027B70(v1);
  sub_100027C44();

  sub_100027C04();
  v2 = sub_100027C24();
  return sub_100027B60(v2, v3, v4);
}

uint64_t sub_1000278F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027904(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100027180);
}

uint64_t sub_100027904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  sub_100027BC8();
  sub_100027BE0();
  sub_100027C64();
  return a4(a1, a2, a3);
}

uint64_t sub_100027964(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000738C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000279A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100027BC8();
  sub_100027BB0();
  sub_100027C50();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  sub_100027BD0();
  v1 = sub_100027C34();
  return sub_100027B60(v1, v2, v3);
}

void sub_1000279E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_100027BC8() - 8) + 80);
  sub_10002630C(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + ((v5 + 48) & ~v5));
}

uint64_t sub_100027A38(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];
  char v7;

  v4 = *(uint64_t (**)(_QWORD *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3 & 1;
  return v4(v6);
}

uint64_t sub_100027A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100027BC8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_100027C44();
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 16));
  sub_100027C04();
  v5 = sub_100027C24();
  return sub_100027B60(v5, v6, v7);
}

uint64_t sub_100027AE4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  sub_100027BC8();
  sub_100027BE0();
  sub_100027C64();
  return sub_1000264DC(a1, a2, a3, v9, v10, v11, *(_QWORD *)(v7 + 16), *(void (**)(_QWORD))(v3 + v8), *(_QWORD *)(v3 + v8 + 8));
}

uint64_t sub_100027B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_100027B70(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80)), a1);
}

void sub_100027BB0()
{
  uint64_t v0;

}

uint64_t sub_100027BC8()
{
  return type metadata accessor for Date(0);
}

uint64_t sub_100027BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_100027C04()
{
  uint64_t v0;
  uint64_t v1;

  return swift_release(*(_QWORD *)(v0 + v1 + 8));
}

id sub_100027C10()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10004D3C8(v0, v1);
}

uint64_t sub_100027C24()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100027C34()
{
  uint64_t v0;

  return v0;
}

void sub_100027C44()
{
  uint64_t v0;
  uint64_t v1;

}

void sub_100027C50()
{
  uint64_t v0;

}

NSString sub_100027C58()
{
  return String._bridgeToObjectiveC()();
}

id sub_100027C78(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;

  v5 = a1;
  v6 = sub_10000738C((uint64_t *)&unk_1000D0A00);
  inited = swift_initStackObject(v6, &v12);
  *(_OWORD *)(inited + 16) = xmmword_10009FDB0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = a2;
  *(_QWORD *)(inited + 56) = a3;
  swift_bridgeObjectRetain(a3);
  v9 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String);
  v10 = objc_allocWithZone((Class)NSError);
  return sub_100027D60(0xD000000000000017, 0x80000001000A6AD0, v5, v9);
}

id sub_100027D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  NSString v8;
  NSDictionary v9;
  id v10;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (a4)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v9.super.isa = 0;
  }
  v10 = objc_msgSend(v4, "initWithDomain:code:userInfo:", v8, a3, v9.super.isa);

  return v10;
}

void sub_100027E0C(_xpc_activity_s *a1, uint64_t a2, void (*a3)(uint64_t (*)(char a1), uint64_t))
{
  uint64_t v3;
  xpc_activity_state_t state;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  xpc_object_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  NSObject *loga;
  NSObject *log;
  NSObject *logb;
  uint64_t v55;
  uint64_t v56;

  state = xpc_activity_get_state(a1);
  if (state == 2)
  {
    v26 = xpc_activity_set_state(a1, 4);
    if (v26)
    {
      v27 = swift_allocObject(&unk_1000C4518, 64, 7);
      *(_QWORD *)(v27 + 16) = a1;
      v28 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v27 + 24) = *(_OWORD *)a2;
      *(_OWORD *)(v27 + 40) = v28;
      *(_QWORD *)(v27 + 56) = *(_QWORD *)(a2 + 32);
      sub_10002834C(a2);
      swift_unknownObjectRetain(a1);
      a3(sub_100028340, v27);
      swift_release(v27);
    }
    if (qword_1000CFAB0 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v29 = type metadata accessor for Logger(0);
    sub_1000096EC(v29, (uint64_t)qword_1000DDA88);
    v30 = sub_10002837C();
    logb = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.debug.getter();
    if (sub_1000283BC(v31, v32, v33, v34, v35, v36, v37, v38, v51, logb))
    {
      v39 = sub_100018554(22);
      v40 = sub_100018554(64);
      v56 = v40;
      *(_DWORD *)v39 = 136315394;
      v41 = swift_bridgeObjectRetain(v3);
      sub_1000283AC(v41, v42, v43);
      v55 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v39 + 4, v39 + 12);
      sub_100028374();
      sub_100028374();
      sub_100028374();
      *(_WORD *)(v39 + 12) = 2080;
      if (v26)
        v45 = 0x49554E49544E4F43;
      else
        v45 = 0xD000000000000012;
      if (v26)
        v46 = 0xEA0000000000474ELL;
      else
        v46 = 0x80000001000A6AF0;
      sub_100014B44(v45, v46, &v56);
      v55 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)a3, "Activity '%s' completed with state %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2);
      sub_10000A818(v40);
      sub_10000A818(v39);
      goto LABEL_21;
    }
  }
  else
  {
    if (state)
    {
LABEL_22:
      sub_100028390();
      return;
    }
    v8 = xpc_activity_copy_criteria(a1);
    v9 = v8;
    if (!v8 || !xpc_dictionary_get_BOOL(v8, XPC_ACTIVITY_REPEATING))
    {
      v48 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_BOOL(v48, XPC_ACTIVITY_REPEATING, *(_BYTE *)(a2 + 16));
      xpc_dictionary_set_int64(v48, XPC_ACTIVITY_DELAY, *(_QWORD *)(a2 + 24));
      xpc_dictionary_set_int64(v48, XPC_ACTIVITY_GRACE_PERIOD, *(_QWORD *)(a2 + 32));
      xpc_dictionary_set_string(v48, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v48, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(a1, v48);
      swift_unknownObjectRelease(v48);
      sub_100028390();
      swift_unknownObjectRelease(v49);
      return;
    }
    if (qword_1000CFAB0 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v10 = type metadata accessor for Logger(0);
    sub_1000096EC(v10, (uint64_t)qword_1000DDA88);
    v11 = sub_10002837C();
    loga = Logger.logObject.getter(v11);
    v12 = static os_log_type_t.debug.getter();
    if (sub_1000283BC(v12, v13, v14, v15, v16, v17, v18, v19, v51, loga))
    {
      v20 = (uint8_t *)sub_100018554(12);
      v21 = sub_100018554(32);
      v56 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = swift_bridgeObjectRetain(v3);
      sub_1000283AC(v22, v23, v24);
      v55 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v20 + 4, v20 + 12);
      sub_100028374();
      sub_100028374();
      sub_100028374();
      _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)XPC_ACTIVITY_REPEATING, "Activity '%s' has been registered, continuing.", v20, 0xCu);
      swift_arrayDestroy(v21, 1);
      sub_10000A818(v21);
      sub_10000A818((uint64_t)v20);
      swift_unknownObjectRelease(v9);
LABEL_21:

      goto LABEL_22;
    }
    swift_unknownObjectRelease(v9);
  }
  sub_100028374();
  sub_100028374();
  sub_100028390();

}

uint64_t sub_10002826C(char a1, xpc_activity_t activity, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if ((a1 & 1) != 0)
  {
    result = xpc_activity_set_state(activity, 5);
    if ((_DWORD)result)
    {
      result = (uint64_t)xpc_activity_copy_criteria(activity);
      if (result)
      {
        v5 = result;
        xpc_activity_set_criteria(activity, (xpc_object_t)result);
        return swift_unknownObjectRelease(v5);
      }
    }
  }
  else
  {
    v6 = String.utf8CString.getter(*a3, a3[1]);
    xpc_activity_unregister((const char *)(v6 + 32));
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1000282EC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100028314()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100028340(char a1)
{
  uint64_t v1;

  return sub_10002826C(a1, *(xpc_activity_t *)(v1 + 16), (_QWORD *)(v1 + 24));
}

uint64_t sub_10002834C(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100028374()
{
  uint64_t v0;

  return sub_1000282EC(v0);
}

uint64_t sub_10002837C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 8), 2);
}

void sub_1000283AC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unint64_t v4;
  va_list va;

  va_start(va, a3);
  sub_100014B44(v3, v4, (uint64_t *)va);
}

BOOL sub_1000283BC(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

uint64_t sub_1000283CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100028414(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  *(_QWORD *)(v1 + 200) = _swiftEmptyArrayStorage;
  sub_100023E30((uint64_t)a1, v1 + 16);
  v3 = sub_10000A748((uint64_t)&unk_1000C4540, 24);
  swift_weakInit(v3 + 16, v1);
  v4 = sub_10000A748((uint64_t)&unk_1000C4568, 72);
  *(_QWORD *)(v4 + 16) = 0xD000000000000026;
  *(_QWORD *)(v4 + 24) = 0x80000001000A6B60;
  *(_BYTE *)(v4 + 32) = 1;
  *(int64x2_t *)(v4 + 40) = vdupq_n_s64(0x12CuLL);
  *(_QWORD *)(v4 + 56) = sub_1000289A0;
  *(_QWORD *)(v4 + 64) = v3;
  v8[4] = sub_1000289D4;
  v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000283CC;
  v8[3] = &unk_1000C4580;
  v5 = _Block_copy(v8);
  v6 = v9;
  swift_retain_n(v3, 2);
  swift_release(v6);
  xpc_activity_register("com.apple.sportsd.liveactivity-refresh", XPC_ACTIVITY_CHECK_IN, v5);
  _Block_release(v5);
  swift_release(v3);
  sub_100023FB4(a1);
  swift_release(v3);
  return v1;
}

uint64_t sub_10002856C(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  _BYTE v9[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return a1();
  v7 = Strong;
  sub_1000285E4((uint64_t)a1, a2);
  return swift_release(v7);
}

uint64_t sub_1000285E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  sub_100023D14((uint64_t)j___s10Foundation4DateVACycfC, 0, v15);
  v6 = v16;
  v7 = v17;
  sub_1000073CC(v15, v16);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  v8 = sub_10000A748((uint64_t)&unk_1000C45B8, 32);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  swift_retain(a2);
  v9 = sub_10000738C(&qword_1000D0B18);
  sub_10000D358((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v10 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100028A1C, v8, nullsub_1, 0, v9);
  swift_release(v8);
  swift_release(v14);
  sub_100007618(v15);
  v3 += 200;
  swift_beginAccess(v3, v15, 33, 0);
  v11 = sub_10000738C(&qword_1000D0B28);
  v12 = sub_10000D358(&qword_1000D0B30, &qword_1000D0B28, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v3, v11, v12);
  swift_endAccess(v15);
  return swift_release(v10);
}

uint64_t sub_100028754(_QWORD *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  if (*a1)
  {
    swift_errorRetain(*a1);
    if (qword_1000CFAB0 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v4 = type metadata accessor for Logger(0);
    sub_1000096EC(v4, (uint64_t)qword_1000DDA88);
    swift_errorRetain(v3);
    v5 = swift_errorRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      swift_errorRetain(v3);
      v10 = _swift_stdlib_bridgeErrorToNSError(v3);
      v12 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 4, v8 + 12);
      *v9 = v10;
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "LiveActivityRefreshXPCServer: Error refreshing activities: %@", v8, 0xCu);
      sub_10000738C((uint64_t *)&unk_1000D16C0);
      swift_arrayDestroy(v9, 1);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
  }
  return a2(1);
}

uint64_t sub_100028930()
{
  uint64_t v0;

  sub_100023FB4((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  return swift_deallocClassInstance(v0, 208, 7);
}

uint64_t type metadata accessor for LiveActivityRefreshXPCServer()
{
  return objc_opt_self(_TtC7sportsd28LiveActivityRefreshXPCServer);
}

uint64_t sub_10002897C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000289A0(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v2;

  return sub_10002856C(a1, a2, v2);
}

uint64_t sub_1000289A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_1000289D4(_xpc_activity_s *a1)
{
  uint64_t v1;

  sub_100027E0C(a1, v1 + 16, *(void (**)(uint64_t (*)(char), uint64_t))(v1 + 56));
}

uint64_t sub_1000289E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000289F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000289F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100028A1C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100028754(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

_QWORD *sub_100028A24()
{
  uint64_t v0;
  _QWORD *result;

  v0 = type metadata accessor for ServicesRepository();
  sub_10000A748(v0, 296);
  result = sub_100028A58();
  qword_1000DDA38 = (uint64_t)result;
  return result;
}

_QWORD *sub_100028A58()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  ValueMetadata *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  ValueWitnessTable *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  objc_class *v42;
  id v43;
  ValueMetadata *v44;
  _QWORD *v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t refreshed;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  ValueMetadata *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78[12];
  __int128 v79;
  ValueMetadata *v80;
  _UNKNOWN **v81;
  _QWORD v82[13];

  v1 = v0;
  v2 = 0xED000064656C6261;
  v3 = type metadata accessor for URL(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[36] = &_swiftEmptySetSingleton;
  type metadata accessor for ApsMessageProcessor();
  v6 = sub_10009BEDC();
  v75 = (uint64_t *)swift_retain(v6);
  v7 = sub_100029CB4(v75);
  v8 = type metadata accessor for ApsListener();
  v1[26] = v7;
  v9 = (uint64_t)(v1 + 26);
  v1[29] = v8;
  v1[30] = &off_1000C3DD8;
  memset(v78, 0, 40);
  if ((sub_10002C764() & 1) != 0)
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(0x69446C616373656DLL, 0xEE0064656C626173, 0x6E456C616373656DLL, 0xED000064656C6261, 0);
    v2 = 0xEE0064656C626173;
  }
  swift_bridgeObjectRelease(v2);
  if (qword_1000CFA58 != -1)
    swift_once(&qword_1000CFA58, sub_100024D38);
  v10 = qword_1000DDA30;
  v80 = (ValueMetadata *)type metadata accessor for BagProvider();
  v81 = &off_1000C42F8;
  v74 = v80;
  *(_QWORD *)&v79 = v10;
  swift_retain(v10);
  sub_1000062DC();
  if (qword_1000CFB00 != -1)
    swift_once(&qword_1000CFB00, sub_1000737D8);
  v11 = qword_1000DDB58;
  v12 = qword_1000DDA30;
  v76 = qword_1000DDA30;
  sub_10000AE14((uint64_t)(v1 + 26), (uint64_t)&v79);
  v13 = sub_10000AE58((uint64_t)&v79, (uint64_t)v80);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  sub_1000075A4((uint64_t)v82, (uint64_t)v78);
  v17 = *v15;
  swift_retain(v12);
  v77 = v11;
  swift_retain(v11);
  v18 = sub_100029E20(0xD000000000000022, 0x80000001000A6CD0, v17, v12, v78, v11, (uint64_t (*)(_QWORD))type metadata accessor for SportsKitRequestXPCServer, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, id))sub_100029994);
  sub_100007618(&v79);
  v1[2] = v18;
  v72 = sub_100029D68();
  v19 = sub_1000292C0(0xD000000000000015, 0x80000001000A6D00);
  v1[35] = v19;
  objc_msgSend(v19, "setDelegate:", v18);
  objc_msgSend(v19, "resume");
  v20 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  NSFileManager.currentContainerURL.getter();

  v21 = type metadata accessor for PlaysStore(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = PlaysStore.init(storeUrl:)(v5);
  v73 = v1;
  v23 = (ValueMetadata *)v22;
  v24 = type metadata accessor for PersistentStore(0);
  v70 = PersistentStore.__allocating_init()();
  sub_10002957C(v78);
  v25 = sub_10000AE58((uint64_t)v78, *((uint64_t *)&v78[1] + 1));
  __chkstk_darwin(v25);
  v27 = (__int128 *)((char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(__int128 *))(v28 + 16))(v27);
  v80 = &type metadata for ImageDownloader;
  v81 = &off_1000C7420;
  v79 = *v27;
  v29 = type metadata accessor for LogoRepository();
  v30 = swift_allocObject(v29, 56, 7);
  v31 = sub_10000AE58((uint64_t)&v79, (uint64_t)&type metadata for ImageDownloader);
  v71 = v9;
  __chkstk_darwin(v31);
  v33 = (uint64_t *)((char *)&v70 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  ((void (*)(_QWORD *, uint64_t))v34->initializeWithCopy)(v33, v35);
  *(_QWORD *)(v30 + 40) = &type metadata for ImageDownloader;
  *(_QWORD *)(v30 + 48) = &off_1000C7420;
  *(_OWORD *)(v30 + 16) = *(_OWORD *)v33;
  sub_100007618(&v79);
  sub_100007618(v78);
  *((_QWORD *)&v78[1] + 1) = v24;
  *(_QWORD *)&v78[2] = &protocol witness table for PersistentStore;
  *(_QWORD *)&v78[0] = v70;
  v36 = type metadata accessor for DataRepository();
  v37 = swift_allocObject(v36, 64, 7);
  sub_100009DDC(v78, v37 + 16);
  *(_QWORD *)(v37 + 56) = v30;
  v38 = v9;
  v39 = v37;
  sub_10000AE14(v38, (uint64_t)v78);
  *(_QWORD *)&v78[5] = v74;
  v40 = v76;
  *((_QWORD *)&v78[3] + 1) = v76;
  *((_QWORD *)&v78[5] + 1) = &off_1000C42F8;
  *((_QWORD *)&v78[7] + 1) = &type metadata for TempoApiAgent;
  *(_QWORD *)&v78[8] = &off_1000C3590;
  *(_QWORD *)&v78[6] = swift_allocObject(&unk_1000C4608, 112, 7);
  sub_1000075A4((uint64_t)v82, *(_QWORD *)&v78[6] + 16);
  *(_QWORD *)&v78[10] = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  *((_QWORD *)&v78[10] + 1) = &off_1000C8258;
  v41 = v77;
  *((_QWORD *)&v78[8] + 1) = v77;
  *((_QWORD *)&v78[2] + 1) = v37;
  *(_QWORD *)&v78[3] = v23;
  v42 = (objc_class *)type metadata accessor for ActivityAuthorization(0);
  v43 = objc_allocWithZone(v42);
  swift_retain(v40);
  swift_retain(v41);
  swift_retain(v39);
  v74 = v23;
  v44 = v23;
  v45 = v73;
  swift_retain(v44);
  v46 = objc_msgSend(v43, "init");
  v47 = sub_100043DEC();
  v49 = v48;
  v80 = (ValueMetadata *)v42;
  v81 = &off_1000C5188;
  *(_QWORD *)&v79 = v46;
  v50 = type metadata accessor for ActivityCapUtility();
  v51 = (_QWORD *)swift_allocObject(v50, 72, 7);
  v52 = sub_10000AE58((uint64_t)&v79, (uint64_t)v42);
  __chkstk_darwin(v52);
  v54 = (uint64_t *)((char *)&v70 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v55 + 16))(v54);
  v56 = *v54;
  v51[5] = v42;
  v51[6] = &off_1000C5188;
  v51[2] = v56;
  v51[7] = v47;
  v51[8] = v49;
  sub_100007618(&v79);
  *(_QWORD *)&v78[11] = v51;
  memcpy(v45 + 3, v78, 0xB8uLL);
  sub_100023E30((uint64_t)(v45 + 3), (uint64_t)v78);
  v57 = v75;
  swift_beginAccess(v75 + 17, &v79, 33, 0);
  sub_100029DD8((uint64_t)v78, (uint64_t)(v57 + 17));
  swift_endAccess(&v79);
  sub_10000AE14(v71, (uint64_t)&v79);
  v58 = sub_10000AE58((uint64_t)&v79, (uint64_t)v80);
  __chkstk_darwin(v58);
  v60 = (uint64_t *)((char *)&v70 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v61 + 16))(v60);
  sub_1000075A4((uint64_t)v82, (uint64_t)v78);
  v62 = *v60;
  v63 = v76;
  swift_retain(v76);
  v64 = v77;
  swift_retain(v77);
  v65 = sub_100029E20(0xD00000000000002ALL, 0x80000001000A6D20, v62, v63, v78, v64, (uint64_t (*)(_QWORD))type metadata accessor for DirectActivityRequestXPCServer, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, id))sub_100029B24);
  sub_100007618(&v79);
  v45[32] = v65;
  v66 = sub_1000292C0(0xD00000000000001DLL, 0x80000001000A6D50);
  v45[33] = v66;
  objc_msgSend(v66, "setDelegate:", v65);
  objc_msgSend(v66, "resume");
  type metadata accessor for UnsubscribeRetryXPCServer();
  if (qword_1000CFA68 != -1)
    swift_once(&qword_1000CFA68, sub_10002A1D4);
  v45[31] = sub_10002AD20(qword_1000DDA40 + 16, (void *)v45[2], (uint64_t)(v45 + 3));
  sub_100023E30((uint64_t)(v45 + 3), (uint64_t)v78);
  refreshed = type metadata accessor for LiveActivityRefreshXPCServer();
  swift_allocObject(refreshed, 208, 7);
  v68 = sub_100028414(v78);
  swift_release(v57);
  swift_release(v39);
  swift_release(v74);
  sub_10002A040(v82);
  v45[34] = v68;
  return v45;
}

id sub_1000292C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithMachServiceName:", v5);

  return v6;
}

uint64_t sub_100029330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;

  v7 = v6;
  sub_1000235C4(a1, a2, a3, a4, v17);
  v10 = v18;
  v11 = v19;
  sub_1000073CC(v17, v18);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  v12 = sub_10000A748((uint64_t)&unk_1000C45E0, 32);
  *(_QWORD *)(v12 + 16) = a5;
  *(_QWORD *)(v12 + 24) = a6;
  swift_retain(a6);
  v13 = sub_10000738C(&qword_1000D0B18);
  sub_10002A0A0((unint64_t *)&qword_1000D0B20, &qword_1000D0B18);
  v14 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100029574, v12, nullsub_1, 0, v13);
  swift_release(v12);
  swift_release(v16);
  sub_100007618(v17);
  v7 += 288;
  swift_beginAccess(v7, v17, 33, 0);
  AnyCancellable.store(in:)(v7);
  swift_endAccess(v17);
  return swift_release(v14);
}

uint64_t sub_100029458(_QWORD *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = *a1;
  if (!*a1)
    return a2(0);
  swift_errorRetain(*a1);
  a2(v3);
  return swift_errorRelease(v3);
}

uint64_t sub_1000294B4()
{
  uint64_t v0;

  sub_100023FB4((_QWORD *)(v0 + 24));
  sub_100007618((_QWORD *)(v0 + 208));
  swift_release(*(_QWORD *)(v0 + 248));

  swift_release(*(_QWORD *)(v0 + 272));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 288));
  return v0;
}

uint64_t sub_100029510()
{
  uint64_t v0;

  sub_1000294B4();
  return swift_deallocClassInstance(v0, 296, 7);
}

uint64_t type metadata accessor for ServicesRepository()
{
  return objc_opt_self(_TtC7sportsd18ServicesRepository);
}

uint64_t sub_100029550()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100029574(_QWORD *a1)
{
  uint64_t v1;

  return sub_100029458(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

void sub_10002957C(_QWORD *a1@<X8>)
{
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;

  v2 = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v3 = sub_100043DEC();
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v7 = v2;
  v8 = objc_msgSend(v7, "configuration");
  sub_10002964C(v3, v5, v8);

  a1[3] = &type metadata for ImageDownloader;
  a1[4] = &off_1000C7420;
  *a1 = v7;
  a1[1] = v6;
}

void sub_10002964C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "set_sourceApplicationBundleIdentifier:", v5);

}

char *sub_10002969C(uint64_t a1, char *a2)
{
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[3];
  objc_super v32;
  _QWORD v33[5];

  ObjectType = (objc_class *)swift_getObjectType(a2);
  v5 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v5);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[3] = type metadata accessor for ApsMessageProcessor();
  v33[4] = &off_1000C9E78;
  v33[0] = a1;
  *(_QWORD *)&a2[OBJC_IVAR____TtC7sportsd11ApsListener_apsConnection] = 0;
  v8 = &a2[OBJC_IVAR____TtC7sportsd11ApsListener_currentAPSConnectionEnvironment];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0xE000000000000000;
  *(_QWORD *)&a2[OBJC_IVAR____TtC7sportsd11ApsListener_cancellables] = &_swiftEmptySetSingleton;
  v9 = OBJC_IVAR____TtC7sportsd11ApsListener_tokenPublisher;
  v10 = sub_10000738C(&qword_1000D0528);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = a2;
  *(_QWORD *)&a2[v9] = PassthroughSubject.init()();
  v12 = &v11[OBJC_IVAR____TtC7sportsd11ApsListener_pushToken];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC7sportsd11ApsListener_cloudChannelAuditDebouncer] = 0;
  v13 = OBJC_IVAR____TtC7sportsd11ApsListener_connection;
  v14 = sub_10000738C(&qword_1000D0C28);
  v15 = swift_allocObject(v14, 32, 7);
  *(_DWORD *)(v15 + 28) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_BYTE *)(v15 + 24) = 2;
  *(_QWORD *)&v11[v13] = v15;
  sub_10000AE14((uint64_t)v33, (uint64_t)&v11[OBJC_IVAR____TtC7sportsd11ApsListener_messageProcessing]);

  v32.receiver = v11;
  v32.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v32, "init");
  v17 = type metadata accessor for ScoreboardSubscriptionMessageProcessor();
  swift_allocObject(v17, 24, 7);
  v18 = (char *)v16;
  v19 = sub_10003A388();
  v20 = *(_QWORD *)&v18[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor];
  *(_QWORD *)&v18[OBJC_IVAR____TtC7sportsd11ApsListener_scoreboardProcessor] = v19;
  swift_release(v20);
  v21 = type metadata accessor for SportsEnvironmentPublisher();
  swift_initStaticObject(v21, &unk_1000CFB20);
  v31[0] = sub_10000CE4C();
  v22 = swift_allocObject(&unk_1000C4630, 24, 7);
  swift_unknownObjectWeakInit(v22 + 16, v18);
  v23 = sub_10000738C(&qword_1000D0210);
  v24 = sub_10002A0A0(&qword_1000D0218, &qword_1000D0210);
  v25 = Publisher<>.sink(receiveValue:)(sub_10002A098, v22, v23, v24);
  swift_release(v22);
  swift_release(v31[0]);
  v26 = &v18[OBJC_IVAR____TtC7sportsd11ApsListener_cancellables];
  swift_beginAccess(&v18[OBJC_IVAR____TtC7sportsd11ApsListener_cancellables], v31, 33, 0);
  AnyCancellable.store(in:)(v26);
  swift_endAccess(v31);
  swift_release(v25);
  v27 = type metadata accessor for TaskPriority(0);
  sub_10000964C((uint64_t)v7, 1, 1, v27);
  v28 = swift_allocObject(&unk_1000C4658, 32, 7);
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  v29 = sub_100030298((uint64_t)v7, (uint64_t)&unk_1000D0C30, v28);
  swift_release(v29);

  sub_100007618(v33);
  return v18;
}

id sub_100029994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, char *a7)
{
  objc_class *ObjectType;
  char *v15;
  id v16;
  objc_super v18;
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];

  ObjectType = (objc_class *)swift_getObjectType(a7);
  v22[3] = type metadata accessor for ApsListener();
  v22[4] = &off_1000C3DD8;
  v22[0] = a3;
  v21[3] = type metadata accessor for BagProvider();
  v21[4] = &off_1000C42F8;
  v21[0] = a4;
  v20[3] = &type metadata for TempoApiAgent;
  v20[4] = &off_1000C3590;
  v20[0] = swift_allocObject(&unk_1000C4608, 112, 7);
  memcpy((void *)(v20[0] + 16), a5, 0x60uLL);
  v19[3] = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  v19[4] = &off_1000C8258;
  v19[0] = a6;
  v15 = &a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_entitlement];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  sub_10000AE14((uint64_t)v22, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_apsListening]);
  sub_10000AE14((uint64_t)v21, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_metadataProvider]);
  sub_10000AE14((uint64_t)v20, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_tempoApiProvider]);
  sub_10000AE14((uint64_t)v19, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd25SportsKitRequestXPCServer_supressionManager]);
  v18.receiver = a7;
  v18.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v18, "init");
  sub_100007618(v19);
  sub_100007618(v20);
  sub_100007618(v21);
  sub_100007618(v22);
  return v16;
}

id sub_100029B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, char *a7)
{
  objc_class *ObjectType;
  char *v15;
  id v16;
  objc_super v18;
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];

  ObjectType = (objc_class *)swift_getObjectType(a7);
  v22[3] = type metadata accessor for ApsListener();
  v22[4] = &off_1000C3DD8;
  v22[0] = a3;
  v21[3] = type metadata accessor for BagProvider();
  v21[4] = &off_1000C42F8;
  v21[0] = a4;
  v20[3] = &type metadata for TempoApiAgent;
  v20[4] = &off_1000C3590;
  v20[0] = swift_allocObject(&unk_1000C4608, 112, 7);
  memcpy((void *)(v20[0] + 16), a5, 0x60uLL);
  v19[3] = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  v19[4] = &off_1000C8258;
  v19[0] = a6;
  v15 = &a7[OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_entitlement];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  sub_10000AE14((uint64_t)v22, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_apsListening]);
  sub_10000AE14((uint64_t)v21, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_metadataProvider]);
  sub_10000AE14((uint64_t)v20, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_tempoApiProvider]);
  sub_10000AE14((uint64_t)v19, (uint64_t)&a7[OBJC_IVAR____TtC7sportsd30DirectActivityRequestXPCServer_supressionManager]);
  v18.receiver = a7;
  v18.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v18, "init");
  sub_100007618(v19);
  sub_100007618(v20);
  sub_100007618(v21);
  sub_100007618(v22);
  return v16;
}

char *sub_100029CB4(uint64_t *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  _QWORD v9[3];
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = *a1;
  v11 = &off_1000C9E78;
  v9[0] = a1;
  v1 = (char *)objc_allocWithZone((Class)type metadata accessor for ApsListener());
  v2 = sub_10000AE58((uint64_t)v9, v10);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)&v9[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v5 + 16))(v4);
  v6 = sub_10002969C(*v4, v1);
  sub_100007618(v9);
  return v6;
}

unint64_t sub_100029D68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D0C18;
  if (!qword_1000D0C18)
  {
    v1 = objc_opt_self(NSXPCListener);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000D0C18);
  }
  return result;
}

uint64_t sub_100029DA4()
{
  _QWORD *v0;

  sub_100007618(v0 + 2);
  swift_release(v0[7]);
  sub_100007618(v0 + 9);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100029DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D0C20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100029E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t (*a8)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, id))
{
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[5];
  _QWORD v45[3];
  uint64_t v46;
  _UNKNOWN **v47;

  v46 = type metadata accessor for ApsListener();
  v47 = &off_1000C3DD8;
  v45[0] = a3;
  v44[3] = type metadata accessor for BagProvider();
  v44[4] = &off_1000C42F8;
  v44[0] = a4;
  v43[3] = &type metadata for TempoApiAgent;
  v43[4] = &off_1000C3590;
  v43[0] = sub_10000A748((uint64_t)&unk_1000C4608, 112);
  memcpy((void *)(v43[0] + 16), a5, 0x60uLL);
  v42[3] = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  v42[4] = &off_1000C8258;
  v42[0] = a6;
  v16 = objc_allocWithZone((Class)a7(0));
  v17 = sub_10000AE58((uint64_t)v45, v46);
  __chkstk_darwin(v17);
  sub_10000A7D4();
  v20 = (_QWORD *)(v19 - v18);
  (*(void (**)(uint64_t))(v21 + 16))(v19 - v18);
  sub_10002A1CC((uint64_t)v44);
  sub_10002A1B0();
  __chkstk_darwin(v22);
  sub_10000A7D4();
  v25 = (_QWORD *)(v24 - v23);
  sub_10002A1C4(v24 - v23, v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16));
  sub_10002A1CC((uint64_t)v43);
  sub_10002A1B0();
  __chkstk_darwin(v28);
  sub_10000A7D4();
  v31 = v30 - v29;
  sub_10002A1C4(v30 - v29, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16));
  sub_10002A1CC((uint64_t)v42);
  sub_10002A1B0();
  __chkstk_darwin(v34);
  sub_10000A7D4();
  v37 = (_QWORD *)(v36 - v35);
  sub_10002A1C4(v36 - v35, v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16));
  v40 = a8(a1, a2, *v20, *v25, v31, *v37, v16);
  sub_100007618(v42);
  sub_100007618(v43);
  sub_100007618(v44);
  sub_100007618(v45);
  return v40;
}

_QWORD *sub_10002A040(_QWORD *a1)
{
  destroy for TempoApiAgent(a1);
  return a1;
}

uint64_t sub_10002A074()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10002A098(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_10000D650(a1, v1);
}

uint64_t sub_10002A0A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007648(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002A0E0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002A104()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1000D05D4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10002A168;
  return sub_10000D9F0();
}

uint64_t sub_10002A168()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002A1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_10002A1CC(uint64_t a1)
{
  uint64_t v1;

  return sub_10000AE58(a1, v1);
}

uint64_t sub_10002A1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  ValueMetadata *v16;
  _UNKNOWN **v17;
  _QWORD v18[5];
  __int128 v19;
  uint64_t v20;
  void *v21;

  v20 = type metadata accessor for PersistentStore(0);
  v21 = &protocol witness table for PersistentStore;
  *(_QWORD *)&v19 = PersistentStore.__allocating_init()();
  sub_10002957C(v18);
  sub_10000AE58((uint64_t)v18, v18[3]);
  sub_10002ACB8();
  __chkstk_darwin(v0);
  sub_10000A7D4();
  v3 = (__int128 *)(v2 - v1);
  (*(void (**)(uint64_t))(v4 + 16))(v2 - v1);
  v16 = &type metadata for ImageDownloader;
  v17 = &off_1000C7420;
  v15 = *v3;
  v5 = type metadata accessor for LogoRepository();
  v6 = sub_10000A748(v5, 56);
  sub_10000AE58((uint64_t)&v15, (uint64_t)&type metadata for ImageDownloader);
  sub_10002ACB8();
  __chkstk_darwin(v7);
  sub_10000A7D4();
  v10 = (_OWORD *)(v9 - v8);
  (*(void (**)(uint64_t))(v11 + 16))(v9 - v8);
  *(_QWORD *)(v6 + 40) = &type metadata for ImageDownloader;
  *(_QWORD *)(v6 + 48) = &off_1000C7420;
  *(_OWORD *)(v6 + 16) = *v10;
  sub_100007618(&v15);
  sub_100007618(v18);
  v12 = type metadata accessor for DataRepository();
  v13 = sub_10000A748(v12, 64);
  result = sub_100009DDC(&v19, v13 + 16);
  *(_QWORD *)(v13 + 56) = v6;
  qword_1000DDA40 = v13;
  return result;
}

uint64_t sub_10002A30C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;

  v1 = v0[5];
  v2 = v0[6];
  sub_1000073CC(v0 + 2, v1);
  dispatch thunk of PersistentStorable.initializeStoreIfNeeded()(v1, v2);
  v3 = sub_10000A748((uint64_t)&unk_1000C4680, 24);
  swift_weakInit(v3 + 16, v0);
  v4 = sub_10000A748((uint64_t)&unk_1000C46A8, 72);
  *(_QWORD *)(v4 + 16) = 0xD00000000000001FLL;
  *(_QWORD *)(v4 + 24) = 0x80000001000A6DB0;
  *(_BYTE *)(v4 + 32) = 0;
  *(int64x2_t *)(v4 + 40) = vdupq_n_s64(0x12CuLL);
  *(_QWORD *)(v4 + 56) = sub_10002AB6C;
  *(_QWORD *)(v4 + 64) = v3;
  v8[4] = sub_1000289D4;
  v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000283CC;
  v8[3] = &unk_1000C46C0;
  v5 = _Block_copy(v8);
  v6 = v9;
  swift_retain_n(v3, 2);
  swift_release(v6);
  xpc_activity_register("com.apple.sportsd.event-cleanup", XPC_ACTIVITY_CHECK_IN, v5);
  _Block_release(v5);
  return swift_release_n(v3, 2);
}

uint64_t sub_10002A454(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *Strong;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v10, 0, 0);
  Strong = (_QWORD *)swift_weakLoadStrong(v4);
  if (!Strong)
    return a1();
  v6 = Strong;
  v7 = Strong[5];
  v8 = Strong[6];
  sub_1000073CC(Strong + 2, v7);
  dispatch thunk of PersistentStorable.cleanUpFileSystem(olderThan:)(v7, v8, 43200.0);
  ((void (*)(uint64_t))a1)(1);
  return swift_release(v6);
}

void sub_10002A6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;

  v9 = v4[5];
  v10 = v4[6];
  sub_1000073CC(v4 + 2, v9);
  dispatch thunk of PersistentStorable.writeAPSMessage(_:canonicalId:isConventionalOrUnified:)(a1, a2, a3, a4, v9, v10);
  sub_10002AC14();
}

void sub_10002A820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;

  v11 = v5[5];
  v12 = v5[6];
  sub_1000073CC(v5 + 2, v11);
  dispatch thunk of PersistentStorable.writeRegistrationResponse(_:canonicalId:isConventionalOrUnified:)(a1, a2, a3, a4, a5, v11, v12);
  sub_10002AC14();
}

uint64_t sub_10002A9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;

  v6 = type metadata accessor for SportsLogoSize(0);
  __chkstk_darwin(v6);
  sub_10000A7D4();
  v7 = sub_1000073CC((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
  sub_10002ACE4((uint64_t)v7, enum case for SportsLogoSize.default(_:));
  sub_10002AC90();
  v17 = dispatch thunk of PersistentStorable.pathForLogo(_:size:fileExtension:)();
  v9 = v8;
  sub_10002ACF0();
  v10 = sub_1000073CC((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
  sub_10002ACE4((uint64_t)v10, enum case for SportsLogoSize.small(_:));
  sub_10002AC90();
  v11 = dispatch thunk of PersistentStorable.pathForLogo(_:size:fileExtension:)();
  v13 = v12;
  sub_10002ACF0();
  v14 = sub_100090328(a1, a2, a3, a4, v17, v9, v11, v13);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14;
}

uint64_t sub_10002AAFC()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for DataRepository()
{
  return objc_opt_self(_TtC7sportsd14DataRepository);
}

uint64_t sub_10002AB48()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002AB6C(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v2;

  return sub_10002A454(a1, a2, v2);
}

uint64_t sub_10002AB74()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10002ABA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002ABB0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002ABB8()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

void sub_10002ABC0(id a1)
{

}

uint64_t sub_10002ABD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  va_arg(va1, _QWORD);
  v9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, v6, v7 + 12);
}

uint64_t sub_10002ABF8(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  *(_WORD *)(v2 + 12) = 2080;
  return swift_getErrorValue(v1, va1, (uint64_t *)va);
}

uint64_t sub_10002AC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  a14 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a14, v15, v14, v16 + 22);
}

void sub_10002AC44(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, os_log_t log)
{
  uint8_t *v9;
  os_log_type_t v10;

  _os_log_impl(a1, log, v10, a4, v9, 0x16u);
}

uint64_t sub_10002AC58()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_10002AC60()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

void sub_10002AC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  sub_100014B44(v7, v6, (uint64_t *)va);
}

uint64_t sub_10002AC80()
{
  return swift_slowAlloc(64, -1);
}

BOOL sub_10002ACA8(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

uint64_t sub_10002ACCC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10002ACD8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_10002ACE4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(v4, a2, v3);
}

uint64_t sub_10002ACF0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_10002ACFC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100014B44(a1, a2, (uint64_t *)va);
}

uint64_t sub_10002AD08()
{
  return swift_slowAlloc(22, -1);
}

uint64_t sub_10002AD14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Error.localizedDescription.getter(a11, a12);
}

uint64_t sub_10002AD20(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  id v7;
  _BYTE v9[184];
  __int128 v10[2];

  sub_10000AE14(a1, (uint64_t)v10);
  sub_100023E30(a3, (uint64_t)v9);
  v6 = sub_10000A748(v3, 256);
  sub_10002AD90(v10, (uint64_t)a2, v9);
  v7 = a2;
  sub_10002ADE4();
  return v6;
}

_QWORD *sub_10002AD90(__int128 *a1, uint64_t a2, const void *a3)
{
  _QWORD *v3;

  v3[31] = &_swiftEmptySetSingleton;
  sub_100009DDC(a1, (uint64_t)(v3 + 2));
  v3[7] = a2;
  memcpy(v3 + 8, a3, 0xB8uLL);
  return v3;
}

void sub_10002ADE4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_t *v21;
  uint64_t v22;
  os_log_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint8_t *v45;
  uint8_t *v46;
  _QWORD *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  os_log_t oslog;
  _QWORD *v54;
  uint64_t aBlock[5];
  uint64_t v56;

  v1 = (unint64_t)v0;
  if (qword_1000CFAD0 != -1)
    goto LABEL_37;
  while (1)
  {
    v2 = type metadata accessor for Logger(0);
    v3 = sub_1000096EC(v2, (uint64_t)qword_1000DDAE8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)sub_10002C724();
      *(_WORD *)v6 = 0;
      sub_10002C744((void *)&_mh_execute_header, v4, v5, "Checking to see if we need to retry unsubscribe for subscriptions...", v6);
      sub_10000A818((uint64_t)v6);
    }

    v7 = *(_QWORD *)(v1 + 40);
    v8 = *(_QWORD *)(v1 + 48);
    sub_1000073CC((_QWORD *)(v1 + 16), v7);
    v9 = dispatch thunk of PersistentStorable.allEventSubscriptionsToConsumers(isConventionalOrUnified:)(1, v7, v8);
    swift_bridgeObjectRetain_n(v9, 2);
    v10 = sub_10002C75C();
    v11 = static os_log_type_t.debug.getter(v10);
    if (!os_log_type_enabled(v10, v11))
    {

      swift_bridgeObjectRelease_n(v9, 2);
      goto LABEL_24;
    }
    v49 = v11;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    aBlock[0] = v48;
    *(_DWORD *)v12 = 136315138;
    v13 = *(_QWORD *)(v9 + 16);
    v14 = _swiftEmptyArrayStorage;
    if (!v13)
      break;
    v46 = v12;
    v47 = (_QWORD *)v1;
    v54 = _swiftEmptyArrayStorage;
    sub_100015654();
    v15 = _swiftEmptyArrayStorage;
    v16 = sub_100022BEC(v9);
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16;
      if (v16 < 1 << *(_BYTE *)(v9 + 32))
      {
        v19 = v9 + 64;
        v50 = v9 + 64;
        while ((*(_QWORD *)(v19 + 8 * (v18 >> 6)) & (1 << v18)) != 0)
        {
          if (v17 != *(_DWORD *)(v9 + 36))
            goto LABEL_32;
          v51 = v13;
          v52 = v17;
          v20 = *(_QWORD *)(v9 + 56);
          v21 = (os_log_t *)(*(_QWORD *)(v9 + 48) + 16 * v18);
          v22 = v9;
          v23 = v21[1];
          v24 = *(_QWORD *)(v20 + 8 * v18);
          oslog = *v21;
          v54 = v15;
          v1 = v15[2];
          v25 = v15[3];
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v24);
          if (v1 >= v25 >> 1)
          {
            sub_100015654();
            v15 = v54;
          }
          v15[2] = v1 + 1;
          v26 = &v15[3 * v1];
          v26[4] = oslog;
          v26[5] = v23;
          v26[6] = v24;
          v27 = -1 << *(_BYTE *)(v22 + 32);
          if ((uint64_t)v18 >= -v27)
            goto LABEL_33;
          v19 = v50;
          if ((*(_QWORD *)(v50 + 8 * (v18 >> 6)) & (1 << v18)) == 0)
            goto LABEL_34;
          v9 = v22;
          if (v52 != *(_DWORD *)(v22 + 36))
            goto LABEL_35;
          v28 = _HashTable.occupiedBucket(after:)(v18, v50, ~v27);
          v13 = v51 - 1;
          if (v51 == 1)
          {
            v14 = v15;
            v29 = v9;
            v1 = (unint64_t)v47;
            v12 = v46;
            goto LABEL_23;
          }
          v18 = v28;
          if ((v28 & 0x8000000000000000) == 0)
          {
            v17 = *(_DWORD *)(v22 + 36);
            if (v28 < 1 << *(_BYTE *)(v22 + 32))
              continue;
          }
          goto LABEL_36;
        }
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
      }
    }
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once(&qword_1000CFAD0, sub_10006CCC8);
  }
  v29 = v9;
LABEL_23:
  v30 = sub_10000738C(&qword_1000D05C8);
  v31 = Array.description.getter(v14, v30);
  v33 = v32;
  swift_bridgeObjectRelease(v14);
  sub_100014B44(v31, v33, aBlock);
  v54 = v34;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, aBlock, v12 + 4, v12 + 12);
  v9 = v29;
  swift_bridgeObjectRelease_n(v29, 2);
  swift_bridgeObjectRelease(v33);
  _os_log_impl((void *)&_mh_execute_header, v10, v49, "Checking to see if we need to retry unsubscribe for subscriptions %s ...", v12, 0xCu);
  swift_arrayDestroy(v48, 1);
  sub_10000A818(v48);
  sub_10000A818((uint64_t)v12);

LABEL_24:
  v35 = sub_10002C388(v9);
  swift_bridgeObjectRelease(v9);
  v36 = *(_QWORD *)(v35 + 16);
  swift_release(v35);
  v37 = sub_10002C75C();
  v38 = static os_log_type_t.debug.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  if (v36)
  {
    if (v39)
    {
      v40 = (uint8_t *)sub_10002C724();
      *(_WORD *)v40 = 0;
      sub_10002C744((void *)&_mh_execute_header, v37, v38, "Subscriptions found with empty consumers. Starting XPC task to retry unsubscribe", v40);
      sub_10000A818((uint64_t)v40);
    }

    v41 = sub_10000A748((uint64_t)&unk_1000C46F8, 24);
    swift_weakInit(v41 + 16, v1);
    v42 = sub_10000A748((uint64_t)&unk_1000C4720, 72);
    *(_QWORD *)(v42 + 16) = 0xD00000000000002ALL;
    *(_QWORD *)(v42 + 24) = 0x80000001000A6E20;
    *(_BYTE *)(v42 + 32) = 1;
    *(_DWORD *)(v42 + 33) = (_DWORD)v54;
    *(_DWORD *)(v42 + 36) = *(_DWORD *)((char *)&v54 + 3);
    *(_OWORD *)(v42 + 40) = xmmword_1000A0880;
    *(_QWORD *)(v42 + 56) = sub_10002C33C;
    *(_QWORD *)(v42 + 64) = v41;
    aBlock[4] = (uint64_t)sub_1000289D4;
    v56 = v42;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000283CC;
    aBlock[3] = (uint64_t)&unk_1000C4738;
    v43 = _Block_copy(aBlock);
    v44 = v56;
    swift_retain_n(v41, 2);
    swift_release(v44);
    xpc_activity_register("com.apple.sportsd.subscription-unsubscribe", XPC_ACTIVITY_CHECK_IN, v43);
    _Block_release(v43);
    swift_release_n(v41, 2);
  }
  else
  {
    if (v39)
    {
      v45 = (uint8_t *)sub_10002C724();
      *(_WORD *)v45 = 0;
      sub_10002C744((void *)&_mh_execute_header, v37, v38, "No subscriptions with empty consumers found.", v45);
      sub_10000A818((uint64_t)v45);
    }

  }
}

uint64_t sub_10002B420(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  _BYTE v10[40];
  _BYTE v11[8];
  _BYTE v12[24];
  _OWORD v13[2];
  uint64_t v14;
  _BYTE v15[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    swift_beginAccess(v5, v12, 0, 0);
    Strong = swift_weakLoadStrong(v5);
    if (Strong)
    {
      v9 = Strong;
      sub_10000AE14(Strong + 16, (uint64_t)v13);
      swift_release(v9);
    }
    else
    {
      v14 = 0;
      memset(v13, 0, sizeof(v13));
    }
    swift_weakInit(v11, v7);
    sub_10002C5F4((uint64_t)v13, (uint64_t)v10);
    swift_release(v7);
    sub_10002C63C((uint64_t)v13);
    sub_10002BD00(a1, a2, (uint64_t)v11, (uint64_t)v10);
    sub_10002C63C((uint64_t)v10);
    return swift_weakDestroy(v11);
  }
  return result;
}

uint64_t sub_10002B50C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23[3];
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  if (qword_1000CFAD0 != -1)
    swift_once(&qword_1000CFAD0, sub_10006CCC8);
  v6 = type metadata accessor for Logger(0);
  sub_1000096EC(v6, (uint64_t)qword_1000DDAE8);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v23[0] = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(a2);
    sub_100014B44(a1, a2, v23);
    v22 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "UnsubscribeRetryXPCServer: Unsubscribing from event '%s' since it has no consumers.", v10, 0xCu);
    swift_arrayDestroy(v11, 1);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_1000235C4(0, 0xE000000000000000, a1, a2, v23);
  v13 = v24;
  v14 = v25;
  sub_1000073CC(v23, v24);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  v15 = swift_allocObject(&unk_1000C4770, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  v16 = swift_allocObject(&unk_1000C46F8, 24, 7);
  swift_weakInit(v16 + 16, v3);
  v17 = (_QWORD *)swift_allocObject(&unk_1000C4798, 40, 7);
  v17[2] = v16;
  v17[3] = a1;
  v17[4] = a2;
  swift_bridgeObjectRetain_n(a2, 2);
  v18 = sub_10000738C(&qword_1000D0B18);
  sub_10002C6E0();
  v19 = Publisher.sink(receiveCompletion:receiveValue:)(sub_10002C6A0, v15, sub_10002C6D4, v17, v18);
  swift_release(v15);
  swift_release(v17);
  swift_release(v22);
  sub_100007618(v23);
  v20 = v3 + 248;
  swift_beginAccess(v20, v23, 33, 0);
  AnyCancellable.store(in:)(v20);
  swift_endAccess(v23);
  return swift_release(v19);
}

void sub_10002B7F4(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *oslog;
  _QWORD v17[3];
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;

  v3 = *a1;
  if (*a1)
  {
    swift_errorRetain(*a1);
    if (qword_1000CFAD0 != -1)
      swift_once(&qword_1000CFAD0, sub_10006CCC8);
    v6 = type metadata accessor for Logger(0);
    sub_1000096EC(v6, (uint64_t)qword_1000DDAE8);
    swift_errorRetain(v3);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(v3);
    v7 = swift_bridgeObjectRetain(a3);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v20 = v10;
      *(_DWORD *)v9 = 136315394;
      swift_bridgeObjectRetain(a3);
      sub_100014B44(a2, a3, &v20);
      v19 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v9 + 12) = 2080;
      swift_getErrorValue(v3, v18, v17);
      v12 = Error.localizedDescription.getter(v17[1], v17[2]);
      v14 = v13;
      sub_100014B44(v12, v13, &v20);
      v19 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Error unsubscribing from %s with no consumers: %s\"", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
  }
}

uint64_t sub_10002BA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    sub_10000AE14(result + 16, (uint64_t)v11);
    swift_release(v8);
    v9 = v12;
    v10 = v13;
    sub_1000073CC(v11, v12);
    dispatch thunk of PersistentStorable.deleteSportingEventSubscription(canonicalId:isConventionalOrUnified:)(a3, a4, 1, v9, v10);
    return sub_100007618(v11);
  }
  return result;
}

uint64_t sub_10002BD00(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t Strong;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44[3];
  char v45[8];
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  char v49[24];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  swift_beginAccess(a3, v49, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (!result)
    return result;
  v8 = result;
  if (qword_1000CFAD0 != -1)
    goto LABEL_41;
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_1000096EC(v9, (uint64_t)qword_1000DDAE8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unsubscribe retry XPC task is starting", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_10002C5F4(a4, (uint64_t)&v50);
  if (!v52)
  {
    v16 = sub_10002C63C((uint64_t)&v50);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unsubscribe retry XPC task ran and will continue to run", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    a1(1);
    return swift_release(v8);
  }
  sub_100009DDC(&v50, (uint64_t)v46);
  v14 = v47;
  v15 = v48;
  sub_1000073CC(v46, v47);
  v20 = dispatch thunk of PersistentStorable.allEventSubscriptionsToConsumers(isConventionalOrUnified:)(1, v14, v15);
  v21 = sub_10002C388(v20);
  swift_bridgeObjectRelease(v20);
  if (*(_QWORD *)(v21 + 16))
  {
    v43 = a1;
    swift_weakInit(v45, v8);
    sub_100073004(&v50, v21);
    v22 = v21;
    a1 = (void (*)(uint64_t))*((_QWORD *)&v50 + 1);
    v23 = v50;
    v24 = v51;
    v25 = v52;
    a4 = v53;
    v42 = v22;
    swift_bridgeObjectRetain(v22);
    swift_beginAccess(v45, v44, 0, 0);
    v26 = (unint64_t)(v24 + 64) >> 6;
    while (1)
    {
      if (a4)
      {
        v27 = __clz(__rbit64(a4));
        a4 &= a4 - 1;
        v28 = v27 | (v25 << 6);
      }
      else
      {
        v29 = v25 + 1;
        if (__OFADD__(v25, 1))
        {
          __break(1u);
LABEL_41:
          swift_once(&qword_1000CFAD0, sub_10006CCC8);
          goto LABEL_3;
        }
        if (v29 >= v26)
          goto LABEL_34;
        v30 = *((_QWORD *)a1 + v29);
        v31 = v25 + 1;
        if (!v30)
        {
          v31 = v25 + 2;
          if (v25 + 2 >= v26)
            goto LABEL_34;
          v30 = *((_QWORD *)a1 + v31);
          if (!v30)
          {
            v31 = v25 + 3;
            if (v25 + 3 >= v26)
              goto LABEL_34;
            v30 = *((_QWORD *)a1 + v31);
            if (!v30)
            {
              v31 = v25 + 4;
              if (v25 + 4 >= v26)
                goto LABEL_34;
              v30 = *((_QWORD *)a1 + v31);
              if (!v30)
              {
                v31 = v25 + 5;
                if (v25 + 5 >= v26)
                  goto LABEL_34;
                v30 = *((_QWORD *)a1 + v31);
                if (!v30)
                {
                  v31 = v25 + 6;
                  if (v25 + 6 >= v26)
                    goto LABEL_34;
                  v30 = *((_QWORD *)a1 + v31);
                  if (!v30)
                  {
                    v32 = v25 + 7;
                    while (v32 < v26)
                    {
                      v30 = *((_QWORD *)a1 + v32++);
                      if (v30)
                      {
                        v31 = v32 - 1;
                        goto LABEL_31;
                      }
                    }
LABEL_34:
                    swift_release(v42);
                    swift_release(v23);
                    v38 = swift_weakDestroy(v45);
                    a1 = v43;
                    goto LABEL_36;
                  }
                }
              }
            }
          }
        }
LABEL_31:
        a4 = (v30 - 1) & v30;
        v28 = __clz(__rbit64(v30)) + (v31 << 6);
        v25 = v31;
      }
      v33 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * v28);
      v34 = *v33;
      v35 = v33[1];
      Strong = swift_weakLoadStrong(v45);
      if (Strong)
      {
        v37 = Strong;
        sub_10002B50C(v34, v35);
        swift_release(v37);
      }
    }
  }
  v38 = swift_release(v21);
LABEL_36:
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unsubscribe retry XPC task ran and will continue to run", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

  a1(1);
  swift_release(v8);
  return sub_100007618(v46);
}

uint64_t sub_10002C2A4()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 16));

  sub_100023FB4((_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
  return v0;
}

uint64_t sub_10002C2D8()
{
  uint64_t v0;

  sub_10002C2A4();
  return swift_deallocClassInstance(v0, 256, 7);
}

uint64_t type metadata accessor for UnsubscribeRetryXPCServer()
{
  return objc_opt_self(_TtC7sportsd25UnsubscribeRetryXPCServer);
}

uint64_t sub_10002C318()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002C33C(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return sub_10002B420(a1, a2, v2);
}

uint64_t sub_10002C344()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10002C370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002C380(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002C388(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_10002C74C();
    sub_10002C730();
    if (v1)
      swift_willThrow();
    else
      return v7;
  }
  else
  {
    v8 = swift_slowAlloc(v6, -1);
    sub_10002C74C();
    sub_10002C730();
    v2 = v9;
    swift_slowDealloc(v8, -1, -1);
  }
  return v2;
}

void sub_10002C4AC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      goto LABEL_24;
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_24;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_24;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12) + 16))
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1000984C4(a1, a2, v4, (_QWORD *)a3);
        return;
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    goto LABEL_24;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_24;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10002C5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D0DF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002C63C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000738C(&qword_1000D0DF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002C67C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10002C6A0(_QWORD *a1)
{
  uint64_t v1;

  sub_10002B7F4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002C6A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002C6D4(uint64_t a1)
{
  uint64_t *v1;

  return sub_10002BA50(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_10002C6E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D0B20;
  if (!qword_1000D0B20)
  {
    v1 = sub_100007648(&qword_1000D0B18);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000D0B20);
  }
  return result;
}

uint64_t sub_10002C724()
{
  return swift_slowAlloc(2, -1);
}

void sub_10002C730()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;

  sub_10002C4AC(v2, v1, v0);
}

void sub_10002C744(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t sub_10002C74C()
{
  uint64_t v0;
  _QWORD *v1;

  return sub_100015638(0, v0, v1);
}

uint64_t sub_10002C75C()
{
  return Logger.logObject.getter();
}

uint64_t sub_10002C764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  char v8;
  char v9;
  NSString v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;

  type metadata accessor for ContainerConstants(0);
  v0 = static ContainerConstants.defaultSuiteName.getter();
  v2 = v1;
  v3 = objc_allocWithZone((Class)NSUserDefaults);
  v4 = sub_10004D3C8(v0, v2);
  if (!v4)
    goto LABEL_17;
  v5 = v4;
  v6 = objc_msgSend(v4, "dictionaryRepresentation");
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v7 + 16))
  {

    swift_bridgeObjectRelease(v7);
LABEL_17:
    v23 = 0;
    return v23 & 1;
  }
  sub_100015050(0xD000000000000018, 0x80000001000A6E50);
  v9 = v8;
  swift_bridgeObjectRelease(v7);
  if ((v9 & 1) == 0)
  {

    goto LABEL_17;
  }
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v5, "BOOLForKey:", v10);

  v12 = v11 == 0;
  if (v11)
    v13 = 0x6E456C616373656DLL;
  else
    v13 = 0x69446C616373656DLL;
  if (v12)
    v14 = (void *)0xEE0064656C626173;
  else
    v14 = (void *)0xED000064656C6261;
  if (qword_1000CFAB8 != -1)
    swift_once(&qword_1000CFAB8, sub_10006CC6C);
  v15 = type metadata accessor for Logger(0);
  sub_1000096EC(v15, (uint64_t)qword_1000DDAA0);
  v16 = swift_bridgeObjectRetain_n(v14, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v28 = v20;
    *(_DWORD *)v19 = 136315138;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0, 0xE000000000000000, 0) & 1) != 0)
    {
      v21 = 0xE400000000000000;
      v22 = 1819047278;
    }
    else
    {
      swift_bridgeObjectRetain(v14);
      v22 = v13;
      v21 = (unint64_t)v14;
    }
    sub_100014B44(v22, v21, &v28);
    v27 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 4, v19 + 12);
    sub_10002CAD0();
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "authentication defaults value: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1);
    sub_10000A818(v20);
    sub_10000A818((uint64_t)v19);

  }
  else
  {

    sub_10002CAD0();
  }
  v29._countAndFlagsBits = v13;
  v29._object = v14;
  v26 = sub_10002CA80(v29);

  v23 = (v26 == 2) | v26;
  return v23 & 1;
}

uint64_t sub_10002CA80(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C27A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_10002CAD0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10002CADC(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v2;
  uint64_t v3;

  a1(&v3, &v2);
  return v3;
}

uint64_t sub_10002CB34@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  _QWORD v40[5];

  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_10000A7D4();
  v20 = v19 - v18;
  sub_100009DDC(a1, (uint64_t)a9);
  a9[5] = a2;
  sub_100009DDC(a3, (uint64_t)(a9 + 6));
  v21 = sub_100009DDC(a4, (uint64_t)(a9 + 11));
  a9[16] = a5;
  a9[17] = a6;
  a9[18] = a7;
  a9[19] = a8;
  Date.init()(v21);
  sub_100080BA0();
  v23 = v22;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v16);
  a9[20] = v23;
  v24 = (objc_class *)type metadata accessor for ActivityAuthorization(0);
  v25 = objc_msgSend(objc_allocWithZone(v24), "init");
  v26 = sub_100043DEC();
  v28 = v27;
  v40[3] = v24;
  v40[4] = &off_1000C5188;
  v40[0] = v25;
  v29 = type metadata accessor for ActivityCapUtility();
  v30 = (_QWORD *)sub_10000A748(v29, 72);
  v31 = sub_10000AE58((uint64_t)v40, (uint64_t)v24);
  __chkstk_darwin(v31);
  sub_10000A7D4();
  v34 = (uint64_t *)(v33 - v32);
  (*(void (**)(uint64_t))(v35 + 16))(v33 - v32);
  v36 = *v34;
  v30[5] = v24;
  v30[6] = &off_1000C5188;
  v30[2] = v36;
  v30[7] = v26;
  v30[8] = v28;
  result = sub_100007618(v40);
  a9[21] = v30;
  return result;
}

void sub_10002CCD0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  char v13;
  char v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __n128 v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[7];
  uint64_t v69;
  _QWORD v70[17];
  unint64_t v71;
  _QWORD v72[23];

  v1 = v0;
  v2 = sub_10000738C(&qword_1000D0E10);
  v61 = *(_QWORD *)(v2 - 8);
  v62 = v2;
  __chkstk_darwin(v2);
  sub_10000CD48();
  v60 = v3;
  v66 = sub_10000738C(&qword_1000D0E18);
  v64 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  sub_10000CD48();
  v63 = v4;
  v5 = sub_10000738C(&qword_1000D0E20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10000CD48();
  v65 = v7;
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v8 = type metadata accessor for Logger(0);
  sub_1000096EC(v8, (uint64_t)qword_1000DDAB8);
  v9 = sub_10002FDCC();
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  v67 = v6;
  if (!os_log_type_enabled(v10, v11))
  {
    sub_10002FDE0();
    goto LABEL_16;
  }
  v12 = (uint8_t *)sub_100018554(8);
  *(_DWORD *)v12 = 67109120;
  if (v72[16] == 0xD000000000000011 && v72[17] == 0x80000001000A5730)
  {
    sub_10002FE28();
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v72[16], v72[17], 0xD000000000000011, 0x80000001000A5730, 0);
    sub_10002FE28();
    if ((v13 & 1) == 0)
    {
      sub_10002FDD8();
      goto LABEL_14;
    }
  }
  if ((sub_100063B00() & 1) != 0)
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(1751607656, 0xE400000000000000, 7827308, 0xE300000000000000, 0);
    swift_bridgeObjectRelease(0xE400000000000000);
    sub_10002FDD8();
    if ((v14 & 1) != 0)
      goto LABEL_12;
LABEL_14:
    v15 = 0;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease(0xE300000000000000);
  sub_10002FDD8();
LABEL_12:
  v15 = 1;
LABEL_15:
  sub_10002FDE0();
  LODWORD(v72[0]) = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, (char *)v72 + 4, v12 + 4, v12 + 8);
  _os_log_impl((void *)&_mh_execute_header, v10, v11, "Tempo start /unregister for isLowCapLiveActivity=%{BOOL}d", v12, 8u);
  sub_10000A818((uint64_t)v12);
LABEL_16:

  v16 = (_QWORD *)v1[5];
  v17 = v1[18];
  v18 = v1[19];
  v19 = sub_10002D380();
  v20 = v16 + 2;
  v22 = v16[5];
  v21 = v16[6];
  sub_1000073CC(v20, v22);
  v23 = dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(v17, v18, (v19 & 1) == 0, v22, v21);
  if (v23)
  {
    v24 = (void *)v23;
    if ((sub_10002D380() & 1) != 0)
    {
      v26 = (void *)SportingEventSubscription.byChangingConsumers(_:)(&_swiftEmptySetSingleton);
    }
    else
    {
      SportingEventSubscription.consumers.getter(v25);
      v42 = sub_10000738C(&qword_1000CFE30);
      inited = swift_initStackObject(v42, v68);
      *(_OWORD *)(inited + 16) = xmmword_10009FDB0;
      v44 = v1[17];
      *(_QWORD *)(inited + 32) = v1[16];
      *(_QWORD *)(inited + 40) = v44;
      swift_bridgeObjectRetain(v44);
      sub_1000168F0();
      v46 = v45;
      swift_setDeallocating(inited);
      sub_10007DE04();
      v26 = (void *)SportingEventSubscription.byChangingConsumers(_:)(v46);
      swift_release(v46);
    }
    sub_10002D6D0(v24, v26);

  }
  else
  {
    v59 = v5;
    sub_10002FDCC();
    v27 = sub_10002F5D4((uint64_t)v1, (uint64_t)v70);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = sub_100018554(22);
      v31 = sub_100018554(64);
      v69 = v31;
      *(_DWORD *)v30 = 136315394;
      v33 = v72[18];
      v32 = v72[19];
      swift_bridgeObjectRetain(v72[19]);
      sub_100014B44(v33, v32, &v69);
      sub_10002FE08(v34, v35, v36, v30 + 12);
      swift_bridgeObjectRelease(v32);
      sub_10002FDE0();
      *(_WORD *)(v30 + 12) = 2080;
      v37 = v70[16];
      v38 = v71;
      swift_bridgeObjectRetain(v71);
      sub_100014B44(v37, v38, &v69);
      v68[6] = v39;
      sub_10002FE08(v39, v40, v41, v30 + 22);
      swift_bridgeObjectRelease(v38);
      sub_10002FDD8();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Tempo /unregister canonicalId=%s, remove consumer=%s, though there are no subscription exists", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 2);
      sub_10000A818(v31);
      sub_10000A818(v30);
    }
    else
    {
      sub_10002FDE0();
      sub_10002FDD8();
    }

    sub_1000073CC(v1, v1[3]);
    sub_10000DF20();
    v70[0] = v47;
    sub_10002FDCC();
    v48 = sub_10000A748((uint64_t)&unk_1000C47E8, 192);
    v49 = memcpy((void *)(v48 + 16), v72, 0xB0uLL);
    v50 = static Subscribers.Demand.unlimited.getter(v49);
    v51 = sub_10000A82C();
    v52 = sub_10000738C(&qword_1000D0E28);
    v53 = sub_10002FE18(&qword_1000CFDF8, &qword_1000CFDF0);
    v54 = sub_10002FE18(&qword_1000D0E30, &qword_1000D0E28);
    Publisher<>.flatMap<A>(maxPublishers:_:)(v50, sub_10002F638, v48, v51, v52, v53, v54);
    swift_release(v48);
    swift_release(v70[0]);
    sub_10000D358(&qword_1000D0E38, &qword_1000D0E10, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    Publisher.map<A>(_:)(sub_10002FDBC, 0, v62, &type metadata for Bool);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
    v55 = sub_10000A82C();
    v56 = sub_10000D358(&qword_1000D0E40, &qword_1000D0E18, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v57 = sub_10002FE18((unint64_t *)&qword_1000D0B20, &qword_1000D0B18);
    Publisher.catch<A>(_:)(sub_10002D6CC, 0, v66, v55, v56, v57);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v66);
    v58 = sub_10000D358(&qword_1000D0E48, &qword_1000D0E20, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    Publisher.eraseToAnyPublisher()(v59, v58);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v59);
  }
  sub_10000A668();
}

uint64_t sub_10002D380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  unint64_t v5;
  _QWORD v7[21];

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  if (v1 == 0xD000000000000011 && v2 == 0x80000001000A5730)
  {
    sub_10002F5D4(v0, (uint64_t)v7);
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v2, 0xD000000000000011, 0x80000001000A5730, 0);
    sub_10002F5D4(v0, (uint64_t)v7);
    v4 = 0;
    if ((v3 & 1) == 0)
      goto LABEL_9;
  }
  if ((sub_100063B00() & 1) != 0)
  {
    v5 = 0xE400000000000000;
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1751607656, 0xE400000000000000, 7827308, 0xE300000000000000, 0);
  }
  else
  {
    v4 = 1;
    v5 = 0xE300000000000000;
  }
  swift_bridgeObjectRelease(v5);
LABEL_9:
  sub_10002F608(v7);
  return v4 & 1;
}

uint64_t sub_10002D468@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  sub_1000073CC(a1 + 6, a1[9]);
  v10 = a1[19];
  swift_bridgeObjectRetain(v10);
  v4._countAndFlagsBits = 47;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._object = (void *)0x80000001000A57E0;
  v5._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v5);
  v6 = sub_10002D540();
  sub_100007704();
  v8 = v7;
  swift_bridgeObjectRelease(v10);
  result = swift_bridgeObjectRelease(v6);
  *a2 = v8;
  return result;
}

uint64_t sub_10002D540()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[232];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_10000738C(&qword_1000D0848);
  inited = swift_initStackObject(v6, v20);
  *(_OWORD *)(inited + 16) = xmmword_1000A08E0;
  *(_BYTE *)(inited + 32) = 2;
  v9 = v1[18];
  v8 = v1[19];
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 48) = v8;
  *(_BYTE *)(inited + 72) = 7;
  swift_bridgeObjectRetain(v8);
  Date.init()(v10);
  sub_100080BA0();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(inited + 104) = &type metadata for UInt64;
  *(_QWORD *)(inited + 80) = v12;
  *(_BYTE *)(inited + 112) = 8;
  v13 = v1[20];
  *(_QWORD *)(inited + 144) = &type metadata for UInt64;
  *(_QWORD *)(inited + 120) = v13;
  *(_BYTE *)(inited + 152) = 43;
  v14 = sub_10002D380();
  *(_QWORD *)(inited + 184) = &type metadata for Bool;
  *(_BYTE *)(inited + 160) = (v14 & 1) == 0;
  *(_BYTE *)(inited + 192) = 44;
  *(_QWORD *)(inited + 224) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 200) = 1;
  sub_10000738C((uint64_t *)&unk_1000CFF70);
  sub_100021804();
  v15 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
  sub_10002EFCC(v15);
  v17 = v16;
  swift_bridgeObjectRelease(v15);
  return v17;
}

uint64_t sub_10002D6D0(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)(char *, uint64_t);
  uint64_t v24;
  void (**v25)(char *, uint64_t);
  __n128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  void (**v70)(char *, uint64_t);
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t (**v147)(char *, uint64_t);
  uint64_t v148;
  char *v149;
  uint64_t v150;
  void (**v151)(char *, uint64_t);
  uint64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[16];
  uint64_t v158;
  unint64_t v159;
  _QWORD v160[23];

  v142 = a1;
  v3 = sub_10000738C(&qword_1000D0E50);
  v147 = *(uint64_t (***)(char *, uint64_t))(v3 - 8);
  v148 = v3;
  __chkstk_darwin(v3);
  v146 = (char *)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_10000738C(&qword_1000D0E58);
  v150 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v149 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v151 = (void (**)(char *, uint64_t))((char *)&v128 - v7);
  v8 = sub_10000738C(&qword_1000D0E60);
  v130 = *(_QWORD *)(v8 - 8);
  v131 = v8;
  __chkstk_darwin(v8);
  v129 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000738C(&qword_1000D0E68);
  v133 = *(_QWORD *)(v10 - 8);
  v134 = v10;
  __chkstk_darwin(v10);
  v132 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_10000738C(&qword_1000D0E70);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v135 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000738C(&qword_1000D0E78);
  v139 = *(_QWORD *)(v13 - 8);
  v140 = v13;
  __chkstk_darwin(v13);
  v137 = (char *)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000738C(&qword_1000D0E80);
  v143 = *(_QWORD *)(v15 - 8);
  v144 = v15;
  __chkstk_darwin(v15);
  v141 = (char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_10000738C(&qword_1000D0E88);
  v17 = *(char **)(v145 - 8);
  __chkstk_darwin(v145);
  v19 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10000738C(&qword_1000D0E90);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (uint64_t (**)(char *, uint64_t))((char *)&v128 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = sub_10000738C(&qword_1000D0E98);
  v25 = *(void (***)(char *, uint64_t))(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v128 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = a2;
  v29 = SportingEventSubscription.consumers.getter(v26);
  v30 = *(_QWORD *)(v29 + 16);
  swift_bridgeObjectRelease(v29);
  if (v30)
  {
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v31 = type metadata accessor for Logger(0);
    sub_1000096EC(v31, (uint64_t)qword_1000DDAB8);
    v32 = v154;
    sub_10002F5D4(v154, (uint64_t)v160);
    sub_10002F5D4(v32, (uint64_t)v157);
    v33 = v153;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(32, -1);
      v153 = (id)swift_slowAlloc(96, -1);
      v156 = (uint64_t)v153;
      *(_DWORD *)v36 = 136315650;
      v37 = v160[18];
      v38 = v160[19];
      swift_bridgeObjectRetain(v160[19]);
      sub_100014B44(v37, v38, &v156);
      v155 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease(v38);
      sub_10002F608(v160);
      *(_WORD *)(v36 + 12) = 2080;
      v41 = v158;
      v40 = v159;
      swift_bridgeObjectRetain(v159);
      sub_100014B44(v41, v40, &v156);
      v155 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v40);
      sub_10002F608(v157);
      *(_WORD *)(v36 + 22) = 2080;
      v44 = SportingEventSubscription.consumers.getter(v43);
      v45 = Set.description.getter(v44, &type metadata for String, &protocol witness table for String);
      v47 = v46;
      swift_bridgeObjectRelease(v44);
      sub_100014B44(v45, v47, &v156);
      v155 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v36 + 24, v36 + 32);

      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Tempo skip /unregister canonicalId=%s, remove consumer=%s, active consumers=%s", (uint8_t *)v36, 0x20u);
      v49 = v153;
      swift_arrayDestroy(v153, 3);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {
      sub_10002F608(v160);
      sub_10002F608(v157);

    }
    LOBYTE(v160[0]) = 1;
    v63 = v146;
    Just.init(_:)(v160);
    v64 = sub_10000738C((uint64_t *)&unk_1000D1690);
    v65 = v148;
    v66 = v149;
    Just.setFailureType<A>(to:)(v64, v148, v64, &protocol self-conformance witness table for Error);
    v67 = v147[1](v63, v65);
    v68 = __chkstk_darwin(v67);
    v70 = v151;
    v69 = v152;
    Result.Publisher.tryMap<A>(_:)(sub_10002F640, v68);
    v71 = *(void (**)(char *, uint64_t))(v150 + 8);
    v71(v66, v69);
    v72 = sub_10000D358(&qword_1000D0EA0, &qword_1000D0E58, (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    v73 = Publisher.eraseToAnyPublisher()(v69, v72);
    v71((char *)v70, v69);
  }
  else
  {
    v128 = v19;
    v146 = v17;
    v151 = v25;
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v147 = v23;
    v148 = v21;
    v149 = v28;
    v150 = v20;
    v152 = v24;
    v50 = type metadata accessor for Logger(0);
    sub_1000096EC(v50, (uint64_t)qword_1000DDAB8);
    v51 = v154;
    sub_10002F5D4(v154, (uint64_t)v160);
    v52 = sub_10002F5D4(v51, (uint64_t)v157);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.debug.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc(22, -1);
      v56 = swift_slowAlloc(64, -1);
      v156 = v56;
      *(_DWORD *)v55 = 136315394;
      v57 = v160[18];
      v58 = v160[19];
      swift_bridgeObjectRetain(v160[19]);
      sub_100014B44(v57, v58, &v156);
      v155 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v55 + 4, v55 + 12);
      swift_bridgeObjectRelease(v58);
      sub_10002F608(v160);
      *(_WORD *)(v55 + 12) = 2080;
      v61 = v158;
      v60 = v159;
      swift_bridgeObjectRetain(v159);
      sub_100014B44(v61, v60, &v156);
      v155 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease(v60);
      sub_10002F608(v157);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Tempo start /unregister canonicalId=%s, remove consumer=%s, no consumers left", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v56, 2);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      sub_10002F608(v160);
      sub_10002F608(v157);
    }

    v75 = v131;
    v74 = v132;
    v76 = v129;
    __chkstk_darwin(v77);
    v78 = v154;
    v79 = sub_10002CADC((void (*)(uint64_t *__return_ptr, uint64_t *))sub_10002F658);
    v81 = v80 & 1;
    v160[0] = v79;
    LOBYTE(v160[1]) = v80 & 1;
    v82 = sub_10000738C(&qword_1000D0EA8);
    Result.publisher.getter(v82);
    sub_10002F674(v79, v81);
    sub_10002F5D4(v78, (uint64_t)v160);
    v83 = swift_allocObject(&unk_1000C4810, 192, 7);
    v84 = memcpy((void *)(v83 + 16), v160, 0xB0uLL);
    v85 = static Subscribers.Demand.unlimited.getter(v84);
    v86 = v76;
    v87 = sub_10000738C(&qword_1000D0EB0);
    v88 = sub_10000D358(&qword_1000D0EB8, &qword_1000D0E60, (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    v89 = sub_10000D358(&qword_1000D0EC0, &qword_1000D0EB0, (uint64_t)&protocol conformance descriptor for Deferred<A>);
    Publisher.flatMap<A, B>(maxPublishers:_:)(v85, sub_10002F684, v83, v75, &type metadata for Bool, v87, v88, v89);
    swift_release(v83);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v86, v75);
    sub_10002F5D4(v78, (uint64_t)v160);
    v90 = swift_allocObject(&unk_1000C4838, 192, 7);
    v91 = memcpy((void *)(v90 + 16), v160, 0xB0uLL);
    v92 = static Subscribers.Demand.unlimited.getter(v91);
    v93 = v74;
    v94 = sub_10000738C(&qword_1000CFDF0);
    v95 = sub_10000D358(&qword_1000D0EC8, &qword_1000D0E68, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v96 = sub_10000D358(&qword_1000CFDF8, &qword_1000CFDF0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v97 = v135;
    v98 = v92;
    v99 = v134;
    Publisher.flatMap<A>(maxPublishers:_:)(v98, sub_10002F690, v90, v134, v94, v95, v96);
    swift_release(v90);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v93, v99);
    sub_10002F5D4(v78, (uint64_t)v160);
    v100 = swift_allocObject(&unk_1000C4860, 200, 7);
    memcpy((void *)(v100 + 16), v160, 0xB0uLL);
    v101 = v142;
    *(_QWORD *)(v100 + 192) = v142;
    v102 = static Subscribers.Demand.unlimited.getter(v101);
    v103 = sub_10000738C(&qword_1000CFD68);
    v104 = sub_10000738C(&qword_1000D0E28);
    v105 = sub_10000D358(&qword_1000D0ED0, &qword_1000D0E70, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v106 = sub_10000D358(&qword_1000D0E30, &qword_1000D0E28, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v107 = v137;
    v108 = v138;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v102, sub_10002F6DC, v100, v138, v103, v104, v105, v106);
    swift_release(v100);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v97, v108);
    sub_10000D358(&qword_1000D0ED8, &qword_1000D0E78, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v109 = v140;
    v110 = v141;
    Publisher.map<A>(_:)(sub_10002EA8C, 0, v140, &type metadata for Bool);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v107, v109);
    v111 = sub_10000738C(&qword_1000D0B18);
    v112 = sub_10000D358(&qword_1000D0EE0, &qword_1000D0E80, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v113 = sub_10000D358((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v114 = v128;
    v115 = v144;
    Publisher.catch<A>(_:)(sub_10002D6CC, 0, v144, v111, v112, v113);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v110, v115);
    v116 = v154;
    sub_10002F5D4(v154, (uint64_t)v160);
    v117 = swift_allocObject(&unk_1000C4888, 192, 7);
    memcpy((void *)(v117 + 16), v160, 0xB0uLL);
    v118 = sub_10000D358(&qword_1000D0EE8, &qword_1000D0E88, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v119 = (char *)v147;
    v120 = v145;
    Publisher.tryMap<A>(_:)(sub_10002F6EC, v117, v145, &type metadata for Bool, v118);
    swift_release(v117);
    (*((void (**)(char *, uint64_t))v146 + 1))(v114, v120);
    sub_10002F5D4(v116, (uint64_t)v160);
    v121 = swift_allocObject(&unk_1000C48B0, 192, 7);
    memcpy((void *)(v121 + 16), v160, 0xB0uLL);
    v122 = sub_10000D358(&qword_1000D0EF0, &qword_1000D0E90, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
    v123 = v150;
    v124 = v149;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_10002F708, v121, 0, 0, 0, 0, 0, 0, v150, v122);
    swift_release(v121);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v119, v123);
    v125 = sub_10000D358(&qword_1000D0EF8, &qword_1000D0E98, (uint64_t)&protocol conformance descriptor for Publishers.HandleEvents<A>);
    v126 = v152;
    v73 = Publisher.eraseToAnyPublisher()(v152, v125);
    v151[1](v124, v126);
  }
  return v73;
}

uint64_t sub_10002E4A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[176];

  sub_10002F5D4(a1, (uint64_t)v6);
  v3 = swift_allocObject(&unk_1000C4900, 192, 7);
  memcpy((void *)(v3 + 16), v6, 0xB0uLL);
  v4 = sub_10000738C(&qword_1000D0F18);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = Future.init(_:)(sub_10002F7A4, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10002E528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE __src[176];

  v6 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v6);
  v8 = &__src[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = swift_allocObject(&unk_1000C4928, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = type metadata accessor for TaskPriority(0);
  sub_10000964C((uint64_t)v8, 1, 1, v10);
  sub_10002F5D4(a3, (uint64_t)__src);
  v11 = (_QWORD *)swift_allocObject(&unk_1000C4950, 224, 7);
  v11[2] = 0;
  v11[3] = 0;
  memcpy(v11 + 4, __src, 0xB0uLL);
  v11[26] = sub_10002F7D0;
  v11[27] = v9;
  swift_retain(a2);
  v12 = sub_100043B28((uint64_t)v8, (uint64_t)&unk_1000D0F30, (uint64_t)v11);
  return swift_release(v12);
}

uint64_t sub_10002E638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_10002E654, 0, 0);
}

uint64_t sub_10002E654()
{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void ***)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD **)(v0 + 16);
  v4 = sub_1000073CC(v3 + 11, v3[14]);
  v5 = v3[18];
  v6 = v3[19];
  v7 = *v4;
  swift_retain(v2);
  sub_1000740F0(v5, v6, v7, v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002E6C8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1000CFAB0 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v4 = type metadata accessor for Logger(0);
    sub_1000096EC(v4, (uint64_t)qword_1000DDA88);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)sub_100018554(12);
      v9 = sub_100018554(32);
      v18 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(a1, v17, v16);
      v10 = Error.localizedDescription.getter(v16[1], v16[2]);
      v12 = v11;
      sub_100014B44(v10, v11, &v18);
      v15 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v12);
      sub_10002FDC4();
      sub_10002FDC4();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error connecting to watchlistd for suppression. %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1);
      sub_10000A818(v9);
      sub_10000A818((uint64_t)v8);

      sub_10002FDC4();
    }
    else
    {
      sub_10002FDC4();
      sub_10002FDC4();
      sub_10002FDC4();

    }
  }
  return a2(1, 0);
}

uint64_t sub_10002E88C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = *(_QWORD **)(a1 + 40);
  v7 = sub_10002D380();
  v8 = v6 + 2;
  v9 = v6[5];
  v10 = v6[6];
  sub_1000073CC(v8, v9);
  result = dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(a2, (v7 & 1) == 0, v9, v10);
  if (v3)
    *a3 = v3;
  return result;
}

uint64_t sub_10002E910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[176];

  sub_10002F5D4(a2, (uint64_t)v6);
  v2 = swift_allocObject(&unk_1000C48D8, 192, 7);
  memcpy((void *)(v2 + 16), v6, 0xB0uLL);
  v3 = sub_10000738C(&qword_1000D0F18);
  v4 = sub_10000D358(&qword_1000D0F20, &qword_1000D0F18, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  return Deferred.init(createPublisher:)(sub_10002F75C, v2, v3, v4);
}

void sub_10002E9B8(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_1000073CC(a1, a1[3]);
  sub_10000DF20();
  *a2 = v3;
}

uint64_t sub_10002E9EC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  sub_1000073CC((_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 72));
  SportingEventSubscription.registrationId.getter();
  v4 = v3;
  v5 = sub_10002D540();
  sub_100007704();
  v7 = v6;
  swift_bridgeObjectRelease(v4);
  result = swift_bridgeObjectRelease(v5);
  *a2 = v7;
  return result;
}

void sub_10002EA8C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10002EA98@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = sub_10000738C(&qword_1000D0F00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10000A7D4();
  v8 = v7 - v6;
  v13 = *a1;
  swift_errorRetain(v13);
  v9 = sub_10000738C((uint64_t *)&unk_1000D1690);
  Fail.init(error:)(&v13, &type metadata for Bool, v9, &protocol self-conformance witness table for Error);
  v10 = sub_10000D358(&qword_1000D0F08, &qword_1000D0F00, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
  v11 = Publisher.eraseToAnyPublisher()(v4, v10);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  *a2 = v11;
  return result;
}

void sub_10002EB80(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = (_QWORD *)a1[5];
  v4 = a1[18];
  v5 = a1[19];
  v6 = sub_10002D380();
  v7 = v3 + 2;
  v8 = v3[5];
  v9 = v3[6];
  sub_1000073CC(v3 + 2, v8);
  v10 = dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(v4, v5, (v6 & 1) == 0, v8, v9);
  if (v10)
  {
    v12 = (void *)v10;
    v13 = SportingEventSubscription.consumers.getter(v11);
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRelease(v13);
    if (v14)
    {

    }
    else
    {
      v16 = v3[5];
      v15 = v3[6];
      sub_1000073CC(v7, v16);
      v17 = sub_10002D380();
      dispatch thunk of PersistentStorable.deleteSportingEventSubscription(canonicalId:isConventionalOrUnified:)(v4, v5, (v17 & 1) == 0, v16, v15);

      if (v2)
        return;
    }
  }
  *a2 = 1;
}

void sub_10002EC90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[16];
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[19];
  unint64_t v22;

  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v3 = type metadata accessor for Logger(0);
  sub_1000096EC(v3, (uint64_t)qword_1000DDAB8);
  sub_10002F5D4(a2, (uint64_t)v21);
  v4 = sub_10002F5D4(a2, (uint64_t)v18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(18, -1);
    v8 = swift_slowAlloc(32, -1);
    v17 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = v21[18];
    v10 = v22;
    swift_bridgeObjectRetain(v22);
    sub_100014B44(v9, v10, &v17);
    v15 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v10);
    sub_10002F608(v21);
    *(_WORD *)(v7 + 12) = 1024;
    if (v19 == 0xD000000000000011 && v20 == 0x80000001000A5730)
    {
      sub_10002F5D4((uint64_t)v18, (uint64_t)&v15);
    }
    else
    {
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0xD000000000000011, 0x80000001000A5730, 0);
      sub_10002F5D4((uint64_t)v18, (uint64_t)&v15);
      if ((v12 & 1) == 0)
      {
        sub_10002F608(&v15);
        goto LABEL_14;
      }
    }
    if ((sub_100063B00() & 1) == 0)
    {
      swift_bridgeObjectRelease(0xE300000000000000);
      sub_10002F608(&v15);
LABEL_12:
      v14 = 1;
LABEL_15:
      sub_10002F608(v18);
      LODWORD(v15) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, (char *)&v15 + 4, v7 + 14, v7 + 18);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Tempo /unregister success for %s, isLowCapLiveActivity=%{BOOL}d", (uint8_t *)v7, 0x12u);
      swift_arrayDestroy(v8, 1);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
      goto LABEL_16;
    }
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(1751607656, 0xE400000000000000, 7827308, 0xE300000000000000, 0);
    swift_bridgeObjectRelease(0xE400000000000000);
    sub_10002F608(&v15);
    if ((v13 & 1) != 0)
      goto LABEL_12;
LABEL_14:
    v14 = 0;
    goto LABEL_15;
  }
  sub_10002F608(v18);
  sub_10002F608(v21);
LABEL_16:

}

uint64_t sub_10002EF40@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  char v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v7 = *a1;
  v8 = *(_QWORD **)(a2 + 40);
  v9 = sub_10002D380();
  v10 = v8 + 2;
  v11 = v8[5];
  v12 = v8[6];
  sub_1000073CC(v10, v11);
  result = dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(a3, (v9 & 1) == 0, v11, v12);
  if (!v4)
    *a4 = v7;
  return result;
}

void sub_10002EFCC(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  char v11;
  unsigned __int8 v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 *v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  char v33;
  _BYTE v34[32];
  _OWORD v35[2];
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _QWORD *v40;
  _QWORD v41[7];
  int64_t v42;

  v40 = &_swiftEmptyDictionarySingleton;
  sub_100073004(v41, a1);
  v2 = v41[0];
  v29 = v41[1];
  v3 = v41[3];
  v4 = v41[4];
  v42 = (unint64_t)(v41[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v4)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v6 = v5 | (v3 << 6);
  while (1)
  {
    v11 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v6);
    sub_10002F710(*(_QWORD *)(v2 + 56) + 32 * v6, (uint64_t)v38 + 8);
    LOBYTE(v38[0]) = v11;
    v36[0] = v38[0];
    v36[1] = v38[1];
    v37 = v39;
    sub_10002F710((uint64_t)v36 + 8, (uint64_t)&v30);
    if (!v31)
    {
      sub_100027964((uint64_t)v36, &qword_1000D0F10);
      v24 = &v30;
      goto LABEL_33;
    }
    sub_100022CB8(&v30, v35);
    v12 = v36[0];
    v33 = v36[0];
    sub_10000AD8C((uint64_t)v36 + 8, (uint64_t)v34);
    sub_100022CB8(v35, v32);
    v13 = v40;
    v14 = v40[2];
    if (v40[3] <= v14)
    {
      sub_1000977BC(v14 + 1, 1);
      v13 = v40;
    }
    Hasher.init(_seed:)(&v30);
    v15 = sub_10007B6F4(v12);
    v17 = v16;
    String.hash(into:)(&v30, v15, v16);
    swift_bridgeObjectRelease(v17);
    v18 = Hasher._finalize()();
    v19 = v13 + 8;
    v20 = -1 << *((_BYTE *)v13 + 32);
    v21 = v18 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~v13[(v21 >> 6) + 8]) == 0)
      break;
    v23 = __clz(__rbit64((-1 << v21) & ~v13[(v21 >> 6) + 8])) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_32:
    *(_QWORD *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_BYTE *)(v13[6] + v23) = v12;
    sub_100022CB8(v32, (_OWORD *)(v13[7] + 32 * v23));
    ++v13[2];
    v24 = (__int128 *)v34;
LABEL_33:
    sub_100027964((uint64_t)v24, (uint64_t *)&unk_1000CFF70);
    if (v4)
      goto LABEL_2;
LABEL_3:
    v7 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_37;
    if (v7 >= v42)
      goto LABEL_35;
    v8 = *(_QWORD *)(v29 + 8 * v7);
    v9 = v3 + 1;
    if (!v8)
    {
      v9 = v3 + 2;
      if (v3 + 2 >= v42)
        goto LABEL_35;
      v8 = *(_QWORD *)(v29 + 8 * v9);
      if (!v8)
      {
        v9 = v3 + 3;
        if (v3 + 3 >= v42)
          goto LABEL_35;
        v8 = *(_QWORD *)(v29 + 8 * v9);
        if (!v8)
        {
          v9 = v3 + 4;
          if (v3 + 4 >= v42)
            goto LABEL_35;
          v8 = *(_QWORD *)(v29 + 8 * v9);
          if (!v8)
          {
            v9 = v3 + 5;
            if (v3 + 5 >= v42)
              goto LABEL_35;
            v8 = *(_QWORD *)(v29 + 8 * v9);
            if (!v8)
            {
              v10 = v3 + 6;
              while (v10 < v42)
              {
                v8 = *(_QWORD *)(v29 + 8 * v10++);
                if (v8)
                {
                  v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_35:
              sub_1000180CC(v2);
              return;
            }
          }
        }
      }
    }
LABEL_18:
    v4 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v9 << 6);
    v3 = v9;
  }
  v25 = 0;
  v26 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v26 || (v25 & 1) == 0)
  {
    v27 = v22 == v26;
    if (v22 == v26)
      v22 = 0;
    v25 |= v27;
    v28 = v19[v22];
    if (v28 != -1)
    {
      v23 = __clz(__rbit64(~v28)) + (v22 << 6);
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_10002F344()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE __src[80];
  uint64_t v16;

  v1 = sub_10000738C(&qword_1000D0E00);
  v14 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10000A7D4();
  v4 = v3 - v2;
  sub_1000073CC(v0, v0[3]);
  sub_10000DF20();
  v16 = v5;
  sub_10002F568((uint64_t)v0, (uint64_t)__src);
  v6 = sub_10000A748((uint64_t)&unk_1000C47C0, 96);
  v7 = memcpy((void *)(v6 + 16), __src, 0x50uLL);
  v8 = static Subscribers.Demand.unlimited.getter(v7);
  v9 = sub_10000A82C();
  v10 = sub_10000738C(&qword_1000D0B18);
  v11 = sub_10000D358(&qword_1000CFDF8, &qword_1000CFDF0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v12 = sub_10000D358((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v8, sub_10002F5C8, v6, v9, v10, v11, v12);
  swift_release(v6);
  swift_release(v16);
  v13 = sub_10000D358(&qword_1000D0E08, &qword_1000D0E00, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  Publisher.eraseToAnyPublisher()(v1, v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, v1);
  sub_10000A668();
}

uint64_t sub_10002F4D8@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  sub_1000073CC((_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
  sub_100021804();
  Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
  sub_100007190();
  v4 = v3;
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_10002F568(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubscriptionUnregisterAllOperation(a2, a1);
  return a2;
}

uint64_t sub_10002F59C()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 16));
  sub_100007618((_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10002F5C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10002F4D8(v1 + 16, a1);
}

uint64_t sub_10002F5D4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SubscriptionUnregisterOperation(a2, a1);
  return a2;
}

_QWORD *sub_10002F608(_QWORD *a1)
{
  destroy for SubscriptionUnregisterOperation(a1);
  return a1;
}

uint64_t sub_10002F638@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10002D468((_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10002F640@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_10002EF40(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10002F658(_QWORD *a1)
{
  uint64_t v1;

  return sub_10002E88C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10002F674(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_10002F684(uint64_t a1)
{
  uint64_t v1;

  return sub_10002E910(a1, v1 + 16);
}

void sub_10002F690(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10002E9B8((_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10002F698()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  sub_10002FDE8();
  sub_10002FE20();
  swift_release(*(_QWORD *)(v0 + 184));

  return swift_deallocObject(v0, 200, 7);
}

uint64_t sub_10002F6DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10002E9EC(v1 + 16, a1);
}

void sub_10002F6EC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_10002EB80((_QWORD *)(v1 + 16), a1);
}

void sub_10002F708(uint64_t a1)
{
  uint64_t v1;

  sub_10002EC90(a1, v1 + 16);
}

uint64_t sub_10002F710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C((uint64_t *)&unk_1000CFF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F75C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10002E4A0(v1 + 16, a1);
}

uint64_t sub_10002F768()
{
  _QWORD *v0;

  sub_100007618(v0 + 2);
  swift_release(v0[7]);
  sub_10002FDE8();
  sub_10002FE20();
  swift_release(v0[23]);
  return swift_deallocObject(v0, 192, 7);
}

uint64_t sub_10002F7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10002E528(a1, a2, v2 + 16);
}

uint64_t sub_10002F7AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10002F7D0(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_10009190C(a1, a2 & 1, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_10002F7DC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_100007618(v0 + 4);
  swift_release(v0[9]);
  sub_100007618(v0 + 10);
  sub_100007618(v0 + 15);
  sub_10002FE20();
  swift_bridgeObjectRelease(v0[23]);
  swift_release(v0[25]);
  swift_release(v0[27]);
  return swift_deallocObject(v0, 224, 7);
}

uint64_t sub_10002F83C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v8 = v1[26];
  v7 = v1[27];
  v9 = (_QWORD *)swift_task_alloc(dword_1000D0F2C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10002A168;
  return sub_10002E638(a1, v4, v5, v6, v8, v7);
}

uint64_t destroy for SubscriptionUnregisterAllOperation(_QWORD *a1)
{
  sub_100007618(a1);
  return sub_100007618(a1 + 5);
}

uint64_t initializeWithCopy for SubscriptionUnregisterAllOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

_QWORD *assignWithCopy for SubscriptionUnregisterAllOperation(_QWORD *a1, _QWORD *a2)
{
  sub_100009F58(a1, a2);
  sub_100009F58(a1 + 5, a2 + 5);
  return a1;
}

void *initializeWithTake for SubscriptionUnregisterAllOperation(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for SubscriptionUnregisterAllOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  sub_100007618((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100007618((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUnregisterAllOperation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionUnregisterAllOperation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUnregisterAllOperation()
{
  return &type metadata for SubscriptionUnregisterAllOperation;
}

uint64_t destroy for SubscriptionUnregisterOperation(_QWORD *a1)
{
  sub_100007618(a1);
  swift_release(a1[5]);
  sub_100007618(a1 + 6);
  sub_100007618(a1 + 11);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[19]);
  return swift_release(a1[21]);
}

uint64_t initializeWithCopy for SubscriptionUnregisterOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain(v5);
  v8(a1 + 48, a2 + 48, v7);
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 88, a2 + 88);
  v10 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  v12 = *(_QWORD *)(a2 + 160);
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v12;
  *(_QWORD *)(a1 + 168) = v13;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_retain(v13);
  return a1;
}

_QWORD *assignWithCopy for SubscriptionUnregisterOperation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100009F58(a1, a2);
  v4 = a2[5];
  v5 = a1[5];
  a1[5] = v4;
  swift_retain(v4);
  swift_release(v5);
  sub_100009F58(a1 + 6, a2 + 6);
  sub_100009F58(a1 + 11, a2 + 11);
  a1[16] = a2[16];
  v6 = a2[17];
  v7 = a1[17];
  a1[17] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[18] = a2[18];
  v8 = a2[19];
  v9 = a1[19];
  a1[19] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[20] = a2[20];
  v10 = a2[21];
  v11 = a1[21];
  a1[21] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

void *initializeWithTake for SubscriptionUnregisterOperation(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xB0uLL);
}

uint64_t assignWithTake for SubscriptionUnregisterOperation(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_100007618((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release(v6);
  sub_100007618((_QWORD *)(a1 + 48));
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  sub_100007618((_QWORD *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v8 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 152);
  v10 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 168);
  v12 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v11;
  swift_release(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionUnregisterOperation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 176))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionUnregisterOperation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionUnregisterOperation()
{
  return &type metadata for SubscriptionUnregisterOperation;
}

uint64_t sub_10002FDC4()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_10002FDCC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10002F5D4(v1, v0 + 312);
}

_QWORD *sub_10002FDD8()
{
  uint64_t v0;

  return sub_10002F608((_QWORD *)(v0 + 136));
}

_QWORD *sub_10002FDE0()
{
  uint64_t v0;

  return sub_10002F608((_QWORD *)(v0 + 312));
}

uint64_t sub_10002FDE8()
{
  _QWORD *v0;

  sub_100007618(v0 + 8);
  sub_100007618(v0 + 13);
  return swift_bridgeObjectRelease(v0[19]);
}

uint64_t sub_10002FE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 + 120, v6, v5, a4);
}

uint64_t sub_10002FE18(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_10000D358(a1, a2, v2);
}

uint64_t sub_10002FE20()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
}

uint64_t sub_10002FE28()
{
  uint64_t v0;

  return sub_10002F5D4(v0 + 312, v0 + 136);
}

uint64_t sub_10002FE34(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _QWORD v7[4];

  sub_1000073CC(a1, a1[3]);
  v2 = sub_10002FEE4();
  result = dispatch thunk of Decoder.singleValueContainer()(v2);
  if (!v1)
  {
    sub_1000073CC(v7, v7[3]);
    v4 = sub_10002FEE4();
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v4);
    v6.n128_f64[0] = (double)v5;
    if (v5 > 10000000000)
      v6.n128_f64[0] = (double)v5 / 1000.0;
    Date.init(timeIntervalSince1970:)(v6);
    return sub_100007618(v7);
  }
  return result;
}

uint64_t sub_10002FEE4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002FEF8()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10000738C(&qword_1000D0F38);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = PassthroughSubject.init()();
  qword_1000DDA48 = result;
  return result;
}

uint64_t sub_10002FF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (qword_1000CFA70 != -1)
    swift_once(&qword_1000CFA70, sub_10002FEF8);
  v0 = sub_10000738C(&qword_1000D0F38);
  v1 = sub_10000D358(&qword_1000D0F40, &qword_1000D0F38, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v6 = Publisher.share()(v0, v1);
  v2 = sub_10000738C(&qword_1000D0F48);
  v3 = sub_10000D358(&qword_1000D0F50, &qword_1000D0F48, (uint64_t)&protocol conformance descriptor for Publishers.Share<A>);
  v4 = Publisher.eraseToAnyPublisher()(v2, v3);
  result = swift_release(v6);
  qword_1000DDA50 = v4;
  return result;
}

uint64_t sub_100030028(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRetain(a2);
    result = a4;
    return swift_bridgeObjectRetain(result);
  }
  if (!a5)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t destroy for CloudChannelOperation(uint64_t a1)
{
  return sub_100030080(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_100030080(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRelease(a2);
    result = a4;
    return swift_bridgeObjectRelease(result);
  }
  if (!a5)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for CloudChannelOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100030028(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for CloudChannelOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100030028(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_100030080(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for CloudChannelOperation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CloudChannelOperation(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_100030080(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudChannelOperation(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudChannelOperation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_100030278(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_100030280(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CloudChannelOperation()
{
  return &type metadata for CloudChannelOperation;
}

uint64_t sub_100030298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = sub_100009658(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10000A47C(a1, &qword_1000D0578);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    v15 = v14;
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  if (v15 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v16 = v18;
    v18[2] = v13;
    v18[3] = v15;
  }
  else
  {
    v16 = 0;
  }
  return swift_task_create(v8, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_1000303C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = sub_100009658(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10000A47C(a1, &qword_1000D0578);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    v15 = v14;
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = sub_10000738C(&qword_1000D0490);
  if (v15 | v13)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v13;
    v19[3] = v15;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, v16, a2, a3);
}

uint64_t sub_1000304EC(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C29C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t sub_100030540(char a1)
{
  if ((a1 & 1) != 0)
    return 0x736C656E6E616863;
  else
    return 0x6F724665726F7473;
}

uint64_t sub_10003057C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v3 = sub_10000738C(&qword_1000D1070);
  __chkstk_darwin(v3);
  v4 = a1[3];
  v5 = a1[4];
  sub_1000073CC(a1, v4);
  v6 = sub_100031850();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000C4C60, &unk_1000C4C60, v6, v4, v5);
  if (v1)
  {
    sub_100031AC4();
  }
  else
  {
    v14 = 0;
    v5 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    v9 = v8;
    v10 = sub_10000738C(&qword_1000D0490);
    v12 = 1;
    sub_10003188C();
    swift_bridgeObjectRetain(v9);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, &v12, v3, v10);
    sub_100031A8C();
    v11 = v13;
    swift_bridgeObjectRetain(v13);
    sub_100031AC4();
    swift_bridgeObjectRelease(v11);
    sub_100031AA8();
  }
  return v5;
}

void sub_100030708(char *a1, unsigned __int8 *a2)
{
  sub_100055D44(*a1, *a2);
}

void sub_100030714()
{
  char *v0;

  sub_100056408(*v0);
}

uint64_t sub_10003071C(uint64_t a1)
{
  char *v1;

  return sub_1000566CC(a1, *v1);
}

void sub_100030724(uint64_t a1)
{
  char *v1;

  sub_100056CD8(a1, *v1);
}

uint64_t sub_10003072C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000304EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100030758@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100030540(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100030780()
{
  char *v0;

  return sub_100030540(*v0);
}

uint64_t sub_100030788@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10003053C(a1);
  *a2 = result;
  return result;
}

void sub_1000307AC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000307B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000307E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031850();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030808@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10003057C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100030834()
{
  uint64_t Task;
  uint64_t v1;
  uint64_t result;

  Task = type metadata accessor for CloudChannelFetchTask();
  v1 = swift_allocObject(Task, 120, 15);
  result = swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 112) = 0;
  qword_1000DDA58 = v1;
  return result;
}

uint64_t sub_100030870()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[4] = v0;
  v2 = sub_10000738C(&qword_1000D0578);
  v1[5] = sub_100018850(*(_QWORD *)(v2 - 8));
  v3 = type metadata accessor for Date(0);
  v1[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[7] = v4;
  v1[8] = sub_100018850(v4);
  return swift_task_switch(sub_1000308DC, v0, 0);
}

uint64_t sub_1000308DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v3 = v1[7];
  v2 = v1[8];
  v4 = v1[6];
  v5 = v1[4];
  Date.init()(a1);
  sub_100080BA0();
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = *(_QWORD *)(v5 + 112);
  v1[9] = v8;
  if (v8)
  {
    v9 = async function pointer to Task.value.getter[1];
    swift_retain(v8);
    v10 = (_QWORD *)swift_task_alloc(v9);
    v1[10] = v10;
    v11 = sub_10000738C(&qword_1000D0490);
    v12 = sub_10000738C((uint64_t *)&unk_1000D1690);
    *v10 = v1;
    v10[1] = sub_100030AAC;
    v13 = v1 + 3;
    v14 = v8;
    return Task.value.getter(v13, v14, v11, v12, &protocol self-conformance witness table for Error);
  }
  v16 = v1[4];
  v15 = v1[5];
  v17 = type metadata accessor for TaskPriority(0);
  sub_10000964C(v15, 1, 1, v17);
  v18 = sub_100031588();
  v19 = (_QWORD *)swift_allocObject(&unk_1000C4B48, 48, 7);
  v19[2] = v16;
  v19[3] = v18;
  v19[4] = v16;
  v19[5] = v7;
  swift_retain_n(v16, 2);
  v20 = sub_1000303C0(v15, (uint64_t)&unk_1000D1048, (uint64_t)v19);
  v21 = *(_QWORD *)(v5 + 112);
  *(_QWORD *)(v5 + 112) = v20;
  result = swift_release(v21);
  v23 = *(_QWORD *)(v5 + 112);
  v1[12] = v23;
  if (v23)
  {
    v24 = async function pointer to Task.value.getter[1];
    swift_retain(v23);
    v25 = (_QWORD *)swift_task_alloc(v24);
    v1[13] = v25;
    v11 = sub_10000738C(&qword_1000D0490);
    v12 = sub_10000738C((uint64_t *)&unk_1000D1690);
    *v25 = v1;
    v25[1] = sub_100030B4C;
    v13 = v1 + 2;
    v14 = v23;
    return Task.value.getter(v13, v14, v11, v12, &protocol self-conformance witness table for Error);
  }
  __break(1u);
  return result;
}

uint64_t sub_100030AAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100030BF0;
  else
    v4 = sub_100030B10;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_100030B10()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 24);
  sub_100031A80();
  sub_100018E2C();
  return sub_100031A9C(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100030B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  swift_release(v3);
  return sub_100031A70();
}

uint64_t sub_100030BB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_100031AB0(*(_QWORD *)(v0 + 32));
  sub_100031A80();
  sub_100018E2C();
  return sub_100031A9C(v1, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100030BF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  sub_100031A80();
  sub_100018E2C();
  return sub_1000184F0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100030C24()
{
  uint64_t v0;

  sub_100031AB0(*(_QWORD *)(v0 + 32));
  sub_100031A80();
  sub_100018E2C();
  return sub_1000184F0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100030C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[27] = a4;
  v5[28] = a5;
  v5[26] = a1;
  v7 = sub_10000738C(&qword_1000D1050);
  v5[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000738C(&qword_1000D1058);
  v5[30] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[31] = v9;
  v5[32] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000738C(&qword_1000D1060);
  v5[33] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[34] = v11;
  v5[35] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100030D14, a4, 0);
}

uint64_t sub_100030D14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  if (qword_1000CFAE0 != -1)
    swift_once(&qword_1000CFAE0, sub_10006CD0C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_1000096EC(v1, (uint64_t)qword_1000DDB18);
  v0[36] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_100018554(2);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "fetching available cloud channels", v5, 2u);
    sub_10000A818((uint64_t)v5);
  }

  v6 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String);
  v0[37] = v6;
  v0[24] = v6;
  if (qword_1000CFA58 != -1)
    swift_once(&qword_1000CFA58, sub_100024D38);
  v8 = v0[31];
  v7 = v0[32];
  v9 = v0[30];
  v10 = v0[28];
  v11 = qword_1000DDA30;
  type metadata accessor for BagProvider();
  swift_retain(v11);
  sub_1000062DC();
  v12 = sub_10003140C(v10);
  sub_100007CCC();
  v14 = v13;
  swift_bridgeObjectRelease(v12);
  sub_10002A040(v0 + 2);
  v0[22] = v14;
  v15 = sub_10000738C(&qword_1000CFD88);
  sub_100031668(&qword_1000CFD90, &qword_1000CFD88, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.values.getter(v15, v16);
  swift_release(v14);
  AsyncThrowingPublisher.makeAsyncIterator()(v9);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[38] = sub_100031588();
  sub_100031668(&qword_1000D1068, &qword_1000D1060, (uint64_t)&protocol conformance descriptor for AsyncThrowingPublisher<A>.Iterator);
  v18 = v17;
  v19 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[39] = v19;
  *v19 = v0;
  v19[1] = sub_100030FAC;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[29], v0[33], v18);
}

uint64_t sub_100030FAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 216);
  if (v0 && v4)
  {
    v5 = *(_QWORD *)(v2 + 304);
    ObjectType = swift_getObjectType(v4);
    dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v5);
  }
  return sub_100031A70();
}

uint64_t sub_100031044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 232);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
  v2 = sub_10000738C(&qword_1000CFDA8);
  v3 = sub_100009658(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 296);
  if (v3 != 1)
  {
    v5 = *(_QWORD *)(v0 + 232);
    sub_100018574();
    v4 = *(_QWORD *)(v5 + *(int *)(v2 + 40) + 16);
    swift_bridgeObjectRetain(v4);
    sub_10000A47C(v5, &qword_1000CFDA8);
    *(_QWORD *)(v0 + 192) = v4;
  }
  v6 = swift_bridgeObjectRetain(v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)sub_100018554(12);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v0 + 200) = *(_QWORD *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 4, v9 + 12);
    sub_100018574();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "fetched %ld available cloud channels", v9, 0xCu);
    sub_10000A818((uint64_t)v9);
  }
  else
  {
    sub_100018574();
  }

  v10 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD **)(v0 + 208);
  swift_beginAccess(v0 + 192, v0 + 112, 0, 0);
  *v13 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000311E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[37];
  v0[20] = v0[40];
  v2 = sub_10000738C((uint64_t *)&unk_1000D1690);
  swift_willThrowTypedImpl(v0 + 20, v2, &protocol self-conformance witness table for Error);
  swift_bridgeObjectRelease(v1);
  return sub_100031A70();
}

uint64_t sub_100031250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 320);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 320);
    v6 = (uint8_t *)sub_100018554(12);
    v7 = sub_100018554(32);
    v17 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v5, v0 + 168, v0 + 136);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
    v10 = v9;
    sub_100014B44(v8, v9, &v17);
    *(_QWORD *)(v0 + 184) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "failed to fetch cloud channels. error=%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1);
    sub_10000A818(v7);
    sub_10000A818((uint64_t)v6);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 320);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
  }

  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 232);
  swift_willThrow(v15);
  swift_task_dealloc(v13);
  sub_100018E2C();
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003140C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  _BYTE v12[152];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_10000738C(&qword_1000D1030);
  inited = swift_initStackObject(v6, v12);
  *(_OWORD *)(inited + 16) = xmmword_1000A0600;
  *(_BYTE *)(inited + 32) = 7;
  Date.init()(inited);
  sub_100080BA0();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(inited + 64) = &type metadata for UInt64;
  *(_QWORD *)(inited + 40) = v9;
  *(_BYTE *)(inited + 72) = 8;
  *(_QWORD *)(inited + 104) = &type metadata for UInt64;
  *(_QWORD *)(inited + 80) = a1;
  *(_BYTE *)(inited + 112) = 44;
  *(_QWORD *)(inited + 144) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 120) = 3;
  sub_100021804();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
}

uint64_t sub_100031524()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CloudChannelFetchTask()
{
  return objc_opt_self(_TtC7sportsd21CloudChannelFetchTask);
}

void sub_100031568()
{
  sub_100031ABC();
}

void sub_100031570()
{
  sub_100031568();
}

unint64_t sub_100031588()
{
  unint64_t result;
  uint64_t Task;

  result = qword_1000D1040;
  if (!qword_1000D1040)
  {
    Task = type metadata accessor for CloudChannelFetchTask();
    result = swift_getWitnessTable(&unk_1000A09E8, Task);
    atomic_store(result, (unint64_t *)&qword_1000D1040);
  }
  return result;
}

uint64_t sub_1000315C4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000315F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1000D103C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10002A168;
  return sub_100030C58(a1, v4, v5, v7, v6);
}

void sub_100031668(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = sub_100007648(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100006200();
}

uint64_t sub_1000316A8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

void sub_1000316D0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_100006200();
}

_QWORD *sub_100031708(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 sub_10003176C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *sub_100031780(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000317C4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100031804(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for CloudChannelFetchResponse()
{
  sub_100031ABC();
}

unint64_t sub_100031850()
{
  unint64_t result;

  result = qword_1000D1078;
  if (!qword_1000D1078)
  {
    result = swift_getWitnessTable(&unk_1000A0B74, &unk_1000C4C60);
    atomic_store(result, (unint64_t *)&qword_1000D1078);
  }
  return result;
}

unint64_t sub_10003188C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D1080;
  if (!qword_1000D1080)
  {
    v1 = sub_100007648(&qword_1000D0490);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000D1080);
  }
  return result;
}

uint64_t sub_1000318E8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100031934 + 4 * byte_1000A09B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100031968 + 4 * byte_1000A09B0[v4]))();
}

uint64_t sub_100031968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100031978);
  return result;
}

uint64_t sub_100031984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003198CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100031990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CloudChannelFetchResponse.CodingKeys()
{
  sub_100031ABC();
}

unint64_t sub_1000319B4()
{
  unint64_t result;

  result = qword_1000D1088;
  if (!qword_1000D1088)
  {
    result = swift_getWitnessTable(&unk_1000A0B4C, &unk_1000C4C60);
    atomic_store(result, (unint64_t *)&qword_1000D1088);
  }
  return result;
}

unint64_t sub_1000319F4()
{
  unint64_t result;

  result = qword_1000D1090;
  if (!qword_1000D1090)
  {
    result = swift_getWitnessTable(&unk_1000A0A84, &unk_1000C4C60);
    atomic_store(result, (unint64_t *)&qword_1000D1090);
  }
  return result;
}

unint64_t sub_100031A34()
{
  unint64_t result;

  result = qword_1000D1098;
  if (!qword_1000D1098)
  {
    result = swift_getWitnessTable(&unk_1000A0AAC, &unk_1000C4C60);
    atomic_store(result, (unint64_t *)&qword_1000D1098);
  }
  return result;
}

uint64_t sub_100031A70()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_100031A80()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 64));
}

uint64_t sub_100031A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100031A9C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100031AA8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100031AB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  return swift_release(v1);
}

uint64_t sub_100031AC4()
{
  _QWORD *v0;

  return sub_100007618(v0);
}

char *sub_100031ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  v3 = v2;
  v6 = sub_10000738C(&qword_1000D12A8);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SportingEventSubscription.Competitor(0);
  v31 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v30 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v27 = (char *)&v25 - v12;
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    v32 = v9;
    v29 = a1 & 0xC000000000000001;
    v14 = (char *)_swiftEmptyArrayStorage;
    v9 = 4;
    v25 = a2;
    v26 = a1;
    v28 = v13;
    while (1)
    {
      v15 = v29 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1) : *(id *)(a1 + 8 * v9);
      v16 = v15;
      v17 = v9 - 3;
      if (__OFADD__(v9 - 4, 1))
        break;
      v33 = v15;
      sub_1000377BC(&v33, a2, (uint64_t)v8);
      if (v3)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(a1);

        return v14;
      }

      v18 = v32;
      if (sub_100009658((uint64_t)v8, 1, v32) == 1)
      {
        sub_100038C8C((uint64_t)v8, &qword_1000D12A8);
      }
      else
      {
        v19 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        v20 = v27;
        v19(v27, v8, v18);
        v19(v30, v20, v18);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = (char *)sub_10001369C(0, *((_QWORD *)v14 + 2) + 1, 1, (uint64_t)v14);
        v22 = *((_QWORD *)v14 + 2);
        v21 = *((_QWORD *)v14 + 3);
        if (v22 >= v21 >> 1)
          v14 = (char *)sub_10001369C(v21 > 1, v22 + 1, 1, (uint64_t)v14);
        *((_QWORD *)v14 + 2) = v22 + 1;
        v19(&v14[((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v22], v30, v32);
        a2 = v25;
        a1 = v26;
      }
      ++v9;
      if (v17 == v28)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(a1);
        return v14;
      }
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_100031DB4@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __int128 a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v55 = a7;
  v56 = a8;
  v54 = a6;
  v60 = a22;
  v61 = a23;
  v58 = a20;
  v59 = a21;
  v57 = a19;
  v53 = a18;
  v51 = a5;
  v52 = a17;
  v50 = a16;
  v48 = a12;
  v49 = a13;
  v46 = a10;
  v47 = a11;
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (char *)&v46 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009DDC(a1, a9);
  *(_QWORD *)(a9 + 40) = a2;
  *(_QWORD *)(a9 + 48) = a3;
  sub_100009DDC(a4, a9 + 56);
  sub_100009DDC(v51, a9 + 96);
  v32 = v55;
  *(_QWORD *)(a9 + 136) = v54;
  *(_QWORD *)(a9 + 144) = v32;
  *(_QWORD *)(a9 + 152) = v56;
  v33 = v47;
  *(_OWORD *)(a9 + 160) = v46;
  *(_OWORD *)(a9 + 176) = v33;
  v34 = v49;
  *(_OWORD *)(a9 + 192) = v48;
  *(_OWORD *)(a9 + 208) = v34;
  *(_QWORD *)(a9 + 224) = a14;
  *(_BYTE *)(a9 + 232) = a15;
  v35 = v52;
  *(_QWORD *)(a9 + 240) = v50;
  *(_QWORD *)(a9 + 248) = v35;
  *(_BYTE *)(a9 + 256) = v53;
  v36 = (int *)type metadata accessor for SubscriptionRegisterOperation(0);
  sub_100038CB4(v57, a9 + v36[18], &qword_1000D0888);
  v37 = v36[19];
  Date.init()(v38);
  sub_100080BA0();
  v40 = v39;
  result = sub_100038DF8((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
  *(_QWORD *)(a9 + v37) = v40;
  v42 = (_QWORD *)(a9 + v36[20]);
  v43 = v59;
  *v42 = v58;
  v42[1] = v43;
  v44 = (_QWORD *)(a9 + v36[21]);
  v45 = v61;
  *v44 = v60;
  v44[1] = v45;
  return result;
}

uint64_t type metadata accessor for SubscriptionRegisterOperation(uint64_t a1)
{
  return sub_100032254(a1, (uint64_t *)&unk_1000D1100, (uint64_t)&nominal type descriptor for SubscriptionRegisterOperation);
}

uint64_t sub_100031F98(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t *, uint64_t);
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char *v40;
  void *__dst;
  int *v42;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v28 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v28);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    v8 = a2[5];
    v9 = a2[6];
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 48) = v9;
    v10 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v4 + 80) = v10;
    v11 = v10;
    v12 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v10 - 8);
    swift_retain(v8);
    swift_retain(v9);
    v12(v4 + 56, a2 + 7, v11);
    v13 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(v4 + 120) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v4 + 96, (uint64_t)(a2 + 12));
    v14 = a2[18];
    *(_QWORD *)(v4 + 136) = a2[17];
    *(_QWORD *)(v4 + 144) = v14;
    v15 = a2[20];
    *(_QWORD *)(v4 + 152) = a2[19];
    *(_QWORD *)(v4 + 160) = v15;
    v16 = a2[22];
    *(_QWORD *)(v4 + 168) = a2[21];
    *(_QWORD *)(v4 + 176) = v16;
    v17 = a2[24];
    *(_QWORD *)(v4 + 184) = a2[23];
    *(_QWORD *)(v4 + 192) = v17;
    v18 = a2[26];
    *(_QWORD *)(v4 + 200) = a2[25];
    *(_QWORD *)(v4 + 208) = v18;
    v19 = a2[28];
    *(_QWORD *)(v4 + 216) = a2[27];
    *(_QWORD *)(v4 + 224) = v19;
    *(_BYTE *)(v4 + 232) = *((_BYTE *)a2 + 232);
    v20 = a2[30];
    v21 = a2[31];
    *(_BYTE *)(v4 + 256) = *((_BYTE *)a2 + 256);
    v22 = a3[18];
    __dst = (void *)(v4 + v22);
    v42 = a3;
    v40 = (char *)a2 + v22;
    *(_QWORD *)(v4 + 240) = v20;
    *(_QWORD *)(v4 + 248) = v21;
    v23 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    v24 = v19;
    v25 = v23;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v21);
    if (sub_100009658((uint64_t)v40, 1, v23))
    {
      v26 = sub_10000738C(&qword_1000D0888);
      memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      v27 = v42;
    }
    else
    {
      v29 = type metadata accessor for SportingEventSubscription.Metadata(0);
      if (sub_100009658((uint64_t)v40, 1, v29))
      {
        v30 = sub_10000738C(&qword_1000D10A0);
        memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(__dst, v40, v29);
        sub_10000964C((uint64_t)__dst, 0, 1, v29);
      }
      v27 = v42;
      sub_10000964C((uint64_t)__dst, 0, 1, v25);
    }
    v31 = v27[20];
    *(_QWORD *)(v4 + v27[19]) = *(uint64_t *)((char *)a2 + v27[19]);
    v32 = (_QWORD *)(v4 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    v35 = v27[21];
    v36 = (_QWORD *)(v4 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v38);
  }
  return v4;
}

uint64_t type metadata accessor for SubscriptionRegisterOperation.PreferredData(uint64_t a1)
{
  return sub_100032254(a1, (uint64_t *)&unk_1000D11D8, (uint64_t)&nominal type descriptor for SubscriptionRegisterOperation.PreferredData);
}

uint64_t sub_100032254(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100032284(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100007618(a1);
  swift_release(a1[5]);
  swift_release(a1[6]);
  sub_100007618(a1 + 7);
  sub_100007618(a1 + 12);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(a1[22]);
  swift_bridgeObjectRelease(a1[24]);
  swift_bridgeObjectRelease(a1[26]);
  swift_bridgeObjectRelease(a1[28]);
  swift_bridgeObjectRelease(a1[31]);
  v4 = (uint64_t)a1 + a2[18];
  v5 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
  if (!sub_100009658(v4, 1, v5))
  {
    v6 = type metadata accessor for SportingEventSubscription.Metadata(0);
    if (!sub_100009658(v4, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[20] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[21] + 8));
}

uint64_t sub_10003237C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  const void *v34;
  void *__dst;

  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  (**(void (***)(void))(v5 - 8))();
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_retain(v6);
  swift_retain(v7);
  v10(a1 + 56, a2 + 56, v9);
  v11 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 96, a2 + 96);
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v13;
  v14 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v14;
  v15 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v15;
  v16 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v16;
  v17 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v17;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v18 = *(_QWORD *)(a2 + 240);
  v19 = *(_QWORD *)(a2 + 248);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v20 = a3[18];
  v34 = (const void *)(a2 + v20);
  __dst = (void *)(a1 + v20);
  *(_QWORD *)(a1 + 240) = v18;
  *(_QWORD *)(a1 + 248) = v19;
  v21 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  if (sub_100009658((uint64_t)v34, 1, v21))
  {
    v22 = sub_10000738C(&qword_1000D0888);
    memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for SportingEventSubscription.Metadata(0);
    if (sub_100009658((uint64_t)v34, 1, v23))
    {
      v24 = sub_10000738C(&qword_1000D10A0);
      memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(__dst, v34, v23);
      sub_10000964C((uint64_t)__dst, 0, 1, v23);
    }
    sub_10000964C((uint64_t)__dst, 0, 1, v21);
  }
  v25 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = a3[21];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v32);
  return a1;
}

uint64_t sub_1000325E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;

  sub_100009F58((_QWORD *)a1, (_QWORD *)a2);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain(v8);
  swift_release(v9);
  sub_100009F58((_QWORD *)(a1 + 56), (_QWORD *)(a2 + 56));
  sub_100009F58((_QWORD *)(a1 + 96), (_QWORD *)(a2 + 96));
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 144);
  v11 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v12 = *(_QWORD *)(a2 + 160);
  v13 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v14 = *(_QWORD *)(a2 + 176);
  v15 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v16 = *(_QWORD *)(a2 + 192);
  v17 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v18 = *(_QWORD *)(a2 + 208);
  v19 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v20 = *(_QWORD *)(a2 + 224);
  v21 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v22 = *(_QWORD *)(a2 + 248);
  v23 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v24 = a3[18];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
  v28 = sub_100009658((uint64_t)v25, 1, v27);
  v29 = sub_100009658((uint64_t)v26, 1, v27);
  if (v28)
  {
    if (!v29)
    {
      v30 = type metadata accessor for SportingEventSubscription.Metadata(0);
      if (sub_100009658((uint64_t)v26, 1, v30))
      {
        v31 = sub_10000738C(&qword_1000D10A0);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v25, v26, v30);
        sub_10000964C((uint64_t)v25, 0, 1, v30);
      }
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if (v29)
  {
    sub_100038708((uint64_t)v25, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
LABEL_7:
    v32 = &qword_1000D0888;
    goto LABEL_8;
  }
  v27 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v34 = sub_100009658((uint64_t)v25, 1, v27);
  v35 = sub_100009658((uint64_t)v26, 1, v27);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
LABEL_13:
      sub_10000964C((uint64_t)v25, 0, 1, v27);
      goto LABEL_14;
    }
  }
  else
  {
    v47 = *(_QWORD *)(v27 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v47 + 24))(v25, v26, v27);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v47 + 8))(v25, v27);
  }
  v32 = &qword_1000D10A0;
LABEL_8:
  v33 = sub_10000738C(v32);
  memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
LABEL_14:
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v36 = a3[20];
  v37 = (_QWORD *)(a1 + v36);
  v38 = (_QWORD *)(a2 + v36);
  *v37 = *v38;
  v39 = v38[1];
  v40 = v37[1];
  v37[1] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = a3[21];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (_QWORD *)(a2 + v41);
  *v42 = *v43;
  v44 = v43[1];
  v45 = v42[1];
  v42[1] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  return a1;
}

uint64_t sub_100032958(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v9 = *(_OWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v10 = a3[18];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 240) = v9;
  v13 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
  if (sub_100009658((uint64_t)v12, 1, v13))
  {
    v14 = sub_10000738C(&qword_1000D0888);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for SportingEventSubscription.Metadata(0);
    if (sub_100009658((uint64_t)v12, 1, v15))
    {
      v16 = sub_10000738C(&qword_1000D10A0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v11, v12, v15);
      sub_10000964C((uint64_t)v11, 0, 1, v15);
    }
    sub_10000964C((uint64_t)v11, 0, 1, v13);
  }
  v17 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  return a1;
}

uint64_t sub_100032B14(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;

  sub_100007618((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v9);
  sub_100007618((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  sub_100007618((_QWORD *)(a1 + 96));
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  v11 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 160);
  v13 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 176);
  v15 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 192);
  v17 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 208);
  v19 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v18;
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 224);
  v21 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v20;
  swift_bridgeObjectRelease(v21);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  v22 = *(_QWORD *)(a2 + 248);
  v23 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v22;
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  v24 = a3[18];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
  v28 = sub_100009658((uint64_t)v25, 1, v27);
  v29 = sub_100009658((uint64_t)v26, 1, v27);
  if (v28)
  {
    if (!v29)
    {
      v30 = type metadata accessor for SportingEventSubscription.Metadata(0);
      if (sub_100009658((uint64_t)v26, 1, v30))
      {
        v31 = sub_10000738C(&qword_1000D10A0);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v25, v26, v30);
        sub_10000964C((uint64_t)v25, 0, 1, v30);
      }
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if (v29)
  {
    sub_100038708((uint64_t)v25, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
LABEL_7:
    v32 = &qword_1000D0888;
    goto LABEL_8;
  }
  v27 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v34 = sub_100009658((uint64_t)v25, 1, v27);
  v35 = sub_100009658((uint64_t)v26, 1, v27);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
LABEL_13:
      sub_10000964C((uint64_t)v25, 0, 1, v27);
      goto LABEL_14;
    }
  }
  else
  {
    v49 = *(_QWORD *)(v27 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v49 + 40))(v25, v26, v27);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v49 + 8))(v25, v27);
  }
  v32 = &qword_1000D10A0;
LABEL_8:
  v33 = sub_10000738C(v32);
  memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
LABEL_14:
  v36 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v37 = (_QWORD *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v40 = *v38;
  v39 = v38[1];
  v41 = v37[1];
  *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease(v41);
  v42 = a3[21];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (uint64_t *)(a2 + v42);
  v46 = *v44;
  v45 = v44[1];
  v47 = v43[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease(v47);
  return a1;
}

uint64_t sub_100032E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100032E14);
}

uint64_t sub_100032E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000738C(&qword_1000D0888);
    return sub_100009658(a1 + *(int *)(a3 + 72), a2, v8);
  }
}

uint64_t sub_100032E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100032E98);
}

uint64_t sub_100032E98(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_10000738C(&qword_1000D0888);
    return sub_10000964C(v5 + *(int *)(a4 + 72), a2, a2, v7);
  }
  return result;
}

void sub_100032F08(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[18];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "(";
  v4[4] = "(";
  v4[5] = &unk_1000A0C28;
  v4[6] = &unk_1000A0C28;
  v4[7] = &unk_1000A0C40;
  v4[8] = &unk_1000A0C40;
  v4[9] = &unk_1000A0C40;
  v4[10] = &unk_1000A0C40;
  v4[11] = &unk_1000A0C58;
  v4[12] = &unk_1000A0C40;
  v4[13] = &unk_1000A0C70;
  sub_100021618(319, (unint64_t *)&unk_1000D1110, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(v2 - 8) + 64;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[16] = &unk_1000A0C28;
    v4[17] = &unk_1000A0C28;
    swift_initStructMetadata(a1, 256, 18, v4, a1 + 16);
  }
}

uint64_t *sub_100032FE0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(sub_10000738C(&qword_1000D10A0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v7);
  }
  else
  {
    v6 = type metadata accessor for SportingEventSubscription.Metadata(0);
    if (sub_100009658((uint64_t)a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      sub_10000964C((uint64_t)a1, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t sub_1000330A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for SportingEventSubscription.Metadata(0);
  result = sub_100009658(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return result;
}

void *sub_1000330FC(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for SportingEventSubscription.Metadata(0);
  if (sub_100009658((uint64_t)a2, 1, v4))
  {
    v5 = sub_10000738C(&qword_1000D10A0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    sub_10000964C((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *sub_100033198(void *a1, const void *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v5 = sub_100009658((uint64_t)a1, 1, v4);
  v6 = sub_100009658((uint64_t)a2, 1, v4);
  if (!v5)
  {
    v7 = *(_QWORD *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    v8 = sub_10000738C(&qword_1000D10A0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  sub_10000964C((uint64_t)a1, 0, 1, v4);
  return a1;
}

void *sub_10003327C(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for SportingEventSubscription.Metadata(0);
  if (sub_100009658((uint64_t)a2, 1, v4))
  {
    v5 = sub_10000738C(&qword_1000D10A0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
    sub_10000964C((uint64_t)a1, 0, 1, v4);
  }
  return a1;
}

void *sub_100033318(void *a1, const void *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v5 = sub_100009658((uint64_t)a1, 1, v4);
  v6 = sub_100009658((uint64_t)a2, 1, v4);
  if (!v5)
  {
    v7 = *(_QWORD *)(v4 - 8);
    if (!v6)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    v8 = sub_10000738C(&qword_1000D10A0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  sub_10000964C((uint64_t)a1, 0, 1, v4);
  return a1;
}

uint64_t sub_1000333FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100033408);
}

uint64_t sub_100033408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D10A0);
  return sub_100009658(a1, a2, v4);
}

uint64_t sub_100033440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003344C);
}

uint64_t sub_10003344C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D10A0);
  return sub_10000964C(a1, a2, a2, v4);
}

void sub_100033488(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100021618(319, (unint64_t *)&unk_1000D11E8, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventSubscription.Metadata);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_100033500(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  char v11;
  unsigned __int8 v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 *v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  char v34;
  _BYTE v35[32];
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  _QWORD *v41;
  _QWORD v42[7];
  uint64_t v43;

  v41 = &_swiftEmptyDictionarySingleton;
  sub_100073004(v42, a1);
  v2 = v42[0];
  v3 = v42[3];
  v4 = v42[4];
  v29 = v42[1];
  v30 = (unint64_t)(v42[2] + 64) >> 6;
  v43 = (uint64_t)v39 + 8;
  swift_bridgeObjectRetain(a1);
  if (!v4)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v6 = v5 | (v3 << 6);
  while (1)
  {
    v11 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v6);
    sub_100038C60(*(_QWORD *)(v2 + 56) + 32 * v6, v43, (uint64_t *)&unk_1000CFF70);
    LOBYTE(v39[0]) = v11;
    v37[0] = v39[0];
    v37[1] = v39[1];
    v38 = v40;
    sub_100038C60((uint64_t)v37 + 8, (uint64_t)&v31, (uint64_t *)&unk_1000CFF70);
    if (!v32)
    {
      sub_100038C8C((uint64_t)v37, &qword_1000D0F10);
      v24 = &v31;
      goto LABEL_33;
    }
    sub_100022CB8(&v31, v36);
    v12 = v37[0];
    v34 = v37[0];
    sub_100038CB4((uint64_t)v37 + 8, (uint64_t)v35, (uint64_t *)&unk_1000CFF70);
    sub_100022CB8(v36, v33);
    v13 = v41;
    v14 = v41[2];
    if (v41[3] <= v14)
    {
      sub_1000977BC(v14 + 1, 1);
      v13 = v41;
    }
    Hasher.init(_seed:)(&v31);
    v15 = sub_10007B6F4(v12);
    v17 = v16;
    String.hash(into:)(&v31, v15, v16);
    swift_bridgeObjectRelease(v17);
    v18 = Hasher._finalize()();
    v19 = v13 + 8;
    v20 = -1 << *((_BYTE *)v13 + 32);
    v21 = v18 & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~v13[(v21 >> 6) + 8]) == 0)
      break;
    v23 = __clz(__rbit64((-1 << v21) & ~v13[(v21 >> 6) + 8])) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_32:
    *(_QWORD *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_BYTE *)(v13[6] + v23) = v12;
    sub_100022CB8(v33, (_OWORD *)(v13[7] + 32 * v23));
    ++v13[2];
    v24 = (__int128 *)v35;
LABEL_33:
    sub_100038C8C((uint64_t)v24, (uint64_t *)&unk_1000CFF70);
    if (v4)
      goto LABEL_2;
LABEL_3:
    v7 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_37;
    if (v7 >= v30)
      goto LABEL_35;
    v8 = *(_QWORD *)(v29 + 8 * v7);
    v9 = v3 + 1;
    if (!v8)
    {
      v9 = v3 + 2;
      if (v3 + 2 >= v30)
        goto LABEL_35;
      v8 = *(_QWORD *)(v29 + 8 * v9);
      if (!v8)
      {
        v9 = v3 + 3;
        if (v3 + 3 >= v30)
          goto LABEL_35;
        v8 = *(_QWORD *)(v29 + 8 * v9);
        if (!v8)
        {
          v9 = v3 + 4;
          if (v3 + 4 >= v30)
            goto LABEL_35;
          v8 = *(_QWORD *)(v29 + 8 * v9);
          if (!v8)
          {
            v9 = v3 + 5;
            if (v3 + 5 >= v30)
              goto LABEL_35;
            v8 = *(_QWORD *)(v29 + 8 * v9);
            if (!v8)
            {
              v10 = v3 + 6;
              while (v10 < v30)
              {
                v8 = *(_QWORD *)(v29 + 8 * v10++);
                if (v8)
                {
                  v9 = v10 - 1;
                  goto LABEL_18;
                }
              }
LABEL_35:
              sub_1000180CC(v2);
              return;
            }
          }
        }
      }
    }
LABEL_18:
    v4 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v9 << 6);
    v3 = v9;
  }
  v25 = 0;
  v26 = (unint64_t)(63 - v20) >> 6;
  while (++v22 != v26 || (v25 & 1) == 0)
  {
    v27 = v22 == v26;
    if (v22 == v26)
      v22 = 0;
    v25 |= v27;
    v28 = v19[v22];
    if (v28 != -1)
    {
      v23 = __clz(__rbit64(~v28)) + (v22 << 6);
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_100033884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v1 = (uint64_t)v0;
  v2 = type metadata accessor for SubscriptionRegisterOperation(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000738C(&qword_1000D1218);
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  sub_10000A680();
  __chkstk_darwin(v7);
  sub_10000CD48();
  v79 = v8;
  v9 = sub_10000738C(&qword_1000D1220);
  v83 = *(_QWORD *)(v9 - 8);
  v84 = v9;
  sub_10000A680();
  __chkstk_darwin(v10);
  sub_10000CD48();
  v82 = v11;
  v12 = sub_10000738C(&qword_1000D1228);
  v86 = *(_QWORD *)(v12 - 8);
  v87 = v12;
  sub_10000A680();
  __chkstk_darwin(v13);
  sub_10000CD48();
  v85 = v14;
  v91 = sub_10000738C(&qword_1000D1230);
  v89 = *(_QWORD *)(v91 - 8);
  sub_10000A680();
  __chkstk_darwin(v15);
  sub_10000CD48();
  v88 = v16;
  v17 = sub_10000738C(&qword_1000D1238);
  v92 = *(_QWORD *)(v17 - 8);
  sub_10000A680();
  __chkstk_darwin(v18);
  sub_10000CD48();
  v90 = v19;
  v20 = (_QWORD *)v0[5];
  v21 = v0[19];
  v22 = v0[20];
  v23 = (*(unsigned __int8 *)(v1 + 256) < 6u) & (0x27u >> *(_BYTE *)(v1 + 256));
  v25 = v20[5];
  v24 = v20[6];
  sub_1000073CC(v20 + 2, v25);
  v26 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(v21, v22, v23, v25, v24);
  v27 = v26;
  if (v26)
  {
    v28 = v26;
    v30 = SportingEventSubscription.consumers.getter(v29);
    v31 = *(_QWORD *)(v30 + 16);
    swift_bridgeObjectRelease(v30);
    if (v31)
    {
      v32 = sub_100033EF8();

      return v32;
    }

  }
  sub_1000073CC((_QWORD *)v1, *(_QWORD *)(v1 + 24));
  sub_10000DF20();
  v96 = v34;
  sub_100038730(v1, (uint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SubscriptionRegisterOperation);
  v35 = *(unsigned __int8 *)(v3 + 80);
  v78 = v27;
  v94 = ((v35 + 16) & ~v35) + v4;
  v95 = (v35 + 16) & ~v35;
  v36 = v95;
  v93 = v35 | 7;
  v37 = swift_allocObject(&unk_1000C4D60, v94, v35 | 7);
  sub_100038910((uint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v37 + v36, type metadata accessor for SubscriptionRegisterOperation);
  v39 = static Subscribers.Demand.unlimited.getter(v38);
  v40 = sub_10000738C(&qword_1000CFDF0);
  v41 = sub_10000738C(&qword_1000CFE00);
  v77 = v17;
  v42 = v41;
  sub_10000A40C(&qword_1000CFDF8, &qword_1000CFDF0);
  v44 = v43;
  sub_10000A40C(&qword_1000CFE10, &qword_1000CFE00);
  v45 = v79;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v39, sub_1000384E0, v37, v40, v42, v44, v46);
  swift_release(v37);
  swift_release(v96);
  v47 = (uint64_t)v5;
  v76 = v5;
  sub_100038730(v1, (uint64_t)v5, type metadata accessor for SubscriptionRegisterOperation);
  v48 = v93;
  v49 = swift_allocObject(&unk_1000C4D88, v94, v93);
  sub_100038910(v47, v49 + v95, type metadata accessor for SubscriptionRegisterOperation);
  v51 = static Subscribers.Demand.unlimited.getter(v50);
  v52 = sub_10000738C(&qword_1000D1240);
  v53 = sub_10000738C(&qword_1000D1248);
  sub_10000A40C(&qword_1000D1250, &qword_1000D1218);
  v55 = v54;
  sub_10000A40C(&qword_1000D1258, &qword_1000D1248);
  v56 = v81;
  v57 = v82;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v51, sub_1000385DC, v49, v81, v52, v53, v55, v58);
  swift_release(v49);
  (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v45, v56);
  v59 = (uint64_t)v76;
  sub_100038730(v1, (uint64_t)v76, type metadata accessor for SubscriptionRegisterOperation);
  v60 = v94;
  v61 = swift_allocObject(&unk_1000C4DB0, v94, v48);
  v62 = v95;
  sub_100038910(v59, v61 + v95, type metadata accessor for SubscriptionRegisterOperation);
  v63 = sub_100038E1C((uint64_t)&unk_1000C4DD8);
  *(_QWORD *)(v63 + 16) = sub_100038604;
  *(_QWORD *)(v63 + 24) = v61;
  sub_10000A40C(&qword_1000D1260, &qword_1000D1220);
  v64 = v85;
  Publisher.tryFilter(_:)(sub_10003868C, v63, v84, v65);
  swift_release(v63);
  sub_10000A798(v57, *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8));
  sub_100038730(v1, v59, type metadata accessor for SubscriptionRegisterOperation);
  v66 = swift_allocObject(&unk_1000C4E00, v60, v93);
  sub_100038910(v59, v66 + v62, type metadata accessor for SubscriptionRegisterOperation);
  v67 = sub_100038E1C((uint64_t)&unk_1000C4E28);
  *(_QWORD *)(v67 + 16) = sub_1000386AC;
  *(_QWORD *)(v67 + 24) = v66;
  sub_10000A40C(&qword_1000D1268, &qword_1000D1228);
  v68 = v88;
  Publisher.map<A>(_:)(sub_100038700, v67, v87, &type metadata for Bool);
  swift_release(v67);
  sub_10000A798(v64, *(uint64_t (**)(uint64_t, uint64_t))(v86 + 8));
  v69 = sub_10000738C(&qword_1000D0B18);
  sub_10000A40C(&qword_1000D1270, &qword_1000D1230);
  v71 = v70;
  sub_10000A40C((unint64_t *)&qword_1000D0B20, &qword_1000D0B18);
  v72 = v90;
  Publisher.catch<A>(_:)(sub_1000376CC, 0, v91, v69, v71, v73);
  sub_10000A798(v68, *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
  sub_10000A40C(&qword_1000D1278, &qword_1000D1238);
  v75 = Publisher.eraseToAnyPublisher()(v77, v74);

  sub_100038DF8(v72, *(uint64_t (**)(uint64_t, uint64_t))(v92 + 8));
  return v75;
}

uint64_t sub_100033EF8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  uint64_t v52;

  v1 = v0;
  v2 = sub_10000738C(&qword_1000D0F00);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000738C(&qword_1000D0E50);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000738C(&qword_1000D0E58);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000738C(&qword_1000D0888);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000738C(&qword_1000D10A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = SportingEventSubscription.consumers.getter(v16);
  v19 = v0[17];
  v20 = v0[18];
  swift_bridgeObjectRetain(v20);
  sub_1000165E8(v51, v19, v20);
  swift_bridgeObjectRelease(v51[1]);
  v21 = v0[24];
  if (v21)
  {
    v22 = v1[26];
    if (v22)
    {
      v41 = v1[23];
      v23 = v1[25];
      v24 = type metadata accessor for SubscriptionRegisterOperation(0);
      sub_100038C60((uint64_t)v1 + *(int *)(v24 + 72), (uint64_t)v10, &qword_1000D0888);
      v25 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
      if (sub_100009658((uint64_t)v10, 1, v25) == 1)
      {
        sub_100038C8C((uint64_t)v10, &qword_1000D0888);
        sub_10000964C((uint64_t)v13, 1, 1, v14);
      }
      else
      {
        sub_100038C60((uint64_t)v10, (uint64_t)v13, &qword_1000D10A0);
        sub_100038708((uint64_t)v10, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
        if (sub_100009658((uint64_t)v13, 1, v14) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
          v40 = v52;
          v27 = (void *)SportingEventSubscription.byChanging(leagueId:sportId:metadata:consumers:)(v41, v21, v23, v22, v18, v52);
          swift_bridgeObjectRelease(v40);
          (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
          goto LABEL_8;
        }
      }
      sub_100038C8C((uint64_t)v13, &qword_1000D10A0);
    }
  }
  v26 = v52;
  v27 = (void *)SportingEventSubscription.byChangingConsumers(_:)(v52);
  swift_bridgeObjectRelease(v26);
LABEL_8:
  v28 = (_QWORD *)v1[5];
  v29 = (*((unsigned __int8 *)v1 + 256) < 6u) & (0x27u >> *((_BYTE *)v1 + 256));
  v30 = v28[5];
  v31 = v28[6];
  sub_1000073CC(v28 + 2, v30);
  dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(v27, v29, v30, v31);
  LOBYTE(v51[0]) = 1;
  v32 = v42;
  Just.init(_:)(v51);
  v33 = sub_10000738C((uint64_t *)&unk_1000D1690);
  v34 = v44;
  v35 = v45;
  Just.setFailureType<A>(to:)(v33, v44, v33, &protocol self-conformance witness table for Error);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v34);
  sub_10000A40C(&qword_1000D0EA0, &qword_1000D0E58);
  v36 = v47;
  v38 = Publisher.eraseToAnyPublisher()(v47, v37);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v36);
  return v38;
}

uint64_t sub_1000343A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  os_log_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[5];

  v58 = a3;
  v5 = type metadata accessor for SubscriptionRegisterOperation(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v55 - v9;
  __chkstk_darwin(v11);
  v13 = (os_log_t *)((char *)&v55 - v12);
  __chkstk_darwin(v14);
  v16 = (char *)&v55 - v15;
  v17 = *a1;
  v18 = a1[1];
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v59 = v17;
  v19 = type metadata accessor for Logger(0);
  sub_1000096EC(v19, (uint64_t)qword_1000DDAB8);
  sub_100038730(a2, (uint64_t)v16, type metadata accessor for SubscriptionRegisterOperation);
  sub_100038730(a2, (uint64_t)v13, type metadata accessor for SubscriptionRegisterOperation);
  sub_100038730(a2, (uint64_t)v10, type metadata accessor for SubscriptionRegisterOperation);
  sub_100038730(a2, (uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
  v20 = swift_bridgeObjectRetain_n(v18, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v24 = swift_slowAlloc(52, -1);
    v57 = swift_slowAlloc(160, -1);
    v61[0] = v57;
    *(_DWORD *)v24 = 136316162;
    HIDWORD(v56) = v23;
    v55 = v21;
    v25 = *((_QWORD *)v16 + 19);
    v26 = *((_QWORD *)v16 + 20);
    swift_bridgeObjectRetain(v26);
    sub_100014B44(v25, v26, v61);
    v60 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease(v26);
    sub_100038708((uint64_t)v16, type metadata accessor for SubscriptionRegisterOperation);
    *(_WORD *)(v24 + 12) = 2080;
    swift_bridgeObjectRetain(v18);
    sub_100014B44(v59, v18, v61);
    v60 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease_n(v18, 3);
    *(_WORD *)(v24 + 22) = 2080;
    v29 = (uint64_t *)(*sub_1000073CC(v13, v13[3]) + OBJC_IVAR____TtC7sportsd11ApsListener_currentAPSConnectionEnvironment);
    v30 = *v29;
    v31 = v29[1];
    swift_bridgeObjectRetain(v31);
    sub_100014B44(v30, v31, v61);
    v60 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease(v31);
    sub_100038708((uint64_t)v13, type metadata accessor for SubscriptionRegisterOperation);
    *(_WORD *)(v24 + 32) = 2080;
    v33 = *((_QWORD *)v10 + 17);
    v34 = *((_QWORD *)v10 + 18);
    swift_bridgeObjectRetain(v34);
    sub_100014B44(v33, v34, v61);
    v60 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease(v34);
    sub_100038708((uint64_t)v10, type metadata accessor for SubscriptionRegisterOperation);
    *(_WORD *)(v24 + 42) = 2080;
    v36 = sub_1000685E4(v7[256]);
    v38 = v37;
    sub_100014B44(v36, v37, v61);
    v60 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v24 + 44, v24 + 52);
    swift_bridgeObjectRelease(v38);
    sub_100038708((uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
    v40 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, BYTE4(v56), "Tempo /register with id=%s, push_token=%s, aps_env=%s consumer_id=%s, applicationType=%s", (uint8_t *)v24, 0x34u);
    v41 = v57;
    swift_arrayDestroy(v57, 5);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {
    sub_100038708((uint64_t)v16, type metadata accessor for SubscriptionRegisterOperation);
    swift_bridgeObjectRelease_n(v18, 2);
    sub_100038708((uint64_t)v13, type metadata accessor for SubscriptionRegisterOperation);
    sub_100038708((uint64_t)v10, type metadata accessor for SubscriptionRegisterOperation);
    sub_100038708((uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);

  }
  sub_1000073CC((_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 80));
  v42 = *(_QWORD *)(a2 + 152);
  v43 = *(_QWORD *)(a2 + 160);
  v44 = *(_QWORD *)(a2 + 184);
  v45 = *(_QWORD *)(a2 + 192);
  v46 = *(unsigned __int8 *)(a2 + 232);
  v47 = *(unsigned __int8 *)(a2 + 256);
  v48 = sub_100034860();
  sub_100033500(v48);
  v50 = v49;
  swift_bridgeObjectRelease(v48);
  sub_100006660(v42, v43, v44, v45, v59, v18, v47, v46, v50, v54, (uint64_t)v55, v56, v57, (uint64_t)v58, v59, v60, v61[0], v61[1], v61[2],
    v61[3],
    v61[4]);
  v52 = v51;
  result = swift_bridgeObjectRelease(v50);
  *v58 = v52;
  return result;
}

uint64_t sub_100034860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000738C(&qword_1000D0848);
  inited = swift_initStackObject(v6, &v26);
  *(_OWORD *)(inited + 16) = xmmword_1000A0BD0;
  *(_BYTE *)(inited + 32) = 2;
  v8 = *(_QWORD *)(v1 + 152);
  v9 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 48) = v9;
  *(_BYTE *)(inited + 72) = 20;
  v10 = (int *)type metadata accessor for SubscriptionRegisterOperation(0);
  v11 = (uint64_t *)(v1 + v10[20]);
  v12 = *v11;
  v13 = v11[1];
  *(_QWORD *)(inited + 104) = &type metadata for String;
  *(_QWORD *)(inited + 80) = v12;
  *(_QWORD *)(inited + 88) = v13;
  *(_BYTE *)(inited + 112) = 21;
  v14 = sub_1000685E4(*(_BYTE *)(v1 + 256));
  *(_QWORD *)(inited + 144) = &type metadata for String;
  *(_QWORD *)(inited + 120) = v14;
  *(_QWORD *)(inited + 128) = v15;
  *(_BYTE *)(inited + 152) = 7;
  swift_bridgeObjectRetain(v9);
  v16 = swift_bridgeObjectRetain(v13);
  Date.init()(v16);
  sub_100080BA0();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(inited + 184) = &type metadata for UInt64;
  *(_QWORD *)(inited + 160) = v18;
  *(_BYTE *)(inited + 192) = 8;
  v19 = *(_QWORD *)(v1 + v10[19]);
  *(_QWORD *)(inited + 224) = &type metadata for UInt64;
  *(_QWORD *)(inited + 200) = v19;
  *(_BYTE *)(inited + 232) = 43;
  v20 = *(unsigned __int8 *)(v1 + 256);
  *(_QWORD *)(inited + 264) = &type metadata for Bool;
  *(_BYTE *)(inited + 240) = (v20 < 6) & (0x27u >> v20);
  *(_BYTE *)(inited + 272) = 44;
  *(_QWORD *)(inited + 304) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 280) = 0;
  *(_BYTE *)(inited + 312) = 1;
  v21 = (uint64_t *)(v1 + v10[21]);
  v23 = *v21;
  v22 = v21[1];
  *(_QWORD *)(inited + 344) = &type metadata for String;
  *(_QWORD *)(inited + 320) = v23;
  *(_QWORD *)(inited + 328) = v22;
  swift_bridgeObjectRetain(v22);
  sub_10000738C((uint64_t *)&unk_1000CFF70);
  sub_100021804();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
}

uint64_t sub_100034A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  _QWORD v87[6];

  v83 = a2;
  v86 = a3;
  v85 = sub_10000738C(&qword_1000D1240);
  __chkstk_darwin(v85);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000738C(&qword_1000D12E0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000738C(&qword_1000D12E8);
  v84 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000738C(&qword_1000CFE40);
  v74 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v75 = v14;
  v76 = (uint64_t)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_10000738C(&qword_1000D12F0);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v71 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_10000738C(&qword_1000D12F8);
  v78 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v77 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000738C(&qword_1000D1300);
  v81 = *(_QWORD *)(v17 - 8);
  v82 = v17;
  __chkstk_darwin(v17);
  v79 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87[3] = &type metadata for TVAppFeatureFlags;
  v87[4] = sub_10000A278();
  v19 = isFeatureEnabled(_:)(v87);
  sub_100007618(v87);
  v20 = a1;
  if ((v19 & 1) == 0)
    goto LABEL_6;
  v21 = a1 + *(int *)(v13 + 40);
  v22 = *(_QWORD *)(v21 + 48);
  if (!v22)
    goto LABEL_6;
  v23 = v10;
  v24 = v7;
  v25 = *(_QWORD *)(v83 + 152);
  v26 = *(_QWORD *)(v83 + 160);
  v70 = v21;
  v27 = v20;
  swift_bridgeObjectRetain(v26);
  v69 = v25;
  v28 = v25;
  v7 = v24;
  v10 = v23;
  sub_1000755F8(v28, v26, v22);
  v30 = v29;
  swift_bridgeObjectRelease(v26);
  v20 = v27;
  v31 = v70;
  if (v30)
  {
    v32 = dispatch thunk of SportingEvent.competitors.getter();

    v34 = *(_QWORD *)(v31 + 24);
    if (v34)
    {
      swift_bridgeObjectRetain(v26);
      v35 = sub_10007562C(v69, v26, v34);
      v37 = v36;
      v33 = swift_bridgeObjectRelease(v26);
    }
    else
    {
      v35 = 0;
      v37 = 0;
    }
    __chkstk_darwin(v33);
    v44 = v83;
    *(&v69 - 2) = v45;
    *(&v69 - 1) = v44;
    v46 = sub_1000892A0((void (*)(uint64_t *__return_ptr, id *))sub_10003893C, (uint64_t)(&v69 - 4), v32);
    v47 = swift_bridgeObjectRelease(v32);
    v48 = *(_QWORD *)(v44 + 40);
    __chkstk_darwin(v47);
    *(&v69 - 2) = (uint64_t)sub_100038954;
    *(&v69 - 1) = v48;
    swift_retain(v48);
    v49 = sub_100080C48((uint64_t)v46, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100038958);
    swift_bridgeObjectRelease(v46);
    swift_release(v48);
    v87[0] = v49;
    v50 = sub_10000738C(&qword_1000D1310);
    v51 = sub_10000738C(&qword_1000D1318);
    sub_10000A40C(&qword_1000D1320, &qword_1000D1310);
    v53 = v52;
    sub_10000A40C(&qword_1000D1328, &qword_1000D1318);
    v54 = v71;
    Publishers.MergeMany.init<A>(_:)(v87, v50, v51, v53, v55);
    sub_10000A40C(&qword_1000D1330, &qword_1000D12F0);
    v56 = v77;
    v57 = v73;
    Publisher.collect()(v73, v58);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v54, v57);
    v59 = v76;
    sub_100038C60(v27, v76, &qword_1000CFE40);
    v60 = *(unsigned __int8 *)(v74 + 80);
    v61 = (v60 + 16) & ~v60;
    v62 = (v75 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
    v63 = swift_allocObject(&unk_1000C4E78, v62 + 16, v60 | 7);
    sub_100038CB4(v59, v63 + v61, &qword_1000CFE40);
    v64 = (uint64_t *)(v63 + v62);
    *v64 = v35;
    v64[1] = v37;
    sub_10000A40C(&qword_1000D1338, &qword_1000D12F8);
    v66 = v79;
    v65 = v80;
    Publisher.map<A>(_:)(sub_100038BF8, v63, v80, v85);
    swift_release(v63);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v56, v65);
    sub_10000A40C(&qword_1000D1340, &qword_1000D1300);
    v67 = v82;
    v42 = Publisher.eraseToAnyPublisher()(v82, v68);
    result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v66, v67);
  }
  else
  {
LABEL_6:
    v38 = *(int *)(v85 + 48);
    v39 = *(int *)(v85 + 64);
    sub_100038C60(v20, (uint64_t)v5, &qword_1000CFE40);
    *(_QWORD *)&v5[v38] = _swiftEmptyArrayStorage;
    *(_OWORD *)&v5[v39] = xmmword_1000A0BE0;
    Just.init(_:)(v5);
    v40 = sub_10000738C((uint64_t *)&unk_1000D1690);
    Just.setFailureType<A>(to:)(v40, v6, v40, &protocol self-conformance witness table for Error);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_10000A40C(&qword_1000D1308, &qword_1000D12E8);
    v42 = Publisher.eraseToAnyPublisher()(v10, v41);
    result = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v12, v10);
  }
  *v86 = v42;
  return result;
}

void sub_1000350C0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id i;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = type metadata accessor for TemplateImageUrl.ImageFormat(0);
  v9 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v11 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  __chkstk_darwin(v12);
  v14 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  __chkstk_darwin(v15);
  if (!a2 || !*(_QWORD *)(a2 + 16))
    goto LABEL_18;
  v76 = v17;
  v77 = v4;
  v75 = (char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v20 = *(_QWORD *)(a3 + 152);
  v19 = *(_QWORD *)(a3 + 160);
  swift_bridgeObjectRetain(v19);
  v21 = sub_100015050(v20, v19);
  if ((v22 & 1) == 0)
  {
    v37 = v19;
LABEL_17:
    swift_bridgeObjectRelease(v37);
LABEL_18:
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    return;
  }
  v23 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v21);
  v24 = v23[1];
  v74 = *v23;
  swift_bridgeObjectRetain(v24);
  v25 = swift_bridgeObjectRelease(v19);
  v26 = (void *)SportingEventCompetitorContainer.competitor.getter(v25);
  v27 = dispatch thunk of SportingEventCompetitor.images.getter();

  if (!v27)
  {
    v37 = v24;
    goto LABEL_17;
  }
  if (!((unint64_t)v27 >> 62))
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v27);
    if (v28)
      goto LABEL_7;
    goto LABEL_45;
  }
  if (v27 >= 0)
    v68 = v27 & 0xFFFFFFFFFFFFFF8;
  else
    v68 = v27;
  swift_bridgeObjectRetain(v27);
  v28 = _CocoaArrayWrapper.endIndex.getter(v68);
  if (!v28)
  {
LABEL_45:
    swift_bridgeObjectRelease(v24);
    v67 = v27;
LABEL_46:
    swift_bridgeObjectRelease_n(v67, 2);
    goto LABEL_18;
  }
LABEL_7:
  v71 = v27 & 0xC000000000000001;
  v72 = v28;
  v69[1] = v18;
  v73 = v27;
  if ((v27 & 0xC000000000000001) != 0)
    goto LABEL_48;
  for (i = *(id *)(v27 + 32); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v27))
  {
    v30 = i;
    v31 = SportingEventImage.type.getter();
    v33 = v31 == 1869049676 && v32 == 0xE400000000000000;
    v70 = v9;
    if (v33)
      break;
    v34 = v32;
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 1869049676, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v34);
    if ((v9 & 1) != 0)
    {
      v9 = v24;
      v35 = v73;
      v36 = v73;
      goto LABEL_21;
    }

    if (v72 == 1)
    {
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease_n(v73, 2);
      goto LABEL_18;
    }
    v69[0] = v15;
    v60 = 5;
    while (1)
    {
      v27 = v60 - 4;
      v61 = v71
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v60 - 4, v73)
          : *(id *)(v73 + 8 * v60);
      v30 = v61;
      v15 = v60 - 3;
      if (__OFADD__(v27, 1))
        break;
      v62 = SportingEventImage.type.getter();
      if (v62 == 1869049676 && v63 == 0xE400000000000000)
      {
        v9 = v24;
        v15 = v69[0];
        goto LABEL_20;
      }
      v65 = v63;
      v9 = v24;
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, 1869049676, 0xE400000000000000, 0);
      swift_bridgeObjectRelease(v65);
      if ((v66 & 1) != 0)
      {
        v35 = v73;
        v36 = v73;
        v15 = v69[0];
        goto LABEL_21;
      }

      ++v60;
      v24 = v9;
      if (v15 == v72)
      {
        swift_bridgeObjectRelease(v9);
        v67 = v73;
        goto LABEL_46;
      }
    }
    __break(1u);
LABEL_48:
    ;
  }
  v9 = v24;
LABEL_20:
  v35 = v73;
  swift_bridgeObjectRelease(v73);
  v36 = 0xE400000000000000;
LABEL_21:
  swift_bridgeObjectRelease(v35);
  v38 = swift_bridgeObjectRelease(v36);
  v39 = SportingEventImage.token.getter(v38);
  v41 = v40;

  v42 = v9;
  v43 = static TemplateImageUrl.templateThumbUrl(host:token:)(v74, v9, v39, v41);
  v45 = v44;
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v42);
  v46 = v70;
  if (!v45)
    goto LABEL_18;
  v47 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v11, enum case for TemplateImageUrl.ImageFormat.png(_:), v78);
  static TemplateImageUrl.imageUrl(templateUrl:width:height:format:)(v43, v45, 200, 200, v11);
  swift_bridgeObjectRelease(v45);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v47);
  if (sub_100009658((uint64_t)v14, 1, v15) == 1)
  {
    sub_100038C8C((uint64_t)v14, (uint64_t *)&unk_1000D16E0);
    goto LABEL_18;
  }
  v49 = v75;
  v48 = v76;
  v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v76 + 32))(v75, v14, v15);
  v51 = (void *)SportingEventCompetitorContainer.competitor.getter(v50);
  v52 = SportingEventCompetitor.canonicalId.getter();
  v53 = v15;
  v55 = v54;

  v57 = URL.absoluteString.getter(v56);
  v59 = v58;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v53);
  *(_QWORD *)a4 = v52;
  *(_QWORD *)(a4 + 8) = v55;
  *(_QWORD *)(a4 + 16) = v57;
  *(_QWORD *)(a4 + 24) = v59;
}

uint64_t sub_100035578@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v9 = *a1;
  v10 = sub_10000738C(&qword_1000D1240);
  v11 = *(int *)(v10 + 48);
  v12 = (_QWORD *)(a5 + *(int *)(v10 + 64));
  sub_100038C60(a2, a5, &qword_1000CFE40);
  *(_QWORD *)(a5 + v11) = v9;
  *v12 = a3;
  v12[1] = a4;
  swift_bridgeObjectRetain(a4);
  return swift_bridgeObjectRetain(v9);
}

uint64_t sub_1000355FC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v10 = type metadata accessor for SubscriptionRegisterOperation(0);
  v42 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v43 = v11;
  v44 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = _s20RegistrationResponseVMa(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10000738C(&qword_1000CFE40);
  sub_100038730((uint64_t)&a1[*(int *)(v45 + 40)], (uint64_t)v17, _s20RegistrationResponseVMa);
  v18 = *((_QWORD *)v17 + 6);
  if (v18)
  {
    v19 = a2;
    v21 = *(_QWORD *)(a5 + 152);
    v20 = *(_QWORD *)(a5 + 160);
    swift_bridgeObjectRetain(v20);
    sub_1000755F8(v21, v20, v18);
    v23 = v22;
    v24 = v20;
    a2 = v19;
    swift_bridgeObjectRelease(v24);
  }
  else
  {
    v23 = 0;
  }
  if (a4)
    v25 = a3;
  else
    v25 = 0;
  if (a4)
    v26 = a4;
  else
    v26 = 0xE000000000000000;
  swift_bridgeObjectRetain(a4);
  v27 = (void *)sub_1000358DC(a1, a2, v25, v26);
  swift_bridgeObjectRelease(v26);
  if (v23)
  {
    type metadata accessor for ApsMessageProcessingOperation(0);
    v28 = v23;
    v29 = v27;
    v40 = a1;
    v41 = a5;
    v30 = v29;
    sub_10008945C(v28, v27);

    a1 = v40;
    a5 = v41;
  }
  sub_100036BB4(*(_QWORD *)&a1[*(int *)(v45 + 36)], *(_QWORD *)&a1[*(int *)(v45 + 36) + 8]);
  v31 = v46;
  sub_100036E38((uint64_t)v27, v23);
  if (v31)
  {
    sub_100038708((uint64_t)v17, _s20RegistrationResponseVMa);

  }
  else
  {
    v32 = type metadata accessor for TaskPriority(0);
    sub_10000964C((uint64_t)v14, 1, 1, v32);
    v33 = v44;
    sub_100038730(a5, v44, type metadata accessor for SubscriptionRegisterOperation);
    v34 = *(unsigned __int8 *)(v42 + 80);
    v35 = (v34 + 32) & ~v34;
    v36 = v27;
    v37 = swift_allocObject(&unk_1000C4E50, v35 + v43, v34 | 7);
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = 0;
    sub_100038910(v33, v37 + v35, type metadata accessor for SubscriptionRegisterOperation);
    v38 = sub_100043B28((uint64_t)v14, (uint64_t)&unk_1000D1288, v37);
    swift_release(v38);

    sub_100038708((uint64_t)v17, _s20RegistrationResponseVMa);
  }
  return 1;
}

uint64_t sub_1000358DC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  id v59;
  __n128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  double v91;
  char *v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  char *v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217[5];
  char *v218;

  v190 = a4;
  v189 = a3;
  v204 = a2;
  v213 = a1;
  v5 = sub_10000738C(&qword_1000D1290);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v181 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SportingEventRunningClockFeature(0, v6);
  v216 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v215 = (char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v214 = (char *)&v181 - v12;
  v207 = type metadata accessor for SubscriptionRegisterOperation(0);
  __chkstk_darwin(v207);
  v198 = (char *)&v181 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  __chkstk_darwin(v14);
  v210 = (uint64_t)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v209 = (uint64_t)&v181 - v17;
  __chkstk_darwin(v18);
  v208 = (uint64_t)&v181 - v19;
  v194 = type metadata accessor for Sport(0);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v192 = (char *)&v181 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10000738C(&qword_1000D1298);
  __chkstk_darwin(v21);
  v200 = (uint64_t)&v181 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v186 = (uint64_t)&v181 - v24;
  v25 = sub_10000738C(&qword_1000D12A0);
  __chkstk_darwin(v25);
  v184 = (char *)&v181 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for Date(0);
  v191 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v196 = (char *)&v181 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v185 = (char *)&v181 - v29;
  __chkstk_darwin(v30);
  v197 = (char *)&v181 - v31;
  v32 = sub_10000738C(&qword_1000D0888);
  __chkstk_darwin(v32);
  v34 = (char *)&v181 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_10000738C(&qword_1000D10A0);
  __chkstk_darwin(v35);
  v199 = (uint64_t)&v181 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v188 = (char *)&v181 - v38;
  __chkstk_darwin(v39);
  v205 = (uint64_t)&v181 - v40;
  __chkstk_darwin(v41);
  v43 = (char *)&v181 - v42;
  __chkstk_darwin(v44);
  v211 = (uint64_t)&v181 - v45;
  v202 = _s20RegistrationResponseVMa(0);
  __chkstk_darwin(v202);
  v47 = (char *)&v181 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = (_QWORD *)v4[5];
  v50 = v4[19];
  v49 = v4[20];
  v212 = v4;
  v51 = (*((unsigned __int8 *)v4 + 256) < 6u) & (0x27u >> *((_BYTE *)v4 + 256));
  v53 = v48[5];
  v52 = v48[6];
  sub_1000073CC(v48 + 2, v53);
  v54 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(v50, v49, v51, v53, v52);
  v55 = sub_10000738C(&qword_1000CFE40);
  sub_100038730((uint64_t)&v213[*(int *)(v55 + 40)], (uint64_t)v47, _s20RegistrationResponseVMa);
  v213 = v47;
  v56 = *((_QWORD *)v47 + 6);
  if (v56)
  {
    swift_bridgeObjectRetain(*((_QWORD *)v47 + 6));
    swift_bridgeObjectRetain(v49);
    sub_1000755F8(v50, v49, v56);
    v58 = v57;
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v56);
  }
  else
  {
    v58 = 0;
  }
  v206 = v54;
  if (v54)
  {
    v59 = v54;
    v61 = (char *)SportingEventSubscription.consumers.getter(v60);

  }
  else
  {
    v61 = (char *)&_swiftEmptySetSingleton;
  }
  v218 = v61;
  v62 = v212[17];
  v63 = v212[18];
  swift_bridgeObjectRetain(v63);
  sub_1000165E8(v217, v62, v63);
  swift_bridgeObjectRelease(v217[1]);
  v64 = *((_QWORD *)v213 + 4);
  if (!v64
    || (swift_bridgeObjectRetain(v49),
        swift_bridgeObjectRetain(v64),
        sub_10007567C(v50, v49, v64),
        v66 = v65,
        swift_bridgeObjectRelease(v49),
        swift_bridgeObjectRelease(v64),
        !v66))
  {
    swift_bridgeObjectRelease(0);
    v66 = _swiftEmptyArrayStorage;
  }
  v67 = v206;
  v68 = v212[24];
  v201 = v212[23];
  v69 = v212[25];
  v70 = v212[26];
  sub_100038C60((uint64_t)v212 + *(int *)(v207 + 72), (uint64_t)v34, &qword_1000D0888);
  v71 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
  v72 = sub_100009658((uint64_t)v34, 1, v71);
  v203 = v68;
  if (v72 == 1)
  {
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v68);
    sub_100038C8C((uint64_t)v34, &qword_1000D0888);
    v73 = type metadata accessor for SportingEventSubscription.Metadata(0);
    sub_10000964C((uint64_t)v43, 1, 1, v73);
  }
  else
  {
    sub_100038C60((uint64_t)v34, (uint64_t)v43, &qword_1000D10A0);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v68);
    sub_100038708((uint64_t)v34, type metadata accessor for SubscriptionRegisterOperation.PreferredData);
    v74 = type metadata accessor for SportingEventSubscription.Metadata(0);
    if (sub_100009658((uint64_t)v43, 1, v74) != 1)
    {
      v77 = v211;
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v211, v43, v74);
      sub_10000964C(v77, 0, 1, v74);
      goto LABEL_18;
    }
  }
  if (v67)
  {
    v75 = v67;
    SportingEventSubscription.metadata.getter();

  }
  else
  {
    v76 = type metadata accessor for SportingEventSubscription.Metadata(0);
    sub_10000964C(v211, 1, 1, v76);
  }
  sub_100038C8C((uint64_t)v43, &qword_1000D10A0);
LABEL_18:
  v217[3] = (uint64_t)&type metadata for TVAppFeatureFlags;
  v217[4] = sub_10000A278();
  v78 = isFeatureEnabled(_:)(v217);
  sub_100007618(v217);
  if ((v78 & 1) == 0)
    goto LABEL_45;
  v79 = v205;
  sub_100038C60(v211, v205, &qword_1000D10A0);
  v183 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v80 = sub_100009658(v79, 1, v183);
  sub_100038C8C(v79, &qword_1000D10A0);
  if (v80 != 1 || !v58)
    goto LABEL_45;
  v205 = v69;
  v182 = v58;
  v81 = v58;
  v82 = dispatch thunk of SportingEvent.competitors.getter();

  v83 = v204;
  swift_bridgeObjectRetain(v204);
  v181 = sub_100031ACC(v82, v83);
  v84 = swift_bridgeObjectRelease(v82);
  v85 = v197;
  Date.init()(v84);
  v86 = v81;
  v87 = (void *)dispatch thunk of SportingEvent.schedule.getter();

  v88 = v195;
  v89 = v191;
  if (v87)
  {
    v90 = (void *)SportingEventSchedule.duration.getter();

    v91 = SportingEventDuration.start.getter();
    v85 = v197;
    v92 = v185;
    v93.n128_f64[0] = v91;
    Date.init(timeIntervalSince1970:)(v93);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v85, v88);
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v85, v92, v88);
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v196, v85, v88);
  v94 = v186;
  sub_100038C60((uint64_t)&v213[*(int *)(v202 + 44)], v186, &qword_1000D1298);
  v95 = type metadata accessor for SportingEventViewContext(0);
  if (sub_100009658(v94, 1, v95) == 1)
  {
    sub_100038C8C(v94, &qword_1000D1298);
  }
  else
  {
    v96 = v66;
    v97 = (uint64_t)v184;
    SportingEventViewContext.titles.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 8))(v94, v95);
    v98 = type metadata accessor for SportingEventViewContext.LocalizedTitles(0);
    if (sub_100009658(v97, 1, v98) == 1)
    {
      sub_100038C8C(v97, &qword_1000D12A0);
      v66 = v96;
    }
    else
    {
      v99 = SportingEventViewContext.LocalizedTitles.preGame.getter();
      v101 = v100;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 8))(v97, v98);
      v66 = v96;
      v186 = v101;
      if (v101)
        goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease(0);
  v99 = 0;
  v186 = 0xE000000000000000;
LABEL_29:
  v102 = v86;
  v103 = dispatch thunk of SportingEvent.localizedShortName.getter();

  v187 = v66;
  if (v103)
  {
    v204 = v70;
    if ((unint64_t)v103 >> 62)
    {
      if (v103 >= 0)
        v111 = v103 & 0xFFFFFFFFFFFFFF8;
      else
        v111 = v103;
      swift_bridgeObjectRetain(v103);
      v112 = _CocoaArrayWrapper.endIndex.getter(v111);
      swift_bridgeObjectRelease(v103);
      if (v112)
        goto LABEL_32;
    }
    else if (*(_QWORD *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_32:
      sub_10007DEC8(0, (v103 & 0xC000000000000001) == 0, v103);
      v104 = v181;
      if ((v103 & 0xC000000000000001) != 0)
        v105 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v103);
      else
        v105 = *(id *)(v103 + 32);
      v106 = v105;
      v107 = v99;
      v108 = swift_bridgeObjectRelease(v103);
      v103 = SportingEventLocalizedDisplayName.text.getter(v108);
      v110 = v109;

      goto LABEL_41;
    }
    v104 = v181;
    v107 = v99;
    swift_bridgeObjectRelease(v103);
    v103 = 0;
    v110 = 0xE000000000000000;
LABEL_41:
    v70 = v204;
    goto LABEL_42;
  }
  v104 = v181;
  v107 = v99;
  v110 = 0xE000000000000000;
LABEL_42:
  v113 = v190;
  swift_bridgeObjectRetain(v190);
  v114 = (uint64_t)v188;
  SportingEventSubscription.Metadata.init(eventStartDate:competitors:preGameTitle:shortTitle:eventURL:)(v196, v104, v107, v186, v103, v110, v189, v113);
  v115 = v211;
  sub_100038C8C(v211, &qword_1000D10A0);
  sub_10000964C(v114, 0, 1, v183);
  sub_100038CB4(v114, v115, &qword_1000D10A0);
  v116 = v102;
  v117 = (void *)dispatch thunk of SportingEvent.league.getter();

  if (v117)
  {
    swift_bridgeObjectRelease(v70);
    v118 = swift_bridgeObjectRelease(v203);
    v201 = SportingEventLeague.canonicalId.getter(v118);
    v203 = v119;
    v120 = (void *)SportingEventLeague.sport.getter();
    v121 = SportingEventSport.canonicalId.getter();
    v70 = v122;

    v69 = v121;
    (*(void (**)(char *, uint64_t))(v191 + 8))(v197, v195);
    v197 = v218;
    swift_bridgeObjectRetain(v218);
    v66 = v187;
    v58 = v182;
LABEL_46:
    swift_bridgeObjectRetain(v70);
    v123 = v192;
    v205 = v69;
    v204 = v70;
    v124 = Sport.init(rawValue:)(v69);
    v196 = (char *)Sport.rawValue.getter(v124);
    v195 = v125;
    (*(void (**)(char *, uint64_t))(v193 + 8))(v123, v194);
    goto LABEL_48;
  }
  (*(void (**)(char *, uint64_t))(v191 + 8))(v197, v195);
  v69 = v205;
  v66 = v187;
  v58 = v182;
LABEL_45:
  v197 = (char *)swift_bridgeObjectRetain(v218);
  if (v70)
    goto LABEL_46;
  v205 = v69;
  v196 = 0;
  v204 = 0;
  v195 = 0xE000000000000000;
LABEL_48:
  v126 = v212[31];
  v194 = v212[30];
  v127 = *(_QWORD *)v213;
  v129 = v212[19];
  v128 = v212[20];
  v193 = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRetain(v128);
  v130 = sub_10007562C(v129, v128, v127);
  v132 = v131;
  swift_bridgeObjectRelease(v128);
  swift_bridgeObjectRelease(v127);
  v133 = v58;
  if (v132)
  {
    URL.init(string:)(v130, v132);
    swift_bridgeObjectRelease(v132);
  }
  else
  {
    v134 = type metadata accessor for URL(0);
    sub_10000964C(v208, 1, 1, v134);
  }
  v135 = v198;
  v136 = *((_QWORD *)v213 + 1);
  if (v136)
  {
    v137 = v66;
    swift_bridgeObjectRetain(v128);
    swift_bridgeObjectRetain(v136);
    v138 = sub_10007562C(v129, v128, v136);
    v140 = v139;
    swift_bridgeObjectRelease(v128);
    swift_bridgeObjectRelease(v136);
    if (v140)
    {
      swift_bridgeObjectRetain(v140);
      URL.init(string:)(v138, v140);
      swift_bridgeObjectRelease_n(v140, 2);
    }
    else
    {
      v142 = type metadata accessor for URL(0);
      sub_10000964C(v209, 1, 1, v142);
    }
    v66 = v137;
  }
  else
  {
    v141 = type metadata accessor for URL(0);
    sub_10000964C(v209, 1, 1, v141);
  }
  v143 = *((_QWORD *)v213 + 2);
  if (v143
    && (swift_bridgeObjectRetain(v128),
        swift_bridgeObjectRetain(v143),
        v144 = sub_10007562C(v129, v128, v143),
        v146 = v145,
        swift_bridgeObjectRelease(v128),
        swift_bridgeObjectRelease(v143),
        v146))
  {
    swift_bridgeObjectRetain(v146);
    URL.init(string:)(v144, v146);
    swift_bridgeObjectRelease_n(v146, 2);
  }
  else
  {
    v147 = type metadata accessor for URL(0);
    sub_10000964C(v210, 1, 1, v147);
  }
  sub_100038730((uint64_t)v212, (uint64_t)v135, type metadata accessor for SubscriptionRegisterOperation);
  if (v133)
  {
    v192 = v133;
  }
  else
  {
    type metadata accessor for SportingEventFactory(0);
    v192 = (char *)static SportingEventFactory.unknown(canonicalId:)(*((_QWORD *)v135 + 19), *((_QWORD *)v135 + 20));
  }
  v198 = v133;
  sub_100038708((uint64_t)v135, type metadata accessor for SubscriptionRegisterOperation);
  v191 = *((_QWORD *)v213 + 7);
  LODWORD(v190) = v213[64];
  v189 = *((_QWORD *)v213 + 9);
  LODWORD(v188) = v213[80];
  v148 = v66[2];
  if (v148)
  {
    swift_bridgeObjectRetain(v66);
    v187 = v66;
    v149 = v66 + 7;
    v150 = _swiftEmptyArrayStorage;
    do
    {
      v151 = *(v149 - 3);
      v152 = *(v149 - 2);
      v153 = *(v149 - 1);
      v154 = *v149;
      swift_bridgeObjectRetain(*v149);
      swift_bridgeObjectRetain(v152);
      SportingEventRunningClockFeature.init(feature:value:)(v151, v152, v153, v154);
      if (sub_100009658((uint64_t)v8, 1, v9) == 1)
      {
        sub_100038C8C((uint64_t)v8, &qword_1000D1290);
      }
      else
      {
        v155 = *(void (**)(char *, char *, uint64_t))(v216 + 32);
        v156 = v214;
        v155(v214, v8, v9);
        v155(v215, v156, v9);
        if ((swift_isUniquelyReferenced_nonNull_native((char *)v150) & 1) == 0)
          v150 = (_QWORD *)sub_100013688(0, v150[2] + 1, 1, (uint64_t)v150);
        v158 = v150[2];
        v157 = v150[3];
        if (v158 >= v157 >> 1)
          v150 = (_QWORD *)sub_100013688(v157 > 1, v158 + 1, 1, (uint64_t)v150);
        v150[2] = v158 + 1;
        v155((char *)v150+ ((*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80))+ *(_QWORD *)(v216 + 72) * v158, v215, v9);
      }
      v149 += 4;
      --v148;
    }
    while (v148);
    v66 = v187;
    swift_bridgeObjectRelease(v187);
  }
  else
  {
    v150 = _swiftEmptyArrayStorage;
  }
  v159 = v218;
  swift_bridgeObjectRelease(v66);
  swift_bridgeObjectRelease(v159);
  v160 = (uint64_t)v213;
  v161 = *((_QWORD *)v213 + 11);
  v215 = (char *)*((_QWORD *)v213 + 12);
  v162 = v215;
  v216 = v161;
  v163 = v199;
  sub_100038C60(v211, v199, &qword_1000D10A0);
  v164 = v200;
  sub_100038C60(v160 + *(int *)(v202 + 44), v200, &qword_1000D1298);
  v165 = v212;
  v166 = v212[19];
  v167 = v212[20];
  swift_bridgeObjectRetain(v162);
  v168 = sub_100068690(v166, v167);
  LODWORD(v202) = (v168 == 2) | v168;
  v169 = v207;
  v170 = (_QWORD *)((char *)v165 + *(int *)(v207 + 80));
  v172 = *v170;
  v171 = v170[1];
  v173 = sub_1000685E4(*((_BYTE *)v165 + 256));
  v175 = v174;
  v176 = (_QWORD *)((char *)v165 + *(int *)(v169 + 84));
  v177 = *v176;
  v178 = v176[1];
  v214 = (char *)objc_allocWithZone((Class)type metadata accessor for SportingEventSubscription(0));
  swift_bridgeObjectRetain(v171);
  swift_bridgeObjectRetain(v178);
  v179 = SportingEventSubscription.init(consumers:sportId:sport:leagueId:leagueAbbreviation:eventStateURL:fullPayloadBaseURL:imageServiceBaseURL:sportingEventDetails:heartbeatTTLSeconds:heartbeatSessionsTTLSeconds:liveActivityTTLSeconds:clockFeatures:registrationId:metadata:view:shouldDisplayPlayByPlay:qosRegistrationId:applicationType:clientApp:)(v197, v205, v204, v196, v195, v201, v203, v194, v193, v208, v209, v210, v192, v191, (_BYTE)v190, v189, (_BYTE)v188, 0, 1,
           (char *)v150,
           v216,
           v215,
           v163,
           v164,
           v202 & 1,
           v172,
           v171,
           v173,
           v175,
           v177,
           v178);

  sub_100038C8C(v211, &qword_1000D10A0);
  sub_100038708(v160, _s20RegistrationResponseVMa);
  return v179;
}

void sub_100036BB4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18[5];
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for SubscriptionRegisterOperation(0);
  __chkstk_darwin(v5);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 != 15)
  {
    v18[3] = (uint64_t)&type metadata for TVAppFeatureFlags;
    v18[4] = sub_10000A278();
    sub_100019F6C(a1, a2);
    v8 = isFeatureEnabled(_:)(v18);
    sub_100007618(v18);
    if ((v8 & 1) != 0)
    {
      sub_10002A820(a1, a2, *(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 160), (*(unsigned __int8 *)(v2 + 256) < 6u) & (0x27u >> *(_BYTE *)(v2 + 256)));
      sub_1000388FC(a1, a2);
      return;
    }
    sub_1000388FC(a1, a2);
  }
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v9 = type metadata accessor for Logger(0);
  sub_1000096EC(v9, (uint64_t)qword_1000DDAB8);
  sub_100038730(v2, (uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v18[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = *((_QWORD *)v7 + 19);
    v16 = *((_QWORD *)v7 + 20);
    swift_bridgeObjectRetain(v16);
    sub_100014B44(v15, v16, v18);
    v19 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);
    sub_100038708((uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unexpected empty response from Tempo registration for canonicalId: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_100038708((uint64_t)v7, type metadata accessor for SubscriptionRegisterOperation);
  }

}

void sub_100036E38(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  ValueMetadata *v33;
  unint64_t v34;

  v4 = v3;
  v5 = v2;
  v33 = &type metadata for TVAppFeatureFlags;
  v8 = sub_10000A278();
  v34 = v8;
  v9 = isFeatureEnabled(_:)(&v31);
  sub_100007618(&v31);
  if ((v9 & 1) == 0)
  {
    dispatch thunk of PlaysStore.removePlays(forCanonicalId:)(*(_QWORD *)(v5 + 152), *(_QWORD *)(v5 + 160));
    if (v3)
    {
      swift_errorRelease(v3);
      v4 = 0;
    }
  }
  v10 = *(_QWORD **)(v5 + 40);
  v11 = (*(unsigned __int8 *)(v5 + 256) < 6u) & (0x27u >> *(_BYTE *)(v5 + 256));
  v12 = v10[5];
  v13 = v10[6];
  sub_1000073CC(v10 + 2, v12);
  dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(a1, v11, v12, v13);
  if (!v4)
  {
    v33 = &type metadata for TVAppFeatureFlags;
    v34 = v8;
    v14 = isFeatureEnabled(_:)(&v31);
    sub_100007618(&v31);
    if ((v14 & 1) == 0)
    {
      if (a2)
      {
        v15 = qword_1000CFAC0;
        v16 = a2;
        if (v15 != -1)
          swift_once(&qword_1000CFAC0, sub_10006CC88);
        v17 = type metadata accessor for Logger(0);
        sub_1000096EC(v17, (uint64_t)qword_1000DDAB8);
        v18 = v16;
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.debug.getter(v19);
        if (os_log_type_enabled(v19, v20))
        {
          v21 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v21 = 134217984;
          v22 = dispatch thunk of SportingEvent.plays.getter();
          v23 = v22;
          if ((unint64_t)v22 >> 62)
          {
            if (v22 >= 0)
              v22 &= 0xFFFFFFFFFFFFFF8uLL;
            v24 = _CocoaArrayWrapper.endIndex.getter(v22);
          }
          else
          {
            v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
          }

          swift_bridgeObjectRelease(v23);
          v31 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v21 + 4, v21 + 12);

          _os_log_impl((void *)&_mh_execute_header, v19, v20, "Tempo /register - found initial data, plays=%ld", v21, 0xCu);
          swift_slowDealloc(v21, -1, -1);
        }
        else
        {

          v19 = v18;
        }

        v30 = dispatch thunk of SportingEvent.plays.getter();
        dispatch thunk of PlaysStore.write(plays:forCanonicalId:)(v30, *(_QWORD *)(v5 + 152), *(_QWORD *)(v5 + 160));

        swift_bridgeObjectRelease(v30);
      }
      else
      {
        if (qword_1000CFAC0 != -1)
          swift_once(&qword_1000CFAC0, sub_10006CC88);
        v25 = type metadata accessor for Logger(0);
        v26 = sub_1000096EC(v25, (uint64_t)qword_1000DDAB8);
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.debug.getter(v27);
        if (os_log_type_enabled(v27, v28))
        {
          v29 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Tempo /register - initial data not found", v29, 2u);
          swift_slowDealloc(v29, -1, -1);
        }

      }
    }
  }
}

uint64_t sub_10003716C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100037184, 0, 0);
}

uint64_t sub_100037184()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  sub_1000073CC(v1 + 12, v1[15]);
  sub_100073868(v1[19], v1[20]);
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000371C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  _QWORD v13[3];
  _BYTE v14[8];
  uint64_t v15;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1000CFAB0 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v2 = type metadata accessor for Logger(0);
    sub_1000096EC(v2, (uint64_t)qword_1000DDA88);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v15 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_getErrorValue(a1, v14, v13);
      v7 = Error.localizedDescription.getter(v13[1], v13[2]);
      v9 = v8;
      sub_100014B44(v7, v8, &v15);
      v12 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease(v9);
      sub_100038D70();
      sub_100038D70();
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error connecting to watchlistd for suppression. %s", v5, 0xCu);
      swift_arrayDestroy(v6, 1);
      sub_10000A818(v6);
      sub_10000A818((uint64_t)v5);

      sub_100038D70();
    }
    else
    {
      sub_100038D70();
      sub_100038D70();
      sub_100038D70();

    }
  }
}

uint64_t sub_10003738C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D1240);
  return a2(a1, *(_QWORD *)(a1 + *(int *)(v4 + 48)), *(_QWORD *)(a1 + *(int *)(v4 + 64)), *(_QWORD *)(a1 + *(int *)(v4 + 64) + 8)) & 1;
}

uint64_t sub_1000373EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for SubscriptionRegisterOperation(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - v10;
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v12 = type metadata accessor for Logger(0);
  sub_1000096EC(v12, (uint64_t)qword_1000DDAB8);
  sub_100038730(a5, (uint64_t)v11, type metadata accessor for SubscriptionRegisterOperation);
  sub_100038730(a5, (uint64_t)v8, type metadata accessor for SubscriptionRegisterOperation);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v27 = v17;
    *(_DWORD *)v16 = 136315394;
    v18 = *((_QWORD *)v11 + 19);
    v19 = *((_QWORD *)v11 + 20);
    swift_bridgeObjectRetain(v19);
    sub_100014B44(v18, v19, &v27);
    v26 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v19);
    sub_100038708((uint64_t)v11, type metadata accessor for SubscriptionRegisterOperation);
    *(_WORD *)(v16 + 12) = 2080;
    v21 = sub_1000685E4(v8[256]);
    v23 = v22;
    sub_100014B44(v21, v22, &v27);
    v26 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v23);
    sub_100038708((uint64_t)v8, type metadata accessor for SubscriptionRegisterOperation);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Tempo /register success for %s - %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    sub_100038708((uint64_t)v11, type metadata accessor for SubscriptionRegisterOperation);
    sub_100038708((uint64_t)v8, type metadata accessor for SubscriptionRegisterOperation);
  }

  return 1;
}

uint64_t sub_10003766C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_10000738C(&qword_1000D1240);
  result = a2(a1, *(_QWORD *)(a1 + *(int *)(v6 + 48)), *(_QWORD *)(a1 + *(int *)(v6 + 64)), *(_QWORD *)(a1 + *(int *)(v6 + 64) + 8));
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000376CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_10000738C(&qword_1000D0F00);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  swift_errorRetain(v13);
  v8 = sub_10000738C((uint64_t *)&unk_1000D1690);
  Fail.init(error:)(&v13, &type metadata for Bool, v8, &protocol self-conformance witness table for Error);
  sub_10000A40C(&qword_1000D0F08, &qword_1000D0F00);
  v10 = Publisher.eraseToAnyPublisher()(v4, v9);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v10;
  return result;
}

uint64_t sub_1000377BC@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, uint64_t);
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t);
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;

  v4 = v3;
  v167 = a2;
  v178 = a3;
  v160 = type metadata accessor for SportingEventCompetitorQualifier(0);
  v166 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v150 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_10000738C(&qword_1000D12B0);
  __chkstk_darwin(v159);
  v8 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000738C(&qword_1000D12B8);
  __chkstk_darwin(v9);
  v153 = (uint64_t)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v163 = (char *)&v144 - v12;
  __chkstk_darwin(v13);
  v164 = (uint64_t)&v144 - v14;
  v15 = sub_10000738C(&qword_1000D12C0);
  __chkstk_darwin(v15);
  v156 = (char *)&v144 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0);
  v158 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v152 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v151 = (char *)&v144 - v19;
  v169 = type metadata accessor for LogoDownloadResult(0);
  v154 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v174 = (uint64_t *)((char *)&v144 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = sub_10000738C(&qword_1000D12C8);
  __chkstk_darwin(v21);
  v161 = (uint64_t)&v144 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v157 = (uint64_t)&v144 - v24;
  __chkstk_darwin(v25);
  v155 = (char *)&v144 - v26;
  v28 = __chkstk_darwin(v27);
  v168 = (uint64_t)&v144 - v29;
  v30 = type metadata accessor for SportingEventMetadataType(0, v28);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v183 = (char *)&v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v35 = (char *)&v144 - v34;
  v36 = *a1;
  v38 = (void *)SportingEventCompetitorContainer.competitor.getter(v37);
  v162 = dispatch thunk of SportingEventCompetitor.abbreviation.getter();
  v40 = v39;

  if (!v40)
    goto LABEL_65;
  v175 = v40;
  v42 = (void *)SportingEventCompetitorContainer.competitor.getter(v41);
  v43 = dispatch thunk of SportingEventCompetitor.localizedDisplayName.getter();

  if (!v43)
    goto LABEL_23;
  v44 = v43 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v43 >> 62)
  {
LABEL_59:
    if (v43 >= 0)
      v139 = v44;
    else
      v139 = v43;
    swift_bridgeObjectRetain(v43);
    v140 = _CocoaArrayWrapper.endIndex.getter(v139);
    swift_bridgeObjectRelease(v43);
    if (v140)
      goto LABEL_5;
LABEL_63:
    swift_bridgeObjectRelease(v175);
    v65 = v43;
    goto LABEL_64;
  }
  if (!*(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_63;
LABEL_5:
  sub_10007DEC8(0, (v43 & 0xC000000000000001) == 0, v43);
  if ((v43 & 0xC000000000000001) != 0)
    v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
  else
    v45 = *(id *)(v43 + 32);
  v46 = v45;
  v47 = swift_bridgeObjectRelease(v43);
  v146 = SportingEventLocalizedDisplayName.text.getter(v47);
  v49 = v48;

  v51 = (void *)SportingEventCompetitorContainer.competitor.getter(v50);
  v52 = dispatch thunk of SportingEventCompetitor.metadata.getter();

  if (!v52)
  {
    swift_bridgeObjectRelease(v49);
LABEL_23:
    v65 = v175;
LABEL_64:
    swift_bridgeObjectRelease(v65);
LABEL_65:
    v138 = 1;
    goto LABEL_66;
  }
  v147 = v49;
  v148 = v4;
  v53 = v175;
  if (!((unint64_t)v52 >> 62))
  {
    v54 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v52);
    if (v54)
      goto LABEL_10;
LABEL_72:
    swift_bridgeObjectRelease(v147);
    v64 = v53;
LABEL_73:
    swift_bridgeObjectRelease(v64);
    swift_bridgeObjectRelease_n(v52, 2);
    v138 = 1;
    goto LABEL_66;
  }
  if (v52 >= 0)
    v143 = v52 & 0xFFFFFFFFFFFFFF8;
  else
    v143 = v52;
  swift_bridgeObjectRetain(v52);
  v54 = _CocoaArrayWrapper.endIndex.getter(v143);
  if (!v54)
    goto LABEL_72;
LABEL_10:
  v149 = v36;
  v145 = v8;
  v173 = v52 & 0xC000000000000001;
  LODWORD(v171) = enum case for SportingEventMetadataType.backgroundColor(_:);
  v4 = 4;
  v172 = v52;
  v170 = v54;
  while (1)
  {
    if (v173)
      v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v52);
    else
      v55 = *(id *)(v52 + 8 * v4);
    v36 = v55;
    v8 = v183;
    v43 = v4 - 3;
    if (__OFADD__(v4 - 4, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    SportingEventMetadata.metadataType.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v8, v171, v30);
    sub_10000A378(&qword_1000D12D0, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventMetadataType);
    v56 = v31;
    v58 = v57;
    dispatch thunk of RawRepresentable.rawValue.getter(v30, v57);
    dispatch thunk of RawRepresentable.rawValue.getter(v30, v58);
    v59 = v182;
    v60 = v180;
    if (v181 == v179 && v182 == v180)
      break;
    v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v181, v182, v179, v180, 0);
    v177 = v36;
    LODWORD(v176) = v62;
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v60);
    v63 = *(void (**)(char *, uint64_t))(v56 + 8);
    v63(v8, v30);
    v36 = v177;
    v63(v35, v30);
    if ((v176 & 1) != 0)
      goto LABEL_25;
    v31 = v56;

    ++v4;
    v52 = v172;
    if (v43 == v170)
    {
      swift_bridgeObjectRelease(v147);
      v64 = v175;
      goto LABEL_73;
    }
  }
  swift_bridgeObjectRelease_n(v182, 2);
  v66 = *(void (**)(char *, uint64_t))(v56 + 8);
  v66(v8, v30);
  v66(v35, v30);
LABEL_25:
  v67 = swift_bridgeObjectRelease_n(v172, 2);
  v68 = SportingEventMetadata.value.getter(v67);
  v70 = v69;

  v71 = dispatch thunk of SportingEventCompetitorContainer.ordinal.getter();
  if ((v72 & 1) != 0)
  {
    swift_bridgeObjectRelease(v175);
    swift_bridgeObjectRelease(v147);
    v65 = v70;
    goto LABEL_64;
  }
  v173 = v70;
  v73 = *(_QWORD *)(v167 + 16);
  v183 = (char *)v68;
  v177 = (void *)v71;
  if (v73)
  {
    v74 = v167 + ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80));
    v75 = *(_QWORD *)(v154 + 72);
    swift_bridgeObjectRetain(v167);
    v76 = v174;
    while (1)
    {
      sub_100038730(v74, (uint64_t)v76, type metadata accessor for LogoDownloadResult);
      v78 = *v76;
      v77 = v76[1];
      v80 = (void *)SportingEventCompetitorContainer.competitor.getter(v79);
      v81 = SportingEventCompetitor.canonicalId.getter();
      v83 = v82;

      if (v78 == v81 && v77 == v83)
      {
        swift_bridgeObjectRelease(v167);
        goto LABEL_40;
      }
      v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v77, v81, v83, 0);
      swift_bridgeObjectRelease(v83);
      if ((v85 & 1) != 0)
        break;
      v76 = v174;
      sub_100038708((uint64_t)v174, type metadata accessor for LogoDownloadResult);
      v74 += v75;
      if (!--v73)
      {
        swift_bridgeObjectRelease(v167);
        v86 = 1;
        goto LABEL_37;
      }
    }
    v77 = v167;
LABEL_40:
    v87 = (uint64_t)v145;
    v88 = (uint64_t)v156;
    v90 = (uint64_t)v155;
    swift_bridgeObjectRelease(v77);
    v89 = v168;
    sub_100038910((uint64_t)v174, v168, type metadata accessor for LogoDownloadResult);
    v86 = 0;
  }
  else
  {
    v86 = 1;
LABEL_37:
    v87 = (uint64_t)v145;
    v88 = (uint64_t)v156;
    v89 = v168;
    v90 = (uint64_t)v155;
  }
  v91 = v169;
  v92 = sub_10000964C(v89, v86, 1, v169);
  v93 = (void *)SportingEventCompetitorContainer.competitor.getter(v92);
  v94 = SportingEventCompetitor.canonicalId.getter();
  v96 = v95;

  sub_100038C60(v89, v90, &qword_1000D12C8);
  v97 = sub_100009658(v90, 1, v91);
  v176 = v94;
  v174 = (uint64_t *)v96;
  if (v97 == 1)
  {
    sub_100038C8C(v90, &qword_1000D12C8);
    v98 = 0;
    v172 = 0xE000000000000000;
  }
  else
  {
    v98 = *(_QWORD *)(v90 + 16);
    v172 = *(_QWORD *)(v90 + 24);
    swift_bridgeObjectRetain(v172);
    sub_100038708(v90, type metadata accessor for LogoDownloadResult);
  }
  v99 = v157;
  sub_100038C60(v89, v157, &qword_1000D12C8);
  v100 = v169;
  if (sub_100009658(v99, 1, v169) == 1)
  {
    sub_100038C8C(v99, &qword_1000D12C8);
    v170 = 0xE000000000000000;
    v171 = 0;
    v102 = v164;
    v101 = v165;
  }
  else
  {
    v103 = v99 + *(int *)(v100 + 24);
    v104 = v158;
    v105 = v98;
    v106 = v87;
    v107 = v88;
    v108 = v99;
    v109 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v151, v103, v165);
    v110 = v108;
    v88 = v107;
    v87 = v106;
    v98 = v105;
    sub_100038708(v110, type metadata accessor for LogoDownloadResult);
    v111 = SportingEventSubscription.Competitor.LogoFilePaths.defaultSize.getter();
    v170 = v112;
    v171 = v111;
    v113 = v109;
    v101 = v165;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v113, v165);
    v102 = v164;
  }
  v114 = v89;
  v115 = v161;
  sub_100038C60(v114, v161, &qword_1000D12C8);
  if (sub_100009658(v115, 1, v100) == 1)
  {
    sub_100038C8C(v115, &qword_1000D12C8);
    SportingEventSubscription.Competitor.LogoFilePaths.init(smallSize:defaultSize:)(0, 0, 0, 0xE000000000000000);
  }
  else
  {
    v116 = v115 + *(int *)(v100 + 24);
    v117 = v115;
    v118 = v158;
    v119 = v152;
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v152, v116, v101);
    sub_100038708(v117, type metadata accessor for LogoDownloadResult);
    (*(void (**)(uint64_t, char *, uint64_t))(v118 + 32))(v88, v119, v101);
  }
  v120 = v159;
  v121 = v160;
  v122 = sub_10000964C(v88, 0, 1, v101);
  v123 = (void *)SportingEventCompetitorContainer.competitor.getter(v122);
  dispatch thunk of SportingEventCompetitor.qualifier.getter();

  v124 = (uint64_t)v163;
  (*(void (**)(char *, _QWORD, uint64_t))(v166 + 104))(v163, enum case for SportingEventCompetitorQualifier.home(_:), v121);
  sub_10000964C(v124, 0, 1, v121);
  v125 = v87 + *(int *)(v120 + 48);
  v126 = &qword_1000D12B8;
  sub_100038C60(v102, v87, &qword_1000D12B8);
  sub_100038C60(v124, v125, &qword_1000D12B8);
  if (sub_100009658(v87, 1, v121) == 1)
  {
    sub_100038C8C(v124, &qword_1000D12B8);
    sub_100038C8C(v102, &qword_1000D12B8);
    if (sub_100009658(v125, 1, v121) == 1)
    {
      v127 = -1;
    }
    else
    {
      v126 = &qword_1000D12B0;
      v127 = 0;
    }
  }
  else
  {
    v128 = v153;
    sub_100038C60(v87, v153, &qword_1000D12B8);
    if (sub_100009658(v125, 1, v121) == 1)
    {
      sub_100038C8C(v124, &qword_1000D12B8);
      sub_100038C8C(v102, &qword_1000D12B8);
      (*(void (**)(uint64_t, uint64_t))(v166 + 8))(v128, v121);
      v127 = 0;
      v126 = &qword_1000D12B0;
    }
    else
    {
      v129 = v166;
      v130 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 32);
      v169 = v98;
      v131 = v124;
      v132 = v150;
      v130(v150, v125, v121);
      sub_10000A378(&qword_1000D12D8, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventCompetitorQualifier);
      v133 = v128;
      v127 = dispatch thunk of static Equatable.== infix(_:_:)(v128, v132, v121, v134);
      v135 = *(void (**)(char *, uint64_t))(v129 + 8);
      v135(v132, v121);
      v126 = &qword_1000D12B8;
      v136 = v131;
      v98 = v169;
      sub_100038C8C(v136, &qword_1000D12B8);
      sub_100038C8C(v164, &qword_1000D12B8);
      v135((char *)v133, v121);
    }
  }
  v137 = v173;
  sub_100038C8C(v87, v126);
  SportingEventSubscription.Competitor.init(canonicalId:abbreviation:name:teamLogoUrl:localLogoUrl:logoFilePaths:teamColorHex:isHome:ordinal:)(v176, v174, v162, v175, v146, v147, v98, v172, v171, v170, v88, v183, v137, v127 & 1, v177);
  sub_100038C8C(v168, &qword_1000D12C8);
  v138 = 0;
LABEL_66:
  v141 = type metadata accessor for SportingEventSubscription.Competitor(0);
  return sub_10000964C(v178, v138, 1, v141);
}

uint64_t sub_1000384E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t *)sub_100038D2C(a1);
  return sub_1000343A4(v1, v2, v3);
}

uint64_t sub_100038508()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for SubscriptionRegisterOperation(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  sub_100038E00();
  swift_release(v1[6]);
  sub_100038DC0();
  swift_bridgeObjectRelease(v1[20]);
  swift_bridgeObjectRelease(v1[22]);
  swift_bridgeObjectRelease(v1[24]);
  swift_bridgeObjectRelease(v1[26]);
  swift_bridgeObjectRelease(v1[28]);
  swift_bridgeObjectRelease(v1[31]);
  if (!sub_100038D78())
  {
    v7 = type metadata accessor for SportingEventSubscription.Metadata(0);
    if (!sub_100038D0C(v2))
      sub_100038D24(v2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8));
  }
  sub_100038D18(*(int *)(v3 + 80));
  sub_100038D18(*(int *)(v3 + 84));
  return sub_10000A714(v0, ((v5 + 16) & ~v5) + v6, v5 | 7);
}

uint64_t sub_1000385DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = sub_100038D2C(a1);
  return sub_100034A54(v1, v2, v3);
}

uint64_t sub_100038604(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  type metadata accessor for SubscriptionRegisterOperation(0);
  sub_100038DE0();
  return sub_1000355FC(a1, a2, a3, a4, v8) & 1;
}

uint64_t sub_100038668()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003868C(uint64_t a1)
{
  uint64_t v1;

  return sub_10003738C(a1, *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v1 + 16)) & 1;
}

uint64_t sub_1000386AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  type metadata accessor for SubscriptionRegisterOperation(0);
  sub_100038DE0();
  return sub_1000373EC(a1, a2, a3, a4, v8);
}

uint64_t sub_100038700@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_10003766C(a1, *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

void sub_100038708(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_100022EEC(v2);
  sub_100006200();
}

void sub_100038730(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100038DA0(a1, a2, a3);
  sub_100038D64(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100006200();
}

uint64_t sub_10003875C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for SubscriptionRegisterOperation(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100038E00();
  swift_release(v1[6]);
  sub_100038DC0();
  swift_bridgeObjectRelease(v1[20]);
  swift_bridgeObjectRelease(v1[22]);
  swift_bridgeObjectRelease(v1[24]);
  swift_bridgeObjectRelease(v1[26]);
  swift_bridgeObjectRelease(v1[28]);
  swift_bridgeObjectRelease(v1[31]);
  if (!sub_100038D78())
  {
    v7 = type metadata accessor for SportingEventSubscription.Metadata(0);
    if (!sub_100038D0C(v2))
      sub_100038D24(v2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8));
  }
  sub_100038D18(*(int *)(v3 + 80));
  sub_100038D18(*(int *)(v3 + 84));
  return sub_10000A714(v0, ((v5 + 32) & ~v5) + v6, v5 | 7);
}

uint64_t sub_100038838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SubscriptionRegisterOperation(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000D1284);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000388BC;
  return sub_10003716C(a1, v5, v6, v7);
}

uint64_t sub_1000388BC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return sub_1000184C4(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000388FC(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000096A0(result, a2);
  return result;
}

void sub_100038910(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_100038DA0(a1, a2, a3);
  sub_100038D64(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100006200();
}

void sub_10003893C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1000350C0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_100038958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100081130(a1, a2, a3, a4, *(void (**)(void))(v4 + 16));
}

uint64_t sub_100038960()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v1 = (int *)sub_10000738C(&qword_1000CFE40);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = (int *)type metadata accessor for ApiRequestMetrics(0);
  if (!sub_100009658(v0 + v4, 1, (uint64_t)v7))
  {
    v8 = type metadata accessor for Date(0);
    if (!sub_100038D0C(v0 + v4))
      sub_100038D24(v0 + v4, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8));
    if (!sub_100038CE4(v7[5]))
      sub_100038CF8();
    if (!sub_100038CE4(v7[8]))
      sub_100038CF8();
    if (!sub_100038CE4(v7[9]))
      sub_100038CF8();
    if (!sub_100038CE4(v7[10]))
      sub_100038CF8();
    sub_100038D18(v7[12]);
    if (!sub_100038CE4(v7[13]))
      sub_100038CF8();
    v9 = v6 + v7[14];
    v10 = type metadata accessor for URL(0);
    if (!sub_100009658(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    if (!sub_100038CE4(v7[15]))
      sub_100038CF8();
    if (!sub_100038CE4(v7[16]))
      sub_100038CF8();
    if (!sub_100038CE4(v7[17]))
      sub_100038CF8();
    sub_100038D18(v7[19]);
    sub_100038D18(v7[20]);
    sub_100038D18(v7[21]);
    sub_100038D18(v7[22]);
    sub_100038D18(v7[23]);
  }
  v11 = v6 + v1[7];
  v12 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);

  v13 = (uint64_t *)(v6 + v1[9]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_1000096A0(*v13, v14);
  v15 = (_QWORD *)(v6 + v1[10]);
  swift_bridgeObjectRelease(*v15);
  swift_bridgeObjectRelease(v15[1]);
  swift_bridgeObjectRelease(v15[2]);
  swift_bridgeObjectRelease(v15[3]);
  swift_bridgeObjectRelease(v15[4]);
  swift_bridgeObjectRelease(v15[5]);
  swift_bridgeObjectRelease(v15[6]);
  swift_bridgeObjectRelease(v15[12]);
  v16 = (uint64_t)v15 + *(int *)(_s20RegistrationResponseVMa(0) + 44);
  v17 = type metadata accessor for SportingEventViewContext(0);
  if (!sub_100009658(v16, 1, v17))
    sub_100038DF8(v16, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8));
  v18 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = v18 + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v18 + 8));
  return swift_deallocObject(v0, v19, v3 | 7);
}

uint64_t sub_100038BF8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(sub_10000738C(&qword_1000CFE40) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100035578(a1, v2 + v6, *v7, v7[1], a2);
}

void sub_100038C60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100038DB0(a1, a2, a3);
  sub_100038D64(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100006200();
}

void sub_100038C8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_10000738C(a2);
  sub_100022EEC(v2);
  sub_100006200();
}

void sub_100038CB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100038DB0(a1, a2, a3);
  sub_100038D64(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100006200();
}

uint64_t sub_100038CE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100009658(v1 + a1, 1, v2);
}

uint64_t sub_100038CF8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t sub_100038D0C(uint64_t a1)
{
  uint64_t v1;

  return sub_100009658(a1, 1, v1);
}

uint64_t sub_100038D18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_bridgeObjectRelease(*(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_100038D24@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100038D2C(uint64_t a1)
{
  type metadata accessor for SubscriptionRegisterOperation(0);
  return a1;
}

uint64_t sub_100038D64@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100038D70()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_100038D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(v0 + 72);
  v3 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
  return sub_100009658(v2, 1, v3);
}

uint64_t sub_100038DA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_100038DB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000738C(a3);
}

uint64_t sub_100038DC0()
{
  _QWORD *v0;

  sub_100007618(v0 + 7);
  sub_100007618(v0 + 12);
  return swift_bridgeObjectRelease(v0[18]);
}

uint64_t sub_100038DF8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_100038E00()
{
  uint64_t v0;
  uint64_t v1;

  sub_100007618((_QWORD *)(v0 + v1));
  return swift_release(*(_QWORD *)(v0 + v1 + 40));
}

uint64_t sub_100038E1C(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_100038E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v8 = sub_10000738C(&qword_1000D1478);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v24 - v13;
  *(_QWORD *)(v4 + 24) = &_swiftEmptySetSingleton;
  if (qword_1000CFA78 != -1)
    swift_once(&qword_1000CFA78, sub_10002FF38);
  v15 = qword_1000DDA50;
  v25 = qword_1000DDA50;
  v16 = swift_allocObject(&unk_1000C4F20, 24, 7);
  *(_QWORD *)(v16 + 16) = a1;
  swift_retain(v15);
  v17 = sub_10000738C(&qword_1000D1450);
  sub_100031668(&qword_1000D1458, &qword_1000D1450, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_10003B968, v16, v17, v18);
  swift_release(v16);
  swift_release(v25);
  v19 = swift_allocObject(&unk_1000C4F48, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  Publishers.Filter.filter(_:)(sub_10003B994, v19, v8);
  swift_release(v19);
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  sub_100031668(&qword_1000D1480, &qword_1000D1478, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v22 = Publisher.eraseToAnyPublisher()(v8, v21);
  v20(v14, v8);
  *(_QWORD *)(v4 + 16) = v22;
  return v4;
}

void sub_100039024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority(0);
  sub_10000964C((uint64_t)v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject(&unk_1000C4ED0, 56, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain(v2);
  swift_retain(a2);
  v10 = sub_10003A288((uint64_t)v7, (uint64_t)&unk_1000D1430, (uint64_t)v9);
  swift_release(v10);
  sub_10000A47C((uint64_t)v7, &qword_1000D0578);
}

uint64_t sub_100039108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6[24] = a5;
  v6[25] = a6;
  v6[23] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[27] = v8;
  v6[28] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000738C(&qword_1000D13F8);
  v6[29] = v9;
  v6[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v6[31] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[32] = v11;
  v6[33] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000738C(&qword_1000CFDC8);
  v6[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000738C(&qword_1000D1440);
  v6[35] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[36] = v14;
  v6[37] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000738C(&qword_1000D1448);
  v6[38] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v6[39] = v16;
  v6[40] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100039264, 0, 0);
}

uint64_t sub_100039264()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v0[36];
  v1 = v0[37];
  v3 = v0[35];
  v0[16] = *(_QWORD *)(v0[23] + 16);
  v4 = sub_10000738C(&qword_1000D1450);
  sub_100031668(&qword_1000D1458, &qword_1000D1450, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.values.getter(v4, v5);
  AsyncPublisher.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100031668(&qword_1000D1460, &qword_1000D1448, (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  v7 = v6;
  v0[41] = v6;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[42] = v8;
  *v8 = v0;
  v8[1] = sub_100039398;
  v9 = sub_10003B9E4();
  return dispatch thunk of AsyncIteratorProtocol.next()(v9, v10, v7);
}

uint64_t sub_100039398()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10003BA58();
  sub_10003B9D0(*(_QWORD *)(v0 + 336), v2);
  if (v1)
  {
    *(_QWORD *)(v0 + 368) = v1;
  }
  else
  {
    *(_DWORD *)(v0 + 416) = enum case for JSONDecoder.DateDecodingStrategy.millisecondsSince1970(_:);
    *(_QWORD *)(v0 + 344) = 0;
  }
  sub_100018E50();
  return sub_1000184D0();
}

uint64_t sub_100039440()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 352) = *(_QWORD *)(v0 + 168);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_10003949C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  Class isa;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, _QWORD);
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82[3];

  v1 = *(void **)(v0 + 352);
  if (!v1)
  {
    v22 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 224);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    sub_1000189B0();
    sub_100018E2C();
    sub_100018C28();
    sub_10003BA38();
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    sub_10003BA0C();
    __asm { BR              X0 }
  }
  v2 = os_transaction_create("com.apple.sportsd.aps.cloudchannel");
  *(_QWORD *)(v0 + 360) = v2;
  v3 = objc_msgSend(v1, "channelID");
  v4 = (_QWORD *)&objc_retain_x21;
  if (v3)
  {
    v5 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    v8 = objc_msgSend(v1, "userInfo");
    if (v8)
    {
      v9 = v8;
      v78 = v7;
      v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v11 = (void *)objc_opt_self(NSJSONSerialization);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v10);
      *(_QWORD *)(v0 + 112) = 0;
      v13 = objc_msgSend(v11, "dataWithJSONObject:options:error:", isa, 0, v0 + 112);

      v14 = *(id *)(v0 + 112);
      if (v13)
      {
        v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v17 = v16;

        *(_QWORD *)(v0 + 376) = v15;
        *(_QWORD *)(v0 + 384) = v17;
        if (qword_1000CFAE0 != -1)
          swift_once(&qword_1000CFAE0, sub_10006CD0C);
        sub_1000096EC(*(_QWORD *)(v0 + 208), (uint64_t)qword_1000DDB18);
        sub_10003BA4C();
        v18 = sub_10003BA4C();
        v19 = Logger.logObject.getter(v18);
        v20 = static os_log_type_t.debug.getter(v19);
        v80 = v17;
        v81 = v2;
        v70 = v17 >> 62;
        v76 = v15;
        if (os_log_type_enabled(v19, v20))
        {
          v21 = (_DWORD *)sub_100018554(12);
          *(_QWORD *)(v0 + 152) = sub_100018554(32);
          *v21 = 136315138;
          __asm { BR              X10 }
        }
        sub_10003BA40();
        sub_10003BA40();

        v75 = *(_QWORD *)(v0 + 344);
        v73 = *(_DWORD *)(v0 + 416);
        v52 = *(_QWORD *)(v0 + 264);
        v53 = *(_QWORD *)(v0 + 272);
        v71 = *(_QWORD *)(v0 + 256);
        v72 = *(_QWORD *)(v0 + 248);
        v54 = *(_QWORD *)(v0 + 232);
        v55 = type metadata accessor for JSONDecoder(0);
        sub_10000A85C(v55);
        v56 = JSONDecoder.init()();
        *(_QWORD *)(v0 + 392) = v56;
        static SportsJSONContext.Property<A>.initFailureObserver.getter();
        v57 = type metadata accessor for DefaultSportsJSONInitFailureObserver(0);
        sub_10000A85C(v57);
        v58 = DefaultSportsJSONInitFailureObserver.init()();
        *(_QWORD *)(v0 + 40) = v57;
        *(_QWORD *)(v0 + 48) = &protocol witness table for DefaultSportsJSONInitFailureObserver;
        *(_QWORD *)(v0 + 16) = v58;
        v59 = (void (*)(uint64_t, _QWORD))dispatch thunk of JSONDecoder.userInfo.modify(v0 + 56);
        v60 = sub_10000738C(&qword_1000CFDD8);
        Dictionary<>.subscript.setter(v0 + 16, v53, v60);
        v59(v0 + 56, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v71 + 104))(v52, v73, v72);
        dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v52);
        sub_100031668(&qword_1000D1468, &qword_1000D13F8, (uint64_t)&unk_1000A0120);
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(v54, v15, v80, v54);
        if (!v75)
          __asm { BR              X11 }
        swift_release(v56);
        swift_bridgeObjectRelease(v78);
        swift_errorRetain(v75);
        v61 = swift_errorRetain(v75);
        v62 = Logger.logObject.getter(v61);
        v63 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)sub_100018554(12);
          v65 = sub_100018554(32);
          v82[0] = v65;
          *(_DWORD *)v64 = 136315138;
          swift_getErrorValue(v75, v0 + 176, v0 + 88);
          v66 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
          v68 = v67;
          sub_100014B44(v66, v67, v82);
          *(_QWORD *)(v0 + 144) = v69;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v64 + 4, v64 + 12);
          swift_bridgeObjectRelease(v68);
          sub_10002ABB8();
          sub_10002ABB8();
          sub_100018948((void *)&_mh_execute_header, v62, v63, "CloudChannelMessageProcessor - Encountered error while decoding expected type, error=%s", v64);
          sub_100018940(v65);
          sub_10000A818(v65);
          sub_10000A818((uint64_t)v64);

          sub_10002ABB8();
          sub_10003B9F4(v76);

        }
        else
        {

          sub_10003B9F4(v15);
          sub_10002ABB8();
          sub_10002ABB8();
          sub_10002ABB8();

        }
        goto LABEL_17;
      }
      v25 = v14;
      swift_bridgeObjectRelease(v78);
      v26 = _convertNSErrorToError(_:)(v25);

      swift_willThrow(v27);
      swift_errorRelease(v26);
      v4 = &objc_retain_x21;
    }
    else
    {
      swift_bridgeObjectRelease(v7);
    }
  }
  if (qword_1000CFAE0 != -1)
    swift_once(&qword_1000CFAE0, sub_10006CD0C);
  v29 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 224);
  v30 = *(_QWORD *)(v0 + 208);
  v31 = sub_1000096EC(v30, (uint64_t)qword_1000DDB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v31, v30);
  v32 = v1;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter(v33);
  if (!os_log_type_enabled(v33, v34))
  {
    v45 = *(_QWORD *)(v0 + 216);
    v44 = *(_QWORD *)(v0 + 224);
    v46 = *(_QWORD *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    v43 = v2;
    goto LABEL_19;
  }
  v81 = v2;
  v35 = sub_100018554(12);
  v36 = sub_100018554(32);
  *(_QWORD *)(v0 + 120) = v36;
  *(_DWORD *)v35 = v4[437];
  sub_100017DE4(v32);
  if (!v37)
  {

    __break(1u);
    JUMPOUT(0x10003A00CLL);
  }
  v38 = v37;
  v74 = *(_QWORD *)(v0 + 216);
  v77 = *(_QWORD *)(v0 + 208);
  v79 = *(_QWORD *)(v0 + 224);
  v39 = Dictionary.description.getter(v37, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v41 = v40;
  swift_bridgeObjectRelease(v38);
  sub_100014B44(v39, v41, (uint64_t *)(v0 + 120));
  *(_QWORD *)(v35 + 4) = v42;
  swift_bridgeObjectRelease(v41);

  sub_100018948((void *)&_mh_execute_header, v33, v34, "CloudChannelMessageProcessor - Failed to decode payload body %s", (uint8_t *)v35);
  swift_arrayDestroy(v36, 1);
  sub_10000A818(v36);
  sub_10000A818(v35);

  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v79, v77);
LABEL_17:
  v43 = v81;
LABEL_19:
  swift_unknownObjectRelease(v43);
  v47 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 408) = v47;
  *v47 = v0;
  v47[1] = sub_10003A1F0;
  sub_10003B9E4();
  sub_10003BA0C();
  return dispatch thunk of AsyncIteratorProtocol.next()(v48, v49, v50);
}

uint64_t sub_10003A02C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 368);
  v1 = sub_10000738C((uint64_t *)&unk_1000D1690);
  v2 = swift_dynamicCast(v1, v0 + 136, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_10003A0B8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  sub_10003B9D0(*(_QWORD *)(v2 + 400), &v2);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_10003A128()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 240);

  sub_1000096A0(v2, v1);
  sub_1000188AC();
  sub_10000A47C(v4, &qword_1000D13F8);
  swift_unknownObjectRelease(v3);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 408) = v5;
  *v5 = v0;
  v5[1] = sub_10003A1F0;
  v6 = sub_10003B9E4();
  return dispatch thunk of AsyncIteratorProtocol.next()(v6, v7, v8);
}

uint64_t sub_10003A1F0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  sub_10003BA58();
  sub_10003B9D0(v0[51], v2);
  if (v1)
    v0[46] = v1;
  else
    v0[43] = 0;
  sub_100018E50();
  return sub_1000184D0();
}

uint64_t sub_10003A288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v15[4];

  v5 = sub_10003B5EC(a1, 0, 0, 0, 1, 0, 0);
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v6);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v7);
    v11 = v10;
    swift_unknownObjectRelease(v6);
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = swift_allocObject(&unk_1000C4EF8, 32, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  if (v11 | v9)
  {
    v15[0] = 0;
    v15[1] = 0;
    v13 = v15;
    v15[2] = v9;
    v15[3] = v11;
  }
  else
  {
    v13 = 0;
  }
  return swift_task_create(v5, v13, (char *)&type metadata for () + 8, &unk_1000D1438, v12);
}

_QWORD *sub_10003A388()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  v2 = *v0;
  v3 = sub_10000738C(&qword_1000D1410);
  swift_allocObject(v3, 32, 7);
  sub_100018E50();
  v7 = sub_100038E28(v4, v5, v6);
  v1[2] = v7;
  v8 = swift_allocObject(&unk_1000C4EA8, 24, 7);
  *(_QWORD *)(v8 + 16) = v2;
  swift_retain(v7);
  sub_100039024((uint64_t)&unk_1000D1420, v8);
  sub_1000188AC();
  swift_release(v8);
  return v1;
}

uint64_t sub_10003A428(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[8] = a1;
  v2[9] = a2;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10000738C(&qword_1000D0478) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v3);
  v2[11] = swift_task_alloc(v3);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10000738C(&qword_1000D13F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v4);
  v2[13] = swift_task_alloc(v4);
  v5 = type metadata accessor for Date(0);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[15] = v6;
  v2[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003A4F0, 0, 0);
}

uint64_t sub_10003A4F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1[15];
  v2 = v1[16];
  v4 = v1[14];
  v5 = (_QWORD *)v1[8];
  Date.init()(a1);
  sub_100080BA0();
  v1[17] = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v1[18] = *v5;
  v7 = type metadata accessor for ScoreboardSubscriptionManager(0);
  v1[19] = static ScoreboardSubscriptionManager.shared.getter();
  v8 = sub_10003B904();
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, v8);
  return swift_task_switch(sub_10003A594, v9, v10);
}

uint64_t sub_10003A594()
{
  _QWORD *v0;

  dispatch thunk of ScoreboardSubscriptionManager.insert(_:)(v0[18]);
  v0[20] = 0;
  swift_release(v0[19]);
  sub_100018E50();
  return sub_1000184D0();
}

uint64_t sub_10003A5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  sub_100009D5C(*(_QWORD *)(v0 + 64), v2, &qword_1000D13F8);
  v4 = sub_10000738C(&qword_1000D13F8);
  sub_10000964C(v2, 0, 1, v4);
  v5 = type metadata accessor for CloudChannelError(0);
  sub_10003B9D8(v3, v6, v7, v5);
  sub_10003A93C(v1, v2, v3);
  sub_10000A47C(v3, &qword_1000D0478);
  sub_10000A47C(v2, &qword_1000D13F0);
  sub_10003B9FC();
  sub_1000189B0();
  sub_100018E2C();
  sub_100018C28();
  sub_10003BA38();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A6BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 152));
  v5 = sub_10000738C(&qword_1000D13F8);
  sub_10003B9D8(v3, v6, v7, v5);
  *(_QWORD *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  v8 = sub_10000738C((uint64_t *)&unk_1000D1690);
  v9 = type metadata accessor for CloudChannelError(0);
  v10 = swift_dynamicCast(v4, v0 + 40, v8, v9, 6);
  sub_10000964C(v4, v10 ^ 1u, 1, v9);
  sub_10003A93C(v2, v3, v4);
  sub_10000A47C(v3, &qword_1000D13F0);
  sub_10000A47C(v4, &qword_1000D0478);
  if (qword_1000CFAE8 != -1)
    swift_once(&qword_1000CFAE8, sub_10006CD38);
  v11 = *(_QWORD *)(v0 + 160);
  v12 = type metadata accessor for Logger(0);
  sub_1000096EC(v12, (uint64_t)qword_1000DDB30);
  swift_errorRetain(v11);
  v13 = swift_errorRetain(v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 160);
  if (v16)
  {
    v18 = (uint8_t *)sub_100018554(12);
    v19 = sub_100018554(32);
    v25 = v19;
    *(_DWORD *)v18 = 136315138;
    swift_getErrorValue(v17, v0 + 48, v0 + 16);
    v20 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v22 = v21;
    sub_100014B44(v20, v21, &v25);
    *(_QWORD *)(v0 + 56) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v22);
    sub_10002ABB8();
    sub_10002ABB8();
    sub_100018948((void *)&_mh_execute_header, v14, v15, "ScoreboardSubscriptionMessageProcessor - Failed to process scoreboard subscription - %s", v18);
    sub_100018940(v19);
    sub_10000A818(v19);
    sub_10000A818((uint64_t)v18);

    sub_10002ABB8();
  }
  else
  {
    sub_10002ABB8();
    sub_10002ABB8();
    sub_10002ABB8();

  }
  sub_10003B9FC();
  sub_1000189B0();
  sub_100018E2C();
  sub_100018C28();
  sub_10003BA38();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003A93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int *v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  double v35;
  char v36;
  char v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  double v50;
  char v51;
  double v52;
  double v53;
  char v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  double v60;
  char v61;
  char v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  int v96;
  void (*v97)(uint64_t, char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  __int16 v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  id v147;
  __int128 v148;
  __int128 v149;
  _UNKNOWN **v150;
  char v151[72];

  v140 = a3;
  v146 = a1;
  v4 = sub_10000738C(&qword_1000D0478);
  __chkstk_darwin(v4);
  v145 = (uint64_t)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v142 = *(_QWORD *)(v6 - 8);
  v143 = v6;
  __chkstk_darwin(v6);
  v131 = (uint64_t)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v141 = (uint64_t)&v130 - v9;
  v10 = sub_10000738C(&qword_1000D13F0);
  __chkstk_darwin(v10);
  v144 = (uint64_t)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v139 = (uint64_t)&v130 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v130 - v15;
  __chkstk_darwin(v17);
  v19 = (char *)&v130 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v130 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v130 - v24;
  __chkstk_darwin(v26);
  v28 = (uint64_t *)((char *)&v130 - v27);
  sub_100009D5C(a2, (uint64_t)&v130 - v27, &qword_1000D13F0);
  v29 = (int *)sub_10000738C(&qword_1000D13F8);
  if (sub_100009658((uint64_t)v28, 1, (uint64_t)v29) == 1)
  {
    sub_10000A47C((uint64_t)v28, &qword_1000D13F0);
LABEL_50:
    v132 = 0;
    v63 = 0;
    goto LABEL_58;
  }
  v30 = *v28;
  swift_bridgeObjectRetain(*v28);
  sub_10000A47C((uint64_t)v28, &qword_1000D13F8);
  if (!((unint64_t)v30 >> 62))
  {
    if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_49:
    swift_bridgeObjectRelease(v30);
    goto LABEL_50;
  }
  if (v30 < 0)
    v64 = v30;
  else
    v64 = v30 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v30);
  v65 = _CocoaArrayWrapper.endIndex.getter(v64);
  swift_bridgeObjectRelease(v30);
  if (!v65)
    goto LABEL_49;
LABEL_5:
  sub_10007DEC8(0, 1, v30);
  v31 = *(id *)(v30 + 32);
  swift_bridgeObjectRelease(v30);
  v147 = v31;
  v32 = v31;
  v33 = (void *)dispatch thunk of SportingEvent.coverage.getter();

  if (v33)
  {
    v34 = (void *)dispatch thunk of SportingEventCoverage.ingestion.getter();

    if (v34)
    {
      v35 = COERCE_DOUBLE(dispatch thunk of SportingEventCoverageIngestion.last.getter());
      v37 = v36;

      if ((v37 & 1) == 0)
      {
        v132 = sub_100080BFC(v35);
LABEL_57:
        v63 = v147;
        goto LABEL_58;
      }
    }
  }
  v38 = dispatch thunk of SportingEvent.coverage.getter();
  if (!v38
    || (v39 = (void *)v38,
        v40 = (void *)dispatch thunk of SportingEventCoverage.ingestion.getter(),
        v39,
        !v40)
    || (v41 = dispatch thunk of SportingEventCoverageIngestion.lastUpdates.getter(), v40, !v41))
  {
LABEL_56:
    v132 = 0;
    goto LABEL_57;
  }
  if ((unint64_t)v41 >> 62)
  {
    if (v41 >= 0)
      v66 = v41 & 0xFFFFFFFFFFFFFF8;
    else
      v66 = v41;
    swift_bridgeObjectRetain(v41);
    v42 = _CocoaArrayWrapper.endIndex.getter(v66);
    if (v42)
      goto LABEL_14;
    goto LABEL_55;
  }
  v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v41);
  if (!v42)
  {
LABEL_55:
    swift_bridgeObjectRelease_n(v41, 2);
    goto LABEL_56;
  }
LABEL_14:
  sub_10007DEC8(0, (v41 & 0xC000000000000001) == 0, v41);
  v138 = v41 & 0xC000000000000001;
  if ((v41 & 0xC000000000000001) != 0)
    v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v41);
  else
    v43 = *(id *)(v41 + 32);
  v44 = v43;
  v136 = v19;
  v137 = v42 - 1;
  if (v42 != 1)
  {
    if (v42 < 2)
    {
      __break(1u);
      return;
    }
    v45 = v138 == 0;
    sub_10007DEC8(1, v45, v41);
    sub_10007DEC8(v137, v45, v41);
    v46 = 0;
    v47 = v41;
    do
    {
      if (v138)
        v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46 + 1, v41);
      else
        v48 = *(id *)(v41 + 8 * v46 + 40);
      v49 = v48;
      v50 = COERCE_DOUBLE(((uint64_t (*)(void))dispatch thunk of SportingEventCoverageLastUpdate.timestamp.getter)());
      if ((v51 & 1) != 0)
        v52 = 0.0;
      else
        v52 = v50;
      v53 = COERCE_DOUBLE(((uint64_t (*)(void))dispatch thunk of SportingEventCoverageLastUpdate.timestamp.getter)());
      if (v52 < 0.0)
        v55 = v44;
      else
        v55 = v49;
      if (v52 < 0.0)
        v56 = v49;
      else
        v56 = v44;
      if (v52 >= v53)
        v57 = v49;
      else
        v57 = v44;
      if (v52 >= v53)
        v58 = v44;
      else
        v58 = v49;
      if ((v54 & 1) != 0)
      {
        v44 = v56;
      }
      else
      {
        v55 = v57;
        v44 = v58;
      }

      ++v46;
      v41 = v47;
    }
    while (v137 != v46);
  }
  v59 = swift_bridgeObjectRelease_n(v41, 2);
  v60 = COERCE_DOUBLE(dispatch thunk of SportingEventCoverageLastUpdate.timestamp.getter(v59));
  v62 = v61;

  if ((v62 & 1) != 0)
    v132 = 0;
  else
    v132 = sub_100080BFC(v60);
  v63 = v147;
  v19 = v136;
LABEL_58:
  if (qword_1000CFB10 != -1)
    swift_once(&qword_1000CFB10, sub_1000947D0);
  v138 = qword_1000DDB78;
  v147 = v63;
  if (v63)
  {
    v67 = v63;
    v133 = SportingEvent.canonicalId.getter();
    v134 = v68;

  }
  else
  {
    v133 = 0;
    v134 = 0;
  }
  v69 = sub_10000738C(&qword_1000D1400);
  inited = swift_initStackObject(v69, v151);
  *(_OWORD *)(inited + 16) = xmmword_1000A06C0;
  sub_100009D5C(a2, (uint64_t)v25, &qword_1000D13F0);
  if (sub_100009658((uint64_t)v25, 1, (uint64_t)v29) == 1)
  {
    sub_10000A47C((uint64_t)v25, &qword_1000D13F0);
    v71 = 0;
    v72 = 0;
  }
  else
  {
    v71 = *((_QWORD *)v25 + 1);
    v72 = *((_QWORD *)v25 + 2);
    swift_bridgeObjectRetain(v72);
    sub_10000A47C((uint64_t)v25, &qword_1000D13F8);
  }
  *(_QWORD *)(inited + 32) = v71;
  *(_QWORD *)(inited + 40) = v72;
  v73 = &qword_1000D13F0;
  sub_100009D5C(a2, (uint64_t)v22, &qword_1000D13F0);
  if (sub_100009658((uint64_t)v22, 1, (uint64_t)v29) == 1)
  {
    v74 = 0;
    v75 = 0;
  }
  else
  {
    v76 = &v22[v29[14]];
    v74 = *(_QWORD *)v76;
    v75 = *((_QWORD *)v76 + 1);
    swift_bridgeObjectRetain(v75);
    v73 = &qword_1000D13F8;
  }
  sub_10000A47C((uint64_t)v22, v73);
  *(_QWORD *)(inited + 48) = v74;
  *(_QWORD *)(inited + 56) = v75;
  v77 = *(_QWORD *)(inited + 40);
  if (v77)
  {
    v78 = *(_QWORD *)(inited + 32);
    swift_bridgeObjectRetain(*(_QWORD *)(inited + 40));
    sub_100013494();
    v80 = v79;
    v81 = v79[2];
    if (v81 >= v79[3] >> 1)
    {
      sub_100013494();
      v80 = v122;
    }
    v80[2] = v81 + 1;
    v82 = &v80[2 * v81];
    v82[4] = v78;
    v82[5] = v77;
    v74 = *(_QWORD *)(inited + 48);
    v75 = *(_QWORD *)(inited + 56);
    if (!v75)
      goto LABEL_80;
    goto LABEL_75;
  }
  v80 = _swiftEmptyArrayStorage;
  if (v75)
  {
LABEL_75:
    swift_bridgeObjectRetain(v75);
    if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
    {
      sub_100013494();
      v80 = v123;
    }
    v83 = v80[2];
    if (v83 >= v80[3] >> 1)
    {
      sub_100013494();
      v80 = v124;
    }
    v80[2] = v83 + 1;
    v84 = &v80[2 * v83];
    v84[4] = v74;
    v84[5] = v75;
  }
LABEL_80:
  swift_bridgeObjectRelease(inited);
  *(_QWORD *)&v148 = v80;
  v85 = sub_10000738C(&qword_1000D0440);
  sub_100031668((unint64_t *)&qword_1000D0448, &qword_1000D0440, (uint64_t)&protocol conformance descriptor for [A]);
  v136 = (char *)BidirectionalCollection<>.joined(separator:)(95, 0xE100000000000000, v85, v86);
  v88 = v87;
  v89 = swift_bridgeObjectRelease(v80);
  v90 = v141;
  Date.init()(v89);
  sub_100080BA0();
  v135 = v91;
  v92 = v142;
  v93 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
  v94 = v90;
  v95 = v143;
  v93(v94, v143);
  sub_100009D5C(a2, (uint64_t)v19, &qword_1000D13F0);
  v96 = sub_100009658((uint64_t)v19, 1, (uint64_t)v29);
  if (v96 == 1)
  {
    sub_10000A47C((uint64_t)v19, &qword_1000D13F0);
    v142 = 0;
  }
  else
  {
    v97 = *(void (**)(uint64_t, char *, uint64_t))(v92 + 16);
    v98 = v131;
    v97(v131, &v19[v29[12]], v95);
    sub_10000A47C((uint64_t)v19, &qword_1000D13F8);
    sub_100080BA0();
    v142 = v99;
    v93(v98, v95);
  }
  v100 = v139;
  sub_100009D5C(a2, (uint64_t)v16, &qword_1000D13F0);
  v101 = sub_100009658((uint64_t)v16, 1, (uint64_t)v29);
  v137 = v88;
  if (v101 == 1)
  {
    sub_10000A47C((uint64_t)v16, &qword_1000D13F0);
    v102 = 0;
    v103 = 0;
  }
  else
  {
    v102 = *((_QWORD *)v16 + 3);
    v103 = *((_QWORD *)v16 + 4);
    swift_bridgeObjectRetain(v103);
    sub_10000A47C((uint64_t)v16, &qword_1000D13F8);
  }
  v104 = &qword_1000D13F0;
  sub_100009D5C(a2, v100, &qword_1000D13F0);
  v105 = sub_100009658(v100, 1, (uint64_t)v29);
  if (v105 == 1)
  {
    v106 = 0;
  }
  else
  {
    v106 = *(_QWORD *)(v100 + 40);
    v104 = &qword_1000D13F8;
  }
  sub_10000A47C(v100, v104);
  v107 = &qword_1000D13F0;
  v108 = v144;
  sub_100009D5C(a2, v144, &qword_1000D13F0);
  v109 = 1;
  if (sub_100009658(v108, 1, (uint64_t)v29) == 1)
  {
    v110 = 0;
  }
  else
  {
    v111 = v108 + v29[13];
    v110 = *(_QWORD *)v111;
    v109 = *(_BYTE *)(v111 + 8);
    v107 = &qword_1000D13F8;
  }
  v112 = v140;
  sub_10000A47C(v108, v107);
  v113 = v145;
  sub_100009D5C(v112, v145, &qword_1000D0478);
  v114 = type metadata accessor for CloudChannelError(0);
  if (sub_100009658(v113, 1, v114) == 1)
  {
    sub_10000A47C(v113, &qword_1000D0478);
    v148 = 0u;
    v149 = 0u;
    v150 = 0;
  }
  else
  {
    *((_QWORD *)&v149 + 1) = v114;
    v150 = &off_1000C9810;
    v115 = sub_100023784(&v148);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 32))(v115, v113, v114);
  }
  LOBYTE(v129) = 0;
  LOBYTE(v128) = v109;
  LOBYTE(v126) = 1;
  LOBYTE(v127) = v105 == 1;
  LOBYTE(v125) = v96 == 1;
  v116 = v134;
  v117 = v137;
  sub_10009271C(v133, v134, (uint64_t)v136, v137, v146, 0, v135, 0, v142, v125, v102, v103, v126, v106, v127, v110, v128, v132, v129,
    0,
    0,
    0,
    0,
    (uint64_t)&v148,
    v130,
    v131,
    v132,
    v133,
    v134,
    v135,
    (char)v136,
    v137,
    v138,
    v139,
    v140,
    v141);
  v119 = v118;
  v121 = v120;
  swift_bridgeObjectRelease(v117);
  swift_bridgeObjectRelease(v103);
  swift_bridgeObjectRelease(v116);
  sub_10000A47C((uint64_t)&v148, &qword_1000D1408);
  sub_100092BD8(v119, v121 & 0x101);
  swift_bridgeObjectRelease(v119);

}

void sub_10003B4A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_10000738C(&qword_1000D13F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v9);
  sub_100080BA0();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = sub_10000738C(&qword_1000D13F8);
  sub_10003B9D8((uint64_t)v4, v13, v14, v12);
  sub_10003A93C(v11, (uint64_t)v4, a1);
  sub_10000A47C((uint64_t)v4, &qword_1000D13F0);
}

uint64_t sub_10003B5A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ScoreboardSubscriptionMessageProcessor()
{
  return objc_opt_self(_TtC7sportsd38ScoreboardSubscriptionMessageProcessor);
}

uint64_t sub_10003B5EC(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned __int8 v20;
  uint64_t v21;

  v14 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009D5C(a1, (uint64_t)v16, &qword_1000D0578);
  v17 = type metadata accessor for TaskPriority(0);
  v18 = sub_100009658((uint64_t)v16, 1, v17);
  if ((_DWORD)v18 == 1)
  {
    sub_10000A47C((uint64_t)v16, &qword_1000D0578);
    result = 0;
    if ((a2 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    v20 = TaskPriority.rawValue.getter(v18);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    result = v20;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if ((a5 & 1) != 0)
LABEL_6:
    result |= 0x1000uLL;
LABEL_7:
  if ((a6 & 1) != 0)
    result |= 0x2000uLL;
  if ((a7 & 1) != 0)
    return result | 0x4000;
  return result;
}

uint64_t sub_10003B72C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003B73C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000D141C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003B99C;
  return sub_10003A428(a1, v4);
}

uint64_t sub_10003B790()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10003B7C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1000D142C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10003B844;
  return sub_100039108(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10003B844()
{
  uint64_t v0;

  sub_10003B9A0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B870()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003B894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000D19D4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10003B844;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000D19D0 + dword_1000D19D0))(a1, v4);
}

unint64_t sub_10003B904()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D1470;
  if (!qword_1000D1470)
  {
    v1 = type metadata accessor for ScoreboardSubscriptionManager(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ScoreboardSubscriptionManager, v1);
    atomic_store(result, (unint64_t *)&qword_1000D1470);
  }
  return result;
}

uint64_t sub_10003B944()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003B968(void **a1)
{
  uint64_t v1;

  return sub_10000BE00(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10003B970()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003B994(void **a1)
{
  uint64_t v1;

  return sub_10000BE60(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10003B9A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc(v3);
}

uint64_t sub_10003B9C0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10003B9D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10003B9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000964C(a1, 1, 1, a4);
}

uint64_t sub_10003B9E4()
{
  uint64_t v0;

  return v0 + 168;
}

uint64_t sub_10003B9F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000096A0(a1, *(_QWORD *)(v1 - 120));
}

uint64_t sub_10003B9FC()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 128));
}

uint64_t sub_10003BA28()
{
  return swift_task_alloc(32);
}

uint64_t sub_10003BA30(uint64_t a1)
{
  unint64_t v1;

  return sub_1000096A0(a1, v1);
}

uint64_t sub_10003BA38()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10003BA40()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1000096A0(v1, v0);
}

uint64_t sub_10003BA4C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100019F6C(v1, v0);
}

void sub_10003BA58()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

_QWORD *sub_10003BA6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30[3];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;

  v3 = v2;
  v6 = type metadata accessor for SportingEventSubscription.Competitor(0);
  v25 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v27 = a2;
    v36 = _swiftEmptyArrayStorage;
    sub_1000156E8(0, v9, 0);
    v10 = v36;
    v11 = a1 + 48;
    while (1)
    {
      v28 = v9;
      v29 = v10;
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(v11 + 24);
      v15 = *(_QWORD *)(v11 + 32);
      v16 = *(_QWORD *)(v11 + 40);
      v17 = *(_BYTE *)(v11 + 48);
      v30[0] = *(_QWORD *)(v11 - 16);
      v30[1] = v12;
      v30[2] = v13;
      v31 = *(_OWORD *)(v11 + 8);
      v32 = v14;
      v33 = v15;
      v34 = v16;
      v10 = v3;
      v18 = (uint64_t)v8;
      v19 = v31;
      v35 = v17;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v19);
      sub_10003C2D0(v15, v16);
      v20 = (char *)v18;
      sub_10003BF64(v30, v27, v18);
      if (v10)
        break;
      v3 = 0;
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v12);
      sub_10003C2E0(v15, v16);
      v10 = v29;
      v36 = v29;
      v22 = v29[2];
      v21 = v29[3];
      if (v22 >= v21 >> 1)
      {
        sub_1000156E8(v21 > 1, v22 + 1, 1);
        v10 = v36;
      }
      v11 += 72;
      v10[2] = v22 + 1;
      v23 = (unint64_t)v10
          + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
          + *(_QWORD *)(v25 + 72) * v22;
      v8 = v20;
      (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v23, v20, v26);
      v9 = v28 - 1;
      if (v28 == 1)
      {
        swift_bridgeObjectRelease(v27);
        return v10;
      }
    }
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v12);
    sub_10003C2E0(v15, v16);
    swift_bridgeObjectRelease(v27);
    swift_release(v29);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return _swiftEmptyArrayStorage;
  }
  return v10;
}

uint64_t sub_10003BCA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 v21;
  unint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[21];
  _BYTE v41[16];
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  _BYTE v47[16];
  double v48;
  char v49;

  v39 = a3;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - v10;
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - v13;
  memcpy(v40, a1, sizeof(v40));
  v15 = v40[18];
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v15);
  v17 = sub_10003BA6C(v16, a2);
  v18 = v14;
  v19 = v17;
  v20 = swift_bridgeObjectRelease(v15);
  Date.init()(v20);
  sub_10003C450((uint64_t)&v40[8], (uint64_t)v41);
  sub_10003C450((uint64_t)v41, (uint64_t)&v42);
  if ((v44 & 1) == 0)
  {
    v45 = v42;
    v46 = v43;
    sub_10003C450((uint64_t)&v45, (uint64_t)v47);
    sub_10003C450((uint64_t)v47, (uint64_t)&v48);
    if ((v49 & 1) == 0)
    {
      v21.n128_f64[0] = v48 / 1000.0;
      Date.init(timeIntervalSince1970:)(v21);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v18, v11, v5);
    }
  }
  v22 = v40[20];
  v23 = a1[32];
  v38 = v19;
  if (v23 > 1)
  {
    v35 = a1[31];
    v24 = swift_bridgeObjectRetain(v23);
    v22 = v23;
  }
  else
  {
    v35 = v40[19];
    v24 = swift_bridgeObjectRetain(v40[20]);
    v23 = v22;
  }
  (*(void (**)(char *, char *, uint64_t, __n128))(v6 + 16))(v8, v18, v5, v24);
  if (v40[5])
    v25 = v40[4];
  else
    v25 = 0;
  if (v40[5])
    v26 = v40[5];
  else
    v26 = 0xE000000000000000;
  v36 = v18;
  v37 = v5;
  v27 = v40[7];
  if (v40[7])
    v28 = v40[6];
  else
    v28 = 0;
  v29 = v6;
  if (v40[7])
    v30 = v40[7];
  else
    v30 = 0xE000000000000000;
  v31 = v22 == 0;
  if (v22)
    v32 = v35;
  else
    v32 = 0;
  if (v31)
    v23 = 0xE000000000000000;
  swift_bridgeObjectRetain(v40[5]);
  swift_bridgeObjectRetain(v27);
  SportingEventSubscription.Metadata.init(eventStartDate:competitors:preGameTitle:shortTitle:eventURL:)(v8, v38, v25, v26, v28, v30, v32, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v36, v37);
}

uint64_t sub_10003BF20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000738C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003BF64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v55 = a3;
  v47 = type metadata accessor for LogoDownloadResult(0);
  v5 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v7 = (uint64_t *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v48 = (uint64_t)&v46 - v9;
  v10 = sub_10000738C(&qword_1000D12C0);
  __chkstk_darwin(v10);
  v54 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - v13;
  __chkstk_darwin(v15);
  v17 = (char *)&v46 - v16;
  v18 = *a1;
  v19 = a1[1];
  v20 = a1[2];
  v49 = a1[3];
  v50 = v20;
  v21 = a1[5];
  v51 = a1[4];
  v52 = v21;
  v56 = a1[6];
  v57 = a1[7];
  v53 = *((unsigned __int8 *)a1 + 64);
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
  {
    v23 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v24 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_10003C304(v23, (uint64_t)v7);
      v25 = v7[1];
      v26 = *v7 == v18 && v25 == v19;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v7, v25, v18, v19, 0) & 1) != 0)
        break;
      sub_10003C348((uint64_t)v7);
      v23 += v24;
      if (!--v22)
      {
        swift_bridgeObjectRelease(a2);
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(a2);
    v30 = v48;
    sub_10003C40C((uint64_t)v7, v48);
    v31 = v30 + *(int *)(v47 + 24);
    v32 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v17, v31, v32);
    sub_10003C348(v30);
    v28 = (uint64_t)v17;
    v29 = 0;
    v27 = v32;
  }
  else
  {
LABEL_10:
    v27 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0);
    v28 = (uint64_t)v17;
    v29 = 1;
  }
  sub_10000964C(v28, v29, 1, v27);
  v33 = v49;
  if ((unint64_t)(v57 - 1) >= 2)
  {
    sub_100023F64(v56, v57);
  }
  else
  {
    v56 = 0;
    v57 = 0;
  }
  sub_10003C384((uint64_t)v17, (uint64_t)v14);
  v34 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0);
  v35 = sub_100009658((uint64_t)v14, 1, v34);
  swift_bridgeObjectRetain(v19);
  v36 = swift_bridgeObjectRetain(v33);
  if (v35 == 1)
  {
    sub_10003C3CC((uint64_t)v14);
    v37 = 0;
    v38 = 0;
  }
  else
  {
    v37 = SportingEventSubscription.Competitor.LogoFilePaths.defaultSize.getter(v36);
    v38 = v39;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v14, v34);
  }
  v40 = 0xE000000000000000;
  if (v33)
    v41 = v33;
  else
    v41 = 0xE000000000000000;
  if (v33)
    v42 = v50;
  else
    v42 = 0;
  v43 = v54;
  sub_10003C384((uint64_t)v17, v54);
  if (v52)
    v44 = v51;
  else
    v44 = 0;
  if (v52)
    v40 = v52;
  swift_bridgeObjectRetain(v52);
  SportingEventSubscription.Competitor.init(canonicalId:abbreviation:name:teamLogoUrl:localLogoUrl:logoFilePaths:teamColorHex:isHome:ordinal:)(v18, v19, v42, v41, 0, 0xE000000000000000, v56, v57, v37, v38, v43, v44, v40, v53 & 1, 0);
  return sub_10003C3CC((uint64_t)v17);
}

uint64_t sub_10003C2D0(uint64_t a1, uint64_t a2)
{
  if (a2 != 2)
    return sub_100023F64(a1, a2);
  return a1;
}

uint64_t sub_10003C2E0(uint64_t a1, uint64_t a2)
{
  if (a2 != 2)
    return sub_10003C2F0(a1, a2);
  return a1;
}

uint64_t sub_10003C2F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_10003C304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LogoDownloadResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C348(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LogoDownloadResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003C384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D12C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C3CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000738C(&qword_1000D12C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003C40C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LogoDownloadResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C450(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10003BF20(a1, a2, v2);
}

void sub_10003C458(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v7 = 4;
    while (1)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v11 = SportingEvent.canonicalId.getter();
      v13 = v12;
      dispatch thunk of PlaysStore.append(play:forCanonicalId:)(v9, v11, v12);
      if (v4)
      {

        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v13);
        return;
      }

      swift_bridgeObjectRelease(v13);
      ++v7;
      if (v10 == v6)
        goto LABEL_10;
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_10:

  swift_bridgeObjectRelease(a1);
}

uint64_t sub_10003C5C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellable);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellable) = a1;
  return swift_release(v2);
}

uint64_t sub_10003C5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion + 8);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

void sub_10003C5FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  id v83;
  id v84;
  id v85;
  id v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  uint64_t v126[2];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_message);
  v3 = sub_10000738C(&qword_1000D1540);
  sub_10000A748(v3, 32);
  v4 = sub_100018A3C();
  v5 = sub_10003F4CC(v4);
  v6 = *(_QWORD *)(v5[2] + *(_QWORD *)(*(_QWORD *)v5[2] + 184));
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v122 = *(_QWORD *)(v5[2] + *(_QWORD *)(*(_QWORD *)v5[2] + 184));
    else
      v122 = v6 & 0xFFFFFFFFFFFFFF8;
    sub_10000A834();
    if (_CocoaArrayWrapper.endIndex.getter(v122))
      goto LABEL_3;
LABEL_25:
    sub_1000061E8();
    sub_10003D08C();
    sub_100040014();
    swift_release(v123);
    return;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_10000A834();
  if (!v7)
    goto LABEL_25;
LABEL_3:
  sub_10007DEC8(0, (v6 & 0xC000000000000001) == 0, v6);
  if ((v6 & 0xC000000000000001) != 0)
    v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
  else
    v8 = *(id *)(v6 + 32);
  v9 = v8;
  sub_1000061E8();
  if (qword_1000CFAB8 != -1)
    swift_once(&qword_1000CFAB8, sub_10006CC6C);
  v10 = sub_1000187DC();
  sub_1000096EC(v10, (uint64_t)qword_1000DDAA0);
  swift_retain_n(v5, 8);
  v11 = v9;
  v12 = sub_100040080();
  v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = sub_100018554(62);
    v124 = sub_100018554(96);
    v126[0] = v124;
    *(_DWORD *)v14 = 136316418;
    v15 = sub_10003FFF0();
    sub_10003FFB4(v15, v16, v17, v18, v19, v20);
    sub_10003FF94(v21, v22, v23, v14 + 12, v24, v25, v26);

    sub_1000061E8();
    *(_WORD *)(v14 + 12) = 2080;
    v27 = sub_1000400D0();
    sub_10003FFB4(v27, v28, v29, v30, v31, v32);
    sub_10003FF94(v33, v34, v35, v14 + 22, v36, v37, v38);

    v39 = sub_1000061E8();
    *(_WORD *)(v14 + 22) = 2048;
    v125 = Date.timeIntervalSince1970.getter(v39);
    sub_10003FF94(v40, v41, v42, v14 + 32, v43, v44, v45);
    sub_10003FF64();
    *(_WORD *)(v14 + 32) = 2048;
    v46 = *(double *)(v5[2] + 16);
    v47 = sub_1000187F4();
    v125 = v46;
    sub_100040048(v47, v48, v49, v14 + 42, v50, v51, v52);
    sub_1000187F4();
    *(_WORD *)(v14 + 42) = 2080;
    v53 = v5[2];
    v55 = *(_QWORD *)(v53 + 40);
    v54 = *(_QWORD *)(v53 + 48);
    swift_bridgeObjectRetain(v54);
    sub_100014B44(v55, v54, v126);
    v125 = *(double *)&v56;
    sub_100040048(v56, v57, v58, v14 + 52, v59, v60, v61);
    sub_10003FF64();
    swift_bridgeObjectRelease(v54);
    *(_WORD *)(v14 + 52) = 2048;
    v62 = v5[2] + qword_1000DDB68;
    v63 = *(double *)v62;
    if (*(_BYTE *)(v62 + 8))
      v63 = -1.0;
    v125 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v14 + 54, v14 + 62);
    sub_10003FF64();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "=== Begin apns log for %s, version %s, message timestamp %f, type %ld, tempoSessionId %s, liveActivityTtl %f ===", (uint8_t *)v14, 0x3Eu);
    swift_arrayDestroy(v124, 3);
    sub_10000A818(v124);
    sub_10000A818(v14);

  }
  else
  {

    swift_release_n(v5, 8);
  }
  v64 = sub_1000400D0();
  sub_10003C5E0(v64, v65);
  v66 = *(_BYTE *)(v1 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_isLowCapLiveActivity);
  v67 = sub_10003FFF0();
  v68 = (v66 & 1) == 0;
  sub_10003E2D4(v2, v67, v69, v68);
  sub_100018D80();
  v70 = *(_QWORD **)(v1 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_dataRepository);
  v71 = sub_10003FFF0();
  v73 = v72;
  v74 = v70 + 2;
  v75 = v70[5];
  v76 = v70[6];
  sub_1000073CC(v74, v75);
  v77 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(v71, v73, v68, v75, v76);
  sub_10001883C();
  if (v77)
  {
    if (qword_1000CFA98 != -1)
      swift_once(&qword_1000CFA98, sub_1000479AC);
    v78 = SportingEventSubscription.canonicalId.getter();
    v80 = v79;
    v81 = sub_10000A748((uint64_t)&unk_1000C4F70, 24);
    swift_unknownObjectWeakInit(v81 + 16, v1);
    v82 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C4F98, 48);
    v82[2] = v81;
    v82[3] = v5;
    v82[4] = v77;
    v82[5] = v9;
    swift_retain(v5);
    v83 = v9;
    swift_retain(v81);
    v84 = v77;
    sub_100043F84(v78, v80, (uint64_t)sub_10003FAE8, (uint64_t)v82);
    sub_1000187F4();

    sub_10001883C();
    swift_release(v81);
    swift_release(v82);
  }
  else
  {
    v85 = v9;
    swift_retain_n(v5, 2);
    v86 = v85;
    v87 = sub_100040080();
    v88 = static os_log_type_t.debug.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = sub_100018554(32);
      v90 = sub_100018554(64);
      v126[0] = v90;
      *(_DWORD *)v89 = 136315650;
      v91 = sub_10003FFF0();
      sub_10003FFB4(v91, v92, v93, v94, v95, v96);
      v125 = *(double *)&v97;
      sub_10003FFA4(v97, v98, v99, v89 + 12, v100, v101, v102);

      sub_1000061E8();
      *(_WORD *)(v89 + 12) = 2080;
      v103 = sub_1000400D0();
      sub_10003FFB4(v103, v104, v105, v106, v107, v108);
      v125 = *(double *)&v109;
      sub_10003FFA4(v109, v110, v111, v89 + 22, v112, v113, v114);

      v115 = sub_1000061E8();
      *(_WORD *)(v89 + 22) = 2048;
      v125 = Date.timeIntervalSince1970.getter(v115);
      sub_10003FFA4(v116, v117, v118, v89 + 32, v119, v120, v121);
      sub_10003FF64();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to process push notification for %s with version %s and message timestamp %f - no subscription exists", (uint8_t *)v89, 0x20u);
      swift_arrayDestroy(v90, 2);
      sub_10000A818(v90);
      sub_10000A818(v89);

    }
    else
    {

      sub_10003FF64();
    }
    sub_10003D08C();
    sub_1000187F4();

  }
  sub_100040014();
}

void sub_10003CDBC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v8;
  uint64_t Strong;
  void *v10;
  int v11;
  char v12;
  __n128 v13;
  uint64_t v14;
  _QWORD v15[6];
  _BYTE v16[24];

  v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8);
  if (Strong)
  {
    v10 = (void *)Strong;
    v11 = *(unsigned __int8 *)(Strong + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_isLowCapLiveActivity);
    sub_10003D14C(a3, a4, a5, *(_QWORD *)(*(_QWORD *)(a3 + 16) + qword_1000DDB68), *(_BYTE *)(*(_QWORD *)(a3 + 16) + qword_1000DDB68 + 8), v11);
    if ((v11 & 1) == 0)
    {
      v15[3] = &type metadata for TVAppFeatureFlags;
      v15[4] = sub_10000A278();
      v12 = isFeatureEnabled(_:)(v15);
      sub_100007618(v15);
      if ((v12 & 1) == 0)
      {
        v14 = dispatch thunk of SportingEvent.plays.getter(v13);
        sub_10003C458(v14, v10, a5);
        swift_bridgeObjectRelease(v14);
      }
    }
    sub_10003D08C();

  }
}

uint64_t sub_10003D08C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1000CFAB8 != -1)
    swift_once(&qword_1000CFAB8, sub_10006CC6C);
  v0 = sub_1000187DC();
  v1 = sub_1000096EC(v0, (uint64_t)qword_1000DDAA0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)sub_100018554(2);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "=== End apns log ===", v4, 2u);
    sub_10000A818((uint64_t)v4);
  }

  return sub_100056F84();
}

void sub_10003D14C(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD);
  void *v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[4];
  int v107;
  void *v108;
  void (*v109)(uint64_t, uint64_t);
  unsigned int v110;
  void (*v111)(uint64_t, _QWORD, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v121 = a4;
  v123 = a1;
  v115 = a6;
  v126 = a3;
  v120 = a5 & 1;
  v8 = type metadata accessor for Date(0);
  v117 = *(_QWORD *)(v8 - 8);
  v118 = v8;
  __chkstk_darwin(v8);
  sub_10000CD48();
  v116 = v9;
  sub_10000738C(&qword_1000D0578);
  sub_100018BD0();
  __chkstk_darwin(v10);
  sub_10000CD48();
  v114 = v11;
  sub_10000738C(&qword_1000D1298);
  sub_100018BD0();
  __chkstk_darwin(v12);
  sub_10000CD48();
  v119 = v13;
  v14 = type metadata accessor for SportingEventProgressStatus(0);
  __chkstk_darwin(v14);
  v16 = &v106[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v19 = &v106[-v18];
  v20 = type metadata accessor for SportingEventPlayLevel(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_100040030();
  v22 = ((uint64_t (*)(void))SportingEventSubscription.mostRecentPlay.getter)();
  v23 = *(void (**)(_QWORD))(v21 + 104);
  v110 = enum case for SportingEventPlayLevel.alerts(_:);
  v111 = (void (*)(uint64_t, _QWORD, uint64_t))v23;
  v23(v6);
  sub_1000756F4(v6, v22);
  v125 = v24;
  sub_1000061E8();
  v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v112 = v6;
  v113 = v20;
  v109 = v25;
  v26 = ((uint64_t (*)(uint64_t, uint64_t))v25)(v6, v20);
  SportingEventSubscription.sportingEventDetails.getter(v26);
  sub_1000400AC();

  v27 = enum case for SportingEventProgressStatus.final(_:);
  sub_100040070((uint64_t)v16, enum case for SportingEventProgressStatus.final(_:));
  LOBYTE(v21) = sub_10003FFDC();
  sub_10003FF7C((uint64_t)v16);
  v28 = sub_10003FF70();
  if ((v21 & 1) != 0)
  {
    type metadata accessor for SportingEventFactory(0);
    sub_100040070((uint64_t)v19, v27);
    v29 = (void *)static SportingEventFactory.eventWithProgressStatus(event:progressStatus:)(v126, v19);
    sub_10003FF70();
    v30 = v124;
    SportingEventSubscription.update(sportingEventDetails:updatedAt:)(v29, &v124[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_processDate]);

    v31 = v123;
    v32 = v119;
    sub_100009D5C(*(_QWORD *)(v123 + 16) + *(_QWORD *)(**(_QWORD **)(v123 + 16) + 176), v119, &qword_1000D1298);
    SportingEventSubscription.view.setter(v32);
    v33 = a2;
    v34 = v31;
    goto LABEL_19;
  }
  v35 = v119;
  v108 = a2;
  SportingEventSubscription.sportingEventDetails.getter(v28);
  sub_1000400AC();

  sub_100040070((uint64_t)v16, enum case for SportingEventProgressStatus.inProgress(_:));
  v36 = sub_10003FFDC();
  sub_10003FF7C((uint64_t)v16);
  v37 = sub_10003FF70();
  v38 = v126;
  if ((v36 & 1) != 0)
  {
    SportingEvent.progressStatus.getter(v37);
    sub_100040070((uint64_t)v16, enum case for SportingEventProgressStatus.preGame(_:));
    v39 = sub_10003FFDC();
    sub_10003FF7C((uint64_t)v16);
    v37 = sub_10003FF70();
    if ((v39 & 1) != 0)
    {
      if (qword_1000CFAD8 != -1)
        swift_once(&qword_1000CFAD8, sub_10006CCEC);
      v40 = type metadata accessor for Logger(0);
      sub_1000096EC(v40, (uint64_t)qword_1000DDB00);
      v41 = v38;
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter();
      v44 = os_log_type_enabled(v42, v43);
      v33 = v108;
      if (!v44)
      {

        goto LABEL_18;
      }
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = sub_10003FFF8();
      v129 = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = SportingEvent.canonicalId.getter();
      sub_1000400C4(v47, v48);
      v127 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v45 + 4, v45 + 12);

      sub_1000061E8();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Skipped pregame update for inProgress event. canonical id: %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1);
      sub_10000A818(v46);
      sub_10000A818((uint64_t)v45);
      goto LABEL_16;
    }
  }
  v50 = dispatch thunk of SportingEvent.versionNumber.getter(v37);
  v33 = v108;
  v51 = (void *)SportingEventSubscription.sportingEventDetails.getter(v50);
  v52 = dispatch thunk of SportingEvent.versionNumber.getter(v51);

  if (v50 >= v52)
  {
    v30 = v124;
    SportingEventSubscription.update(sportingEventDetails:updatedAt:)(v38, &v124[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_processDate]);
    v34 = v123;
    sub_100009D5C(*(_QWORD *)(v123 + 16) + *(_QWORD *)(**(_QWORD **)(v123 + 16) + 176), v35, &qword_1000D1298);
    SportingEventSubscription.view.setter(v35);
    goto LABEL_19;
  }
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v53 = type metadata accessor for Logger(0);
  sub_1000096EC(v53, (uint64_t)qword_1000DDB00);
  v54 = v38;
  v55 = v33;
  v56 = v54;
  v42 = v55;
  v57 = Logger.logObject.getter(v42);
  v58 = static os_log_type_t.error.getter();
  v59 = v58;
  if (!os_log_type_enabled(v57, v58))
  {

LABEL_16:
    goto LABEL_18;
  }
  v60 = sub_10003FFF8();
  v119 = sub_10003FFF8();
  v129 = v119;
  *(_DWORD *)v60 = 136315650;
  v107 = v59;
  v61 = SportingEvent.canonicalId.getter();
  sub_1000400C4(v61, v62);
  v127 = v63;
  sub_10003FF84(v63, v64, v65, v60 + 12);

  v66 = sub_1000061E8();
  *(_WORD *)(v60 + 12) = 2048;
  v67 = dispatch thunk of SportingEvent.versionNumber.getter(v66);

  v127 = v67;
  sub_10003FF84(v68, v69, v70, v60 + 22);

  *(_WORD *)(v60 + 22) = 2048;
  v72 = (void *)SportingEventSubscription.sportingEventDetails.getter(v71);
  v73 = dispatch thunk of SportingEvent.versionNumber.getter(v72);

  v127 = v73;
  sub_10003FF84(v74, v75, v76, v60 + 32);

  _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v107, "Skipped stale activity update for canonical id: %s. (%ld < %ld)", (uint8_t *)v60, 0x20u);
  v77 = v119;
  swift_arrayDestroy(v119, 1);
  sub_10000A818(v77);
  sub_10000A818(v60);

LABEL_18:
  v34 = v123;
  v30 = v124;
LABEL_19:
  SportingEventSubscription.liveActivityTTLSeconds.setter(v121, v120);
  v78 = *(_QWORD **)&v30[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_dataRepository];
  v79 = v30[OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_isLowCapLiveActivity];
  v80 = v78[5];
  v81 = v78[6];
  sub_1000073CC(v78 + 2, v80);
  v82 = v122;
  dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(v33, (v79 & 1) == 0, v80, v81);
  if (v82)
  {

  }
  else
  {
    v84 = SportingEventSubscription.consumers.getter(v83);
    sub_10006D7C8(0xD000000000000011, 0x80000001000A5730, v84);
    v86 = v85;
    v87 = swift_bridgeObjectRelease(v84);
    v88 = v86 | v115;
    if (((v86 | v115) & 1) != 0)
    {
      v89 = SportingEventSubscription.mostRecentPlay.getter(v87);
      v91 = v112;
      v90 = v113;
      v111(v112, v110, v113);
      sub_1000756F4(v91, v89);
      v93 = v92;
      swift_bridgeObjectRelease(v89);
      v109(v91, v90);
      LOBYTE(v89) = sub_10003EA38(v125, v93);
      v94 = type metadata accessor for TaskPriority(0);
      v95 = v114;
      sub_10000964C(v114, 1, 1, v94);
      v96 = swift_allocObject(&unk_1000C5010, 64, 7);
      *(_QWORD *)(v96 + 16) = 0;
      *(_QWORD *)(v96 + 24) = 0;
      *(_QWORD *)(v96 + 32) = v30;
      *(_QWORD *)(v96 + 40) = v33;
      *(_BYTE *)(v96 + 48) = v89 & 1;
      *(_QWORD *)(v96 + 56) = v34;
      v97 = v33;
      v98 = v30;
      swift_retain(v34);
      v99 = sub_100043B28(v95, (uint64_t)&unk_1000D15A8, v96);
      swift_release(v99);

    }
    sub_10003E360(v34, v33, v88 & 1);
    v100 = SportingEventSubscription.canonicalId.getter();
    v102 = v101;
    sub_10003ED8C(v100, v101, v34, 0);
    v103 = swift_bridgeObjectRelease(v102);
    v104 = v116;
    Date.init()(v103);
    sub_10003EB58(v126, v33, v105, v88 & 1);

    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v104, v118);
  }
}

uint64_t sub_10003D9C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 120) = a5;
  *(_QWORD *)(v7 + 128) = a7;
  *(_BYTE *)(v7 + 160) = a6;
  *(_QWORD *)(v7 + 112) = a4;
  return swift_task_switch(sub_10003D9E0, 0, 0);
}

uint64_t sub_10003D9E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  NSString v12;
  id v13;
  void *v14;
  void *v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v27)(_QWORD);
  void *v28;
  Swift::String v29;

  v1 = 1751607656;
  v2 = sub_100063B00();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v4 = 0;
  }
  else
  {
    v3 = sub_100040098(7827308, 0xE300000000000000, 1751607656, 0xE400000000000000);
    swift_bridgeObjectRelease(0xE300000000000000);
    v4 = v3 ^ 1;
  }
  v5 = v2 & 1;
  type metadata accessor for ContainerConstants(0);
  v6 = static ContainerConstants.defaultSuiteName.getter();
  v8 = v7;
  v9 = objc_allocWithZone((Class)NSUserDefaults);
  v10 = sub_10004D3C8(v6, v8);
  if (!v10)
    v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v11 = v10;
  *(_QWORD *)(v0 + 136) = v10;
  v12 = sub_10003FFC8();
  v13 = objc_msgSend(v11, "stringForKey:", v12);

  if (v13)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v15 = v14;

  }
  else
  {
    v15 = (void *)0xE400000000000000;
  }
  v29._countAndFlagsBits = v1;
  v29._object = v15;
  sub_1000440C4(v29);
  sub_100055DC8(v5, (v16 == 2) | (v16 & 1));
  if ((v17 & 1) == 0)
  {
    if (qword_1000CFA60 != -1)
      swift_once(&qword_1000CFA60, sub_100028A24);
    sub_1000073CC((_QWORD *)(qword_1000DDA38 + 208), *(_QWORD *)(qword_1000DDA38 + 232));
    sub_10000DF20();
    *(_QWORD *)(v0 + 80) = v18;
    v19 = sub_10000A748((uint64_t)&unk_1000C5038, 32);
    *(_BYTE *)(v19 + 16) = v5;
    *(_QWORD *)(v19 + 24) = v11;
    v20 = v11;
    v21 = sub_10000738C(&qword_1000CFDF0);
    sub_100031668(&qword_1000CFDF8, &qword_1000CFDF0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v23 = Publisher<>.sink(receiveValue:)(sub_10003FE58, v19, v21, v22);
    swift_release(v19);
    swift_release(*(_QWORD *)(v0 + 80));
    sub_10003C5C8(v23);
  }
  sub_100009D5C(*(_QWORD *)(v0 + 112) + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateable, v0 + 16, &qword_1000D1538);
  v24 = *(_QWORD *)(v0 + 40);
  if (v24)
  {
    sub_1000073CC((_QWORD *)(v0 + 16), v24);
    v25 = (_QWORD *)swift_task_alloc(dword_1000D1A4C);
    *(_QWORD *)(v0 + 144) = v25;
    *v25 = v0;
    v25[1] = sub_10003DCF0;
    return sub_10004D07C(*(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 160), v4 & 1);
  }
  else
  {
    sub_10000A47C(v0 + 16, &qword_1000D1538);
    v27 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 112)
                                           + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateCompletion);
    v28 = *(void **)(v0 + 136);
    if (v27)
      sub_1000400B8(v27);

    return sub_10003FFE8(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_10003DCF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_1000189A0();
  v3 = *(_QWORD *)(v2 + 144);
  *v4 = *v1;
  *(_QWORD *)(v2 + 152) = v0;
  swift_task_dealloc(v3);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_10003DD40()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  void *v2;

  sub_100007618((_QWORD *)(v0 + 16));
  v1 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 112)
                                        + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateCompletion);
  v2 = *(void **)(v0 + 136);
  if (v1)
    sub_1000400B8(v1);

  return sub_10003FFE8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003DD90()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  void (*v3)(void);
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  os_log_type_t type;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 112);

  sub_100007618((_QWORD *)(v0 + 16));
  v3 = *(void (**)(void))(v1 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateCompletion);
  if (v3)
  {
    v4 = sub_10003FE64();
    swift_allocError(&unk_1000C9DD8, v4, 0, 0);
    *v5 = xmmword_1000A0CF0;
    v3();
    sub_10002ABB8();
  }
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = SportingEventSubscription.canonicalId.getter(v2);
  v10 = v9;
  sub_10002AC58();
  sub_10003ED8C(v8, v10, v7, v6);
  sub_10002ABB8();
  swift_bridgeObjectRelease(v10);
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(void **)(v0 + 120);
  v13 = sub_1000187DC();
  sub_1000096EC(v13, (uint64_t)qword_1000DDB00);
  swift_errorRetain(v11);
  v14 = v12;
  swift_errorRetain(v11);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(void **)(v0 + 120);
  if (v17)
  {
    v20 = sub_100018554(22);
    v31 = sub_100018554(64);
    v32 = v31;
    *(_DWORD *)v20 = 136315394;
    type = v16;
    v21 = (void *)SportingEventSubscription.sportingEventDetails.getter(v31);
    v22 = SportingEvent.canonicalId.getter();
    v24 = v23;

    sub_100014B44(v22, v24, &v32);
    *(_QWORD *)(v0 + 88) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v20 + 4, v20 + 12);
    sub_100018D80();

    *(_WORD *)(v20 + 12) = 2080;
    swift_getErrorValue(v18, v0 + 96, v0 + 56);
    v26 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    sub_100014B44(v26, v27, &v32);
    *(_QWORD *)(v0 + 104) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v20 + 14, v20 + 22);
    sub_1000061E8();
    sub_10003FFC0();
    sub_10003FFC0();
    _os_log_impl((void *)&_mh_execute_header, v15, type, "Failed to update activity for canonical id: %s - %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v31, 2);
    sub_10000A818(v31);
    sub_10000A818(v20);

    sub_10003FFC0();
  }
  else
  {
    sub_10003FFC0();

    sub_10003FFC0();
    sub_10003FFC0();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E070(uint64_t *a1, char a2, void *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v16;

  v5 = a2 & 1;
  v6 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v9 = a1[1];
  v11 = type metadata accessor for TaskPriority(0);
  sub_10000964C((uint64_t)v8, 1, 1, v11);
  v12 = swift_allocObject(&unk_1000C5060, 64, 7);
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_BYTE *)(v12 + 32) = v5;
  *(_QWORD *)(v12 + 40) = v10;
  *(_QWORD *)(v12 + 48) = v9;
  *(_QWORD *)(v12 + 56) = a3;
  swift_bridgeObjectRetain(v9);
  v13 = a3;
  v14 = sub_100043B28((uint64_t)v8, (uint64_t)&unk_1000D15C0, v12);
  return swift_release(v14);
}

uint64_t sub_10003E14C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 24) = a6;
  *(_QWORD *)(v7 + 32) = a7;
  *(_QWORD *)(v7 + 16) = a5;
  *(_BYTE *)(v7 + 48) = a4;
  return swift_task_switch(sub_10003E16C, 0, 0);
}

uint64_t sub_10003E16C()
{
  uint64_t v0;

  if (qword_1000CFA98 != -1)
    swift_once(&qword_1000CFA98, sub_1000479AC);
  *(_QWORD *)(v0 + 40) = qword_1000DDA78;
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return sub_1000184B8();
}

uint64_t sub_10003E1F8()
{
  uint64_t v0;

  sub_10004410C(*(_BYTE *)(v0 + 48) & 1);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_10003E234()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  NSString v3;
  NSString v4;

  v1 = *(void **)(v0 + 32);
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
    v2 = 0xE400000000000000;
  else
    v2 = 0xE300000000000000;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v4 = sub_10003FFC8();
  objc_msgSend(v1, "setObject:forKey:", v3, v4);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003E2D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v8;
  _QWORD v9[5];

  v9[3] = &type metadata for TVAppFeatureFlags;
  v9[4] = sub_10000A278();
  v8 = isFeatureEnabled(_:)(v9);
  sub_100007618(v9);
  if ((v8 & 1) != 0)
    sub_10002A6A8(a1, a2, a3, a4 & 1);
}

void sub_10003E360(uint64_t a1, void *a2, int a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD v53[23];
  _QWORD v54[24];

  v4 = v3;
  sub_10000738C(&qword_1000D0578);
  sub_100018BD0();
  __chkstk_darwin(v8);
  sub_10000CD48();
  v52 = v9;
  sub_10000738C((uint64_t *)&unk_1000D16E0);
  sub_100018BD0();
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000A7C4();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  __chkstk_darwin(v16);
  v19 = (char *)&v44 - v18;
  v20 = (uint64_t *)(*(_QWORD *)(a1 + 16) + qword_1000DDB70);
  v21 = v20[1];
  if (v21)
  {
    v50 = v17;
    v51 = a3;
    v22 = a2;
    v23 = v4;
    v24 = *v20;
    v25 = swift_bridgeObjectRetain(v21);
    v49 = v22;
    SportingEventSubscription.fullPayloadBaseURL.getter(v25);
    if (sub_100009658((uint64_t)v12, 1, v13) == 1)
    {
      swift_bridgeObjectRelease(v21);
      v26 = (uint64_t *)&unk_1000D16E0;
      v27 = v12;
LABEL_7:
      sub_10000A47C((uint64_t)v27, v26);
      goto LABEL_8;
    }
    v48 = v24;
    v28 = v14;
    v29 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v29(v19, v12, v13);
    sub_100009D5C((uint64_t)v23 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_subscriptionOperationFactory, (uint64_t)v53, &qword_1000D0C20);
    if (!v53[3])
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v13);
      swift_bridgeObjectRelease(v21);
      v26 = &qword_1000D0C20;
      v27 = v53;
      goto LABEL_7;
    }
    sub_10004008C(v54);
    v30 = type metadata accessor for TaskPriority(0);
    sub_10000964C(v52, 1, 1, v30);
    sub_100023E30((uint64_t)v54, (uint64_t)v53);
    v46 = (void (*)(char *, uint64_t, uint64_t))v29;
    v47 = v19;
    v31 = v28;
    v32 = v19;
    v33 = v50;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v50, v32, v13);
    v34 = *(unsigned __int8 *)(v28 + 80);
    v35 = (v34 + 224) & ~v34;
    v36 = v35 + v15;
    v37 = (v35 + v15) & 0xFFFFFFFFFFFFFFF8;
    v44 = (v37 + 31) & 0xFFFFFFFFFFFFFFF8;
    v45 = v36;
    v38 = (char *)swift_allocObject(&unk_1000C4FC0, v44 + 8, v34 | 7);
    v39 = &v38[v37];
    *((_QWORD *)v38 + 2) = 0;
    *((_QWORD *)v38 + 3) = 0;
    sub_10004008C(v38 + 32);
    v40 = v49;
    *((_QWORD *)v38 + 27) = v49;
    v46(&v38[v35], v33, v13);
    v38[v45] = v51 & 1;
    *((_QWORD *)v39 + 1) = v48;
    *((_QWORD *)v39 + 2) = v21;
    *(_QWORD *)&v38[v44] = v23;
    v41 = v40;
    v42 = v23;
    v43 = sub_100043B48(v52, (uint64_t)&unk_1000D1580, (uint64_t)v38);
    swift_release(v43);
    sub_100023FB4(v54);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v47, v13);
  }
LABEL_8:
  sub_10000A668();
}

uint64_t sub_10003E634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = v11;
  *(_QWORD *)(v8 + 40) = a6;
  *(_QWORD *)(v8 + 48) = a8;
  *(_BYTE *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = a5;
  *(_QWORD *)(v8 + 16) = a1;
  return swift_task_switch(sub_10003E664, 0, 0);
}

uint64_t sub_10003E664()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v1 = *(_BYTE *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 72) = v4;
  v5 = *(_OWORD *)(v0 + 56);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 40) = v1;
  *(_QWORD *)(v4 + 48) = v2;
  *(_OWORD *)(v4 + 56) = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v6;
  *v6 = v0;
  v6[1] = sub_10003E720;
  sub_100018E50();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10003E720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000189A0();
  v2 = *(_QWORD *)(v1 + 72);
  sub_1000185EC();
  swift_task_dealloc(v2);
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003E754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v38 = a8;
  v33[1] = a7;
  v35 = a1;
  v34 = sub_10000738C(&qword_1000D1588);
  v8 = *(_QWORD *)(v34 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v34);
  v10 = sub_10000738C(&qword_1000D1590);
  v11 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  v37 = v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  SportingEventSubscription.canonicalId.getter(v12);
  v16 = v15;
  sub_100023928();
  swift_bridgeObjectRelease(v16);
  v17 = v42;
  v18 = v43;
  sub_1000073CC(v41, v42);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  v40 = v19;
  v39 = 0;
  v20 = sub_10000738C(&qword_1000D0B18);
  sub_100031668((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.replaceError(with:)(&v39, v20, v21);
  swift_release(v19);
  sub_100007618(v41);
  v22 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v35, v34);
  v23 = *(unsigned __int8 *)(v8 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = swift_allocObject(&unk_1000C4FE8, v24 + v9, v23 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v25 + v24, (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
  sub_100031668(&qword_1000D1598, &qword_1000D1590, (uint64_t)&protocol conformance descriptor for Publishers.ReplaceError<A>);
  v26 = v36;
  v28 = Publisher<>.sink(receiveValue:)(sub_10003FD3C, v25, v36, v27);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v26);
  v29 = v38 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellables;
  swift_beginAccess(v38 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellables, v41, 33, 0);
  v30 = sub_10000738C(&qword_1000D0B28);
  sub_100031668(&qword_1000D0B30, &qword_1000D0B28, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v29, v30, v31);
  swift_endAccess(v41);
  return swift_release(v28);
}

uint64_t sub_10003E9F4(char *a1)
{
  uint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_10000738C(&qword_1000D1588);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

uint64_t sub_10003EA38(void *a1, void *a2)
{
  id v3;
  id v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  char v22;
  uint64_t v24;

  if (!a2)
    return 0;
  if (!a1)
    return 1;
  v3 = a2;
  v4 = a1;
  v24 = dispatch thunk of SportingEventPlay.stamp.getter(v4);
  v6 = v5;
  v7 = dispatch thunk of SportingEventPlay.stamp.getter(v24);
  v9 = v8;
  v10 = dispatch thunk of SportingEventPlay.id.getter(v7);
  if (v11)
    v12 = v10;
  else
    v12 = 48;
  if (v11)
    v13 = v11;
  else
    v13 = 0xE100000000000000;
  v14 = dispatch thunk of SportingEventPlay.id.getter(v10);
  if (v15)
    v16 = v14;
  else
    v16 = 48;
  if (v15)
    v17 = v15;
  else
    v17 = 0xE100000000000000;
  if (v12 == v16 && v13 == v17)
  {
    sub_1000400A0();

    return 0;
  }
  if ((v9 & 1) != 0)
    v19 = 0;
  else
    v19 = v7;
  v20 = v24;
  if ((v6 & 1) != 0)
    v20 = 0;
  v21 = v19 < v20;
  v22 = sub_100040098(v12, v13, v16, v17);
  sub_10001883C();
  swift_bridgeObjectRelease(v17);

  if ((v22 & 1) != 0)
    return 0;
  return v21;
}

uint64_t sub_10003EB58(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_getObjectType(v4);
  type metadata accessor for SportsSubscriptionState(0);
  result = static SportsSubscriptionState.activeSubscriptionEventId.getter();
  if (v9)
  {
    v10 = result;
    v11 = v9;
    v12 = sub_10003FFF0();
    if (v10 == v12 && v11 == v13)
    {
      sub_1000061E8();
      sub_100018D80();
    }
    else
    {
      v15 = sub_100040098(v10, v11, v12, v13);
      sub_1000061E8();
      result = sub_100018D80();
      if ((v15 & 1) == 0)
        return result;
    }
    if ((a4 & 1) != 0)
      v16 = 0x4E4F4953534553;
    else
      v16 = 0x505041205654;
    if ((a4 & 1) != 0)
      v17 = 0xE700000000000000;
    else
      v17 = 0xE600000000000000;
    if (qword_1000CFAB8 != -1)
      swift_once(&qword_1000CFAB8, sub_10006CC6C);
    v18 = sub_1000187DC();
    sub_1000096EC(v18, (uint64_t)qword_1000DDAA0);
    v19 = sub_100018A3C();
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)sub_100018554(12);
      v23 = sub_100018554(32);
      v26 = v23;
      *(_DWORD *)v22 = 136315138;
      sub_100018A3C();
      sub_100014B44(v16, v17, &v26);
      v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "EVENT TYPE: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1);
      sub_10000A818(v23);
      sub_10000A818((uint64_t)v22);

    }
    else
    {

      sub_1000400A0();
    }
    return sub_10008945C(a1, a2);
  }
  return result;
}

void sub_10003ED8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  _QWORD v63[6];

  v6 = v4;
  v58 = a1;
  v59 = a2;
  v9 = type metadata accessor for SportingEventProgressStatus(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100040030();
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AE14(v6 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_performance, (uint64_t)v63);
  v15 = sub_1000073CC(v63, v63[3]);
  v57 = v15;
  if (a3)
  {
    v16 = *(_QWORD *)(a3 + 16);
    v17 = *(_QWORD *)(v16 + 48);
    v56 = *(_QWORD *)(v16 + 40);
    swift_bridgeObjectRetain(v17);
  }
  else
  {
    v56 = 0;
    v17 = 0;
  }
  v55 = *(_QWORD *)(v6 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_notificationReceiptTime);
  Date.init()(v15);
  sub_100080BA0();
  v54 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (!a3)
  {
    v34 = 0;
    v22 = 0;
    v35 = 0;
    v31 = 0;
    v33 = 0;
    v52 = 0;
    v53 = 0;
    v36 = *(_BYTE *)(v6 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_isLowCapLiveActivity);
    if (!a4)
      goto LABEL_17;
    goto LABEL_16;
  }
  sub_100080BA0();
  v51 = v19;
  v20 = *(_QWORD **)(a3 + 16);
  v21 = *(_QWORD *)(a3 + 24);
  HIDWORD(v49) = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_isLowCapLiveActivity);
  v22 = v20[4];
  v50 = v20[3];
  v52 = v20[2];
  v23 = *(_QWORD *)((char *)v20 + *(_QWORD *)(*v20 + 184));
  swift_bridgeObjectRetain(v22);
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v43 = v23;
    else
      v43 = v23 & 0xFFFFFFFFFFFFFF8;
    sub_10000A834();
    v24 = _CocoaArrayWrapper.endIndex.getter(v43);
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    sub_10000A834();
  }
  v53 = v21;
  if (v24)
  {
    v25 = __OFSUB__(v24, 1);
    v26 = v24 - 1;
    if (v25)
    {
      __break(1u);
    }
    else
    {
      sub_10007DEC8(v26, (v23 & 0xC000000000000001) == 0, v23);
      if ((v23 & 0xC000000000000001) == 0)
      {
        v27 = *(id *)(v23 + 8 * v26 + 32);
LABEL_11:
        v28 = v27;
        v29 = sub_1000061E8();
        SportingEvent.progressStatus.getter(v29);

        v31 = SportingEventProgressStatus.rawValue.getter(v30);
        v33 = v32;
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v5, v9);
        goto LABEL_15;
      }
    }
    v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v23);
    goto LABEL_11;
  }
  sub_1000061E8();
  v31 = 0;
  v33 = 0;
LABEL_15:
  v34 = v51;
  v35 = v50;
  v36 = BYTE4(v49);
  if (!a4)
  {
LABEL_17:
    v62 = 0;
    memset(v61, 0, sizeof(v61));
    goto LABEL_18;
  }
LABEL_16:
  v60 = a4;
  swift_errorRetain(a4);
  v37 = sub_10000738C((uint64_t *)&unk_1000D1690);
  v38 = sub_10000738C(&qword_1000D1570);
  if ((swift_dynamicCast(v61, &v60, v37, v38, 6) & 1) == 0)
    goto LABEL_17;
LABEL_18:
  LOBYTE(v48) = 1;
  LOBYTE(v45) = v36 ^ 1;
  LOBYTE(v47) = a3 == 0;
  LOBYTE(v46) = a3 == 0;
  LOBYTE(v44) = a3 == 0;
  sub_10009271C(v58, v59, v56, v17, v55, 0, v54, 0, v34, v44, v35, v22, v45, v52, v46, v53, v47, 0, v48,
    v31,
    v33,
    0,
    0,
    (uint64_t)v61,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    (uint64_t)v57,
    v58,
    v59,
    v60);
  v40 = v39;
  v42 = v41;
  sub_1000061E8();
  swift_bridgeObjectRelease(v22);
  sub_100018D80();
  sub_10000A47C((uint64_t)v61, &qword_1000D1408);
  sub_100092BD8(v40, v42 & 0x101);
  swift_bridgeObjectRelease(v40);
  sub_100007618(v63);
  sub_10000A668();
}

void sub_10003F11C()
{
  _swift_stdlib_reportUnimplementedInitializer("sportsd.ApsMessageProcessingOperation", 37, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_10003F154()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_message));
  sub_10004000C(OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_dataRepository);
  sub_10004000C(OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_playsStore);
  sub_10000A47C(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateable, &qword_1000D1538);
  sub_10000A47C(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_subscriptionOperationFactory, &qword_1000D0C20);
  sub_100007618((_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_performance));
  sub_10004000C(OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellable);
  sub_10003F4BC(*(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateCompletion), *(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityUpdateCompletion + 8));
  sub_10000A47C(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_processDate, &qword_1000D0570);
  sub_10004000C(OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_activityCapUtility);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_cancellables));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR____TtC7sportsd29ApsMessageProcessingOperation_messageVersion
                                             + 8));
}

id sub_10003F230()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApsMessageProcessingOperation(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10003F34C()
{
  return type metadata accessor for ApsMessageProcessingOperation(0);
}

uint64_t type metadata accessor for ApsMessageProcessingOperation(uint64_t a1)
{
  uint64_t result;

  result = qword_1000D1528;
  if (!qword_1000D1528)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApsMessageProcessingOperation);
  return result;
}

void sub_10003F38C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "(";
  v4[4] = &unk_1000A0D38;
  v4[5] = &unk_1000A0D50;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = &unk_1000A0D68;
  v4[8] = &unk_1000A0D80;
  v4[9] = &unk_1000A0D98;
  sub_10003F468(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = &unk_1000A0D98;
    swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 184);
  }
}

void sub_10003F468(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000D07C8)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000D07C8);
  }
}

uint64_t sub_10003F4BC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

_QWORD *sub_10003F4CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(__int128 *, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];
  __int128 v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v3 = v1;
  v5 = *v1;
  v6 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v53 = *(_QWORD *)(v6 - 8);
  v54 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000738C(&qword_1000CFDC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.Encoding(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55[0] = 7565409;
  v55[1] = 0xE300000000000000;
  AnyHashable.init<A>(_:)(&v56, v55, &type metadata for String, &protocol witness table for String, v14);
  sub_1000756B4((uint64_t)&v56, a1, &v59);
  swift_bridgeObjectRelease(a1);
  sub_100018254((uint64_t)&v56);
  if (!v60)
  {
    sub_10000A47C((uint64_t)&v59, (uint64_t *)&unk_1000CFF70);
LABEL_11:
    v31 = sub_10000738C(&qword_1000D1548);
    sub_100031668(&qword_1000D1550, &qword_1000D1548, (uint64_t)&unk_1000A4CD0);
    v33 = swift_allocError(v31, v32, 0, 0);
    v35 = 0xD000000000000014;
    v36 = "Key is missing - aps";
LABEL_14:
    *v34 = v35;
    v34[1] = (unint64_t)(v36 - 32) | 0x8000000000000000;
    swift_willThrow(v33);
    goto LABEL_15;
  }
  v61 = v5;
  v17 = sub_10000738C(&qword_1000D1558);
  if ((swift_dynamicCast(v55, &v59, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
  {
    v5 = v61;
    goto LABEL_11;
  }
  v52 = v2;
  v18 = v55[0];
  sub_1000754DC(0x7472656C61, 0xE500000000000000, v55[0], &v56);
  swift_bridgeObjectRelease(v18);
  if (!v57)
  {
    sub_10000A47C((uint64_t)&v56, (uint64_t *)&unk_1000CFF70);
    goto LABEL_13;
  }
  if ((swift_dynamicCast(&v59, &v56, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
  {
LABEL_13:
    v5 = v61;
    v37 = sub_10000738C(&qword_1000D1548);
    sub_100031668(&qword_1000D1550, &qword_1000D1548, (uint64_t)&unk_1000A4CD0);
    v33 = swift_allocError(v37, v38, 0, 0);
    v35 = 0xD000000000000016;
    v36 = "Key is missing - alert";
    goto LABEL_14;
  }
  v19 = v59;
  sub_1000754DC(2036625250, 0xE400000000000000, v59, &v56);
  swift_bridgeObjectRelease(v19);
  if (!v57)
  {
    sub_10000A47C((uint64_t)&v56, (uint64_t *)&unk_1000CFF70);
    goto LABEL_18;
  }
  v20 = swift_dynamicCast(&v59, &v56, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((v20 & 1) == 0)
  {
LABEL_18:
    v40 = sub_10000738C(&qword_1000D1548);
    sub_100031668(&qword_1000D1550, &qword_1000D1548, (uint64_t)&unk_1000A4CD0);
    v27 = swift_allocError(v40, v41, 0, 0);
    v29 = 0xD000000000000015;
    v30 = "Key is missing - body";
    goto LABEL_19;
  }
  v21 = v59;
  static String.Encoding.utf8.getter(v20);
  v22 = String.data(using:allowLossyConversion:)(v16, 0, v21, *((_QWORD *)&v21 + 1));
  v24 = v23;
  swift_bridgeObjectRelease(*((_QWORD *)&v21 + 1));
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (v24 >> 60 == 15)
  {
    v25 = sub_10000738C(&qword_1000D1548);
    sub_100031668(&qword_1000D1550, &qword_1000D1548, (uint64_t)&unk_1000A4CD0);
    v27 = swift_allocError(v25, v26, 0, 0);
    v29 = 0xD000000000000016;
    v30 = "Unexpected data format";
LABEL_19:
    *v28 = v29;
    v28[1] = (unint64_t)(v30 - 32) | 0x8000000000000000;
    swift_willThrow(v27);
    v5 = v61;
    goto LABEL_15;
  }
  v42 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v43 = JSONDecoder.init()();
  static SportsJSONContext.Property<A>.initFailureObserver.getter();
  v44 = type metadata accessor for DefaultSportsJSONInitFailureObserver(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  v45 = DefaultSportsJSONInitFailureObserver.init()();
  v57 = v44;
  v58 = &protocol witness table for DefaultSportsJSONInitFailureObserver;
  *(_QWORD *)&v56 = v45;
  v46 = (void (*)(__int128 *, _QWORD))dispatch thunk of JSONDecoder.userInfo.modify(&v59);
  v47 = sub_10000738C(&qword_1000CFDD8);
  Dictionary<>.subscript.setter(&v56, v11, v47);
  v46(&v59, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v8, enum case for JSONDecoder.DateDecodingStrategy.secondsSince1970(_:), v54);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v8);
  v48 = sub_10000738C(&qword_1000D1560);
  sub_100031668(&qword_1000D1568, &qword_1000D1560, (uint64_t)&unk_1000A4A68);
  v49 = v22;
  v50 = v52;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v48, v22, v24, v48);
  v5 = v61;
  if (!v50)
  {
    v3[2] = v56;
    v51 = Data.count.getter(v49, v24);
    swift_release(v43);
    sub_1000388FC(v49, v24);
    v3[3] = v51;
    return v3;
  }
  swift_release(v43);
  sub_1000388FC(v49, v24);
LABEL_15:
  swift_deallocPartialClassInstance(v3, v5, 32, 7);
  return v3;
}

uint64_t sub_10003FA88()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003FAAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10003FAE8(uint64_t a1)
{
  uint64_t v1;

  sub_10003CDBC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10003FAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = sub_10000A7C4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 224) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  sub_100040078();
  sub_100007618((_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  sub_100007618((_QWORD *)(v0 + 88));
  sub_100007618((_QWORD *)(v0 + 128));
  sub_100007618((_QWORD *)(v0 + 168));
  swift_release(*(_QWORD *)(v0 + 208));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 16));

  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_10003FBCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(sub_10000A7C4() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 224) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = v0 + v3;
  v6 = *(_BYTE *)(v0 + v4);
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + v0 + 8);
  v8 = (_QWORD *)swift_task_alloc(dword_1000D157C);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_10003FC94;
  sub_100040058();
  return sub_10003E634(v9, v10, v11, v12, v13, v5, v6, v7);
}

uint64_t sub_10003FC94()
{
  uint64_t v0;

  sub_1000189A0();
  sub_1000185EC();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003FCC0(uint64_t a1)
{
  uint64_t v1;

  return sub_10003E754(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10003FCD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000738C(&qword_1000D1588);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003FD3C(char *a1)
{
  sub_10000738C(&qword_1000D1588);
  return sub_10003E9F4(a1);
}

uint64_t sub_10003FD7C()
{
  uint64_t v0;

  sub_100040078();

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10003FDB4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_BYTE *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = (_QWORD *)swift_task_alloc(dword_1000D15A4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10003FF60;
  sub_100040058();
  return sub_10003D9C0(v5, v6, v7, v8, v9, v2, v3);
}

uint64_t sub_10003FE34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003FE58(uint64_t *a1)
{
  uint64_t v1;

  return sub_10003E070(a1, *(_BYTE *)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t sub_10003FE64()
{
  unint64_t result;

  result = qword_1000D15B0;
  if (!qword_1000D15B0)
  {
    result = swift_getWitnessTable(&unk_1000A52A4, &unk_1000C9DD8);
    atomic_store(result, &qword_1000D15B0);
  }
  return result;
}

uint64_t sub_10003FEA0()
{
  uint64_t v0;

  sub_100040078();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10003FED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc(dword_1000D15BC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10003FF60;
  return sub_10003E14C(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10003FF64()
{
  uint64_t v0;

  return swift_release_n(v0, 2);
}

uint64_t sub_10003FF70()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_10003FF7C(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10003FF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v5, v4, a4);
}

uint64_t sub_10003FF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, v8, a4);
}

uint64_t sub_10003FFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, v8, a4);
}

void sub_10003FFB4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100014B44(a1, a2, (uint64_t *)va);
}

uint64_t sub_10003FFC0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

NSString sub_10003FFC8()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10003FFDC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100056318(v1, v0);
}

uint64_t sub_10003FFE8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10003FFF0()
{
  return SportingEvent.canonicalId.getter();
}

uint64_t sub_10003FFF8()
{
  return swift_slowAlloc(32, -1);
}

uint64_t sub_100040004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_10004000C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100040048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v8, v7, a4);
}

uint64_t sub_100040070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_100040078()
{
  uint64_t v0;

  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100040080()
{
  return Logger.logObject.getter();
}

void *sub_10004008C(void *a1)
{
  uint64_t v1;

  return memcpy(a1, (const void *)(v1 + 72), 0xB8uLL);
}

uint64_t sub_100040098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_1000400A0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_1000400AC()
{
  return SportingEvent.progressStatus.getter();
}

uint64_t sub_1000400B8@<X0>(uint64_t (*a1)(_QWORD)@<X8>)
{
  return a1(0);
}

void sub_1000400C4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_100014B44(a1, a2, (uint64_t *)(v2 - 72));
}

uint64_t sub_1000400D0()
{
  return SportingEvent.version.getter();
}

void sub_1000400D8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t (*v88)(char *, uint64_t);
  uint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  void *v102;
  uint64_t v103;
  char *v104;
  id v105;
  id v106;
  id v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  char *v113;
  uint64_t v114;
  char *v115;
  id v116;
  NSString v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  NSString v123;
  id v124;
  uint64_t v125;
  NSString v126;
  id v127;
  uint64_t v128;
  id v129;
  BOOL v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t *v133;
  uint64_t v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  id v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  sub_10000738C((uint64_t *)&unk_1000D16E0);
  sub_100018BD0();
  __chkstk_darwin(v4);
  sub_10000CD48();
  v170 = v5;
  v171 = sub_100043390();
  v140 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v145 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100043334();
  __chkstk_darwin(v7);
  sub_100043340();
  v139 = v8;
  sub_100043334();
  __chkstk_darwin(v9);
  v11 = (char *)&v134 - v10;
  sub_10000738C(&qword_1000D0570);
  sub_100018BD0();
  __chkstk_darwin(v12);
  v14 = (char *)&v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  sub_100043340();
  v169 = v16;
  sub_100043334();
  __chkstk_darwin(v17);
  sub_100043340();
  v168 = v18;
  sub_100043334();
  __chkstk_darwin(v19);
  sub_100043340();
  v167 = v20;
  sub_100043334();
  __chkstk_darwin(v21);
  sub_100043340();
  v166 = v22;
  sub_100043334();
  __chkstk_darwin(v23);
  sub_100043340();
  v165 = v24;
  sub_100043334();
  __chkstk_darwin(v25);
  sub_100043340();
  v164 = v26;
  sub_100043334();
  __chkstk_darwin(v27);
  sub_100043340();
  v163 = v28;
  sub_100043334();
  __chkstk_darwin(v29);
  v162 = (uint64_t)&v134 - v30;
  v31 = (int *)type metadata accessor for ApiRequestMetrics(0);
  sub_100018BD0();
  __chkstk_darwin(v32);
  sub_10000A7D4();
  v35 = v34 - v33;
  type metadata accessor for Date(0);
  sub_1000432F8(a2, 1);
  v36 = a2 + v31[5];
  sub_1000432F8(v36, 1);
  v159 = a2 + v31[8];
  sub_1000432F8(v159, 1);
  v158 = a2 + v31[9];
  sub_1000432F8(v158, 1);
  v157 = a2 + v31[10];
  sub_1000432F8(v157, 1);
  sub_1000433A4(v31[12]);
  v155 = v37;
  v156 = a2 + v31[13];
  sub_1000432F8(v156, 1);
  v38 = a2 + v31[14];
  v39 = type metadata accessor for URL(0);
  v154 = v38;
  sub_10000964C(v38, 1, 1, v39);
  v40 = a2 + v31[15];
  sub_1000432F8(v40, 1);
  v152 = a2 + v31[16];
  sub_1000432F8(v152, 1);
  v151 = a2 + v31[17];
  sub_1000432F8(v151, 1);
  v41 = a2 + v31[18];
  *(_QWORD *)v41 = 0;
  *(_BYTE *)(v41 + 8) = 1;
  sub_1000433A4(v31[19]);
  v146 = v42;
  sub_1000433A4(v31[20]);
  v147 = v43;
  sub_1000433A4(v31[21]);
  v148 = v44;
  sub_1000433A4(v31[22]);
  v149 = v45;
  sub_1000433A4(v31[23]);
  v150 = v46;
  v48 = sub_100043304(v47, "response");
  v153 = v40;
  if (v48)
  {
    v49 = v48;
    v50 = objc_opt_self(NSHTTPURLResponse);
    v48 = (id)swift_dynamicCastObjCClass(v49, v50);
    v172 = v48;
    if (v48)
      goto LABEL_5;

  }
  v172 = 0;
LABEL_5:
  v51 = v166;
  v52 = sub_100043304((uint64_t)v48, "connectEndDate");
  v160 = v36;
  v161 = v14;
  if (v52)
  {
    v53 = v52;
    v54 = v162;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v55 = v54;
    v56 = 0;
    v57 = v167;
  }
  else
  {
    v56 = 1;
    v57 = v167;
    v55 = v162;
  }
  v58 = 1;
  v59 = sub_1000432F8(v55, v56);
  v60 = sub_100043304(v59, "connectStartDate");
  if (v60)
  {
    v61 = v60;
    v62 = v163;
    sub_1000433EC();

    v63 = v62;
    v58 = 0;
  }
  else
  {
    v63 = v163;
  }
  v64 = 1;
  v65 = sub_1000432F8(v63, v58);
  v136 = sub_100043304(v65, "countOfRequestBodyBytesSent");
  v144 = sub_100043304((uint64_t)v136, "countOfResponseBodyBytesReceived");
  v66 = sub_100043304((uint64_t)v144, "domainLookupEndDate");
  if (v66)
  {
    v67 = v66;
    v68 = v164;
    sub_1000433CC();

    v69 = v68;
    v64 = 0;
  }
  else
  {
    v69 = v164;
  }
  v70 = 1;
  v71 = sub_1000432F8(v69, v64);
  v72 = sub_100043304(v71, "domainLookupStartDate");
  if (v72)
  {
    v73 = v72;
    v74 = v165;
    sub_1000433EC();

    v75 = v74;
    v70 = 0;
  }
  else
  {
    v75 = v165;
  }
  v76 = 1;
  v77 = sub_1000432F8(v75, v70);
  v78 = sub_100043304(v77, "fetchStartDate");
  if (v78)
  {
    v79 = v78;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v76 = 0;
  }
  v80 = 1;
  sub_1000432F8(v51, v76);
  v81 = objc_msgSend(a1, "isReusedConnection");
  v142 = sub_100018288(a1, (SEL *)&selRef_networkProtocolName);
  v141 = v82;
  v83 = sub_100043304(v142, "requestStartDate");
  v143 = v81;
  if (v83)
  {
    v84 = v83;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v80 = 0;
  }
  v85 = 1;
  v86 = sub_1000432F8(v57, v80);
  v87 = sub_100043304(v86, "request");
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v87);

  URLRequest.url.getter();
  v88 = *(uint64_t (**)(char *, uint64_t))(v140 + 8);
  v89 = v88(v11, v171);
  v90 = sub_100043304(v89, "responseEndDate");
  if (v90)
  {
    v91 = v90;
    v92 = v168;
    sub_1000433CC();

    v93 = v92;
    v85 = 0;
  }
  else
  {
    v93 = v168;
  }
  v94 = 1;
  v95 = sub_1000432F8(v93, v85);
  v96 = sub_100043304(v95, "responseStartDate");
  if (v96)
  {
    v97 = v96;
    v98 = v169;
    sub_1000433CC();

    v94 = 0;
  }
  else
  {
    v98 = v169;
  }
  v99 = 1;
  v100 = sub_1000432F8(v98, v94);
  v101 = sub_100043304(v100, "secureConnectionStartDate");
  if (v101)
  {
    v102 = v101;
    v103 = (uint64_t)v161;
    sub_1000433EC();

    v99 = 0;
  }
  else
  {
    v103 = (uint64_t)v161;
  }
  v104 = v139;
  v105 = (id)sub_1000432F8(v103, v99);
  v106 = v172;
  if (v172)
  {
    v105 = objc_msgSend(v172, "statusCode");
    v135 = v105;
  }
  else
  {
    v135 = 0;
  }
  v107 = sub_100043304((uint64_t)v105, "request");
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v107);

  v140 = URLRequest.httpMethod.getter();
  v139 = v108;
  v109 = v104;
  v110 = v171;
  v88(v109, v171);
  v138 = sub_100018288(a1, (SEL *)&selRef_remoteAddress);
  v137 = v111;
  v112 = sub_100043304(v138, "request");
  v113 = v145;
  static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v112);

  v114 = URLRequest.allHTTPHeaderFields.getter();
  v88(v113, v110);
  if (!v114)
  {
    v171 = 0;
    v145 = 0;
    if (v106)
      goto LABEL_35;
LABEL_38:

    v134 = 0;
    v121 = 0;
    v120 = 0;
    goto LABEL_46;
  }
  v171 = sub_10007562C(0x6567412D72657355, 0xEA0000000000746ELL, v114);
  v145 = v115;
  sub_1000061E8();
  if (!v106)
    goto LABEL_38;
LABEL_35:
  v116 = v106;
  v117 = String._bridgeToObjectiveC()();
  v118 = objc_msgSend(v116, "valueForHTTPHeaderField:", v117);

  if (v118)
  {
    v106 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v118);
    v120 = v119;

  }
  else
  {
    v106 = 0;
    v120 = 0;
  }
  v122 = v116;
  v123 = String._bridgeToObjectiveC()();
  v124 = sub_1000433B8((uint64_t)v123);

  if (v124)
  {
    v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v124);
    v121 = v125;

  }
  else
  {
    v126 = String._bridgeToObjectiveC()();
    v127 = sub_1000433B8((uint64_t)v126);

    if (v127)
    {
      v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
      v121 = v128;

    }
    else
    {

      v134 = 0;
      v121 = 0;
    }
  }
  v103 = (uint64_t)v161;
LABEL_46:
  v129 = v136;
  v130 = v172 == 0;
  sub_10004332C(v162, v35);
  sub_10004332C(v163, v35 + v31[5]);
  *(_QWORD *)(v35 + v31[6]) = v129;
  *(_QWORD *)(v35 + v31[7]) = v144;
  sub_10004332C(v164, v35 + v31[8]);
  sub_10004332C(v165, v35 + v31[9]);
  sub_10004332C(v166, v35 + v31[10]);
  *(_BYTE *)(v35 + v31[11]) = v143;
  sub_1000433E0((_QWORD *)(v35 + v31[12]));
  sub_10004332C(v167, v35 + v31[13]);
  sub_100038CB4(v170, v35 + v31[14], (uint64_t *)&unk_1000D16E0);
  sub_10004332C(v168, v35 + v31[15]);
  sub_10004332C(v169, v35 + v31[16]);
  sub_10004332C(v103, v35 + v31[17]);
  v131 = v35 + v31[18];
  *(_QWORD *)v131 = v135;
  *(_BYTE *)(v131 + 8) = v130;
  sub_1000433E0((_QWORD *)(v35 + v31[19]));
  sub_1000433E0((_QWORD *)(v35 + v31[20]));
  sub_1000433E0((_QWORD *)(v35 + v31[21]));
  v132 = (_QWORD *)(v35 + v31[22]);
  *v132 = v106;
  v132[1] = v120;
  v133 = (uint64_t *)(v35 + v31[23]);
  *v133 = v134;
  v133[1] = v121;
  sub_100043324(a2);
  sub_100043324(v160);
  sub_100043324(v159);
  sub_100043324(v158);
  sub_100043324(v157);
  swift_bridgeObjectRelease(*(_QWORD *)(v155 + 8));
  sub_100043324(v156);
  sub_100038C8C(v154, (uint64_t *)&unk_1000D16E0);
  sub_100043324(v153);
  sub_100043324(v152);
  sub_100043324(v151);
  sub_100043318((uint64_t)&v173);
  sub_100043318((uint64_t)&v174);
  sub_100043318((uint64_t)&v175);
  sub_100043318((uint64_t)&v176);
  sub_100043318((uint64_t)&v177);
  sub_100038910(v35, a2, type metadata accessor for ApiRequestMetrics);
  sub_10000A668();
}

void sub_100040C1C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  objc_class *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  objc_super v30;

  v5 = sub_10000738C(&qword_1000D1660);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ApiRequestMetrics(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = __chkstk_darwin(v11).n128_u64[0];
  v14 = (char *)&v30 - v13;
  v15 = objc_msgSend(a3, "transactionMetrics", v12);
  v16 = sub_100043004();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if (!((unint64_t)v17 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(v17);
    sub_10000964C((uint64_t)v7, 1, 1, v8);
    goto LABEL_15;
  }
  if (v17 < 0)
    v29 = v17;
  else
    v29 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v17);
  v18 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v17);
  if (!v18)
    goto LABEL_14;
LABEL_3:
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    sub_10007DEC8(v20, (v17 & 0xC000000000000001) == 0, v17);
    if ((v17 & 0xC000000000000001) == 0)
    {
      v21 = *(id *)(v17 + 8 * v20 + 32);
      goto LABEL_6;
    }
  }
  v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v17);
LABEL_6:
  v22 = v21;
  swift_bridgeObjectRelease(v17);
  v23 = v22;
  sub_1000400D8(v23, (uint64_t)v7);
  sub_10000964C((uint64_t)v7, 0, 1, v8);

  if (sub_100009658((uint64_t)v7, 1, v8) == 1)
  {
LABEL_15:
    sub_100038C8C((uint64_t)v7, &qword_1000D1660);
    return;
  }
  sub_100038910((uint64_t)v7, (uint64_t)v14, type metadata accessor for ApiRequestMetrics);
  v24 = objc_msgSend(a2, "response");
  if (v24)
  {
    v25 = v24;
    sub_100038730((uint64_t)v14, (uint64_t)v10, type metadata accessor for ApiRequestMetrics);
    v26 = (objc_class *)sub_10000738C(&qword_1000D16D8);
    v27 = objc_allocWithZone(v26);
    sub_100038730((uint64_t)v10, (uint64_t)v27 + *(_QWORD *)((swift_isaMask & *v27) + 0x58), type metadata accessor for ApiRequestMetrics);
    v30.receiver = v27;
    v30.super_class = v26;
    v28 = objc_msgSendSuper2(&v30, "init");
    sub_100038708((uint64_t)v10, type metadata accessor for ApiRequestMetrics);
    sub_100040EEC(v28);

  }
  sub_100038708((uint64_t)v14, type metadata accessor for ApiRequestMetrics);
}

void sub_100040EEC(void *a1)
{
  void *v1;
  _BYTE v3[24];

  sub_1000433D4((uint64_t)&unk_1000D15D0, (uint64_t)v3);
  objc_setAssociatedObject(v1, &unk_1000D15D0, a1, (void *)1);
  swift_endAccess(v3);

}

id sub_100040FD0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AMSTaskDelegate();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_100041024()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AMSTaskDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AMSTaskDelegate()
{
  return objc_opt_self(_TtC7sportsdP33_A8771DFE83AFD6B69A2F0EF64D464ABD15AMSTaskDelegate);
}

uint64_t sub_100041078()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  sub_1000433D4((uint64_t)&unk_1000D15D0, (uint64_t)v6);
  v1 = objc_getAssociatedObject(v0, &unk_1000D15D0);
  swift_endAccess(v6);
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(v1);
    swift_unknownObjectRelease(v1);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100038CB4((uint64_t)v5, (uint64_t)v6, (uint64_t *)&unk_1000CFF70);
  if (v7)
  {
    v2 = sub_10000738C(&qword_1000D16D8);
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, v2, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_100038C8C((uint64_t)v6, (uint64_t *)&unk_1000CFF70);
    return 0;
  }
}

void sub_10004115C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;

  if (a1)
  {
    v2 = objc_opt_self(NSHTTPURLResponse);
    v3 = swift_dynamicCastObjCClass(a1, v2);
    if (v3)
    {
      v4 = (void *)v3;
      v5 = qword_1000CFAC0;
      v6 = a1;
      if (v5 != -1)
        swift_once(&qword_1000CFAC0, sub_10006CC88);
      v7 = sub_1000187DC();
      sub_1000096EC(v7, (uint64_t)qword_1000DDAB8);
      v62 = v6;
      v8 = Logger.logObject.getter(v62);
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)sub_100018554(12);
        v11 = sub_100018554(32);
        v68 = v11;
        *(_DWORD *)v10 = 136315138;
        v12 = String._bridgeToObjectiveC()();
        v13 = objc_msgSend(v4, "valueForHTTPHeaderField:", v12);

        if (v13)
        {
          v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          v16 = v15;

        }
        else
        {
          v16 = 0xE400000000000000;
          v14 = 1701736270;
        }
        sub_100014B44(v14, v16, &v68);
        v67 = v33;
        v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v10 + 4, v10 + 12);
        sub_100043388(v34, v35, v36, v37, v38, v39, v40, v41, v58, v62);
        sub_100043388(v42, v43, v44, v45, v46, v47, v48, v49, v60, v65);
        swift_bridgeObjectRelease(v16);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "X-Apple-Jingle-Correlation-Key is %s", v10, 0xCu);
        swift_arrayDestroy(v11, 1);
        sub_10000A818(v11);
        v50 = sub_10000A818((uint64_t)v10);
        sub_100043388(v50, v51, v52, v53, v54, v55, v56, v57, v61, v66);

      }
      else
      {

        sub_100043388(v17, v18, v19, v20, v21, v22, v23, v24, v58, v62);
        sub_100043388(v25, v26, v27, v28, v29, v30, v31, v32, v59, v63);

      }
    }
  }
}

void sub_100041380(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, _QWORD *a5@<X6>, uint64_t *a6@<X8>)
{
  _BYTE *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v42;
  _QWORD v43[3];
  _BYTE v44[8];
  uint64_t v45;

  sub_10000738C(&qword_1000D1660);
  sub_100018BD0();
  __chkstk_darwin(v12);
  sub_10000A7D4();
  v15 = v14 - v13;
  v16 = type metadata accessor for ApiAgentError(0);
  sub_100018BD0();
  __chkstk_darwin(v17);
  sub_100024034();
  v18 = *a1;
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v19 = sub_1000187DC();
  sub_1000096EC(v19, (uint64_t)qword_1000DDAB8);
  swift_errorRetain(v18);
  sub_10004334C();
  swift_errorRetain(v18);
  v20 = sub_10004334C();
  v21 = Logger.logObject.getter(v20);
  v40 = static os_log_type_t.error.getter();
  v42 = a4;
  if (os_log_type_enabled(v21, v40))
  {
    v22 = sub_100018554(22);
    v45 = sub_100018554(64);
    *(_DWORD *)v22 = 136315394;
    swift_getErrorValue(v18, v44, v43);
    v23 = Error.localizedDescription.getter(v43[1], v43[2]);
    sub_100014B44(v23, v24, &v45);
    sub_100043358(v25, v26, v27, v22 + 12);
    sub_1000061E8();
    sub_1000433B0();
    sub_1000433B0();
    *(_WORD *)(v22 + 12) = 2080;
    __asm { BR              X9 }
  }
  sub_1000433B0();
  sub_1000433B0();
  sub_10004330C();
  sub_10004330C();

  v28 = (uint64_t)&v6[*(int *)(sub_10000738C(&qword_1000D1668) + 48)];
  *v6 = 1;
  sub_100038C60(a3, v28, &qword_1000D1660);
  swift_storeEnumTagMultiPayload(v6, v16, 1);
  v29 = a3;
  v30 = a5[3];
  v31 = a5[4];
  sub_1000073CC(a5, v30);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
  sub_100038C60(v29, v15, &qword_1000D1660);
  v33 = type metadata accessor for ApiRequestMetrics(0);
  if (sub_100009658(v15, 1, v33) == 1)
  {
    sub_100038C8C(v15, &qword_1000D1660);
    v34 = 0;
  }
  else
  {
    v34 = sub_10009363C();
    sub_100038708(v15, type metadata accessor for ApiRequestMetrics);
  }
  sub_100005B28((unint64_t *)&qword_1000D1670, type metadata accessor for ApiAgentError, (uint64_t)&unk_1000A3138);
  v36 = v35;
  v37 = sub_100043398(v16, v35);
  sub_100038730((uint64_t)v6, v38, type metadata accessor for ApiAgentError);
  sub_10004190C(v42, v32, v34, v37);
  sub_1000433B0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a6 = sub_100043398(v16, v36);
  sub_100038910((uint64_t)v6, v39, type metadata accessor for ApiAgentError);
  sub_10000A668();
}

uint64_t sub_10004190C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[5];

  sub_100009D1C(v4 + 56, (uint64_t)v18);
  sub_1000073CC(v18, v18[3]);
  if (a3)
  {
    if (a4)
      goto LABEL_3;
LABEL_6:
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    swift_bridgeObjectRetain(a3);
    goto LABEL_7;
  }
  sub_10000738C((uint64_t *)&unk_1000CFF70);
  sub_100021804();
  Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v14 = a4;
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(a4);
  v7 = sub_10000738C((uint64_t *)&unk_1000D1690);
  v8 = sub_10000738C(&qword_1000D1570);
  if ((swift_dynamicCast(&v15, &v14, v7, v8, 6) & 1) == 0)
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
  }
LABEL_7:
  sub_1000940D4();
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease();
  sub_100038C8C((uint64_t)&v15, &qword_1000D1408);
  sub_100092BD8(v10, v12 & 0x101);
  swift_bridgeObjectRelease();
  return sub_100007618(v18);
}

uint64_t sub_100041A74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  id v16;

  sub_10004115C(a4);
  sub_100038C60(a5, a6, &qword_1000D1660);
  v12 = (int *)sub_10000738C(&qword_1000CFD20);
  v13 = a6 + v12[7];
  v14 = sub_100043390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, a3, v14);
  v15 = (uint64_t *)(a6 + v12[10]);
  *v15 = a1;
  v15[1] = a2;
  *(_QWORD *)(a6 + v12[8]) = a4;
  *(_OWORD *)(a6 + v12[9]) = xmmword_10009FDC0;
  v16 = a4;
  return sub_100019F6C(a1, a2);
}

void sub_100041B3C(void (*a1)(uint64_t *), void (*a2)(uint64_t *), id *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, _QWORD *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void **v43;
  void (*v44)(uint64_t *);
  uint64_t v45;
  void *v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (**v56)(uint64_t *);
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  id *v67;
  uint64_t v68;
  void (*v69)(uint64_t *);
  void (*v70)(uint64_t *);
  void **aBlock;
  _QWORD v72[4];
  uint64_t v73;
  __int128 v74[2];
  uint64_t __src[12];

  v70 = a2;
  v69 = a1;
  v63 = sub_10000738C((uint64_t *)&unk_1000D16A0);
  sub_100018BD0();
  __chkstk_darwin(v7);
  sub_10000A7D4();
  v10 = (uint64_t *)(v9 - v8);
  v61 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ApiAgentError(0);
  sub_100018BD0();
  __chkstk_darwin(v11);
  sub_10000CD48();
  v62 = (void *)v12;
  v13 = sub_100043390();
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v66 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v64 = (char *)&v59 - v17;
  v65 = v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v59 - v20;
  v22 = sub_10000738C(&qword_1000D0880);
  sub_100018BD0();
  __chkstk_darwin(v23);
  sub_100024034();
  v25 = (uint64_t)a3[4];
  v24 = a3[5];
  v67 = a3;
  sub_1000073CC(a3 + 1, v25);
  v26 = (void (*)(uint64_t, uint64_t, _QWORD *))v24[1];
  v68 = a4;
  v26(a4, v25, v24);
  if (swift_getEnumCaseMultiPayload(v4, v22) == 1)
  {
    v27 = (uint64_t)v62;
    sub_100038910(v4, (uint64_t)v62, type metadata accessor for ApiAgentError);
    sub_100005B28((unint64_t *)&qword_1000D1670, type metadata accessor for ApiAgentError, (uint64_t)&unk_1000A3138);
    v29 = sub_100043398((uint64_t)v61, v28);
    sub_100038730(v27, v30, type metadata accessor for ApiAgentError);
    *v10 = v29;
    swift_storeEnumTagMultiPayload(v10, v63, 1);
    v69(v10);
    sub_100038C8C((uint64_t)v10, (uint64_t *)&unk_1000D16A0);
    sub_100038708(v27, type metadata accessor for ApiAgentError);
  }
  else
  {
    v62 = *(void **)(v4 + *(int *)(sub_10000738C(&qword_1000D16B0) + 48));
    v61 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    v61(v21, v4, v13);
    v31 = v13;
    v32 = v14;
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v33 = sub_1000187DC();
    sub_1000096EC(v33, (uint64_t)qword_1000DDAB8);
    v34 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 16);
    v63 = (uint64_t)v21;
    v35 = v34(v64, v21, v13);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)sub_100018554(12);
      v39 = sub_100018554(32);
      __src[0] = v39;
      v60 = v32;
      *(_DWORD *)v38 = 136315138;
      sub_100005B28(&qword_1000D16B8, (uint64_t (*)(uint64_t))&type metadata accessor for URLRequest, (uint64_t)&protocol conformance descriptor for URLRequest);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v31, v40);
      sub_100014B44(v41, v42, __src);
      aBlock = v43;
      v32 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v72, v38 + 4, v38 + 12);
      sub_1000061E8();
      sub_100043370();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Request: %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1);
      sub_10000A818(v39);
      sub_10000A818((uint64_t)v38);
    }
    else
    {
      sub_100043370();
    }

    v44 = v70;
    v45 = (uint64_t)v67;
    v46 = v62;
    v47 = objc_msgSend(*v67, "dataTaskPromiseWithRequestPromise:", v62);
    sub_1000095FC(v45, (uint64_t)__src);
    v48 = v66;
    v49 = v63;
    v34(v66, (char *)v63, v31);
    sub_100009D1C(v68, (uint64_t)v74);
    v50 = *(unsigned __int8 *)(v32 + 80);
    v51 = v31;
    v52 = (v50 + 112) & ~v50;
    v53 = (v65 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
    v54 = (v53 + 47) & 0xFFFFFFFFFFFFFFF8;
    v55 = swift_allocObject(&unk_1000C50A0, v54 + 16, v50 | 7);
    memcpy((void *)(v55 + 16), __src, 0x60uLL);
    v61((char *)(v55 + v52), (uint64_t)v48, v51);
    sub_100009DDC(v74, v55 + v53);
    v56 = (void (**)(uint64_t *))(v55 + v54);
    *v56 = v69;
    v56[1] = v44;
    v72[3] = sub_100042F7C;
    v73 = v55;
    aBlock = _NSConcreteStackBlock;
    v72[0] = 1107296256;
    v72[1] = sub_100019350;
    v72[2] = &unk_1000C50B8;
    v57 = _Block_copy(&aBlock);
    v58 = v73;
    swift_retain(v44);
    swift_release(v58);
    objc_msgSend(v47, "addFinishBlock:", v57);
    _Block_release(v57);

    ((void (*)(uint64_t, uint64_t))v64)(v49, v51);
  }
  sub_10000A668();
}

void sub_1000420E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void (*a6)(uint64_t *), uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t *v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  int *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  __int16 v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  os_log_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  _QWORD *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t *);
  _QWORD *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v112 = a7;
  v113 = a6;
  v110 = a4;
  v107 = a3;
  v105 = type metadata accessor for ApiAgentError(0);
  __chkstk_darwin(v105);
  v106 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_10000738C((uint64_t *)&unk_1000D16A0);
  __chkstk_darwin(v111);
  v12 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = (_QWORD *)type metadata accessor for ApiRequestMetrics(0);
  __chkstk_darwin(v114);
  v14 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000738C(&qword_1000D1660);
  __chkstk_darwin(v15);
  v17 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v104 - v19;
  *(_QWORD *)&v22 = __chkstk_darwin(v21).n128_u64[0];
  v24 = (char *)&v104 - v23;
  v25 = objc_msgSend(a1, "response", v22);
  v108 = a5;
  v109 = v25;
  if (v25)
  {
    v26 = v25;
    v27 = (_QWORD *)sub_100041078();

    if (v27)
    {
      sub_100038730((uint64_t)v27 + *(_QWORD *)((swift_isaMask & *v27) + 0x58), (uint64_t)v14, type metadata accessor for ApiRequestMetrics);

      sub_100038910((uint64_t)v14, (uint64_t)v24, type metadata accessor for ApiRequestMetrics);
      v28 = 0;
      goto LABEL_13;
    }
  }
  if (a1)
  {
    v29 = objc_msgSend(a1, "taskMetrics");
    if (v29)
    {
      v30 = v29;
      v31 = objc_msgSend(v29, "transactionMetrics");

      v32 = sub_100043004();
      v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v32);

      if ((unint64_t)v33 >> 62)
      {
        if (v33 < 0)
          v103 = v33;
        else
          v103 = v33 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v33);
        v34 = _CocoaArrayWrapper.endIndex.getter(v103);
        swift_bridgeObjectRelease(v33);
        if (v34)
        {
LABEL_8:
          v35 = __OFSUB__(v34, 1);
          v36 = v34 - 1;
          if (v35)
          {
            __break(1u);
          }
          else
          {
            sub_10007DEC8(v36, (v33 & 0xC000000000000001) == 0, v33);
            if ((v33 & 0xC000000000000001) == 0)
            {
              v37 = *(id *)(v33 + 8 * v36 + 32);
LABEL_11:
              v38 = v37;
              swift_bridgeObjectRelease(v33);
              v39 = v38;
              sub_1000400D8(v39, (uint64_t)v24);
              v40 = v114;
              sub_10000964C((uint64_t)v24, 0, 1, (uint64_t)v114);

LABEL_14:
              v41 = objc_msgSend(a1, "data");
              v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
              v44 = v43;

              v45 = v108[3];
              v46 = v108[4];
              sub_1000073CC(v108, v45);
              v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 16))(v45, v46);
              sub_100038C60((uint64_t)v24, (uint64_t)v20, &qword_1000D1660);
              if (sub_100009658((uint64_t)v20, 1, (uint64_t)v40) == 1)
              {
                sub_100038C8C((uint64_t)v20, &qword_1000D1660);
                v48 = 0;
              }
              else
              {
                v48 = sub_10009363C();
                sub_100038708((uint64_t)v20, type metadata accessor for ApiRequestMetrics);
              }
              v114 = v12;
              sub_100009D1C(v107 + 56, (uint64_t)&v119);
              sub_1000073CC(&v119, v121);
              v49 = (uint64_t)v24;
              if (v48)
              {
                v50 = v48;
              }
              else
              {
                sub_10000738C((uint64_t *)&unk_1000CFF70);
                sub_100021804();
                v50 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
                v48 = 0;
              }
              v118 = 0;
              v116 = 0u;
              v117 = 0u;
              swift_bridgeObjectRetain(v48);
              v60 = v110;
              sub_1000940D4();
              v62 = v61;
              v64 = v63;
              swift_bridgeObjectRelease(v50);
              sub_100038C8C((uint64_t)&v116, &qword_1000D1408);
              sub_100092BD8(v62, v64 & 0x101);
              swift_bridgeObjectRelease(v62);
              sub_100007618(&v119);
              swift_bridgeObjectRelease(v47);
              swift_bridgeObjectRelease(v48);
              v65 = (int *)sub_10000738C(&qword_1000CFD48);
              v66 = v114;
              v67 = (char *)v114 + v65[12];
              v68 = v65[16];
              v69 = (uint64_t)v114 + v65[20];
              *v114 = v42;
              v66[1] = v44;
              v70 = type metadata accessor for URLRequest(0);
              (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v67, v60, v70);
              v71 = v109;
              *(uint64_t *)((char *)v66 + v68) = (uint64_t)v109;
              v24 = (char *)v49;
              sub_100038C60(v49, v69, &qword_1000D1660);
              swift_storeEnumTagMultiPayload(v66, v111, 0);
              v72 = v71;
              sub_100019F6C(v42, v44);
              v113(v66);
              sub_1000096A0(v42, v44);

              sub_100038C8C((uint64_t)v66, (uint64_t *)&unk_1000D16A0);
              goto LABEL_37;
            }
          }
          v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v33);
          goto LABEL_11;
        }
      }
      else
      {
        v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v34)
          goto LABEL_8;
      }
      swift_bridgeObjectRelease(v33);
      v40 = v114;
      sub_10000964C((uint64_t)v24, 1, 1, (uint64_t)v114);
      goto LABEL_14;
    }
  }
  v28 = 1;
LABEL_13:
  v40 = v114;
  sub_10000964C((uint64_t)v24, v28, 1, (uint64_t)v114);
  if (a1)
    goto LABEL_14;
  if (!a2)
  {
    v73 = sub_10000738C(&qword_1000D1668);
    v74 = v106;
    v75 = (uint64_t)&v106[*(int *)(v73 + 48)];
    *v106 = 0;
    sub_100038C60((uint64_t)v24, v75, &qword_1000D1660);
    swift_storeEnumTagMultiPayload(v74, v105, 1);
    v76 = v114;
    v51 = (uint64_t *)v12;
LABEL_30:
    sub_10000738C((uint64_t *)&unk_1000CFF70);
    sub_100021804();
    v83 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
    goto LABEL_31;
  }
  swift_errorRetain(a2);
  v51 = (uint64_t *)v12;
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v52 = type metadata accessor for Logger(0);
  sub_1000096EC(v52, (uint64_t)qword_1000DDAB8);
  swift_errorRetain(a2);
  v53 = swift_errorRetain(a2);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter();
  v104 = v54;
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v56 = 138412290;
    swift_errorRetain(a2);
    v58 = _swift_stdlib_bridgeErrorToNSError(a2);
    v119 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v56 + 4, v56 + 12);
    *v57 = v58;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    v59 = v104;
    _os_log_impl((void *)&_mh_execute_header, v104, v55, "ApiAgent Error: %@", v56, 0xCu);
    sub_10000738C((uint64_t *)&unk_1000D16C0);
    swift_arrayDestroy(v57, 1);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v56, -1, -1);

    swift_errorRelease(a2);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  v76 = v114;
  v77 = sub_10000738C(&qword_1000D1668);
  v78 = v106;
  v79 = (uint64_t)&v106[*(int *)(v77 + 48)];
  *v106 = 0;
  sub_100038C60((uint64_t)v24, v79, &qword_1000D1660);
  swift_storeEnumTagMultiPayload(v78, v105, 1);
  v119 = a2;
  swift_errorRetain(a2);
  v80 = sub_10000738C((uint64_t *)&unk_1000D1690);
  type metadata accessor for AMSError(0);
  if ((swift_dynamicCast(&v116, &v119, v80, v81, 6) & 1) == 0)
    goto LABEL_30;
  v82 = (void *)v116;
  v83 = sub_100093F60();

LABEL_31:
  v84 = v108[3];
  v85 = v108[4];
  sub_1000073CC(v108, v84);
  v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 16))(v84, v85);
  sub_100038C60((uint64_t)v24, (uint64_t)v17, &qword_1000D1660);
  if (sub_100009658((uint64_t)v17, 1, (uint64_t)v76) == 1)
  {
    sub_100038C8C((uint64_t)v17, &qword_1000D1660);
    sub_10000738C((uint64_t *)&unk_1000CFF70);
    sub_100021804();
    v87 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
  }
  else
  {
    v87 = sub_10009363C();
    sub_100038708((uint64_t)v17, type metadata accessor for ApiRequestMetrics);
  }
  v88 = v107;
  v89 = sub_100042BCC(v87, v83);
  sub_100005B28((unint64_t *)&qword_1000D1670, type metadata accessor for ApiAgentError, (uint64_t)&unk_1000A3138);
  v91 = v90;
  v92 = swift_allocError(v105, v90, 0, 0);
  sub_100038730((uint64_t)v106, v93, type metadata accessor for ApiAgentError);
  sub_100009D1C(v88 + 56, (uint64_t)&v119);
  sub_1000073CC(&v119, v121);
  v115 = v92;
  swift_errorRetain(v92);
  v94 = sub_10000738C((uint64_t *)&unk_1000D1690);
  v95 = sub_10000738C(&qword_1000D1570);
  if ((swift_dynamicCast(&v116, &v115, v94, v95, 6) & 1) == 0)
  {
    v118 = 0;
    v116 = 0u;
    v117 = 0u;
  }
  sub_1000940D4();
  v97 = v96;
  v99 = v98;
  sub_100038C8C((uint64_t)&v116, &qword_1000D1408);
  sub_100092BD8(v97, v99 & 0x101);
  swift_bridgeObjectRelease(v97);
  sub_100007618(&v119);
  swift_errorRelease(v92);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v89);
  v100 = swift_allocError(v105, v91, 0, 0);
  v101 = v106;
  sub_100038730((uint64_t)v106, v102, type metadata accessor for ApiAgentError);
  *v51 = v100;
  swift_storeEnumTagMultiPayload(v51, v111, 1);
  v113(v51);

  sub_100038C8C((uint64_t)v51, (uint64_t *)&unk_1000D16A0);
  sub_100038708((uint64_t)v101, type metadata accessor for ApiAgentError);
LABEL_37:
  sub_100038C8C((uint64_t)v24, &qword_1000D1660);
}

uint64_t sub_100042BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_100042C54(a1, (uint64_t)sub_100097050, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v2)
    swift_bridgeObjectRelease(v6);
  return v6;
}

uint64_t sub_100042C48@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_errorRetain(v2);
}

uint64_t sub_100042C54(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  _BYTE v27[32];
  _BYTE v28[32];
  _BYTE v29[8];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[8];

  sub_100098ADC(v32);
  v25 = a1;
  swift_bridgeObjectRetain(a1);
  v24 = a3;
  swift_retain(a3);
  sub_100098CA4((uint64_t)v29);
  if (v31 == 1)
  {
LABEL_14:
    swift_release(v24);
    swift_bridgeObjectRelease(v25);
    sub_1000180CC(v32[0]);
    return swift_release(v32[6]);
  }
  while (1)
  {
    v9 = v29[0];
    sub_100038CB4((uint64_t)&v30, (uint64_t)v28, (uint64_t *)&unk_1000CFF70);
    v10 = *a5;
    v12 = sub_1000150A4(v9);
    v13 = *(_QWORD *)(v10 + 16);
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    v16 = v11;
    if (*(_QWORD *)(v10 + 24) >= v15)
    {
      if ((a4 & 1) != 0)
      {
        if ((v11 & 1) != 0)
          goto LABEL_9;
      }
      else
      {
        sub_10000738C(&qword_1000D16F0);
        _NativeDictionary.copy()();
        if ((v16 & 1) != 0)
          goto LABEL_9;
      }
    }
    else
    {
      sub_100097584(v15, a4 & 1);
      v17 = sub_1000150A4(v9);
      if ((v16 & 1) != (v18 & 1))
        goto LABEL_17;
      v12 = v17;
      if ((v16 & 1) != 0)
      {
LABEL_9:
        sub_100038C60(*(_QWORD *)(*a5 + 56) + 32 * v12, (uint64_t)v26, (uint64_t *)&unk_1000CFF70);
        sub_100038C60((uint64_t)v26, (uint64_t)v27, (uint64_t *)&unk_1000CFF70);
        sub_100038C8C((uint64_t)v26, (uint64_t *)&unk_1000CFF70);
        sub_100038C8C((uint64_t)v28, (uint64_t *)&unk_1000CFF70);
        sub_100043040((uint64_t)v27, *(_QWORD *)(*a5 + 56) + 32 * v12);
        goto LABEL_13;
      }
    }
    v19 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    *(_BYTE *)(v19[6] + v12) = v9;
    sub_100038CB4((uint64_t)v28, v19[7] + 32 * v12, (uint64_t *)&unk_1000CFF70);
    v20 = v19[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_16;
    v19[2] = v22;
LABEL_13:
    sub_100098CA4((uint64_t)v29);
    a4 = 1;
    if (v31 == 1)
      goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SportsMetricsKey);
  __break(1u);
  return result;
}

uint64_t sub_100042E90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100042EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = sub_100043390();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 112) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;

  sub_100007618((_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  sub_100007618((_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100007618((_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_100042F7C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(sub_100043390() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000420E0(a1, a2, v2 + 16, v2 + v6, (_QWORD *)(v2 + v7), *(void (**)(uint64_t *))(v2 + ((v7 + 47) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100042FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100042FFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_100043004()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D16D0;
  if (!qword_1000D16D0)
  {
    v1 = objc_opt_self(NSURLSessionTaskTransactionMetrics);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000D16D0);
  }
  return result;
}

uint64_t sub_100043040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C((uint64_t *)&unk_1000CFF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ApiAgent(uint64_t a1)
{

  sub_100007618((_QWORD *)(a1 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 48));
  return sub_100007618((_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for ApiAgent(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 8;
  v6 = a2 + 8;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v4;
  v9(v5, v6, v8);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  v12 = a2 + 56;
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v13;
  v14 = v13;
  v15 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
  swift_unknownObjectRetain(v11);
  v15(a1 + 56, v12, v14);
  return a1;
}

uint64_t assignWithCopy for ApiAgent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  sub_100009F58((_QWORD *)(a1 + 8), (_QWORD *)(a2 + 8));
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v8);
  sub_100009F58((_QWORD *)(a1 + 56), (_QWORD *)(a2 + 56));
  return a1;
}

uint64_t assignWithTake for ApiAgent(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  sub_100007618((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_unknownObjectRelease(v6);
  sub_100007618((_QWORD *)(a1 + 56));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for ApiAgent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ApiAgent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ApiAgent()
{
  return &type metadata for ApiAgent;
}

uint64_t sub_1000432F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10000964C(a1, a2, 1, v2);
}

id sub_100043304(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10004330C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_1000096A0(v0, v1);
}

uint64_t sub_100043318@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(a1 - 256) + 8));
}

void sub_100043324(uint64_t a1)
{
  uint64_t *v1;

  sub_100038C8C(a1, v1);
}

void sub_10004332C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100038CB4(a1, a2, v2);
}

uint64_t sub_10004334C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100019F6C(v0, v1);
}

uint64_t sub_100043358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 144, v5 - 136, v4, a4);
}

uint64_t sub_100043370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  *(_QWORD *)(v3 - 328) = v4;
  return v4(v1, v0);
}

void sub_100043388(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

}

uint64_t sub_100043390()
{
  return type metadata accessor for URLRequest(0);
}

uint64_t sub_100043398(uint64_t a1, uint64_t a2)
{
  return swift_allocError(a1, a2, 0, 0);
}

void sub_1000433A4(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 + a1);
  *v2 = 0;
  v2[1] = 0;
}

uint64_t sub_1000433B0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

id sub_1000433B8(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, *(SEL *)(v2 + 3296), a1);
}

uint64_t sub_1000433CC()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000433D4(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 32, 0);
}

void sub_1000433E0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 256);
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000433EC()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000433F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v3 = type metadata accessor for SportsActivityAttributes(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v31 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = _swiftEmptyArrayStorage;
  if (!v5)
    return (uint64_t)v6;
  v29[1] = v1;
  v40 = _swiftEmptyArrayStorage;
  sub_100015780(0, v5, 0);
  v6 = v40;
  result = sub_100022BF0(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v9 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v10 = a1 + 64;
      v30 = a1 + 64;
      v11 = v31;
      while ((*(_QWORD *)(v10 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
      {
        if ((_DWORD)v8 != *(_DWORD *)(a1 + 36))
          goto LABEL_18;
        v35 = v8;
        v36 = v9 >> 6;
        v34 = v5;
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9);
        v13 = swift_retain(v12);
        v14 = Activity.attributes.getter(v13);
        v15 = SportsActivityAttributes.canonicalId.getter(v14);
        v38 = v16;
        v39 = v15;
        v17 = v33;
        v18 = *(uint64_t (**)(char *, uint64_t))(v32 + 8);
        v19 = v18(v11, v33);
        v20 = Activity.attributes.getter(v19);
        v21 = SportsActivityAttributes.bundleId.getter(v20);
        v37 = v22;
        v18(v11, v17);
        result = swift_release(v12);
        v40 = v6;
        v24 = v6[2];
        v23 = v6[3];
        if (v24 >= v23 >> 1)
        {
          result = (uint64_t)sub_100015780((char *)(v23 > 1), v24 + 1, 1);
          v6 = v40;
        }
        v6[2] = v24 + 1;
        v25 = &v6[4 * v24];
        v26 = v38;
        v25[4] = v39;
        v25[5] = v26;
        v27 = v37;
        v25[6] = v21;
        v25[7] = v27;
        v28 = -1 << *(_BYTE *)(a1 + 32);
        if ((uint64_t)v9 >= -v28)
          goto LABEL_19;
        v10 = v30;
        if ((*(_QWORD *)(v30 + 8 * v36) & (1 << v9)) == 0)
          goto LABEL_20;
        if ((_DWORD)v35 != *(_DWORD *)(a1 + 36))
          goto LABEL_21;
        result = _HashTable.occupiedBucket(after:)(v9, v30, ~v28);
        v5 = v34 - 1;
        if (v34 == 1)
          return (uint64_t)v6;
        v9 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v8 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_100043668(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v6 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_18;
  v7 = v5;
  if (v6)
  {
    v11 = result;
    v23 = _swiftEmptyArrayStorage;
    v12 = &v23;
    result = specialized ContiguousArray.reserveCapacity(_:)(a2 - result);
    if (v6 < 0)
    {
LABEL_19:
      __break(1u);
      return result;
    }
    v13 = a5 & 1;
    v14 = v11;
    while (a2 != v14)
    {
      v21 = v14;
      v15 = sub_10004C6F4((uint64_t)&v21, a3, a4, v13, &v22);
      if (v7)
      {
        v19 = v23;
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a3);
        swift_release(v19);
        return (uint64_t)v12;
      }
      v7 = 0;
      v16 = v22;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v17 = v23[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
      v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
      v12 = &v23;
      result = specialized ContiguousArray._endMutation()(v18);
      if (a2 < v11)
        goto LABEL_16;
      if (v14 >= a2)
        goto LABEL_17;
      if (a2 == ++v14)
      {
        v12 = v23;
        swift_bridgeObjectRelease(a3);
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease(a3);
  v12 = _swiftEmptyArrayStorage;
LABEL_12:
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v12;
}

uint64_t sub_1000437DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;

  v3 = type metadata accessor for Date(0);
  v48 = *(_QWORD *)(v3 - 8);
  v49 = v3;
  __chkstk_darwin(v3);
  v47 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SportsActivityAttributes(0);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  __chkstk_darwin(v5);
  v44 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v43 = (char *)&v37 - v8;
  v9 = type metadata accessor for SportsActivityManagedContext(0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (!v12)
    return (uint64_t)v13;
  v37 = v1;
  v55 = _swiftEmptyArrayStorage;
  sub_10001579C(0, v12, 0);
  v13 = v55;
  result = sub_100022BF0(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    v16 = result;
    if (result < 1 << *(_BYTE *)(a1 + 32))
    {
      v17 = a1 + 64;
      v39 = a1;
      v40 = (uint64_t *)v11;
      v38 = a1 + 64;
      v18 = v44;
      while ((*(_QWORD *)(v17 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
      {
        if ((_DWORD)v15 != *(_DWORD *)(a1 + 36))
          goto LABEL_18;
        v52 = 1 << v16;
        v53 = v16 >> 6;
        v50 = v12;
        v51 = v15;
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v16);
        v20 = swift_retain(v19);
        v21 = v43;
        v54 = v13;
        v22 = Activity.attributes.getter(v20);
        v23 = SportsActivityAttributes.canonicalId.getter(v22);
        v25 = v24;
        v26 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
        v27 = v21;
        v28 = v46;
        v29 = v26(v27, v46);
        v30 = Activity.attributes.getter(v29);
        v31 = v47;
        SportsActivityAttributes.createdDate.getter(v30);
        v13 = v54;
        v32 = v28;
        v33 = v40;
        v26(v18, v32);
        *v33 = v23;
        v33[1] = v25;
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))((char *)v33 + *(int *)(v42 + 20), v31, v49);
        swift_release(v19);
        v55 = v13;
        v35 = v13[2];
        v34 = v13[3];
        if (v35 >= v34 >> 1)
        {
          sub_10001579C(v34 > 1, v35 + 1, 1);
          v13 = v55;
        }
        v13[2] = v35 + 1;
        result = sub_10004E2C0((uint64_t)v33, (uint64_t)v13+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(_QWORD *)(v41 + 72) * v35);
        a1 = v39;
        v36 = -1 << *(_BYTE *)(v39 + 32);
        if ((uint64_t)v16 >= -v36)
          goto LABEL_19;
        v17 = v38;
        if ((*(_QWORD *)(v38 + 8 * v53) & v52) == 0)
          goto LABEL_20;
        if ((_DWORD)v51 != *(_DWORD *)(v39 + 36))
          goto LABEL_21;
        result = _HashTable.occupiedBucket(after:)(v16, v38, ~v36);
        v12 = v50 - 1;
        if (v50 == 1)
          return (uint64_t)v13;
        v16 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          v15 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(_BYTE *)(a1 + 32))
            continue;
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_100043B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043B64(a1, a2, a3, (uint64_t)&unk_1000C5268, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000D1A18);
}

uint64_t sub_100043B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043B64(a1, a2, a3, (uint64_t)&unk_1000C5420, (uint64_t)&type metadata for Bool, (uint64_t)&unk_1000D1AF8);
}

uint64_t sub_100043B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v24[4];

  v12 = sub_10004ED20();
  if (sub_100009658(a1, 1, v12) == 1)
  {
    sub_10004DE70(a1, &qword_1000D0578);
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter();
    sub_10004ECE0(a1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8));
    v13 = v14 | 0x1C00;
  }
  v15 = *(_QWORD *)(a3 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v15);
    v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
    v20 = v19;
    swift_unknownObjectRelease(v15);
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = sub_10000A748(a4, 32);
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  if (v20 | v18)
  {
    v24[0] = 0;
    v24[1] = 0;
    v22 = v24;
    v24[2] = v18;
    v24[3] = v20;
  }
  else
  {
    v22 = 0;
  }
  return swift_task_create(v13, v22, a5, a6, v21);
}

uint64_t sub_100043CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = sub_100009658(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10004DE70(a1, &qword_1000D0578);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    v15 = v14;
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = swift_allocObject(&unk_1000C5308, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_10000738C(&qword_1000D1A70);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_1000D1A68, v16);
}

unint64_t sub_100043DEC()
{
  unint64_t v0;
  char v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD v14[5];
  Swift::String v15;

  sub_10004EC70();
  v14[3] = &type metadata for TVAppFeatureFlags;
  v14[4] = sub_10000A278();
  v1 = isFeatureEnabled(_:)(v14);
  sub_100007618(v14);
  if ((v1 & 1) != 0)
  {
    v0 = 0xD000000000000010;
    type metadata accessor for ContainerConstants(0);
    static ContainerConstants.defaultSuiteName.getter();
    v2 = objc_allocWithZone((Class)NSUserDefaults);
    v3 = sub_10004ECF4();
    v5 = sub_10004D3C8(v3, v4);
    if (v5)
    {
      v6 = v5;
      static ContainerConstants.liveActivitiesTargetAppKey.getter();
      v7 = String._bridgeToObjectiveC()();
      sub_1000061E8();
      v8 = objc_msgSend(v6, "stringForKey:", v7);

      if (v8)
      {
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        v11 = v10;

        v15._countAndFlagsBits = v9;
        v15._object = v11;
        sub_100044898(v15);
        __asm { BR              X10 }
      }

    }
  }
  return v0;
}

uint64_t sub_100043F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  sub_10000738C(&qword_1000D0578);
  sub_10000A680();
  __chkstk_darwin(v10);
  sub_10000A6E4();
  v11 = sub_10004ED20();
  sub_10003B9D8(v5, v12, v13, v11);
  v14 = qword_1000CFA90;
  swift_retain(a4);
  sub_10004ED00();
  sub_100018E34();
  if (v14 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v16 = qword_1000DDA70;
  sub_1000181E4(&qword_1000D1988, v15, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
  v18 = v17;
  v19 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C53F8, 72);
  v19[2] = v16;
  v19[3] = v18;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = v4;
  v19[7] = a1;
  v19[8] = a2;
  swift_retain(v16);
  v20 = sub_100043B64(v5, (uint64_t)&unk_1000D1AE8, (uint64_t)v19, (uint64_t)&unk_1000C5268, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000D1A18);
  return swift_release(v20);
}

void sub_1000440C4(Swift::String string)
{
  void *object;
  Swift::String v2;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C2A98, v2);
  sub_1000185B4();
  sub_100006200();
}

void sub_10004410C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  unint64_t v31;
  objc_class *v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[5];
  _QWORD v83[12];
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[6];
  uint64_t v87;
  _QWORD v88[11];
  _QWORD *v89;
  _BYTE v90[32];

  v3 = v1;
  v5 = sub_100027BC8();
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  sub_10000A680();
  __chkstk_darwin(v6);
  sub_10000A6E4();
  v73 = sub_10000738C(&qword_1000D1B00);
  v67 = *(_QWORD *)(v73 - 8);
  sub_10000A680();
  __chkstk_darwin(v7);
  sub_10000CD48();
  v66 = v8;
  v9 = sub_10000738C(&qword_1000D1B08);
  v70 = *(_QWORD *)(v9 - 8);
  v71 = v9;
  sub_10000A680();
  __chkstk_darwin(v10);
  sub_10000CD48();
  v68 = v11;
  v74 = sub_10000738C(&qword_1000D1B10);
  v72 = *(_QWORD *)(v74 - 8);
  sub_10000A680();
  __chkstk_darwin(v12);
  sub_10000CD48();
  v69 = v13;
  v14 = sub_10000738C(&qword_1000D1B18);
  v76 = *(_QWORD *)(v14 - 8);
  v77 = v14;
  sub_10000A680();
  __chkstk_darwin(v15);
  sub_10000CD48();
  v75 = v16;
  v17 = *(_QWORD *)(v1 + 104);
  sub_100024980(v17 + 16, (uint64_t)v90, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v17 + 16));
  v19 = sub_1000433F4(v18);
  sub_1000061E8();
  v20 = *(_QWORD *)(v19 + 16);
  v21 = _swiftEmptyArrayStorage;
  v65 = v19;
  if (v20)
  {
    v63 = a1;
    v64 = v3;
    v89 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v20);
    v22 = (uint64_t *)(v19 + 56);
    v78 = v2;
    while (1)
    {
      v23 = (uint64_t *)*(v22 - 3);
      v24 = *(v22 - 2);
      v25 = *v22;
      v26 = qword_1000CFA60;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      if (v26 != -1)
        swift_once(&qword_1000CFA60, sub_100028A24);
      sub_100023E30(qword_1000DDA38 + 24, (uint64_t)v83);
      sub_100009D1C((uint64_t)v83, (uint64_t)v86);
      v27 = v83[5];
      sub_100009D1C((uint64_t)&v84, (uint64_t)&v87);
      sub_100009D1C((uint64_t)&v85, (uint64_t)v88);
      v86[5] = v27;
      v88[5] = 0xD000000000000011;
      v88[6] = 0x80000001000A5730;
      v88[7] = v23;
      v88[8] = v24;
      swift_bridgeObjectRetain(v24);
      v28 = sub_10004ED00();
      v29 = Date.init()(v28);
      v30 = Date.timeIntervalSince1970.getter(v29) * 1000.0;
      if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) == 0)
        break;
      if (v30 <= -1.0)
        goto LABEL_12;
      if (v30 >= 1.84467441e19)
        goto LABEL_13;
      v31 = (unint64_t)v30;
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v2, v80);
      v88[9] = v31;
      v32 = (objc_class *)type metadata accessor for ActivityAuthorization(0);
      v33 = objc_msgSend(objc_allocWithZone(v32), "init");
      v34 = sub_100043DEC();
      v81 = v25;
      v82[0] = v33;
      v35 = v34;
      v37 = v36;
      v82[3] = v32;
      v82[4] = &off_1000C5188;
      v38 = type metadata accessor for ActivityCapUtility();
      v39 = (_QWORD *)sub_10000A748(v38, 72);
      v40 = sub_10000AE58((uint64_t)v82, (uint64_t)v32);
      __chkstk_darwin(v40);
      sub_100024034();
      (*(void (**)(uint64_t *))(v41 + 16))(v23);
      v42 = *v23;
      v39[5] = v32;
      v39[6] = &off_1000C5188;
      v39[2] = v42;
      v39[7] = v35;
      v39[8] = v37;
      sub_100007618(v82);
      v88[10] = v39;
      sub_100023FB4(v83);
      sub_10002CCD0();
      v44 = v43;
      sub_10002F608(v86);
      swift_bridgeObjectRelease(v81);
      v45 = swift_bridgeObjectRelease(v24);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v45);
      v46 = v89[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v46);
      v47 = v46;
      v2 = v78;
      v48 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v44);
      specialized ContiguousArray._endMutation()(v48);
      v22 += 4;
      if (!--v20)
      {
        v21 = v89;
        v3 = v64;
        a1 = v63;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_10:
    v49 = a1 & 1;
    v83[0] = v21;
    v50 = sub_10000738C(&qword_1000D0B18);
    v51 = sub_10000738C(&qword_1000D1B20);
    sub_10000A40C((unint64_t *)&qword_1000D0B20, &qword_1000D0B18);
    v53 = v52;
    sub_10000A40C(&qword_1000D1B28, &qword_1000D1B20);
    Publishers.MergeMany.init<A>(_:)(v83, v50, v51, v53, v54);
    sub_10000A40C(&qword_1000D1B30, &qword_1000D1B00);
    v56 = v55;
    Publisher.collect()(v73, v55);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v73);
    v57 = sub_10000A748((uint64_t)&unk_1000C5448, 25);
    *(_QWORD *)(v57 + 16) = v65;
    *(_BYTE *)(v57 + 24) = v49;
    v58 = static Subscribers.Demand.unlimited.getter(v57);
    sub_10000A40C(&qword_1000D1B38, &qword_1000D1B08);
    Publisher.flatMap<A, B>(maxPublishers:_:)(v58, sub_10004E0AC, v57, v71, &type metadata for Bool, v73, v59, v56);
    swift_release(v57);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v68, v71);
    sub_10000A40C(&qword_1000D1B40, &qword_1000D1B10);
    Publisher.collect()(v74, v60);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v69, v74);
    v61 = sub_10000A748((uint64_t)&unk_1000C5470, 32);
    *(_BYTE *)(v61 + 16) = v49;
    *(_QWORD *)(v61 + 24) = v3;
    sub_10000A40C(&qword_1000D1B48, &qword_1000D1B18);
    swift_retain(v3);
    v62 = Publisher.sink(receiveCompletion:receiveValue:)(nullsub_1, 0, sub_10004E0B8, v61, v77);
    swift_release(v61);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
    sub_100024980(v3 + 64, (uint64_t)v83, 33);
    AnyCancellable.store(in:)(v3 + 64);
    swift_endAccess(v83);
    swift_release(v62);
  }
}

uint64_t *sub_100044790()
{
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return &qword_1000DDA70;
}

uint64_t sub_1000447D0(char a1)
{
  if ((a1 & 1) != 0)
    return 1751607656;
  else
    return 7827308;
}

void *sub_1000447F8()
{
  void *result;

  result = sub_10004D82C((uint64_t)&off_1000C2AE8);
  qword_1000DDA68 = (uint64_t)result;
  return result;
}

uint64_t sub_10004481C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100044854 + 4 * byte_1000A0E00[a1]))(0xD000000000000010, 0x80000001000A5670);
}

uint64_t sub_100044878()
{
  return 0x6C7070612E6D6F63;
}

void sub_100044898(Swift::String string)
{
  void *object;
  Swift::String v2;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C2680, v2);
  sub_1000185B4();
  sub_100006200();
}

void sub_1000448D8(char *a1)
{
  sub_100055E38(*a1);
}

void sub_1000448E4()
{
  unsigned __int8 *v0;

  sub_100056414(*v0);
}

void sub_1000448EC(uint64_t a1)
{
  char *v1;

  sub_100056778(a1, *v1);
}

void sub_1000448F4(uint64_t a1)
{
  sub_100056C34(a1);
}

void sub_1000448FC(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  sub_100044898(*a1);
  *a2 = v3;
}

void sub_100044928(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = sub_10004481C(*v1);
  a1[1] = v3;
  sub_100006200();
}

void sub_10004494C(char *a1, unsigned __int8 *a2)
{
  sub_100055DC8(*a1, *a2);
}

void sub_100044958()
{
  char *v0;

  sub_10005643C(*v0);
}

uint64_t sub_100044960(uint64_t a1)
{
  char *v1;

  return sub_100056720(a1, *v1);
}

void sub_100044968(uint64_t a1)
{
  char *v1;

  sub_100056C84(a1, *v1);
}

void sub_100044970(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  sub_1000440C4(*a1);
  *a2 = v3;
}

void sub_10004499C(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t v3;

  *a1 = sub_1000447D0(*v1);
  a1[1] = v3;
  sub_100006200();
}

uint64_t ActivityState.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  int v6;
  uint64_t v9;

  v0 = type metadata accessor for ActivityState(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10004ECF4();
  v5(v4);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  if (v6 == enum case for ActivityState.active(_:))
    return 0x657669746341;
  if (v6 == enum case for ActivityState.ended(_:) || v6 == enum case for ActivityState.dismissed(_:))
    return 0x6465646E45;
  if (v6 == enum case for ActivityState.stale(_:))
    return 0x656C617453;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 0x6E776F6E6B6E55;
}

uint64_t sub_100044AF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30[2];

  v2 = v1;
  v3 = (_QWORD *)a1;
  *(_QWORD *)(v1 + 16) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v1 + 64) = &_swiftEmptySetSingleton;
  sub_100009D1C(a1, v1 + 24);
  v4 = sub_100045028();
  v6 = v5;
  v7 = v3[3];
  v8 = v3[4];
  sub_1000073CC(v3, v7);
  dispatch thunk of PersistentStorable.replaceActivities(activeIds:dismissedIds:)(v4, v6, v7, v8);
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v9 = type metadata accessor for Logger(0);
  sub_1000096EC(v9, (uint64_t)qword_1000DDB00);
  swift_bridgeObjectRetain_n(v4, 3);
  v10 = swift_bridgeObjectRetain_n(v6, 3);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v30[0] = v27;
    *(_DWORD *)v13 = 136315394;
    v14 = swift_bridgeObjectRetain(v4);
    v15 = Array.description.getter(v14, &type metadata for String);
    v28 = v3;
    v17 = v16;
    swift_bridgeObjectRelease(v4);
    sub_100014B44(v15, v17, v30);
    v29 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2080;
    v19 = swift_bridgeObjectRetain(v6);
    v20 = Array.description.getter(v19, &type metadata for String);
    v21 = v2;
    v23 = v22;
    swift_bridgeObjectRelease(v6);
    sub_100014B44(v20, v23, v30);
    v29 = v24;
    v3 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v4, 2);
    v25 = v23;
    v2 = v21;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "ActivityStore: initialized with active activities:%s, dismissed activities:%s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v27, 2);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v6, 4);
    swift_bridgeObjectRelease_n(v4, 4);
  }
  sub_100045404();
  sub_100007618(v3);
  return v2;
}

uint64_t sub_100045028()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _BYTE v33[4];
  int v34;
  int v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for ActivityState(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v2 = &v33[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for SportsActivityAttributes(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  __chkstk_darwin(v3);
  v5 = &v33[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000738C(&qword_1000D1A10);
  result = static Activity.activities.getter();
  v7 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(result);
    v8 = result;
    if (result)
      goto LABEL_3;
LABEL_37:
    swift_bridgeObjectRelease(v7);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v8 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v8)
    goto LABEL_37;
LABEL_3:
  if (v8 >= 1)
  {
    v9 = 0;
    v40 = v7 & 0xC000000000000001;
    v39 = enum case for ActivityState.active(_:);
    v36 = enum case for ActivityState.ended(_:);
    v10 = _swiftEmptyArrayStorage;
    v34 = enum case for ActivityState.stale(_:);
    v35 = enum case for ActivityState.dismissed(_:);
    v37 = _swiftEmptyArrayStorage;
    v38 = v7;
    while (1)
    {
      if (v40)
      {
        v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
        v12 = v11;
      }
      else
      {
        v12 = *(_QWORD *)(v7 + 8 * v9 + 32);
        v11 = swift_retain(v12);
      }
      v13 = Activity.attributes.getter(v11);
      v14 = SportsActivityAttributes.canonicalId.getter(v13);
      v16 = v15;
      v17 = (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v5, v42);
      dispatch thunk of Activity.activityState.getter(v17);
      v18 = (*(uint64_t (**)(_BYTE *, uint64_t))(v43 + 88))(v2, v44);
      if (v18 != v39)
      {
        if (v18 == v36 || v18 == v35)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) != 0)
          {
            v22 = v37;
          }
          else
          {
            sub_100013494();
            v22 = v31;
          }
          v23 = v22[2];
          if (v23 >= v22[3] >> 1)
          {
            sub_100013494();
            v22 = v32;
          }
          v22[2] = v23 + 1;
          v37 = v22;
          v20 = &v22[2 * v23];
          goto LABEL_24;
        }
        if (v18 != v34)
        {
          swift_bridgeObjectRelease(v16);
          if (qword_1000CFAD8 != -1)
            swift_once(&qword_1000CFAD8, sub_10006CCEC);
          v24 = type metadata accessor for Logger(0);
          v25 = sub_1000096EC(v24, (uint64_t)qword_1000DDB00);
          v26 = Logger.logObject.getter(v25);
          v27 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v26, v27))
          {
            v28 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v28 = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unused case, this could cause serious regressions!", v28, 2u);
            swift_slowDealloc(v28, -1, -1);
          }

          swift_release(v12);
          (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v2, v44);
          goto LABEL_25;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_100013494();
        v10 = v29;
      }
      v19 = v10[2];
      if (v19 >= v10[3] >> 1)
      {
        sub_100013494();
        v10 = v30;
      }
      v10[2] = v19 + 1;
      v20 = &v10[2 * v19];
LABEL_24:
      v20[4] = v14;
      v20[5] = v16;
      swift_release(v12);
      v7 = v38;
LABEL_25:
      if (v8 == ++v9)
      {
        swift_bridgeObjectRelease(v7);
        return (uint64_t)v10;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100045404()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[4];

  v0 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v0);
  v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ActivityState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000738C(&qword_1000D1A10);
  result = static Activity.activities.getter();
  v8 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(result);
    v9 = result;
    if (!result)
      return swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v9)
      return swift_bridgeObjectRelease(v8);
  }
  if (v9 >= 1)
  {
    v37 = v2;
    v10 = 0;
    v11 = v8 & 0xC000000000000001;
    v12 = enum case for ActivityState.active(_:);
    v34 = (char *)&type metadata for () + 8;
    v39 = v8;
    v40 = v3;
    v38 = v9;
    v36 = v6;
    v35 = enum case for ActivityState.active(_:);
    do
    {
      if (v11)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
        v14 = v13;
      }
      else
      {
        v14 = *(_QWORD *)(v8 + 8 * v10 + 32);
        v13 = swift_retain(v14);
      }
      dispatch thunk of Activity.activityState.getter(v13);
      if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) == v12)
      {
        v15 = v11;
        v16 = type metadata accessor for TaskPriority(0);
        v17 = (uint64_t)v37;
        sub_10000964C((uint64_t)v37, 1, 1, v16);
        v18 = (_QWORD *)swift_allocObject(&unk_1000C53A8, 48, 7);
        v18[2] = 0;
        v19 = v18 + 2;
        v18[3] = 0;
        v18[4] = v14;
        v20 = v41;
        v18[5] = v41;
        v21 = sub_100009658(v17, 1, v16);
        swift_retain(v14);
        v22 = swift_retain(v20);
        if (v21 == 1)
        {
          sub_10004DE70(v17, &qword_1000D0578);
          v23 = 0;
        }
        else
        {
          v24 = TaskPriority.rawValue.getter(v22);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
          v23 = v24;
        }
        v25 = *v19;
        v11 = v15;
        if (*v19)
        {
          v26 = v18[3];
          ObjectType = swift_getObjectType(*v19);
          swift_unknownObjectRetain(v25);
          v28 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v26);
          v30 = v29;
          swift_unknownObjectRelease(v25);
        }
        else
        {
          v28 = 0;
          v30 = 0;
        }
        v6 = v36;
        v31 = swift_allocObject(&unk_1000C53D0, 32, 7);
        *(_QWORD *)(v31 + 16) = &unk_1000D1AD0;
        *(_QWORD *)(v31 + 24) = v18;
        if (v30 | v28)
        {
          v42[0] = 0;
          v42[1] = 0;
          v32 = v42;
          v42[2] = v28;
          v42[3] = v30;
        }
        else
        {
          v32 = 0;
        }
        v9 = v38;
        v12 = v35;
        v33 = swift_task_create(v23 | 0x1C00, v32, v34, &unk_1000D1AD8, v31);
        swift_release(v14);
        swift_release(v33);
        v8 = v39;
        v3 = v40;
      }
      else
      {
        swift_release(v14);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      }
      ++v10;
    }
    while (v9 != v10);
    return swift_bridgeObjectRelease(v8);
  }
  __break(1u);
  return result;
}

uint64_t sub_10004575C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for ActivityState(0);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000738C(&qword_1000D1AA0);
  v5[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000738C(&qword_1000D1AA8);
  v5[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[10] = v10;
  v5[11] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000738C(&qword_1000D1AB0);
  v5[12] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[13] = v12;
  v5[14] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100045838, 0, 0);
}

uint64_t sub_100045838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_10004E97C();
  sub_10004EA58();
  sub_10004EBDC();
  sub_10004E880(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10000A40C(&qword_1000D1AB8, &qword_1000D1AB0);
  *(_QWORD *)(v0 + 120) = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 128) = v3;
  sub_10004E8B0(v3);
  return sub_10004E828();
}

uint64_t sub_1000458B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  int v3;
  int v4;

  sub_1000185FC();
  sub_10003B9D0(*(_QWORD *)(v0 + 128), v2);
  if (v1)
  {
    *(_QWORD *)(v0 + 136) = v1;
  }
  else
  {
    v3 = enum case for ActivityState.ended(_:);
    *(_DWORD *)(v0 + 152) = enum case for ActivityState.active(_:);
    *(_DWORD *)(v0 + 156) = v3;
    v4 = enum case for ActivityState.stale(_:);
    *(_DWORD *)(v0 + 160) = enum case for ActivityState.dismissed(_:);
    *(_DWORD *)(v0 + 164) = v4;
  }
  sub_100018E50();
  return sub_1000184AC();
}

uint64_t sub_100045934()
{
  uint64_t v0;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_10004E97C();
  sub_10004EBA4();
  if (v4)
  {
    sub_10004E930(*(_QWORD *)(v0 + 104));
    sub_100018E2C();
    sub_100018C28();
    sub_1000189B0();
    sub_10003BA38();
    return sub_10004E8E0(*(uint64_t (**)(void))(v0 + 8));
  }
  v2 = *(unsigned int *)(v0 + 152);
  sub_10004E9F4();
  v3 = sub_10004EB94();
  if (v3 == (_DWORD)v2)
    goto LABEL_13;
  v4 = v3 == *(_DWORD *)(v0 + 156) || v3 == *(_DWORD *)(v0 + 160);
  if (v4)
  {
    if (qword_1000CFA90 == -1)
      return sub_10004E86C();
    goto LABEL_20;
  }
  if (v3 == *(_DWORD *)(v0 + 164))
  {
LABEL_13:
    if (qword_1000CFA90 == -1)
      return sub_10004E86C();
LABEL_20:
    swift_once(&qword_1000CFA90, sub_100047918);
    return sub_10004E86C();
  }
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v5 = sub_1000187DC();
  sub_10004E91C(v5, (uint64_t)qword_1000DDB00);
  v6 = static os_log_type_t.error.getter();
  if (sub_100018B38(v6))
  {
    v7 = (_WORD *)sub_100018554(2);
    *v7 = 0;
    sub_10004EADC((void *)&_mh_execute_header, v8, v9, "Unused case, this could cause serious regressions!");
    sub_10000A818((uint64_t)v7);
  }
  sub_10004EC84();
  sub_10004EA80(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 144) = v10;
  sub_10004E8F4(v10);
  return sub_10004E828();
}

uint64_t sub_100045ADC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 136);
  v1 = sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_10004E8CC(v1);
  return sub_10004E8A4();
}

uint64_t sub_100045B24()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100045C08(*(_QWORD *)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 144) = v1;
  sub_10004E8F4(v1);
  return sub_10004EA2C();
}

uint64_t sub_100045B6C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_100046308(*(_QWORD *)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 144) = v1;
  sub_10004E8F4(v1);
  return sub_10004EA2C();
}

uint64_t sub_100045BB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = v2;
  sub_10003B9D0(*(_QWORD *)(v2 + 144), &v4);
  if (v0)
    *(_QWORD *)(v2 + 136) = v0;
  sub_100018E50();
  return sub_1000184AC();
}

void sub_100045C08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v3 = type metadata accessor for ActivityState(0);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  __chkstk_darwin(v3);
  v48 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SportsActivityAttributes(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = Activity.attributes.getter(v9);
  v11 = SportsActivityAttributes.canonicalId.getter(v10);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_beginAccess(v1 + 2, v54, 33, 0);
  swift_bridgeObjectRetain(v13);
  v14 = swift_retain(a1);
  sub_100096EDC(v14, v11, v13);
  swift_endAccess(v54);
  swift_bridgeObjectRelease(v13);
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_1000096EC(v15, (uint64_t)qword_1000DDB00);
  swift_bridgeObjectRetain_n(v13, 2);
  v17 = swift_retain_n(a1, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(64, -1);
    v51 = v16;
    v47 = v21;
    v54[0] = v21;
    *(_DWORD *)v20 = 136315394;
    v22 = Activity.id.getter();
    v24 = v23;
    sub_100014B44(v22, v23, v54);
    v52 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v20 + 4, v20 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain(v13);
    sub_100014B44(v11, v13, v54);
    v52 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease_n(v13, 3);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "ActivityStore: writing activity '%s' for '%s' to persistence", (uint8_t *)v20, 0x16u);
    v27 = v47;
    swift_arrayDestroy(v47, 2);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v13, 2);
    swift_release_n(a1, 2);
  }
  v28 = v1[6];
  v29 = v1[7];
  sub_1000073CC(v1 + 3, v28);
  dispatch thunk of PersistentStorable.writeActivity(activityId:)(v11, v13, v28, v29);
  swift_bridgeObjectRelease(v13);
  swift_retain_n(a1, 2);
  v30 = swift_retain_n(v1, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = v1;
    v34 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v54[0] = v35;
    *(_DWORD *)v34 = 136315394;
    v36 = v48;
    dispatch thunk of Activity.activityState.getter(v35);
    v37 = ActivityState.description.getter();
    v39 = v38;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v50);
    sub_100014B44(v37, v39, v54);
    v52 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v34 + 4, v34 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v34 + 12) = 2080;
    v41 = v33[2];
    swift_bridgeObjectRetain(v41);
    v42 = sub_10000738C(&qword_1000D1A10);
    v43 = Dictionary.description.getter(v41, &type metadata for String, v42, &protocol witness table for String);
    v45 = v44;
    swift_bridgeObjectRelease(v41);
    sub_100014B44(v43, v45, v54);
    v52 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v34 + 14, v34 + 22);
    swift_release_n(v33, 2);
    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "ActivityStore: write complete with state %s. Active activities: %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 2);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
    swift_release_n(a1, 2);
  }
}

uint64_t sub_100046308(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70[2];
  __int128 v71[2];
  __int128 v72[2];
  uint64_t v73[12];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[184];

  v2 = v1;
  v4 = type metadata accessor for ActivityState(0);
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  __chkstk_darwin(v4);
  v63 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SportsActivityAttributes(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = Activity.attributes.getter(v10);
  v12 = SportsActivityAttributes.canonicalId.getter(v11);
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_beginAccess(v1 + 2, v73, 33, 0);
  v15 = sub_100096C2C(v12, v14);
  swift_endAccess(v73);
  swift_release(v15);
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_1000096EC(v16, (uint64_t)qword_1000DDB00);
  swift_retain_n(a1, 2);
  v18 = swift_bridgeObjectRetain_n(v14, 2);
  v67 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v68 = v12;
  if (v21)
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v66 = v2;
    v24 = v23;
    v73[0] = v23;
    *(_DWORD *)v22 = 136315394;
    v25 = Activity.id.getter();
    v27 = v26;
    sub_100014B44(v25, v26, v73);
    v76 = v28;
    v12 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v27);
    swift_release_n(a1, 2);
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain(v14);
    sub_100014B44(v12, v14, v73);
    v76 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(v14, 3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "ActivityStore: removing activity '%s' for '%s' from persistence", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v24, 2);
    v30 = v24;
    v2 = v66;
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease_n(v14, 2);
  }

  v31 = v2[6];
  v32 = v2[7];
  sub_1000073CC(v2 + 3, v31);
  dispatch thunk of PersistentStorable.removeActivity(activityId:)(v12, v14, v31, v32);
  v69 = v14;
  swift_retain_n(a1, 4);
  v33 = swift_bridgeObjectRetain_n(v14, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter(v34);
  v36 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    v37 = swift_slowAlloc(32, -1);
    v67 = swift_slowAlloc(96, -1);
    v73[0] = v67;
    *(_DWORD *)v37 = 136315650;
    LODWORD(v66) = v36;
    v38 = Activity.id.getter();
    v40 = v39;
    sub_100014B44(v38, v39, v73);
    v76 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v40);
    swift_release_n(a1, 2);
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain(v69);
    sub_100014B44(v12, v69, v73);
    v76 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v37 + 14, v37 + 22);
    v43 = swift_bridgeObjectRelease_n(v69, 3);
    *(_WORD *)(v37 + 22) = 2080;
    v44 = v63;
    dispatch thunk of Activity.activityState.getter(v43);
    v45 = ActivityState.description.getter();
    v46 = a1;
    v47 = v2;
    v49 = v48;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v44, v65);
    sub_100014B44(v45, v49, v73);
    v76 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v37 + 24, v37 + 32);
    v51 = v49;
    v2 = v47;
    a1 = v46;
    swift_bridgeObjectRelease(v51);
    swift_release_n(v46, 2);
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v66, "ActivityStore: unregistering activity '%s' with canonicalId '%s' at state %s", (uint8_t *)v37, 0x20u);
    v52 = v67;
    swift_arrayDestroy(v67, 3);
    swift_slowDealloc(v52, -1, -1);
    v53 = v37;
    v14 = v69;
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    swift_release_n(a1, 4);
    swift_bridgeObjectRelease_n(v14, 2);
  }

  if (qword_1000CFA60 != -1)
    swift_once(&qword_1000CFA60, sub_100028A24);
  sub_100023E30(qword_1000DDA38 + 24, (uint64_t)v73);
  sub_100009D1C((uint64_t)v73, (uint64_t)v72);
  v54 = v73[5];
  sub_100009D1C((uint64_t)&v74, (uint64_t)v71);
  sub_100009D1C((uint64_t)&v75, (uint64_t)v70);
  swift_bridgeObjectRetain(v14);
  swift_retain(v54);
  v55 = v68;
  sub_10002CB34(v72, v54, v71, v70, 0xD000000000000011, 0x80000001000A5730, v68, v14, &v76);
  sub_100023FB4(v73);
  sub_10002CCD0();
  v73[0] = v56;
  v57 = swift_allocObject(&unk_1000C5358, 32, 7);
  *(_QWORD *)(v57 + 16) = v55;
  *(_QWORD *)(v57 + 24) = v14;
  v58 = swift_allocObject(&unk_1000C5380, 32, 7);
  *(_QWORD *)(v58 + 16) = a1;
  *(_QWORD *)(v58 + 24) = v2;
  swift_retain(a1);
  swift_retain(v2);
  v59 = sub_10000738C(&qword_1000D0B18);
  sub_10000A40C((unint64_t *)&qword_1000D0B20, &qword_1000D0B18);
  v60 = Publisher.sink(receiveCompletion:receiveValue:)(sub_10004DEBC, v57, sub_10004DEE8, v58, v59);
  swift_release(v58);
  swift_release(v57);
  swift_release(v73[0]);
  sub_10002F608(&v76);
  swift_beginAccess(v2 + 8, v73, 33, 0);
  AnyCancellable.store(in:)(v2 + 8);
  swift_endAccess(v73);
  return swift_release(v60);
}

void sub_100046BB8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *oslog;
  _QWORD v17[3];
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;

  v3 = *a1;
  if (*a1)
  {
    swift_errorRetain(*a1);
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v6 = type metadata accessor for Logger(0);
    sub_1000096EC(v6, (uint64_t)qword_1000DDAB8);
    swift_errorRetain(v3);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(v3);
    swift_bridgeObjectRetain(a3);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v20 = v10;
      *(_DWORD *)v9 = 136315394;
      swift_bridgeObjectRetain(a3);
      sub_100014B44(a2, a3, &v20);
      v19 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v9 + 12) = 2080;
      swift_getErrorValue(v3, v18, v17);
      v12 = Error.localizedDescription.getter(v17[1], v17[2]);
      v14 = v13;
      sub_100014B44(v12, v13, &v20);
      v19 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Tempo /unregister failed for id=%s with error=%s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(v3);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(v3);
      swift_errorRelease(v3);

    }
  }
}

void sub_100046E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = type metadata accessor for ActivityState(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v9 = type metadata accessor for Logger(0);
  sub_1000096EC(v9, (uint64_t)qword_1000DDB00);
  swift_retain_n(a2, 2);
  v10 = swift_retain_n(a3, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v29 = v15;
    v33 = v15;
    *(_DWORD *)v14 = 136315394;
    v28 = v13;
    dispatch thunk of Activity.activityState.getter(v15);
    v16 = ActivityState.description.getter();
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100014B44(v16, v18, &v33);
    v31 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 4, v14 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v14 + 12) = 2080;
    swift_beginAccess(a3 + 16, &v31, 0, 0);
    v20 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain(v20);
    v21 = sub_10000738C(&qword_1000D1A10);
    v22 = Dictionary.description.getter(v20, &type metadata for String, v21, &protocol witness table for String);
    v24 = v23;
    swift_bridgeObjectRelease(v20);
    sub_100014B44(v22, v24, &v33);
    v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 14, v14 + 22);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v28, "ActivityStore: unregister complete with state %s. Active activities: %s", (uint8_t *)v14, 0x16u);
    v26 = v29;
    swift_arrayDestroy(v29, 2);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release_n(a3, 2);
    swift_release_n(a2, 2);
  }
}

uint64_t sub_1000470D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(v2 + 16, v10, 0, 0);
  v5 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v5);
  v6 = sub_100015050(a1, a2);
  if ((v7 & 1) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
    swift_retain(v8);
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v5);
  return v8;
}

uint64_t sub_10004717C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v5 + 176) = a4;
  *(_QWORD *)(v5 + 64) = a3;
  *(_QWORD *)(v5 + 72) = v4;
  *(_QWORD *)(v5 + 48) = a1;
  *(_QWORD *)(v5 + 56) = a2;
  v6 = type metadata accessor for Date(0);
  *(_QWORD *)(v5 + 80) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 88) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 96) = swift_task_alloc(v8);
  *(_QWORD *)(v5 + 104) = swift_task_alloc(v8);
  v9 = type metadata accessor for ActivityUIDismissalPolicy(0);
  *(_QWORD *)(v5 + 112) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 120) = v10;
  *(_QWORD *)(v5 + 128) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000738C(&qword_1000D1AC0);
  *(_QWORD *)(v5 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v12 = qword_1000DDA70;
  *(_QWORD *)(v5 + 144) = qword_1000DDA70;
  return swift_task_switch(sub_100047270, v12, 0);
}

uint64_t sub_100047270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t (*v14)();
  _BOOL8 v15;
  uint64_t (*v16)(_BOOL8);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);

  v1 = sub_1000470D8(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  *(_QWORD *)(v0 + 152) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 136);
    if ((*(_BYTE *)(v0 + 176) & 1) != 0)
    {
      v18 = sub_10004ED28();
      v21 = sub_10003B9D8(v2, v19, v20, v18);
      static ActivityUIDismissalPolicy.immediate.getter(v21);
      v13 = (_QWORD *)sub_10004EAAC((uint64_t)&async function pointer to dispatch thunk of Activity.end(using:dismissalPolicy:));
      *(_QWORD *)(v0 + 168) = v13;
      v14 = sub_100047648;
    }
    else
    {
      v4 = *(_QWORD *)(v0 + 96);
      v3 = *(_QWORD *)(v0 + 104);
      v5 = *(_QWORD *)(v0 + 80);
      v6 = *(_QWORD *)(v0 + 88);
      v7 = *(double *)(v0 + 64);
      v8 = sub_10004ED28();
      v11 = sub_10003B9D8(v2, v9, v10, v8);
      static Date.now.getter(v11);
      static Date.+ infix(_:_:)(v4, v7);
      v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v12(v4, v5);
      static ActivityUIDismissalPolicy.after(_:)(v3);
      v12(v3, v5);
      v13 = (_QWORD *)sub_10004EAAC((uint64_t)&async function pointer to dispatch thunk of Activity.end(using:dismissalPolicy:));
      *(_QWORD *)(v0 + 160) = v13;
      v14 = sub_1000473C4;
    }
    *v13 = v0;
    v13[1] = v14;
    v22 = sub_10004EC54(*(_QWORD *)(v0 + 136));
    return v23(v22);
  }
  else
  {
    sub_10004EA8C();
    sub_1000189B0();
    sub_100018E2C();
    sub_100018C28();
    v15 = sub_10004E9E0();
    return v16(v15);
  }
}

uint64_t sub_1000473C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004E97C();
  sub_1000189A0();
  v1 = *(_QWORD *)(v0 + 120);
  sub_1000185EC();
  v2 = sub_10004E880(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10004EC40(v2, &qword_1000D1AC0);
  return sub_10004E86C();
}

void sub_100047420()
{
  _QWORD *v0;
  os_log_type_t v1;
  Swift::String v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v2._countAndFlagsBits = sub_10004EC2C();
  String.append(_:)(v2);
  sub_10004EC60();
  sub_10004EC20();
  v4 = v0[2];
  v3 = v0[3];
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v5 = sub_1000187DC();
  v6 = sub_1000096EC(v5, (uint64_t)qword_1000DDB00);
  sub_10004ED14();
  v7 = sub_100018E34();
  v8 = v6;
  Logger.logObject.getter(v7);
  v9 = sub_10004ED30();
  v10 = sub_10004EB44(v9);
  v11 = v0[19];
  v12 = v0[7];
  if (v10)
  {
    v19 = v0[19];
    v13 = v0[6];
    v14 = sub_100018554(22);
    v18 = sub_100018554(64);
    v20 = v18;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(v12);
    sub_100014B44(v13, v12, &v20);
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v14 + 4, v14 + 12);
    sub_100018A58(v12);
    *(_WORD *)(v14 + 12) = 2080;
    sub_100018E34();
    sub_100014B44(v4, v3, &v20);
    v0[5] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v14 + 14, v14 + 22);
    sub_100018A58(v3);
    sub_10004EBFC((void *)&_mh_execute_header, v8, v1, "LiveActivityManager.destroyActivity: activity for '%s' destroyed %s", (uint8_t *)v14);
    sub_10004EB30(v18);
    sub_10000A818(v18);
    sub_10000A818(v14);
    swift_release(v19);

  }
  else
  {
    sub_100018540(v0[7]);
    sub_100018540(v3);

    swift_release(v11);
  }
  sub_10004EA8C();
  sub_1000189B0();
  sub_100018E2C();
  sub_100018C28();
  sub_10004E9E0();
  sub_10004E990();
  __asm { BR              X1 }
}

uint64_t sub_100047648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004E97C();
  sub_1000189A0();
  v1 = *(_QWORD *)(v0 + 120);
  sub_1000185EC();
  v2 = sub_10004E880(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_10004EC40(v2, &qword_1000D1AC0);
  return sub_10004E86C();
}

uint64_t sub_1000476A4()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t (*v15)(_BOOL8);
  uint64_t v17;
  uint64_t v18;

  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v1 = sub_1000187DC();
  v2 = sub_1000096EC(v1, (uint64_t)qword_1000DDB00);
  sub_10004ED14();
  v3 = sub_10004EBEC();
  v4 = v2;
  Logger.logObject.getter(v3);
  v5 = sub_10004ED30();
  v6 = os_log_type_enabled(v2, v5);
  v7 = v0[7];
  if (v6)
  {
    v17 = v0[19];
    v8 = v0[6];
    v9 = sub_100018554(22);
    v10 = sub_100018554(64);
    v18 = v10;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain(v7);
    sub_100014B44(v8, v7, &v18);
    v0[4] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v9 + 4, v9 + 12);
    sub_100018A58(v7);
    *(_WORD *)(v9 + 12) = 2080;
    sub_10004EBEC();
    sub_100014B44(0x74616964656D6D69, 0xEB00000000796C65, &v18);
    v0[5] = v12;
    sub_10004E9B0((uint64_t)(v0 + 5), (uint64_t)(v0 + 6), v13, v9 + 22);
    sub_100018A58(0xEB00000000796C65);
    sub_10004EBFC((void *)&_mh_execute_header, v4, v5, "LiveActivityManager.destroyActivity: activity for '%s' destroyed %s", (uint8_t *)v9);
    sub_10004EB30(v10);
    sub_10000A818(v10);
    sub_10000A818(v9);
    swift_release(v17);

  }
  else
  {
    sub_100018540(v0[7]);
    sub_100018540(0xEB00000000796C65);

    sub_1000187F4();
  }
  sub_10004EA8C();
  sub_1000189B0();
  sub_100018E2C();
  sub_100018C28();
  v14 = sub_10004E9E0();
  return v15(v14);
}

_QWORD *sub_1000478B0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_100007618(v0 + 3);
  swift_bridgeObjectRelease(v0[8]);
  return v0;
}

uint64_t sub_1000478DC()
{
  _QWORD *v0;

  v0 = sub_1000478B0();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for ActivityStore()
{
  return objc_opt_self(_TtC7sportsdP33_B5BC515043258C251552F92F6ED878F913ActivityStore);
}

void sub_100047918()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for LiveActivityActor();
  v1 = swift_allocObject(v0, 112, 15);
  swift_defaultActor_initialize();
  qword_1000DDA70 = v1;
  sub_100006200();
}

uint64_t type metadata accessor for LiveActivityActor()
{
  return objc_opt_self(_TtC7sportsd17LiveActivityActor);
}

uint64_t sub_10004796C()
{
  sub_100044790();
  return swift_retain(qword_1000DDA70);
}

uint64_t sub_100047988(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for LiveActivityActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_1000479AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _OWORD v3[2];
  uint64_t v4;

  v0 = type metadata accessor for LiveActivityManager();
  memset(v3, 0, sizeof(v3));
  v4 = 0;
  v1 = sub_10000A748(v0, 112);
  result = sub_100047B6C((uint64_t)v3);
  qword_1000DDA78 = v1;
  return result;
}

void sub_1000479F8()
{
  unint64_t v0;

  v0 = sub_100043DEC();
  dispatch thunk of ActivityAuthorization.areActivitiesEnabled(forBundleId:)(v0);
  sub_1000185B4();
  sub_100006200();
}

uint64_t sub_100047A28(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  void (*v14)(_BYTE *, uint64_t);
  _BYTE v16[16];

  v5 = type metadata accessor for ActivityAuthorizationInfo.ActivityAuthorizationStatus(0, a3);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v9);
  v12 = &v16[-v11];
  ActivityAuthorizationInfo.activityAuthorizationStatus(for:)(a1, a2, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for ActivityAuthorizationInfo.ActivityAuthorizationStatus.alwaysAllow(_:), v5);
  v13 = static ActivityAuthorizationInfo.ActivityAuthorizationStatus.== infix(_:_:)(v12, v8);
  v14 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v14(v8, v5);
  v14(v12, v5);
  return v13 & 1;
}

uint64_t sub_100047B30()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + 104);
  sub_100024980(v1 + 16, (uint64_t)v3, 0);
  return *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
}

uint64_t sub_100047B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  objc_class *v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  ValueMetadata *v37;
  unint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;

  v4 = v1;
  sub_10000738C(&qword_1000D0578);
  sub_10000A680();
  __chkstk_darwin(v6);
  sub_10000A6FC();
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = &_swiftEmptySetSingleton;
  *(_BYTE *)(v1 + 72) = 0;
  v7 = (objc_class *)type metadata accessor for ActivityAuthorization(0);
  *(_QWORD *)(v1 + 80) = objc_msgSend(objc_allocWithZone(v7), "init");
  v8 = type metadata accessor for ActivityAuthorizationInfo(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v1 + 88) = ActivityAuthorizationInfo.init()();
  v9 = objc_msgSend(objc_allocWithZone(v7), "init");
  v10 = sub_100043DEC();
  v12 = v11;
  v40 = (uint64_t)v7;
  v41 = &off_1000C5188;
  v39[0] = v9;
  v13 = type metadata accessor for ActivityCapUtility();
  v14 = (_QWORD *)sub_10000A748(v13, 72);
  v15 = sub_10000AE58((uint64_t)v39, (uint64_t)v7);
  __chkstk_darwin(v15);
  sub_10000A7E4();
  (*(void (**)(uint64_t *))(v16 + 16))(v3);
  v17 = *v3;
  v14[5] = v7;
  v14[6] = &off_1000C5188;
  v14[2] = v17;
  v14[7] = v10;
  v14[8] = v12;
  sub_100007618(v39);
  *(_QWORD *)(v4 + 96) = v14;
  sub_100009D5C(a1, (uint64_t)&v36, &qword_1000D0DF8);
  if (v37)
  {
    sub_100009DDC(&v36, (uint64_t)v39);
  }
  else
  {
    v18 = type metadata accessor for PersistentStore(0);
    v19 = PersistentStore.__allocating_init()();
    v40 = v18;
    v41 = (_UNKNOWN **)&protocol witness table for PersistentStore;
    v39[0] = v19;
    sub_10004DE70((uint64_t)&v36, &qword_1000D0DF8);
  }
  sub_100009D1C((uint64_t)v39, v4 + 16);
  sub_100009D1C((uint64_t)v39, (uint64_t)&v36);
  v20 = type metadata accessor for ActivityStore();
  v21 = sub_10000A748(v20, 72);
  *(_QWORD *)(v4 + 104) = sub_100044AF0((uint64_t)&v36);
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v22 = sub_1000187DC();
  sub_10004E91C(v22, (uint64_t)qword_1000DDB00);
  v23 = sub_10004ED30();
  if (sub_10004EB44(v23))
  {
    v24 = (uint8_t *)sub_100018554(12);
    v25 = sub_100018554(32);
    *(_QWORD *)&v36 = v25;
    *(_DWORD *)v24 = 136315138;
    v26 = sub_100043DEC();
    sub_100014B44(v26, v27, (uint64_t *)&v36);
    v35 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v24 + 4, v24 + 12);
    sub_100018A44();
    sub_100018948((void *)&_mh_execute_header, v21, (os_log_type_t)v10, "Current target app is: %s", v24);
    sub_100018940(v25);
    sub_10000A818(v25);
    sub_10000A818((uint64_t)v24);
  }

  v29 = sub_10004ED20();
  sub_10003B9D8(v2, v30, v31, v29);
  v32 = sub_10000A748((uint64_t)&unk_1000C51C8, 40);
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = v4;
  swift_retain(v4);
  v33 = sub_100043B64(v2, (uint64_t)&unk_1000D1998, v32, (uint64_t)&unk_1000C5268, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000D1A18);
  swift_release(v33);
  v37 = &type metadata for TVAppFeatureFlags;
  v38 = sub_10000A278();
  LOBYTE(v32) = isFeatureEnabled(_:)(&v36);
  sub_100007618(&v36);
  if ((v32 & 1) != 0)
    sub_10004803C();
  sub_10004DE70(a1, &qword_1000D0DF8);
  sub_100007618(v39);
  return v4;
}

uint64_t sub_100047F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100047F18, 0, 0);
}

uint64_t sub_100047F18()
{
  uint64_t v0;

  sub_100047F40();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100047F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v1 = v0;
  v2 = type metadata accessor for InternalSettings();
  swift_initStaticObject(v2, &unk_1000CFB38);
  v8[0] = sub_10007BF68();
  v3 = swift_allocObject(&unk_1000C5290, 24, 7);
  swift_weakInit(v3 + 16);
  v4 = sub_10000738C(&qword_1000D1A20);
  sub_10000A40C(&qword_1000D1A28, &qword_1000D1A20);
  v6 = Publisher<>.sink(receiveValue:)(sub_10004DBBC, v3, v4, v5);
  swift_release(v3);
  swift_release(v8[0]);
  v1 += 64;
  swift_beginAccess(v1, v8, 33, 0);
  AnyCancellable.store(in:)(v1);
  swift_endAccess(v8);
  return swift_release(v6);
}

uint64_t sub_10004803C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority(0);
  sub_10000964C((uint64_t)v3, 1, 1, v4);
  v5 = qword_1000CFA90;
  swift_retain(v0);
  if (v5 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v7 = qword_1000DDA70;
  sub_1000181E4(&qword_1000D1988, v6, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
  v9 = v8;
  v10 = (_QWORD *)swift_allocObject(&unk_1000C51F0, 40, 7);
  v10[2] = v7;
  v10[3] = v9;
  v10[4] = v0;
  swift_retain(v7);
  v11 = sub_100043B64((uint64_t)v3, (uint64_t)&unk_1000D19A8, (uint64_t)v10, (uint64_t)&unk_1000C5268, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000D1A18);
  v12 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 56) = v11;
  return swift_release(v12);
}

void sub_10004817C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
  {
    swift_retain(*(_QWORD *)(v0 + 56));
    Task.cancel()();
    sub_1000187F4();
  }
  sub_100007618((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));

  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  sub_100006200();
}

uint64_t sub_100048200()
{
  uint64_t v0;

  sub_10004817C();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for LiveActivityManager()
{
  return objc_opt_self(_TtC7sportsd19LiveActivityManager);
}

void sub_100048240(uint64_t a1, uint64_t a2)
{
  sub_1000181E4(&qword_1000D1988, a2, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
}

uint64_t sub_10004826C(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v4 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v14, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    v10 = type metadata accessor for TaskPriority(0);
    sub_10000964C((uint64_t)v6, 1, 1, v10);
    v11 = swift_allocObject(&unk_1000C52B8, 41, 7);
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = v9;
    *(_BYTE *)(v11 + 40) = v7;
    v12 = sub_100043B64((uint64_t)v6, (uint64_t)&unk_1000D1A38, v11, (uint64_t)&unk_1000C5268, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000D1A18);
    return swift_release(v12);
  }
  return result;
}

uint64_t sub_100048370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 24) = a5;
  *(_QWORD *)(v5 + 16) = a4;
  return swift_task_switch(sub_10004838C, 0, 0);
}

uint64_t sub_10004838C()
{
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return sub_1000184B8();
}

uint64_t sub_1000483E4()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 72) = *(_BYTE *)(v0 + 24);
  return sub_10004EAF0();
}

uint64_t sub_1000483F4(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[3] = a5;
  v6 = type metadata accessor for ActivityAuthorizationInfo.ActivityAuthorizationStatus(0, a1);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000738C(&qword_1000D19B0);
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActivityAuthorizationInfo.ActivityAuthorizationStatusUpdates(0);
  v5[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[9] = v10;
  v5[10] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ActivityAuthorizationInfo.ActivityAuthorizationStatusUpdates.Iterator(0);
  v5[11] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[12] = v12;
  v5[13] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v13 = qword_1000DDA70;
  v5[14] = qword_1000DDA70;
  return swift_task_switch(sub_1000484F8, v13, 0);
}

uint64_t sub_1000484F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  sub_10004E97C();
  v1 = v0[9];
  v2 = ActivityAuthorizationInfo.activityAuthorizationStatusUpdates.getter();
  ActivityAuthorizationInfo.ActivityAuthorizationStatusUpdates.makeAsyncIterator()(v2);
  sub_10004E880(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v0[15] = qword_1000DDA70;
  sub_1000181E4(&qword_1000D1988, v3, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
  v0[16] = v4;
  sub_1000181E4(&qword_1000D19B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityAuthorizationInfo.ActivityAuthorizationStatusUpdates.Iterator);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  sub_10004E9B8(v5);
  return sub_10004E828();
}

uint64_t sub_1000485B8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  sub_1000185FC();
  sub_100018994(v2);
  v0[18] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v4 = v0[15];
    if (v4)
    {
      v5 = v0[16];
      ObjectType = swift_getObjectType(v4);
      dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v5);
    }
  }
  return sub_1000184AC();
}

uint64_t sub_10004863C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(uint64_t **)(v0 + 56);
  v2 = sub_10000738C(&qword_1000D19C0);
  if (sub_100009658((uint64_t)v1, 1, v2) == 1)
  {
    sub_10004E930(*(_QWORD *)(v0 + 96));
    sub_100018E2C();
    sub_100018C28();
    sub_10004ECB0();
    sub_10003BA38();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 40);
    v4 = *(char **)(v0 + 48);
    v6 = *v1;
    v7 = (void *)v1[1];
    (*(void (**)(char *, char *, _QWORD))(v5 + 32))(v4, (char *)v1 + *(int *)(v2 + 48), *(_QWORD *)(v0 + 32));
    sub_1000487DC(v4, v6, v7);
    sub_10004ED40();
    sub_10004E880(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    *(_QWORD *)(v0 + 120) = qword_1000DDA70;
    sub_1000181E4(&qword_1000D1988, v8, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
    *(_QWORD *)(v0 + 128) = v9;
    sub_1000181E4(&qword_1000D19B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityAuthorizationInfo.ActivityAuthorizationStatusUpdates.Iterator);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    v11 = sub_10004E9B8(v10);
    return dispatch thunk of AsyncIteratorProtocol.next()(v11, v12, v13);
  }
}

uint64_t sub_100048794()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 144);
  v1 = sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_10004E8CC(v1);
  return sub_10004E8A4();
}

void sub_1000487DC(char *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ObjectType;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _BYTE v69[4];
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  _QWORD v78[5];
  uint64_t v79[3];
  Swift::String v80;

  v4 = v3;
  v72 = a2;
  v7 = sub_10000738C(&qword_1000D0578);
  v8 = __chkstk_darwin(v7);
  v10 = &v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for ActivityAuthorizationInfo.ActivityAuthorizationStatus(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v75 = &v69[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v16 = &v69[-v15];
  __chkstk_darwin(v17);
  v19 = &v69[-v18];
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v20 = type metadata accessor for Logger(0);
  sub_1000096EC(v20, (uint64_t)qword_1000DDB00);
  v76 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v76(v19, a1, v11);
  v21 = swift_bridgeObjectRetain_n(a3, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter(v22);
  v24 = v12;
  v25 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    v26 = swift_slowAlloc(22, -1);
    v70 = v25;
    v27 = v24;
    v28 = v26;
    v71 = swift_slowAlloc(64, -1);
    v79[0] = v71;
    *(_DWORD *)v28 = 136315394;
    v73 = a1;
    v76(v16, v19, v11);
    v29 = String.init<A>(describing:)(v16, v11);
    v31 = v30;
    sub_100014B44(v29, v30, v79);
    v77 = v32;
    v74 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v31);
    v33 = *(void (**)(char *, uint64_t))(v27 + 8);
    v33(v19, v11);
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    sub_100014B44(v72, (unint64_t)a3, v79);
    v77 = v34;
    a1 = v73;
    v4 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v70, "Received activity authorization status update %s for bundle %s", (uint8_t *)v28, 0x16u);
    v35 = v71;
    swift_arrayDestroy(v71, 2);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {
    v33 = *(void (**)(char *, uint64_t))(v24 + 8);
    v33(v19, v11);

    swift_bridgeObjectRelease_n(a3, 2);
    v27 = v24;
  }
  v36 = v75;
  v76(v75, a1, v11);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v36, v11);
  if (v37 == enum case for ActivityAuthorizationInfo.ActivityAuthorizationStatus.noAuthorization(_:))
    goto LABEL_39;
  if (v37 != enum case for ActivityAuthorizationInfo.ActivityAuthorizationStatus.allow(_:)
    && v37 != enum case for ActivityAuthorizationInfo.ActivityAuthorizationStatus.alwaysAllow(_:))
  {
    v33(v36, v11);
LABEL_39:
    v80._countAndFlagsBits = v72;
    v80._object = a3;
    sub_100048E60(v4, v80);
    return;
  }
  if ((sub_100063B00() & 1) != 0)
  {
    v40 = 1;
    v39 = 0xE400000000000000;
  }
  else
  {
    v39 = 0xE300000000000000;
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(7827308, 0xE300000000000000, 1751607656, 0xE400000000000000, 0);
  }
  swift_bridgeObjectRelease(v39);
  v41 = *(_QWORD *)(v4 + 104);
  swift_beginAccess(v41 + 16, v79, 0, 0);
  v42 = *(_QWORD *)(v41 + 16);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v42);
  v44 = (uint64_t)sub_100049220(v43, v72, (uint64_t)a3);
  v45 = v44;
  if (!((unint64_t)v44 >> 62))
  {
    v46 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v46)
      goto LABEL_17;
LABEL_38:
    swift_bridgeObjectRelease(v45);
    goto LABEL_39;
  }
  if (v44 >= 0)
    v44 &= 0xFFFFFFFFFFFFFF8uLL;
  v46 = _CocoaArrayWrapper.endIndex.getter(v44);
  if (!v46)
    goto LABEL_38;
LABEL_17:
  v71 = (uint64_t)a3;
  if (v46 >= 1)
  {
    v47 = 0;
    v75 = (char *)(v45 & 0xC000000000000001);
    LODWORD(v74) = v40 & 1;
    v73 = (char *)&type metadata for () + 8;
    v76 = (void (*)(char *, char *, uint64_t))v45;
    do
    {
      if (v75)
      {
        v48 = specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v45);
      }
      else
      {
        v48 = *(_QWORD *)(v45 + 8 * v47 + 32);
        swift_retain(v48);
      }
      v49 = type metadata accessor for TaskPriority(0);
      sub_10000964C((uint64_t)v10, 1, 1, v49);
      v50 = qword_1000CFA90;
      swift_retain(v4);
      swift_retain(v48);
      if (v50 != -1)
        swift_once(&qword_1000CFA90, sub_100047918);
      v52 = qword_1000DDA70;
      sub_1000181E4(&qword_1000D1988, v51, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
      v54 = v53;
      v55 = swift_allocObject(&unk_1000C5218, 49, 7);
      *(_QWORD *)(v55 + 16) = v52;
      *(_QWORD *)(v55 + 24) = v54;
      v56 = v4;
      *(_QWORD *)(v55 + 32) = v4;
      *(_QWORD *)(v55 + 40) = v48;
      *(_BYTE *)(v55 + 48) = v74;
      LODWORD(v54) = sub_100009658((uint64_t)v10, 1, v49);
      v57 = swift_retain(v52);
      if ((_DWORD)v54 == 1)
      {
        sub_10004DE70((uint64_t)v10, &qword_1000D0578);
        v58 = 0;
      }
      else
      {
        v59 = TaskPriority.rawValue.getter(v57);
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v10, v49);
        v58 = v59;
      }
      v60 = *(_QWORD *)(v55 + 16);
      if (v60)
      {
        v61 = *(_QWORD *)(v55 + 24);
        ObjectType = swift_getObjectType(*(_QWORD *)(v55 + 16));
        swift_unknownObjectRetain(v60);
        v63 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v61);
        v65 = v64;
        swift_unknownObjectRelease(v60);
      }
      else
      {
        v63 = 0;
        v65 = 0;
      }
      v66 = swift_allocObject(&unk_1000C5240, 32, 7);
      *(_QWORD *)(v66 + 16) = &unk_1000D19D8;
      *(_QWORD *)(v66 + 24) = v55;
      if (v65 | v63)
      {
        v78[0] = 0;
        v78[1] = 0;
        v67 = v78;
        v78[2] = v63;
        v78[3] = v65;
      }
      else
      {
        v67 = 0;
      }
      ++v47;
      v68 = swift_task_create(v58 | 0x1C00, v67, v73, &unk_1000D1438, v66);
      swift_release(v48);
      swift_release(v68);
      v4 = v56;
      v45 = (uint64_t)v76;
    }
    while (v46 != v47);
    swift_bridgeObjectRelease(v76);
    a3 = (void *)v71;
    goto LABEL_39;
  }
  __break(1u);
}

void sub_100048E60(int a1, Swift::String a2)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *oslog;
  _QWORD v23[3];
  _BYTE v24[8];
  uint64_t v25;
  uint64_t v26[2];

  object = a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  ActivityAuthorizationInfo.unsubscribeToActivityAuthorizationStatusUpdates(for:)(a2);
  if (v4)
  {
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v5 = type metadata accessor for Logger(0);
    sub_1000096EC(v5, (uint64_t)qword_1000DDB00);
    swift_bridgeObjectRetain(object);
    swift_errorRetain(v4);
    swift_bridgeObjectRetain(object);
    v6 = swift_errorRetain(v4);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v26[0] = v9;
      *(_DWORD *)v8 = 136315394;
      swift_bridgeObjectRetain(object);
      sub_100014B44(countAndFlagsBits, (unint64_t)object, v26);
      v25 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease_n(object, 3);
      *(_WORD *)(v8 + 12) = 2080;
      swift_getErrorValue(v4, v24, v23);
      v11 = Error.localizedDescription.getter(v23[1], v23[2]);
      v13 = v12;
      sub_100014B44(v11, v12, v26);
      v25 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Failed to unsubscribe from activity authorization status updates for %s - %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(v4);
    }
    else
    {
      swift_errorRelease(v4);
      swift_bridgeObjectRelease_n(object, 2);
      swift_errorRelease(v4);
      swift_errorRelease(v4);

    }
  }
  else
  {
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v15 = type metadata accessor for Logger(0);
    sub_1000096EC(v15, (uint64_t)qword_1000DDB00);
    v16 = swift_bridgeObjectRetain_n(object, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v26[0] = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain(object);
      sub_100014B44(countAndFlagsBits, (unint64_t)object, v26);
      v25 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease_n(object, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unsubscribed to activity authorization status updates for bundle %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(object, 2);
    }
  }
}

_QWORD *sub_100049220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *result;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  _QWORD *v37;

  v6 = type metadata accessor for SportsActivityAttributes(0);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin();
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = &_swiftEmptyArrayStorage;
  result = sub_100073004(v36, a1);
  v10 = v36[0];
  v11 = v36[3];
  v12 = v36[4];
  v32 = v36[1];
  v33 = (unint64_t)(v36[2] + 64) >> 6;
  while (v12)
  {
    v13 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v14 = v13 | (v11 << 6);
LABEL_20:
    v19 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v14);
    v20 = swift_retain(v19);
    v21 = Activity.attributes.getter(v20);
    v22 = SportsActivityAttributes.bundleId.getter(v21);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v35);
    if (v22 == a2 && v24 == a3)
    {
      v27 = swift_bridgeObjectRelease(a3);
LABEL_27:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      v28 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
      v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v19);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v29);
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, a2, a3, 0);
      v27 = swift_bridgeObjectRelease(v24);
      if ((v26 & 1) != 0)
        goto LABEL_27;
      result = (_QWORD *)swift_release(v19);
    }
  }
  v15 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v15 >= v33)
      goto LABEL_28;
    v16 = *(_QWORD *)(v32 + 8 * v15);
    v17 = v11 + 1;
    if (!v16)
    {
      v17 = v11 + 2;
      if (v11 + 2 >= v33)
        goto LABEL_28;
      v16 = *(_QWORD *)(v32 + 8 * v17);
      if (!v16)
      {
        v17 = v11 + 3;
        if (v11 + 3 >= v33)
          goto LABEL_28;
        v16 = *(_QWORD *)(v32 + 8 * v17);
        if (!v16)
        {
          v17 = v11 + 4;
          if (v11 + 4 >= v33)
            goto LABEL_28;
          v16 = *(_QWORD *)(v32 + 8 * v17);
          if (!v16)
          {
            v17 = v11 + 5;
            if (v11 + 5 >= v33)
              goto LABEL_28;
            v16 = *(_QWORD *)(v32 + 8 * v17);
            if (!v16)
            {
              v18 = v11 + 6;
              while (v18 < v33)
              {
                v16 = *(_QWORD *)(v32 + 8 * v18++);
                if (v16)
                {
                  v17 = v18 - 1;
                  goto LABEL_19;
                }
              }
LABEL_28:
              swift_release(v10);
              v30 = v37;
              swift_bridgeObjectRelease(a3);
              return v30;
            }
          }
        }
      }
    }
LABEL_19:
    v12 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
    v11 = v17;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_100049494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v6 + 88) = a6;
  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = a5;
  v7 = type metadata accessor for SportsActivityAttributes(0);
  *(_QWORD *)(v6 + 40) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 56) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v9 = qword_1000DDA70;
  *(_QWORD *)(v6 + 64) = qword_1000DDA70;
  return swift_task_switch(sub_100049528, v9, 0);
}

uint64_t sub_100049528()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;

  v1 = *(_QWORD **)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v35 = *(unsigned __int8 *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = v1[5];
  v6 = v1[6];
  v7 = sub_1000073CC(v1 + 2, v5);
  v8 = Activity.attributes.getter(v7);
  v9 = SportsActivityAttributes.canonicalId.getter(v8);
  v11 = v10;
  v12 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v12(v2, v4);
  v13 = dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(v9, v11, v35, v5, v6);
  *(_QWORD *)(v0 + 72) = v13;
  sub_100018A44();
  if (!v13)
  {
    v36 = (uint64_t (*)(uint64_t, uint64_t))v12;
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v20 = *(_QWORD *)(v0 + 32);
    v21 = sub_1000187DC();
    sub_1000096EC(v21, (uint64_t)qword_1000DDB00);
    v22 = swift_retain_n(v20, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = *(_QWORD *)(v0 + 56);
      v34 = *(_QWORD *)(v0 + 40);
      v33 = *(_QWORD *)(v0 + 32);
      v26 = (uint8_t *)sub_100018554(12);
      v27 = sub_100018554(32);
      v37 = v27;
      *(_DWORD *)v26 = 136315138;
      v28 = Activity.attributes.getter(v27);
      SportsActivityAttributes.canonicalId.getter(v28);
      v29 = v36(v25, v34);
      sub_10004ED08(v29, v30, &v37);
      *(_QWORD *)(v0 + 16) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v26 + 4, v26 + 12);
      sub_10004ED40();
      sub_10004E9D8(v33);
      sub_100018948((void *)&_mh_execute_header, v23, v24, "Could not find a subscription for paused activity with id %s", v26);
      sub_100018940(v27);
      sub_10000A818(v27);
      sub_10000A818((uint64_t)v26);
    }
    else
    {
      sub_10004E9D8(*(_QWORD *)(v0 + 32));
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    sub_10004EB14();
    __asm { BR              X0 }
  }
  v14 = (_QWORD *)swift_task_alloc(dword_1000D19E4);
  *(_QWORD *)(v0 + 80) = v14;
  *v14 = v0;
  v14[1] = sub_10004979C;
  sub_10004EB14();
  return sub_100049824(v15, v16, v17, v18);
}

uint64_t sub_10004979C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_1000185FC();
  sub_10003B9D0(*(_QWORD *)(v0 + 80), v2);
  if (v1)
    swift_errorRelease(v1);
  return sub_1000184AC();
}

uint64_t sub_1000497F4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100049824(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_BYTE *)(v5 + 254) = a4;
  *(_BYTE *)(v5 + 253) = a3;
  *(_BYTE *)(v5 + 252) = a2;
  *(_QWORD *)(v5 + 80) = a1;
  *(_QWORD *)(v5 + 88) = v4;
  v6 = type metadata accessor for SportingEventProgressStatus(0);
  *(_QWORD *)(v5 + 96) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 104) = v7;
  *(_QWORD *)(v5 + 112) = sub_100018850(v7);
  v8 = sub_100027BC8();
  *(_QWORD *)(v5 + 120) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 128) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 136) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 144) = swift_task_alloc(v10);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_1000498AC()
{
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return sub_1000184B8();
}

uint64_t sub_100049904()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 104);
  return sub_10004E898((uint64_t)sub_10004991C);
}

uint64_t sub_10004991C(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 160) = SportingEventSubscription.canonicalId.getter(a1);
  *(_QWORD *)(v1 + 168) = v2;
  return sub_1000184B8();
}

uint64_t sub_100049958()
{
  uint64_t *v0;

  v0[22] = sub_1000470D8(v0[20], v0[21]);
  sub_1000185B4();
  sub_100018E50();
  return sub_1000184AC();
}

uint64_t sub_100049998()
{
  uint64_t v0;
  double v1;
  char v2;
  char v3;
  double v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  void (*v13)(uint64_t, uint64_t);
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v35;

  if (!*(_QWORD *)(v0 + 176))
  {
    sub_10004EAD0();
    sub_1000189B0();
    sub_100018E2C();
    sub_1000186B0();
    sub_10004E990();
    __asm { BR              X0 }
  }
  v1 = COERCE_DOUBLE(SportingEventSubscription.liveActivityTTLSeconds.getter());
  v2 = *(_BYTE *)(v0 + 252);
  if ((v3 & 1) != 0)
  {
    v4 = -1.0;
    if ((*(_BYTE *)(v0 + 252) & 1) != 0)
    {
      v5 = 0;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v4 = v1;
  v5 = v1 > -1.0;
  if (v1 > -1.0)
    v2 = 1;
  if ((v2 & 1) == 0)
LABEL_10:
    v5 = 0;
LABEL_11:
  *(_BYTE *)(v0 + 255) = v5;
  *(double *)(v0 + 184) = v4;
  v8 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v11 = static Date.now.getter(*(_QWORD *)&v1);
  SportingEventSubscription.updatedAt.getter(v11);
  v12 = Date.timeIntervalSince(_:)(v8);
  *(double *)(v0 + 192) = v12;
  v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v8, v10);
  v13(v7, v10);
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v14 = *(void **)(v0 + 80);
  v15 = sub_1000187DC();
  *(_QWORD *)(v0 + 200) = sub_1000096EC(v15, (uint64_t)qword_1000DDB00);
  v16 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.debug.getter(v16);
  v18 = sub_10004EB7C(v16);
  v19 = *(void **)(v0 + 80);
  if (v18)
  {
    v20 = sub_100018554(18);
    v21 = sub_100018554(32);
    v35 = v21;
    v22.n128_u64[0] = 136315394;
    *(_DWORD *)v20 = 136315394;
    v23 = SportingEventSubscription.canonicalId.getter(v22);
    sub_100014B44(v23, v24, &v35);
    *(_QWORD *)(v0 + 72) = v25;
    sub_10004E9B0(v0 + 72, v0 + 80, v26, v20 + 12);
    sub_100018574();

    *(_WORD *)(v20 + 12) = 1024;
    *(_DWORD *)(v0 + 248) = v12 > 14400.0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 252, v20 + 14, v20 + 18);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Updating activity '%s', isStale: %{BOOL}d", (uint8_t *)v20, 0x12u);
    sub_100018940(v21);
    sub_10000A818(v21);
    sub_10000A818(v20);
  }
  else
  {

  }
  v27 = (_QWORD *)swift_task_alloc(dword_1000D19EC);
  *(_QWORD *)(v0 + 208) = v27;
  *v27 = v0;
  v27[1] = sub_100049C58;
  sub_10004E990();
  return sub_10004B658(v28, v29, v30, v31, v32, v33);
}

uint64_t sub_100049C58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_1000189A0();
  v3 = *(_QWORD *)(v2 + 208);
  *v4 = *v1;
  *(_QWORD *)(v2 + 216) = v0;
  swift_task_dealloc(v3);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_100049CA8()
{
  uint64_t v0;
  double v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::String v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v1 = *(double *)(v0 + 192);
  if ((*(_BYTE *)(v0 + 255) & 1) != 0 || v1 > 14400.0)
  {
    v4 = *(_QWORD *)(v0 + 104);
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    v5._countAndFlagsBits = 0x73736572676F7270;
    v5._object = (void *)0xEF20737574617453;
    String.append(_:)(v5);
    v7 = (void *)SportingEventSubscription.sportingEventDetails.getter(v6);
    SportingEvent.progressStatus.getter(v7);

    v9 = SportingEventProgressStatus.rawValue.getter(v8);
    v11 = v10;
    sub_10004E880(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v11);
    v13._object = (void *)0x80000001000A7390;
    v13._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v13);
    sub_10004EC60();
    v15 = *(_QWORD *)(v0 + 16);
    v14 = *(_QWORD *)(v0 + 24);
    if (v1 <= 14400.0)
    {
      *(_QWORD *)(v0 + 32) = 0;
      *(_QWORD *)(v0 + 40) = 0xE000000000000000;
      v18._countAndFlagsBits = sub_10004EC2C();
      String.append(_:)(v18);
      sub_10004EC60();
      sub_10004EC20();
      v17 = *(_QWORD *)(v0 + 32);
      v16 = *(_QWORD *)(v0 + 40);
    }
    else
    {
      v16 = 0xEB00000000796C65;
      v17 = 0x74616964656D6D69;
    }
    v19 = *(id *)(v0 + 80);
    swift_bridgeObjectRetain(v16);
    v20 = sub_100018E34();
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.debug.getter(v21);
    v23 = sub_10004EB7C(v21);
    v24 = *(void **)(v0 + 80);
    if (v23)
    {
      v39 = v17;
      v25 = sub_100018554(32);
      v40 = sub_100018554(96);
      v41[0] = v40;
      v26.n128_u64[0] = 136315650;
      *(_DWORD *)v25 = 136315650;
      v27 = SportingEventSubscription.canonicalId.getter(v26);
      sub_100014B44(v27, v28, v41);
      *(_QWORD *)(v0 + 48) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v25 + 4, v25 + 12);
      sub_100018A44();

      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain(v16);
      sub_100014B44(v39, v16, v41);
      *(_QWORD *)(v0 + 56) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v25 + 14, v25 + 22);
      sub_100018A58(v16);
      *(_WORD *)(v25 + 22) = 2080;
      sub_100018E34();
      sub_100014B44(v15, v14, v41);
      *(_QWORD *)(v0 + 64) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v25 + 24, v25 + 32);
      sub_100018A58(v14);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Destroying activity for '%s' %s: %s", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy(v40, 3);
      sub_10000A818(v40);
      sub_10000A818(v25);
    }
    else
    {

      sub_100018540(v16);
      sub_100018540(v14);
    }

    v32 = *(double *)(v0 + 192);
    v33 = *(_QWORD *)(v0 + 184);
    v35 = SportingEventSubscription.canonicalId.getter(v34);
    v37 = v36;
    *(_QWORD *)(v0 + 224) = v36;
    if (v32 > 14400.0)
      v33 = 0;
    v38 = (_QWORD *)swift_task_alloc(dword_1000D19F4);
    *(_QWORD *)(v0 + 232) = v38;
    *v38 = v0;
    v38[1] = sub_10004A084;
    return sub_10004C3B8(v35, v37, v33, v32 > 14400.0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 176));
    sub_10004EAD0();
    sub_1000189B0();
    sub_100018E2C();
    v2 = (uint64_t (*)(void))sub_1000186B0();
    return v2();
  }
}

uint64_t sub_10004A084()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1000185FC();
  sub_100018994(v2);
  *(_QWORD *)(v0 + 240) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
  sub_100018E50();
  return sub_1000184AC();
}

uint64_t sub_10004A0D8()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release(*(_QWORD *)(v0 + 176));
  sub_10004EAD0();
  sub_1000189B0();
  sub_100018E2C();
  v1 = (uint64_t (*)(void))sub_1000186B0();
  return sub_10003FFE8(v1);
}

uint64_t sub_10004A110()
{
  uint64_t v0;

  sub_10004EB54();
  sub_100018E2C();
  sub_100018C28();
  sub_10003BA38();
  return sub_10003FFE8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004A150()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
  sub_10004EB54();
  sub_100018E2C();
  sub_100018C28();
  sub_10003BA38();
  return sub_10003FFE8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10004A198(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  __n128 *v31;
  __n128 v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  void *v44;
  uint64_t v45;
  void *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __n128 *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v94;
  int v95;
  id v97;
  _QWORD v98[3];
  ValueMetadata *v99;
  _UNKNOWN **v100;
  void *v101;

  v101 = (void *)a6;
  sub_10000738C(&qword_1000D0578);
  sub_10000A680();
  __chkstk_darwin(v14);
  sub_10000CD48();
  v85 = v15;
  sub_10000738C(&qword_1000D1A00);
  sub_10000A680();
  __chkstk_darwin(v16);
  sub_10000CD48();
  v87 = v17;
  type metadata accessor for URL(0);
  sub_10000A680();
  __chkstk_darwin(v18);
  sub_10000CD48();
  v86 = v19;
  sub_10000738C(&qword_1000D1A08);
  sub_10000A680();
  __chkstk_darwin(v20);
  sub_10000CD48();
  v89 = v21;
  sub_10000738C(&qword_1000D10A0);
  sub_10000A680();
  __chkstk_darwin(v22);
  sub_10000A7E4();
  v23 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v91 = *(_QWORD *)(v23 - 8);
  sub_10000A680();
  __chkstk_darwin(v24);
  sub_10000CD48();
  v90 = v25;
  v26 = type metadata accessor for SportsActivityAttributes(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  sub_10000A6FC();
  sub_10004A844(a1, a2);
  if ((v28 & 1) != 0)
  {
    v29 = sub_10003FE64();
    v30 = sub_100043398((uint64_t)&unk_1000C9DD8, v29);
    v32 = (__n128)xmmword_1000A11C0;
LABEL_10:
    sub_10004EC90(v32, v30, v31);
    return;
  }
  v82 = v23;
  v81 = v26;
  v33 = v8;
  v80 = v27;
  v84 = v9;
  v83 = a5;
  if ((sub_100063B00() & 1) != 0)
  {
    v39 = 1;
  }
  else
  {
    v34 = sub_10004EA0C();
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v36, v37, v38);
  }
  swift_bridgeObjectRelease();
  v41 = v8[5];
  v40 = v8[6];
  sub_1000073CC(v8 + 2, v41);
  v42 = dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(a1, a2, v39 & 1, v41, v40);
  if (!v42)
  {
    v49 = sub_10003FE64();
    v30 = sub_100043398((uint64_t)&unk_1000C9DD8, v49);
    v32 = (__n128)xmmword_1000A11B0;
    goto LABEL_10;
  }
  v44 = (void *)v42;
  v79 = v39;
  if ((a4 & 1) != 0)
  {
    v45 = v83;
    v46 = v101;
    v47 = sub_100047A28(v83, (uint64_t)v101, v43) ^ 1;
    v48 = v84;
  }
  else
  {
    v47 = 0;
    v48 = v84;
    v46 = v101;
    v45 = v83;
  }
  sub_100075810(v45, v46, a7, a8, v48);
  if (v94)
  {

  }
  else
  {
    v95 = v47;
    sub_10004A874();
    v50 = swift_bridgeObjectRelease();
    SportingEventSubscription.metadata.getter(v50);
    v51 = sub_100009658(v10, 1, v82);
    if ((_DWORD)v51 == 1)
    {
      sub_10004ED38(v51, &qword_1000D10A0);
      v52 = sub_10003FE64();
      v53 = sub_100043398((uint64_t)&unk_1000C9DD8, v52);
      sub_10004EC90((__n128)xmmword_1000A11A0, v53, v54);

      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v48, v26);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v90, v10, v82);
      v55 = v33[5];
      v56 = v33[6];
      sub_1000073CC(v33 + 2, v55);
      dispatch thunk of PersistentStorable.subscriptionsStoreURL(isConventionalOrUnified:)(v79 & 1, v55, v56);
      v99 = (ValueMetadata *)v82;
      v100 = &off_1000C8620;
      v57 = sub_100023784(v98);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v91 + 16))(v57, v90, v82);
      v58 = enum case for SportingEventPlayLevel.session(_:);
      v59 = type metadata accessor for SportingEventPlayLevel(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v87, v58, v59);
      sub_10000964C(v87, 0, 1, v59);
      v60 = sub_100075CC4(v44, v86, v98, v87, 0, a3 & 1, v95 & 1, v89, 0.0);
      sub_10004ED38(v60, &qword_1000D1A00);
      sub_10004EA98();
      sub_10004EC68();
      v61 = v101;
      sub_10004ABFC(v84, v83, (uint64_t)v101, v89);
      v62 = v81;
      if ((a4 & 1) != 0)
      {
        v63 = type metadata accessor for TaskPriority(0);
        sub_10000964C(v85, 1, 1, v63);
        v64 = qword_1000CFA90;
        swift_retain(v33);
        v97 = v44;
        if (v64 != -1)
          swift_once(&qword_1000CFA90, sub_100047918);
        v66 = qword_1000DDA70;
        sub_1000181E4(&qword_1000D1988, v65, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
        v68 = v67;
        v69 = swift_allocObject(&unk_1000C52E0, 49, 7);
        *(_QWORD *)(v69 + 16) = v66;
        *(_QWORD *)(v69 + 24) = v68;
        *(_QWORD *)(v69 + 32) = v33;
        *(_QWORD *)(v69 + 40) = v97;
        *(_BYTE *)(v69 + 48) = v95 & 1;
        sub_10004ED00();
        v70 = sub_100043CA0(v85, (uint64_t)&unk_1000D1A58, v69);
        swift_release(v70);
        v62 = v81;
      }
      v99 = &type metadata for TVAppFeatureFlags;
      v100 = (_UNKNOWN **)sub_10000A278();
      v71 = isFeatureEnabled(_:)(v98);
      sub_10004EC68();
      if ((v71 & v95 & 1) != 0
        && (v72._countAndFlagsBits = v83,
            v72._object = v61,
            ActivityAuthorizationInfo.subscribeToActivityAuthorizationStatusUpdates(for:)(v72),
            v73))
      {

        sub_10004E90C();
        v74 = sub_10004EB64();
      }
      else
      {

        sub_10004E90C();
        v76 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
        v74 = v90;
        v75 = v82;
      }
      v76(v74, v75);
      v77 = sub_10004ECCC();
      v78(v77, v62);
    }
  }
}

void sub_10004A844(uint64_t a1, uint64_t a2)
{
  if (sub_1000470D8(a1, a2))
    sub_1000187F4();
  sub_100006200();
}

void sub_10004A874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  _QWORD *v32;
  unint64_t v33;
  double *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = sub_10000738C(&qword_1000D1A08);
  v39 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  sub_10000A680();
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SportsActivityAttributes(0);
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  sub_10000A680();
  __chkstk_darwin(v6);
  sub_100024034();
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v7 = sub_1000187DC();
  v8 = sub_10004E91C(v7, (uint64_t)qword_1000DDB00);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)sub_100018554(12);
    v11 = sub_100018554(32);
    v42 = (_QWORD *)v11;
    *(_DWORD *)v10 = 136315138;
    v36 = (unint64_t)(v10 + 4);
    v12 = sub_10000738C(&qword_1000D1A10);
    v13 = static Activity.activities.getter();
    v14 = Array.description.getter(v13, v12);
    v16 = v15;
    sub_100018A44();
    sub_100014B44(v14, v16, (uint64_t *)&v42);
    v41 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v36, v10 + 12);
    swift_bridgeObjectRelease(v16);
    sub_100018948((void *)&_mh_execute_header, v8, v9, "ActivityKit activities: %s", v10);
    sub_100018940(v11);
    sub_10000A818(v11);
    sub_10000A818((uint64_t)v10);
  }

  sub_10000738C(&qword_1000D1A10);
  v18 = static Activity.activities.getter();
  v19 = v18;
  if ((unint64_t)v18 >> 62)
  {
    if (v18 >= 0)
      v18 &= 0xFFFFFFFFFFFFFF8uLL;
    v20 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (!v20)
      goto LABEL_17;
  }
  else
  {
    v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v20)
    {
LABEL_17:
      sub_100018DAC();
      return;
    }
  }
  v42 = _swiftEmptyArrayStorage;
  sub_100015714();
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = 0;
    v36 = v19 & 0xC000000000000001;
    v22 = v19;
    do
    {
      if (v36)
      {
        v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v19);
        v24 = v23;
      }
      else
      {
        v24 = *(_QWORD *)(v19 + 8 * v21 + 32);
        v23 = swift_retain(v24);
      }
      v25 = Activity.attributes.getter(v23);
      v26 = SportsActivityAttributes.canonicalId.getter(v25);
      v28 = v27;
      v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v0, v38);
      dispatch thunk of Activity.content.getter(v29);
      v30 = v40;
      v31 = ActivityContent.relevanceScore.getter(v40);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v30);
      swift_release(v24);
      v32 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
      {
        sub_100015714();
        v32 = v42;
      }
      v33 = v32[2];
      if (v33 >= v32[3] >> 1)
      {
        sub_100015714();
        v32 = v42;
      }
      ++v21;
      v32[2] = v33 + 1;
      v34 = (double *)&v32[3 * v33];
      *((_QWORD *)v34 + 4) = v26;
      *((_QWORD *)v34 + 5) = v28;
      v34[6] = v31;
      v19 = v22;
    }
    while (v20 != v21);
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_10004ABFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v70 = a4;
  v69 = a1;
  v66 = type metadata accessor for ActivityAuthorizationError(0);
  v62 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v60 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v61 = (char *)&v60 - v8;
  __chkstk_darwin(v9);
  v65 = (char *)&v60 - v10;
  v11 = sub_10000738C(&qword_1000D0578);
  v12 = __chkstk_darwin(v11);
  v63 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for ActivityPresentationOptions(0, v12);
  v14 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_10000738C(&qword_1000D1A10);
  v17 = sub_10000738C(&qword_1000D1A78);
  v18 = type metadata accessor for ActivityContentSource.Request(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v17, v21 + *(_QWORD *)(v19 + 72), v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_10009FDB0;
  v23 = v22 + v21;
  v24 = (_QWORD *)(v23 + *(int *)(sub_10000738C(&qword_1000D1A80) + 48));
  static PushActivityContentSource.externalRequest.getter();
  *v24 = a2;
  v24[1] = a3;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v23, enum case for ActivityContentSource.Request.push(_:), v18);
  v25 = swift_bridgeObjectRetain(a3);
  v26 = static ActivityPresentationOptions.ActivityPresentationDestination.allCases.getter(v25);
  ActivityPresentationOptions.init(destinations:)(v26);
  v27 = v71;
  v28 = static Activity.request(attributes:content:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:isUnbounded:)(v69, v70, v16, a2, a3, 0, v22, 0, 0);
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v68);
    swift_bridgeObjectRelease();
    v72 = v27;
    swift_errorRetain(v27);
    v29 = sub_10000738C((uint64_t *)&unk_1000D1690);
    v30 = v65;
    v31 = v66;
    if (!swift_dynamicCast(v65, &v72, v29, v66, 0))
    {
      swift_errorRelease(v72);
      v52 = sub_10004DDD8();
      v53 = swift_allocError(&unk_1000C9C28, v52, 0, 0);
      *v54 = 0;
      v54[1] = 0;
      swift_willThrow(v53);
      return swift_errorRelease(v27);
    }
    swift_errorRelease(v27);
    v33 = v61;
    v32 = v62;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v61, v30, v31);
    v34 = v60;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v60, v33, v31);
    v35 = (*(uint64_t (**)(char *, uint64_t))(v32 + 88))(v34, v31);
    if (v35 == enum case for ActivityAuthorizationError.globalMaximumExceeded(_:))
    {
      v36 = sub_10004DDD8();
      v37 = swift_allocError(&unk_1000C9C28, v36, 0, 0);
      *v38 = xmmword_1000A11E0;
    }
    else
    {
      v55 = v35;
      v56 = enum case for ActivityAuthorizationError.targetMaximumExceeded(_:);
      v57 = sub_10004DDD8();
      v37 = swift_allocError(&unk_1000C9C28, v57, 0, 0);
      if (v55 != v56)
      {
        *v58 = 0;
        v58[1] = 0;
        swift_willThrow(v37);
        v59 = *(void (**)(char *, uint64_t))(v32 + 8);
        v59(v33, v31);
        v59(v34, v31);
        return swift_errorRelease(v72);
      }
      *(_OWORD *)v58 = xmmword_1000A11D0;
    }
    swift_willThrow(v37);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v31);
    return swift_errorRelease(v72);
  }
  v39 = v28;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v68);
  swift_bridgeObjectRelease();
  v40 = v64;
  v41 = swift_retain(v39);
  sub_100045C08(v41);
  v42 = type metadata accessor for TaskPriority(0);
  v43 = v63;
  sub_10000964C(v63, 1, 1, v42);
  v44 = qword_1000CFA90;
  swift_retain(v40);
  if (v44 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v46 = qword_1000DDA70;
  sub_1000181E4(&qword_1000D1988, v45, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
  v48 = v47;
  v49 = (_QWORD *)swift_allocObject(&unk_1000C5330, 48, 7);
  v49[2] = v46;
  v49[3] = v48;
  v49[4] = v39;
  v49[5] = v40;
  swift_retain(v46);
  v50 = sub_100043B64(v43, (uint64_t)&unk_1000D1A98, (uint64_t)v49, (uint64_t)&unk_1000C5268, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_1000D1A18);
  swift_release(v50);
  return swift_release(v39);
}

uint64_t sub_10004B0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v9;

  v6[2] = a1;
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v6[3] = qword_1000DDA70;
  v9 = (_QWORD *)swift_task_alloc(dword_1000D19E4);
  v6[4] = v9;
  *v9 = v6;
  v9[1] = sub_10004B198;
  return sub_100049824(a5, 1, 1, a6 & 1);
}

uint64_t sub_10004B198()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1000185FC();
  sub_100018994(v2);
  *(_QWORD *)(v0 + 40) = v1;
  swift_task_dealloc(v3);
  if (v1)
    swift_errorRelease(v1);
  return sub_1000184AC();
}

uint64_t sub_10004B1F4()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 40) != 0;
  return sub_10004EAF0();
}

uint64_t sub_10004B20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for ActivityState(0);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000738C(&qword_1000D1AA0);
  v5[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000738C(&qword_1000D1AA8);
  v5[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[10] = v10;
  v5[11] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000738C(&qword_1000D1AB0);
  v5[12] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[13] = v12;
  v5[14] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v13 = qword_1000DDA70;
  v5[15] = qword_1000DDA70;
  return swift_task_switch(sub_10004B318, v13, 0);
}

uint64_t sub_10004B318()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  sub_10004E97C();
  sub_10004EA58();
  sub_10004EBDC();
  sub_10004E880(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  v2 = enum case for ActivityState.ended(_:);
  *(_DWORD *)(v0 + 160) = enum case for ActivityState.active(_:);
  *(_DWORD *)(v0 + 164) = v2;
  v3 = enum case for ActivityState.stale(_:);
  *(_DWORD *)(v0 + 168) = enum case for ActivityState.dismissed(_:);
  *(_DWORD *)(v0 + 172) = v3;
  *(_QWORD *)(v0 + 128) = qword_1000DDA70;
  sub_1000181E4(&qword_1000D1988, v4, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
  *(_QWORD *)(v0 + 136) = v5;
  sub_10000A40C(&qword_1000D1AB8, &qword_1000D1AB0);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 144) = v6;
  sub_10004E8B0(v6);
  return sub_10004E828();
}

uint64_t sub_10004B3F0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  _QWORD *v8;

  v8 = (_QWORD *)*v1;
  v2 = v8;
  sub_100018994(&v8);
  v2[19] = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[16];
    if (v4)
    {
      v5 = v2[17];
      ObjectType = swift_getObjectType(v4);
      dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v5);
    }
  }
  return sub_1000184AC();
}

uint64_t sub_10004B47C()
{
  uint64_t v0;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;

  sub_10004E97C();
  sub_10004EBA4();
  if (v4)
  {
    sub_10004E930(*(_QWORD *)(v0 + 104));
    sub_100018E2C();
    sub_100018C28();
    sub_1000189B0();
    sub_10003BA38();
    return sub_10004E8E0(*(uint64_t (**)(void))(v0 + 8));
  }
  v2 = *(unsigned int *)(v0 + 160);
  sub_10004E9F4();
  v3 = sub_10004EB94();
  if (v3 == (_DWORD)v2)
  {
LABEL_12:
    sub_100045C08(*(_QWORD *)(v0 + 24));
    goto LABEL_13;
  }
  v4 = v3 == *(_DWORD *)(v0 + 164) || v3 == *(_DWORD *)(v0 + 168);
  if (!v4)
  {
    if (v3 != *(_DWORD *)(v0 + 172))
    {
      if (qword_1000CFAD8 != -1)
        swift_once(&qword_1000CFAD8, sub_10006CCEC);
      v8 = sub_1000187DC();
      sub_10004E91C(v8, (uint64_t)qword_1000DDB00);
      v9 = static os_log_type_t.error.getter();
      if (sub_100018B38(v9))
      {
        v10 = (_WORD *)sub_100018554(2);
        *v10 = 0;
        sub_10004EADC((void *)&_mh_execute_header, v11, v12, "Unused case, this could cause serious regressions!");
        sub_10000A818((uint64_t)v10);
      }
      sub_10004EC84();
      sub_10004EA80(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_100046308(*(_QWORD *)(v0 + 24));
LABEL_13:
  *(_QWORD *)(v0 + 128) = qword_1000DDA70;
  sub_1000181E4(&qword_1000D1988, v5, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityActor);
  *(_QWORD *)(v0 + 136) = v6;
  sub_10000A40C(&qword_1000D1AB8, &qword_1000D1AB0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 144) = v7;
  sub_10004E8B0(v7);
  return sub_10004E828();
}

uint64_t sub_10004B610()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 152);
  v1 = sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_10004E8CC(v1);
  return sub_10004E8A4();
}

uint64_t sub_10004B658(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v7 + 304) = a2;
  *(_QWORD *)(v7 + 312) = v6;
  *(_BYTE *)(v7 + 495) = a6;
  *(_BYTE *)(v7 + 494) = a5;
  *(_BYTE *)(v7 + 493) = a4;
  *(_BYTE *)(v7 + 492) = a3;
  *(_QWORD *)(v7 + 296) = a1;
  v8 = type metadata accessor for SportsActivityAttributes(0);
  *(_QWORD *)(v7 + 320) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 328) = v9;
  *(_QWORD *)(v7 + 336) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v7 + 344) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 352) = v11;
  *(_QWORD *)(v7 + 360) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10000738C(&qword_1000D19F8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 368) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 376) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 384) = swift_task_alloc(v12);
  v13 = sub_10000738C(&qword_1000D1A00);
  *(_QWORD *)(v7 + 392) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  *(_QWORD *)(v7 + 400) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v7 + 408) = v15;
  *(_QWORD *)(v7 + 416) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000738C(&qword_1000D1A08);
  *(_QWORD *)(v7 + 424) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v7 + 432) = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 440) = swift_task_alloc(v18);
  *(_QWORD *)(v7 + 448) = swift_task_alloc(v18);
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v19 = qword_1000DDA70;
  *(_QWORD *)(v7 + 456) = qword_1000DDA70;
  return swift_task_switch(sub_10004B7EC, v19, 0);
}

uint64_t sub_10004B7EC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  __n128 v4;
  uint64_t (*v5)(void);
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t type;
  os_log_type_t typea;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t);
  uint64_t v120[2];

  v2 = *(_BYTE *)(v0 + 495);
  *(_QWORD *)(v0 + 40) = &type metadata for TVAppFeatureFlags;
  *(_QWORD *)(v0 + 48) = sub_10000A278();
  v3 = isFeatureEnabled(_:)(v0 + 16);
  sub_100007618((_QWORD *)(v0 + 16));
  if ((v3 & 1) != 0 && (v2 & 1) != 0)
  {
    sub_10004E93C();
    sub_1000189B0();
    sub_100018E2C();
    sub_100018C28();
    sub_10003BA38();
    sub_10004ECB0();
    sub_10004ECA8();
    swift_task_dealloc(v1);
    sub_10004ECC4();
    v5 = (uint64_t (*)(void))sub_1000186B0();
    return v5();
  }
  else
  {
    v6 = *(_BYTE *)(v0 + 493);
    v7 = SportingEventSubscription.canonicalId.getter(v4);
    v9 = v8;
    sub_10004A874();
    v11 = v10;
    sub_100088498(v7, v9, v10, v6);
    v13 = v12;
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v9);
    if ((sub_100063B00() & 1) != 0)
    {
      v19 = 1;
    }
    else
    {
      v14 = sub_10004EA0C();
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, v18);
    }
    v21 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 320);
    sub_100018574();
    v22 = *(_QWORD *)(v21 + 40);
    v23 = *(_QWORD *)(v21 + 48);
    sub_1000073CC((_QWORD *)(v21 + 16), v22);
    dispatch thunk of PersistentStorable.subscriptionsStoreURL(isConventionalOrUnified:)(v19 & 1, v22, v23);
    *(_QWORD *)(v0 + 80) = v20;
    *(_QWORD *)(v0 + 88) = &off_1000C8648;
    v24 = sub_100023784((_QWORD *)(v0 + 56));
    v25 = Activity.attributes.getter(v24);
    if ((*(_BYTE *)(v21 + 72) & 1) != 0)
    {
      static SportsActivityAttributes.filteredPlayLevel.getter(v25);
      v26 = 0;
    }
    else
    {
      v26 = 1;
    }
    v27 = *(_QWORD *)(v0 + 448);
    v28 = *(_QWORD *)(v0 + 416);
    v29 = *(_QWORD *)(v0 + 392);
    v30 = *(unsigned __int8 *)(v0 + 495);
    v31 = *(unsigned __int8 *)(v0 + 494);
    v32 = *(unsigned __int8 *)(v0 + 492);
    v33 = *(void **)(v0 + 304);
    v34 = type metadata accessor for SportingEventPlayLevel(0);
    sub_10000964C(v29, v26, 1, v34);
    sub_100075CC4(v33, v28, (_QWORD *)(v0 + 56), v29, v32, v31, v30, v27, v13);
    v118 = v0 + 280;
    v37 = *(_QWORD *)(v0 + 408);
    v36 = *(_QWORD *)(v0 + 416);
    v38 = *(_QWORD *)(v0 + 384);
    v39 = (unsigned __int8 *)(v0 + 492);
    LODWORD(v29) = *(unsigned __int8 *)(v0 + 492);
    sub_10004DE70(*(_QWORD *)(v0 + 392), &qword_1000D1A00);
    sub_10004ECE0(v36, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
    sub_100007618((_QWORD *)(v0 + 56));
    v40 = type metadata accessor for AlertConfiguration(0);
    sub_10000964C(v38, 1, 1, v40);
    if ((_DWORD)v29 == 1)
    {
      v41 = *(_QWORD *)(v0 + 376);
      *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 320);
      *(_QWORD *)(v0 + 128) = &off_1000C8648;
      v42 = sub_100023784((_QWORD *)(v0 + 96));
      Activity.attributes.getter(v42);
      sub_100076D6C(v0 + 96, v41);
      v43 = *(_QWORD *)(v0 + 376);
      v44 = *(_QWORD *)(v0 + 384);
      sub_100007618((_QWORD *)(v0 + 96));
      sub_10004D638(v43, v44);
      if (qword_1000CFAD8 != -1)
        swift_once(&qword_1000CFAD8, sub_10006CCEC);
      v45 = sub_1000187DC();
      v46 = sub_10004E91C(v45, (uint64_t)qword_1000DDB00);
      v47 = static os_log_type_t.debug.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v113 = v0 + 136;
        v48 = *(_QWORD *)(v0 + 384);
        v49 = sub_100018554(22);
        type = sub_100018554(64);
        v120[0] = type;
        *(_DWORD *)v49 = 136315394;
        sub_100024980(v48, v0 + 160, 32);
        if (sub_10004ECE8(v48))
        {
          swift_endAccess(v0 + 160);
          v50 = 0;
          v51 = 0xE000000000000000;
        }
        else
        {
          v53 = *(_QWORD *)(v0 + 352);
          v52 = *(_QWORD *)(v0 + 360);
          v111 = *(_QWORD *)(v0 + 344);
          AlertConfiguration.title.getter();
          v54 = swift_endAccess(v0 + 160);
          v50 = LocalizedStringResource.key.getter(v54);
          v51 = v55;
          (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v111);
        }
        v56 = *(_QWORD *)(v0 + 384);
        sub_100014B44(v50, v51, v120);
        *(_QWORD *)(v0 + 280) = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v118, v0 + 288, v49 + 4, v49 + 12);
        sub_1000061E8();
        *(_WORD *)(v49 + 12) = 2080;
        sub_100024980(v56, v113, 32);
        if (sub_10004ECE8(v56))
        {
          swift_endAccess(v113);
          v58 = 0;
          v59 = 0xE000000000000000;
        }
        else
        {
          v61 = *(_QWORD *)(v0 + 352);
          v60 = *(_QWORD *)(v0 + 360);
          AlertConfiguration.body.getter();
          v62 = swift_endAccess(v113);
          v58 = LocalizedStringResource.key.getter(v62);
          v59 = v63;
          sub_10004ECE0(v60, *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
        }
        sub_100014B44(v58, v59, v120);
        *(_QWORD *)(v0 + 256) = v64;
        sub_10004E9B0(v0 + 256, v0 + 264, v65, v49 + 22);
        sub_1000061E8();
        sub_10004EBFC((void *)&_mh_execute_header, v46, v47, "Alert Title: %s, Body: %s", (uint8_t *)v49);
        sub_10004EB30(type);
        sub_10000A818(type);
        sub_10000A818(v49);

        v39 = (unsigned __int8 *)(v0 + 492);
      }
      else
      {

      }
    }
    v66 = v39;
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v67 = *(_QWORD *)(v0 + 440);
    v68 = *(_QWORD *)(v0 + 448);
    v69 = *(_QWORD *)(v0 + 424);
    v70 = *(_QWORD *)(v0 + 432);
    v71 = *(_QWORD *)(v0 + 296);
    v72 = sub_1000187DC();
    *(_QWORD *)(v0 + 464) = sub_1000096EC(v72, (uint64_t)qword_1000DDB00);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v67, v68, v69);
    v73 = swift_retain_n(v71, 4);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.debug.getter(v74);
    v76 = os_log_type_enabled(v74, v75);
    v77 = *(_QWORD *)(v0 + 432);
    v78 = *(_QWORD *)(v0 + 424);
    if (v76)
    {
      v79 = *(_QWORD *)(v0 + 336);
      v107 = *(_QWORD *)(v0 + 328);
      v109 = *(_QWORD *)(v0 + 320);
      HIDWORD(v104) = *v66;
      v80 = *(_QWORD *)(v0 + 296);
      v81 = sub_100018554(38);
      v117 = sub_100018554(64);
      v120[0] = v117;
      *(_DWORD *)v81 = 136315906;
      typea = v75;
      v82 = Activity.id.getter();
      sub_10004EC48(v82, v83, v84, v85, v86, v87, v88, v89, v104, v0 + 488, v107, v109, v0 + 240, v77);
      *(_QWORD *)(v0 + 272) = v90;
      sub_10004E9B0(v0 + 272, v118, v91, v81 + 12);
      sub_1000061E8();
      sub_10004E9D8(v80);
      *(_WORD *)(v81 + 12) = 1024;
      *(_DWORD *)(v0 + 488) = v105;
      v92 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, v66, v81 + 14, v81 + 18);
      *(_WORD *)(v81 + 18) = 2080;
      v93 = Activity.attributes.getter(v92);
      SportsActivityAttributes.canonicalId.getter(v93);
      v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 8))(v79, v110);
      sub_10004ED08(v94, v95, v120);
      *(_QWORD *)(v0 + 240) = v96;
      sub_10004E9B0(v112, v0 + 248, v97, v81 + 28);
      sub_10004ED40();
      sub_10004E9D8(v80);
      *(_WORD *)(v81 + 28) = 2048;
      *(double *)(v0 + 232) = ActivityContent.relevanceScore.getter(v78);
      sub_10004E9B0(v0 + 232, v112, v98, v81 + 38);
      v99 = *(_QWORD *)(v114 + 8);
      sub_10004ECB8();
      _os_log_impl((void *)&_mh_execute_header, v74, typea, "Updating activity '%s': alert: %{BOOL}d; canonicalId: %s; relevanceScore: %f",
        (uint8_t *)v81,
        0x26u);
      sub_10004EB30(v117);
      sub_10000A818(v117);
      sub_10000A818(v81);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 296), 4);
      v99 = *(_QWORD *)(v77 + 8);
      sub_10004ECB8();
    }

    *(_QWORD *)(v0 + 472) = v99;
    v100 = *(_QWORD *)(v0 + 384);
    v101 = *(_QWORD *)(v0 + 368);
    sub_100024980(v100, v0 + 208, 0);
    sub_100009D5C(v100, v101, &qword_1000D19F8);
    v119 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Activity.update(_:alertConfiguration:)
                                           + async function pointer to dispatch thunk of Activity.update(_:alertConfiguration:));
    v102 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Activity.update(_:alertConfiguration:)
                                      + 1));
    *(_QWORD *)(v0 + 480) = v102;
    *v102 = v0;
    v102[1] = sub_10004C1B0;
    v103 = sub_10004EC54(*(_QWORD *)(v0 + 448));
    return v119(v103);
  }
}

uint64_t sub_10004C1B0()
{
  uint64_t v0;

  sub_1000189A0();
  v0 = sub_1000185EC();
  sub_10004EC40(v0, &qword_1000D19F8);
  return sub_1000184AC();
}

void sub_10004C1FC()
{
  _QWORD *v0;
  uint8_t *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v2 = swift_retain_n(v0[37], 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter(v3);
  if (sub_10004EB7C(v3))
  {
    v18 = v0[56];
    v19 = (void (*)(uint64_t, uint64_t))v0[59];
    v17 = v0[53];
    v20 = v0[48];
    v5 = v0[37];
    v6 = (uint8_t *)sub_100018554(12);
    v7 = sub_100018554(32);
    v21 = v7;
    *(_DWORD *)v6 = 136315138;
    v1 = v6 + 12;
    v8 = Activity.id.getter();
    sub_100014B44(v8, v9, &v21);
    v0[36] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 36, v0 + 37, v6 + 4, v6 + 12);
    sub_100018A44();
    sub_10004E9D8(v5);
    sub_100018948((void *)&_mh_execute_header, v3, v4, "Updates complete for activity '%s'", v6);
    sub_100018940(v7);
    sub_10000A818(v7);
    sub_10000A818((uint64_t)v6);

    v19(v18, v17);
    v11 = v20;
  }
  else
  {
    v12 = (void (*)(uint64_t))v0[59];
    v13 = v0[48];
    v14 = v0[37];

    sub_10004E9D8(v14);
    v15 = sub_10004ECF4();
    v12(v15);
    v11 = v13;
  }
  sub_10004DE70(v11, &qword_1000D19F8);
  sub_10004E93C();
  sub_1000189B0();
  sub_100018E2C();
  sub_100018C28();
  sub_10003BA38();
  sub_10004ECB0();
  sub_10004ECA8();
  swift_task_dealloc(v1);
  sub_10004ECC4();
  sub_1000186B0();
  sub_10004EB14();
  __asm { BR              X0 }
}

uint64_t sub_10004C3B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 + 56) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return sub_10004E898((uint64_t)sub_10004C3D0);
}

uint64_t sub_10004C3D0()
{
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return sub_1000184B8();
}

uint64_t sub_10004C428()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = (_QWORD *)swift_task_alloc(dword_1000D1724);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10004C484;
  v2 = sub_10004EC54(*(_QWORD *)(v0 + 16));
  return sub_10004717C(v2, v3, v4, v5);
}

uint64_t sub_10004C484(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_BYTE *)(*(_QWORD *)v1 + 57) = a1;
  swift_task_dealloc(v2);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_10004C4D4()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  unint64_t v2;
  uint64_t v3;
  _OWORD *v4;

  if (*(_BYTE *)(v0 + 57) == 1)
  {
    v1 = (uint64_t (*)(void))sub_1000186B0();
  }
  else
  {
    v2 = sub_10003FE64();
    v3 = swift_allocError(&unk_1000C9DD8, v2, 0, 0);
    *v4 = xmmword_1000A11F0;
    swift_willThrow(v3);
    v1 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v1();
}

uint64_t sub_10004C54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return swift_task_switch(sub_10004C5B8, qword_1000DDA70, 0);
}

uint64_t sub_10004C5B8()
{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;

  v1 = *(void (**)(_QWORD))(v0 + 16);
  sub_10004A844(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  v1(v2 & 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C604(uint64_t *a1, uint64_t a2, char a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a3 & 1;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 16);
  swift_bridgeObjectRetain(*a1);
  swift_bridgeObjectRetain(a2);
  v13 = sub_100043668(0, v6, v5, a2, v4);
  v7 = sub_10000738C(&qword_1000D0B18);
  v8 = sub_10000738C(&qword_1000D1B20);
  sub_10000A40C((unint64_t *)&qword_1000D0B20, &qword_1000D0B18);
  v10 = v9;
  sub_10000A40C(&qword_1000D1B28, &qword_1000D1B20);
  return Publishers.MergeMany.init<A>(_:)(&v13, v7, v8, v10, v11);
}

_QWORD *sub_10004C6F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *result;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43[3];
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v41 = a5;
  HIDWORD(v39) = a4;
  v40 = a3;
  v7 = sub_10000738C(&qword_1000D0E50);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000738C(&qword_1000D0E58);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000738C(&qword_1000D0F00);
  __chkstk_darwin(v15);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v20 >= *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    swift_once(&qword_1000CFA60, sub_100028A24);
    goto LABEL_6;
  }
  if (*(_BYTE *)(a2 + v20 + 32) != 1 || (int64_t)v20 >= *(_QWORD *)(v40 + 16))
  {
    LOBYTE(v43[0]) = 0;
    Just.init(_:)(v43);
    v26 = sub_10000738C((uint64_t *)&unk_1000D1690);
    Just.setFailureType<A>(to:)(v26, v7, v26, &protocol self-conformance witness table for Error);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_10000A40C(&qword_1000D0EA0, &qword_1000D0E58);
    v25 = Publisher.eraseToAnyPublisher()(v11, v27);
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    goto LABEL_13;
  }
  v14 = v19;
  v38 = v17;
  v7 = v16;
  a1 = BYTE4(v39) & 1;
  v21 = (_QWORD *)(v40 + 32 * v20);
  a2 = v21[4];
  v8 = v21[5];
  v11 = v21[6];
  v12 = v21[7];
  v22 = qword_1000CFA60;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v12);
  if (v22 != -1)
    goto LABEL_16;
LABEL_6:
  memset(v48, 0, 24);
  v48[3] = 1;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  LOBYTE(v36) = 0;
  sub_100023A18(a2, v8, a1, (uint64_t)v48, 0, 1, 0, 0, v36, v11, v12, v37, v38, v39, v40, (uint64_t)v41, v42, v43[0], v43[1],
    v43[2],
    v44,
    v45);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v8);
  if (qword_1000CFA98 != -1)
    swift_once(&qword_1000CFA98, sub_1000479AC);
  sub_1000479F8();
  if ((v23 & 1) != 0)
  {
    sub_1000822F4();
    v25 = v24;
  }
  else
  {
    v29 = v46;
    v30 = v47;
    v31 = sub_10003FE64();
    v32 = swift_allocError(&unk_1000C9DD8, v31, 0, 0);
    *v33 = v29;
    v33[1] = v30;
    v54 = v32;
    swift_bridgeObjectRetain(v30);
    v34 = sub_10000738C((uint64_t *)&unk_1000D1690);
    Fail.init(error:)(&v54, &type metadata for Bool, v34, &protocol self-conformance witness table for Error);
    sub_10000A40C(&qword_1000D0F08, &qword_1000D0F00);
    v25 = Publisher.eraseToAnyPublisher()(v7, v35);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v7);
  }
  result = sub_10004E0C4(v43);
LABEL_13:
  *v41 = v25;
  return result;
}

void sub_10004CA94(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  NSObject *oslog;
  NSObject *osloga;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 16);
  if (!v5)
    goto LABEL_8;
  if (*(_BYTE *)(v4 + 32) != 1)
  {
LABEL_17:
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v17 = type metadata accessor for Logger(0);
    sub_1000096EC(v17, (uint64_t)qword_1000DDB00);
    swift_bridgeObjectRetain_n(v4, 2);
    v18 = swift_retain_n(a3, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v19, v20))
    {

      swift_release_n(a3, 2);
      swift_bridgeObjectRelease_n(v4, 2);
      return;
    }
    v36 = v20;
    osloga = v19;
    v21 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v44 = v35;
    *(_DWORD *)v21 = 136315394;
    if ((a2 & 1) != 0)
      v22 = 1751607656;
    else
      v22 = 7827308;
    if ((a2 & 1) != 0)
      v23 = 0xE400000000000000;
    else
      v23 = 0xE300000000000000;
    sub_100014B44(v22, v23, &v44);
    v41 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v23);
    v37 = (uint8_t *)v21;
    *(_WORD *)(v21 + 12) = 2080;
    v43 = _swiftEmptyArrayStorage;
    sub_100015688();
    v25 = 0;
    a2 = 0;
    v26 = v43;
    while (v5 != v25)
    {
      v40 = v25;
      sub_10004CF5C(&v40, a3, v4, &v41);
      v28 = v41;
      v27 = v42;
      v43 = v26;
      v29 = v26[2];
      if (v29 >= v26[3] >> 1)
      {
        sub_100015688();
        v26 = v43;
      }
      ++v25;
      v26[2] = v29 + 1;
      v30 = &v26[2 * v29];
      v30[4] = v28;
      v30[5] = v27;
      if (v5 == v25)
      {
        v31 = Array.description.getter(v26, &type metadata for String);
        v33 = v32;
        swift_release(v26);
        sub_100014B44(v31, v33, &v44);
        v41 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v37 + 14, v37 + 22);
        swift_release_n(a3, 2);
        swift_bridgeObjectRelease_n(v4, 2);
        swift_bridgeObjectRelease(v33);
        _os_log_impl((void *)&_mh_execute_header, osloga, v36, "    Error switching to %s \n\n    %s", v37, 0x16u);
        swift_arrayDestroy(v35, 2);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        return;
      }
    }
    __break(1u);
    goto LABEL_35;
  }
  if (v5 == 1)
  {
LABEL_8:
    if (qword_1000CFAD8 == -1)
      goto LABEL_9;
    goto LABEL_36;
  }
  v7 = 33;
  while (1)
  {
    v8 = v7 - 31;
    if (__OFADD__(v7 - 32, 1))
      break;
    if (*(_BYTE *)(v4 + v7) != 1)
      goto LABEL_17;
    ++v7;
    if (v8 == v5)
      goto LABEL_8;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  swift_once(&qword_1000CFAD8, sub_10006CCEC);
LABEL_9:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_1000096EC(v9, (uint64_t)qword_1000DDB00);
  oslog = Logger.logObject.getter(v10);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    *(_DWORD *)v12 = 136315138;
    v41 = v13;
    if ((a2 & 1) != 0)
      v14 = 1751607656;
    else
      v14 = 7827308;
    if ((a2 & 1) != 0)
      v15 = 0xE400000000000000;
    else
      v15 = 0xE300000000000000;
    sub_100014B44(v14, v15, &v41);
    v44 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Successfully switched to %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
}

void sub_10004CF5C(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;

  v6 = *a1;
  v7 = *(_QWORD *)(a2 + 104);
  swift_beginAccess(v7 + 16, v18, 0, 0);
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain(v8);
  v10 = sub_100079FF4(v9);
  swift_bridgeObjectRelease(v8);
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v6 >= v10[2])
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = &v10[2 * v6];
  v13 = v11[4];
  v12 = v11[5];
  swift_bridgeObjectRetain(v12);
  swift_release(v10);
  v19 = v13;
  v20 = v12;
  v14._countAndFlagsBits = 8250;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  if (v6 >= *(_QWORD *)(a3 + 16))
  {
LABEL_10:
    __break(1u);
    return;
  }
  if (*(_BYTE *)(a3 + v6 + 32))
    v15 = 0x53534543435553;
  else
    v15 = 0x4552554C494146;
  v16 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease(0xE700000000000000);
  v17 = v20;
  *a4 = v19;
  a4[1] = v17;
}

uint64_t sub_10004D07C(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v4 + 129) = a3;
  *(_BYTE *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v3;
  v5 = sub_10004ED28();
  *(_QWORD *)(v4 + 32) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = sub_100018850(v6);
  v7 = sub_10000738C(&qword_1000D1A08);
  *(_QWORD *)(v4 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 64) = v8;
  *(_QWORD *)(v4 + 72) = sub_100018850(v8);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_10004D0E8()
{
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return sub_1000184B8();
}

uint64_t sub_10004D140()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 104);
  return sub_10004E898((uint64_t)sub_10004D158);
}

uint64_t sub_10004D158(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 88) = SportingEventSubscription.canonicalId.getter(a1);
  *(_QWORD *)(v1 + 96) = v2;
  return sub_1000184B8();
}

uint64_t sub_10004D194()
{
  uint64_t *v0;

  v0[13] = sub_1000470D8(v0[11], v0[12]);
  sub_1000185B4();
  sub_100018E50();
  return sub_1000184AC();
}

uint64_t sub_10004D1D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t (*v11)(void);

  if (v1[13])
  {
    v2 = v1[8];
    v3 = v1[7];
    dispatch thunk of Activity.content.getter(a1);
    ActivityContent.state.getter(v3);
    v4 = sub_10004EA80(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    SportsActivityContentState.isWaitingForUserConsent.getter(v4);
    sub_10004EB84();
    v5 = (uint64_t **)swift_task_alloc(dword_1000D19E4);
    v1[14] = (uint64_t)v5;
    *v5 = v1;
    v5[1] = (uint64_t *)sub_10004D2AC;
    v6 = sub_10004EC54(v1[2]);
    return sub_100049824(v6, v7, v8, v9);
  }
  else
  {
    sub_10004EC9C();
    sub_1000189B0();
    v11 = (uint64_t (*)(void))sub_1000186B0();
    return v11();
  }
}

uint64_t sub_10004D2AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  sub_1000189A0();
  v3 = *(_QWORD *)(v2 + 112);
  *v4 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc(v3);
  sub_100018E50();
  return sub_1000184B8();
}

uint64_t sub_10004D2FC()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  swift_release(*(_QWORD *)(v0 + 104));
  sub_10004EC9C();
  sub_1000189B0();
  v1 = (uint64_t (*)(void))sub_1000186B0();
  return sub_1000184C4(v1);
}

uint64_t sub_10004D32C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 104));
  sub_1000189B0();
  sub_100018E2C();
  return sub_10003FFE8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10004D36C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  sub_100024980(*(_QWORD *)(v0 + 104) + 16, (uint64_t)v4, 0);
  v1 = sub_100018E34();
  v2 = sub_1000437DC(v1);
  sub_1000185B4();
  return v2;
}

id sub_10004D3C8(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v3;
  id v4;

  if (a2)
  {
    v3 = String._bridgeToObjectiveC()();
    sub_100018574();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  return v4;
}

uint64_t sub_10004D428()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc(dword_1000D1994);
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004EAF8(v1);
  return sub_100047F00(v2, v3, v4, v5);
}

uint64_t sub_10004D47C(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v2;

  a1(&v2);
  Array.description.getter(v2, &type metadata for String);
  sub_1000185B4();
  return sub_10004ECF4();
}

uint64_t sub_10004D4D4(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = swift_task_alloc(a2[1]);
  v5 = (_QWORD *)sub_10004E88C(v4);
  *v5 = v2;
  v5[1] = sub_10004D534;
  return v7(a1);
}

uint64_t sub_10004D534()
{
  uint64_t (*v0)(void);

  sub_1000185EC();
  v0 = (uint64_t (*)(void))sub_1000186B0();
  return sub_1000184C4(v0);
}

uint64_t sub_10004D56C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  v0 = swift_task_alloc(dword_1000D19A4);
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004EAF8(v1);
  return sub_1000483F4(v6, v2, v3, v4, v5);
}

uint64_t sub_10004D5C0()
{
  return sub_10004DEF4(49);
}

uint64_t sub_10004D5C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_10004EC04();
  v0 = swift_task_alloc(dword_1000D19CC);
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004E958(v1);
  return sub_100049494(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10004D61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = sub_10004EBCC();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004D638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D19F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::Int sub_10004D680(uint64_t a1)
{
  uint64_t v2;
  Swift::Int result;
  _BYTE *v4;
  unint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }
  sub_10000738C(&qword_1000D0460);
  result = static _SetStorage.allocate(capacity:)(v2);
  v4 = (_BYTE *)result;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
  {
LABEL_25:
    sub_1000185B4();
    return (Swift::Int)v4;
  }
  v5 = 0;
  v6 = result + 56;
  while (v5 < *(_QWORD *)(a1 + 16))
  {
    v7 = (uint64_t *)(a1 + 32 + 16 * v5);
    v9 = *v7;
    v8 = v7[1];
    Hasher.init(_seed:)(v28);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v28, v9, v8);
    result = Hasher._finalize()();
    v10 = -1 << v4[32];
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      v15 = *((_QWORD *)v4 + 6);
      v16 = (uint64_t *)(v15 + 16 * v11);
      v17 = v16[1];
      v18 = *v16 == v9 && v17 == v8;
      if (v18 || (result = sub_100018C58(*v16, v17), (result & 1) != 0))
      {
LABEL_11:
        result = sub_100018DAC();
        goto LABEL_22;
      }
      v19 = ~v10;
      while (1)
      {
        v11 = (v11 + 1) & v19;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
          break;
        v20 = (uint64_t *)(v15 + 16 * v11);
        v21 = v20[1];
        if (*v20 != v9 || v21 != v8)
        {
          result = sub_100018C58(*v20, v21);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_11;
      }
    }
    *(_QWORD *)(v6 + 8 * v12) = v14 | v13;
    v23 = (_QWORD *)(*((_QWORD *)v4 + 6) + 16 * v11);
    *v23 = v9;
    v23[1] = v8;
    v24 = *((_QWORD *)v4 + 2);
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_27;
    *((_QWORD *)v4 + 2) = v26;
LABEL_22:
    if (++v5 == v27)
      goto LABEL_25;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10004D82C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000738C(&qword_1000D1A40);
    v3 = (void *)static _SetStorage.allocate(capacity:)(v2);
    if (*(_QWORD *)(a1 + 16))
    {
      v4 = *(unsigned __int8 *)(a1 + 32);
      Hasher.init(_seed:)(v6);
      __asm { BR              X8 }
    }
  }
  else
  {
    v3 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10004DB58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_10004EB38();
  v0 = sub_10004EAC0();
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004E84C(v1);
  return sub_10004E83C(v2, v3, v4, v5);
}

uint64_t sub_10004DB98()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004DBBC(char *a1)
{
  uint64_t v1;

  return sub_10004826C(a1, v1);
}

uint64_t sub_10004DBC4()
{
  return sub_10004DBCC(41);
}

uint64_t sub_10004DBCC(uint64_t a1)
{
  uint64_t v1;

  sub_100040078();
  sub_10004EC18();
  return sub_10004EA78(v1, a1, 7);
}

uint64_t sub_10004DBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;

  sub_10004E97C();
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_BYTE *)(v0 + 40);
  v8 = swift_task_alloc(dword_1000D1A34);
  v9 = (_QWORD *)sub_10004E88C(v8);
  *v9 = v1;
  v9[1] = sub_10004E808;
  return sub_100048370(v3, v4, v5, v6, v7);
}

uint64_t sub_10004DC6C()
{
  uint64_t v0;

  sub_100040078();
  sub_10004EC18();

  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10004DC98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  sub_10004EC04();
  v0 = swift_task_alloc(dword_1000D1A54);
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004E958(v1);
  return sub_10004B0F8(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_10004DCEC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_10004DD54;
  return v5(v2 + 32);
}

uint64_t sub_10004DD54()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  v1 = *v0;
  v5 = v1;
  v2 = *(_BYTE **)(v1 + 16);
  sub_10003B9D0(*(_QWORD *)(v1 + 24), &v5);
  *v2 = *(_BYTE *)(v1 + 32);
  v3 = (uint64_t (*)(void))sub_1000186B0();
  return sub_10003FFE8(v3);
}

uint64_t sub_10004DD98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_10004EB38();
  v0 = sub_10004EAC0();
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004E84C(v1);
  return sub_10004E83C(v2, v3, v4, v5);
}

unint64_t sub_10004DDD8()
{
  unint64_t result;

  result = qword_1000D1A88;
  if (!qword_1000D1A88)
  {
    result = swift_getWitnessTable(&unk_1000A543C, &unk_1000C9C28);
    atomic_store(result, &qword_1000D1A88);
  }
  return result;
}

uint64_t sub_10004DE18()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10004E97C();
  v0 = swift_task_alloc(dword_1000D1A94);
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004EA38(v1);
  return sub_10004B20C(v2, v3, v4, v5, v6);
}

void sub_10004DE70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_10000738C(a2);
  sub_10004E930(*(_QWORD *)(v2 - 8));
  sub_100006200();
}

uint64_t sub_10004DEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = sub_10004EBCC();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10004DEBC(_QWORD *a1)
{
  uint64_t v1;

  sub_100046BB8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10004DEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  v1 = sub_10004EBCC();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10004DEE8(uint64_t a1)
{
  uint64_t v1;

  sub_100046E14(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10004DEF4(uint64_t a1)
{
  uint64_t v1;

  sub_100040078();
  sub_10004EC18();
  swift_release(*(_QWORD *)(v1 + 40));
  return sub_10004EA78(v1, a1, 7);
}

uint64_t sub_10004DF28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10004E97C();
  v0 = swift_task_alloc(dword_1000D1ACC);
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004EA38(v1);
  return sub_10004575C(v2, v3, v4, v5, v6);
}

uint64_t sub_10004DF80()
{
  _QWORD *v0;

  sub_100040078();
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10004DFB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = swift_task_alloc(dword_1000D1AE4);
  v12 = (_QWORD *)sub_10004E88C(v11);
  *v12 = v2;
  v12[1] = sub_10004E808;
  return sub_10004C54C(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10004E048()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  sub_10004EB38();
  v0 = sub_10004EAC0();
  v1 = (_QWORD *)sub_10004E88C(v0);
  v2 = sub_10004E84C(v1);
  return sub_10004E83C(v2, v3, v4, v5);
}

uint64_t sub_10004E088()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10004E0AC(uint64_t *a1)
{
  uint64_t v1;

  return sub_10004C604(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void sub_10004E0B8(uint64_t *a1)
{
  uint64_t v1;

  sub_10004CA94(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_10004E0C4(_QWORD *a1)
{
  destroy for SubscriptionCreateActivityOperation(a1);
  return a1;
}

uint64_t _s20RegistrationResponseV5LinksV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10004E180(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10004E1CC + 4 * byte_1000A0E09[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10004E200 + 4 * byte_1000A0E04[v4]))();
}

uint64_t sub_10004E200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004E208(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004E210);
  return result;
}

uint64_t sub_10004E21C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004E224);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10004E228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004E230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for LiveActivityTarget()
{
  sub_100031ABC();
}

unint64_t sub_10004E24C()
{
  unint64_t result;

  result = qword_1000D1B50;
  if (!qword_1000D1B50)
  {
    result = swift_getWitnessTable(&unk_1000A1090, &unk_1000C5508);
    atomic_store(result, (unint64_t *)&qword_1000D1B50);
  }
  return result;
}

uint64_t type metadata accessor for SportsActivityManagedContext(uint64_t a1)
{
  uint64_t result;

  result = qword_1000D1BB0;
  if (!qword_1000D1BB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SportsActivityManagedContext);
  return result;
}

uint64_t sub_10004E2C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SportsActivityManagedContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10004E304(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10004E3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_10004E3E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_10004E458(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10004E4D4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10004E530(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10004E59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004E5A8);
}

uint64_t sub_10004E5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100027BC8();
    return sub_100009658(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10004E618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004E624);
}

uint64_t sub_10004E624(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100027BC8();
    return sub_10000964C(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10004E68C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1000A10E0;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10004E700(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004E74C + 4 * byte_1000A0E13[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10004E780 + 4 * byte_1000A0E0E[v4]))();
}

uint64_t sub_10004E780(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004E788(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004E790);
  return result;
}

uint64_t sub_10004E79C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004E7A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10004E7A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004E7B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for LiveActivityUpdateLimit()
{
  sub_100031ABC();
}

unint64_t sub_10004E7CC()
{
  unint64_t result;

  result = qword_1000D1BE8;
  if (!qword_1000D1BE8)
  {
    result = swift_getWitnessTable(&unk_1000A1170, &unk_1000C5598);
    atomic_store(result, (unint64_t *)&qword_1000D1BE8);
  }
  return result;
}

uint64_t sub_10004E828()
{
  return ((uint64_t (*)(void))dispatch thunk of AsyncIteratorProtocol.next())();
}

uint64_t sub_10004E83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_10004E84C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10004E86C()
{
  return ((uint64_t (*)(void))swift_task_switch)();
}

uint64_t sub_10004E880@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10004E88C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10004E898(uint64_t a1)
{
  return swift_task_switch(a1, 0, 0);
}

uint64_t sub_10004E8A4()
{
  return ((uint64_t (*)(void))swift_willThrowTypedImpl)();
}

uint64_t sub_10004E8B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 64);
}

uint64_t sub_10004E8CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_dynamicCast(a1, v2, a1, v1, 7);
}

uint64_t sub_10004E8E0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004E8F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 64);
}

uint64_t sub_10004E90C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 240) + 8))(v0, *(_QWORD *)(v1 - 232));
}

uint64_t sub_10004E91C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1000096EC(a1, a2);
  return Logger.logObject.getter(v2);
}

uint64_t sub_10004E930@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10004E93C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 448));
}

uint64_t sub_10004E958(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10004E9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v4, a4);
}

uint64_t sub_10004E9B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 56);
}

uint64_t sub_10004E9D8(uint64_t a1)
{
  return swift_release_n(a1, 2);
}

BOOL sub_10004E9E0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152) != 0;
}

uint64_t sub_10004E9F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 32))(*(_QWORD *)(v2 + 56), v1, v0);
}

uint64_t sub_10004EA0C()
{
  return 7827308;
}

uint64_t sub_10004EA2C()
{
  return ((uint64_t (*)(void))dispatch thunk of AsyncIteratorProtocol.next())();
}

uint64_t sub_10004EA38(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10004EA58()
{
  return dispatch thunk of Activity.activityStateUpdates.getter();
}

uint64_t sub_10004EA70()
{
  return sub_10004DEF4(48);
}

uint64_t sub_10004EA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10004EA80@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_10004EA8C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 136));
}

uint64_t sub_10004EA98()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 216) + 8))(v0, *(_QWORD *)(v1 - 192));
}

uint64_t sub_10004EAAC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_10004EAC0()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_10004EAC8()
{
  return sub_10004DBCC(40);
}

uint64_t sub_10004EAD0()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 144));
}

void sub_10004EADC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_10004EAF0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004EAF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_10004EB30(uint64_t a1)
{
  return swift_arrayDestroy(a1, 2);
}

BOOL sub_10004EB44(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10004EB54()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 176));
}

uint64_t sub_10004EB64()
{
  uint64_t v0;

  return v0;
}

BOOL sub_10004EB7C(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_10004EB84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10004EB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v0);
}

uint64_t sub_10004EBA4()
{
  uint64_t v0;

  return sub_100009658(*(_QWORD *)(v0 + 64), 1, *(_QWORD *)(v0 + 40));
}

uint64_t sub_10004EBCC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004EBDC()
{
  uint64_t v0;

  return Activity.ActivityStateUpdates.makeAsyncIterator()(v0);
}

uint64_t sub_10004EBEC()
{
  return swift_bridgeObjectRetain(0xEB00000000796C65);
}

void sub_10004EBFC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_10004EC18()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 32));
}

void sub_10004EC20()
{
  Swift::String v0;

  v0._countAndFlagsBits = 115;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
}

uint64_t sub_10004EC2C()
{
  return 0x207265746661;
}

void sub_10004EC40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10004DE70(v2, a2);
}

void sub_10004EC48(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_100014B44(a1, a2, (uint64_t *)va);
}

uint64_t sub_10004EC54@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10004EC60()
{
  double v0;

  return Double.write<A>(to:)(v0);
}

uint64_t sub_10004EC68()
{
  uint64_t v0;

  return sub_100007618((_QWORD *)(v0 - 128));
}

void sub_10004EC84()
{
  void *v0;

}

uint64_t sub_10004EC90(__n128 a1, uint64_t a2, __n128 *a3)
{
  *a3 = a1;
  return swift_willThrow();
}

uint64_t sub_10004EC9C()
{
  uint64_t v0;

  return swift_task_dealloc(*(_QWORD *)(v0 + 72));
}

uint64_t sub_10004ECA8()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10004ECB0()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10004ECB8()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

uint64_t sub_10004ECC4()
{
  uint64_t v0;

  return swift_task_dealloc(v0);
}

uint64_t sub_10004ECCC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 256);
}

uint64_t sub_10004ECE0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_10004ECE8(uint64_t a1)
{
  uint64_t v1;

  return sub_100009658(a1, 1, v1);
}

uint64_t sub_10004ECF4()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10004ED00()
{
  uint64_t v0;

  return swift_retain(v0);
}

void sub_10004ED08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  sub_100014B44(v3, v4, a3);
}

uint64_t sub_10004ED14()
{
  uint64_t v0;

  return swift_bridgeObjectRetain_n(v0, 2);
}

uint64_t sub_10004ED20()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_10004ED28()
{
  return type metadata accessor for SportsActivityContentState(0);
}

uint64_t sub_10004ED30()
{
  return static os_log_type_t.debug.getter();
}

void sub_10004ED38(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10004DE70(v2, a2);
}

uint64_t sub_10004ED40()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10004ED48@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;

  v30 = a7;
  v31 = a8;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a9 = a1;
  sub_100009DDC(a2, (uint64_t)(a9 + 1));
  a9[6] = a3;
  a9[7] = a4;
  v20 = (int *)sub_100050FCC();
  v21 = (char *)a9 + v20[7];
  v22 = sub_10000A7C4();
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a5, v22);
  *((_BYTE *)a9 + v20[8]) = a6;
  v24 = (_QWORD *)((char *)a9 + v20[9]);
  v25 = v31;
  *v24 = v30;
  v24[1] = v25;
  v26 = v20[10];
  Date.init()(v23);
  sub_100080BA0();
  v28 = v27;
  result = sub_100038DF8((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
  *(_QWORD *)((char *)a9 + v26) = v28;
  return result;
}

uint64_t type metadata accessor for SubscriptionFetchFullApsMessageOperation(uint64_t a1)
{
  uint64_t result;

  result = qword_1000D1C48;
  if (!qword_1000D1C48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SubscriptionFetchFullApsMessageOperation);
  return result;
}

uint64_t sub_10004EE98(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v5);
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    v10 = v9;
    v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_retain(v5);
    v11(a1 + 8, v8, v10);
    v12 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v12;
    v13 = a3[7];
    v14 = a1 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = type metadata accessor for URL(0);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    v17(v14, v15, v16);
    v18 = a3[9];
    *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v19 = (_QWORD *)(a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

uint64_t sub_10004EFA0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  sub_100007618(a1 + 1);
  swift_bridgeObjectRelease(a1[7]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 36) + 8));
}

uint64_t sub_10004F010(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  v7 = a2 + 1;
  v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_retain(v6);
  v10(a1 + 8, v7, v9);
  v11 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v11;
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for URL(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  v16(v13, v14, v15);
  v17 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain(v20);
  return a1;
}

_QWORD *sub_10004F0F4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  sub_100009F58(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  v8 = a2[7];
  v9 = a1[7];
  a1[7] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v14 = a3[9];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_10004F1E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t *sub_10004F28C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  sub_100007618(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  v7 = a1[7];
  a1[7] = a2[7];
  swift_bridgeObjectRelease(v7);
  v8 = a3[7];
  v9 = (uint64_t)a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t sub_10004F360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004F36C);
}

uint64_t sub_10004F36C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000A7C4();
    return sub_100009658((uint64_t)a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_10004F3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004F3E8);
}

_QWORD *sub_10004F3E8(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = sub_10000A7C4();
    return (_QWORD *)sub_10000964C((uint64_t)v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10004F450(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "(";
  v4[2] = &unk_1000A1248;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_1000A1260;
    v4[5] = &unk_1000A1248;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10004F4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = sub_100050FCC();
  v2 = *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64);
  v40 = *(_QWORD *)(v1 - 8);
  v41 = v2;
  __chkstk_darwin(v1);
  v38 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000A7C4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - v8;
  v43 = sub_10000738C(&qword_1000D1C98);
  v45 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  sub_10000CD48();
  v39 = v10;
  v44 = sub_10000738C(&qword_1000D1CA0);
  v46 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  sub_10000CD48();
  v42 = v11;
  v12 = sub_1000073CC((_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 32));
  v13 = (_QWORD *)(v0 + *(int *)(v1 + 36));
  v37 = v0;
  URL.appendingPathComponent(_:)(*v13, v13[1]);
  v14 = sub_10004F8A8();
  v36 = sub_1000073CC(v12, v12[3]);
  v15 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v4;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v15, v9, v4);
  v17 = sub_1000680F4();
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v6 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1000C5678, v20 + 8, v18 | 7);
  v22 = v21 + v19;
  v23 = v16;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v22, v15, v16);
  *(_QWORD *)(v21 + v20) = v17;
  v24 = v12[5];
  swift_bridgeObjectRetain(v14);
  v25 = sub_100050A98((uint64_t)sub_100050A44, v21, v14, 0, v24, (uint64_t)v36);
  swift_bridgeObjectRelease_n(v14, 2);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v23);
  v47 = v25;
  sub_100051000();
  v26 = sub_100050FF4((uint64_t)&unk_1000C56A0);
  sub_100050FE8(v26);
  v27 = sub_10000738C(&qword_1000D1CA8);
  v28 = sub_10000D358(&qword_1000D1CB0, &qword_1000D1CA8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = v39;
  Publisher.catch<A>(_:)(sub_100050DA8, v26, v27, v27, v28, v28);
  swift_release(v26);
  swift_release(v47);
  sub_100051000();
  v30 = sub_100050FF4((uint64_t)&unk_1000C56C8);
  sub_100050FE8(v30);
  v31 = sub_10000D358(&qword_1000D1CB8, &qword_1000D1C98, (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v32 = v42;
  Publisher.tryMap<A>(_:)(sub_100050E7C, v30, v43, &type metadata for Bool, v31);
  swift_release(v30);
  sub_100038DF8(v29, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
  v33 = sub_10000D358(&qword_1000D1CC0, &qword_1000D1CA0, (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
  v34 = Publisher.eraseToAnyPublisher()(v44, v33);
  sub_100038DF8(v32, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
  return v34;
}

uint64_t sub_10004F8A8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t FullApsMessageOperation;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _BYTE v26[240];

  v1 = v0;
  v25 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (_QWORD *)*v0;
  v6 = v0[6];
  v7 = v0[7];
  FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
  v9 = *(int *)(FullApsMessageOperation + 32);
  v10 = *((unsigned __int8 *)v0 + v9);
  v11 = v5 + 2;
  v12 = v5[5];
  v13 = v5[6];
  sub_1000073CC(v11, v12);
  v14 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(v6, v7, v10, v12, v13);
  v15 = sub_10000738C(&qword_1000D0848);
  inited = swift_initStackObject(v15, v26);
  *(_OWORD *)(inited + 16) = xmmword_1000A08E0;
  *(_BYTE *)(inited + 32) = 2;
  *(_QWORD *)(inited + 64) = &type metadata for String;
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 48) = v7;
  *(_BYTE *)(inited + 72) = 7;
  swift_bridgeObjectRetain(v7);
  Date.init()(v17);
  sub_100080BA0();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v25);
  *(_QWORD *)(inited + 104) = &type metadata for UInt64;
  *(_QWORD *)(inited + 80) = v19;
  *(_BYTE *)(inited + 112) = 8;
  v20 = *(_QWORD *)((char *)v1 + *(int *)(FullApsMessageOperation + 40));
  *(_QWORD *)(inited + 144) = &type metadata for UInt64;
  *(_QWORD *)(inited + 120) = v20;
  LOBYTE(v20) = *((_BYTE *)v1 + v9);
  *(_BYTE *)(inited + 152) = 43;
  *(_QWORD *)(inited + 184) = &type metadata for Bool;
  *(_BYTE *)(inited + 160) = v20;
  *(_BYTE *)(inited + 192) = 44;
  *(_QWORD *)(inited + 224) = &type metadata for EventType.EventName;
  *(_BYTE *)(inited + 200) = 4;
  sub_10000738C((uint64_t *)&unk_1000CFF70);
  sub_100021804();
  v21 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for SportsMetricsKey);
  sub_10002EFCC(v21);
  v23 = v22;
  swift_bridgeObjectRelease(v21);

  return v23;
}

uint64_t sub_10004FA98@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t FullApsMessageOperation;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint8_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = sub_10000738C(&qword_1000D1CD0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
  __chkstk_darwin(FullApsMessageOperation);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  if (qword_1000CFAB8 != -1)
    swift_once(&qword_1000CFAB8, sub_10006CC6C);
  v14 = type metadata accessor for Logger(0);
  sub_1000096EC(v14, (uint64_t)qword_1000DDAA0);
  v15 = sub_100050D1C(a2, (uint64_t)v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v34 = v13;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v36 = v7;
    v20 = v19;
    v38 = v19;
    v35 = v9;
    *(_DWORD *)v18 = 136315138;
    v33 = v18 + 4;
    v21 = v6;
    v22 = a3;
    v23 = *((_QWORD *)v12 + 6);
    v24 = *((_QWORD *)v12 + 7);
    swift_bridgeObjectRetain(v24);
    v25 = v23;
    a3 = v22;
    v6 = v21;
    v13 = v34;
    sub_100014B44(v25, v24, &v38);
    v37 = v26;
    v9 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v33, v18 + 12);
    swift_bridgeObjectRelease(v24);
    sub_100050EC4((uint64_t)v12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to parse full APS message for canonical id: %s.", v18, 0xCu);
    swift_arrayDestroy(v20, 1);
    v27 = v20;
    v7 = v36;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    sub_100050EC4((uint64_t)v12);
  }

  v38 = v13;
  swift_errorRetain(v13);
  v28 = sub_10000738C(&qword_1000D1CC8);
  v29 = sub_10000738C((uint64_t *)&unk_1000D1690);
  Fail.init(error:)(&v38, v28, v29, &protocol self-conformance witness table for Error);
  v30 = sub_10000D358(&qword_1000D1CD8, &qword_1000D1CD0, (uint64_t)&protocol conformance descriptor for Fail<A, B>);
  v31 = Publisher.eraseToAnyPublisher()(v6, v30);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v31;
  return result;
}

void sub_10004FD6C(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t FullApsMessageOperation;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  Swift::String v76;
  void *v77;
  uint64_t v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v4 = v3;
  v8 = sub_10000738C(&qword_1000D0570);
  __chkstk_darwin(v8);
  v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
  __chkstk_darwin(FullApsMessageOperation);
  v96 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v93 - v14;
  __chkstk_darwin(v16);
  v18 = (char *)&v93 - v17;
  v19 = *(double **)(a1 + *(int *)(sub_10000738C(&qword_1000D1CC8) + 40));
  v20 = *(_QWORD *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 + 184));
  if (!((unint64_t)v20 >> 62))
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 + 184)));
    if (v21)
      goto LABEL_3;
LABEL_26:
    swift_bridgeObjectRelease(v20);
    if (qword_1000CFAB8 != -1)
      swift_once(&qword_1000CFAB8, sub_10006CC6C);
    v83 = type metadata accessor for Logger(0);
    sub_1000096EC(v83, (uint64_t)qword_1000DDAA0);
    v84 = sub_100050D1C((uint64_t)a2, (uint64_t)v18);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = swift_slowAlloc(32, -1);
      v99 = (_QWORD *)v88;
      *(_DWORD *)v87 = 136315138;
      v89 = *((_QWORD *)v18 + 6);
      v90 = *((_QWORD *)v18 + 7);
      swift_bridgeObjectRetain(v90);
      sub_100014B44(v89, v90, (uint64_t *)&v99);
      v101 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease(v90);
      sub_100050EC4((uint64_t)v18);
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Missing event with canonical id %s in full APS message.", v87, 0xCu);
      swift_arrayDestroy(v88, 1);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {
      sub_100050EC4((uint64_t)v18);
    }

    v92 = sub_100027C78(5u, 0xD000000000000014, 0x80000001000A7400);
    swift_willThrow(v92);
    return;
  }
  if (v20 < 0)
    v82 = *(_QWORD *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 + 184));
  else
    v82 = v20 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 + 184)));
  if (!_CocoaArrayWrapper.endIndex.getter(v82))
    goto LABEL_26;
LABEL_3:
  v94 = a3;
  sub_10007DEC8(0, (v20 & 0xC000000000000001) == 0, v20);
  v95 = v4;
  if ((v20 & 0xC000000000000001) != 0)
    v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  else
    v22 = *(id *)(v20 + 32);
  v97 = v22;
  swift_bridgeObjectRelease(v20);
  v23 = (_QWORD *)*a2;
  v25 = a2[6];
  v24 = a2[7];
  v26 = *(int *)(FullApsMessageOperation + 32);
  v98 = a2;
  v27 = *((unsigned __int8 *)a2 + v26);
  v28 = v23[5];
  v29 = v23[6];
  sub_1000073CC(v23 + 2, v28);
  v30 = (void *)dispatch thunk of PersistentStorable.retrieveEventSubscription(canonicalId:isConventionalOrUnified:)(v25, v24, v27, v28, v29);
  if (v30)
  {
    v31 = v30;
    v32 = v30;
    v33 = v97;
    sub_100050618(v19, v97, v31);

    v34 = (void *)((uint64_t (*)(void))SportingEvent.partialSportingEvent.getter)();
    v35 = dispatch thunk of SportingEvent.versionNumber.getter(v34);

    v37 = (void *)SportingEventSubscription.sportingEventDetails.getter(v36);
    v38 = dispatch thunk of SportingEvent.versionNumber.getter(v37);

    if (v35 >= v38)
    {
      v69 = (void *)((uint64_t (*)(void))SportingEvent.partialSportingEvent.getter)();
      v70 = type metadata accessor for Date(0);
      sub_10000964C((uint64_t)v10, 1, 1, v70);
      SportingEventSubscription.update(sportingEventDetails:updatedAt:)(v69, v10);

      sub_100027964((uint64_t)v10, &qword_1000D0570);
      v71 = *((unsigned __int8 *)v98 + v26);
      v72 = *(_QWORD *)(*v98 + 40);
      v73 = *(_QWORD *)(*v98 + 48);
      sub_1000073CC((_QWORD *)(*v98 + 16), v72);
      v74 = v95;
      dispatch thunk of PersistentStorable.writeEventSubscription(_:isConventionalOrUnified:)(v32, v71, v72, v73);
      if (v74)
      {

        return;
      }

    }
    else
    {
      v39 = (uint64_t)v98;
      if (qword_1000CFAB8 != -1)
        swift_once(&qword_1000CFAB8, sub_10006CC6C);
      v40 = type metadata accessor for Logger(0);
      sub_1000096EC(v40, (uint64_t)qword_1000DDAA0);
      v41 = v96;
      sub_100050D1C(v39, v96);
      v42 = v32;
      v43 = v33;
      v44 = v42;
      v45 = v43;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc(32, -1);
        v98 = (_QWORD *)swift_slowAlloc(32, -1);
        v99 = v98;
        *(_DWORD *)v48 = 136315650;
        v50 = *(_QWORD *)(v41 + 48);
        v49 = *(_QWORD *)(v41 + 56);
        swift_bridgeObjectRetain(v49);
        sub_100014B44(v50, v49, (uint64_t *)&v99);
        v101 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v48 + 4, v48 + 12);
        swift_bridgeObjectRelease(v49);
        v52 = sub_100050EC4(v41);
        *(_WORD *)(v48 + 12) = 2048;
        v53 = (void *)SportingEvent.partialSportingEvent.getter(v52);
        v54 = dispatch thunk of SportingEvent.versionNumber.getter(v53);

        v101 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v48 + 14, v48 + 22);

        *(_WORD *)(v48 + 22) = 2048;
        v56 = (void *)SportingEventSubscription.sportingEventDetails.getter(v55);
        v57 = dispatch thunk of SportingEvent.versionNumber.getter(v56);

        v101 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v48 + 24, v48 + 32);

        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Skipped stale subscription when fetching full APS message for canonical id: %s. (%ld < %ld)", (uint8_t *)v48, 0x20u);
        v58 = (uint64_t)v98;
        swift_arrayDestroy(v98, 1);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v48, -1, -1);

      }
      else
      {

        sub_100050EC4(v41);
      }
    }
    *v94 = 1;
  }
  else
  {
    if (qword_1000CFAB8 != -1)
      swift_once(&qword_1000CFAB8, sub_10006CC6C);
    v59 = type metadata accessor for Logger(0);
    sub_1000096EC(v59, (uint64_t)qword_1000DDAA0);
    v60 = (uint64_t)v98;
    v61 = sub_100050D1C((uint64_t)v98, (uint64_t)v15);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v99 = (_QWORD *)v65;
      *(_DWORD *)v64 = 136315138;
      v66 = *((_QWORD *)v15 + 6);
      v67 = *((_QWORD *)v15 + 7);
      swift_bridgeObjectRetain(v67);
      sub_100014B44(v66, v67, (uint64_t *)&v99);
      v101 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v64 + 4, v64 + 12);
      swift_bridgeObjectRelease(v67);
      sub_100050EC4((uint64_t)v15);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Missing subscription when fetching full APS message for canonical id: %s.", v64, 0xCu);
      swift_arrayDestroy(v65, 1);
      v60 = (uint64_t)v98;
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);
    }
    else
    {
      sub_100050EC4((uint64_t)v15);
    }

    v75 = v97;
    v99 = 0;
    v100 = 0xE000000000000000;
    _StringGuts.grow(_:)(72);
    v76._countAndFlagsBits = 0xD000000000000046;
    v76._object = (void *)0x80000001000A73B0;
    String.append(_:)(v76);
    v78 = *(_QWORD *)(v60 + 48);
    v77 = *(void **)(v60 + 56);
    swift_bridgeObjectRetain(v77);
    v79._countAndFlagsBits = v78;
    v79._object = v77;
    String.append(_:)(v79);
    swift_bridgeObjectRelease(v77);
    v80 = v100;
    sub_100027C78(3u, (uint64_t)v99, v100);
    v81 = swift_bridgeObjectRelease(v80);
    swift_willThrow(v81);

  }
}

void sub_100050618(double *a1, void *a2, void *a3)
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;

  if (qword_1000CFAB8 != -1)
    swift_once(&qword_1000CFAB8, sub_10006CC6C);
  v6 = type metadata accessor for Logger(0);
  sub_1000096EC(v6, (uint64_t)qword_1000DDAA0);
  swift_retain_n(a1, 8);
  v7 = a2;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(62, -1);
    v30 = swift_slowAlloc(96, -1);
    v32 = v30;
    *(_DWORD *)v10 = 136316418;
    v11 = SportingEvent.canonicalId.getter();
    v13 = v12;
    sub_100014B44(v11, v12, &v32);
    v31 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v10 + 4, v10 + 12);

    v15 = swift_bridgeObjectRelease(v13);
    *(_WORD *)(v10 + 12) = 2080;
    v16 = SportingEvent.version.getter(v15);
    v18 = v17;
    sub_100014B44(v16, v17, &v32);
    v31 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v10 + 14, v10 + 22);

    v20 = swift_bridgeObjectRelease(v18);
    *(_WORD *)(v10 + 22) = 2048;
    v31 = Date.timeIntervalSince1970.getter(v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v10 + 24, v10 + 32);
    swift_release_n(a1, 2);
    *(_WORD *)(v10 + 32) = 2048;
    v21 = a1[2];
    swift_release(a1);
    v31 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v10 + 34, v10 + 42);
    swift_release(a1);
    *(_WORD *)(v10 + 42) = 2080;
    v22 = *((_QWORD *)a1 + 5);
    v23 = *((_QWORD *)a1 + 6);
    swift_bridgeObjectRetain(v23);
    sub_100014B44(v22, v23, &v32);
    v31 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v10 + 44, v10 + 52);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v10 + 52) = 2048;
    v25 = *(double *)((char *)a1 + qword_1000DDB68);
    if (*((_BYTE *)a1 + qword_1000DDB68 + 8))
      v25 = -1.0;
    v31 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v10 + 54, v10 + 62);
    swift_release_n(a1, 2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "=== Fetched full APS message for %s, version %s, message timestamp %f, type %ld, tempoSessionId %s, liveActivityTtl %f ===", (uint8_t *)v10, 0x3Eu);
    swift_arrayDestroy(v30, 3);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(a1, 8);
  }
  type metadata accessor for ApsMessageProcessingOperation(0);
  v26 = sub_10008945C(v7, a3);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "=== End full APS message ===", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

}

uint64_t sub_1000509E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_10000A7C4();
  sub_100050FD4();
  v3 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 8, v3);
}

id sub_100050A44()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10002245C(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100050A98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  __int128 v32[2];
  _BYTE __src[96];
  uint64_t v34;
  _QWORD v35[6];

  v12 = sub_10000738C(&qword_1000D1CE0);
  v31 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[3] = &type metadata for AMSApiRequest;
  v35[4] = &off_1000C41A0;
  v15 = (_QWORD *)swift_allocObject(&unk_1000C56F0, 48, 7);
  v35[0] = v15;
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10005EAC0();
  v34 = v17;
  sub_1000095FC(a6, (uint64_t)__src);
  sub_10000AE14((uint64_t)v35, (uint64_t)v32);
  v18 = swift_allocObject(&unk_1000C5718, 160, 7);
  *(_QWORD *)(v18 + 16) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_100009DDC(v32, v18 + 120);
  v19 = swift_allocObject(&unk_1000C5740, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_100050F80;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_retain(a5);
  v21 = static Subscribers.Demand.unlimited.getter(v20);
  v22 = sub_10000738C(&qword_1000CFD30);
  v23 = sub_10000738C(&qword_1000D1CC8);
  v24 = sub_10000738C(&qword_1000D1CE8);
  v25 = sub_10000D358(&qword_1000CFD38, &qword_1000CFD30, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v26 = sub_10000D358(&qword_1000D1CF0, &qword_1000D1CE8, (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_100009D14, v19, v22, v23, v24, v25, v26);
  swift_release(v19);
  swift_release(v34);
  v27 = sub_10000D358(&qword_1000D1CF8, &qword_1000D1CE0, (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v28 = Publisher.eraseToAnyPublisher()(v12, v27);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v12);
  sub_100007618(v35);
  return v28;
}

uint64_t sub_100050D1C(uint64_t a1, uint64_t a2)
{
  uint64_t FullApsMessageOperation;

  FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(FullApsMessageOperation - 8) + 16))(a2, a1, FullApsMessageOperation);
  return a2;
}

uint64_t sub_100050D64(uint64_t a1, uint64_t a2)
{
  uint64_t FullApsMessageOperation;

  FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(FullApsMessageOperation - 8) + 32))(a2, a1, FullApsMessageOperation);
  return a2;
}

uint64_t sub_100050DA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  sub_100050FCC();
  sub_100050FB4();
  return sub_10004FA98(a1, v4, a2);
}

uint64_t sub_100050DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_100050FCC();
  sub_100050FD4();
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v6 = v5 | 7;
  v7 = v0 + v3;
  swift_release(*(_QWORD *)(v0 + v3));
  sub_100007618((_QWORD *)(v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 56));
  v8 = v7 + *(int *)(v1 + 28);
  v9 = sub_10000A7C4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 36) + 8));
  return swift_deallocObject(v0, v4, v6);
}

void sub_100050E7C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v4;

  type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
  sub_100050FB4();
  sub_10004FD6C(a1, v4, a2);
}

uint64_t sub_100050EC4(uint64_t a1)
{
  uint64_t FullApsMessageOperation;

  FullApsMessageOperation = type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(FullApsMessageOperation - 8) + 8))(a1, FullApsMessageOperation);
  return a1;
}

uint64_t sub_100050F00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100050F34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  sub_100007618((_QWORD *)(v0 + 32));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  sub_100007618((_QWORD *)(v0 + 80));
  sub_100007618((_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 160, 7);
}

void sub_100050F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  sub_100057D8C(a1, a2, a3, a4, a5, *(_QWORD *)(v20 + 16), v20 + 24, v20 + 120, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

uint64_t sub_100050F90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100050FCC()
{
  return type metadata accessor for SubscriptionFetchFullApsMessageOperation(0);
}

uint64_t sub_100050FE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_100050D64(v2, a1 + v1);
}

uint64_t sub_100050FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_allocObject(a1, v1, v2);
}

uint64_t sub_100051000()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100050D1C(v0, v1);
}

void sub_10005100C()
{
  dispatch thunk of SportsManager.autostartLiveActivityStatus(forId:)();
  sub_100006200();
}

id sub_100051028(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;

  *(_QWORD *)(v7 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_cancellables) = &_swiftEmptySetSingleton;
  sub_100023E30((uint64_t)a4, v7 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_subscriptionOperation);
  *(_BYTE *)(v7 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_isLiveActivitiesSportEnabled) = a5;
  v15 = (_QWORD *)(v7 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_autostartStatus);
  *v15 = a6;
  v15[1] = a7;
  swift_retain(a7);
  v16 = a3;
  v17 = sub_1000881C4(a1, a2, (uint64_t)v16);
  objc_msgSend(v16, "setExportedObject:", v17);
  v18 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP7sportsd38DirectSessionRequestXPCDaemon_Protocol_);
  objc_msgSend(v16, "setExportedInterface:", v18);

  swift_release(a7);
  sub_100023FB4(a4);
  return v17;
}

uint64_t sub_100051158()
{
  uint64_t v0;

  sub_100023FB4((_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_subscriptionOperation));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_cancellables));
  return swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_autostartStatus + 8));
}

id sub_100051198()
{
  void *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  objc_super v9;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_1000096EC(v3, (uint64_t)qword_1000DDA88);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)sub_100018554(2);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Connection closed.", v7, 2u);
    sub_10000A818((uint64_t)v7);
  }

  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "dealloc");
}

uint64_t sub_1000512FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __n128 v8;

  v7 = swift_allocObject(&unk_1000C57C0, 24, 7);
  *(_QWORD *)(v7 + 16) = a4;
  sub_100051370(a1, a2, 0, (void (*)(void))sub_100055998, v7, v8);
  return swift_release(v7);
}

uint64_t sub_100051370(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[7];
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v7 = v6;
  if ((sub_100051748(a3, a6) & 1) != 0)
  {
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v14 = type metadata accessor for Logger(0);
    sub_1000096EC(v14, (uint64_t)qword_1000DDB00);
    v15 = swift_bridgeObjectRetain_n(a2, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)sub_100018554(12);
      v19 = sub_100018554(32);
      v45[0] = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain(a2);
      sub_100014B44(a1, a2, v45);
      v48 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Skipping activity for event %s since it is suppressed from autostart", v18, 0xCu);
      swift_arrayDestroy(v19, 1);
      sub_10000A818(v19);
      sub_10000A818((uint64_t)v18);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v38 = sub_10003FE64();
    v39 = swift_allocError(&unk_1000C9DD8, v38, 0, 0);
    *v40 = xmmword_1000A1290;
    a4();
    return swift_errorRelease(v39);
  }
  else
  {
    sub_1000517D4(a3, (uint64_t)&v48, v13);
    v22 = sub_100051A08(a3, v21);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    v29 = sub_100043DEC();
    v43 = (uint64_t)a4;
    v31 = v30;
    LOBYTE(v41) = 1;
    sub_100023A18(a1, a2, 1, (uint64_t)&v48, v22, v24, v26, v28, v41, v29, v30, v42, v43, v45[0], v45[1], v45[2], v45[3], v45[4], v45[5],
      v45[6],
      v46,
      v47);
    swift_bridgeObjectRelease(v31);
    sub_100052404(v22, v24, v26, v28);
    sub_100052440(&v48);
    sub_10008114C();
    v33 = v32;
    sub_10004E0C4(v45);
    v45[0] = v33;
    v34 = (_QWORD *)swift_allocObject(&unk_1000C5798, 48, 7);
    v34[2] = a1;
    v34[3] = a2;
    v34[4] = v44;
    v34[5] = a5;
    swift_bridgeObjectRetain(a2);
    swift_retain(a5);
    v35 = sub_10000738C(&qword_1000D0B18);
    sub_10002C6E0();
    Publisher.sink(receiveCompletion:receiveValue:)(sub_100052530, v34, nullsub_1, 0, v35);
    swift_release(v34);
    swift_release(v45[0]);
    v36 = v7 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_cancellables;
    swift_beginAccess(v7 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_cancellables, v45, 33, 0);
    AnyCancellable.store(in:)(v36);
    swift_endAccess(v45);
    return sub_1000188AC();
  }
}

uint64_t sub_100051748(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  char v8;
  char v9;

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_isLiveActivitiesSportEnabled) == 1)
  {
    sub_100051F54(a1, a2);
    v4 = v3;
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(v2
                                                   + OBJC_IVAR____TtC7sportsd31DirectActivityRequestXPCSession_autostartStatus))(0, 0);
    v6 = sub_100012420(v5);
    sub_1000520FC((uint64_t)v6, v4);
    v8 = v7;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v4);
    v9 = v8 ^ 1;
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_1000517D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  id v28;
  unsigned __int8 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  if (!a1)
  {
    v36 = 0u;
    v37 = 0u;
    goto LABEL_7;
  }
  *(_QWORD *)&v38 = 0xD000000000000015;
  *((_QWORD *)&v38 + 1) = 0x80000001000A74C0;
  AnyHashable.init<A>(_:)(&v28, &v38, &type metadata for String, &protocol witness table for String, a3);
  sub_1000756B4((uint64_t)&v28, a1, &v36);
  sub_100018254((uint64_t)&v28);
  if (!*((_QWORD *)&v37 + 1))
  {
LABEL_7:
    result = sub_10000ADD4((uint64_t)&v36);
    goto LABEL_10;
  }
  sub_100022CB8(&v36, &v38);
  v5 = (void *)objc_opt_self(NSJSONSerialization);
  v6 = v39;
  v7 = sub_1000073CC(&v38, v39);
  v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v6);
  v28 = 0;
  v9 = sub_100055B68(v5, "dataWithJSONObject:options:error:");
  sub_100055B38();
  v10 = v28;
  if (v5)
  {
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v13 = v12;

    v14 = type metadata accessor for JSONDecoder(0);
    sub_10000A85C(v14);
    JSONDecoder.init()(v15);
    sub_1000543D0();
    sub_100055B08((uint64_t)&unk_1000C5940, v11, v13);
    if (!v8)
    {
      sub_1000188AC();
      sub_100055B50();
      result = sub_100007618(&v38);
      v20 = v28;
      v21 = v29;
      v23 = v30;
      v24 = v31;
      v25 = v32;
      v26 = v33;
      v27 = v34;
      v22 = v35;
      goto LABEL_11;
    }
    swift_errorRelease(v8);
    sub_1000188AC();
    sub_100055B50();
  }
  else
  {
    v17 = v10;
    v18 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v19);
    swift_errorRelease(v18);
  }
  result = sub_100007618(&v38);
LABEL_10:
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = xmmword_1000A11B0;
  v24 = 0uLL;
  v25 = 0uLL;
  v26 = 0uLL;
  v27 = 0uLL;
LABEL_11:
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v21;
  *(_OWORD *)(a2 + 16) = v23;
  *(_OWORD *)(a2 + 32) = v24;
  *(_OWORD *)(a2 + 48) = v25;
  *(_OWORD *)(a2 + 64) = v26;
  *(_OWORD *)(a2 + 80) = v27;
  *(_QWORD *)(a2 + 96) = v22;
  return result;
}

uint64_t sub_100051A08(uint64_t a1, __n128 a2)
{
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;

  if (!a1)
  {
    v21 = 0u;
    v22 = 0u;
    goto LABEL_7;
  }
  v18[0] = 0xD00000000000001BLL;
  v18[1] = 0x80000001000A74A0;
  AnyHashable.init<A>(_:)(&v19, v18, &type metadata for String, &protocol witness table for String, a2);
  sub_1000756B4((uint64_t)&v19, a1, &v21);
  sub_100018254((uint64_t)&v19);
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_7:
    sub_10000ADD4((uint64_t)&v21);
    return 0;
  }
  sub_100022CB8(&v21, &v19);
  v3 = (void *)objc_opt_self(NSJSONSerialization);
  v4 = v20;
  v5 = sub_1000073CC(&v19, (uint64_t)v20);
  v6 = _bridgeAnythingToObjectiveC<A>(_:)(v5, v4);
  *(_QWORD *)&v21 = 0;
  v7 = sub_100055B68(v3, "dataWithJSONObject:options:error:");
  sub_100055B38();
  v8 = (id)v21;
  if (v4)
  {
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v11 = v10;

    v12 = type metadata accessor for JSONDecoder(0);
    sub_10000A85C(v12);
    JSONDecoder.init()(v13);
    sub_100054394();
    sub_100055B08((uint64_t)&unk_1000C5840, v9, v11);
    if (!v6)
    {
      sub_1000188AC();
      sub_100055B14();
      sub_100007618(&v19);
      return v21;
    }
    swift_errorRelease(v6);
    sub_1000188AC();
    sub_100055B14();
  }
  else
  {
    v14 = v8;
    v15 = _convertNSErrorToError(_:)(v8);

    swift_willThrow(v16);
    swift_errorRelease(v15);
  }
  sub_100007618(&v19);
  return 0;
}

uint64_t sub_100051BF0(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;

  v5 = *a1;
  if (!*a1)
    return a4(0);
  swift_errorRetain(*a1);
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v8 = type metadata accessor for Logger(0);
  sub_1000096EC(v8, (uint64_t)qword_1000DDB00);
  swift_errorRetain(v5);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(v5);
  swift_bridgeObjectRetain(a3);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v23 = v13;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(a3);
    sub_100014B44(a2, a3, &v23);
    v22 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v12 + 12) = 2080;
    swift_getErrorValue(v5, v21, v20);
    v15 = Error.localizedDescription.getter(v20[1], v20[2]);
    v17 = v16;
    sub_100014B44(v15, v16, &v23);
    v22 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to create activity for canonical ID: %s - %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }

  swift_errorRetain(v5);
  a4(v5);
  swift_errorRelease(v5);
  return swift_errorRelease(v5);
}

uint64_t type metadata accessor for DirectActivityRequestXPCSession()
{
  return objc_opt_self(_TtC7sportsd31DirectActivityRequestXPCSession);
}

void sub_100051F54(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[2];
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23[13];
  _QWORD __src[13];
  _BYTE __dst[104];
  uint64_t v26;
  uint64_t v27;

  sub_1000517D4(a1, (uint64_t)v23, a2);
  sub_100055120((uint64_t)v23, (uint64_t)__src, &qword_1000D1D58);
  if (__src[3] != 1)
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_100055120((uint64_t)&__dst[48], (uint64_t)&v26, &qword_1000D1D60);
    sub_10005440C(&v26);
    sub_100052440(v23);
    sub_100055120((uint64_t)&v26, (uint64_t)&v27, &qword_1000D1D60);
    v2 = v27;
    if (v27)
    {
      v3 = *(_QWORD *)(v27 + 16);
      if (v3)
      {
        sub_10005440C(&v26);
        v4 = (__int128 *)(v2 + 48);
        v5 = _swiftEmptyArrayStorage;
        do
        {
          v6 = *((_BYTE *)v4 + 48);
          v7 = *((_QWORD *)v4 - 1);
          v8 = *v4;
          v9 = v4[1];
          v10 = v4[2];
          v18[0] = *((_QWORD *)v4 - 2);
          v18[1] = v7;
          v19 = v8;
          v20 = v9;
          v21 = v10;
          v22 = v6;
          sub_100054434((uint64_t)v18, (uint64_t)v17);
          v11 = v17[0];
          v12 = v17[1];
          if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          {
            sub_100013494();
            v5 = v15;
          }
          v13 = v5[2];
          if (v13 >= v5[3] >> 1)
          {
            sub_100013494();
            v5 = v16;
          }
          v4 = (__int128 *)((char *)v4 + 72);
          v5[2] = v13 + 1;
          v14 = &v5[2 * v13];
          v14[4] = v11;
          v14[5] = v12;
          --v3;
        }
        while (v3);
        sub_100054470(&v26);
      }
      else
      {
        v5 = _swiftEmptyArrayStorage;
      }
      sub_100054470(&v26);
      sub_100012394((uint64_t)v5);
    }
  }
}

void sub_1000520FC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[9];

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return;
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v32 = v4;
  v33 = v4 + 56;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v4 + 56);
  v31 = (unint64_t)(63 - v6) >> 6;
  v9 = v5 + 56;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v10 = 0;
  while (1)
  {
    v11 = v10;
    if (!v8)
      break;
    v12 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v13 = v12 | (v10 << 6);
LABEL_29:
    if (*(_QWORD *)(v5 + 16))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      Hasher.init(_seed:)(v34);
      swift_bridgeObjectRetain(v18);
      String.hash(into:)(v34, v19, v18);
      v20 = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v5 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = *(_QWORD *)(v5 + 48);
        v24 = (_QWORD *)(v23 + 16 * v22);
        v25 = v24[1];
        v26 = *v24 == v19 && v25 == v18;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v19, v18, 0) & 1) != 0)
        {
LABEL_46:
          swift_bridgeObjectRelease(v18);
          swift_bridgeObjectRelease(v5);
LABEL_47:
          sub_1000180CC(v32);
          return;
        }
        v27 = ~v21;
        while (1)
        {
          v22 = (v22 + 1) & v27;
          if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            break;
          v28 = (_QWORD *)(v23 + 16 * v22);
          v29 = v28[1];
          v30 = *v28 == v19 && v29 == v18;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v19, v18, 0) & 1) != 0)
            goto LABEL_46;
        }
      }
      swift_bridgeObjectRelease(v18);
    }
  }
  v14 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_50;
  }
  if (v14 >= v31)
    goto LABEL_48;
  v15 = *(_QWORD *)(v33 + 8 * v14);
  ++v10;
  if (v15)
    goto LABEL_28;
  v10 = v11 + 2;
  if (v11 + 2 >= v31)
    goto LABEL_48;
  v15 = *(_QWORD *)(v33 + 8 * v10);
  if (v15)
    goto LABEL_28;
  v10 = v11 + 3;
  if (v11 + 3 >= v31)
    goto LABEL_48;
  v15 = *(_QWORD *)(v33 + 8 * v10);
  if (v15)
  {
LABEL_28:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_29;
  }
  v16 = v11 + 4;
  if (v11 + 4 >= v31)
  {
LABEL_48:
    swift_bridgeObjectRelease(v5);
    goto LABEL_47;
  }
  v15 = *(_QWORD *)(v33 + 8 * v16);
  if (v15)
  {
    v10 = v11 + 4;
    goto LABEL_28;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v31)
      goto LABEL_48;
    v15 = *(_QWORD *)(v33 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_28;
  }
LABEL_50:
  __break(1u);
}

uint64_t sub_1000523D8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000523FC(uint64_t a1)
{
  uint64_t v1;

  return sub_10006E334(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100052404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    return sub_10003C2F0(a3, a4);
  }
  return result;
}

uint64_t *sub_100052440(uint64_t *a1)
{
  sub_100052490(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return a1;
}

uint64_t sub_100052490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a4 != 1)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    return swift_bridgeObjectRelease(a13);
  }
  return result;
}

uint64_t sub_100052504()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100052530(_QWORD *a1)
{
  uint64_t v1;

  return sub_100051BF0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

void sub_10005253C()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_100052560(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

Swift::Int sub_1000525D4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100052614()
{
  return 7107189;
}

uint64_t sub_100052624(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  char v14;

  if (a1 == 0x6163696E6F6E6163 && a2 == 0xEB0000000064496CLL)
  {
    v5 = 0xEB0000000064496CLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6163696E6F6E6163, 0xEB0000000064496CLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169766572626261 && a2 == 0xEC0000006E6F6974)
  {
    v8 = 0xEC0000006E6F6974;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169766572626261, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6F676F4C6D616574 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F676F4C6D616574, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL)
  {
    v12 = 0xEF726F6C6F43646ELL;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162, 0xEF726F6C6F43646ELL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 1701670760 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 4;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(1701670760, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100052874()
{
  return 5;
}

uint64_t sub_10005287C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000528B8 + 4 * byte_1000A12A0[a1]))(0x6163696E6F6E6163, 0xEB0000000064496CLL);
}

uint64_t sub_1000528B8()
{
  return 0x6169766572626261;
}

uint64_t sub_1000528D8()
{
  return 0x6F676F4C6D616574;
}

uint64_t sub_1000528F0()
{
  return 0x756F72676B636162;
}

uint64_t sub_100052914()
{
  return 1701670760;
}

void sub_100052924(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  _BYTE v18[16];

  v4 = v1;
  v6 = sub_10000738C(&qword_1000D1E00);
  sub_100055AD0();
  __chkstk_darwin(v7);
  sub_1000073CC(a1, a1[3]);
  v8 = sub_1000550A8();
  sub_100055A54((uint64_t)&type metadata for LiveActivityAutostartContent.Competitor.CodingKeys, v9, v8);
  v10 = *v4;
  v11 = v4[1];
  v17[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v10, v11, v17, v6);
  if (!v2)
  {
    v12 = v4[2];
    v13 = v4[3];
    v17[0] = 1;
    sub_1000559D0(v12, v13, (uint64_t)v17);
    sub_100055A90((uint64_t)(v4 + 4), (uint64_t)v18);
    sub_100055A90((uint64_t)v18, (uint64_t)v17);
    sub_100055160();
    sub_100055B20();
    v14 = v4[6];
    v15 = v4[7];
    v17[0] = 3;
    sub_1000559D0(v14, v15, (uint64_t)v17);
    v16 = *((unsigned __int8 *)v4 + 64);
    v17[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v6);
  }
  sub_100055A48(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100055A68();
}

void sub_100052A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_100055A28();
  a22 = v24;
  a23 = v25;
  v27 = v26;
  v29 = v28;
  v30 = sub_10000738C(&qword_1000D1DE8);
  __chkstk_darwin(v30);
  sub_100055AB8();
  sub_1000073CC(v27, v27[3]);
  v31 = sub_1000550A8();
  sub_100055B74((uint64_t)&type metadata for LiveActivityAutostartContent.Competitor.CodingKeys, (uint64_t)&type metadata for LiveActivityAutostartContent.Competitor.CodingKeys, v31);
  if (v23)
  {
    sub_100031AC4();
  }
  else
  {
    v32 = sub_100055B80();
    v34 = KeyedDecodingContainer.decode(_:forKey:)(v32, v33);
    v36 = v35;
    v47 = v34;
    LOBYTE(v49) = 1;
    sub_100055AA0(v34, v35);
    v37 = sub_100055A7C();
    v48 = v38;
    v39 = v38;
    v46 = v37;
    a13 = 2;
    v40 = sub_1000550E4();
    swift_bridgeObjectRetain(v39);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1000C5A68, &a13, v30, &unk_1000C5A68, v40);
    sub_100023F64(v49, v50);
    v45 = sub_100055A7C();
    v42 = v41;
    sub_100055AA0(v45, v41);
    v43 = sub_100055B80();
    LOBYTE(v39) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v43, v44);
    sub_1000559E0();
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v48);
    sub_100023F64(v49, v50);
    sub_100055B5C();
    sub_10001883C();
    swift_bridgeObjectRelease(v48);
    sub_100031AC4();
    swift_bridgeObjectRelease(v48);
    sub_10001883C();
    sub_100055B5C();
    sub_100018D80();
    *(_QWORD *)v29 = v47;
    *(_QWORD *)(v29 + 8) = v36;
    *(_QWORD *)(v29 + 16) = v46;
    *(_QWORD *)(v29 + 24) = v48;
    *(_QWORD *)(v29 + 32) = v49;
    *(_QWORD *)(v29 + 40) = v50;
    *(_QWORD *)(v29 + 48) = v45;
    *(_QWORD *)(v29 + 56) = v42;
    *(_BYTE *)(v29 + 64) = v39;
  }
  sub_100055A00();
}

uint64_t sub_100052D38(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  unint64_t v11;
  unint64_t v13;
  unint64_t v15;
  char v17;

  if (a1 == 0xD000000000000014)
  {
    v4 = 0x80000001000A7500;
    if (a2 == 0x80000001000A7500)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000A7500, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x54656D6147657270 && a2 == 0xEC000000656C7469)
  {
    v7 = 0xEC000000656C7469;
    goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54656D6147657270, 0xEC000000656C7469, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x74695474726F6873 && a2 == 0xEA0000000000656CLL)
  {
    v9 = 0xEA0000000000656CLL;
    goto LABEL_21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74695474726F6873, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v9);
    return 2;
  }
  if (a1 == 0x74697465706D6F63 && a2 == 0xEB0000000073726FLL)
  {
    v11 = 0xEB0000000073726FLL;
    goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74697465706D6F63, 0xEB0000000073726FLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v11);
    return 3;
  }
  if (a1 == 0x644974726F7073 && a2 == 0xE700000000000000)
  {
    v13 = 0xE700000000000000;
    goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726F7073, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v13);
    return 4;
  }
  if (a1 == 0x644965756761656CLL && a2 == 0xE800000000000000)
  {
    v15 = 0xE800000000000000;
    goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644965756761656CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v15);
    return 5;
  }
  if (a1 == 0x64496E6F69746361 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 6;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64496E6F69746361, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void sub_100053044(unsigned __int8 a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  sub_100055B2C();
}

uint64_t sub_100053080(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000530B8 + 4 * byte_1000A12A5[a1]))(0xD000000000000014, 0x80000001000A7500);
}

uint64_t sub_1000530B8()
{
  return 0x54656D6147657270;
}

uint64_t sub_1000530D8()
{
  return 0x74695474726F6873;
}

uint64_t sub_100053110()
{
  return 0x644974726F7073;
}

uint64_t sub_100053128()
{
  return 0x644965756761656CLL;
}

uint64_t sub_100053140()
{
  return 0x64496E6F69746361;
}

void sub_100053158(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[8];
  _BYTE v13[8];

  v4 = v1;
  v6 = sub_10000738C(&qword_1000D1DD0);
  sub_100055AD0();
  __chkstk_darwin(v7);
  sub_1000073CC(a1, a1[3]);
  v8 = sub_100054F14();
  sub_100055A54((uint64_t)&type metadata for LiveActivityAutostartContent.CodingKeys, v9, v8);
  v10 = *v4;
  v11 = *((unsigned __int8 *)v4 + 8);
  v12[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v10, v11, v12, v6);
  if (!v2)
  {
    sub_1000559B8(v4[2], v4[3], 1);
    sub_1000559B8(v4[4], v4[5], 2);
    sub_100055A90((uint64_t)(v4 + 6), (uint64_t)v13);
    sub_100055A90((uint64_t)v13, (uint64_t)v12);
    sub_10000738C(&qword_1000D1D90);
    sub_100055004(&qword_1000D1DD8, (void (*)(void))sub_10005506C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100055B20();
    sub_1000559B8(v4[7], v4[8], 4);
    sub_1000559B8(v4[9], v4[10], 5);
    sub_1000559B8(v4[11], v4[12], 6);
  }
  sub_100055A48(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100055A68();
}

void sub_1000532F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  sub_100055A28();
  a26 = v29;
  a27 = v30;
  v32 = v31;
  v34 = v33;
  v35 = sub_10000738C(&qword_1000D1D80);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_100040030();
  sub_1000073CC(v32, v32[3]);
  v37 = sub_100054F14();
  sub_100055B74((uint64_t)&type metadata for LiveActivityAutostartContent.CodingKeys, (uint64_t)&type metadata for LiveActivityAutostartContent.CodingKeys, v37);
  if (v27)
  {
    v41 = 0;
  }
  else
  {
    a17 = 0;
    v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a17, v35);
    v61 = v39;
    a16 = 1;
    v40 = sub_100055A18((uint64_t)&a16);
    v43 = v42;
    v60 = v40;
    a15 = 2;
    sub_100055AA0(v40, v42);
    v58 = sub_100055A18((uint64_t)&a15);
    v59 = v38;
    v45 = v44;
    v46 = sub_10000738C(&qword_1000D1D90);
    a14 = 3;
    v47 = sub_100055004(&qword_1000D1D98, (void (*)(void))sub_100054F50, (uint64_t)&protocol conformance descriptor for <A> [A]);
    sub_100055B00();
    sub_100055AF0(v46, (uint64_t)&a14, v35, v46);
    v63 = v45;
    if (!v47)
    {
      a13 = 4;
      sub_100055B00();
      v57 = sub_100055A18((uint64_t)&a13);
      a12 = 5;
      v62 = v48;
      swift_bridgeObjectRetain(v48);
      v49 = sub_100055A18((uint64_t)&a12);
      v51 = v50;
      v56 = v49;
      a11 = 6;
      sub_100055AA0(v49, v50);
      v52 = sub_100055A18((uint64_t)&a11);
      v54 = v53;
      v55 = v52;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v28, v35);
      swift_bridgeObjectRetain(v54);
      sub_100055A98();
      swift_bridgeObjectRelease();
      sub_100018D80();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001883C();
      *(_QWORD *)v34 = v59;
      *(_BYTE *)(v34 + 8) = v61 & 1;
      *(_QWORD *)(v34 + 16) = v60;
      *(_QWORD *)(v34 + 24) = v43;
      *(_QWORD *)(v34 + 32) = v58;
      *(_QWORD *)(v34 + 40) = v63;
      *(_QWORD *)(v34 + 48) = v64;
      *(_QWORD *)(v34 + 56) = v57;
      *(_QWORD *)(v34 + 64) = v62;
      *(_QWORD *)(v34 + 72) = v56;
      *(_QWORD *)(v34 + 80) = v51;
      *(_QWORD *)(v34 + 88) = v55;
      *(_QWORD *)(v34 + 96) = v54;
      goto LABEL_10;
    }
    sub_1000559F0();
    sub_10001883C();
    sub_100018D80();
    v41 = 6;
  }
  sub_100055A98();
  if ((v41 & 2) == 0)
  {
    if ((v41 & 4) == 0)
      goto LABEL_6;
LABEL_9:
    sub_100055AB0();
    if (((v41 >> 3) & 1) == 0)
      goto LABEL_10;
    goto LABEL_7;
  }
  sub_10001883C();
  if (((v41 >> 2) & 1) != 0)
    goto LABEL_9;
LABEL_6:
  if (((v41 >> 3) & 1) != 0)
LABEL_7:
    sub_100055AA8();
LABEL_10:
  sub_100055A00();
}

BOOL sub_10005365C(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C2B10, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

void sub_1000536A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_100055A28();
  v2 = v1;
  v4 = v3;
  v17 = v5;
  v7 = v6;
  v9 = v8;
  v11 = sub_10000738C(v10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100055AB8();
  v14 = v9[3];
  v13 = v9[4];
  sub_1000073CC(v9, v14);
  v15 = v4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(v2, v2, v15, v14, v13);
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v17, v16, v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0, v11);
  sub_100055A00();
}

uint64_t sub_100053770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t (*v6)(void);
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_100055A28();
  v24 = v1;
  v25 = v2;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = sub_10000738C(v9);
  v23 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v8[3];
  v14 = v8[4];
  v15 = sub_1000073CC(v8, v13);
  v16 = v6();
  v17 = v4;
  v18 = v4;
  v19 = (uint64_t)v15;
  v20 = dispatch thunk of Decoder.container<A>(keyedBy:)(v17, v18, v16, v13, v14);
  if (!v0)
  {
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v20, v10);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  }
  sub_100031AC4();
  return v19;
}

BOOL sub_100053880(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_100053890(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_1000538B4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x64496E6F69746361 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496E6F69746361, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000001000A74E0)
  {
    swift_bridgeObjectRelease(0x80000001000A74E0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000001000A74E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000539A0()
{
  return 2;
}

Swift::Int sub_1000539A8(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_1000539EC(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000015;
  else
    return 0x64496E6F69746361;
}

void sub_100053A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  sub_100055A28();
  a22 = v24;
  a23 = v25;
  v40 = v26;
  v41 = v27;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = sub_10000738C(&qword_1000D1DA8);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = v33[3];
  v36 = v33[4];
  sub_1000073CC(v33, v37);
  v38 = sub_100054E9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LiveActivityAutostartAction.CodingKeys, &type metadata for LiveActivityAutostartAction.CodingKeys, v38, v37, v36);
  LOBYTE(v42[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v29, v42, v34);
  if (!v23)
  {
    v42[0] = v40;
    v42[1] = v41;
    a13 = 1;
    v39 = sub_100054F8C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v42, &a13, v34, &unk_1000C58C0, v39);
  }
  sub_100055A48(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
  sub_100055A00();
}

uint64_t sub_100053B48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_10000738C(&qword_1000D1D68);
  sub_100055AD0();
  __chkstk_darwin(v4);
  sub_100040030();
  v5 = a1[3];
  v6 = a1[4];
  sub_1000073CC(a1, v5);
  v7 = sub_100054E9C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LiveActivityAutostartAction.CodingKeys, &type metadata for LiveActivityAutostartAction.CodingKeys, v7, v5, v6);
  if (v1)
  {
    sub_100055A98();
  }
  else
  {
    LOBYTE(v13) = 0;
    v6 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v13, v3);
    v12 = 1;
    v9 = sub_100054ED8();
    sub_100055B00();
    sub_100055AF0((uint64_t)&unk_1000C58C0, (uint64_t)&v12, v3, (uint64_t)&unk_1000C58C0);
    sub_100055AE0();
    if (v9)
    {
      sub_100018D80();
      sub_100007618(a1);
      sub_100018D80();
    }
    else
    {
      v10 = v13;
      v11 = v14;
      sub_100023F64(v13, v14);
      sub_100007618(a1);
      sub_100018D80();
      sub_10003C2F0(v10, v11);
    }
  }
  return v6;
}

Swift::Int sub_100053CBC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100053CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100052560(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100053D24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005519C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100053D4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005519C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100053D74@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000541EC(a1);
}

void sub_100053DA0()
{
  sub_1000536A4();
}

uint64_t sub_100053DD4()
{
  unsigned __int8 *v0;

  return sub_10005287C(*v0);
}

uint64_t sub_100053DDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100052624(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100053E00@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100052874();
  *a1 = result;
  return result;
}

uint64_t sub_100053E24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000550A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100053E4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000550A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100053E74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t __src[11];

  sub_100052A90(a1, a2, a3, a4, a5, a6, a7, a8, v11, __src[0], SWORD2(__src[0]), SBYTE6(__src[0]), SHIBYTE(__src[0]), __src[1], __src[2], __src[3], __src[4], __src[5], __src[6],
    __src[7],
    __src[8],
    __src[9],
    __src[10]);
  if (!v9)
    memcpy(a9, __src, 0x41uLL);
}

void sub_100053EBC(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[65];

  memcpy(__dst, v1, sizeof(__dst));
  sub_100052924(a1);
}

BOOL sub_100053F0C(char *a1, char *a2)
{
  return sub_10000B36C(*a1, *a2);
}

void sub_100053F18()
{
  unsigned __int8 *v0;

  sub_100053044(*v0);
}

void sub_100053F30(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10000B37C(a1, *v1);
}

void sub_100053F38()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  Hasher._finalize()();
  sub_100055B2C();
}

uint64_t sub_100053F70()
{
  unsigned __int8 *v0;

  return sub_100053080(*v0);
}

uint64_t sub_100053F78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100052D38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100053F9C()
{
  return sub_1000080B4();
}

uint64_t sub_100053FB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10000B6B0();
  *a1 = result;
  return result;
}

uint64_t sub_100053FDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054F14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100054004(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054F14();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005402C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t __src[13];

  sub_1000532F0(a1, a2, a3, a4, a5, a6, a7, a8, v11, __src[0], SBYTE1(__src[0]), SBYTE2(__src[0]), SBYTE3(__src[0]), SBYTE4(__src[0]), SBYTE5(__src[0]), SBYTE6(__src[0]), SHIBYTE(__src[0]), __src[1], __src[2],
    __src[3],
    __src[4],
    __src[5],
    __src[6],
    __src[7],
    __src[8],
    __src[9],
    __src[10]);
  if (!v9)
    memcpy(a9, __src, 0x68uLL);
}

void sub_100054074(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[104];

  memcpy(__dst, v1, sizeof(__dst));
  sub_100053158(a1);
}

BOOL sub_1000540D4@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_10005365C(*a1);
  *a2 = result;
  return result;
}

void sub_100054108(_QWORD *a1@<X8>)
{
  *a1 = 0x6173726576696E55;
  a1[1] = 0xE90000000000006CLL;
}

uint64_t sub_100054128()
{
  return 0x6173726576696E55;
}

uint64_t sub_100054144@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  uint64_t result;

  result = sub_1000536A0(a1);
  *a2 = result != 0;
  return result;
}

uint64_t sub_100054170(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054FC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100054198(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054FC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000541C0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000541EC(a1);
}

uint64_t sub_1000541EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100053770();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

void sub_100054220()
{
  sub_1000536A4();
}

BOOL sub_100054250(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100053880(*a1, *a2);
}

Swift::Int sub_10005425C()
{
  char *v0;

  return sub_1000539A8(*v0);
}

void sub_100054264(uint64_t a1)
{
  char *v1;

  sub_100053890(a1, *v1);
}

Swift::Int sub_10005426C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000542AC()
{
  char *v0;

  return sub_1000539EC(*v0);
}

uint64_t sub_1000542B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000538B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000542D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1000539A0();
  *a1 = result;
  return result;
}

uint64_t sub_1000542FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054E9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100054324(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100054E9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005434C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100053B48(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

#error "100054388: call analysis failed (funcsize=7)"

unint64_t sub_100054394()
{
  unint64_t result;

  result = qword_1000D1D48;
  if (!qword_1000D1D48)
  {
    result = swift_getWitnessTable(&unk_1000A14D0, &unk_1000C5840);
    atomic_store(result, (unint64_t *)&qword_1000D1D48);
  }
  return result;
}

unint64_t sub_1000543D0()
{
  unint64_t result;

  result = qword_1000D1D50;
  if (!qword_1000D1D50)
  {
    result = swift_getWitnessTable(&unk_1000A14A8, &unk_1000C5940);
    atomic_store(result, (unint64_t *)&qword_1000D1D50);
  }
  return result;
}

_QWORD *sub_10005440C(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100054434(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for String - 1) + 16))(a2, a1);
  return a2;
}

_QWORD *sub_100054470(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_100054498(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  result = *(_QWORD *)(a1 + 24);
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1000544D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_bridgeObjectRetain(v3);
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v4;
    *(_QWORD *)(a1 + 24) = v5;
    swift_bridgeObjectRetain(v5);
  }
  return a1;
}

_QWORD *sub_100054538(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = a2[3];
  if (a1[3] != 1)
  {
    if (v5 != 1)
    {
      a1[2] = a2[2];
      v7 = a2[3];
      a1[3] = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000282EC((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v5 == 1)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  a1[2] = a2[2];
  v6 = a2[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *sub_1000545FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2 + 2;
  if (a1[3] != 1)
  {
    v6 = a2[3];
    if (v6 != 1)
    {
      a1[2] = *v5;
      a1[3] = v6;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000282EC((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
  return a1;
}

uint64_t sub_100054678(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000546CC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for LiveActivityAutostartAction()
{
  sub_100031ABC();
}

void type metadata accessor for LiveActivityAutostartAction.DeepLinks()
{
  sub_100031ABC();
}

uint64_t sub_100054744(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t sub_10005478C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  v8 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v7;
  v10 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v9;
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t sub_100054828(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = a2[3];
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = a2[4];
  v7 = a2[5];
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = a2[6];
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = a2[7];
  v11 = a2[8];
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 72) = a2[9];
  v13 = a2[10];
  v14 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 88) = a2[11];
  v15 = a2[12];
  v16 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

void *sub_10005491C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t sub_100054924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1000549B8(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100054A0C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

void type metadata accessor for LiveActivityAutostartContent()
{
  sub_100031ABC();
}

uint64_t sub_100054A84(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  v2 = a1[5];
  if (v2 != 1)
    swift_bridgeObjectRelease(v2);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t sub_100054AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)v6;
    *(_QWORD *)(a1 + 40) = v7;
    swift_bridgeObjectRetain(v7);
  }
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_100054B58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) != 1)
  {
    if (v6 != 1)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v8 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v8;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1000282EC(a1 + 32);
    goto LABEL_6;
  }
  if (v6 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
LABEL_8:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

void *sub_100054C64(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t sub_100054C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 40) != 1)
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (v7 != 1)
    {
      *(_QWORD *)(a1 + 32) = *v6;
      *(_QWORD *)(a1 + 40) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000282EC(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
LABEL_6:
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t sub_100054D10(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 65))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100054D50(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for LiveActivityAutostartContent.Competitor()
{
  sub_100031ABC();
}

void sub_100054DB0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease();
  sub_100006200();
}

uint64_t sub_100054DEC(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100054E40(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for LiveActivityAutostartContent.Competitor.TemplateImage()
{
  sub_100031ABC();
}

unint64_t sub_100054E9C()
{
  unint64_t result;

  result = qword_1000D1D70;
  if (!qword_1000D1D70)
  {
    result = swift_getWitnessTable(&unk_1000A1A14, &type metadata for LiveActivityAutostartAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1D70);
  }
  return result;
}

unint64_t sub_100054ED8()
{
  unint64_t result;

  result = qword_1000D1D78;
  if (!qword_1000D1D78)
  {
    result = swift_getWitnessTable(&unk_1000A1458, &unk_1000C58C0);
    atomic_store(result, (unint64_t *)&qword_1000D1D78);
  }
  return result;
}

unint64_t sub_100054F14()
{
  unint64_t result;

  result = qword_1000D1D88;
  if (!qword_1000D1D88)
  {
    result = swift_getWitnessTable(&unk_1000A19C4, &type metadata for LiveActivityAutostartContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1D88);
  }
  return result;
}

unint64_t sub_100054F50()
{
  unint64_t result;

  result = qword_1000D1DA0;
  if (!qword_1000D1DA0)
  {
    result = swift_getWitnessTable(&unk_1000A13E0, &unk_1000C59D8);
    atomic_store(result, (unint64_t *)&qword_1000D1DA0);
  }
  return result;
}

unint64_t sub_100054F8C()
{
  unint64_t result;

  result = qword_1000D1DB0;
  if (!qword_1000D1DB0)
  {
    result = swift_getWitnessTable(&unk_1000A1430, &unk_1000C58C0);
    atomic_store(result, (unint64_t *)&qword_1000D1DB0);
  }
  return result;
}

unint64_t sub_100054FC8()
{
  unint64_t result;

  result = qword_1000D1DC0;
  if (!qword_1000D1DC0)
  {
    result = swift_getWitnessTable(&unk_1000A1974, &unk_1000C5C20);
    atomic_store(result, (unint64_t *)&qword_1000D1DC0);
  }
  return result;
}

uint64_t sub_100055004(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100007648(&qword_1000D1D90);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005506C()
{
  unint64_t result;

  result = qword_1000D1DE0;
  if (!qword_1000D1DE0)
  {
    result = swift_getWitnessTable(&unk_1000A13B8, &unk_1000C59D8);
    atomic_store(result, (unint64_t *)&qword_1000D1DE0);
  }
  return result;
}

unint64_t sub_1000550A8()
{
  unint64_t result;

  result = qword_1000D1DF0;
  if (!qword_1000D1DF0)
  {
    result = swift_getWitnessTable(&unk_1000A1924, &type metadata for LiveActivityAutostartContent.Competitor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1DF0);
  }
  return result;
}

unint64_t sub_1000550E4()
{
  unint64_t result;

  result = qword_1000D1DF8;
  if (!qword_1000D1DF8)
  {
    result = swift_getWitnessTable(&unk_1000A1390, &unk_1000C5A68);
    atomic_store(result, (unint64_t *)&qword_1000D1DF8);
  }
  return result;
}

void sub_100055120(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000738C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_100006200();
}

unint64_t sub_100055160()
{
  unint64_t result;

  result = qword_1000D1E10;
  if (!qword_1000D1E10)
  {
    result = swift_getWitnessTable(&unk_1000A1368, &unk_1000C5A68);
    atomic_store(result, (unint64_t *)&qword_1000D1E10);
  }
  return result;
}

unint64_t sub_10005519C()
{
  unint64_t result;

  result = qword_1000D1E20;
  if (!qword_1000D1E20)
  {
    result = swift_getWitnessTable(&unk_1000A18D4, &type metadata for LiveActivityAutostartContent.Competitor.TemplateImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E20);
  }
  return result;
}

uint64_t sub_1000551E4()
{
  return 0;
}

ValueMetadata *type metadata accessor for LiveActivityAutostartContent.Competitor.TemplateImage.CodingKeys()
{
  return &type metadata for LiveActivityAutostartContent.Competitor.TemplateImage.CodingKeys;
}

uint64_t getEnumTagSinglePayload for LiveActivityAutostartContent.Competitor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveActivityAutostartContent.Competitor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000552D0 + 4 * byte_1000A12B1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100055304 + 4 * byte_1000A12AC[v4]))();
}

uint64_t sub_100055304(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005530C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100055314);
  return result;
}

uint64_t sub_100055320(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100055328);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10005532C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055334(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LiveActivityAutostartContent.Competitor.CodingKeys()
{
  return &type metadata for LiveActivityAutostartContent.Competitor.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TVAppFeatureFlags(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s7sportsd28LiveActivityAutostartContentV10CompetitorV13TemplateImageV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000553E0 + 4 * byte_1000A12B6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100055400 + 4 * byte_1000A12BB[v4]))();
}

_BYTE *sub_1000553E0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100055400(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100055408(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100055410(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100055418(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100055420(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for LiveActivityAutostartAction.DeepLinks.CodingKeys()
{
  sub_100031ABC();
}

uint64_t storeEnumTagSinglePayload for LiveActivityAutostartContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100055484 + 4 * byte_1000A12C5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000554B8 + 4 * byte_1000A12C0[v4]))();
}

uint64_t sub_1000554B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000554C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000554C8);
  return result;
}

uint64_t sub_1000554D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000554DCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000554E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000554E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LiveActivityAutostartContent.CodingKeys()
{
  return &type metadata for LiveActivityAutostartContent.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for LiveActivityAutostartAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100055550 + 4 * byte_1000A12CF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100055584 + 4 * byte_1000A12CA[v4]))();
}

uint64_t sub_100055584(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005558C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100055594);
  return result;
}

uint64_t sub_1000555A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000555A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000555AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000555B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LiveActivityAutostartAction.CodingKeys()
{
  return &type metadata for LiveActivityAutostartAction.CodingKeys;
}

unint64_t sub_1000555D4()
{
  unint64_t result;

  result = qword_1000D1E30;
  if (!qword_1000D1E30)
  {
    result = swift_getWitnessTable(&unk_1000A1594, &type metadata for LiveActivityAutostartAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E30);
  }
  return result;
}

unint64_t sub_100055614()
{
  unint64_t result;

  result = qword_1000D1E38;
  if (!qword_1000D1E38)
  {
    result = swift_getWitnessTable(&unk_1000A164C, &type metadata for LiveActivityAutostartContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E38);
  }
  return result;
}

unint64_t sub_100055654()
{
  unint64_t result;

  result = qword_1000D1E40;
  if (!qword_1000D1E40)
  {
    result = swift_getWitnessTable(&unk_1000A173C, &unk_1000C5C20);
    atomic_store(result, (unint64_t *)&qword_1000D1E40);
  }
  return result;
}

unint64_t sub_100055694()
{
  unint64_t result;

  result = qword_1000D1E48;
  if (!qword_1000D1E48)
  {
    result = swift_getWitnessTable(&unk_1000A17F4, &type metadata for LiveActivityAutostartContent.Competitor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E48);
  }
  return result;
}

unint64_t sub_1000556D4()
{
  unint64_t result;

  result = qword_1000D1E50;
  if (!qword_1000D1E50)
  {
    result = swift_getWitnessTable(&unk_1000A18AC, &type metadata for LiveActivityAutostartContent.Competitor.TemplateImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E50);
  }
  return result;
}

unint64_t sub_100055714()
{
  unint64_t result;

  result = qword_1000D1E58;
  if (!qword_1000D1E58)
  {
    result = swift_getWitnessTable(&unk_1000A181C, &type metadata for LiveActivityAutostartContent.Competitor.TemplateImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E58);
  }
  return result;
}

unint64_t sub_100055754()
{
  unint64_t result;

  result = qword_1000D1E60;
  if (!qword_1000D1E60)
  {
    result = swift_getWitnessTable(&unk_1000A1844, &type metadata for LiveActivityAutostartContent.Competitor.TemplateImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E60);
  }
  return result;
}

unint64_t sub_100055794()
{
  unint64_t result;

  result = qword_1000D1E68;
  if (!qword_1000D1E68)
  {
    result = swift_getWitnessTable(&unk_1000A1764, &type metadata for LiveActivityAutostartContent.Competitor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E68);
  }
  return result;
}

unint64_t sub_1000557D4()
{
  unint64_t result;

  result = qword_1000D1E70;
  if (!qword_1000D1E70)
  {
    result = swift_getWitnessTable(&unk_1000A178C, &type metadata for LiveActivityAutostartContent.Competitor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E70);
  }
  return result;
}

unint64_t sub_100055814()
{
  unint64_t result;

  result = qword_1000D1E78;
  if (!qword_1000D1E78)
  {
    result = swift_getWitnessTable(&unk_1000A1674, &unk_1000C5C20);
    atomic_store(result, (unint64_t *)&qword_1000D1E78);
  }
  return result;
}

unint64_t sub_100055854()
{
  unint64_t result;

  result = qword_1000D1E80;
  if (!qword_1000D1E80)
  {
    result = swift_getWitnessTable(&unk_1000A169C, &unk_1000C5C20);
    atomic_store(result, (unint64_t *)&qword_1000D1E80);
  }
  return result;
}

unint64_t sub_100055894()
{
  unint64_t result;

  result = qword_1000D1E88;
  if (!qword_1000D1E88)
  {
    result = swift_getWitnessTable(&unk_1000A15BC, &type metadata for LiveActivityAutostartContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E88);
  }
  return result;
}

unint64_t sub_1000558D4()
{
  unint64_t result;

  result = qword_1000D1E90;
  if (!qword_1000D1E90)
  {
    result = swift_getWitnessTable(&unk_1000A15E4, &type metadata for LiveActivityAutostartContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E90);
  }
  return result;
}

unint64_t sub_100055914()
{
  unint64_t result;

  result = qword_1000D1E98;
  if (!qword_1000D1E98)
  {
    result = swift_getWitnessTable(&unk_1000A1504, &type metadata for LiveActivityAutostartAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1E98);
  }
  return result;
}

unint64_t sub_100055954()
{
  unint64_t result;

  result = qword_1000D1EA0;
  if (!qword_1000D1EA0)
  {
    result = swift_getWitnessTable(&unk_1000A152C, &type metadata for LiveActivityAutostartAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D1EA0);
  }
  return result;
}

uint64_t sub_1000559B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 80) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 80, v3);
}

uint64_t sub_1000559D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000559E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000559F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_100055A18(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_100055A40()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 104));
}

uint64_t sub_100055A48@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_100055A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_100055A7C()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 96, v0);
}

void sub_100055A90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100055120(a1, a2, v2);
}

uint64_t sub_100055A98()
{
  _QWORD *v0;

  return sub_100007618(v0);
}

uint64_t sub_100055AA0(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100055AA8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100055AB0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 96));
}

uint64_t sub_100055AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100055AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, v4);
}

uint64_t sub_100055B00()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100055B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)(a1, a2, a3, a1);
}

uint64_t sub_100055B14()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1000096A0(v1, v0);
}

uint64_t sub_100055B20()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100055B38()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100055B44()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10003C2F0(v0, *(_QWORD *)(v1 - 120));
}

uint64_t sub_100055B50()
{
  unint64_t v0;
  uint64_t v1;

  return sub_1000096A0(v1, v0);
}

uint64_t sub_100055B5C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10003C2F0(v1, v0);
}

id sub_100055B68(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2, 0);
}

uint64_t sub_100055B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a2, a3, v3, v4);
}

uint64_t sub_100055B80()
{
  uint64_t v0;

  return v0 - 96;
}

void sub_100055B94(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100055BF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100055C8C + 4 * byte_1000A1A6D[a2]))(0x7473696765726E75);
}

void sub_100055C8C(uint64_t a1)
{
  uint64_t v1;

  if (a1 != 0x7473696765726E75 || v1 != 0xEE006E6F69746172)
    _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7473696765726E75, 0xEE006E6F69746172, 0);
  sub_1000061E8();
  sub_1000185B4();
  sub_10001860C();
}

void sub_100055D44(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x736C656E6E616863;
  else
    v3 = 0x6F724665726F7473;
  if (v2)
    v4 = 0xEA0000000000746ELL;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x736C656E6E616863;
  else
    v5 = 0x6F724665726F7473;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA0000000000746ELL;
  if (v3 == v5 && v4 == v6)
    sub_100057840();
  else
    sub_1000577E0(v3, a2, v5);
  sub_1000185B4();
  sub_1000061E8();
  sub_10001860C();
}

void sub_100055DC8(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1751607656;
  else
    v3 = 7827308;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1751607656;
  else
    v5 = 7827308;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    sub_100057840();
  else
    sub_1000577E0(v3, a2, v5);
  sub_1000185B4();
  sub_1000061E8();
  sub_10001860C();
}

void sub_100055E38(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100055E94(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_100055EE8 + 4 * byte_1000A1A76[a2]))();
}

void sub_100055EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a1 == a3 && v4 == ((v3 - 32) | 0x8000000000000000))
    sub_100057840();
  else
    sub_1000577E0(a1, a2, a3);
  sub_1000185B4();
  sub_1000061E8();
  sub_10001860C();
}

void sub_100055F4C(char a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7759204;
  else
    v3 = 1685025392;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7759204;
  else
    v5 = 1685025392;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    sub_100057840();
  else
    sub_1000577E0(v3, a2, v5);
  sub_1000185B4();
  sub_1000061E8();
  sub_10001860C();
}

void sub_100055FBC(uint64_t a1, uint64_t a2)
{
  sub_10005625C(a1, a2, (uint64_t (*)(void))sub_10007B6F4);
}

void sub_100055FC8(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_10005602C(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000560A8 + 4 * byte_1000A1A80[a2]))(a3 + 15);
}

void sub_1000560A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = a3 + 15;
  if (a1 == v5 && v4 == ((v3 - 32) | 0x8000000000000000))
    sub_100057840();
  else
    sub_1000577E0(a1, a2, v5);
  sub_1000185B4();
  sub_1000061E8();
  sub_10001860C();
}

uint64_t sub_100056140(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;

  v2 = 0x6C616974696E69;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E69747563657865;
    else
      v4 = 0x64656873696E6966;
    if (v3 == 1)
      v5 = 0xE900000000000067;
    else
      v5 = 0xE800000000000000;
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x6C616974696E69;
  }
  if (a2)
  {
    if (a2 == 1)
      v2 = 0x6E69747563657865;
    else
      v2 = 0x64656873696E6966;
    if (a2 == 1)
      v6 = 0xE900000000000067;
    else
      v6 = 0xE800000000000000;
  }
  else
  {
    v6 = 0xE700000000000000;
  }
  if (v4 == v2 && v5 == v6)
  {
    v8 = 1;
    v6 = v5;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v6, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return v8 & 1;
}

void sub_100056250(uint64_t a1, uint64_t a2)
{
  sub_10005625C(a1, a2, (uint64_t (*)(void))sub_100069248);
}

void sub_10005625C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a3();
  v7 = v6;
  v8 = ((uint64_t (*)(uint64_t))a3)(a2);
  if (v5 == v8 && v7 == v9)
    sub_100057840();
  else
    sub_1000577E0(v5, v9, v8);
  sub_1000185B4();
  sub_1000061E8();
  sub_10001860C();
}

BOOL sub_1000562C4(char a1, char a2)
{
  return qword_1000A1B60[a1] == qword_1000A1B60[a2];
}

uint64_t sub_1000562E8(int a1, char a2)
{
  return (a1 ^ ((a2 & 1) == 0)) & 1;
}

uint64_t sub_1000562FC(uint64_t a1, uint64_t a2)
{
  return sub_100056334(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for Sport, &qword_1000D1F00, (uint64_t)&protocol conformance descriptor for Sport);
}

uint64_t sub_100056318(uint64_t a1, uint64_t a2)
{
  return sub_100056334(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventProgressStatus, &qword_1000D1EF8, (uint64_t)&protocol conformance descriptor for SportingEventProgressStatus);
}

uint64_t sub_100056334(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a3;
  a3(0);
  sub_100057798(a4, v7, a5);
  sub_100057894();
  sub_100057894();
  if (v13 == v11 && v14 == v12)
    sub_100057840();
  else
    LOBYTE(v7) = sub_1000577E0(v13, v8, v11);
  sub_1000185B4();
  sub_1000061E8();
  return v7 & 1;
}

uint64_t sub_1000563E0(uint64_t a1, uint64_t a2)
{
  return sub_100056334(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventCompetitorWinOutcome, &qword_1000D1EF0, (uint64_t)&protocol conformance descriptor for SportingEventCompetitorWinOutcome);
}

void sub_1000563FC(char a1)
{
  sub_100056BC4(0, a1 & 1);
}

void sub_100056408(char a1)
{
  sub_100056CD8(0, a1 & 1);
}

void sub_100056414(uint64_t a1)
{
  _QWORD *v1;

  v1 = sub_100057818(a1);
  sub_1000578E4((uint64_t)v1);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_10005643C(char a1)
{
  sub_100056C84(0, a1 & 1);
}

void sub_100056448()
{
  sub_100056488(0x6173726576696E55);
}

Swift::Int sub_100056464(char a1)
{
  return sub_100056B0C(0, a1);
}

void sub_100056470()
{
  sub_100056488(0x746C7561666544);
}

void sub_100056488(uint64_t a1)
{
  _BYTE v2[72];

  sub_100057818(a1);
  sub_100057810((uint64_t)v2, a1);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_1000564BC()
{
  sub_100056560(-1200);
}

void sub_1000564C4(uint64_t a1)
{
  char v1;
  Swift::UInt v2;

  v1 = a1;
  sub_100057818(a1);
  if ((v1 & 1) != 0)
    v2 = 404;
  else
    v2 = 3328;
  sub_100057880(v2);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056500(uint64_t a1)
{
  char v1;

  v1 = a1;
  sub_100057818(a1);
  sub_100057880(qword_1000A1B60[v1]);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056538(uint64_t a1)
{
  sub_100056594(a1, (uint64_t (*)(uint64_t))sub_1000685E4);
}

void sub_100056544(uint64_t a1)
{
  sub_100056594(a1, (uint64_t (*)(uint64_t))sub_100069248);
}

void sub_100056550(uint64_t a1)
{
  sub_100056594(a1, (uint64_t (*)(uint64_t))sub_10007B6F4);
}

void sub_100056560(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_100057818(a1);
  sub_1000578D8(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056588(uint64_t a1)
{
  sub_100056594(a1, (uint64_t (*)(uint64_t))sub_1000946A0);
}

void sub_100056594(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  _BYTE v5[72];

  sub_100057818(a1);
  v4 = a2(a1);
  sub_100057810((uint64_t)v5, v4);
  sub_1000185B4();
  sub_100018CA8();
  sub_100055B2C();
}

void sub_1000565DC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100056624(uint64_t a1)
{
  sub_100057810(a1, 0x7473696765726E75);
  return sub_1000577D8(0xEE006E6F69746172);
}

uint64_t sub_1000566B0(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6173726576696E55, 0xE90000000000006CLL);
}

uint64_t sub_1000566CC(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 0x736C656E6E616863;
  else
    v3 = 0x6F724665726F7473;
  if (v2)
    v4 = 0xEA0000000000746ELL;
  else
    v4 = 0xE800000000000000;
  sub_100057810(a1, v3);
  return sub_1000577D8(v4);
}

uint64_t sub_100056720(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 1751607656;
  else
    v3 = 7827308;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE400000000000000;
  sub_100057810(a1, v3);
  return sub_1000577D8(v4);
}

void sub_100056760()
{
  sub_1000578B4();
  sub_100006200();
}

void sub_100056778(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000567BC(uint64_t a1, uint64_t a2)
{
  sub_100057810(a1, a2);
  return sub_1000577D8(0x80000001000A5690);
}

uint64_t sub_10005680C(uint64_t a1)
{
  return String.hash(into:)(a1, 0x746C7561666544, 0xE700000000000000);
}

uint64_t sub_100056824(uint64_t a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v3 = 7759204;
  else
    v3 = 1685025392;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE300000000000000;
  sub_100057810(a1, v3);
  return sub_1000577D8(v4);
}

uint64_t sub_100056864(uint64_t a1, uint64_t a2)
{
  return sub_1000569B8(a1, a2, (uint64_t (*)(uint64_t))sub_10007B6F4);
}

void sub_100056870(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000568B4(uint64_t a1, uint64_t a2)
{
  sub_100057810(a1, a2 + 15);
  return sub_1000577D8(0x80000001000A57E0);
}

uint64_t sub_100056930(uint64_t a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a2;
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x6E69747563657865;
    else
      v3 = 0x64656873696E6966;
    if (v2 == 1)
      v4 = 0xE900000000000067;
    else
      v4 = 0xE800000000000000;
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6C616974696E69;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000569AC(uint64_t a1, uint64_t a2)
{
  return sub_1000569B8(a1, a2, (uint64_t (*)(uint64_t))sub_100069248);
}

uint64_t sub_1000569B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a3(a2);
  v6 = v5;
  String.hash(into:)(a1, v4, v5);
  return sub_1000577D8(v6);
}

void sub_1000569F4()
{
  sub_1000578C0();
  sub_100006200();
}

void sub_100056A0C()
{
  Hasher._combine(_:)(0xFFFFFFFFFFFFFB50);
  sub_100006200();
}

void sub_100056A2C(uint64_t a1, char a2)
{
  Hasher._combine(_:)(qword_1000A1B60[a2]);
  sub_100006200();
}

void sub_100056A58(uint64_t a1, char a2)
{
  Swift::UInt v2;

  if ((a2 & 1) != 0)
    v2 = 404;
  else
    v2 = 3328;
  Hasher._combine(_:)(v2);
  sub_100006200();
}

void sub_100056A84(uint64_t a1, char a2)
{
  Swift::UInt v3;

  sub_100057824(a1);
  if ((a2 & 1) != 0)
    v3 = 404;
  else
    v3 = 3328;
  sub_100057880(v3);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056ABC(uint64_t a1, char a2)
{
  sub_100057824(a1);
  sub_100057880(qword_1000A1B60[a2]);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056AF4(uint64_t a1)
{
  sub_100056C5C(a1);
}

void sub_100056B00(uint64_t a1, uint64_t a2)
{
  sub_100056D9C(a1, a2, (uint64_t (*)(uint64_t))sub_100069248);
}

Swift::Int sub_100056B0C(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x6E69747563657865;
    else
      v3 = 0x64656873696E6966;
    if (a2 == 1)
      v4 = 0xE900000000000067;
    else
      v4 = 0xE800000000000000;
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x6C616974696E69;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100056BAC(uint64_t a1, uint64_t a2)
{
  sub_100056D9C(a1, a2, (uint64_t (*)(uint64_t))sub_1000685E4);
}

void sub_100056BB8(uint64_t a1, uint64_t a2)
{
  sub_100056D9C(a1, a2, (uint64_t (*)(uint64_t))sub_10007B6F4);
}

void sub_100056BC4(uint64_t a1, char a2)
{
  uint64_t v3;
  _BYTE v4[72];

  sub_100057824(a1);
  if ((a2 & 1) != 0)
    v3 = 7759204;
  else
    v3 = 1685025392;
  sub_100057810((uint64_t)v4, v3);
  sub_1000185B4();
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056C1C(uint64_t a1)
{
  sub_100056D5C(a1, 0x746C7561666544);
}

void sub_100056C34(uint64_t a1)
{
  _QWORD *v1;

  v1 = sub_100057824(a1);
  sub_1000578E4((uint64_t)v1);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056C5C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_100057824(a1);
  sub_1000578D8(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056C84(uint64_t a1, char a2)
{
  uint64_t v3;
  _BYTE v4[72];

  sub_100057824(a1);
  if ((a2 & 1) != 0)
    v3 = 1751607656;
  else
    v3 = 7827308;
  sub_100057810((uint64_t)v4, v3);
  sub_1000185B4();
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056CD8(uint64_t a1, char a2)
{
  uint64_t v3;
  _BYTE v4[72];

  sub_100057824(a1);
  if ((a2 & 1) != 0)
    v3 = 0x736C656E6E616863;
  else
    v3 = 0x6F724665726F7473;
  sub_100057810((uint64_t)v4, v3);
  sub_1000185B4();
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056D40(uint64_t a1)
{
  sub_100056D5C(a1, 0x6173726576696E55);
}

void sub_100056D5C(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];

  sub_100057824(a1);
  sub_100057810((uint64_t)v3, a2);
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056D90(uint64_t a1, uint64_t a2)
{
  sub_100056D9C(a1, a2, (uint64_t (*)(uint64_t))sub_1000946A0);
}

void sub_100056D9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  _BYTE v6[72];

  sub_100057824(a1);
  v5 = a3(a2);
  sub_100057810((uint64_t)v6, v5);
  sub_1000185B4();
  sub_100018CA8();
  sub_100055B2C();
}

void sub_100056DE4(uint64_t a1, void *a2, SEL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  NSString v18;

  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * i + 8);
    swift_bridgeObjectRetain(v17);
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, *a3, v18);
    swift_bridgeObjectRelease(v17);

    if (v9)
      goto LABEL_4;
LABEL_5:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v10)
      goto LABEL_23;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_23;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_23;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
        {
          v11 = v14 + 3;
          if (v14 + 3 >= v10)
            goto LABEL_23;
          v15 = *(_QWORD *)(v6 + 8 * v11);
          if (!v15)
            break;
        }
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 4;
  if (v16 >= v10)
  {
LABEL_23:

    swift_release(a1);
    return;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_23;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100056F84()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v0 = sub_100056FFC();
  if (!v0)
  {
    v1 = 0xE700000000000000;
    v2 = sub_10005782C();
    goto LABEL_6;
  }
  if (v0 != 1)
  {
    v1 = 0xE800000000000000;
    v2 = sub_10005784C();
LABEL_6:
    v3 = sub_1000577F0(v2, v1);
    result = sub_1000185B4();
    if ((v3 & 1) == 0)
      return result;
    return sub_10005705C(2);
  }
  sub_1000578CC();
  return sub_10005705C(2);
}

uint64_t sub_100056FFC()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (os_unfair_lock_s *)(v0 + OBJC_IVAR____TtC7sportsd14AsyncOperation_lock);
  sub_100057888(v0 + OBJC_IVAR____TtC7sportsd14AsyncOperation_lock, (uint64_t)v4);
  os_unfair_lock_lock(v1);
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7sportsd14AsyncOperation__state);
  os_unfair_lock_unlock(v1);
  swift_endAccess(v4);
  return v2;
}

uint64_t sub_10005705C(char a1)
{
  void *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE v11[32];

  if (qword_1000CFAA0 != -1)
    swift_once(&qword_1000CFAA0, sub_1000572CC);
  v3 = qword_1000D1EA8;
  v4 = v1;
  swift_bridgeObjectRetain(v3);
  sub_100056DE4(v5, v4, (SEL *)&selRef_willChangeValueForKey_);
  swift_bridgeObjectRelease(v3);
  v6 = (os_unfair_lock_s *)&v4[OBJC_IVAR____TtC7sportsd14AsyncOperation_lock];
  sub_100057888((uint64_t)&v4[OBJC_IVAR____TtC7sportsd14AsyncOperation_lock], (uint64_t)v11);
  os_unfair_lock_lock(v6);
  v4[OBJC_IVAR____TtC7sportsd14AsyncOperation__state] = a1;
  os_unfair_lock_unlock(v6);
  swift_endAccess(v11);
  v7 = qword_1000D1EA8;
  v8 = v4;
  swift_bridgeObjectRetain(v7);
  sub_100056DE4(v9, v8, (SEL *)&selRef_didChangeValueForKey_);
  return sub_1000185B4();
}

unint64_t sub_100057150(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C2B48, v2);
  sub_1000185B4();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_100057194(char a1)
{
  if (!a1)
    return sub_10005782C();
  if (a1 == 1)
    return 0x6E69747563657865;
  return 0x64656873696E6966;
}

uint64_t sub_1000571EC(unsigned __int8 *a1, char *a2)
{
  return sub_100056140(*a1, *a2);
}

Swift::Int sub_1000571F8()
{
  char *v0;

  return sub_100056464(*v0);
}

uint64_t sub_100057200(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100056930(a1, *v1);
}

Swift::Int sub_100057208(uint64_t a1)
{
  char *v1;

  return sub_100056B0C(a1, *v1);
}

unint64_t sub_100057210@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100057150(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005723C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100057194(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id sub_100057264()
{
  _BYTE *v0;
  objc_super v2;

  *(_DWORD *)&v0[OBJC_IVAR____TtC7sportsd14AsyncOperation_lock] = 0;
  v0[OBJC_IVAR____TtC7sportsd14AsyncOperation__state] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AsyncOperation();
  return objc_msgSendSuper2(&v2, "init");
}

Swift::Int sub_1000572CC()
{
  Swift::Int result;

  result = sub_10004D680((uint64_t)&off_1000C2A48);
  qword_1000D1EA8 = result;
  return result;
}

uint64_t sub_100057328()
{
  int v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100056FFC();
  if (!v0)
  {
    v2 = 0xE700000000000000;
    v3 = sub_10005782C();
LABEL_6:
    v1 = sub_1000577F0(v3, v2);
    goto LABEL_7;
  }
  if (v0 != 1)
  {
    v2 = 0xE800000000000000;
    v3 = sub_10005784C();
    goto LABEL_6;
  }
  v1 = 1;
LABEL_7:
  sub_1000185B4();
  return v1 & 1;
}

void sub_1000573BC()
{
  void *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unint64_t v7;

  v1 = 0x6C616974696E69;
  if (objc_msgSend(v0, "isCancelled"))
  {
    v2 = sub_100056FFC();
    if (v2)
    {
      if (v2 == 1)
      {
        sub_1000578CC();
        goto LABEL_8;
      }
      v3 = 0xE800000000000000;
      v4 = sub_10005784C();
    }
    else
    {
      v3 = 0xE700000000000000;
      v4 = sub_10005782C();
    }
    v5 = sub_1000577F0(v4, v3);
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
      goto LABEL_14;
  }
LABEL_8:
  v6 = sub_100056FFC();
  if (!v6)
  {
    v7 = 0xE700000000000000;
    goto LABEL_12;
  }
  if (v6 == 1)
  {
    v1 = 0x6E69747563657865;
    v7 = 0xE900000000000067;
LABEL_12:
    _stringCompareWithSmolCheck(_:_:expecting:)(v1, v7, 0x64656873696E6966, 0xE800000000000000, 0);
  }
  sub_1000061E8();
LABEL_14:
  sub_10001860C();
}

uint64_t sub_1000574B8()
{
  _QWORD *v0;
  uint64_t result;

  result = (uint64_t)objc_msgSend(v0, "isCancelled");
  if ((result & 1) == 0)
  {
    sub_10005705C(1);
    return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8))();
  }
  return result;
}

void sub_100057538()
{
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(0xE000000000000000);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002CLL, 0x80000001000A7610, "sportsd/AsyncOperation.swift", 28, 2, 69, 0, 0);
  __break(1u);
}

id sub_1000575B0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AsyncOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AsyncOperation()
{
  return objc_opt_self(_TtC7sportsd14AsyncOperation);
}

uint64_t getEnumTagSinglePayload for AsyncOperation.ExecutionState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AsyncOperation.ExecutionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000576D8 + 4 * byte_1000A1A9A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10005770C + 4 * byte_1000A1A95[v4]))();
}

uint64_t sub_10005770C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100057714(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005771CLL);
  return result;
}

uint64_t sub_100057728(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100057730);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100057734(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005773C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AsyncOperation.ExecutionState()
{
  return &type metadata for AsyncOperation.ExecutionState;
}

unint64_t sub_10005775C()
{
  unint64_t result;

  result = qword_1000D1EE8;
  if (!qword_1000D1EE8)
  {
    result = swift_getWitnessTable(&unk_1000A1B38, &type metadata for AsyncOperation.ExecutionState);
    atomic_store(result, (unint64_t *)&qword_1000D1EE8);
  }
  return result;
}

uint64_t sub_100057798(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000577D8(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000577E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0);
}

uint64_t sub_1000577F0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x6E69747563657865, 0xE900000000000067, 0);
}

uint64_t sub_100057810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return String.hash(into:)(a1, a2, v2);
}

_QWORD *sub_100057818(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

_QWORD *sub_100057824(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_10005782C()
{
  return 0x6C616974696E69;
}

uint64_t sub_10005784C()
{
  return 0x64656873696E6966;
}

void sub_100057860()
{
  sub_100056560(-1000);
}

void sub_100057868()
{
  sub_100056560(0);
}

void sub_100057870(uint64_t a1)
{
  sub_100056C5C(a1);
}

void sub_100057878(uint64_t a1)
{
  sub_100056C5C(a1);
}

void sub_100057880(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_100057888(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

uint64_t sub_100057894()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of RawRepresentable.rawValue.getter(v1, v0);
}

void sub_1000578B4()
{
  Hasher._combine(_:)(0);
}

void sub_1000578C0()
{
  Hasher._combine(_:)(0xFFFFFFFFFFFFFC18);
}

uint64_t sub_1000578CC()
{
  return swift_bridgeObjectRelease(0xE900000000000067);
}

void sub_1000578D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

void sub_1000578E4(uint64_t a1, ...)
{
  char v1;
  va_list va;

  va_start(va, a1);
  sub_100056778((uint64_t)va, v1);
}

void sub_1000578F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  sub_10000A758();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  sub_100063AB8(v26, v27, v28, v29, v30);
  v83 = v31;
  v75 = sub_100043390();
  v32 = *(_QWORD *)(v75 - 8);
  v76 = *(_QWORD *)(v32 + 64);
  __chkstk_darwin(v75);
  sub_100063A74();
  v74 = v33;
  v34 = sub_10000738C(&qword_1000D1660);
  sub_100063A9C(*(_QWORD *)(v34 - 8));
  __chkstk_darwin(v35);
  sub_1000634C0(v36, v37, v38, v39, v40, v41, v42, v43, v71);
  v44 = sub_10000738C(&qword_1000D2098);
  sub_10006375C();
  __chkstk_darwin(v45);
  sub_1000634A8();
  v77 = sub_10000738C(&qword_1000D2268);
  sub_10000A680();
  __chkstk_darwin(v46);
  sub_100040030();
  sub_10000738C(&qword_1000D2270);
  sub_10000A680();
  __chkstk_darwin(v47);
  sub_10000CD48();
  sub_100063A60();
  sub_1000638DC((uint64_t)&a17);
  sub_100063678();
  v48 = sub_10000738C(&qword_1000D2278);
  v85 = v25;
  v49 = sub_10006393C();
  sub_1000610A0(&qword_1000D20B0, &qword_1000D2098);
  v51 = v50;
  v52 = sub_100060EA8();
  sub_10000A378(&qword_1000D20C0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(v48, &v85, v44, v48, v49, v51, v52, v53);
  sub_1000639D4(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
  sub_1000639F4();
  sub_10005F2E8(v81, v72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v74, v83, v75);
  v54 = *(unsigned __int8 *)(v73 + 80);
  v55 = *(unsigned __int8 *)(v32 + 80);
  sub_100063ACC();
  v76 += 7;
  v56 = (v76 + v20) & 0xFFFFFFFFFFFFFFF8;
  v57 = swift_allocObject(&unk_1000C66C0, v56 + 16, v54 | v55 | 7);
  sub_10000A78C((void *)(v57 + 16));
  *(_QWORD *)(v57 + 112) = v78;
  sub_100055120(v72, v57 + ((v54 + 120) & ~v54), &qword_1000D1660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v57 + v20, v74, v75);
  v58 = (uint64_t *)(v57 + v56);
  *v58 = v79;
  v58[1] = v80;
  sub_100019F6C(v79, v80);
  v59 = v78;
  v60 = sub_10000738C(&qword_1000D2290);
  sub_1000610A0(&qword_1000D2298, &qword_1000D2268);
  Publisher.map<A>(_:)(sub_100060F28, v57, v77, v60);
  sub_100063924();
  v61 = sub_100063A44();
  sub_100038D24(v61, v62);
  sub_10005F2E8(v81, v72);
  sub_1000639F4();
  sub_10006363C((uint64_t)&v87);
  sub_1000638EC();
  v63 = (v54 + 32) & ~v54;
  v64 = (v82 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
  v65 = (v76 + ((v55 + v64 + 96) & ~v55)) & 0xFFFFFFFFFFFFFFF8;
  v66 = sub_10006383C((uint64_t)&unk_1000C66E8, v65 + 40);
  *(_QWORD *)(v66 + 16) = v79;
  *(_QWORD *)(v66 + 24) = v80;
  sub_100055120(v72, v66 + v63, &qword_1000D1660);
  sub_10000A78C((void *)(v66 + v64));
  sub_10006363C((uint64_t)&v86);
  sub_100009DDC(&v84, v66 + v65);
  sub_100019F6C(v79, v80);
  sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_1000610A0(&qword_1000D22A0, &qword_1000D2270);
  sub_100063708();
  Publisher.mapError<A>(_:)(v67, v68, v69, v70);
  sub_1000187F4();
  sub_100063464((uint64_t)&a14);
  sub_10000A668();
}

void sub_100057D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  sub_10000A758();
  a19 = v24;
  a20 = v25;
  v32 = sub_1000633B4(v26, v27, v28, v29, v30, v31);
  v33 = sub_10006360C(v32);
  __chkstk_darwin(v33);
  sub_1000637EC();
  v34 = sub_10000738C(&qword_1000D1660);
  v35 = sub_1000637C8(v34);
  __chkstk_darwin(v35);
  sub_1000634C0(v36, v37, v38, v39, v40, v41, v42, v43, v68);
  v44 = sub_10000738C(&qword_1000D2098);
  sub_10006375C();
  __chkstk_darwin(v45);
  sub_1000634A8();
  v71 = *(_QWORD *)(sub_10000738C(&qword_1000D22C0) - 8);
  sub_10000A680();
  __chkstk_darwin(v46);
  sub_10006373C(v47, v69);
  sub_10000738C(&qword_1000D22C8);
  sub_10000A680();
  __chkstk_darwin(v48);
  sub_1000633F0(v49, v70);
  sub_100063678();
  v50 = sub_10000738C(&qword_1000D1560);
  v72 = v21;
  v51 = sub_10006393C();
  sub_1000610A0(&qword_1000D20B0, &qword_1000D2098);
  v53 = v52;
  sub_1000610A0(&qword_1000D1568, &qword_1000D1560);
  v55 = v54;
  sub_10000A378(&qword_1000D20C0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(v50, &v72, v44, v50, v51, v53, v55, v56);
  sub_10000A798(v20, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  sub_1000634E0();
  sub_1000636D8();
  sub_100063478();
  sub_10006330C();
  v59 = swift_allocObject(&unk_1000C6710, v57, v58);
  sub_10000A78C((void *)(v59 + 16));
  v60 = sub_10006390C();
  sub_100055120(v60, v61, &qword_1000D1660);
  sub_1000635E8();
  sub_1000636BC();
  v62 = v22;
  v63 = sub_10000738C(&qword_1000D1CC8);
  sub_1000610A0(&qword_1000D22D0, &qword_1000D22C0);
  sub_1000635C4((uint64_t)sub_100060FB4);
  sub_100063924();
  sub_10000A798(v63, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
  sub_100063870();
  sub_1000634E0();
  sub_10006363C((uint64_t)&v73);
  sub_1000638FC();
  sub_100063428();
  v65 = sub_10006383C((uint64_t)&unk_1000C6738, v64);
  v66 = sub_100063654(v65);
  sub_100055120(v66, v67, &qword_1000D1660);
  sub_10000A78C((void *)(v44 + v53));
  sub_1000634EC();
  sub_1000638A0();
  sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_1000610A0(&qword_1000D22D8, &qword_1000D22C8);
  sub_100063570((uint64_t)sub_10005F378);
  sub_1000187F4();
  sub_100063464((uint64_t)&a13);
  sub_10000A668();
}

void sub_10005806C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  sub_10000A758();
  a19 = v24;
  a20 = v25;
  v32 = sub_1000633B4(v26, v27, v28, v29, v30, v31);
  v33 = sub_10006360C(v32);
  __chkstk_darwin(v33);
  sub_1000637EC();
  v34 = sub_10000738C(&qword_1000D1660);
  v35 = sub_1000637C8(v34);
  __chkstk_darwin(v35);
  sub_1000634C0(v36, v37, v38, v39, v40, v41, v42, v43, v68);
  v44 = sub_10000738C(&qword_1000D2098);
  sub_10006375C();
  __chkstk_darwin(v45);
  sub_1000634A8();
  v71 = *(_QWORD *)(sub_10000738C(&qword_1000D2228) - 8);
  sub_10000A680();
  __chkstk_darwin(v46);
  sub_10006373C(v47, v69);
  sub_10000738C(&qword_1000D2230);
  sub_10000A680();
  __chkstk_darwin(v48);
  sub_1000633F0(v49, v70);
  sub_100063678();
  v50 = _s20RegistrationResponseVMa(0);
  v72 = v21;
  v51 = sub_10006393C();
  sub_1000610A0(&qword_1000D20B0, &qword_1000D2098);
  v53 = v52;
  sub_10000A378(&qword_1000D2238, _s20RegistrationResponseVMa);
  v55 = v54;
  sub_10000A378(&qword_1000D20C0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(v50, &v72, v44, v50, v51, v53, v55, v56);
  sub_10000A798(v20, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
  sub_1000634E0();
  sub_1000636D8();
  sub_100063478();
  sub_10006330C();
  v59 = swift_allocObject(&unk_1000C6670, v57, v58);
  sub_10000A78C((void *)(v59 + 16));
  v60 = sub_10006390C();
  sub_100055120(v60, v61, &qword_1000D1660);
  sub_1000635E8();
  sub_1000636BC();
  v62 = v22;
  v63 = sub_10000738C(&qword_1000CFE40);
  sub_1000610A0(&qword_1000D2240, &qword_1000D2228);
  sub_1000635C4((uint64_t)sub_100060DA8);
  sub_100063924();
  sub_10000A798(v63, *(uint64_t (**)(uint64_t, uint64_t))(v71 + 8));
  sub_100063870();
  sub_1000634E0();
  sub_10006363C((uint64_t)&v73);
  sub_1000638FC();
  sub_100063428();
  v65 = sub_10006383C((uint64_t)&unk_1000C6698, v64);
  v66 = sub_100063654(v65);
  sub_100055120(v66, v67, &qword_1000D1660);
  sub_10000A78C((void *)(v44 + v53));
  sub_1000634EC();
  sub_1000638A0();
  sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_1000610A0(&qword_1000D2248, &qword_1000D2230);
  sub_100063570((uint64_t)sub_10005F378);
  sub_1000187F4();
  sub_100063464((uint64_t)&a13);
  sub_10000A668();
}

void sub_10005834C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  sub_10000A758();
  a19 = v22;
  a20 = v23;
  v87 = v24;
  v95 = v25;
  v27 = v26;
  sub_100063AB8(v28, v29, v30, v31, v32);
  v94 = v33;
  v89 = v34;
  v82 = sub_100043390();
  v91 = *(_QWORD *)(v82 - 8);
  v35 = *(_QWORD *)(v91 + 64);
  __chkstk_darwin(v82);
  v36 = sub_10000738C(&qword_1000D1660);
  sub_100063A9C(*(_QWORD *)(v36 - 8));
  __chkstk_darwin(v37);
  sub_100063A74();
  v79 = v38;
  v39 = sub_100063AEC();
  sub_100055AD0();
  __chkstk_darwin(v40);
  sub_1000634A8();
  v83 = sub_10000738C(&qword_1000D2200);
  v84 = *(_QWORD *)(v83 - 8);
  sub_10000A680();
  __chkstk_darwin(v41);
  sub_100040030();
  v78 = v20;
  v86 = sub_10000738C(&qword_1000D2208);
  v88 = *(_QWORD *)(v86 - 8);
  sub_10000A680();
  __chkstk_darwin(v42);
  v96 = (char *)&v75 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100063A60();
  sub_1000638DC((uint64_t)&v100);
  sub_100063678();
  v98 = v27;
  v44 = sub_10006393C();
  sub_1000610A0(&qword_1000D20B0, &qword_1000D2098);
  v46 = v45;
  v47 = sub_10005FC34();
  sub_10000A378(&qword_1000D20C0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(&unk_1000C4BC8, &v98, v39, &unk_1000C4BC8, v44, v46, v47, v48);
  sub_1000639D4(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
  sub_1000634E0();
  v49 = v79;
  sub_10005F2E8(v92, v79);
  v50 = v91;
  v76 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 16);
  v51 = (char *)&v75 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v82;
  v76(v51, v94, v82);
  v53 = *(unsigned __int8 *)(v81 + 80);
  v54 = *(unsigned __int8 *)(v50 + 80);
  sub_100063ACC();
  v81 = v53 | v54 | 7;
  v77 = v35 + 7;
  v55 = (v35 + 7 + v50) & 0xFFFFFFFFFFFFFFF8;
  v56 = swift_allocObject(&unk_1000C61D0, v55 + 16, v81);
  sub_10000A78C((void *)(v56 + 16));
  v57 = v85;
  *(_QWORD *)(v56 + 112) = v85;
  sub_100055120(v49, v56 + ((v53 + 120) & ~v53), &qword_1000D1660);
  v91 = *(_QWORD *)(v91 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v91)(v56 + v50, v51, v52);
  v58 = (uint64_t *)(v56 + v55);
  v59 = v90;
  v60 = v80;
  *v58 = v90;
  v58[1] = v60;
  sub_100019F6C(v59, v60);
  v61 = v57;
  v62 = sub_10000738C(&qword_1000CFDA8);
  sub_1000610A0(&qword_1000D2218, &qword_1000D2200);
  v63 = v83;
  Publisher.map<A>(_:)(sub_10005FC74, v56, v83, v62);
  sub_100063924();
  v64 = sub_100063A44();
  v65(v64, v63);
  sub_10005F2E8(v92, v49);
  sub_1000634E0();
  sub_10006363C((uint64_t)&v99);
  sub_1000638EC();
  v66 = (v53 + 32) & ~v53;
  v67 = (v93 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
  v68 = (v77 + ((v54 + v67 + 96) & ~v54)) & 0xFFFFFFFFFFFFFFF8;
  v69 = swift_allocObject(&unk_1000C61F8, v68 + 40, v81);
  v70 = v90;
  *(_QWORD *)(v69 + 16) = v90;
  *(_QWORD *)(v69 + 24) = v60;
  sub_100055120(v49, v69 + v66, &qword_1000D1660);
  sub_10000A78C((void *)(v69 + v67));
  sub_1000634EC();
  sub_100009DDC(&v97, v69 + v68);
  sub_100019F6C(v70, v60);
  sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_1000610A0(&qword_1000D2220, &qword_1000D2208);
  sub_100063708();
  Publisher.mapError<A>(_:)(v71, v72, v73, v74);
  sub_1000187F4();
  sub_100063464((uint64_t)&a14);
  sub_10000A668();
}

uint64_t sub_1000587EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int128 v79[2];
  _QWORD __src[12];

  v69 = a8;
  v77 = a7;
  v74 = a5;
  v67 = a4;
  v76 = a3;
  v71 = a9;
  v64 = type metadata accessor for URLRequest(0);
  v73 = *(_QWORD *)(v64 - 8);
  v12 = *(_QWORD *)(v73 + 64);
  __chkstk_darwin(v64);
  v13 = sub_10000738C(&qword_1000D1660);
  v63 = *(_QWORD *)(v13 - 8);
  v75 = *(_QWORD *)(v63 + 64);
  __chkstk_darwin(v13);
  v61 = (uint64_t)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000738C(&qword_1000D2098);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10000738C(&qword_1000D20A0);
  v66 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v60 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_10000738C(&qword_1000D20A8);
  v70 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v78 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = a1;
  __src[0] = a1;
  __src[1] = a2;
  v62 = a2;
  sub_100019F6C(a1, a2);
  Just.init(_:)(__src);
  __src[0] = a6;
  v21 = type metadata accessor for JSONDecoder(0);
  sub_1000610A0(&qword_1000D20B0, &qword_1000D2098);
  v23 = v22;
  v24 = sub_10005F2AC();
  sub_10000A378(&qword_1000D20C0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(&type metadata for UTSApiAgent.UTSResponse, __src, v15, &type metadata for UTSApiAgent.UTSResponse, v21, v23, v24, v25);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_1000095FC(v77, (uint64_t)__src);
  v26 = v61;
  sub_10005F2E8(v74, v61);
  v27 = v73;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  v28 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v64;
  v58(v28, v76, v64);
  v30 = *(unsigned __int8 *)(v63 + 80);
  v31 = (v30 + 120) & ~v30;
  v32 = *(unsigned __int8 *)(v27 + 80);
  v33 = (v75 + v32 + v31) & ~v32;
  v63 = v30 | v32 | 7;
  v59 = v12 + 7;
  v34 = (v12 + 7 + v33) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject(&unk_1000C6018, v34 + 16, v63);
  memcpy((void *)(v35 + 16), __src, 0x60uLL);
  v36 = v67;
  *(_QWORD *)(v35 + 112) = v67;
  sub_100055120(v26, v35 + v31, &qword_1000D1660);
  v73 = *(_QWORD *)(v73 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v73)(v35 + v33, v28, v29);
  v37 = (uint64_t *)(v35 + v34);
  v38 = v72;
  v39 = v62;
  *v37 = v72;
  v37[1] = v39;
  sub_100019F6C(v38, v39);
  v40 = v36;
  v41 = sub_10000738C(&qword_1000D2040);
  sub_1000610A0(&qword_1000D20C8, &qword_1000D20A0);
  v42 = v65;
  v43 = v60;
  Publisher.map<A>(_:)(sub_10005F334, v35, v65, v41);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v43, v42);
  sub_10005F2E8(v74, v26);
  sub_1000095FC(v77, (uint64_t)__src);
  v44 = v28;
  v45 = v29;
  v58(v28, v76, v29);
  sub_10000AE14(v69, (uint64_t)v79);
  v46 = (v30 + 32) & ~v30;
  v47 = (v75 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v32 + v47 + 96) & ~v32;
  v49 = (v59 + v48) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject(&unk_1000C6040, v49 + 40, v63);
  v51 = v72;
  *(_QWORD *)(v50 + 16) = v72;
  *(_QWORD *)(v50 + 24) = v39;
  sub_100055120(v26, v50 + v46, &qword_1000D1660);
  memcpy((void *)(v50 + v47), __src, 0x60uLL);
  ((void (*)(uint64_t, char *, uint64_t))v73)(v50 + v48, v44, v45);
  sub_100009DDC(v79, v50 + v49);
  sub_100019F6C(v51, v39);
  v52 = sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_1000610A0(&qword_1000D20D0, &qword_1000D20A8);
  v53 = v68;
  v54 = v52;
  v55 = v78;
  Publisher.mapError<A>(_:)(sub_10005F378, v50, v68, v54);
  swift_release(v50);
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v55, v53);
}

uint64_t sub_100058DBC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int128 v79[2];
  _QWORD __src[12];

  v69 = a8;
  v77 = a7;
  v74 = a5;
  v67 = a4;
  v76 = a3;
  v71 = a9;
  v64 = type metadata accessor for URLRequest(0);
  v73 = *(_QWORD *)(v64 - 8);
  v12 = *(_QWORD *)(v73 + 64);
  __chkstk_darwin(v64);
  v13 = sub_10000738C(&qword_1000D1660);
  v63 = *(_QWORD *)(v13 - 8);
  v75 = *(_QWORD *)(v63 + 64);
  __chkstk_darwin(v13);
  v61 = (uint64_t)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000738C(&qword_1000D2098);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10000738C(&qword_1000D21C0);
  v66 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v60 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_10000738C(&qword_1000D21C8);
  v70 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v78 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = a1;
  __src[0] = a1;
  __src[1] = a2;
  v62 = a2;
  sub_100019F6C(a1, a2);
  Just.init(_:)(__src);
  __src[0] = a6;
  v21 = type metadata accessor for JSONDecoder(0);
  sub_1000610A0(&qword_1000D20B0, &qword_1000D2098);
  v23 = v22;
  v24 = sub_10005F840();
  sub_10000A378(&qword_1000D20C0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONDecoder);
  Publisher.decode<A, B>(type:decoder:)(&unk_1000C6278, __src, v15, &unk_1000C6278, v21, v23, v24, v25);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_1000095FC(v77, (uint64_t)__src);
  v26 = v61;
  sub_10005F2E8(v74, v61);
  v27 = v73;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  v28 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v64;
  v58(v28, v76, v64);
  v30 = *(unsigned __int8 *)(v63 + 80);
  v31 = (v30 + 120) & ~v30;
  v32 = *(unsigned __int8 *)(v27 + 80);
  v33 = (v75 + v32 + v31) & ~v32;
  v63 = v30 | v32 | 7;
  v59 = v12 + 7;
  v34 = (v12 + 7 + v33) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject(&unk_1000C6180, v34 + 16, v63);
  memcpy((void *)(v35 + 16), __src, 0x60uLL);
  v36 = v67;
  *(_QWORD *)(v35 + 112) = v67;
  sub_100055120(v26, v35 + v31, &qword_1000D1660);
  v73 = *(_QWORD *)(v73 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v73)(v35 + v33, v28, v29);
  v37 = (uint64_t *)(v35 + v34);
  v38 = v72;
  v39 = v62;
  *v37 = v72;
  v37[1] = v39;
  sub_100019F6C(v38, v39);
  v40 = v36;
  v41 = sub_10000738C(&qword_1000D2138);
  sub_1000610A0(&qword_1000D21D8, &qword_1000D21C0);
  v42 = v65;
  v43 = v60;
  Publisher.map<A>(_:)(sub_10005FA44, v35, v65, v41);
  swift_release(v35);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v43, v42);
  sub_10005F2E8(v74, v26);
  sub_1000095FC(v77, (uint64_t)__src);
  v44 = v28;
  v45 = v29;
  v58(v28, v76, v29);
  sub_10000AE14(v69, (uint64_t)v79);
  v46 = (v30 + 32) & ~v30;
  v47 = (v75 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v32 + v47 + 96) & ~v32;
  v49 = (v59 + v48) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject(&unk_1000C61A8, v49 + 40, v63);
  v51 = v72;
  *(_QWORD *)(v50 + 16) = v72;
  *(_QWORD *)(v50 + 24) = v39;
  sub_100055120(v26, v50 + v46, &qword_1000D1660);
  memcpy((void *)(v50 + v47), __src, 0x60uLL);
  ((void (*)(uint64_t, char *, uint64_t))v73)(v50 + v48, v44, v45);
  sub_100009DDC(v79, v50 + v49);
  sub_100019F6C(v51, v39);
  v52 = sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_1000610A0(&qword_1000D21E0, &qword_1000D21C8);
  v53 = v68;
  v54 = v52;
  v55 = v78;
  Publisher.mapError<A>(_:)(sub_10005F378, v50, v68, v54);
  swift_release(v50);
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v55, v53);
}

uint64_t sub_10005938C@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;

  sub_10004115C(a2);
  sub_10005F2E8(a3, a7);
  v14 = (int *)sub_10000738C(&qword_1000D2290);
  v15 = a7 + v14[7];
  v16 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a4, v16);
  *(_QWORD *)(a7 + v14[10]) = a1;
  *(_QWORD *)(a7 + v14[8]) = a2;
  v17 = (uint64_t *)(a7 + v14[9]);
  *v17 = a5;
  v17[1] = a6;
  v18 = a2;
  swift_bridgeObjectRetain(a1);
  return sub_100019F6C(a5, a6);
}

uint64_t sub_100059458@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;

  sub_10004115C(a2);
  sub_10005F2E8(a3, a7);
  v14 = (int *)sub_10000738C(&qword_1000D1CC8);
  v15 = a7 + v14[7];
  v16 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a4, v16);
  *(_QWORD *)(a7 + v14[10]) = a1;
  *(_QWORD *)(a7 + v14[8]) = a2;
  v17 = (uint64_t *)(a7 + v14[9]);
  *v17 = a5;
  v17[1] = a6;
  v18 = a2;
  swift_retain(a1);
  return sub_100019F6C(a5, a6);
}

uint64_t sub_100059524@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;

  sub_10004115C(a2);
  sub_10005F2E8(a3, a7);
  v14 = (int *)sub_10000738C(&qword_1000CFE40);
  v15 = a7 + v14[7];
  v16 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a4, v16);
  sub_100060DEC(a1, a7 + v14[10]);
  *(_QWORD *)(a7 + v14[8]) = a2;
  v17 = (uint64_t *)(a7 + v14[9]);
  *v17 = a5;
  v17[1] = a6;
  v18 = a2;
  return sub_100019F6C(a5, a6);
}

uint64_t sub_1000595F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unint64_t a9)
{
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  id v22;

  sub_10004115C(a4);
  sub_10005F2E8(a5, a8);
  v17 = (int *)sub_10000738C(&qword_1000CFDA8);
  v18 = a8 + v17[7];
  v19 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, a6, v19);
  v20 = (_QWORD *)(a8 + v17[10]);
  *v20 = a1;
  v20[1] = a2;
  v20[2] = a3;
  *(_QWORD *)(a8 + v17[8]) = a4;
  v21 = (uint64_t *)(a8 + v17[9]);
  *v21 = a7;
  v21[1] = a9;
  v22 = a4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  return sub_100019F6C(a7, a9);
}

uint64_t sub_1000596DC@<X0>(_QWORD *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;

  sub_10004115C(a2);
  sub_10005F2E8(a3, a7);
  v14 = (int *)sub_10000738C(&qword_1000D2040);
  v15 = a7 + v14[7];
  v16 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a4, v16);
  memcpy((void *)(a7 + v14[10]), a1, 0x108uLL);
  *(_QWORD *)(a7 + v14[8]) = a2;
  v17 = (uint64_t *)(a7 + v14[9]);
  *v17 = a5;
  v17[1] = a6;
  sub_100061578(a1);
  v18 = a2;
  return sub_100019F6C(a5, a6);
}

uint64_t sub_1000597B4@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;

  sub_10004115C(a2);
  sub_10005F2E8(a3, a7);
  v14 = (int *)sub_10000738C(&qword_1000D2138);
  v15 = a7 + v14[7];
  v16 = type metadata accessor for URLRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a4, v16);
  *(_QWORD *)(a7 + v14[10]) = a1;
  *(_QWORD *)(a7 + v14[8]) = a2;
  v17 = (uint64_t *)(a7 + v14[9]);
  *v17 = a5;
  v17[1] = a6;
  v18 = a2;
  swift_bridgeObjectRetain(a1);
  return sub_100019F6C(a5, a6);
}

void sub_100059884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[120];
  uint64_t v45;

  sub_10000A758();
  v4 = v0;
  v37 = v5;
  v36 = v6;
  v35 = sub_10000738C(&qword_1000D2008);
  sub_10000A680();
  __chkstk_darwin(v7);
  sub_10000A7E4();
  v39 = sub_10000738C(&qword_1000D2010);
  v38 = *(_QWORD *)(v39 - 8);
  sub_10000A680();
  __chkstk_darwin(v8);
  sub_100040030();
  v42 = sub_10000738C(&qword_1000D2018);
  v40 = *(_QWORD *)(v42 - 8);
  sub_10000A680();
  __chkstk_darwin(v9);
  sub_100024034();
  v43 = sub_10000738C(&qword_1000D2020);
  v41 = *(_QWORD *)(v43 - 8);
  sub_10000A680();
  __chkstk_darwin(v10);
  sub_10000CD48();
  v34 = v11;
  *(_QWORD *)v44 = *(_QWORD *)(*sub_1000073CC(v0 + 5, v0[8]) + 32);
  v12 = sub_10000738C((uint64_t *)&unk_1000D1690);
  v13 = sub_10000A82C();
  sub_1000610A0(&qword_1000CFD00, &qword_1000CFCF0);
  Publisher<>.setFailureType<A>(to:)(v12, v13, v12, v14, &protocol self-conformance witness table for Error);
  if (qword_1000CFAA8 != -1)
    swift_once(&qword_1000CFAA8, sub_10005CA98);
  *(_QWORD *)v44 = sub_10005CCBC();
  sub_1000073CC(v0 + 10, v0[13]);
  v45 = sub_100018E68();
  v15 = sub_1000639E0();
  v16 = sub_100063AEC();
  sub_1000610A0(&qword_1000D2030, &qword_1000D2008);
  v18 = v17;
  sub_1000610A0(&qword_1000D2038, &qword_1000D2028);
  v20 = v19;
  sub_100063A08(&qword_1000D06A0);
  Publishers.Zip3.init(_:_:_:)(v3, v44, &v45, v35, v15, v16, v18, v20, v21);
  sub_10005DA94(v4, v44);
  v22 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C5F28, 152);
  v22[2] = v36;
  v22[3] = v37;
  memcpy(v22 + 4, v44, 0x78uLL);
  v23 = sub_10000A748((uint64_t)&unk_1000C5F50, 32);
  *(_QWORD *)(v23 + 16) = sub_10005DAEC;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = sub_10000A834();
  v25 = static Subscribers.Demand.unlimited.getter(v24);
  v26 = sub_10000738C(&qword_1000D2040);
  v27 = sub_100063AEC();
  sub_1000610A0(&qword_1000D2050, &qword_1000D2010);
  v29 = v28;
  sub_100063A08(&qword_1000D2058);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v25, sub_10005DAF8, v23, v39, v26, v27, v29, v30);
  swift_release(v23);
  sub_10000A798(v2, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
  KeyPath = swift_getKeyPath(&unk_1000A1C18);
  sub_1000610A0(&qword_1000D2060, &qword_1000D2018);
  Publisher.map<A>(_:)(KeyPath, v42, v32);
  sub_1000187F4();
  sub_100038DF8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
  sub_1000610A0(&qword_1000D2068, &qword_1000D2020);
  Publisher.eraseToAnyPublisher()(v43, v33);
  sub_100038DF8(v34, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
  sub_10000A668();
}

uint64_t sub_100059C98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;

  v39 = a2;
  v40 = a6;
  v38 = a3;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v13);
  v41 = 0;
  v42 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(v42);
  v41 = 0xD000000000000018;
  v42 = 0x80000001000A76A0;
  v15._countAndFlagsBits = a4;
  v15._object = a5;
  String.append(_:)(v15);
  v16._object = (void *)0x80000001000A76C0;
  v16._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v16);
  v17 = v42;
  v35 = v41;
  v36 = sub_10006823C();
  sub_100021804();
  v37 = a3;
  v18 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 39) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_1000C5F78, v22 + 8, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v23 + v20, v14, v10);
  v24 = (unint64_t *)(v23 + v21);
  *v24 = v35;
  v24[1] = v17;
  v25 = v23 + ((v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = v39;
  v26 = v40;
  *(_QWORD *)v25 = v39;
  *(_BYTE *)(v25 + 8) = 0;
  *(_QWORD *)(v23 + v22) = v36;
  v28 = sub_1000073CC(v26, v26[3]);
  v29 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = v37;
  v31 = swift_bridgeObjectRetain(v27);
  v32 = JSONDecoder.init()(v31);
  v33 = sub_10005EFA4((uint64_t)sub_10005DB04, v23, v18, v38, v32, (uint64_t)v28);
  swift_bridgeObjectRelease(v18);
  swift_release(v23);
  swift_release(v32);

  return v33;
}

uint64_t sub_100059EEC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_10000738C(&qword_1000D2070);
  result = a2(a1, *(_QWORD *)(a1 + *(int *)(v6 + 48)), *(_QWORD *)(a1 + *(int *)(v6 + 64)));
  *a3 = result;
  return result;
}

uint64_t sub_100059F44()
{
  return 1635017060;
}

uint64_t sub_100059F54@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  _BYTE v14[264];
  void *v15;

  v15 = a2;
  v4 = sub_10000738C(&qword_1000D2250);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = a1[3];
  v9 = a1[4];
  sub_1000073CC(a1, v8);
  v10 = sub_100060E30();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UTSApiAgent.UTSResponse.CodingKeys, &type metadata for UTSApiAgent.UTSResponse.CodingKeys, v10, v8, v9);
  if (!v2)
  {
    v11 = v15;
    sub_100060E6C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_1000C6640, v12, v4, &unk_1000C6640);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    memcpy(v11, v14, 0x108uLL);
  }
  return sub_100007618(a1);
}

uint64_t sub_10005A084(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;

  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F63536B636F6C63 && a2 == 0xEA00000000006572)
  {
    v8 = 0xEA00000000006572;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F63536B636F6C63, 0xEA00000000006572, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x616C507472616D73 && a2 == 0xED00006F666E4979)
  {
    swift_bridgeObjectRelease(0xED00006F666E4979);
    return 2;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x616C507472616D73, 0xED00006F666E4979, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10005A200()
{
  return 3;
}

uint64_t sub_10005A208(char a1)
{
  if (!a1)
    return 0x746E65746E6F63;
  if (a1 == 1)
    return 0x6F63536B636F6C63;
  return 0x616C507472616D73;
}

void sub_10005A270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[33];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[21];
  _BYTE v78[168];
  _BYTE v79[176];

  sub_100055A28();
  a22 = v25;
  a23 = v26;
  v28 = v27;
  v30 = v29;
  v31 = sub_10000738C(&qword_1000D2360);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_10000A7E4();
  v33 = v28[3];
  v34 = v28[4];
  sub_1000073CC(v28, v33);
  v35 = sub_100061434();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UTSApiAgent.SportingEventData.CodingKeys, &type metadata for UTSApiAgent.SportingEventData.CodingKeys, v35, v33, v34);
  if (v23)
  {
    sub_100007618(v28);
  }
  else
  {
    v36 = v32;
    a13 = 0;
    sub_100061470();
    v37 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_1000C6490, &a13, v31, &unk_1000C6490);
    sub_100063700(v77, v78);
    sub_100063700(v79, v78);
    LOBYTE(v52[0]) = 1;
    sub_100061298(v77);
    v38 = sub_1000614AC();
    sub_100063A3C((uint64_t)&unk_1000C63F8, (uint64_t)v52, v31, (uint64_t)&unk_1000C63F8, v38);
    v39 = v55;
    a12 = 2;
    v48 = v62;
    v49 = v61;
    v50 = v53;
    v51 = v54;
    v45 = v57;
    v46 = v56;
    v43 = v58;
    v44 = v59;
    v47 = v60;
    sub_10005F37C(v53, v54, v55, v56, v57, v58, v59, v60, v61, v62);
    v40 = sub_10006153C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1000C6378, &a12, v37, &unk_1000C6378, v40);
    sub_10004ECE0(v24, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
    v41 = v75;
    v42 = v76;
    sub_100063700(v52, v77);
    v52[21] = v50;
    v52[22] = v51;
    v52[23] = v39;
    v52[24] = v46;
    v52[25] = v45;
    v52[26] = v43;
    v52[27] = v44;
    v52[28] = v47;
    v52[29] = v49;
    v52[30] = v48;
    v52[31] = v41;
    v52[32] = v42;
    sub_100061578(v52);
    sub_1000614E8(v50, v51, v39, v46, v45, v43, v44, v47, v49, v48);
    sub_100063A00();
    sub_100007618(v28);
    sub_100063700(&v53, v79);
    v63 = v50;
    v64 = v51;
    v65 = v39;
    v66 = v46;
    v67 = v45;
    v68 = v43;
    v69 = v44;
    v70 = v47;
    v71 = v49;
    v72 = v48;
    v73 = v41;
    v74 = v42;
    sub_100061684(&v53);
    memcpy(v30, v52, 0x108uLL);
  }
  sub_100055A00();
}

uint64_t sub_10005A5EC(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x74756F68636E7570 && a2 == 0xEB000000006C7255)
  {
    swift_bridgeObjectRelease(0xEB000000006C7255);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74756F68636E7570, 0xEB000000006C7255, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10005A688()
{
  return 0x74756F68636E7570;
}

uint64_t sub_10005A6A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  char v18;

  if (a1 == 0x69746E756F437369 && a2 == 0xEE006E776F44676ELL)
  {
    v5 = 0xEE006E776F44676ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746E756F437369, 0xEE006E776F44676ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E657645736168 && a2 == 0xED00006465646E45)
  {
    v8 = 0xED00006465646E45;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E657645736168, 0xED00006465646E45, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x7954646F69726570 && a2 == 0xEA00000000006570)
  {
    v10 = 0xEA00000000006570;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954646F69726570, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x6F69726550627573 && a2 == 0xED00006570795464)
  {
    v12 = 0xED00006570795464;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69726550627573, 0xED00006570795464, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6156646F69726570 && a2 == 0xEB0000000065756CLL)
  {
    v14 = 0xEB0000000065756CLL;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6156646F69726570, 0xEB0000000065756CLL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x7365726F6373 && a2 == 0xE600000000000000)
  {
    v16 = 0xE600000000000000;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365726F6373, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5;
  }
  if (a1 == 0x6D69546B636F6C63 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 6;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D69546B636F6C63, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_10005AA08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005AA48 + 4 * byte_1000A1B80[a1]))(0x69746E756F437369, 0xEE006E776F44676ELL);
}

uint64_t sub_10005AA48()
{
  return 0x746E657645736168;
}

uint64_t sub_10005AA6C()
{
  return 0x7954646F69726570;
}

uint64_t sub_10005AA88()
{
  return 0x6F69726550627573;
}

uint64_t sub_10005AAAC()
{
  return 0x6156646F69726570;
}

uint64_t sub_10005AACC()
{
  return 0x7365726F6373;
}

uint64_t sub_10005AAE0()
{
  return 0x6D69546B636F6C63;
}

void sub_10005AAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  sub_100055A28();
  a26 = v29;
  a27 = v30;
  v32 = v31;
  v34 = v33;
  v35 = sub_10000738C(&qword_1000D2300);
  sub_10006375C();
  __chkstk_darwin(v36);
  v38 = (char *)&v59 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000073CC(v32, v32[3]);
  v39 = sub_100061144();
  sub_100055B74((uint64_t)&type metadata for UTSApiAgent.ClockScore.CodingKeys, (uint64_t)&type metadata for UTSApiAgent.ClockScore.CodingKeys, v39);
  if (v27)
  {
    sub_100055A98();
  }
  else
  {
    a17 = 0;
    v40 = sub_100063880((uint64_t)&a17);
    a16 = 1;
    v41 = sub_100063880((uint64_t)&a16);
    a15 = 2;
    v62 = sub_100063644((uint64_t)&a15);
    v63 = v41;
    a14 = 3;
    v43 = v42;
    sub_100055AA0(v62, v42);
    v44 = sub_100063644((uint64_t)&a14);
    v65 = v43;
    v61 = v44;
    a13 = 4;
    v46 = v45;
    sub_100055AA0(v44, v45);
    v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a13, v35);
    v64 = v46;
    HIDWORD(v59) = v48;
    v60 = v47;
    v49 = sub_10000738C(&qword_1000D2310);
    a12 = 5;
    v50 = sub_100062E78(&qword_1000D2318, &qword_1000D2310);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v49, &a12, v35, v49, v50);
    v51 = v66;
    a11 = 6;
    sub_100055B00();
    v52 = sub_100063644((uint64_t)&a11);
    v54 = v53;
    v55 = *(void (**)(char *, uint64_t))(v28 + 8);
    v56 = v52;
    v55(v38, v35);
    sub_10000A834();
    sub_100055A98();
    sub_1000061E8();
    sub_100018D80();
    v57 = v64;
    sub_10004ED40();
    v58 = v65;
    swift_bridgeObjectRelease();
    *(_BYTE *)v34 = v40;
    *(_BYTE *)(v34 + 1) = v63;
    *(_QWORD *)(v34 + 8) = v62;
    *(_QWORD *)(v34 + 16) = v58;
    *(_QWORD *)(v34 + 24) = v61;
    *(_QWORD *)(v34 + 32) = v57;
    *(_QWORD *)(v34 + 40) = v60;
    *(_BYTE *)(v34 + 48) = BYTE4(v59) & 1;
    *(_QWORD *)(v34 + 56) = v51;
    *(_QWORD *)(v34 + 64) = v56;
    *(_QWORD *)(v34 + 72) = v54;
  }
  sub_100055A00();
}

uint64_t sub_10005ADE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t (*v5)(void);
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  sub_100055A28();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = sub_10000738C(v8);
  v20 = *(_QWORD *)(v9 - 8);
  sub_10000A680();
  __chkstk_darwin(v10);
  sub_10000A6E4();
  v11 = v7[3];
  v12 = v7[4];
  v13 = sub_1000073CC(v7, v11);
  v14 = v5();
  v15 = v3;
  v16 = v3;
  v17 = (uint64_t)v13;
  v18 = dispatch thunk of Decoder.container<A>(keyedBy:)(v15, v16, v14, v11, v12);
  if (!v0)
  {
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v18, v9);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v1, v9);
  }
  sub_100031AC4();
  return v17;
}

uint64_t sub_10005AEE4(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 0x6F676F4C6D616574 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F676F4C6D616574, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10005AF68()
{
  return 0x6F676F4C6D616574;
}

uint64_t sub_10005AF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_1000636A8();
  sub_1000637BC();
  v2 = sub_10000738C(&qword_1000D2470);
  sub_100055AD0();
  __chkstk_darwin(v3);
  sub_100063394();
  v4 = sub_1000626B0();
  sub_1000632E0((uint64_t)&type metadata for UTSApiAgent.Content.Images.CodingKeys, v5, v4);
  if (v1)
  {
    sub_100031AC4();
  }
  else
  {
    v6 = sub_1000626EC();
    sub_100063A3C((uint64_t)&unk_1000C6D38, v7, v2, (uint64_t)&unk_1000C6D38, v6);
    sub_100063368();
    v0 = v9;
    sub_100031AC4();
  }
  return v0;
}

uint64_t sub_10005B058(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  char v14;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169766572626261 && a2 == 0xEC0000006E6F6974)
  {
    v8 = 0xEC0000006E6F6974;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169766572626261, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL)
  {
    v10 = 0xEF726F6C6F43646ELL;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756F72676B636162, 0xEF726F6C6F43646ELL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x736567616D69 && a2 == 0xE600000000000000)
  {
    v12 = 0xE600000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736567616D69, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x656D6F487369 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 4;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656D6F487369, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10005B280(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005B2A8 + 4 * byte_1000A1B87[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10005B2A8()
{
  return 0x6169766572626261;
}

uint64_t sub_10005B2C8()
{
  return 0x756F72676B636162;
}

uint64_t sub_10005B2EC()
{
  return 0x736567616D69;
}

uint64_t sub_10005B300()
{
  return 0x656D6F487369;
}

void sub_10005B314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  sub_100055A28();
  a22 = v24;
  a23 = v25;
  v27 = v26;
  v29 = v28;
  v30 = sub_10000738C(&qword_1000D2458);
  sub_100055AD0();
  __chkstk_darwin(v31);
  sub_10000A7E4();
  sub_1000073CC(v27, v27[3]);
  v32 = sub_100062638();
  sub_100055B74((uint64_t)&type metadata for UTSApiAgent.Content.Competitor.CodingKeys, (uint64_t)&type metadata for UTSApiAgent.Content.Competitor.CodingKeys, v32);
  if (v23)
  {
    sub_100031AC4();
  }
  else
  {
    v33 = sub_100063728();
    v35 = KeyedDecodingContainer.decode(_:forKey:)(v33, v34);
    v37 = v36;
    v53 = v35;
    sub_100055AA0(v35, v36);
    v38 = sub_100063728();
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v38, v39);
    v54 = v41;
    v51 = v40;
    LOBYTE(v55) = 2;
    sub_100055AA0(v40, v41);
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v55, v30);
    a13 = 3;
    v43 = v42;
    v44 = sub_100062674();
    sub_100055B00();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1000C6CB8, &a13, v30, &unk_1000C6CB8, v44);
    v52 = v43;
    v45 = v55;
    LOBYTE(v55) = 4;
    v49 = v56;
    sub_10003C2D0(v45, v56);
    v46 = sub_100063728();
    v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v46, v47);
    sub_10000A7FC();
    sub_100018A3C();
    sub_100055B00();
    sub_10000A848();
    sub_10003C2D0(v45, v49);
    sub_100063A88();
    sub_10001883C();
    sub_100018D80();
    sub_10004ED40();
    sub_100031AC4();
    sub_10004ED40();
    sub_100018D80();
    sub_10001883C();
    sub_100063A88();
    *(_QWORD *)v29 = v53;
    *(_QWORD *)(v29 + 8) = v37;
    *(_QWORD *)(v29 + 16) = v51;
    *(_QWORD *)(v29 + 24) = v54;
    *(_QWORD *)(v29 + 32) = v50;
    *(_QWORD *)(v29 + 40) = v52;
    *(_QWORD *)(v29 + 48) = v45;
    *(_QWORD *)(v29 + 56) = v49;
    *(_BYTE *)(v29 + 64) = v48;
  }
  sub_100055A00();
}

uint64_t sub_10005B5CC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001000A7500)
  {
    swift_bridgeObjectRelease(0x80000001000A7500);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000A7500, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

unint64_t sub_10005B650()
{
  return 0xD000000000000014;
}

uint64_t sub_10005B66C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000636A8();
  sub_1000637BC();
  v2 = sub_10000738C(&qword_1000D2350);
  sub_100055AD0();
  __chkstk_darwin(v3);
  sub_100063394();
  v4 = sub_1000613F8();
  v6 = sub_1000632E0((uint64_t)&type metadata for UTSApiAgent.Content.EventTime.CodingKeys, v5, v4);
  if (!v1)
  {
    v0 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v6, v2);
    sub_100063368();
  }
  sub_100031AC4();
  return v0;
}

uint64_t sub_10005B734(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  unint64_t v18;
  unint64_t v20;
  unint64_t v22;
  unint64_t v24;
  char v26;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x54656D6147657270 && a2 == 0xEC000000656C7469)
  {
    v10 = 0xEC000000656C7469;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54656D6147657270, 0xEC000000656C7469, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 0x74695474726F6873 && a2 == 0xEA0000000000656CLL)
  {
    v12 = 0xEA0000000000656CLL;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74695474726F6873, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x6D6954746E657665 && a2 == 0xE900000000000065)
  {
    v14 = 0xE900000000000065;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6954746E657665, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x6D614E65756E6576 && a2 == 0xE900000000000065)
  {
    v16 = 0xE900000000000065;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E65756E6576, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5;
  }
  if (a1 == 0x64644165756E6576 && a2 == 0xE900000000000072)
  {
    v18 = 0xE900000000000072;
    goto LABEL_56;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64644165756E6576, 0xE900000000000072, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v18);
    return 6;
  }
  if (a1 == 0x644965756761656CLL && a2 == 0xE800000000000000)
  {
    v20 = 0xE800000000000000;
    goto LABEL_64;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644965756761656CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v20);
    return 7;
  }
  if (a1 == 0x644974726F7073 && a2 == 0xE700000000000000)
  {
    v22 = 0xE700000000000000;
    goto LABEL_72;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726F7073, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_72:
    swift_bridgeObjectRelease(v22);
    return 8;
  }
  if (a1 == 0x74697465706D6F63 && a2 == 0xEB0000000073726FLL)
  {
    v24 = 0xEB0000000073726FLL;
    goto LABEL_80;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74697465706D6F63, 0xEB0000000073726FLL, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_80:
    swift_bridgeObjectRelease(v24);
    return 9;
  }
  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 10;
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(7107189, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v26 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_10005BBA0()
{
  return 11;
}

void sub_10005BBA8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = a1;
  sub_100057818(a1);
  Hasher._combine(_:)(v1);
  sub_100018CA8();
  sub_100055B2C();
}

uint64_t sub_10005BBD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005BC00 + 4 * byte_1000A1B8C[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_10005BC00()
{
  return 0x656C746974;
}

uint64_t sub_10005BC14()
{
  return 0x54656D6147657270;
}

uint64_t sub_10005BC34()
{
  return 0x74695474726F6873;
}

uint64_t sub_10005BCD4()
{
  return 7107189;
}

uint64_t sub_10005BCE4()
{
  return 0x644974726F7073;
}

void sub_10005BCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[9];
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  int v100;
  __int16 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  sub_100055A28();
  a22 = v24;
  a23 = v25;
  v27 = v26;
  v29 = v28;
  v30 = sub_10000738C(&qword_1000D2320);
  __chkstk_darwin(v30);
  sub_10000A6E4();
  v31 = v27[3];
  v32 = v27[4];
  sub_1000073CC(v27, v31);
  v33 = sub_100061180();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UTSApiAgent.Content.CodingKeys, &type metadata for UTSApiAgent.Content.CodingKeys, v33, v31, v32);
  if (v23)
  {
    sub_100063A94();
  }
  else
  {
    v34 = v29;
    LOBYTE(v89) = 0;
    v35 = KeyedDecodingContainer.decode(_:forKey:)(&v89, v30);
    v37 = v36;
    LOBYTE(v89) = 1;
    sub_100055AA0(v35, v36);
    v73 = v37;
    v65 = sub_1000632F8();
    LOBYTE(v89) = 2;
    v39 = v38;
    sub_100055AA0(v65, v38);
    v72 = v39;
    v64 = sub_1000632F8();
    sub_10006392C(v40, 3);
    v41 = sub_1000632F8();
    v71 = v39;
    v43 = v42;
    v63 = v41;
    LOBYTE(v75[0]) = 4;
    v44 = sub_1000611BC();
    sub_10000A834();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&unk_1000C6538, v75, v30, &unk_1000C6538, v44);
    v70 = v43;
    v62 = v89;
    v61 = v90;
    v45 = BYTE1(v90);
    a13 = BYTE1(v90);
    LOBYTE(v89) = 5;
    v59 = BYTE1(v90);
    v60 = sub_1000632F8();
    sub_10006392C(v46, 6);
    v69 = v45;
    v58 = sub_1000632F8();
    LOBYTE(v89) = 7;
    v68 = v47;
    swift_bridgeObjectRetain(v47);
    v48 = sub_1000632F8();
    v67 = v49;
    v57 = v48;
    LOBYTE(v89) = 8;
    sub_100055AA0(v48, v49);
    v56 = sub_1000632F8();
    v51 = v50;
    v52 = sub_10000738C(&qword_1000D2338);
    LOBYTE(v75[0]) = 9;
    sub_1000611F8();
    v74 = v51;
    sub_10000A834();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v52, v75, v30, v52);
    a12 = 10;
    v66 = v89;
    swift_bridgeObjectRetain(v89);
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v30);
    v55 = v54;
    sub_1000632D0();
    v75[0] = v35;
    v75[1] = v73;
    v75[2] = v65;
    v75[3] = v72;
    v75[4] = v64;
    v75[5] = v71;
    v75[6] = v63;
    v75[7] = v70;
    v75[8] = v62;
    v76 = v61;
    v77 = v59;
    v78 = v60;
    v79 = v69;
    v80 = v58;
    v81 = v68;
    v82 = v57;
    v83 = v67;
    v84 = v56;
    v85 = v74;
    v86 = v66;
    v87 = v53;
    v88 = v55;
    sub_100061298(v75);
    sub_1000061E8();
    sub_100018D80();
    swift_bridgeObjectRelease();
    sub_10001883C();
    swift_bridgeObjectRelease();
    sub_1000637E4();
    sub_100018D80();
    sub_10001883C();
    sub_10004ED40();
    sub_100063A94();
    v89 = v35;
    v90 = v73;
    v91 = v65;
    v92 = v72;
    v93 = v64;
    v94 = v71;
    v95 = v63;
    v96 = v70;
    v97 = v62;
    v98 = v61;
    v99 = a13;
    v100 = a10;
    v101 = a11;
    v102 = v60;
    v103 = v69;
    v104 = v58;
    v105 = v68;
    v106 = v57;
    v107 = v67;
    v108 = v56;
    v109 = v74;
    v110 = v66;
    v111 = v53;
    v112 = v55;
    sub_100061348(&v89);
    sub_100063700(v34, v75);
  }
  sub_100055A00();
}

void sub_10005C35C(uint64_t a1)
{
  sub_10005E4B8(a1);
}

uint64_t sub_10005C378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005E444(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10005C3A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100060E30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C3C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100060E30();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10005C3F0@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[264];

  result = (void *)sub_100059F54(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x108uLL);
  return result;
}

uint64_t sub_10005C444()
{
  char *v0;

  return sub_10005A208(*v0);
}

uint64_t sub_10005C44C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005A084(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005C470@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10005A200();
  *a1 = result;
  return result;
}

uint64_t sub_10005C494(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061434();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C4BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061434();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005C4E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t __src[33];

  sub_10005A270(a1, a2, a3, a4, a5, a6, a7, a8, v11, __src[0], SWORD2(__src[0]), SBYTE6(__src[0]), SHIBYTE(__src[0]), __src[1], __src[2], __src[3], __src[4], __src[5], __src[6],
    __src[7],
    __src[8],
    __src[9],
    __src[10]);
  if (!v9)
    memcpy(a9, __src, 0x108uLL);
}

uint64_t sub_10005C538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005A5EC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10005C560(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061108();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C588(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061108();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C5B0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10005C734(a1);
}

void sub_10005C5DC()
{
  unsigned __int8 *v0;

  sub_10005BBA8(*v0);
}

uint64_t sub_10005C5F4()
{
  unsigned __int8 *v0;

  return sub_10005AA08(*v0);
}

uint64_t sub_10005C5FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005A6A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005C620(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061144();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C648(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061144();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005C670(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11[12];

  sub_10005AAFC(a1, a2, a3, a4, a5, a6, a7, a8, v11[0], v11[1], SBYTE1(v11[1]), SBYTE2(v11[1]), SBYTE3(v11[1]), SBYTE4(v11[1]), SBYTE5(v11[1]), SBYTE6(v11[1]), SHIBYTE(v11[1]), v11[2], v11[3],
    v11[4],
    v11[5],
    v11[6],
    v11[7],
    v11[8],
    v11[9],
    v11[10],
    v11[11]);
  if (!v9)
    memcpy(a9, v11, 0x50uLL);
}

uint64_t sub_10005C6B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062728();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C6E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062728();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C708@<X0>(uint64_t *a1@<X8>)
{
  return sub_10005C734(a1);
}

uint64_t sub_10005C734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10005ADE8();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_10005C76C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005AEE4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10005C794(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000626B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C7BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000626B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C7E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10005AF80();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_10005C80C()
{
  unsigned __int8 *v0;

  return sub_10005B280(*v0);
}

uint64_t sub_10005C814@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005B058(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005C838(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062638();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C860(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062638();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005C888(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t __src[11];

  sub_10005B314(a1, a2, a3, a4, a5, a6, a7, a8, v11, __src[0], SWORD2(__src[0]), SBYTE6(__src[0]), SHIBYTE(__src[0]), __src[1], __src[2], __src[3], __src[4], __src[5], __src[6],
    __src[7],
    __src[8],
    __src[9],
    __src[10]);
  if (!v9)
    memcpy(a9, __src, 0x41uLL);
}

uint64_t sub_10005C8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005B5CC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10005C8FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000613F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C924(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000613F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C94C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = sub_10005B66C();
  if (!v1)
  {
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 8) = v4 & 1;
  }
  return result;
}

void sub_10005C97C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(v1);
  sub_100018CA8();
  sub_100055B2C();
}

uint64_t sub_10005C9B0()
{
  unsigned __int8 *v0;

  return sub_10005BBD8(*v0);
}

uint64_t sub_10005C9B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005B734(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005C9DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_10005BBA0();
  *a1 = result;
  return result;
}

uint64_t sub_10005CA00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061180();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005CA28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061180();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005CA50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t __src[21];

  sub_10005BCFC(a1, a2, a3, a4, a5, a6, a7, a8, v11, __src[0], SWORD2(__src[0]), SBYTE6(__src[0]), SHIBYTE(__src[0]), __src[1], __src[2], __src[3], __src[4], __src[5], __src[6],
    __src[7],
    __src[8],
    __src[9],
    __src[10]);
  if (!v9)
    memcpy(a9, __src, 0xA8uLL);
}

uint64_t sub_10005CA98()
{
  uint64_t *v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v9[5];

  sub_10005CB84(v9);
  if (qword_1000CFA58 != -1)
    swift_once(&qword_1000CFA58, sub_100024D38);
  v0 = (uint64_t *)qword_1000DDA30;
  v1 = sub_10000AE58((uint64_t)v9, v9[3]);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v9[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v5 + 16))(v4, v2);
  swift_retain_n(v0, 2);
  v6 = sub_10005EDC4(v4, v0);
  swift_release(v0);
  result = sub_100007618(v9);
  qword_1000DDA80 = (uint64_t)v6;
  return result;
}

uint64_t sub_10005CB84@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];

  v2 = sub_100043DEC();
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(NSURLSessionConfiguration), "defaultSessionConfiguration");
  v6 = objc_msgSend(objc_allocWithZone((Class)AMSURLSession), "initWithConfiguration:", v5);

  if (qword_1000CFB10 != -1)
    swift_once(&qword_1000CFB10, sub_1000947D0);
  v7 = qword_1000DDB78;
  v11[3] = type metadata accessor for SportsPerformanceMeasurement(0);
  v11[4] = &off_1000C98C8;
  v11[0] = v7;
  a1[3] = (uint64_t)&type metadata for ApiAgent;
  a1[4] = (uint64_t)&off_1000C5168;
  v8 = swift_allocObject(&unk_1000C6090, 112, 7);
  v9 = (_QWORD *)(v8 + 16);
  *a1 = v8;
  swift_retain(v7);
  sub_1000219E0(v6, (uint64_t)v11, 0, v2, v4, v9);
  swift_bridgeObjectRelease(v4);

  return sub_100007618(v11);
}

uint64_t sub_10005CCBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = sub_10000738C(&qword_1000D2158);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100024034();
  v5 = sub_10000738C(&qword_1000D21E8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10000A6FC();
  v7 = *(_QWORD *)(v0 + 96);
  if (v7)
  {
    v14 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRetain(v7);
    sub_10000738C(&qword_1000D0490);
    Just.init(_:)(&v14);
    v8 = sub_10000738C((uint64_t *)&unk_1000D1690);
    Just.setFailureType<A>(to:)(v8, v3, v8, &protocol self-conformance witness table for Error);
    sub_100038DF8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    sub_1000610A0(&qword_1000D21F8, &qword_1000D21E8);
    v10 = Publisher.eraseToAnyPublisher()(v5, v9);
    sub_10000A798(v1, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  }
  else
  {
    sub_10005CE38();
    v14 = *(_QWORD *)(v0 + 104);
    v11 = sub_1000639E0();
    sub_1000610A0(&qword_1000D21F0, &qword_1000D20F8);
    return Publisher.eraseToAnyPublisher()(v11, v12);
  }
  return v10;
}

void sub_10005CE38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61[3];

  sub_10000A758();
  v4 = v0;
  sub_10000738C(&qword_1000D2100);
  sub_10000A680();
  __chkstk_darwin(v5);
  sub_10000CD48();
  v60 = v6;
  v49 = sub_10000738C(&qword_1000D2108);
  sub_10000A680();
  __chkstk_darwin(v7);
  sub_10000A6FC();
  v48 = sub_10000738C(&qword_1000D2008);
  sub_10000A680();
  __chkstk_darwin(v8);
  sub_10000A6E4();
  v50 = sub_10000738C(&qword_1000D2110);
  v52 = *(_QWORD *)(v50 - 8);
  sub_10000A680();
  __chkstk_darwin(v9);
  sub_100024034();
  v53 = sub_10000738C(&qword_1000D2118);
  v54 = *(_QWORD *)(v53 - 8);
  sub_10000A680();
  __chkstk_darwin(v10);
  sub_10000CD48();
  v47 = v11;
  v56 = sub_10000738C(&qword_1000D2120);
  v57 = *(_QWORD *)(v56 - 8);
  sub_10000A680();
  __chkstk_darwin(v12);
  sub_10000CD48();
  v51 = v13;
  v58 = sub_10000738C(&qword_1000D2128);
  v59 = *(_QWORD *)(v58 - 8);
  sub_10000A680();
  __chkstk_darwin(v14);
  sub_10000CD48();
  v55 = v15;
  v61[0] = *(id *)(*sub_1000073CC((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80)) + 32);
  sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_10000A82C();
  sub_100063AB0(&qword_1000CFD00, &qword_1000CFCF0);
  sub_100063848(v16, v17, v18, v16);
  v61[0] = *(id *)(*sub_1000073CC((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80)) + 40);
  sub_1000639E0();
  sub_100063AB0(&qword_1000CFDF8, &qword_1000CFDF0);
  sub_100063848(v19, v20, v21, v19);
  sub_1000610A0(&qword_1000D2030, &qword_1000D2008);
  v23 = v22;
  sub_1000610A0(&qword_1000D2130, &qword_1000D2108);
  Publishers.Zip.init(_:_:)(v3, v1, v48, v49, v23, v24);
  v25 = sub_10000A748((uint64_t)&unk_1000C60B8, 24);
  v26 = v4;
  swift_weakInit(v25 + 16);
  v27 = sub_10000A748((uint64_t)&unk_1000C60E0, 32);
  *(_QWORD *)(v27 + 16) = sub_10005F448;
  *(_QWORD *)(v27 + 24) = v25;
  v28 = static Subscribers.Demand.unlimited.getter(v27);
  v29 = sub_10000738C(&qword_1000D2138);
  v30 = sub_10000738C(&qword_1000D2140);
  sub_1000610A0(&qword_1000D2148, &qword_1000D2110);
  v32 = v31;
  sub_100063AB0(&qword_1000D2150, &qword_1000D2140);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v28, sub_10000A270, v27, v50, v29, v30, v32, v33);
  swift_release(v27);
  v34 = sub_10000A798(v2, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
  v35 = static Subscribers.Demand.unlimited.getter(v34);
  v36 = sub_10000A82C();
  sub_1000610A0(&qword_1000D2160, &qword_1000D2118);
  v38 = v37;
  sub_1000610A0(&qword_1000D2168, &qword_1000D2158);
  Publisher.flatMap<A>(maxPublishers:_:)(v35, sub_10005D900, 0, v53, v36, v38, v39);
  sub_10000A798(v47, *(uint64_t (**)(uint64_t, uint64_t))(v54 + 8));
  v40 = sub_10005F450();
  v61[0] = (id)static OS_dispatch_queue.main.getter(v40);
  v41 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  sub_10000964C(v60, 1, 1, v41);
  sub_1000610A0(&qword_1000D2170, &qword_1000D2120);
  v43 = v42;
  sub_10000A378(&qword_1000D2178, (uint64_t (*)(uint64_t))sub_10005F450);
  Publisher.receive<A>(on:options:)(v61, v60, v56, v40, v43, v44);
  sub_10000A47C(v60, &qword_1000D2100);

  sub_10000A798(v51, *(uint64_t (**)(uint64_t, uint64_t))(v57 + 8));
  v45 = sub_10000A748((uint64_t)&unk_1000C60B8, 24);
  swift_weakInit(v45 + 16);
  sub_1000610A0(&qword_1000D2180, &qword_1000D2128);
  v46 = Publisher.sink(receiveCompletion:receiveValue:)(nullsub_1, 0, sub_10005F48C, v45, v58);
  sub_1000187F4();
  sub_100038DF8(v55, *(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
  swift_beginAccess(v26 + 112, v61, 33, 0);
  AnyCancellable.store(in:)(v26 + 112);
  swift_endAccess(v61);
  swift_release(v46);
  sub_10000A668();
}

uint64_t sub_10005D398(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  NSString v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[32];

  v61 = a2;
  v62 = a3;
  v63 = a1;
  v5 = type metadata accessor for URL(0);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  __chkstk_darwin(v5);
  v64 = v6;
  v65 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000738C(&qword_1000D2188);
  __chkstk_darwin(v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000738C(&qword_1000D2190);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a4 + 16, v70, 0, 0);
  Strong = swift_weakLoadStrong(a4 + 16);
  if (Strong)
  {
    v19 = Strong;
    v20 = sub_10000738C(&qword_1000D0500);
    inited = swift_initStackObject(v20, &v68);
    *(_OWORD *)(inited + 16) = xmmword_1000A2E10;
    *(_QWORD *)(inited + 32) = 0x72656C6C6163;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    *(_QWORD *)(inited + 48) = 0x6B2D7374726F7073;
    *(_QWORD *)(inited + 56) = 0xEA00000000007469;
    *(_QWORD *)(inited + 64) = 25193;
    *(_QWORD *)(inited + 72) = 0xE200000000000000;
    *(_QWORD *)(inited + 80) = 1702195828;
    *(_QWORD *)(inited + 88) = 0xE400000000000000;
    *(_QWORD *)(inited + 96) = 7169648;
    *(_QWORD *)(inited + 104) = 0xE300000000000000;
    v22 = String._bridgeToObjectiveC()();
    v23 = (void *)MGGetStringAnswer();

    if (v23)
    {
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

    }
    else
    {
      v26 = 0xE700000000000000;
      v24 = 0x6E776F6E6B6E75;
    }
    *(_QWORD *)(inited + 112) = v24;
    *(_QWORD *)(inited + 120) = v26;
    *(_QWORD *)(inited + 128) = 0x6E6F69676572;
    *(_QWORD *)(inited + 136) = 0xE600000000000000;
    v32 = static Locale.current.getter();
    Locale.region.getter(v32);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v33 = type metadata accessor for Locale.Region(0);
    v34 = sub_100009658((uint64_t)v13, 1, v33);
    v60 = v19;
    if (v34 == 1)
    {
      sub_10000A47C((uint64_t)v13, &qword_1000D2188);
      v35 = 0;
      v36 = 0xE000000000000000;
    }
    else
    {
      v35 = Locale.Region.identifier.getter();
      v36 = v37;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v13, v33);
    }
    v38 = v63;
    v39 = v64;
    v41 = v61;
    v40 = v62;
    *(_QWORD *)(inited + 144) = v35;
    *(_QWORD *)(inited + 152) = v36;
    *(_QWORD *)(inited + 160) = 6841971;
    *(_QWORD *)(inited + 168) = 0xE300000000000000;
    *(_QWORD *)(inited + 176) = v41;
    *(_QWORD *)(inited + 184) = v40;
    *(_QWORD *)(inited + 192) = 118;
    *(_QWORD *)(inited + 200) = 0xE100000000000000;
    v69 = 74;
    swift_bridgeObjectRetain(v40);
    *(_QWORD *)(inited + 208) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)(inited + 216) = v42;
    v64 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String);
    v44 = v65;
    v43 = v66;
    v45 = v67;
    (*(void (**)(char *, void *, uint64_t))(v66 + 16))(v65, v38, v67);
    v63 = sub_10006823C();
    sub_100021804();
    v46 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for SportsMetricsKey);
    v47 = *(unsigned __int8 *)(v43 + 80);
    v48 = (v47 + 16) & ~v47;
    v49 = (v39 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
    v50 = (v49 + 39) & 0xFFFFFFFFFFFFFFF8;
    v51 = swift_allocObject(&unk_1000C6108, v50 + 8, v47 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v51 + v48, v44, v45);
    v52 = (_QWORD *)(v51 + v49);
    *v52 = 0xD000000000000016;
    v52[1] = 0x80000001000A76E0;
    v53 = v51 + ((v49 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)v53 = v64;
    *(_BYTE *)(v53 + 8) = 0;
    *(_QWORD *)(v51 + v50) = v63;
    v54 = v60;
    v55 = sub_1000073CC((_QWORD *)(v60 + 16), *(_QWORD *)(v60 + 40));
    v56 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    v57 = JSONDecoder.init()();
    v31 = sub_10005F5A8((uint64_t)sub_10005DB04, v51, v46, 0, v57, (uint64_t)v55);
    swift_bridgeObjectRelease(v46);
    swift_release(v51);
    swift_release(v57);
    swift_release(v54);
  }
  else
  {
    v27 = objc_allocWithZone((Class)NSError);
    v69 = (uint64_t)sub_100027D60(0xD000000000000011, 0x80000001000A5730, 0, 0);
    v28 = sub_10000738C(&qword_1000D2138);
    v29 = sub_10000738C((uint64_t *)&unk_1000D1690);
    Fail.init(error:)(&v69, v28, v29, &protocol self-conformance witness table for Error);
    sub_1000610A0(&qword_1000D2198, &qword_1000D2190);
    v31 = Publisher.eraseToAnyPublisher()(v14, v30);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return v31;
}

uint64_t sub_10005D900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(int *)(sub_10000738C(&qword_1000D2138) + 40);
  v3 = *(_QWORD *)(a1 + v2);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + v2);
  }
  else
  {
    v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String);
    v3 = 0;
  }
  v6 = v4;
  swift_bridgeObjectRetain(v3);
  sub_10000738C(&qword_1000D0490);
  return Just.init(_:)(&v6);
}

uint64_t sub_10005D994(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 96);
    *(_QWORD *)(result + 96) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v6);
    v7 = v2;
    PassthroughSubject.send(_:)(&v7);
    return swift_release(v5);
  }
  return result;
}

_QWORD *sub_10005DA18()
{
  _QWORD *v0;

  sub_100007618(v0 + 2);
  sub_100007618(v0 + 7);
  swift_bridgeObjectRelease();
  swift_release(v0[13]);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10005DA54()
{
  uint64_t v0;

  sub_10005DA18();
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for UTSHeadersApiAgent()
{
  return objc_opt_self(_TtC7sportsd18UTSHeadersApiAgent);
}

_OWORD *sub_10005DA94(_OWORD *a1, _OWORD *a2)
{
  sub_1000604E0(a2, a1);
  return a2;
}

uint64_t sub_10005DAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  sub_100007618((_QWORD *)(v0 + 32));
  v1 = sub_100063954();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10005DAEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_100059C98(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), (_QWORD *)(v3 + 32));
}

uint64_t sub_10005DAF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100059EEC(a1, *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v2 + 16), a2);
}

id sub_10005DB04()
{
  return sub_10005F538();
}

void sub_10005DB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000636A8();
  sub_1000637BC();
  v1 = sub_10000738C(&qword_1000D2538);
  sub_100055AD0();
  __chkstk_darwin(v2);
  sub_100063394();
  v3 = sub_100062E3C();
  sub_1000632E0((uint64_t)&unk_1000C7220, v4, v3);
  if (!v0)
  {
    v5 = sub_10000738C(&qword_1000D0490);
    v6 = sub_100062E78((unint64_t *)&qword_1000D1080, &qword_1000D0490);
    sub_100063A3C(v5, v7, v1, v5, v6);
    sub_100063368();
  }
  sub_100031AC4();
  sub_1000636F0();
  sub_100055A68();
}

void sub_10005DBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000636A8();
  v3 = v2;
  v4 = sub_10000738C(&qword_1000D2548);
  sub_100055AD0();
  __chkstk_darwin(v5);
  sub_100024034();
  sub_100063534();
  v6 = sub_100062ECC();
  sub_10006351C((uint64_t)&unk_1000C7188, v7, v6);
  if (v3)
    v8 = v3;
  else
    v8 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &type metadata for String);
  sub_100055B00();
  sub_100081A3C(v8);
  v10 = v9;
  sub_1000061E8();
  sub_10005DCD4(v10);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v4);
  sub_100018D80();
  sub_100055A68();
}

void sub_10005DCD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v2 = v1;
  v46 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v47 = (unint64_t)(v3 + 63) >> 6;
  v48 = v63;
  v45 = v47 - 1;
  v49 = a1;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  if (!v5)
    goto LABEL_6;
LABEL_4:
  v67 = (v5 - 1) & v5;
  v7 = __clz(__rbit64(v5)) | (v6 << 6);
LABEL_5:
  v8 = *(_QWORD *)(v49 + 56);
  v9 = (_QWORD *)(*(_QWORD *)(v49 + 48) + 16 * v7);
  v10 = v9[1];
  *(_QWORD *)&v62 = *v9;
  *((_QWORD *)&v62 + 1) = v10;
  sub_100018090(v8 + 32 * v7, (uint64_t)v48);
  swift_bridgeObjectRetain(v10);
  while (1)
  {
    sub_100055120((uint64_t)&v62, (uint64_t)&v64, &qword_1000D2558);
    v13 = v65;
    if (!v65)
    {
      swift_release(v49);
      return;
    }
    v51 = v6;
    v14 = v64;
    sub_100022CB8(&v66, &v62);
    sub_100018090((uint64_t)&v62, (uint64_t)&v58);
    if (swift_dynamicCast(&v56, &v58, (char *)&type metadata for Any + 8, &type metadata for String, 0))
    {
      v50 = v2;
      v15 = v56;
      v16 = v57;
      v52 = v14;
      v53 = v13;
      v54 = 0;
      LOBYTE(v55) = 1;
      v17 = sub_10000738C(&qword_1000D2548);
      KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v52, v17);
      v2 = v50;
      if (v50)
      {
        sub_100055AA8();
        sub_100007618(&v62);
        sub_100018A44();
LABEL_40:
        swift_release(v49);
        sub_100007618(&v58);
        return;
      }
      sub_100007618(&v62);
      sub_100018A44();
      sub_100055AA8();
      v6 = v51;
    }
    else
    {
      sub_100018A44();
      v18 = sub_10000738C(&qword_1000D1558);
      v19 = swift_dynamicCast(&v52, &v58, (char *)&type metadata for Any + 8, v18, 0);
      v6 = v51;
      if (!(_DWORD)v19)
      {
        sub_1000639CC(v19, v20, v21, v22, v23, v24, v25, v26, v44, v45, v46, v47, (uint64_t)v48, v49, v50, v51, v52, v53, v54,
          v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61,
          v62);
        goto LABEL_23;
      }
      v27 = sub_10005DCD4(v52);
      if (v2)
      {
        v36 = sub_100055AA8();
        sub_1000639CC(v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, (uint64_t)v48, v49, v50, v51, v52, v53, v54,
          v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61,
          v62);
        goto LABEL_40;
      }
      sub_1000639CC(v27, v28, v29, v30, v31, v32, v33, v34, v44, v45, v46, v47, (uint64_t)v48, v49, v50, v51, v52, v53, v54,
        v55,
        v56,
        v57,
        v58,
        v59,
        v60,
        v61,
        v62);
      sub_100055AA8();
    }
LABEL_23:
    sub_100007618(&v58);
    v5 = v67;
    if (v67)
      goto LABEL_4;
LABEL_6:
    v11 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v11 < v47)
    {
      v12 = *(_QWORD *)(v46 + 8 * v11);
      if (v12)
        goto LABEL_9;
      v6 += 2;
      if (v11 + 1 >= v47)
      {
        v6 = v11;
        goto LABEL_14;
      }
      v12 = *(_QWORD *)(v46 + 8 * v6);
      if (v12)
      {
        ++v11;
LABEL_9:
        v67 = (v12 - 1) & v12;
        v7 = __clz(__rbit64(v12)) + (v11 << 6);
        v6 = v11;
        goto LABEL_5;
      }
      if (v11 + 2 < v47)
        break;
    }
LABEL_14:
    v67 = 0;
    memset(v63, 0, sizeof(v63));
    v62 = 0u;
  }
  v12 = *(_QWORD *)(v46 + 8 * (v11 + 2));
  if (v12)
  {
    v11 += 2;
    goto LABEL_9;
  }
  v35 = v11 + 3;
  if (v11 + 3 >= v47)
  {
    v6 = v11 + 2;
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(v46 + 8 * v35);
  if (v12)
  {
    v11 += 3;
    goto LABEL_9;
  }
  while (1)
  {
    v11 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v11 >= v47)
    {
      v6 = v45;
      goto LABEL_14;
    }
    v12 = *(_QWORD *)(v46 + 8 * v11);
    ++v35;
    if (v12)
      goto LABEL_9;
  }
LABEL_42:
  __break(1u);
}

BOOL sub_10005E034(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C2BB0, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

uint64_t sub_10005E07C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001000A7720)
  {
    swift_bridgeObjectRelease(0x80000001000A7720);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000A7720, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

unint64_t sub_10005E100()
{
  return 0xD000000000000011;
}

void sub_10005E11C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1000636A8();
  sub_100063890();
  sub_10000738C(&qword_1000D2510);
  sub_100055AD0();
  __chkstk_darwin(v0);
  sub_100063534();
  v1 = sub_100062B6C();
  sub_10006351C((uint64_t)&type metadata for BaseMetadataObject.DataObject.ApplicationProps.CodingKeys, v2, v1);
  v3 = sub_100062BE4();
  sub_1000635A8(v3, v4);
  sub_100063594();
  sub_100055A68();
}

void sub_10005E1B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000636A8();
  sub_1000637BC();
  sub_10000738C(&qword_1000D24F8);
  sub_100055AD0();
  __chkstk_darwin(v1);
  sub_100063394();
  v2 = sub_100062B6C();
  sub_1000632E0((uint64_t)&type metadata for BaseMetadataObject.DataObject.ApplicationProps.CodingKeys, v3, v2);
  if (!v0)
  {
    sub_100062BA8();
    sub_100063504((uint64_t)&unk_1000C7108, v4);
    sub_100063368();
  }
  sub_100031AC4();
  sub_1000636F0();
  sub_100055A68();
}

uint64_t sub_10005E260(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001000A7700)
  {
    swift_bridgeObjectRelease(0x80000001000A7700);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000A7700, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

unint64_t sub_10005E2E4()
{
  return 0xD000000000000010;
}

void sub_10005E300()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1000636A8();
  sub_100063890();
  sub_10000738C(&qword_1000D2448);
  sub_100055AD0();
  __chkstk_darwin(v0);
  sub_100063534();
  v1 = sub_100062584();
  sub_10006351C((uint64_t)&type metadata for BaseMetadataObject.DataObject.CodingKeys, v2, v1);
  v3 = sub_1000625FC();
  sub_1000635A8(v3, v4);
  sub_100063594();
  sub_100055A68();
}

void sub_10005E398()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000636A8();
  sub_1000637BC();
  sub_10000738C(&qword_1000D2430);
  sub_100055AD0();
  __chkstk_darwin(v1);
  sub_100063394();
  v2 = sub_100062584();
  sub_1000632E0((uint64_t)&type metadata for BaseMetadataObject.DataObject.CodingKeys, v3, v2);
  if (!v0)
  {
    sub_1000625C0();
    sub_100063504((uint64_t)&unk_1000C6FF8, v4);
    sub_100063368();
  }
  sub_100031AC4();
  sub_1000636F0();
  sub_100055A68();
}

uint64_t sub_10005E444(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v5 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

void sub_10005E4B8(uint64_t a1)
{
  sub_100057818(a1);
  sub_100063AE0();
  sub_100018CA8();
  sub_100055B2C();
}

void sub_10005E4DC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1000636A8();
  sub_100063890();
  sub_10000738C(&qword_1000D22E0);
  sub_100055AD0();
  __chkstk_darwin(v0);
  sub_100063534();
  v1 = sub_100060F38();
  sub_10006351C((uint64_t)&type metadata for BaseMetadataObject.CodingKeys, v2, v1);
  v3 = sub_1000610CC();
  sub_1000635A8(v3, v4);
  sub_100063594();
  sub_100055A68();
}

void sub_10005E574()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000636A8();
  sub_1000637BC();
  sub_10000738C(&qword_1000D22A8);
  sub_100055AD0();
  __chkstk_darwin(v1);
  sub_100063394();
  v2 = sub_100060F38();
  sub_1000632E0((uint64_t)&type metadata for BaseMetadataObject.CodingKeys, v3, v2);
  if (!v0)
  {
    sub_100060F74();
    sub_100063504((uint64_t)&unk_1000C6BA8, v4);
    sub_100063368();
  }
  sub_100031AC4();
  sub_1000636F0();
  sub_100055A68();
}

BOOL sub_10005E62C@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_10005E034(*a1);
  *a2 = result;
  return result;
}

void sub_10005E660(_QWORD *a1@<X8>)
{
  *a1 = 0x746C7561666544;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_10005E67C()
{
  return 0x746C7561666544;
}

uint64_t sub_10005E694@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  uint64_t result;

  result = sub_10005E078(a1);
  *a2 = result != 0;
  return result;
}

uint64_t sub_10005E6C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062E3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E6E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062E3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005E710(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10005DB18();
  if (!v1)
    *a1 = v3;
}

void sub_10005E738()
{
  sub_10005DBF8();
}

uint64_t sub_10005E754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005E07C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10005E77C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062B6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E7A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062B6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005E7CC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10005E1B4();
  if (!v1)
    *a1 = v3;
}

void sub_10005E7F4()
{
  sub_10005E11C();
}

uint64_t sub_10005E810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005E260(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10005E838(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062584();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E860(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062584();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005E888(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10005E398();
  if (!v1)
    *a1 = v3;
}

void sub_10005E8B0()
{
  sub_10005E300();
}

void sub_10005E8C8()
{
  _QWORD v0[9];

  Hasher.init(_seed:)(v0);
  sub_100063AE0();
  sub_100018CA8();
  sub_100055B2C();
}

uint64_t sub_10005E8F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100060F38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E918(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100060F38();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005E940(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10005E574();
  if (!v1)
    *a1 = v3;
}

void sub_10005E968()
{
  sub_10005E4DC();
}

uint64_t sub_10005E98C()
{
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
}

uint64_t sub_10005E9D4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void sub_10005EA00(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  sub_10005E980();
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t sub_10005EA30()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_10005EA3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_10005E98C();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_10005EA68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062ECC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005EA90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062ECC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005EAB8@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return sub_10005938C(*a1, a2, a3, a4, a5, a6, a7);
}

void sub_10005EAC0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[12];
  _QWORD v24[6];

  sub_10000A758();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = sub_10000738C(&qword_1000D20D8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[3] = &type metadata for AMSApiRequest;
  v24[4] = &off_1000C41A0;
  v14 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C5FA0, 48);
  v24[0] = v14;
  v14[2] = v9;
  v14[3] = v7;
  v14[4] = v5;
  v14[5] = v3;
  sub_1000095FC(v1, (uint64_t)v23);
  sub_10000AE14((uint64_t)v24, (uint64_t)v22);
  v15 = sub_10000A748((uint64_t)&unk_1000C6068, 152);
  memcpy((void *)(v15 + 16), v23, 0x60uLL);
  sub_100009DDC(v22, v15 + 112);
  v16 = sub_10000738C(&qword_1000D20E0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = v3;
  swift_retain(v7);
  sub_10000A834();
  v18 = Future.init(_:)(sub_10005F3EC, v15);
  v23[0] = v18;
  v19 = sub_10000738C((uint64_t *)&unk_1000D1690);
  sub_1000610A0(&qword_1000D20E8, &qword_1000D20E0);
  Publisher.mapError<A>(_:)(sub_100042C48, 0, v16, v19);
  swift_release(v18);
  sub_1000610A0(&qword_1000D20F0, &qword_1000D20D8);
  Publisher.eraseToAnyPublisher()(v10, v20);
  sub_10000A798((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  sub_100007618(v24);
  sub_10000A668();
}

uint64_t sub_10005ECA0@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return sub_100059458(*a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10005ECA8@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return sub_1000595F0(*a1, a1[1], a1[2], a2, a3, a4, a5, a7, a6);
}

_QWORD *sub_10005ECEC(const void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;
  __int128 v12;
  ValueMetadata *v13;
  _UNKNOWN **v14;

  v13 = &type metadata for ApiAgent;
  v14 = &off_1000C5168;
  *(_QWORD *)&v12 = swift_allocObject(&unk_1000C6090, 112, 7);
  memcpy((void *)(v12 + 16), a1, 0x60uLL);
  v10 = type metadata accessor for BagProvider();
  v11 = &off_1000C42F8;
  *(_QWORD *)&v9 = a2;
  a3[12] = 0;
  v6 = sub_10000738C(&qword_1000D20F8);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  a3[13] = PassthroughSubject.init()(v7);
  a3[14] = &_swiftEmptySetSingleton;
  sub_100009DDC(&v12, (uint64_t)(a3 + 2));
  sub_100009DDC(&v9, (uint64_t)(a3 + 7));
  return a3;
}

_QWORD *sub_10005EDC4(const void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  ValueWitnessTable *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v20[5];
  _QWORD v21[5];

  v4 = *a2;
  v21[3] = &type metadata for ApiAgent;
  v21[4] = &off_1000C5168;
  v21[0] = swift_allocObject(&unk_1000C6090, 112, 7);
  memcpy((void *)(v21[0] + 16), a1, 0x60uLL);
  v20[3] = v4;
  v20[4] = &off_1000C42F8;
  v20[0] = a2;
  v5 = type metadata accessor for UTSHeadersApiAgent();
  v6 = (_QWORD *)swift_allocObject(v5, 120, 7);
  v7 = sub_10000AE58((uint64_t)v21, (uint64_t)&type metadata for ApiAgent);
  __chkstk_darwin(v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(uint64_t, uint64_t))v10->initializeWithCopy)((uint64_t)v9, v11);
  v12 = sub_10000AE58((uint64_t)v20, v4);
  v13 = __chkstk_darwin(v12);
  v15 = (_QWORD *)((char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0) + 80);
  (*(void (**)(uint64_t *, __n128))(v16 + 16))(v15, v13);
  v17 = sub_10005ECEC(v9, *v15, v6);
  sub_100007618(v20);
  sub_100007618(v21);
  return v17;
}

uint64_t sub_10005EF1C@<X0>(void *__src@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  _QWORD __dst[33];

  memcpy(__dst, __src, sizeof(__dst));
  return sub_1000596DC(__dst, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10005EFA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33[2];
  _BYTE __src[96];
  uint64_t v35;
  _QWORD v36[6];

  v12 = sub_10000738C(&qword_1000D2078);
  v32 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[3] = &type metadata for AMSApiRequest;
  v36[4] = &off_1000C41A0;
  v15 = (_QWORD *)swift_allocObject(&unk_1000C5FA0, 48, 7);
  v36[0] = v15;
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10005EAC0();
  v35 = v17;
  sub_1000095FC(a6, (uint64_t)__src);
  sub_10000AE14((uint64_t)v36, (uint64_t)v33);
  v18 = swift_allocObject(&unk_1000C5FC8, 160, 7);
  *(_QWORD *)(v18 + 16) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_100009DDC(v33, v18 + 120);
  v19 = swift_allocObject(&unk_1000C5FF0, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005F260;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_retain(a5);
  v21 = static Subscribers.Demand.unlimited.getter(v20);
  v22 = sub_10000738C(&qword_1000CFD30);
  v23 = sub_10000738C(&qword_1000D2040);
  v24 = sub_10000738C(&qword_1000D2080);
  sub_1000610A0(&qword_1000CFD38, &qword_1000CFD30);
  v26 = v25;
  sub_1000610A0(&qword_1000D2088, &qword_1000D2080);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_10005F294, v19, v22, v23, v24, v26, v27);
  swift_release(v19);
  swift_release(v35);
  sub_1000610A0(&qword_1000D2090, &qword_1000D2078);
  v29 = Publisher.eraseToAnyPublisher()(v12, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  sub_100007618(v36);
  return v29;
}

uint64_t sub_10005F228()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005F260@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  return sub_1000587EC(a1, a2, a3, a4, a5, *(_QWORD *)(v6 + 16), v6 + 24, v6 + 120, a6);
}

uint64_t sub_10005F270()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005F294(char *a1)
{
  uint64_t v1;

  return sub_100009024(a1, *(uint64_t (**)(uint64_t, uint64_t, char *, _QWORD, char *))(v1 + 16));
}

unint64_t sub_10005F2AC()
{
  unint64_t result;

  result = qword_1000D20B8;
  if (!qword_1000D20B8)
  {
    result = swift_getWitnessTable(&unk_1000A1DCC, &type metadata for UTSApiAgent.UTSResponse);
    atomic_store(result, (unint64_t *)&qword_1000D20B8);
  }
  return result;
}

uint64_t sub_10005F2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D1660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F334()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_1000638C0();
  sub_10000738C(&qword_1000D1660);
  sub_100063378();
  v0 = (void *)sub_100063288();
  return sub_10005EF1C(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_10005F37C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a3 != 1)
  {
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    return swift_bridgeObjectRetain(a8);
  }
  return result;
}

uint64_t sub_10005F3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100063A58();
  sub_100063810();
  v0 = sub_100063954();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10005F3EC(void (*a1)(uint64_t *), void (*a2)(uint64_t *))
{
  uint64_t v2;

  sub_100041B3C(a1, a2, (id *)(v2 + 16), v2 + 112);
}

uint64_t sub_10005F3F8()
{
  uint64_t v0;

  sub_100063A58();
  sub_100063810();
  sub_100007618((_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10005F424()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005F448(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10005D398(a1, a2, a3, v3);
}

unint64_t sub_10005F450()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D05D8;
  if (!qword_1000D05D8)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000D05D8);
  }
  return result;
}

uint64_t sub_10005F48C(uint64_t *a1)
{
  uint64_t v1;

  return sub_10005D994(a1, v1);
}

uint64_t sub_10005F498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + ((v6 + 23) & 0xFFFFFFFFFFFFF8)));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

id sub_10005F538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for URL(0);
  sub_10006397C();
  return sub_100022000(v0 + v1, *(_QWORD *)(v0 + v2), *(_QWORD *)(v0 + v2 + 8), *(_QWORD *)(v0 + ((v2 + 23) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v0 + ((v2 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((v2 + 39) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10005F5A0@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return sub_1000597B4(*a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10005F5A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33[2];
  _BYTE __src[96];
  uint64_t v35;
  _QWORD v36[6];

  v12 = sub_10000738C(&qword_1000D21A0);
  v32 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[3] = &type metadata for AMSApiRequest;
  v36[4] = &off_1000C41A0;
  v15 = (_QWORD *)swift_allocObject(&unk_1000C5FA0, 48, 7);
  v36[0] = v15;
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  v16 = a4;
  swift_retain(a2);
  swift_bridgeObjectRetain(a3);
  sub_10005EAC0();
  v35 = v17;
  sub_1000095FC(a6, (uint64_t)__src);
  sub_10000AE14((uint64_t)v36, (uint64_t)v33);
  v18 = swift_allocObject(&unk_1000C6130, 160, 7);
  *(_QWORD *)(v18 + 16) = a5;
  memcpy((void *)(v18 + 24), __src, 0x60uLL);
  sub_100009DDC(v33, v18 + 120);
  v19 = swift_allocObject(&unk_1000C6158, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005F830;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_retain(a5);
  v21 = static Subscribers.Demand.unlimited.getter(v20);
  v22 = sub_10000738C(&qword_1000CFD30);
  v23 = sub_10000738C(&qword_1000D2138);
  v24 = sub_10000738C(&qword_1000D21A8);
  sub_1000610A0(&qword_1000CFD38, &qword_1000CFD30);
  v26 = v25;
  sub_1000610A0(&qword_1000D21B0, &qword_1000D21A8);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v21, sub_100063284, v19, v22, v23, v24, v26, v27);
  swift_release(v19);
  swift_release(v35);
  sub_1000610A0(&qword_1000D21B8, &qword_1000D21A0);
  v29 = Publisher.eraseToAnyPublisher()(v12, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  sub_100007618(v36);
  return v29;
}

uint64_t sub_10005F830@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  return sub_100058DBC(a1, a2, a3, a4, a5, *(_QWORD *)(v6 + 16), v6 + 24, v6 + 120, a6);
}

unint64_t sub_10005F840()
{
  unint64_t result;

  result = qword_1000D21D0;
  if (!qword_1000D21D0)
  {
    result = swift_getWitnessTable(&unk_1000A1DA4, &unk_1000C6278);
    atomic_store(result, (unint64_t *)&qword_1000D21D0);
  }
  return result;
}

uint64_t sub_10005F880()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v3 = *(_QWORD *)(sub_10000738C(&qword_1000D1660) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = sub_100043390();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  sub_100063A58();
  sub_100063810();
  sub_100007618((_QWORD *)(v0 + 72));

  v10 = sub_1000639E8();
  if (!sub_1000637A8(v10))
  {
    v16 = v5;
    v11 = type metadata accessor for Date(0);
    if (!sub_100038D0C(v1))
      sub_100038D24(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8));
    if (!sub_100038CE4(v2[5]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[8]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[9]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[10]))
      sub_100038CF8();
    sub_100038D18(v2[12]);
    if (!sub_100038CE4(v2[13]))
      sub_100038CF8();
    v12 = sub_100063994();
    if (!sub_100063828(v12))
      sub_10006385C();
    if (!sub_100038CE4(v2[15]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[16]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[17]))
      sub_100038CF8();
    sub_100038D18(v2[19]);
    sub_100038D18(v2[20]);
    sub_100038D18(v2[21]);
    sub_100038D18(v2[22]);
    sub_100038D18(v2[23]);
    v5 = v16;
  }
  v13 = (((v4 + 120) & ~v4) + v5 + v8) & ~v8;
  v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v13, v6);
  sub_1000096A0(*(_QWORD *)(v0 + v14), *(_QWORD *)(v0 + v14 + 8));
  return sub_100063554(v0, v14 + 16, v4 | v8 | 7);
}

uint64_t sub_10005FA44(uint64_t a1)
{
  return sub_100060FC0(a1, (uint64_t (*)(uint64_t))sub_10005F5A0);
}

uint64_t sub_10005FA54()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v3 = *(_QWORD *)(sub_10000738C(&qword_1000D1660) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = sub_100043390();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  sub_1000096A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v10 = sub_1000639E8();
  if (!sub_1000637A8(v10))
  {
    v19 = v5;
    v11 = type metadata accessor for Date(0);
    if (!sub_100038D0C(v1))
      sub_100038D24(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8));
    if (!sub_100038CE4(v2[5]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[8]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[9]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[10]))
      sub_100038CF8();
    sub_100038D18(v2[12]);
    if (!sub_100038CE4(v2[13]))
      sub_100038CF8();
    v12 = sub_100063994();
    if (!sub_100063828(v12))
      sub_10006385C();
    if (!sub_100038CE4(v2[15]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[16]))
      sub_100038CF8();
    if (!sub_100038CE4(v2[17]))
      sub_100038CF8();
    sub_100038D18(v2[19]);
    sub_100038D18(v2[20]);
    sub_100038D18(v2[21]);
    sub_100038D18(v2[22]);
    sub_100038D18(v2[23]);
    v5 = v19;
  }
  v13 = (v5 + ((v4 + 32) & ~v4) + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + v8 + 96) & ~v8;
  v15 = (v9 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = v4 | v8 | 7;
  v17 = (_QWORD *)(v0 + v13);

  sub_100007618(v17 + 1);
  swift_unknownObjectRelease(v17[6]);
  sub_100007618(v17 + 7);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v14, v6);
  sub_100007618((_QWORD *)(v0 + v15));
  return sub_100063554(v0, v15 + 40, v16);
}

unint64_t sub_10005FC34()
{
  unint64_t result;

  result = qword_1000D2210;
  if (!qword_1000D2210)
  {
    result = swift_getWitnessTable(&unk_1000A0A50, &unk_1000C4BC8);
    atomic_store(result, (unint64_t *)&qword_1000D2210);
  }
  return result;
}

uint64_t sub_10005FC74()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_1000638C0();
  sub_10000738C(&qword_1000D1660);
  sub_100063378();
  v0 = (uint64_t *)sub_100063288();
  return sub_10005ECA8(v0, v1, v2, v3, v4, v5, v6);
}

_QWORD *sub_10005FCB8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for BaseMetadataObject()
{
  sub_100031ABC();
}

_QWORD *sub_10005FCE4(_QWORD *a1)
{
  sub_10005FD44(a1);
  return a1;
}

void *initializeWithTake for UTSApiAgent.UTSResponse(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

ValueMetadata *type metadata accessor for UTSApiAgent.UTSResponse()
{
  return &type metadata for UTSApiAgent.UTSResponse;
}

void type metadata accessor for UTSApiAgent.SmartPlayInfo()
{
  sub_100031ABC();
}

uint64_t sub_10005FD44(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t sub_10005FD7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_10005FDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_10005FEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_10005FF38(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10005FF8C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

void type metadata accessor for UTSApiAgent.ClockScore()
{
  sub_100031ABC();
}

uint64_t sub_100060000(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[18]);
  return swift_bridgeObjectRelease(a1[20]);
}

uint64_t sub_100060068(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v13 = *(_QWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v13;
  *(_QWORD *)(a1 + 152) = v12;
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v14;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_100060154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 144);
  v22 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v23 = *(_QWORD *)(a2 + 160);
  v24 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

void *sub_1000602C8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t sub_1000602D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v16;
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 136));
  v18 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 160);
  v20 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v19;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1000603A4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 168))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000603E4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for UTSApiAgent.Content()
{
  sub_100031ABC();
}

uint64_t sub_100060458(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100060478(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

void type metadata accessor for UTSApiAgent.Content.EventTime()
{
  sub_100031ABC();
}

uint64_t sub_1000604B0(_QWORD *a1)
{
  sub_100007618(a1);
  sub_100007618(a1 + 5);
  return sub_100007618(a1 + 10);
}

_OWORD *sub_1000604E0(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

_QWORD *sub_10006055C(_QWORD *a1, _QWORD *a2)
{
  sub_100009F58(a1, a2);
  sub_100009F58(a1 + 5, a2 + 5);
  sub_100009F58(a1 + 10, a2 + 10);
  return a1;
}

void *initializeWithTake for SubscriptionRefreshActivityOperation(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x78uLL);
}

uint64_t sub_1000605A4(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  sub_100007618((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100007618((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_100007618((_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionRefreshActivityOperation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 120))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionRefreshActivityOperation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for UTSApiAgent()
{
  sub_100031ABC();
}

uint64_t _s7sportsd11UTSApiAgentV11UTSResponseVwxx_0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  v2 = a1[23];
  if (v2 != 1)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[25]);
    swift_bridgeObjectRelease(a1[28]);
    swift_bridgeObjectRelease(a1[30]);
  }
  result = a1[32];
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s7sportsd11UTSApiAgentV11UTSResponseVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v20 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v20;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v19 = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v20);
  sub_100018A3C();
  sub_100055B00();
  swift_bridgeObjectRetain(v8);
  sub_10000A848();
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  sub_1000185C8();
  sub_10001896C();
  if (v19 == 1)
  {
    memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x50uLL);
  }
  else
  {
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v19;
    v13 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = v13;
    sub_1000639B8();
    v14 = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = v14;
    sub_100063AF4(v15);
    sub_1000185C8();
    sub_10001896C();
    sub_100018A3C();
  }
  v16 = (_OWORD *)(a2 + 248);
  v17 = *(_QWORD *)(a2 + 256);
  if (v17 == 1)
  {
    *(_OWORD *)(a1 + 248) = *v16;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = *(_QWORD *)v16;
    *(_QWORD *)(a1 + 256) = v17;
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

uint64_t _s7sportsd11UTSApiAgentV11UTSResponseVwca_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = sub_100063A28(a1, (_QWORD *)a2);
  *(_QWORD *)(v2 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  sub_100018574();
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v2 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  sub_100018574();
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v2 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  sub_100018574();
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v2 + 56) = v7;
  swift_bridgeObjectRetain(v7);
  sub_100018574();
  v8 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(v2 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)(v2 + 64) = v8;
  *(_QWORD *)(v2 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v2 + 88) = v9;
  swift_bridgeObjectRetain(v9);
  sub_100018574();
  *(_QWORD *)(v2 + 96) = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v2 + 104) = v10;
  swift_bridgeObjectRetain(v10);
  sub_100018574();
  *(_QWORD *)(v2 + 112) = *(_QWORD *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(v2 + 120) = v11;
  swift_bridgeObjectRetain(v11);
  sub_100018574();
  *(_QWORD *)(v2 + 128) = *(_QWORD *)(a2 + 128);
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(v2 + 136) = v12;
  swift_bridgeObjectRetain(v12);
  sub_100018574();
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(v2 + 144) = v13;
  swift_bridgeObjectRetain(v13);
  sub_100018574();
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(a2 + 152);
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(v2 + 160) = v14;
  swift_bridgeObjectRetain(v14);
  sub_100018574();
  v15 = *(_QWORD *)(a2 + 184);
  if (*(_QWORD *)(v2 + 184) == 1)
  {
    if (v15 != 1)
    {
      sub_100063684();
      *(_QWORD *)(v2 + 192) = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(v2 + 200) = *(_QWORD *)(a2 + 200);
      sub_1000639A4();
      *(_QWORD *)(v2 + 224) = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(v2 + 232) = *(_QWORD *)(a2 + 232);
      sub_100063AF4(v16);
      sub_1000185C8();
      sub_10001896C();
      sub_100018A3C();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v15 == 1)
  {
    sub_10005FCE4((_QWORD *)(v2 + 168));
LABEL_6:
    sub_1000638CC();
    goto LABEL_8;
  }
  v17 = sub_100063684();
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 192) = *(_QWORD *)(a2 + 192);
  v18 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(v2 + 200) = v18;
  swift_bridgeObjectRetain(v18);
  sub_100018574();
  sub_1000639A4();
  v19 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(v2 + 224) = v19;
  swift_bridgeObjectRetain(v19);
  sub_100018574();
  *(_QWORD *)(v2 + 232) = *(_QWORD *)(a2 + 232);
  v20 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(v2 + 240) = v20;
  swift_bridgeObjectRetain(v20);
  sub_100018574();
LABEL_8:
  v21 = *(_QWORD *)(a2 + 256);
  if (*(_QWORD *)(v2 + 256) != 1)
  {
    if (v21 != 1)
    {
      sub_100063794();
      swift_bridgeObjectRelease();
      return v2;
    }
    sub_1000282EC(v2 + 248);
    goto LABEL_13;
  }
  if (v21 == 1)
  {
LABEL_13:
    *(_OWORD *)(v2 + 248) = *(_OWORD *)(a2 + 248);
    return v2;
  }
  sub_100063794();
  return v2;
}

uint64_t _s7sportsd11UTSApiAgentV11UTSResponseVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v12;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 184) == 1)
    goto LABEL_4;
  v13 = *(_QWORD *)(a2 + 184);
  if (v13 == 1)
  {
    sub_10005FCE4((_QWORD *)(a1 + 168));
LABEL_4:
    sub_1000638CC();
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v14;
  swift_bridgeObjectRelease();
  sub_1000639B8();
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v15;
  swift_bridgeObjectRelease();
LABEL_6:
  v16 = (_QWORD *)(a2 + 248);
  if (*(_QWORD *)(a1 + 256) != 1)
  {
    v17 = *(_QWORD *)(a2 + 256);
    if (v17 != 1)
    {
      *(_QWORD *)(a1 + 248) = *v16;
      *(_QWORD *)(a1 + 256) = v17;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000282EC(a1 + 248);
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)v16;
  return a1;
}

uint64_t _s7sportsd11UTSApiAgentV11UTSResponseVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 264))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100060D18(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 264) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 264) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for UTSApiAgent.SportingEventData()
{
  sub_100031ABC();
}

uint64_t sub_100060DA8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  sub_1000638C0();
  sub_10000738C(&qword_1000D1660);
  sub_100063378();
  v0 = sub_100063288();
  return sub_100059524(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t sub_100060DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s20RegistrationResponseVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100060E30()
{
  unint64_t result;

  result = qword_1000D2258;
  if (!qword_1000D2258)
  {
    result = swift_getWitnessTable(&unk_1000A25DC, &type metadata for UTSApiAgent.UTSResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2258);
  }
  return result;
}

unint64_t sub_100060E6C()
{
  unint64_t result;

  result = qword_1000D2260;
  if (!qword_1000D2260)
  {
    result = swift_getWitnessTable(&unk_1000A1CB4, &unk_1000C6640);
    atomic_store(result, (unint64_t *)&qword_1000D2260);
  }
  return result;
}

unint64_t sub_100060EA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2280;
  if (!qword_1000D2280)
  {
    v1 = sub_100007648(&qword_1000D2278);
    sub_10000A378(&qword_1000D2288, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEvent);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000D2280);
  }
  return result;
}

uint64_t sub_100060F28(uint64_t a1)
{
  return sub_100060FC0(a1, (uint64_t (*)(uint64_t))sub_10005EAB8);
}

unint64_t sub_100060F38()
{
  unint64_t result;

  result = qword_1000D22B0;
  if (!qword_1000D22B0)
  {
    result = swift_getWitnessTable(&unk_1000A258C, &type metadata for BaseMetadataObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D22B0);
  }
  return result;
}

unint64_t sub_100060F74()
{
  unint64_t result;

  result = qword_1000D22B8;
  if (!qword_1000D22B8)
  {
    result = swift_getWitnessTable(&unk_1000A2564, &unk_1000C6BA8);
    atomic_store(result, (unint64_t *)&qword_1000D22B8);
  }
  return result;
}

uint64_t sub_100060FB4(uint64_t a1)
{
  return sub_100060FC0(a1, (uint64_t (*)(uint64_t))sub_10005ECA0);
}

uint64_t sub_100060FC0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;

  sub_1000638C0();
  sub_10000738C(&qword_1000D1660);
  sub_100063378();
  v2 = sub_100063288();
  return a2(v2);
}

void sub_100061014()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000638C0();
  v3 = sub_10000738C(&qword_1000D1660);
  v4 = (*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  sub_100043390();
  sub_10006397C();
  sub_100041380(v0, *(_QWORD *)(v1 + 24), v1 + v4, v1 + v5, (_QWORD *)(v1 + v6), v2);
}

void sub_1000610A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100063A14(0, a2);
    atomic_store(sub_10000A850(v3), a1);
  }
  sub_100006200();
}

unint64_t sub_1000610CC()
{
  unint64_t result;

  result = qword_1000D22E8;
  if (!qword_1000D22E8)
  {
    result = swift_getWitnessTable(&unk_1000A253C, &unk_1000C6BA8);
    atomic_store(result, (unint64_t *)&qword_1000D22E8);
  }
  return result;
}

unint64_t sub_100061108()
{
  unint64_t result;

  result = qword_1000D22F8;
  if (!qword_1000D22F8)
  {
    result = swift_getWitnessTable(&unk_1000A24EC, &type metadata for UTSApiAgent.SmartPlayInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D22F8);
  }
  return result;
}

unint64_t sub_100061144()
{
  unint64_t result;

  result = qword_1000D2308;
  if (!qword_1000D2308)
  {
    result = swift_getWitnessTable(&unk_1000A249C, &type metadata for UTSApiAgent.ClockScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2308);
  }
  return result;
}

unint64_t sub_100061180()
{
  unint64_t result;

  result = qword_1000D2328;
  if (!qword_1000D2328)
  {
    result = swift_getWitnessTable(&unk_1000A244C, &type metadata for UTSApiAgent.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2328);
  }
  return result;
}

unint64_t sub_1000611BC()
{
  unint64_t result;

  result = qword_1000D2330;
  if (!qword_1000D2330)
  {
    result = swift_getWitnessTable(&unk_1000A1CDC, &unk_1000C6538);
    atomic_store(result, (unint64_t *)&qword_1000D2330);
  }
  return result;
}

unint64_t sub_1000611F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2340;
  if (!qword_1000D2340)
  {
    v1 = sub_100007648(&qword_1000D2338);
    sub_10006125C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000D2340);
  }
  return result;
}

unint64_t sub_10006125C()
{
  unint64_t result;

  result = qword_1000D2348;
  if (!qword_1000D2348)
  {
    result = swift_getWitnessTable(&unk_1000A2424, &unk_1000C6C28);
    atomic_store(result, (unint64_t *)&qword_1000D2348);
  }
  return result;
}

_QWORD *sub_100061298(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  v9 = a1[17];
  v10 = a1[18];
  swift_bridgeObjectRetain(a1[20]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

_QWORD *sub_100061348(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  v9 = a1[17];
  v10 = a1[20];
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

unint64_t sub_1000613F8()
{
  unint64_t result;

  result = qword_1000D2358;
  if (!qword_1000D2358)
  {
    result = swift_getWitnessTable(&unk_1000A23D4, &type metadata for UTSApiAgent.Content.EventTime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2358);
  }
  return result;
}

unint64_t sub_100061434()
{
  unint64_t result;

  result = qword_1000D2368;
  if (!qword_1000D2368)
  {
    result = swift_getWitnessTable(&unk_1000A2384, &type metadata for UTSApiAgent.SportingEventData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2368);
  }
  return result;
}

unint64_t sub_100061470()
{
  unint64_t result;

  result = qword_1000D2370;
  if (!qword_1000D2370)
  {
    result = swift_getWitnessTable(&unk_1000A1D04, &unk_1000C6490);
    atomic_store(result, (unint64_t *)&qword_1000D2370);
  }
  return result;
}

unint64_t sub_1000614AC()
{
  unint64_t result;

  result = qword_1000D2378;
  if (!qword_1000D2378)
  {
    result = swift_getWitnessTable(&unk_1000A1D2C, &unk_1000C63F8);
    atomic_store(result, (unint64_t *)&qword_1000D2378);
  }
  return result;
}

uint64_t sub_1000614E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a3 != 1)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a10);
  }
  return result;
}

unint64_t sub_10006153C()
{
  unint64_t result;

  result = qword_1000D2380;
  if (!qword_1000D2380)
  {
    result = swift_getWitnessTable(&unk_1000A1D54, &unk_1000C6378);
    atomic_store(result, (unint64_t *)&qword_1000D2380);
  }
  return result;
}

_QWORD *sub_100061578(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[13];
  v6 = a1[17];
  v7 = a1[18];
  v14 = a1[22];
  v15 = a1[21];
  v12 = a1[24];
  v13 = a1[23];
  v10 = a1[26];
  v11 = a1[25];
  v3 = a1[29];
  v8 = a1[28];
  v9 = a1[27];
  v4 = a1[30];
  v17 = a1[31];
  v16 = a1[32];
  swift_bridgeObjectRetain(a1[20]);
  sub_10000A834();
  sub_1000185C8();
  sub_10001896C();
  sub_100018A3C();
  sub_100055B00();
  swift_bridgeObjectRetain(v2);
  sub_10000A848();
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_10005F37C(v15, v14, v13, v12, v11, v10, v9, v8, v3, v4);
  sub_100023F64(v17, v16);
  return a1;
}

_QWORD *sub_100061684(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = a1[22];
  v12 = a1[21];
  v9 = a1[24];
  v10 = a1[23];
  v7 = a1[26];
  v8 = a1[25];
  v2 = a1[29];
  v5 = a1[28];
  v6 = a1[27];
  v3 = a1[30];
  v14 = a1[31];
  v13 = a1[32];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000614E8(v12, v11, v10, v9, v8, v7, v6, v5, v2, v3);
  sub_10003C2F0(v14, v13);
  return a1;
}

uint64_t storeEnumTagSinglePayload for UTSApiAgent.SportingEventData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000617F0 + 4 * byte_1000A1B9C[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100061824 + 4 * byte_1000A1B97[v4]))();
}

uint64_t sub_100061824(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006182C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100061834);
  return result;
}

uint64_t sub_100061840(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100061848);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10006184C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061854(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTSApiAgent.SportingEventData.CodingKeys()
{
  return &type metadata for UTSApiAgent.SportingEventData.CodingKeys;
}

ValueMetadata *type metadata accessor for UTSApiAgent.Content.EventTime.CodingKeys()
{
  return &type metadata for UTSApiAgent.Content.EventTime.CodingKeys;
}

uint64_t getEnumTagSinglePayload for UTSApiAgent.Content.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 10) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v5 = v6 - 11;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UTSApiAgent.Content.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100061958 + 4 * byte_1000A1BA6[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10006198C + 4 * byte_1000A1BA1[v4]))();
}

uint64_t sub_10006198C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061994(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006199CLL);
  return result;
}

uint64_t sub_1000619A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000619B0);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1000619B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000619BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTSApiAgent.Content.CodingKeys()
{
  return &type metadata for UTSApiAgent.Content.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UTSApiAgent.ClockScore.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100061A24 + 4 * byte_1000A1BB0[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100061A58 + 4 * byte_1000A1BAB[v4]))();
}

uint64_t sub_100061A58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061A60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100061A68);
  return result;
}

uint64_t sub_100061A74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100061A7CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100061A80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061A88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTSApiAgent.ClockScore.CodingKeys()
{
  return &type metadata for UTSApiAgent.ClockScore.CodingKeys;
}

ValueMetadata *type metadata accessor for UTSApiAgent.SmartPlayInfo.CodingKeys()
{
  return &type metadata for UTSApiAgent.SmartPlayInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for BaseMetadataObject.CodingKeys()
{
  return &type metadata for BaseMetadataObject.CodingKeys;
}

ValueMetadata *type metadata accessor for UTSApiAgent.UTSResponse.CodingKeys()
{
  return &type metadata for UTSApiAgent.UTSResponse.CodingKeys;
}

void type metadata accessor for BaseMetadataObject.DataObject()
{
  sub_100031ABC();
}

uint64_t sub_100061AE0(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  result = a1[7];
  if ((unint64_t)(result - 1) >= 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_100061B30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = (_OWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v8 == 1 || v8 == 2)
  {
    *(_OWORD *)(a1 + 48) = *v7;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)v7;
    *(_QWORD *)(a1 + 56) = v8;
    swift_bridgeObjectRetain(v8);
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t sub_100061BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  if (v7 == 2)
  {
    if (v8 != 1 && v8 != 2)
      goto LABEL_9;
    goto LABEL_12;
  }
  if (v8 == 2)
  {
    sub_100061D14(a1 + 48);
    goto LABEL_12;
  }
  if (v7 != 1)
  {
    if (v8 != 1)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v11 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    sub_1000282EC(a1 + 48);
    goto LABEL_12;
  }
  if (v8 == 1)
  {
LABEL_12:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_13;
  }
LABEL_9:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
LABEL_13:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t sub_100061D14(uint64_t a1)
{
  sub_100061E10(a1);
  return a1;
}

uint64_t sub_100061D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 != 2)
  {
    v9 = *(_QWORD *)(a2 + 56);
    if (v9 == 2)
    {
      sub_100061D14(a1 + 48);
    }
    else if (v8 != 1)
    {
      if (v9 != 1)
      {
        *(_QWORD *)(a1 + 48) = *v7;
        *(_QWORD *)(a1 + 56) = v9;
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      sub_1000282EC(a1 + 48);
    }
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
LABEL_8:
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

void type metadata accessor for UTSApiAgent.Content.Competitor()
{
  sub_100031ABC();
}

uint64_t sub_100061E10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

void sub_100061E24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  sub_100006200();
}

_QWORD *sub_100061E64(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  if (a1[1] != 1)
  {
    if (v4 != 1)
    {
      *a1 = *a2;
      v6 = a2[1];
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000282EC((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  v5 = a2[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_100061EF8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1[1] != 1)
  {
    v4 = a2[1];
    if (v4 != 1)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000282EC((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t sub_100061F54(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;
  int v4;
  BOOL v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    {
      v2 = *(_DWORD *)a1 + 2147483645;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v4 = v3 - 1;
      if (v4 < 0)
        v4 = -1;
      v5 = __OFSUB__(v4, 1);
      v2 = v4 - 1;
      if (v2 < 0 != v5)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100061FB0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = a2 - 2147483646;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for UTSApiAgent.Content.Images()
{
  sub_100031ABC();
}

void sub_100062008(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = sub_100063A28(a1, a2);
  *(_QWORD *)(v2 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease();
  sub_100006200();
}

void type metadata accessor for UTSApiAgent.Content.TemplateImage()
{
  sub_100031ABC();
}

unint64_t sub_100062048()
{
  unint64_t result;

  result = qword_1000D2388;
  if (!qword_1000D2388)
  {
    result = swift_getWitnessTable(&unk_1000A1F0C, &type metadata for UTSApiAgent.UTSResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2388);
  }
  return result;
}

unint64_t sub_100062088()
{
  unint64_t result;

  result = qword_1000D2390;
  if (!qword_1000D2390)
  {
    result = swift_getWitnessTable(&unk_1000A1FC4, &type metadata for BaseMetadataObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2390);
  }
  return result;
}

unint64_t sub_1000620C8()
{
  unint64_t result;

  result = qword_1000D2398;
  if (!qword_1000D2398)
  {
    result = swift_getWitnessTable(&unk_1000A207C, &type metadata for UTSApiAgent.SmartPlayInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2398);
  }
  return result;
}

unint64_t sub_100062108()
{
  unint64_t result;

  result = qword_1000D23A0;
  if (!qword_1000D23A0)
  {
    result = swift_getWitnessTable(&unk_1000A2134, &type metadata for UTSApiAgent.ClockScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23A0);
  }
  return result;
}

unint64_t sub_100062148()
{
  unint64_t result;

  result = qword_1000D23A8;
  if (!qword_1000D23A8)
  {
    result = swift_getWitnessTable(&unk_1000A21EC, &type metadata for UTSApiAgent.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23A8);
  }
  return result;
}

unint64_t sub_100062188()
{
  unint64_t result;

  result = qword_1000D23B0;
  if (!qword_1000D23B0)
  {
    result = swift_getWitnessTable(&unk_1000A22A4, &type metadata for UTSApiAgent.Content.EventTime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23B0);
  }
  return result;
}

unint64_t sub_1000621C8()
{
  unint64_t result;

  result = qword_1000D23B8;
  if (!qword_1000D23B8)
  {
    result = swift_getWitnessTable(&unk_1000A235C, &type metadata for UTSApiAgent.SportingEventData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23B8);
  }
  return result;
}

unint64_t sub_100062208()
{
  unint64_t result;

  result = qword_1000D23C0;
  if (!qword_1000D23C0)
  {
    result = swift_getWitnessTable(&unk_1000A22CC, &type metadata for UTSApiAgent.SportingEventData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23C0);
  }
  return result;
}

unint64_t sub_100062248()
{
  unint64_t result;

  result = qword_1000D23C8;
  if (!qword_1000D23C8)
  {
    result = swift_getWitnessTable(&unk_1000A22F4, &type metadata for UTSApiAgent.SportingEventData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23C8);
  }
  return result;
}

unint64_t sub_100062288()
{
  unint64_t result;

  result = qword_1000D23D0;
  if (!qword_1000D23D0)
  {
    result = swift_getWitnessTable(&unk_1000A2214, &type metadata for UTSApiAgent.Content.EventTime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23D0);
  }
  return result;
}

unint64_t sub_1000622C8()
{
  unint64_t result;

  result = qword_1000D23D8;
  if (!qword_1000D23D8)
  {
    result = swift_getWitnessTable(&unk_1000A223C, &type metadata for UTSApiAgent.Content.EventTime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23D8);
  }
  return result;
}

unint64_t sub_100062308()
{
  unint64_t result;

  result = qword_1000D23E0;
  if (!qword_1000D23E0)
  {
    result = swift_getWitnessTable(&unk_1000A215C, &type metadata for UTSApiAgent.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23E0);
  }
  return result;
}

unint64_t sub_100062348()
{
  unint64_t result;

  result = qword_1000D23E8;
  if (!qword_1000D23E8)
  {
    result = swift_getWitnessTable(&unk_1000A2184, &type metadata for UTSApiAgent.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23E8);
  }
  return result;
}

unint64_t sub_100062388()
{
  unint64_t result;

  result = qword_1000D23F0;
  if (!qword_1000D23F0)
  {
    result = swift_getWitnessTable(&unk_1000A20A4, &type metadata for UTSApiAgent.ClockScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23F0);
  }
  return result;
}

unint64_t sub_1000623C8()
{
  unint64_t result;

  result = qword_1000D23F8;
  if (!qword_1000D23F8)
  {
    result = swift_getWitnessTable(&unk_1000A20CC, &type metadata for UTSApiAgent.ClockScore.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D23F8);
  }
  return result;
}

unint64_t sub_100062408()
{
  unint64_t result;

  result = qword_1000D2400;
  if (!qword_1000D2400)
  {
    result = swift_getWitnessTable(&unk_1000A1FEC, &type metadata for UTSApiAgent.SmartPlayInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2400);
  }
  return result;
}

unint64_t sub_100062448()
{
  unint64_t result;

  result = qword_1000D2408;
  if (!qword_1000D2408)
  {
    result = swift_getWitnessTable(&unk_1000A2014, &type metadata for UTSApiAgent.SmartPlayInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2408);
  }
  return result;
}

unint64_t sub_100062488()
{
  unint64_t result;

  result = qword_1000D2410;
  if (!qword_1000D2410)
  {
    result = swift_getWitnessTable(&unk_1000A1F34, &type metadata for BaseMetadataObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2410);
  }
  return result;
}

unint64_t sub_1000624C8()
{
  unint64_t result;

  result = qword_1000D2418;
  if (!qword_1000D2418)
  {
    result = swift_getWitnessTable(&unk_1000A1F5C, &type metadata for BaseMetadataObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2418);
  }
  return result;
}

unint64_t sub_100062508()
{
  unint64_t result;

  result = qword_1000D2420;
  if (!qword_1000D2420)
  {
    result = swift_getWitnessTable(&unk_1000A1E7C, &type metadata for UTSApiAgent.UTSResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2420);
  }
  return result;
}

unint64_t sub_100062548()
{
  unint64_t result;

  result = qword_1000D2428;
  if (!qword_1000D2428)
  {
    result = swift_getWitnessTable(&unk_1000A1EA4, &type metadata for UTSApiAgent.UTSResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2428);
  }
  return result;
}

unint64_t sub_100062584()
{
  unint64_t result;

  result = qword_1000D2438;
  if (!qword_1000D2438)
  {
    result = swift_getWitnessTable(&unk_1000A2A64, &type metadata for BaseMetadataObject.DataObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2438);
  }
  return result;
}

unint64_t sub_1000625C0()
{
  unint64_t result;

  result = qword_1000D2440;
  if (!qword_1000D2440)
  {
    result = swift_getWitnessTable(&unk_1000A2A3C, &unk_1000C6FF8);
    atomic_store(result, (unint64_t *)&qword_1000D2440);
  }
  return result;
}

unint64_t sub_1000625FC()
{
  unint64_t result;

  result = qword_1000D2450;
  if (!qword_1000D2450)
  {
    result = swift_getWitnessTable(&unk_1000A2A14, &unk_1000C6FF8);
    atomic_store(result, (unint64_t *)&qword_1000D2450);
  }
  return result;
}

unint64_t sub_100062638()
{
  unint64_t result;

  result = qword_1000D2460;
  if (!qword_1000D2460)
  {
    result = swift_getWitnessTable(&unk_1000A29C4, &type metadata for UTSApiAgent.Content.Competitor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2460);
  }
  return result;
}

unint64_t sub_100062674()
{
  unint64_t result;

  result = qword_1000D2468;
  if (!qword_1000D2468)
  {
    result = swift_getWitnessTable(&unk_1000A1E54, &unk_1000C6CB8);
    atomic_store(result, (unint64_t *)&qword_1000D2468);
  }
  return result;
}

unint64_t sub_1000626B0()
{
  unint64_t result;

  result = qword_1000D2478;
  if (!qword_1000D2478)
  {
    result = swift_getWitnessTable(&unk_1000A2974, &type metadata for UTSApiAgent.Content.Images.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2478);
  }
  return result;
}

unint64_t sub_1000626EC()
{
  unint64_t result;

  result = qword_1000D2480;
  if (!qword_1000D2480)
  {
    result = swift_getWitnessTable(&unk_1000A1E2C, &unk_1000C6D38);
    atomic_store(result, (unint64_t *)&qword_1000D2480);
  }
  return result;
}

unint64_t sub_100062728()
{
  unint64_t result;

  result = qword_1000D2490;
  if (!qword_1000D2490)
  {
    result = swift_getWitnessTable(&unk_1000A2924, &type metadata for UTSApiAgent.Content.TemplateImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2490);
  }
  return result;
}

ValueMetadata *type metadata accessor for UTSApiAgent.Content.TemplateImage.CodingKeys()
{
  return &type metadata for UTSApiAgent.Content.TemplateImage.CodingKeys;
}

ValueMetadata *type metadata accessor for UTSApiAgent.Content.Images.CodingKeys()
{
  return &type metadata for UTSApiAgent.Content.Images.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UTSApiAgent.Content.Competitor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000627D0 + 4 * byte_1000A1BBA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100062804 + 4 * byte_1000A1BB5[v4]))();
}

uint64_t sub_100062804(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006280C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100062814);
  return result;
}

uint64_t sub_100062820(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100062828);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10006282C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100062834(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTSApiAgent.Content.Competitor.CodingKeys()
{
  return &type metadata for UTSApiAgent.Content.Competitor.CodingKeys;
}

ValueMetadata *type metadata accessor for BaseMetadataObject.DataObject.CodingKeys()
{
  return &type metadata for BaseMetadataObject.DataObject.CodingKeys;
}

void type metadata accessor for BaseMetadataObject.DataObject.ApplicationProps()
{
  sub_100031ABC();
}

unint64_t sub_100062870()
{
  unint64_t result;

  result = qword_1000D2498;
  if (!qword_1000D2498)
  {
    result = swift_getWitnessTable(&unk_1000A26D4, &type metadata for BaseMetadataObject.DataObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2498);
  }
  return result;
}

unint64_t sub_1000628B0()
{
  unint64_t result;

  result = qword_1000D24A0;
  if (!qword_1000D24A0)
  {
    result = swift_getWitnessTable(&unk_1000A278C, &type metadata for UTSApiAgent.Content.Competitor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24A0);
  }
  return result;
}

unint64_t sub_1000628F0()
{
  unint64_t result;

  result = qword_1000D24A8;
  if (!qword_1000D24A8)
  {
    result = swift_getWitnessTable(&unk_1000A2844, &type metadata for UTSApiAgent.Content.Images.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24A8);
  }
  return result;
}

unint64_t sub_100062930()
{
  unint64_t result;

  result = qword_1000D24B0;
  if (!qword_1000D24B0)
  {
    result = swift_getWitnessTable(&unk_1000A28FC, &type metadata for UTSApiAgent.Content.TemplateImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24B0);
  }
  return result;
}

unint64_t sub_100062970()
{
  unint64_t result;

  result = qword_1000D24B8;
  if (!qword_1000D24B8)
  {
    result = swift_getWitnessTable(&unk_1000A286C, &type metadata for UTSApiAgent.Content.TemplateImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24B8);
  }
  return result;
}

unint64_t sub_1000629B0()
{
  unint64_t result;

  result = qword_1000D24C0;
  if (!qword_1000D24C0)
  {
    result = swift_getWitnessTable(&unk_1000A2894, &type metadata for UTSApiAgent.Content.TemplateImage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24C0);
  }
  return result;
}

unint64_t sub_1000629F0()
{
  unint64_t result;

  result = qword_1000D24C8;
  if (!qword_1000D24C8)
  {
    result = swift_getWitnessTable(&unk_1000A27B4, &type metadata for UTSApiAgent.Content.Images.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24C8);
  }
  return result;
}

unint64_t sub_100062A30()
{
  unint64_t result;

  result = qword_1000D24D0;
  if (!qword_1000D24D0)
  {
    result = swift_getWitnessTable(&unk_1000A27DC, &type metadata for UTSApiAgent.Content.Images.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24D0);
  }
  return result;
}

unint64_t sub_100062A70()
{
  unint64_t result;

  result = qword_1000D24D8;
  if (!qword_1000D24D8)
  {
    result = swift_getWitnessTable(&unk_1000A26FC, &type metadata for UTSApiAgent.Content.Competitor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24D8);
  }
  return result;
}

unint64_t sub_100062AB0()
{
  unint64_t result;

  result = qword_1000D24E0;
  if (!qword_1000D24E0)
  {
    result = swift_getWitnessTable(&unk_1000A2724, &type metadata for UTSApiAgent.Content.Competitor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24E0);
  }
  return result;
}

unint64_t sub_100062AF0()
{
  unint64_t result;

  result = qword_1000D24E8;
  if (!qword_1000D24E8)
  {
    result = swift_getWitnessTable(&unk_1000A2644, &type metadata for BaseMetadataObject.DataObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24E8);
  }
  return result;
}

unint64_t sub_100062B30()
{
  unint64_t result;

  result = qword_1000D24F0;
  if (!qword_1000D24F0)
  {
    result = swift_getWitnessTable(&unk_1000A266C, &type metadata for BaseMetadataObject.DataObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D24F0);
  }
  return result;
}

unint64_t sub_100062B6C()
{
  unint64_t result;

  result = qword_1000D2500;
  if (!qword_1000D2500)
  {
    result = swift_getWitnessTable(&unk_1000A2BCC, &type metadata for BaseMetadataObject.DataObject.ApplicationProps.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2500);
  }
  return result;
}

unint64_t sub_100062BA8()
{
  unint64_t result;

  result = qword_1000D2508;
  if (!qword_1000D2508)
  {
    result = swift_getWitnessTable(&unk_1000A2BA4, &unk_1000C7108);
    atomic_store(result, (unint64_t *)&qword_1000D2508);
  }
  return result;
}

unint64_t sub_100062BE4()
{
  unint64_t result;

  result = qword_1000D2518;
  if (!qword_1000D2518)
  {
    result = swift_getWitnessTable(&unk_1000A2B7C, &unk_1000C7108);
    atomic_store(result, (unint64_t *)&qword_1000D2518);
  }
  return result;
}

ValueMetadata *type metadata accessor for BaseMetadataObject.DataObject.ApplicationProps.CodingKeys()
{
  return &type metadata for BaseMetadataObject.DataObject.ApplicationProps.CodingKeys;
}

uint64_t *sub_100062C30(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_100062C5C(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *sub_100062C64(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t *sub_100062C9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_100062CCC(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100062D20(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for BaseMetadataObject.DataObject.ApplicationProps.RequiredParams()
{
  sub_100031ABC();
}

unint64_t sub_100062D80()
{
  unint64_t result;

  result = qword_1000D2520;
  if (!qword_1000D2520)
  {
    result = swift_getWitnessTable(&unk_1000A2B54, &type metadata for BaseMetadataObject.DataObject.ApplicationProps.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2520);
  }
  return result;
}

unint64_t sub_100062DC0()
{
  unint64_t result;

  result = qword_1000D2528;
  if (!qword_1000D2528)
  {
    result = swift_getWitnessTable(&unk_1000A2AC4, &type metadata for BaseMetadataObject.DataObject.ApplicationProps.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2528);
  }
  return result;
}

unint64_t sub_100062E00()
{
  unint64_t result;

  result = qword_1000D2530;
  if (!qword_1000D2530)
  {
    result = swift_getWitnessTable(&unk_1000A2AEC, &type metadata for BaseMetadataObject.DataObject.ApplicationProps.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000D2530);
  }
  return result;
}

unint64_t sub_100062E3C()
{
  unint64_t result;

  result = qword_1000D2540;
  if (!qword_1000D2540)
  {
    result = swift_getWitnessTable(&unk_1000A2DBC, &unk_1000C7220);
    atomic_store(result, (unint64_t *)&qword_1000D2540);
  }
  return result;
}

uint64_t sub_100062E78(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100063A14(0, a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100062ECC()
{
  unint64_t result;

  result = qword_1000D2550;
  if (!qword_1000D2550)
  {
    result = swift_getWitnessTable(&unk_1000A2D6C, &unk_1000C7188);
    atomic_store(result, (unint64_t *)&qword_1000D2550);
  }
  return result;
}

uint64_t sub_100062F08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_100062F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  return a1;
}

__n128 sub_100062FA0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100062FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t sub_100062FF8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100063038(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for JSONCodingKeys()
{
  sub_100031ABC();
}

uint64_t _s7sportsd11UTSApiAgentV7ContentV9EventTimeV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000630C8 + 4 * byte_1000A1BBF[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000630E8 + 4 * byte_1000A1BC4[v4]))();
}

_BYTE *sub_1000630C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000630E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000630F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000630F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100063100(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100063108(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for BaseMetadataObject.DataObject.ApplicationProps.RequiredParams.CodingKeys()
{
  sub_100031ABC();
}

unint64_t sub_100063124()
{
  unint64_t result;

  result = qword_1000D2560;
  if (!qword_1000D2560)
  {
    result = swift_getWitnessTable(&unk_1000A2CF4, &unk_1000C7220);
    atomic_store(result, (unint64_t *)&qword_1000D2560);
  }
  return result;
}

unint64_t sub_100063164()
{
  unint64_t result;

  result = qword_1000D2568;
  if (!qword_1000D2568)
  {
    result = swift_getWitnessTable(&unk_1000A2D1C, &unk_1000C7188);
    atomic_store(result, (unint64_t *)&qword_1000D2568);
  }
  return result;
}

unint64_t sub_1000631A4()
{
  unint64_t result;

  result = qword_1000D2570;
  if (!qword_1000D2570)
  {
    result = swift_getWitnessTable(&unk_1000A2D44, &unk_1000C7188);
    atomic_store(result, (unint64_t *)&qword_1000D2570);
  }
  return result;
}

unint64_t sub_1000631E4()
{
  unint64_t result;

  result = qword_1000D2578;
  if (!qword_1000D2578)
  {
    result = swift_getWitnessTable(&unk_1000A2C2C, &unk_1000C7220);
    atomic_store(result, (unint64_t *)&qword_1000D2578);
  }
  return result;
}

unint64_t sub_100063224()
{
  unint64_t result;

  result = qword_1000D2580;
  if (!qword_1000D2580)
  {
    result = swift_getWitnessTable(&unk_1000A2C54, &unk_1000C7220);
    atomic_store(result, (unint64_t *)&qword_1000D2580);
  }
  return result;
}

uint64_t sub_100063288()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000632D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_1000632E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_1000632F8()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v1 - 256, v0);
}

void sub_10006330C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 368) = *(unsigned __int8 *)(*(_QWORD *)(v1 - 368) + 80) | (unint64_t)*(unsigned __int8 *)(v0 + 80) | 7;
  *(_QWORD *)(v1 - 352) += 7;
}

uint64_t sub_100063368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100063378()
{
  return type metadata accessor for URLRequest(0);
}

_QWORD *sub_100063394()
{
  _QWORD *v0;

  return sub_1000073CC(v0, v0[3]);
}

uint64_t sub_1000633B4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v6;

  *(_QWORD *)(v6 - 312) = a5;
  *(_QWORD *)(v6 - 240) = a4;
  *(_QWORD *)(v6 - 264) = a3;
  *(_QWORD *)(v6 - 328) = a2;
  *(_QWORD *)(v6 - 256) = a1;
  *(_QWORD *)(v6 - 296) = a6;
  return type metadata accessor for URLRequest(0);
}

uint64_t sub_1000633F0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 - 288) = v3;
  *(_QWORD *)(v4 - 184) = v3;
  *(_QWORD *)(v4 - 176) = v2;
  *(_QWORD *)(v4 - 280) = v2;
  return sub_100019F6C(v3, v2);
}

uint64_t sub_100063464@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v1, v2);
}

uint64_t sub_100063478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD, _QWORD);

  v2 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 - 272) + 16);
  *(_QWORD *)(v1 - 392) = v2;
  return v2(v0, *(_QWORD *)(v1 - 256), *(_QWORD *)(v1 - 360));
}

void sub_1000634C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 376) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000634E0()
{
  uint64_t v0;

  return sub_1000095FC(*(_QWORD *)(v0 - 240), v0 - 184);
}

uint64_t sub_1000634EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 - 272))(v0 + v1, v3, v2);
}

uint64_t sub_100063504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, v2, a1);
}

uint64_t sub_10006351C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10006352C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
}

_QWORD *sub_100063534()
{
  _QWORD *v0;

  return sub_1000073CC(v0, v0[3]);
}

uint64_t sub_100063554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_100063570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Publisher.mapError<A>(_:)(a1, v1, *(_QWORD *)(v3 - 320), v2);
}

uint64_t sub_100063594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000635A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, a2, v2);
}

uint64_t sub_1000635BC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
}

uint64_t sub_1000635C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return Publisher.map<A>(_:)(a1, v2, *(_QWORD *)(v3 - 344), v1);
}

uint64_t sub_1000635E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 272) + 32);
  *(_QWORD *)(v4 - 272) = v5;
  return v5(v3 + v0, v1, v2);
}

uint64_t sub_10006360C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 360) = result;
  v2 = *(_QWORD *)(result - 8);
  *(_QWORD *)(v1 - 272) = v2;
  *(_QWORD *)(v1 - 352) = *(_QWORD *)(v2 + 64);
  return result;
}

uint64_t sub_100063634()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
}

uint64_t sub_10006363C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 - 256))();
}

uint64_t sub_100063644(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_100063654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 - 280);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 - 288);
  *(_QWORD *)(a1 + 24) = v3;
  return v1;
}

uint64_t sub_100063678()
{
  uint64_t v0;

  return Just.init(_:)(v0 - 184);
}

uint64_t sub_100063684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  *(_BYTE *)(v0 + 168) = *(_BYTE *)(v1 + 168);
  *(_BYTE *)(v0 + 169) = *(_BYTE *)(v1 + 169);
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v1 + 176);
  result = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v0 + 184) = result;
  return result;
}

uint64_t sub_1000636BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(v1 + v0);
  v4 = *(_QWORD *)(v2 - 288);
  v5 = *(_QWORD *)(v2 - 280);
  *v3 = v4;
  v3[1] = v5;
  return sub_100019F6C(v4, v5);
}

uint64_t sub_1000636D8()
{
  uint64_t v0;

  return sub_10005F2E8(*(_QWORD *)(v0 - 264), *(_QWORD *)(v0 - 376));
}

uint64_t sub_1000636F0()
{
  uint64_t v0;

  return v0;
}

void *sub_100063700(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xA8uLL);
}

uint64_t sub_100063728()
{
  uint64_t v0;

  return v0 - 96;
}

void sub_10006373C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 384) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10006376C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
}

uint64_t sub_100063774()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t sub_100063794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 248) = *(_QWORD *)(v1 + 248);
  v2 = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v0 + 256) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000637A8(uint64_t a1)
{
  uint64_t v1;

  return sub_100009658(v1, 1, a1);
}

uint64_t sub_1000637C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(result - 8);
  *(_QWORD *)(v1 - 368) = v2;
  *(_QWORD *)(v1 - 248) = *(_QWORD *)(v2 + 64);
  return result;
}

uint64_t sub_1000637E4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
}

uint64_t sub_100063808()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
}

uint64_t sub_100063810()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 24));
  return swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
}

uint64_t sub_100063828(uint64_t a1)
{
  uint64_t v1;

  return sub_100009658(v1, 1, a1);
}

uint64_t sub_10006383C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_allocObject(a1, a2, *(_QWORD *)(v2 - 368));
}

uint64_t sub_100063848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  return Publisher<>.setFailureType<A>(to:)(v4, v5, v4, a4, v6);
}

uint64_t sub_10006385C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t sub_100063870()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10005F2E8(*(_QWORD *)(v1 - 264), v0);
}

uint64_t sub_100063880(uint64_t a1)
{
  uint64_t v1;

  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, v1);
}

uint64_t sub_1000638A0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100009DDC((__int128 *)(v4 - 224), v0 + v1);
  return sub_100019F6C(v3, v2);
}

void *sub_1000638CC()
{
  void *v0;
  const void *v1;

  return memcpy(v0, v1, 0x50uLL);
}

uint64_t sub_1000638DC@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;

  *(_QWORD *)(a1 - 256) = v1;
  return sub_100019F6C(v2, v1);
}

uint64_t sub_1000638EC()
{
  uint64_t v0;

  return sub_10000AE14(*(_QWORD *)(v0 - 304), v0 - 224);
}

uint64_t sub_1000638FC()
{
  uint64_t v0;

  return sub_10000AE14(*(_QWORD *)(v0 - 312), v0 - 224);
}

uint64_t sub_10006390C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 112) = *(_QWORD *)(v2 - 328);
  return v0;
}

uint64_t sub_100063924()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10006392C@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 256) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10006393C()
{
  return type metadata accessor for JSONDecoder(0);
}

uint64_t sub_100063944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  return sub_1000614E8(a1, a2, a3, a4, a5, v11, v12, *(_QWORD *)(v10 + 64), a9, a10);
}

uint64_t sub_100063954()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 72));
  sub_100007618((_QWORD *)(v0 + 112));
  return v0;
}

uint64_t sub_100063994()
{
  return type metadata accessor for URL(0);
}

void sub_1000639A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 208);
  *(_BYTE *)(v0 + 216) = *(_BYTE *)(v1 + 216);
  *(_QWORD *)(v0 + 208) = v2;
}

void sub_1000639B8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v1 + 208);
  *(_BYTE *)(v0 + 216) = *(_BYTE *)(v1 + 216);
}

uint64_t sub_1000639CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  return sub_100007618(&a27);
}

uint64_t sub_1000639D4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_1000639E0()
{
  uint64_t *v0;

  return sub_10000738C(v0);
}

uint64_t sub_1000639E8()
{
  return type metadata accessor for ApiRequestMetrics(0);
}

uint64_t sub_1000639F4()
{
  uint64_t v0;

  return sub_1000095FC(*(_QWORD *)(v0 - 248), v0 - 184);
}

_QWORD *sub_100063A00()
{
  uint64_t v0;

  return sub_100061348((_QWORD *)(v0 + 656));
}

void sub_100063A08(unint64_t *a1)
{
  uint64_t *v1;

  sub_1000610A0(a1, v1);
}

uint64_t sub_100063A14(uint64_t a1, uint64_t *a2)
{
  return sub_100007648(a2);
}

uint64_t sub_100063A20()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
}

uint64_t sub_100063A28(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  return a2[1];
}

uint64_t sub_100063A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t sub_100063A44()
{
  uint64_t v0;

  return v0;
}

void sub_100063A58()
{
  uint64_t v0;

}

void sub_100063A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 280) = v1;
  *(_QWORD *)(v2 - 184) = v1;
  *(_QWORD *)(v2 - 176) = v0;
}

uint64_t sub_100063A88()
{
  uint64_t v0;
  uint64_t v1;

  return sub_10003C2E0(v0, v1);
}

uint64_t sub_100063A94()
{
  uint64_t v0;

  return sub_100007618(*(_QWORD **)(v0 + 176));
}

void sub_100063A9C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 256) = a1;
  *(_QWORD *)(v2 - 256) = *(_QWORD *)(a1 + 64);
}

void sub_100063AB0(unint64_t *a1, uint64_t *a2)
{
  sub_1000610A0(a1, a2);
}

void sub_100063AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 - 264) = a5;
  *(_QWORD *)(v5 - 320) = a4;
}

void sub_100063AE0()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_100063AEC()
{
  uint64_t *v0;

  return sub_10000738C(v0);
}

uint64_t sub_100063AF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 240) = *(_QWORD *)(v2 + 240);
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_100063B00()
{
  _QWORD *v0;

  sub_1000073CC(v0 + 2, v0[5]);
  return dispatch thunk of ActivityAuthorization.areFrequentPushesEnabled(for:)(v0[7], v0[8]) & 1;
}

uint64_t sub_100063B38()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for ActivityCapUtility()
{
  return objc_opt_self(_TtC7sportsd18ActivityCapUtility);
}

uint64_t sub_100063B84(uint64_t a1, uint64_t a2, void (*a3)(uint64_t (*)(_QWORD), uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = String.utf8CString.getter(a1, a2);
  v5 = os_transaction_create(v4 + 32);
  swift_release(v4);
  v6 = swift_allocObject(&unk_1000C7310, 24, 7);
  *(_QWORD *)(v6 + 16) = v5;
  swift_unknownObjectRetain_n(v5, 2);
  a3(nullsub_1, v6);
  swift_unknownObjectRelease_n(v5, 2);
  return swift_release(v6);
}

uint64_t sub_100063C10()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100063C34(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v27[2];

  v10 = sub_10000A7C4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a1, v10, v13);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_1000C7338, v17 + 16, v15 | 7);
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = a5;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v16, v14, v10);
  v19 = (_QWORD *)(v18 + v17);
  *v19 = a2;
  v19[1] = a3;
  v20 = sub_10000738C(&qword_1000D26A0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = a4;
  v22 = a5;
  swift_bridgeObjectRetain(a3);
  v23 = Future.init(_:)(sub_10006400C, v18);
  v27[1] = v23;
  v24 = sub_100064070();
  v25 = Publisher.eraseToAnyPublisher()(v20, v24);
  swift_release(v23);
  return v25;
}

void sub_100063D90(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  Class isa;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v30 = a6;
  v31 = a4;
  v29 = a1;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URLRequest(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v14, a5, v11, v17);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v14, 0, 60.0);
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v21 = (_QWORD *)swift_allocObject(&unk_1000C7360, 64, 7);
  v21[2] = v29;
  v21[3] = a2;
  v22 = v31;
  v21[4] = v30;
  v21[5] = a7;
  v21[6] = a3;
  v21[7] = v22;
  aBlock[4] = sub_10006469C;
  v33 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000646C8;
  aBlock[3] = &unk_1000C7378;
  v23 = _Block_copy(aBlock);
  v24 = v33;
  swift_retain(a2);
  swift_bridgeObjectRetain(a7);
  v25 = a3;
  v26 = v22;
  swift_release(v24);
  v27 = objc_msgSend(v25, "downloadTaskWithRequest:completionHandler:", isa, v23);
  _Block_release(v23);

  objc_msgSend(v27, "resume");
}

uint64_t sub_100063F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10000A7C4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_10006400C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(sub_10000A7C4() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_100063D90(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), v2 + v6, *v7, v7[1]);
}

unint64_t sub_100064070()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D26A8;
  if (!qword_1000D26A8)
  {
    v1 = sub_100007648(&qword_1000D26A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for Future<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000D26A8);
  }
  return result;
}

uint64_t sub_1000640B4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  NSString v37;
  unsigned __int8 v38;
  NSURL *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  id v43;
  id v44;
  NSURL *v45;
  void *v46;
  void *v47;
  NSURL *v48;
  void *v49;
  void *v50;
  unsigned int v51;
  id v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  void *v55;
  void *v56;
  NSURL *v57;
  void *v58;
  void *v59;
  unsigned __int8 v60;
  id v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD *);
  uint64_t v67;
  _QWORD v68[3];
  _BYTE v69[16];
  id v70;

  v65 = a5;
  v66 = a4;
  v64 = sub_10000738C(&qword_1000D26B0);
  __chkstk_darwin(v64);
  v14 = (uint64_t *)((char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  __chkstk_darwin(v15);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v24 = (char *)&v63 - v23;
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v25 = type metadata accessor for Logger(0);
    sub_1000096EC(v25, (uint64_t)qword_1000DDAB8);
    swift_errorRetain(a3);
    v26 = swift_errorRetain(a3);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (void *)swift_slowAlloc(32, -1);
      v70 = v30;
      *(_DWORD *)v29 = 136315138;
      swift_getErrorValue(a3, v69, v68);
      v31 = Error.localizedDescription.getter(v68[1], v68[2]);
      v33 = v32;
      sub_100014B44(v31, v32, (uint64_t *)&v70);
      v67 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Could not download image. %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    *v14 = a3;
    swift_storeEnumTagMultiPayload(v14, v64, 1);
    swift_errorRetain(a3);
    v66(v14);
    swift_errorRelease(a3);
    return sub_100027964((uint64_t)v14, &qword_1000D26B0);
  }
  sub_1000647EC(a1, (uint64_t)v17);
  if (sub_100009658((uint64_t)v17, 1, v18) == 1)
  {
    sub_100027964((uint64_t)v17, (uint64_t *)&unk_1000D16E0);
    v35 = objc_allocWithZone((Class)NSError);
    *v14 = sub_100027D60(0xD00000000000001FLL, 0x80000001000A77A0, 512, 0);
    swift_storeEnumTagMultiPayload(v14, v64, 1);
    v66(v14);
    return sub_100027964((uint64_t)v14, &qword_1000D26B0);
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v17, v18);
  URL.init(fileURLWithPath:)(a6, a7);
  v37 = String._bridgeToObjectiveC()();
  v38 = objc_msgSend(a9, "fileExistsAtPath:", v37);

  if ((v38 & 1) != 0)
  {
    URL._bridgeToObjectiveC()(v39);
    v41 = v40;
    v70 = 0;
    v42 = objc_msgSend(a9, "removeItemAtURL:error:", v40, &v70);

    v43 = v70;
    if (!v42)
      goto LABEL_14;
    v44 = v70;
    URL._bridgeToObjectiveC()(v45);
    v47 = v46;
    URL._bridgeToObjectiveC()(v48);
    v50 = v49;
    v70 = 0;
    v51 = objc_msgSend(a9, "moveItemAtURL:toURL:error:", v47, v49, &v70);

    v43 = v70;
    if (!v51)
      goto LABEL_14;
  }
  else
  {
    URL._bridgeToObjectiveC()(v39);
    v56 = v55;
    URL._bridgeToObjectiveC()(v57);
    v59 = v58;
    v70 = 0;
    v60 = objc_msgSend(a9, "moveItemAtURL:toURL:error:", v56, v58, &v70);

    v43 = v70;
    if ((v60 & 1) == 0)
    {
LABEL_14:
      v52 = v43;
      v53 = _convertNSErrorToError(_:)(v43);

      swift_willThrow();
      v54 = *(void (**)(char *, uint64_t))(v19 + 8);
      v54(v21, v18);
      *v14 = v53;
      swift_storeEnumTagMultiPayload(v14, v64, 1);
      swift_errorRetain(v53);
      v66(v14);
      swift_errorRelease(v53);
      sub_100027964((uint64_t)v14, &qword_1000D26B0);
      return ((uint64_t (*)(char *, uint64_t))v54)(v24, v18);
    }
  }
  v61 = v43;
  (*(void (**)(_QWORD *, char *, uint64_t))(v19 + 16))(v14, v21, v18);
  swift_storeEnumTagMultiPayload(v14, v64, 0);
  v66(v14);
  sub_100027964((uint64_t)v14, &qword_1000D26B0);
  v62 = *(void (**)(char *, uint64_t))(v19 + 8);
  v62(v21, v18);
  return ((uint64_t (*)(char *, uint64_t))v62)(v24, v18);
}

uint64_t sub_100064660()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10006469C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000640B4(a1, a2, a3, *(void (**)(_QWORD *))(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(void **)(v3 + 56));
}

uint64_t sub_1000646C8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, void *, void *);
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v19;

  v8 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, void *, void *))(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(a2, v9);
    v14 = type metadata accessor for URL(0);
    v15 = 0;
  }
  else
  {
    v14 = type metadata accessor for URL(0);
    v15 = 1;
  }
  sub_10000964C((uint64_t)v11, v15, 1, v14);
  swift_retain(v12);
  v16 = a3;
  v17 = a4;
  v13(v11, a3, a4);

  swift_release(v12);
  return sub_100027964((uint64_t)v11, (uint64_t *)&unk_1000D16E0);
}

uint64_t sub_1000647D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000647E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000647EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageDownloader(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for ImageDownloader(id *a1)
{

}

uint64_t assignWithCopy for ImageDownloader(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for ImageDownloader(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ImageDownloader(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageDownloader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageDownloader()
{
  return &type metadata for ImageDownloader;
}

void sub_1000649AC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  sub_1000680D8();
  sub_100018BD0();
  __chkstk_darwin(v0);
  sub_100068054(v1, v3);
  v2 = (char *)sub_100064A18 + 4 * byte_1000A2E88[sub_1000680B4()];
  __asm { BR              X10 }
}

unint64_t sub_100064A18()
{
  return 0xD000000000000019;
}

unint64_t sub_100064A90()
{
  return sub_1000680A0(28);
}

unint64_t sub_100064AA8()
{
  return sub_1000680A0(25);
}

unint64_t sub_100064AC0()
{
  return sub_1000680A0(25);
}

unint64_t sub_100064AD8()
{
  return sub_1000680A0(27);
}

unint64_t sub_100064AF0()
{
  return sub_1000680A0(29);
}

void sub_100064B08()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  sub_1000680D8();
  sub_100018BD0();
  __chkstk_darwin(v0);
  sub_100068054(v1, v3);
  v2 = (char *)sub_100064B58 + 4 * byte_1000A2E8D[sub_1000680B4()];
  __asm { BR              X10 }
}

uint64_t sub_100064B58()
{
  return -1000;
}

uint64_t sub_100064BB8(char a1)
{
  if ((a1 & 1) != 0)
    return 404;
  else
    return 3328;
}

uint64_t sub_100064BCC(char a1)
{
  return qword_1000A3560[a1];
}

void sub_100064BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = sub_1000680D8();
  sub_100018BD0();
  __chkstk_darwin(v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100065684(v1, (uint64_t)v5);
  v6 = (char *)sub_100064C60 + 4 * byte_1000A2E92[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }
}

uint64_t sub_100064C60()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v4 = sub_10000738C((uint64_t *)&unk_1000D0A00);
  inited = swift_initStackObject(v4, v0 + 88);
  *(_OWORD *)(inited + 16) = xmmword_10009FDB0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v6;
  *(_BYTE *)(v2 - 209) = v3;
  v7 = sub_1000655AC();
  v8 = Error.localizedDescription.getter(&unk_1000C7540, v7);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = v9;
  return sub_100068098(inited, (uint64_t)&type metadata for String);
}

uint64_t sub_100064EC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065708(&qword_1000D26E0, (uint64_t)&unk_1000A3178);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100064F00(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065708(&qword_1000D26E0, (uint64_t)&unk_1000A3178);
  return Error<>._code.getter(a1, v2);
}

BOOL sub_100064F38(uint64_t a1)
{
  return a1 != -1200;
}

BOOL sub_100064F50@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_100064F38(*a1);
  *a2 = result;
  return result;
}

void sub_100064F80(_QWORD *a1@<X8>)
{
  *a1 = -1200;
}

unint64_t sub_100064F8C()
{
  sub_100064A90();
  return 0xD00000000000001CLL;
}

uint64_t sub_100064FA8()
{
  return -1200;
}

uint64_t sub_100064FB0()
{
  return sub_1000653F8((uint64_t)&unk_1000C74B0);
}

uint64_t sub_100064FCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065748();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100064FF4(uint64_t a1, uint64_t a2)
{
  return sub_1000653C8(a1, a2, (uint64_t (*)(void))sub_100065748);
}

uint64_t sub_100065008(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 404)
    v1 = 1;
  else
    v1 = 2;
  if (a1 == 3328)
    return 0;
  else
    return v1;
}

uint64_t sub_100065020(unsigned __int8 *a1, char *a2)
{
  return sub_1000562E8(*a1, *a2);
}

void sub_10006502C()
{
  unsigned __int8 *v0;

  sub_1000564C4(*v0);
}

void sub_100065034(uint64_t a1)
{
  char *v1;

  sub_100056A58(a1, *v1);
}

void sub_10006503C(uint64_t a1)
{
  char *v1;

  sub_100056A84(a1, *v1);
}

uint64_t sub_100065044@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100065008(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006506C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_100064BB8(*v1);
  *a1 = result;
  return result;
}

void sub_100065094(char a1)
{
  char v1;
  uint64_t v2;
  __n128 *inited;
  uint64_t v4;
  unint64_t v5;
  char v6;
  _BYTE v7[80];

  v1 = a1 & 1;
  v2 = sub_10000738C((uint64_t *)&unk_1000D0A00);
  inited = (__n128 *)swift_initStackObject(v2, v7);
  sub_100068074(inited, (__n128)xmmword_10009FDB0);
  v6 = v1;
  v4 = String.init<A>(describing:)(&v6, &unk_1000C7540);
  inited[4].n128_u64[1] = (unint64_t)&type metadata for String;
  inited[3].n128_u64[0] = v4;
  inited[3].n128_u64[1] = v5;
  sub_100068098((uint64_t)inited, (uint64_t)&type metadata for String);
  sub_1000680CC();
}

BOOL sub_100065114(uint64_t a1)
{
  return a1 != -1000;
}

unint64_t sub_100065120()
{
  sub_100064AA8();
  return 0xD000000000000019;
}

uint64_t sub_10006513C()
{
  char *v0;

  return sub_100064BB8(*v0);
}

void sub_100065144()
{
  char *v0;

  sub_100065094(*v0);
}

uint64_t sub_10006514C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000657C0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100065174(uint64_t a1, uint64_t a2)
{
  return sub_1000653C8(a1, a2, (uint64_t (*)(void))sub_1000657C0);
}

BOOL sub_100065194@<W0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_100065114(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000651C8(uint64_t a1)
{
  int v1;
  unsigned int v2;

  if (a1 == -1011)
    v1 = 2;
  else
    v1 = 3;
  if (a1 == -1016)
    v2 = 1;
  else
    v2 = v1;
  if (a1 == -2000)
    return 0;
  else
    return v2;
}

unint64_t sub_1000651F0()
{
  sub_100064AC0();
  return 0xD000000000000019;
}

uint64_t sub_10006520C()
{
  return -1000;
}

uint64_t sub_100065214()
{
  return sub_1000653F8((uint64_t)&unk_1000C75D0);
}

uint64_t sub_100065230(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065838();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100065258(uint64_t a1, uint64_t a2)
{
  return sub_1000653C8(a1, a2, (uint64_t (*)(void))sub_100065838);
}

BOOL sub_10006526C(char *a1, char *a2)
{
  return sub_1000562C4(*a1, *a2);
}

void sub_100065278()
{
  unsigned __int8 *v0;

  sub_100056500(*v0);
}

void sub_100065280(uint64_t a1)
{
  char *v1;

  sub_100056A2C(a1, *v1);
}

void sub_100065288(uint64_t a1)
{
  char *v1;

  sub_100056ABC(a1, *v1);
}

uint64_t sub_100065290@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1000651C8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000652B8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_100064BCC(*v1);
  *a1 = result;
  return result;
}

void sub_1000652E0(char a1)
{
  uint64_t v2;
  __n128 *inited;
  uint64_t v4;
  unint64_t v5;
  char v6;
  _BYTE v7[80];

  v2 = sub_10000738C((uint64_t *)&unk_1000D0A00);
  inited = (__n128 *)swift_initStackObject(v2, v7);
  sub_100068074(inited, (__n128)xmmword_10009FDB0);
  v6 = a1;
  v4 = String.init<A>(describing:)(&v6, &unk_1000C7660);
  inited[4].n128_u64[1] = (unint64_t)&type metadata for String;
  inited[3].n128_u64[0] = v4;
  inited[3].n128_u64[1] = v5;
  sub_100068098((uint64_t)inited, (uint64_t)&type metadata for String);
  sub_1000680CC();
}

unint64_t sub_100065360()
{
  sub_100064AD8();
  return 0xD00000000000001BLL;
}

uint64_t sub_10006537C()
{
  char *v0;

  return sub_100064BCC(*v0);
}

void sub_100065384()
{
  char *v0;

  sub_1000652E0(*v0);
}

uint64_t sub_10006538C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000658B0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000653B4(uint64_t a1, uint64_t a2)
{
  return sub_1000653C8(a1, a2, (uint64_t (*)(void))sub_1000658B0);
}

uint64_t sub_1000653C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  void (*v3)(void);

  sub_1000680A8(a1, a2, a3);
  v3();
  sub_100005C58();
  sub_1000680E0();
  return sub_10006808C();
}

uint64_t sub_1000653F8(uint64_t a1)
{
  uint64_t v2;
  __n128 *inited;
  __n128 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v2 = sub_10000738C((uint64_t *)&unk_1000D0A00);
  inited = (__n128 *)swift_initStackObject(v2, &v8);
  v4 = sub_100068074(inited, (__n128)xmmword_10009FDB0);
  v5 = String.init<A>(describing:)(v4, a1);
  inited[4].n128_u64[1] = (unint64_t)&type metadata for String;
  inited[3].n128_u64[0] = v5;
  inited[3].n128_u64[1] = v6;
  return sub_100068098((uint64_t)inited, (uint64_t)&type metadata for String);
}

unint64_t sub_100065474()
{
  sub_100064AF0();
  return 0xD00000000000001DLL;
}

uint64_t sub_100065490()
{
  return sub_1000653F8((uint64_t)&unk_1000C76F0);
}

uint64_t sub_1000654AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100065928();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000654D4(uint64_t a1, uint64_t a2)
{
  return sub_1000653C8(a1, a2, (uint64_t (*)(void))sub_100065928);
}

unint64_t sub_1000654EC()
{
  unint64_t result;

  result = qword_1000D26B8;
  if (!qword_1000D26B8)
  {
    result = swift_getWitnessTable(&unk_1000A2EB8, &unk_1000C76F0);
    atomic_store(result, (unint64_t *)&qword_1000D26B8);
  }
  return result;
}

unint64_t sub_10006552C()
{
  unint64_t result;

  result = qword_1000D26C0;
  if (!qword_1000D26C0)
  {
    result = swift_getWitnessTable(&unk_1000A2F38, &unk_1000C7660);
    atomic_store(result, (unint64_t *)&qword_1000D26C0);
  }
  return result;
}

unint64_t sub_10006556C()
{
  unint64_t result;

  result = qword_1000D26C8;
  if (!qword_1000D26C8)
  {
    result = swift_getWitnessTable(&unk_1000A2FB8, &unk_1000C75D0);
    atomic_store(result, (unint64_t *)&qword_1000D26C8);
  }
  return result;
}

unint64_t sub_1000655AC()
{
  unint64_t result;

  result = qword_1000D26D0;
  if (!qword_1000D26D0)
  {
    result = swift_getWitnessTable(&unk_1000A3038, &unk_1000C7540);
    atomic_store(result, (unint64_t *)&qword_1000D26D0);
  }
  return result;
}

unint64_t sub_1000655EC()
{
  unint64_t result;

  result = qword_1000D26D8;
  if (!qword_1000D26D8)
  {
    result = swift_getWitnessTable(&unk_1000A30B8, &unk_1000C74B0);
    atomic_store(result, (unint64_t *)&qword_1000D26D8);
  }
  return result;
}

uint64_t sub_100065628()
{
  return sub_100065708((unint64_t *)&qword_1000D1670, (uint64_t)&unk_1000A3138);
}

uint64_t type metadata accessor for ApiAgentError(uint64_t a1)
{
  uint64_t result;

  result = qword_1000D27A8;
  if (!qword_1000D27A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ApiAgentError);
  return result;
}

uint64_t sub_100065684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ApiAgentError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000656C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000738C(&qword_1000D1660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100065708(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ApiAgentError(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100065748()
{
  unint64_t result;

  result = qword_1000D26E8;
  if (!qword_1000D26E8)
  {
    result = swift_getWitnessTable(&unk_1000A30F8, &unk_1000C74B0);
    atomic_store(result, (unint64_t *)&qword_1000D26E8);
  }
  return result;
}

unint64_t sub_100065784()
{
  unint64_t result;

  result = qword_1000D26F0;
  if (!qword_1000D26F0)
  {
    result = swift_getWitnessTable(&unk_1000A3528, &unk_1000C74B0);
    atomic_store(result, (unint64_t *)&qword_1000D26F0);
  }
  return result;
}

unint64_t sub_1000657C0()
{
  unint64_t result;

  result = qword_1000D26F8;
  if (!qword_1000D26F8)
  {
    result = swift_getWitnessTable(&unk_1000A3078, &unk_1000C7540);
    atomic_store(result, (unint64_t *)&qword_1000D26F8);
  }
  return result;
}

unint64_t sub_1000657FC()
{
  unint64_t result;

  result = qword_1000D2700;
  if (!qword_1000D2700)
  {
    result = swift_getWitnessTable(&unk_1000A34F0, &unk_1000C7540);
    atomic_store(result, (unint64_t *)&qword_1000D2700);
  }
  return result;
}

unint64_t sub_100065838()
{
  unint64_t result;

  result = qword_1000D2708;
  if (!qword_1000D2708)
  {
    result = swift_getWitnessTable(&unk_1000A2FF8, &unk_1000C75D0);
    atomic_store(result, (unint64_t *)&qword_1000D2708);
  }
  return result;
}

unint64_t sub_100065874()
{
  unint64_t result;

  result = qword_1000D2710;
  if (!qword_1000D2710)
  {
    result = swift_getWitnessTable(&unk_1000A34B8, &unk_1000C75D0);
    atomic_store(result, (unint64_t *)&qword_1000D2710);
  }
  return result;
}

unint64_t sub_1000658B0()
{
  unint64_t result;

  result = qword_1000D2718;
  if (!qword_1000D2718)
  {
    result = swift_getWitnessTable(&unk_1000A2F78, &unk_1000C7660);
    atomic_store(result, (unint64_t *)&qword_1000D2718);
  }
  return result;
}

unint64_t sub_1000658EC()
{
  unint64_t result;

  result = qword_1000D2720;
  if (!qword_1000D2720)
  {
    result = swift_getWitnessTable(&unk_1000A3480, &unk_1000C7660);
    atomic_store(result, (unint64_t *)&qword_1000D2720);
  }
  return result;
}

unint64_t sub_100065928()
{
  unint64_t result;

  result = qword_1000D2728;
  if (!qword_1000D2728)
  {
    result = swift_getWitnessTable(&unk_1000A2EF8, &unk_1000C76F0);
    atomic_store(result, (unint64_t *)&qword_1000D2728);
  }
  return result;
}

unint64_t sub_100065964()
{
  unint64_t result;

  result = qword_1000D2730;
  if (!qword_1000D2730)
  {
    result = swift_getWitnessTable(&unk_1000A3448, &unk_1000C76F0);
    atomic_store(result, (unint64_t *)&qword_1000D2730);
  }
  return result;
}

void type metadata accessor for ApiAgentError.SignatureError()
{
  sub_100031ABC();
}

uint64_t sub_1000659B0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000659FC + 4 * byte_1000A2E9C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100065A30 + 4 * byte_1000A2E97[v4]))();
}

uint64_t sub_100065A30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065A38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100065A40);
  return result;
}

uint64_t sub_100065A4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100065A54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100065A58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065A60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ApiAgentError.AMSBagError()
{
  sub_100031ABC();
}

void type metadata accessor for ApiAgentError.AMSURLError()
{
  sub_100031ABC();
}

uint64_t sub_100065A84(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100065AD0 + 4 * byte_1000A2EA6[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100065B04 + 4 * byte_1000A2EA1[v4]))();
}

uint64_t sub_100065B04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065B0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100065B14);
  return result;
}

uint64_t sub_100065B20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100065B28);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100065B2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100065B34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ApiAgentError.DataTaskError()
{
  sub_100031ABC();
}

uint64_t sub_100065B4C(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100065B8C + 4 * byte_1000A2EAB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100065BAC + 4 * byte_1000A2EB0[v4]))();
}

_BYTE *sub_100065B8C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100065BAC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100065BB4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100065BBC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100065BC4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100065BCC(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for ApiAgentError.GenericURLError()
{
  sub_100031ABC();
}

uint64_t *sub_100065BE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v13);
  }
  else if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v8 = *(int *)(sub_10000738C(&qword_1000D1668) + 48);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = (int *)type metadata accessor for ApiRequestMetrics(0);
    if (sub_100009658((uint64_t)v10, 1, (uint64_t)v11))
    {
      v12 = sub_10000738C(&qword_1000D1660);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = type metadata accessor for Date(0);
      if (sub_100009658((uint64_t)v10, 1, v14))
      {
        v15 = sub_10000738C(&qword_1000D0570);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v9, v10, v14);
        sub_10000964C((uint64_t)v9, 0, 1, v14);
      }
      v16 = v11[5];
      v17 = &v9[v16];
      v18 = &v10[v16];
      if (sub_100009658((uint64_t)&v10[v16], 1, v14))
      {
        v19 = sub_10000738C(&qword_1000D0570);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v17, v18, v14);
        sub_10000964C((uint64_t)v17, 0, 1, v14);
      }
      *(_QWORD *)&v9[v11[6]] = *(_QWORD *)&v10[v11[6]];
      *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
      v20 = v11[8];
      v21 = &v9[v20];
      v22 = &v10[v20];
      if (sub_100009658((uint64_t)&v10[v20], 1, v14))
      {
        v23 = sub_10000738C(&qword_1000D0570);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v21, v22, v14);
        sub_10000964C((uint64_t)v21, 0, 1, v14);
      }
      v24 = v11[9];
      v25 = &v9[v24];
      v26 = &v10[v24];
      if (sub_100009658((uint64_t)&v10[v24], 1, v14))
      {
        v27 = sub_10000738C(&qword_1000D0570);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v25, v26, v14);
        sub_10000964C((uint64_t)v25, 0, 1, v14);
      }
      v28 = v11[10];
      v29 = &v9[v28];
      v30 = &v10[v28];
      if (sub_100009658((uint64_t)&v10[v28], 1, v14))
      {
        v31 = sub_10000738C(&qword_1000D0570);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v29, v30, v14);
        sub_10000964C((uint64_t)v29, 0, 1, v14);
      }
      v9[v11[11]] = v10[v11[11]];
      v32 = v11[12];
      v33 = &v9[v32];
      v34 = &v10[v32];
      v35 = *((_QWORD *)v34 + 1);
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *((_QWORD *)v33 + 1) = v35;
      v36 = v11[13];
      v37 = &v9[v36];
      v38 = &v10[v36];
      swift_bridgeObjectRetain(v35);
      if (sub_100009658((uint64_t)v38, 1, v14))
      {
        v39 = sub_10000738C(&qword_1000D0570);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v37, v38, v14);
        sub_10000964C((uint64_t)v37, 0, 1, v14);
      }
      v40 = v11[14];
      v41 = &v9[v40];
      v42 = &v10[v40];
      v43 = type metadata accessor for URL(0);
      if (sub_100009658((uint64_t)v42, 1, v43))
      {
        v44 = sub_10000738C((uint64_t *)&unk_1000D16E0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
        sub_10000964C((uint64_t)v41, 0, 1, v43);
      }
      v45 = v11[15];
      v46 = &v9[v45];
      v47 = &v10[v45];
      if (sub_100009658((uint64_t)&v10[v45], 1, v14))
      {
        v48 = sub_10000738C(&qword_1000D0570);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v46, v47, v14);
        sub_10000964C((uint64_t)v46, 0, 1, v14);
      }
      v49 = v11[16];
      v50 = &v9[v49];
      v51 = &v10[v49];
      if (sub_100009658((uint64_t)&v10[v49], 1, v14))
      {
        v52 = sub_10000738C(&qword_1000D0570);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v50, v51, v14);
        sub_10000964C((uint64_t)v50, 0, 1, v14);
      }
      v53 = v11[17];
      v54 = &v9[v53];
      v55 = &v10[v53];
      if (sub_100009658((uint64_t)&v10[v53], 1, v14))
      {
        v56 = sub_10000738C(&qword_1000D0570);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v54, v55, v14);
        sub_10000964C((uint64_t)v54, 0, 1, v14);
      }
      v57 = v11[18];
      v58 = &v9[v57];
      v59 = &v10[v57];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      v60 = v11[19];
      v61 = &v9[v60];
      v62 = &v10[v60];
      v63 = *((_QWORD *)v62 + 1);
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *((_QWORD *)v61 + 1) = v63;
      v64 = v11[20];
      v65 = &v9[v64];
      v66 = &v10[v64];
      v67 = *((_QWORD *)v66 + 1);
      *(_QWORD *)v65 = *(_QWORD *)v66;
      *((_QWORD *)v65 + 1) = v67;
      v68 = v11[21];
      v69 = &v9[v68];
      v70 = &v10[v68];
      v71 = *((_QWORD *)v70 + 1);
      *(_QWORD *)v69 = *(_QWORD *)v70;
      *((_QWORD *)v69 + 1) = v71;
      v72 = v11[22];
      v73 = &v9[v72];
      v74 = &v10[v72];
      v75 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = v75;
      v76 = v11[23];
      v77 = &v9[v76];
      v78 = &v10[v76];
      v79 = *((_QWORD *)v78 + 1);
      *(_QWORD *)v77 = *(_QWORD *)v78;
      *((_QWORD *)v77 + 1) = v79;
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v67);
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v79);
      sub_10000964C((uint64_t)v9, 0, 1, (uint64_t)v11);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_100066254(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v4 = a1 + *(int *)(sub_10000738C(&qword_1000D1668) + 48);
    v5 = (int *)type metadata accessor for ApiRequestMetrics(0);
    result = sub_100009658(v4, 1, (uint64_t)v5);
    if (!(_DWORD)result)
    {
      v6 = type metadata accessor for Date(0);
      if (!sub_100009658(v4, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
      v7 = v4 + v5[5];
      if (!sub_100009658(v7, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v7, v6);
      v8 = v4 + v5[8];
      if (!sub_100009658(v8, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v8, v6);
      v9 = v4 + v5[9];
      if (!sub_100009658(v9, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v9, v6);
      v10 = v4 + v5[10];
      if (!sub_100009658(v10, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v10, v6);
      swift_bridgeObjectRelease();
      v11 = v4 + v5[13];
      if (!sub_100009658(v11, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v11, v6);
      v12 = v4 + v5[14];
      v13 = type metadata accessor for URL(0);
      if (!sub_100009658(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
      v14 = v4 + v5[15];
      if (!sub_100009658(v14, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v14, v6);
      v15 = v4 + v5[16];
      if (!sub_100009658(v15, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v15, v6);
      v16 = v4 + v5[17];
      if (!sub_100009658(v16, 1, v6))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v16, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_BYTE *sub_100066520(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = *(int *)(sub_10000738C(&qword_1000D1668) + 48);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = (int *)type metadata accessor for ApiRequestMetrics(0);
    if (sub_100009658((uint64_t)v8, 1, (uint64_t)v9))
    {
      v10 = sub_10000738C(&qword_1000D1660);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for Date(0);
      if (sub_100009658((uint64_t)v8, 1, v11))
      {
        v12 = sub_10000738C(&qword_1000D0570);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
        sub_10000964C((uint64_t)v7, 0, 1, v11);
      }
      v13 = v9[5];
      v14 = &v7[v13];
      v15 = &v8[v13];
      if (sub_100009658((uint64_t)&v8[v13], 1, v11))
      {
        v16 = sub_10000738C(&qword_1000D0570);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v14, v15, v11);
        sub_10000964C((uint64_t)v14, 0, 1, v11);
      }
      *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
      *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
      v17 = v9[8];
      v18 = &v7[v17];
      v19 = &v8[v17];
      if (sub_100009658((uint64_t)&v8[v17], 1, v11))
      {
        v20 = sub_10000738C(&qword_1000D0570);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v18, v19, v11);
        sub_10000964C((uint64_t)v18, 0, 1, v11);
      }
      v21 = v9[9];
      v22 = &v7[v21];
      v23 = &v8[v21];
      if (sub_100009658((uint64_t)&v8[v21], 1, v11))
      {
        v24 = sub_10000738C(&qword_1000D0570);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v22, v23, v11);
        sub_10000964C((uint64_t)v22, 0, 1, v11);
      }
      v25 = v9[10];
      v26 = &v7[v25];
      v27 = &v8[v25];
      if (sub_100009658((uint64_t)&v8[v25], 1, v11))
      {
        v28 = sub_10000738C(&qword_1000D0570);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v26, v27, v11);
        sub_10000964C((uint64_t)v26, 0, 1, v11);
      }
      v7[v9[11]] = v8[v9[11]];
      v29 = v9[12];
      v30 = &v7[v29];
      v31 = &v8[v29];
      v32 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = v32;
      v33 = v9[13];
      v34 = &v7[v33];
      v35 = &v8[v33];
      swift_bridgeObjectRetain(v32);
      if (sub_100009658((uint64_t)v35, 1, v11))
      {
        v36 = sub_10000738C(&qword_1000D0570);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v34, v35, v11);
        sub_10000964C((uint64_t)v34, 0, 1, v11);
      }
      v37 = v9[14];
      v38 = &v7[v37];
      v39 = &v8[v37];
      v40 = type metadata accessor for URL(0);
      if (sub_100009658((uint64_t)v39, 1, v40))
      {
        v41 = sub_10000738C((uint64_t *)&unk_1000D16E0);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
        sub_10000964C((uint64_t)v38, 0, 1, v40);
      }
      v42 = v9[15];
      v43 = &v7[v42];
      v44 = &v8[v42];
      if (sub_100009658((uint64_t)&v8[v42], 1, v11))
      {
        v45 = sub_10000738C(&qword_1000D0570);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v43, v44, v11);
        sub_10000964C((uint64_t)v43, 0, 1, v11);
      }
      v46 = v9[16];
      v47 = &v7[v46];
      v48 = &v8[v46];
      if (sub_100009658((uint64_t)&v8[v46], 1, v11))
      {
        v49 = sub_10000738C(&qword_1000D0570);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v47, v48, v11);
        sub_10000964C((uint64_t)v47, 0, 1, v11);
      }
      v50 = v9[17];
      v51 = &v7[v50];
      v52 = &v8[v50];
      if (sub_100009658((uint64_t)&v8[v50], 1, v11))
      {
        v53 = sub_10000738C(&qword_1000D0570);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v51, v52, v11);
        sub_10000964C((uint64_t)v51, 0, 1, v11);
      }
      v54 = v9[18];
      v55 = &v7[v54];
      v56 = &v8[v54];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v55[8] = v56[8];
      v57 = v9[19];
      v58 = &v7[v57];
      v59 = &v8[v57];
      v60 = *((_QWORD *)v59 + 1);
      *(_QWORD *)v58 = *(_QWORD *)v59;
      *((_QWORD *)v58 + 1) = v60;
      v61 = v9[20];
      v62 = &v7[v61];
      v63 = &v8[v61];
      v64 = *((_QWORD *)v63 + 1);
      *(_QWORD *)v62 = *(_QWORD *)v63;
      *((_QWORD *)v62 + 1) = v64;
      v65 = v9[21];
      v66 = &v7[v65];
      v67 = &v8[v65];
      v68 = *((_QWORD *)v67 + 1);
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = v68;
      v69 = v9[22];
      v70 = &v7[v69];
      v71 = &v8[v69];
      v72 = *((_QWORD *)v71 + 1);
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = v72;
      v73 = v9[23];
      v74 = &v7[v73];
      v75 = &v8[v73];
      v76 = *((_QWORD *)v75 + 1);
      *(_QWORD *)v74 = *(_QWORD *)v75;
      *((_QWORD *)v74 + 1) = v76;
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v76);
      sub_10000964C((uint64_t)v7, 0, 1, (uint64_t)v9);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_100066B68(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;

  if (a1 != a2)
  {
    sub_1000671F0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = *(int *)(sub_10000738C(&qword_1000D1668) + 48);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = (int *)type metadata accessor for ApiRequestMetrics(0);
      if (sub_100009658((uint64_t)v8, 1, (uint64_t)v9))
      {
        v10 = sub_10000738C(&qword_1000D1660);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v11 = type metadata accessor for Date(0);
        if (sub_100009658((uint64_t)v8, 1, v11))
        {
          v12 = sub_10000738C(&qword_1000D0570);
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
          sub_10000964C((uint64_t)v7, 0, 1, v11);
        }
        v13 = v9[5];
        v14 = &v7[v13];
        v15 = &v8[v13];
        if (sub_100009658((uint64_t)&v8[v13], 1, v11))
        {
          v16 = sub_10000738C(&qword_1000D0570);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v14, v15, v11);
          sub_10000964C((uint64_t)v14, 0, 1, v11);
        }
        *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
        *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
        v17 = v9[8];
        v18 = &v7[v17];
        v19 = &v8[v17];
        if (sub_100009658((uint64_t)&v8[v17], 1, v11))
        {
          v20 = sub_10000738C(&qword_1000D0570);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v18, v19, v11);
          sub_10000964C((uint64_t)v18, 0, 1, v11);
        }
        v21 = v9[9];
        v22 = &v7[v21];
        v23 = &v8[v21];
        if (sub_100009658((uint64_t)&v8[v21], 1, v11))
        {
          v24 = sub_10000738C(&qword_1000D0570);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v22, v23, v11);
          sub_10000964C((uint64_t)v22, 0, 1, v11);
        }
        v25 = v9[10];
        v26 = &v7[v25];
        v27 = &v8[v25];
        if (sub_100009658((uint64_t)&v8[v25], 1, v11))
        {
          v28 = sub_10000738C(&qword_1000D0570);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v26, v27, v11);
          sub_10000964C((uint64_t)v26, 0, 1, v11);
        }
        v7[v9[11]] = v8[v9[11]];
        v29 = v9[12];
        v30 = &v7[v29];
        v31 = &v8[v29];
        *(_QWORD *)v30 = *(_QWORD *)v31;
        v32 = *((_QWORD *)v31 + 1);
        *((_QWORD *)v30 + 1) = v32;
        v33 = v9[13];
        v34 = &v7[v33];
        v35 = &v8[v33];
        swift_bridgeObjectRetain(v32);
        if (sub_100009658((uint64_t)v35, 1, v11))
        {
          v36 = sub_10000738C(&qword_1000D0570);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v34, v35, v11);
          sub_10000964C((uint64_t)v34, 0, 1, v11);
        }
        v37 = v9[14];
        v38 = &v7[v37];
        v39 = &v8[v37];
        v40 = type metadata accessor for URL(0);
        if (sub_100009658((uint64_t)v39, 1, v40))
        {
          v41 = sub_10000738C((uint64_t *)&unk_1000D16E0);
          memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
          sub_10000964C((uint64_t)v38, 0, 1, v40);
        }
        v42 = v9[15];
        v43 = &v7[v42];
        v44 = &v8[v42];
        if (sub_100009658((uint64_t)&v8[v42], 1, v11))
        {
          v45 = sub_10000738C(&qword_1000D0570);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v43, v44, v11);
          sub_10000964C((uint64_t)v43, 0, 1, v11);
        }
        v46 = v9[16];
        v47 = &v7[v46];
        v48 = &v8[v46];
        if (sub_100009658((uint64_t)&v8[v46], 1, v11))
        {
          v49 = sub_10000738C(&qword_1000D0570);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v47, v48, v11);
          sub_10000964C((uint64_t)v47, 0, 1, v11);
        }
        v50 = v9[17];
        v51 = &v7[v50];
        v52 = &v8[v50];
        if (sub_100009658((uint64_t)&v8[v50], 1, v11))
        {
          v53 = sub_10000738C(&qword_1000D0570);
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v51, v52, v11);
          sub_10000964C((uint64_t)v51, 0, 1, v11);
        }
        v54 = v9[18];
        v55 = &v7[v54];
        v56 = &v8[v54];
        v57 = *(_QWORD *)v56;
        v55[8] = v56[8];
        *(_QWORD *)v55 = v57;
        v58 = v9[19];
        v59 = &v7[v58];
        v60 = &v8[v58];
        *(_QWORD *)v59 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        *((_QWORD *)v59 + 1) = v61;
        v62 = v9[20];
        v63 = &v7[v62];
        v64 = &v8[v62];
        *(_QWORD *)v63 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        *((_QWORD *)v63 + 1) = v65;
        v66 = v9[21];
        v67 = &v7[v66];
        v68 = &v8[v66];
        *(_QWORD *)v67 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        *((_QWORD *)v67 + 1) = v69;
        v70 = v9[22];
        v71 = &v7[v70];
        v72 = &v8[v70];
        *(_QWORD *)v71 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        *((_QWORD *)v71 + 1) = v73;
        v74 = v9[23];
        v75 = &v7[v74];
        v76 = &v8[v74];
        *(_QWORD *)v75 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        *((_QWORD *)v75 + 1) = v77;
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v65);
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v73);
        swift_bridgeObjectRetain(v77);
        sub_10000964C((uint64_t)v7, 0, 1, (uint64_t)v9);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000671F0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ApiAgentError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_BYTE *sub_10006722C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = *(int *)(sub_10000738C(&qword_1000D1668) + 48);
    v7 = &a1[v6];
    v8 = &a2[v6];
    v9 = (int *)type metadata accessor for ApiRequestMetrics(0);
    if (sub_100009658((uint64_t)v8, 1, (uint64_t)v9))
    {
      v10 = sub_10000738C(&qword_1000D1660);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = type metadata accessor for Date(0);
      if (sub_100009658((uint64_t)v8, 1, v11))
      {
        v12 = sub_10000738C(&qword_1000D0570);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
        sub_10000964C((uint64_t)v7, 0, 1, v11);
      }
      v13 = v9[5];
      v14 = &v7[v13];
      v15 = &v8[v13];
      if (sub_100009658((uint64_t)&v8[v13], 1, v11))
      {
        v16 = sub_10000738C(&qword_1000D0570);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v14, v15, v11);
        sub_10000964C((uint64_t)v14, 0, 1, v11);
      }
      *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
      *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
      v17 = v9[8];
      v18 = &v7[v17];
      v19 = &v8[v17];
      if (sub_100009658((uint64_t)&v8[v17], 1, v11))
      {
        v20 = sub_10000738C(&qword_1000D0570);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v18, v19, v11);
        sub_10000964C((uint64_t)v18, 0, 1, v11);
      }
      v21 = v9[9];
      v22 = &v7[v21];
      v23 = &v8[v21];
      if (sub_100009658((uint64_t)&v8[v21], 1, v11))
      {
        v24 = sub_10000738C(&qword_1000D0570);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v22, v23, v11);
        sub_10000964C((uint64_t)v22, 0, 1, v11);
      }
      v25 = v9[10];
      v26 = &v7[v25];
      v27 = &v8[v25];
      if (sub_100009658((uint64_t)&v8[v25], 1, v11))
      {
        v28 = sub_10000738C(&qword_1000D0570);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v26, v27, v11);
        sub_10000964C((uint64_t)v26, 0, 1, v11);
      }
      v7[v9[11]] = v8[v9[11]];
      *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
      v29 = v9[13];
      v30 = &v7[v29];
      v31 = &v8[v29];
      if (sub_100009658((uint64_t)&v8[v29], 1, v11))
      {
        v32 = sub_10000738C(&qword_1000D0570);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v30, v31, v11);
        sub_10000964C((uint64_t)v30, 0, 1, v11);
      }
      v33 = v9[14];
      v34 = &v7[v33];
      v35 = &v8[v33];
      v36 = type metadata accessor for URL(0);
      if (sub_100009658((uint64_t)v35, 1, v36))
      {
        v37 = sub_10000738C((uint64_t *)&unk_1000D16E0);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
        sub_10000964C((uint64_t)v34, 0, 1, v36);
      }
      v38 = v9[15];
      v39 = &v7[v38];
      v40 = &v8[v38];
      if (sub_100009658((uint64_t)&v8[v38], 1, v11))
      {
        v41 = sub_10000738C(&qword_1000D0570);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v39, v40, v11);
        sub_10000964C((uint64_t)v39, 0, 1, v11);
      }
      v42 = v9[16];
      v43 = &v7[v42];
      v44 = &v8[v42];
      if (sub_100009658((uint64_t)&v8[v42], 1, v11))
      {
        v45 = sub_10000738C(&qword_1000D0570);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v43, v44, v11);
        sub_10000964C((uint64_t)v43, 0, 1, v11);
      }
      v46 = v9[17];
      v47 = &v7[v46];
      v48 = &v8[v46];
      if (sub_100009658((uint64_t)&v8[v46], 1, v11))
      {
        v49 = sub_10000738C(&qword_1000D0570);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v47, v48, v11);
        sub_10000964C((uint64_t)v47, 0, 1, v11);
      }
      v50 = v9[18];
      v51 = &v7[v50];
      v52 = &v8[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
      *(_OWORD *)&v7[v9[20]] = *(_OWORD *)&v8[v9[20]];
      *(_OWORD *)&v7[v9[21]] = *(_OWORD *)&v8[v9[21]];
      *(_OWORD *)&v7[v9[22]] = *(_OWORD *)&v8[v9[22]];
      *(_OWORD *)&v7[v9[23]] = *(_OWORD *)&v8[v9[23]];
      sub_10000964C((uint64_t)v7, 0, 1, (uint64_t)v9);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_10006781C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  if (a1 != a2)
  {
    sub_1000671F0((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = *(int *)(sub_10000738C(&qword_1000D1668) + 48);
      v7 = &a1[v6];
      v8 = &a2[v6];
      v9 = (int *)type metadata accessor for ApiRequestMetrics(0);
      if (sub_100009658((uint64_t)v8, 1, (uint64_t)v9))
      {
        v10 = sub_10000738C(&qword_1000D1660);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        v11 = type metadata accessor for Date(0);
        if (sub_100009658((uint64_t)v8, 1, v11))
        {
          v12 = sub_10000738C(&qword_1000D0570);
          memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
          sub_10000964C((uint64_t)v7, 0, 1, v11);
        }
        v13 = v9[5];
        v14 = &v7[v13];
        v15 = &v8[v13];
        if (sub_100009658((uint64_t)&v8[v13], 1, v11))
        {
          v16 = sub_10000738C(&qword_1000D0570);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v14, v15, v11);
          sub_10000964C((uint64_t)v14, 0, 1, v11);
        }
        *(_QWORD *)&v7[v9[6]] = *(_QWORD *)&v8[v9[6]];
        *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
        v17 = v9[8];
        v18 = &v7[v17];
        v19 = &v8[v17];
        if (sub_100009658((uint64_t)&v8[v17], 1, v11))
        {
          v20 = sub_10000738C(&qword_1000D0570);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v18, v19, v11);
          sub_10000964C((uint64_t)v18, 0, 1, v11);
        }
        v21 = v9[9];
        v22 = &v7[v21];
        v23 = &v8[v21];
        if (sub_100009658((uint64_t)&v8[v21], 1, v11))
        {
          v24 = sub_10000738C(&qword_1000D0570);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v22, v23, v11);
          sub_10000964C((uint64_t)v22, 0, 1, v11);
        }
        v25 = v9[10];
        v26 = &v7[v25];
        v27 = &v8[v25];
        if (sub_100009658((uint64_t)&v8[v25], 1, v11))
        {
          v28 = sub_10000738C(&qword_1000D0570);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v26, v27, v11);
          sub_10000964C((uint64_t)v26, 0, 1, v11);
        }
        v7[v9[11]] = v8[v9[11]];
        *(_OWORD *)&v7[v9[12]] = *(_OWORD *)&v8[v9[12]];
        v29 = v9[13];
        v30 = &v7[v29];
        v31 = &v8[v29];
        if (sub_100009658((uint64_t)&v8[v29], 1, v11))
        {
          v32 = sub_10000738C(&qword_1000D0570);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v30, v31, v11);
          sub_10000964C((uint64_t)v30, 0, 1, v11);
        }
        v33 = v9[14];
        v34 = &v7[v33];
        v35 = &v8[v33];
        v36 = type metadata accessor for URL(0);
        if (sub_100009658((uint64_t)v35, 1, v36))
        {
          v37 = sub_10000738C((uint64_t *)&unk_1000D16E0);
          memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
          sub_10000964C((uint64_t)v34, 0, 1, v36);
        }
        v38 = v9[15];
        v39 = &v7[v38];
        v40 = &v8[v38];
        if (sub_100009658((uint64_t)&v8[v38], 1, v11))
        {
          v41 = sub_10000738C(&qword_1000D0570);
          memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v39, v40, v11);
          sub_10000964C((uint64_t)v39, 0, 1, v11);
        }
        v42 = v9[16];
        v43 = &v7[v42];
        v44 = &v8[v42];
        if (sub_100009658((uint64_t)&v8[v42], 1, v11))
        {
          v45 = sub_10000738C(&qword_1000D0570);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v43, v44, v11);
          sub_10000964C((uint64_t)v43, 0, 1, v11);
        }
        v46 = v9[17];
        v47 = &v7[v46];
        v48 = &v8[v46];
        if (sub_100009658((uint64_t)&v8[v46], 1, v11))
        {
          v49 = sub_10000738C(&qword_1000D0570);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v47, v48, v11);
          sub_10000964C((uint64_t)v47, 0, 1, v11);
        }
        v50 = v9[18];
        v51 = &v7[v50];
        v52 = &v8[v50];
        *(_QWORD *)v51 = *(_QWORD *)v52;
        v51[8] = v52[8];
        *(_OWORD *)&v7[v9[19]] = *(_OWORD *)&v8[v9[19]];
        *(_OWORD *)&v7[v9[20]] = *(_OWORD *)&v8[v9[20]];
        *(_OWORD *)&v7[v9[21]] = *(_OWORD *)&v8[v9[21]];
        *(_OWORD *)&v7[v9[22]] = *(_OWORD *)&v8[v9[22]];
        *(_OWORD *)&v7[v9[23]] = *(_OWORD *)&v8[v9[23]];
        sub_10000964C((uint64_t)v7, 0, 1, (uint64_t)v9);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100067E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_100067E38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  v5[0] = &unk_1000A3210;
  sub_100067EBC(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_1000A3228, *(_QWORD *)(v2 - 8) + 64);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
  }
}

void sub_100067EBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000D0758)
  {
    v2 = type metadata accessor for ApiRequestMetrics(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000D0758);
  }
}

unint64_t sub_100067F14()
{
  unint64_t result;

  result = qword_1000D27E0;
  if (!qword_1000D27E0)
  {
    result = swift_getWitnessTable(&unk_1000A3280, &unk_1000C76F0);
    atomic_store(result, (unint64_t *)&qword_1000D27E0);
  }
  return result;
}

unint64_t sub_100067F54()
{
  unint64_t result;

  result = qword_1000D27E8;
  if (!qword_1000D27E8)
  {
    result = swift_getWitnessTable(&unk_1000A32E8, &unk_1000C7660);
    atomic_store(result, (unint64_t *)&qword_1000D27E8);
  }
  return result;
}

unint64_t sub_100067F94()
{
  unint64_t result;

  result = qword_1000D27F0;
  if (!qword_1000D27F0)
  {
    result = swift_getWitnessTable(&unk_1000A3350, &unk_1000C75D0);
    atomic_store(result, (unint64_t *)&qword_1000D27F0);
  }
  return result;
}

unint64_t sub_100067FD4()
{
  unint64_t result;

  result = qword_1000D27F8;
  if (!qword_1000D27F8)
  {
    result = swift_getWitnessTable(&unk_1000A33B8, &unk_1000C7540);
    atomic_store(result, (unint64_t *)&qword_1000D27F8);
  }
  return result;
}

unint64_t sub_100068014()
{
  unint64_t result;

  result = qword_1000D2800;
  if (!qword_1000D2800)
  {
    result = swift_getWitnessTable(&unk_1000A3420, &unk_1000C74B0);
    atomic_store(result, (unint64_t *)&qword_1000D2800);
  }
  return result;
}

uint64_t sub_100068054@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return sub_100065684(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

__n128 *sub_100068074(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1868983913;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

uint64_t sub_10006808C()
{
  return ((uint64_t (*)(void))Error<>._code.getter)();
}

uint64_t sub_100068098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2);
}

unint64_t sub_1000680A0(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_1000680A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000680B4()
{
  uint64_t v0;
  uint64_t v1;

  return swift_getEnumCaseMultiPayload(v0, v1);
}

void sub_1000680C0(_QWORD *a1@<X8>)
{
  *a1 = -1000;
}

uint64_t sub_1000680D8()
{
  return type metadata accessor for ApiAgentError(0);
}

uint64_t sub_1000680E0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000680F4()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _BYTE v8[24];
  _QWORD v9[2];

  v9[0] = 0x2079654B697041;
  v9[1] = 0xE700000000000000;
  if (qword_1000CFA28 != -1)
    swift_once(&qword_1000CFA28, sub_100024068);
  swift_beginAccess(&static Secrets.tempoAPIKey, v8, 0, 0);
  v1 = static Secrets.tempoAPIKey;
  v0 = (void *)qword_1000DD9C0;
  swift_bridgeObjectRetain(qword_1000DD9C0);
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(v0);
  swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v9[0] = &_swiftEmptyDictionarySingleton;
  sub_1000979E0();
  v3 = v9[0];
  sub_1000685DC();
  v4 = sub_10006823C();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v9[0] = v3;
  sub_100068374((uint64_t)v4, (uint64_t)sub_10006859C, 0, isUniquelyReferenced_nonNull_native, v9);
  v6 = v9[0];
  sub_1000685DC();
  return v6;
}

void *sub_10006823C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  void *v10;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v10 = &_swiftEmptyDictionarySingleton;
  sub_1000979E0();
  v4 = v10;
  v5 = sub_1000685DC();
  v6 = static Locale.autoupdatingCurrent.getter(v5);
  Locale.identifier.getter(v6);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_isUniquelyReferenced_nonNull_native(v4);
  v10 = v4;
  sub_1000979E0();
  v7 = v10;
  sub_1000685DC();
  return v7;
}

uint64_t sub_100068374(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  sub_100098ADC(&v44);
  v43 = v44;
  v41 = a1;
  swift_bridgeObjectRetain(a1);
  v42 = a3;
  swift_retain(a3);
  v9 = sub_100098B1C();
  if (v10)
  {
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    while (1)
    {
      v17 = (_QWORD *)*a5;
      v19 = sub_100015050(v13, v14);
      v20 = v17[2];
      v21 = (v18 & 1) == 0;
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
        break;
      v23 = v18;
      if (v17[3] >= v22)
      {
        if ((a4 & 1) == 0)
        {
          sub_10000738C(&qword_1000D2808);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_100097314(v22, a4 & 1);
        v24 = sub_100015050(v13, v14);
        if ((v23 & 1) != (v25 & 1))
          goto LABEL_17;
        v19 = v24;
      }
      v26 = (_QWORD *)*a5;
      if ((v23 & 1) != 0)
      {
        v27 = (uint64_t *)(v26[7] + 16 * v19);
        v29 = *v27;
        v28 = v27[1];
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v16);
        v30 = (_QWORD *)(v26[7] + 16 * v19);
        swift_bridgeObjectRelease(v30[1]);
        *v30 = v29;
        v30[1] = v28;
      }
      else
      {
        v26[(v19 >> 6) + 8] |= 1 << v19;
        v31 = (uint64_t *)(v26[6] + 16 * v19);
        *v31 = v13;
        v31[1] = v14;
        v32 = (_QWORD *)(v26[7] + 16 * v19);
        *v32 = v15;
        v32[1] = v16;
        v33 = v26[2];
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        if (v34)
          goto LABEL_16;
        v26[2] = v35;
      }
      v13 = sub_100098B1C();
      v14 = v36;
      v15 = v37;
      v16 = v38;
      a4 = 1;
      if (!v36)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease(v41);
    v39 = v45;
    swift_release(v42);
    sub_1000180CC(v43);
    return swift_release(v39);
  }
  return result;
}

uint64_t sub_10006859C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = sub_100096FD4(v7, *a1, a1[1], a1[2], a1[3]);
  v4 = v7[0];
  v5 = v7[1];
  *a2 = result;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

uint64_t sub_1000685DC()
{
  return swift_bridgeObjectRelease(0x8000000000000000);
}

uint64_t sub_1000685E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10006861C + 4 * byte_1000A3580[a1]))(0xD000000000000012, 0x80000001000A57C0);
}

void sub_10006861C()
{
  sub_10006CB5C();
}

uint64_t sub_10006866C()
{
  return 0x4B434F4C435F5654;
}

uint64_t sub_100068690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v18;

  v3 = *(_QWORD *)(v2 + 40);
  if (!v3 || !*(_QWORD *)(v3 + 16))
    return 2;
  swift_bridgeObjectRetain(a2);
  v6 = sub_100015050(a1, a2);
  if ((v7 & 1) == 0)
  {
    v16 = a2;
LABEL_21:
    swift_bridgeObjectRelease(v16);
    return 2;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(a2);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    v16 = v8;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain(v8);
  for (i = (uint64_t *)(v8 + 56); ; i += 4)
  {
    v11 = *(i - 3);
    v12 = *(i - 2);
    v14 = *(i - 1);
    v13 = *i;
    v15 = v11 == 0x495349565F504250 && v12 == 0xEB00000000454C42;
    if (v15 || (sub_100040098(v11, v12, 0x495349565F504250, 0xEB00000000454C42) & 1) != 0)
      break;
    if (!--v9)
    {
      sub_10006CBAC();
      return v9;
    }
  }
  sub_10000A834();
  sub_10006CBAC();
  if (v13)
  {
    if (v14 == 1702195828 && v13 == 0xE400000000000000)
      v18 = 1;
    else
      v18 = sub_100040098(v14, v13, 1702195828, 0xE400000000000000);
    swift_bridgeObjectRelease(v13);
    return v18 & 1;
  }
  return v9;
}

void sub_1000687F4(Swift::String string)
{
  void *object;
  Swift::String v2;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C2BE8, v2);
  sub_1000185B4();
  sub_100006200();
}

void sub_100068834(char *a1)
{
  sub_100055FC8(*a1);
}

void sub_100068840()
{
  unsigned __int8 *v0;

  sub_100056538(*v0);
}

void sub_100068848(uint64_t a1)
{
  char *v1;

  sub_100056870(a1, *v1);
}

void sub_100068850(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100056BAC(a1, *v1);
}

void sub_100068858(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  sub_1000687F4(*a1);
  *a2 = v3;
}

uint64_t sub_100068884@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1000685E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000688AC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v9;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001000A78A0;
    if (a2 == 0x80000001000A78A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001000A78A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001000A78C0)
  {
    v6 = 0x80000001000A78C0;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000A78C0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000001000A78E0)
  {
    v7 = 0x80000001000A78E0;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000A78E0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x4C70656544707061 && a2 == 0xEE004C52556B6E69)
  {
    swift_bridgeObjectRelease(0xEE004C52556B6E69);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C70656544707061, 0xEE004C52556B6E69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100068A70()
{
  return 4;
}

uint64_t sub_100068A78(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100068AB0 + 4 * byte_1000A3586[a1]))(0xD000000000000010, 0x80000001000A78A0);
}

uint64_t sub_100068AB0(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_100068AD8()
{
  return 0x4C70656544707061;
}

void sub_100068AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  sub_100055A28();
  a19 = v21;
  a20 = v22;
  v36 = v24;
  v37 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v31 = sub_10000738C(&qword_1000D2A30);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = v30[3];
  v33 = v30[4];
  sub_1000073CC(v30, v34);
  v35 = sub_10006C500();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s20RegistrationResponseV5LinksV10CodingKeysON, &_s20RegistrationResponseV5LinksV10CodingKeysON, v35, v34, v33);
  a10 = v28;
  v38 = 0;
  sub_10000738C(&qword_1000D0490);
  sub_10006BBC8((uint64_t)&unk_1000D2960);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&a10, &v38, v31);
  if (!v20)
  {
    a10 = v37;
    sub_10006C9E4(1);
    a10 = v26;
    sub_10006C9E4(2);
    a10 = v36;
    sub_10006C9E4(3);
  }
  sub_100055A48(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  sub_100055A00();
}

void sub_100068C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  sub_100055A28();
  v12 = v11;
  v13 = sub_10000738C(&qword_1000D2A00);
  __chkstk_darwin(v13);
  sub_100040030();
  v14 = v12[3];
  v15 = v12[4];
  sub_1000073CC(v12, v14);
  v16 = sub_10006C500();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s20RegistrationResponseV5LinksV10CodingKeysON, &_s20RegistrationResponseV5LinksV10CodingKeysON, v16, v14, v15);
  if (v10)
  {
    sub_100031AC4();
  }
  else
  {
    v17 = sub_10000738C(&qword_1000D0490);
    v20 = 0;
    sub_10006BBC8((uint64_t)&qword_1000D1080);
    v19 = v18;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &v20, v13, v17);
    sub_10006CBC8(1);
    sub_10006CA80();
    sub_10006CBC8(2);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v17, &v20, v13, v17, v19);
    v20 = 3;
    swift_bridgeObjectRetain(a10);
    sub_10006CA80();
    sub_10006CA70();
    sub_10000A834();
    sub_100031AC4();
    swift_bridgeObjectRelease();
    sub_10001883C();
    sub_10001883C();
    swift_bridgeObjectRelease();
  }
  sub_100055A00();
}

void sub_100068E94(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v5;

  v2 = a1 == 0x65727574616566 && a2 == 0xE700000000000000;
  if (v2
    || (sub_100040098(0x65727574616566, 0xE700000000000000, a1, a2) & 1) != 0
    || (a1 == 0x65756C6176 ? (v5 = a2 == 0xE500000000000000) : (v5 = 0), v5))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100040098(0x65756C6176, 0xE500000000000000, a1, a2);
    sub_1000185B4();
  }
  sub_100006200();
}

void sub_100068F68(uint64_t a1)
{
  char v1;

  sub_10006CB84(a1);
  Hasher._combine(_:)(v1 & 1);
  sub_100018CA8();
  sub_100055B2C();
}

uint64_t sub_100068F94(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65756C6176;
  else
    return 0x65727574616566;
}

void sub_100068FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  sub_100055A28();
  a22 = v27;
  a23 = v28;
  v30 = v29;
  v32 = v31;
  v47 = v33;
  v45 = v34;
  v46 = v35;
  v37 = v36;
  v39 = v38;
  sub_10000738C(v40);
  sub_10006CB08();
  __chkstk_darwin(v41);
  sub_10000A6E4();
  v42 = v39[3];
  v43 = v39[4];
  sub_1000073CC(v39, v42);
  v44 = v32();
  dispatch thunk of Encoder.container<A>(keyedBy:)(v30, v30, v44, v42, v43);
  a13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v37, v47, &a13, v23);
  if (!v24)
  {
    a12 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v46, &a12, v23);
  }
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v23);
  sub_100055A00();
}

void sub_1000690B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t (*v29)(void);
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_100055A28();
  a22 = v24;
  a23 = v25;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v39 = sub_10000738C(v32);
  __chkstk_darwin(v39);
  sub_100040030();
  v33 = v31[3];
  v34 = v31[4];
  sub_1000073CC(v31, v33);
  v35 = v29();
  dispatch thunk of Decoder.container<A>(keyedBy:)(v27, v27, v35, v33, v34);
  if (v23)
  {
    sub_100055A98();
  }
  else
  {
    a13 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&a13, v39);
    a12 = 1;
    swift_bridgeObjectRetain(v36);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a12, v39);
    v38 = v37;
    sub_10006CAF8();
    swift_bridgeObjectRetain(v38);
    sub_100055A98();
    sub_100055AA8();
    sub_100018D80();
  }
  sub_100055A00();
}

void sub_100069204(Swift::String string)
{
  void *object;
  Swift::String v2;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000C2C98, v2);
  sub_1000185B4();
  sub_100006200();
}

uint64_t sub_100069248(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100069278 + 4 * byte_1000A358A[a1]))(0x736B6E696CLL, 0xE500000000000000);
}

void sub_100069278()
{
  sub_10006CB5C();
}

unint64_t sub_1000692C4()
{
  return sub_10006CB48();
}

uint64_t sub_1000692D8()
{
  return 2003134838;
}

uint64_t sub_1000692E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100069318 + 4 * byte_1000A3592[a1]))(0x736B6E696CLL, 0xE500000000000000);
}

void sub_100069318()
{
  sub_10006CB5C();
}

unint64_t sub_100069364()
{
  return sub_10006CB48();
}

uint64_t sub_100069378()
{
  return 2003134838;
}

void sub_100069388()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  sub_10000738C(&qword_1000D2978);
  sub_10006CB08();
  __chkstk_darwin(v4);
  v5 = sub_10006CBE8();
  sub_100055A54((uint64_t)&unk_1000C79E0, v6, v5);
  v7 = v1[3];
  v17 = *v1;
  v18 = *(_OWORD *)(v1 + 1);
  v19 = v7;
  v16 = 0;
  sub_10006BC14();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v0);
  if (!v2)
  {
    sub_10006CB1C(v1[7], *((unsigned __int8 *)v1 + 64), 1);
    sub_10006CB1C(v1[9], *((unsigned __int8 *)v1 + 80), 2);
    v17 = v1[4];
    v16 = 3;
    sub_10000738C(&qword_1000D28E0);
    v8 = sub_10006BC50();
    sub_10006CA30(v8);
    v17 = v1[5];
    v16 = 4;
    sub_10000738C(&qword_1000D2908);
    v9 = sub_10006BD18();
    sub_10006CA30(v9);
    v17 = v1[6];
    v16 = 5;
    sub_10000738C(&qword_1000D2930);
    v10 = sub_10006BE34();
    sub_10006CA30(v10);
    v11 = v1[11];
    v12 = v1[12];
    LOBYTE(v17) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v11, v12, &v17, v0);
    v13 = (uint64_t)v1 + *(int *)(_s20RegistrationResponseVMa(0) + 44);
    LOBYTE(v17) = 7;
    v14 = type metadata accessor for SportingEventViewContext(0);
    sub_10006BEB8((uint64_t)&unk_1000D29C8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v13, &v17, v0, v14, v15);
  }
  sub_100055A48(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_100055A68();
}

void sub_1000695A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  sub_100055A28();
  a22 = v25;
  a23 = v26;
  v28 = v27;
  v46 = v29;
  v30 = sub_10000738C(&qword_1000D1298);
  __chkstk_darwin(v30);
  sub_10000A6E4();
  v47 = sub_10000738C(&qword_1000D28C8);
  __chkstk_darwin(v47);
  sub_10000A7D4();
  v31 = _s20RegistrationResponseVMa(0);
  __chkstk_darwin(v31);
  sub_10000A7D4();
  v48 = v33 - v32;
  v34 = *(_QWORD *)(v28 + 24);
  v35 = *(_QWORD *)(v28 + 32);
  v36 = sub_10006CBE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1000C79E0, &unk_1000C79E0, v36, v34, v35);
  if (v23)
  {
    sub_10000CD2C();
  }
  else
  {
    a13 = 0;
    sub_10006B86C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&unk_1000C7B58, &a13, v47, &unk_1000C7B58);
    v37 = v51;
    *(_QWORD *)v48 = v49;
    *(_OWORD *)(v48 + 8) = v50;
    *(_QWORD *)(v48 + 24) = v37;
    *(_QWORD *)(v48 + 56) = sub_10006CB34(1);
    *(_BYTE *)(v48 + 64) = v38 & 1;
    *(_QWORD *)(v48 + 72) = sub_10006CB34(2);
    *(_BYTE *)(v48 + 80) = v39 & 1;
    sub_10000738C(&qword_1000D28E0);
    a13 = 3;
    v40 = sub_10006B8A8();
    sub_10006CA50(v40);
    *(_QWORD *)(v48 + 32) = v49;
    sub_10000738C(&qword_1000D2908);
    a13 = 4;
    v41 = sub_10006B970();
    sub_10006CA50(v41);
    *(_QWORD *)(v48 + 40) = v49;
    sub_10000738C(&qword_1000D2930);
    a13 = 5;
    v42 = sub_10006BA38();
    sub_10006CA50(v42);
    *(_QWORD *)(v48 + 48) = v49;
    LOBYTE(v49) = 6;
    *(_QWORD *)(v48 + 88) = KeyedDecodingContainer.decode(_:forKey:)(&v49, v47);
    *(_QWORD *)(v48 + 96) = v43;
    v44 = type metadata accessor for SportingEventViewContext(0);
    LOBYTE(v49) = 7;
    sub_10006BEB8((uint64_t)&unk_1000D2940);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v44, &v49, v47, v44, v45);
    sub_10006C9D4();
    sub_10006BABC(v24, v48 + *(int *)(v31 + 44));
    sub_100060DEC(v48, v46);
    sub_10000CD2C();
    sub_10006BB04(v48);
  }
  sub_100055A00();
}

uint64_t sub_10006997C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v10;
  unint64_t v12;
  unint64_t v14;
  unint64_t v16;
  unint64_t v18;
  char v20;

  if (a1 == 0x6556746E65696C63 && a2 == 0xED00006E6F697372)
  {
    v5 = 0xED00006E6F697372;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556746E65696C63, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6556616D65686373 && a2 == 0xED00006E6F697372)
  {
    v8 = 0xED00006E6F697372;
    goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556616D65686373, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1;
  }
  if (a1 == 0x6E656B6F74 && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F74, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v12 = 0xE400000000000000;
    goto LABEL_32;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3;
  }
  if (a1 == 0x746163696C707061 && a2 == 0xEB000000006E6F69)
  {
    v14 = 0xEB000000006E6F69;
    goto LABEL_40;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746163696C707061, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4;
  }
  if (a1 == 0x6163696E6F6E6163 && a2 == 0xEC0000007364496CLL)
  {
    v16 = 0xEC0000007364496CLL;
    goto LABEL_48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6163696E6F6E6163, 0xEC0000007364496CLL, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5;
  }
  if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    v18 = 0xEA00000000007372;
    goto LABEL_56;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574656D61726170, 0xEA00000000007372, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v18);
    return 6;
  }
  if (a1 == 0x656469727265766FLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 7;
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656469727265766FLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v20 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_100069D0C()
{
  return 8;
}

void sub_100069D14(uint64_t a1)
{
  unsigned __int8 v1;

  sub_10006CB84(a1);
  Hasher._combine(_:)(v1);
  sub_100018CA8();
  sub_100055B2C();
}

uint64_t sub_100069D40(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100069D80 + 4 * byte_1000A359A[a1]))(0x6556746E65696C63, 0xED00006E6F697372);
}

uint64_t sub_100069D80()
{
  return 0x6556616D65686373;
}

uint64_t sub_100069D94()
{
  return 0x6E656B6F74;
}

uint64_t sub_100069DA8()
{
  return 1701869940;
}

uint64_t sub_100069DB8()
{
  return 0x746163696C707061;
}

uint64_t sub_100069DD8()
{
  return 0x6163696E6F6E6163;
}

uint64_t sub_100069DF8()
{
  return 0x6574656D61726170;
}

uint64_t sub_100069E14()
{
  return 0x656469727265766FLL;
}

void sub_100069E2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = v2;
  sub_10000738C(&qword_1000D2948);
  sub_10006CB08();
  __chkstk_darwin(v7);
  sub_1000073CC(a1, a1[3]);
  v8 = sub_10006BB40();
  sub_100055A54((uint64_t)&_s23RegistrationRequestBodyV10CodingKeysON, v9, v8);
  v10 = *(_QWORD *)v5;
  v11 = *(_QWORD *)(v5 + 8);
  LOBYTE(v21) = 0;
  sub_10006CA1C(v10, v11);
  if (!v3)
  {
    v12 = *(_QWORD *)(v5 + 16);
    v13 = *(_QWORD *)(v5 + 24);
    LOBYTE(v21) = 1;
    sub_10006CA1C(v12, v13);
    v14 = *(_QWORD *)(v5 + 32);
    v15 = *(_QWORD *)(v5 + 40);
    LOBYTE(v21) = 2;
    sub_10006CA1C(v14, v15);
    v16 = *(_QWORD *)(v5 + 48);
    v17 = *(_QWORD *)(v5 + 56);
    LOBYTE(v21) = 3;
    sub_10006CA1C(v16, v17);
    v18 = *(_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v5 + 72);
    LOBYTE(v21) = 4;
    sub_10006CA1C(v18, v19);
    v21 = *(_QWORD *)(v5 + 80);
    sub_10000738C(&qword_1000D0440);
    sub_10006BB7C((uint64_t)&unk_1000D2958);
    sub_10006CAC8();
    v21 = *(_QWORD *)(v5 + 88);
    sub_10000738C(&qword_1000D0490);
    sub_10006BBC8((uint64_t)&unk_1000D2960);
    sub_10006CAC8();
    v20 = *(unsigned __int8 *)(v5 + 96);
    LOBYTE(v21) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v21, v1);
  }
  sub_100055A48(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_100055A68();
}

void sub_100069FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  sub_100055A28();
  a19 = v21;
  a20 = v22;
  v24 = v23;
  v26 = v25;
  v27 = sub_10000738C(&qword_1000D2968);
  __chkstk_darwin(v27);
  sub_10000A7D4();
  v28 = v24[3];
  v29 = v24[4];
  sub_1000073CC(v24, v28);
  v30 = sub_10006BB40();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s23RegistrationRequestBodyV10CodingKeysON, &_s23RegistrationRequestBodyV10CodingKeysON, v30, v28, v29);
  if (v20)
  {
    sub_10006CBE0();
  }
  else
  {
    LOBYTE(a10) = 0;
    v31 = sub_10006CA08();
    sub_10006CAE8(v32, 1);
    v54 = sub_10006CA08();
    sub_10006CAE8(v33, 2);
    v53 = sub_10006CA08();
    sub_10006CAE8(v34, 3);
    v52 = sub_10006CA08();
    LOBYTE(a10) = 4;
    v56 = v35;
    swift_bridgeObjectRetain(v35);
    v36 = sub_10006CA08();
    v55 = v37;
    v51 = v36;
    v38 = sub_10000738C(&qword_1000D0440);
    v57 = 5;
    sub_10006BB7C((uint64_t)&unk_1000D2970);
    v40 = v39;
    swift_bridgeObjectRetain(v55);
    sub_10006CB9C(v38, (uint64_t)&v57, v27, v38);
    if (v40)
    {
      sub_10006C9C4();
      sub_100055AB0();
      sub_100055A40();
      sub_10006CB7C();
      sub_10006CB94();
      swift_bridgeObjectRelease();
      v41 = 0;
    }
    else
    {
      v42 = a10;
      v48 = sub_10000738C(&qword_1000D0490);
      v57 = 6;
      sub_10006BBC8((uint64_t)&qword_1000D1080);
      v44 = v43;
      v50 = v42;
      sub_10000A834();
      sub_10006CB9C(v48, (uint64_t)&v57, v27, v48);
      if (!v44)
      {
        v45 = a10;
        LOBYTE(a10) = 7;
        v49 = v45;
        v46 = swift_bridgeObjectRetain(v45);
        v47 = KeyedDecodingContainer.decode(_:forKey:)(&a10, v27, v46);
        sub_10006C9C4();
        sub_10006CBE0();
        swift_bridgeObjectRelease();
        sub_100018D80();
        swift_bridgeObjectRelease();
        sub_100055AA8();
        sub_10001883C();
        sub_100031AA8();
        swift_bridgeObjectRelease();
        *(_QWORD *)v26 = v31;
        *(_QWORD *)(v26 + 8) = v28;
        *(_QWORD *)(v26 + 16) = v54;
        *(_QWORD *)(v26 + 24) = v28;
        *(_QWORD *)(v26 + 32) = v53;
        *(_QWORD *)(v26 + 40) = v28;
        *(_QWORD *)(v26 + 48) = v52;
        *(_QWORD *)(v26 + 56) = v56;
        *(_QWORD *)(v26 + 64) = v51;
        *(_QWORD *)(v26 + 72) = v55;
        *(_QWORD *)(v26 + 80) = v50;
        *(_QWORD *)(v26 + 88) = v49;
        *(_BYTE *)(v26 + 96) = v47 & 1;
        goto LABEL_6;
      }
      sub_10006C9C4();
      sub_100055AB0();
      sub_100055A40();
      sub_10006CB7C();
      sub_10006CB94();
      sub_10006CC0C();
      swift_bridgeObjectRelease();
      v41 = 1;
    }
    sub_10006CBE0();
    sub_100055AB0();
    sub_100055A40();
    sub_10006CB7C();
    sub_10006CB94();
    sub_10006CC0C();
    if ((v41 & 1) != 0)
      sub_100018D80();
  }
LABEL_6:
  sub_100055A00();
}

void sub_10006A440()
{
  unsigned __int8 *v0;

  sub_100069D14(*v0);
}

uint64_t sub_10006A45C()
{
  unsigned __int8 *v0;

  return sub_100068A78(*v0);
}

uint64_t sub_10006A464@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000688AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006A488@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100068A70();
  *a1 = result;
  return result;
}

uint64_t sub_10006A4AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C500();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A4D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C500();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10006A4FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_100068C54(a1, a2, a3, a4, a5, a6, a7, a8, v15, v16);
  if (!v9)
  {
    *a9 = v11;
    a9[1] = v12;
    a9[2] = v13;
    a9[3] = v14;
  }
}

#error "10006A538: call analysis failed (funcsize=7)"

uint64_t sub_10006A544(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C53C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A56C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C53C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006A594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A6D8(a1, a2, a3, &unk_1000D2A10, sub_10006C53C, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
}

#error "10006A5E8: call analysis failed (funcsize=10)"

void sub_10006A5F4()
{
  unsigned __int8 *v0;

  sub_100068F68(*v0);
}

void sub_10006A60C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  v1 = sub_10006CBBC(a1);
  sub_1000578D8(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_100018CA8();
  sub_100055B2C();
}

uint64_t sub_10006A630()
{
  char *v0;

  return sub_100068F94(*v0);
}

void sub_10006A638(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  sub_100068E94(a1, a2);
  *a3 = v4;
}

uint64_t sub_10006A65C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C578();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A684(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006C578();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006A6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A6D8(a1, a2, a3, &unk_1000D2A20, sub_10006C578, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
}

#error "10006A6F4: call analysis failed (funcsize=14)"

#error "10006A738: call analysis failed (funcsize=10)"

void sub_10006A744(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_100056250(*a1, *a2);
}

void sub_10006A750()
{
  unsigned __int8 *v0;

  sub_100056544(*v0);
}

uint64_t sub_10006A758(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1000569AC(a1, *v1);
}

void sub_10006A760(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100056B00(a1, *v1);
}

void sub_10006A768(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;

  sub_100069204(*a1);
  *a2 = v3;
}

uint64_t sub_10006A794@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100069248(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006A7BC()
{
  unsigned __int8 *v0;

  return sub_1000692E8(*v0);
}

uint64_t sub_10006A7C4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100069244(a1);
  *a2 = result;
  return result;
}

void sub_10006A7E8(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10006A7F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006B830();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A81C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006B830();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "10006A84C: call analysis failed (funcsize=5)"

void sub_10006A858()
{
  sub_100069388();
}

uint64_t sub_10006A86C()
{
  unsigned __int8 *v0;

  return sub_100069D40(*v0);
}

uint64_t sub_10006A874@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006997C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006A898@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100069D0C();
  *a1 = result;
  return result;
}

uint64_t sub_10006A8BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006BB40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006A8E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006BB40();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10006A90C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t __src[13];

  sub_100069FEC(a1, a2, a3, a4, a5, a6, a7, a8, v11, __src[0], __src[1], __src[2], __src[3], __src[4], __src[5], __src[6], __src[7], __src[8], __src[9],
    __src[10]);
  if (!v9)
    memcpy(a9, __src, 0x61uLL);
}

void sub_10006A954(_QWORD *a1)
{
  sub_100069E2C(a1);
}

uint64_t sub_10006A968(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t sub_10006A9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10006AA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

void *sub_10006AB60(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x61uLL);
}

uint64_t sub_10006AB68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v12 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t sub_10006AC04(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 97))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10006AC44(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 97) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void _s23RegistrationRequestBodyVMa()
{
  sub_100031ABC();
}

uint64_t sub_10006ACAC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  void *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[1];
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[3];
    v9 = a2[4];
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    v11 = a2[5];
    v10 = a2[6];
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    v12 = a2[9];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    *(_QWORD *)(a1 + 72) = v12;
    v13 = a2[12];
    v14 = *(int *)(a3 + 44);
    v18 = (char *)a2 + v14;
    __dst = (void *)(a1 + v14);
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v13;
    v15 = type metadata accessor for SportingEventViewContext(0);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    if (sub_100009658((uint64_t)v18, 1, v15))
    {
      v16 = sub_10000738C(&qword_1000D1298);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(__dst, v18, v15);
      sub_10000964C((uint64_t)__dst, 0, 1, v15);
    }
  }
  return v5;
}

uint64_t sub_10006AE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for SportingEventViewContext(0);
  result = sub_100009658(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t sub_10006AED0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  void *__dst;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v11 = a2[6];
  v10 = a2[7];
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 72) = a2[9];
  v12 = a2[12];
  v13 = *(int *)(a3 + 44);
  v17 = (char *)a2 + v13;
  __dst = (void *)(a1 + v13);
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = v12;
  v14 = type metadata accessor for SportingEventViewContext(0);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (sub_100009658((uint64_t)v17, 1, v14))
  {
    v15 = sub_10000738C(&qword_1000D1298);
    memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(__dst, v17, v14);
    sub_10000964C((uint64_t)__dst, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_10006B020(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[1];
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = a2[2];
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  v9 = a2[3];
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = a2[4];
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = a2[5];
  *(_QWORD *)(a1 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  v12 = a2[6];
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  v13 = a2[7];
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  v14 = a2[9];
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_QWORD *)(a1 + 72) = v14;
  *(_QWORD *)(a1 + 88) = a2[11];
  v15 = a2[12];
  *(_QWORD *)(a1 + 96) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v16 = *(int *)(a3 + 44);
  v17 = (void *)(a1 + v16);
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for SportingEventViewContext(0);
  v20 = sub_100009658((uint64_t)v17, 1, v19);
  v21 = sub_100009658((uint64_t)v18, 1, v19);
  if (!v20)
  {
    v22 = *(_QWORD *)(v19 - 8);
    if (!v21)
    {
      (*(void (**)(void *, char *, uint64_t))(v22 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v23 = sub_10000738C(&qword_1000D1298);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  sub_10000964C((uint64_t)v17, 0, 1, v19);
  return a1;
}

uint64_t sub_10006B204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(int *)(a3 + 44);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v9 = type metadata accessor for SportingEventViewContext(0);
  if (sub_100009658((uint64_t)v8, 1, v9))
  {
    v10 = sub_10000738C(&qword_1000D1298);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    sub_10000964C((uint64_t)v7, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_10006B2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 44);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for SportingEventViewContext(0);
  v11 = sub_100009658((uint64_t)v8, 1, v10);
  v12 = sub_100009658((uint64_t)v9, 1, v10);
  if (!v11)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = sub_10000738C(&qword_1000D1298);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  sub_10000964C((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10006B47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B488);
}

uint64_t sub_10006B488(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000738C(&qword_1000D1298);
    return sub_100009658((uint64_t)a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_10006B500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B50C);
}

_QWORD *sub_10006B50C(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = sub_10000738C(&qword_1000D1298);
    return (_QWORD *)sub_10000964C((uint64_t)v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t _s20RegistrationResponseVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1000D2868;
  if (!qword_1000D2868)
    return swift_getSingletonMetadata(a1, &_s20RegistrationResponseVMn);
  return result;
}

void sub_10006B5B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = " ";
  v4[1] = &unk_1000A3620;
  v4[2] = &unk_1000A3620;
  v4[3] = &unk_1000A3620;
  v4[4] = &unk_1000A3638;
  v4[5] = &unk_1000A3638;
  v4[6] = &unk_1000A3650;
  sub_10006B64C(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

void sub_10006B64C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000D2878)
  {
    v2 = type metadata accessor for SportingEventViewContext(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000D2878);
  }
}

uint64_t sub_10006B6A0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10006B728(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10006B774 + 4 * byte_1000A35A7[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10006B7A8 + 4 * byte_1000A35A2[v4]))();
}

uint64_t sub_10006B7A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B7B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006B7B8);
  return result;
}

uint64_t sub_10006B7C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006B7CCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10006B7D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B7D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ApplicationType()
{
  sub_100031ABC();
}

unint64_t sub_10006B7F4()
{
  unint64_t result;

  result = qword_1000D28C0;
  if (!qword_1000D28C0)
  {
    result = swift_getWitnessTable(&unk_1000A36F8, &unk_1000C78C0);
    atomic_store(result, (unint64_t *)&qword_1000D28C0);
  }
  return result;
}

unint64_t sub_10006B830()
{
  unint64_t result;

  result = qword_1000D28D0;
  if (!qword_1000D28D0)
  {
    result = swift_getWitnessTable(&unk_1000A3AF4, &unk_1000C79E0);
    atomic_store(result, (unint64_t *)&qword_1000D28D0);
  }
  return result;
}

unint64_t sub_10006B86C()
{
  unint64_t result;

  result = qword_1000D28D8;
  if (!qword_1000D28D8)
  {
    result = swift_getWitnessTable(&unk_1000A3ACC, &unk_1000C7B58);
    atomic_store(result, (unint64_t *)&qword_1000D28D8);
  }
  return result;
}

unint64_t sub_10006B8A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D28E8;
  if (!qword_1000D28E8)
  {
    v1 = sub_100007648(&qword_1000D28E0);
    sub_10006BDA4((uint64_t)&unk_1000D28F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000D28E8);
  }
  return result;
}

unint64_t sub_10006B934()
{
  unint64_t result;

  result = qword_1000D2900;
  if (!qword_1000D2900)
  {
    result = swift_getWitnessTable(&unk_1000A3AA4, &unk_1000C7AD8);
    atomic_store(result, (unint64_t *)&qword_1000D2900);
  }
  return result;
}

unint64_t sub_10006B970()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2910;
  if (!qword_1000D2910)
  {
    v1 = sub_100007648(&qword_1000D2908);
    sub_10006BDA4((uint64_t)&unk_1000D2918);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000D2910);
  }
  return result;
}

unint64_t sub_10006B9FC()
{
  unint64_t result;

  result = qword_1000D2928;
  if (!qword_1000D2928)
  {
    result = swift_getWitnessTable(&unk_1000A3A7C, &unk_1000C7A58);
    atomic_store(result, (unint64_t *)&qword_1000D2928);
  }
  return result;
}

unint64_t sub_10006BA38()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2938;
  if (!qword_1000D2938)
  {
    v1 = sub_100007648(&qword_1000D2930);
    sub_10006BEB8((uint64_t)&unk_1000D2288);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000D2938);
  }
  return result;
}

uint64_t sub_10006BABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D1298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BB04(uint64_t a1)
{
  uint64_t v2;

  v2 = _s20RegistrationResponseVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10006BB40()
{
  unint64_t result;

  result = qword_1000D2950;
  if (!qword_1000D2950)
  {
    result = swift_getWitnessTable(&unk_1000A3A2C, &_s23RegistrationRequestBodyV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2950);
  }
  return result;
}

void sub_10006BB7C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;

  if (!sub_10006CBD4(a1))
  {
    v2 = sub_100007648(&qword_1000D0440);
    atomic_store(sub_10006CC04(v2, v2), v1);
  }
  sub_100024954();
}

void sub_10006BBC8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;

  if (!sub_10006CBD4(a1))
  {
    v2 = sub_100007648(&qword_1000D0490);
    atomic_store(sub_10006CC04(v2, v2), v1);
  }
  sub_100024954();
}

unint64_t sub_10006BC14()
{
  unint64_t result;

  result = qword_1000D2980;
  if (!qword_1000D2980)
  {
    result = swift_getWitnessTable(&unk_1000A3A04, &unk_1000C7B58);
    atomic_store(result, (unint64_t *)&qword_1000D2980);
  }
  return result;
}

unint64_t sub_10006BC50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2988;
  if (!qword_1000D2988)
  {
    v1 = sub_100007648(&qword_1000D28E0);
    sub_10006BDA4((uint64_t)&unk_1000D2990);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000D2988);
  }
  return result;
}

unint64_t sub_10006BCDC()
{
  unint64_t result;

  result = qword_1000D2998;
  if (!qword_1000D2998)
  {
    result = swift_getWitnessTable(&unk_1000A39DC, &unk_1000C7AD8);
    atomic_store(result, (unint64_t *)&qword_1000D2998);
  }
  return result;
}

unint64_t sub_10006BD18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D29A0;
  if (!qword_1000D29A0)
  {
    v1 = sub_100007648(&qword_1000D2908);
    sub_10006BDA4((uint64_t)&unk_1000D29A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000D29A0);
  }
  return result;
}

void sub_10006BDA4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  void (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;

  if (!sub_10006CBD4(a1))
  {
    v5 = v4;
    v6 = v3;
    v7 = sub_100007648(v2);
    v6();
    atomic_store(swift_getWitnessTable(v5, v7), v1);
  }
  sub_100024954();
}

unint64_t sub_10006BDF8()
{
  unint64_t result;

  result = qword_1000D29B0;
  if (!qword_1000D29B0)
  {
    result = swift_getWitnessTable(&unk_1000A39B4, &unk_1000C7A58);
    atomic_store(result, (unint64_t *)&qword_1000D29B0);
  }
  return result;
}

unint64_t sub_10006BE34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D29B8;
  if (!qword_1000D29B8)
  {
    v1 = sub_100007648(&qword_1000D2930);
    sub_10006BEB8((uint64_t)&unk_1000D29C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000D29B8);
  }
  return result;
}

void sub_10006BEB8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  if (!sub_10006CBD4(a1))
  {
    v3 = v2(255);
    atomic_store(sub_10006CC04(v3, v3), v1);
  }
  sub_100006200();
}

ValueMetadata *_s23RegistrationRequestBodyV10CodingKeysOMa()
{
  return &_s23RegistrationRequestBodyV10CodingKeysON;
}

uint64_t _s23RegistrationRequestBodyV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 7) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v5 = v6 - 8;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s23RegistrationRequestBodyV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10006BFD8 + 4 * byte_1000A35B1[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10006C00C + 4 * byte_1000A35AC[v4]))();
}

uint64_t sub_10006C00C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006C01CLL);
  return result;
}

uint64_t sub_10006C028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006C030);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10006C034(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C03C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void _s20RegistrationResponseV10CodingKeysOMa()
{
  sub_100031ABC();
}

void _s20RegistrationResponseV16DeliveryFeaturesVMa()
{
  sub_100031ABC();
}

uint64_t sub_10006C078(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

void sub_10006C0A0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  sub_10000A834();
  sub_100006200();
}

_QWORD *sub_10006C0D4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  sub_1000185B4();
  return a1;
}

void sub_10006C13C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  sub_100006200();
}

uint64_t sub_10006C17C(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10006C1BC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void _s20RegistrationResponseV19RunningClockFeatureVMa()
{
  sub_100031ABC();
}

uint64_t sub_10006C208(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *sub_10006C240(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *sub_10006C294(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

_QWORD *sub_10006C320(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

void _s20RegistrationResponseV5LinksVMa()
{
  sub_100031ABC();
}

unint64_t sub_10006C384()
{
  unint64_t result;

  result = qword_1000D29D0;
  if (!qword_1000D29D0)
  {
    result = swift_getWitnessTable(&unk_1000A38D4, &unk_1000C79E0);
    atomic_store(result, (unint64_t *)&qword_1000D29D0);
  }
  return result;
}

unint64_t sub_10006C3C4()
{
  unint64_t result;

  result = qword_1000D29D8;
  if (!qword_1000D29D8)
  {
    result = swift_getWitnessTable(&unk_1000A398C, &_s23RegistrationRequestBodyV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D29D8);
  }
  return result;
}

unint64_t sub_10006C404()
{
  unint64_t result;

  result = qword_1000D29E0;
  if (!qword_1000D29E0)
  {
    result = swift_getWitnessTable(&unk_1000A38FC, &_s23RegistrationRequestBodyV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D29E0);
  }
  return result;
}

unint64_t sub_10006C444()
{
  unint64_t result;

  result = qword_1000D29E8;
  if (!qword_1000D29E8)
  {
    result = swift_getWitnessTable(&unk_1000A3924, &_s23RegistrationRequestBodyV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D29E8);
  }
  return result;
}

unint64_t sub_10006C484()
{
  unint64_t result;

  result = qword_1000D29F0;
  if (!qword_1000D29F0)
  {
    result = swift_getWitnessTable(&unk_1000A380C, &unk_1000C79E0);
    atomic_store(result, (unint64_t *)&qword_1000D29F0);
  }
  return result;
}

unint64_t sub_10006C4C4()
{
  unint64_t result;

  result = qword_1000D29F8;
  if (!qword_1000D29F8)
  {
    result = swift_getWitnessTable(&unk_1000A3834, &unk_1000C79E0);
    atomic_store(result, (unint64_t *)&qword_1000D29F8);
  }
  return result;
}

unint64_t sub_10006C500()
{
  unint64_t result;

  result = qword_1000D2A08;
  if (!qword_1000D2A08)
  {
    result = swift_getWitnessTable(&unk_1000A3E0C, &_s20RegistrationResponseV5LinksV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A08);
  }
  return result;
}

unint64_t sub_10006C53C()
{
  unint64_t result;

  result = qword_1000D2A18;
  if (!qword_1000D2A18)
  {
    result = swift_getWitnessTable(&unk_1000A3DBC, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A18);
  }
  return result;
}

unint64_t sub_10006C578()
{
  unint64_t result;

  result = qword_1000D2A28;
  if (!qword_1000D2A28)
  {
    result = swift_getWitnessTable(&unk_1000A3D6C, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A28);
  }
  return result;
}

ValueMetadata *_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysOMa()
{
  return &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON;
}

uint64_t _s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10006C618 + 4 * byte_1000A35BB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006C64C + 4 * byte_1000A35B6[v4]))();
}

uint64_t sub_10006C64C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C654(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006C65CLL);
  return result;
}

uint64_t sub_10006C668(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006C670);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10006C674(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C67C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysOMa()
{
  return &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON;
}

uint64_t _s20RegistrationResponseV5LinksV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10006C6E4 + 4 * byte_1000A35C5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10006C718 + 4 * byte_1000A35C0[v4]))();
}

uint64_t sub_10006C718(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006C728);
  return result;
}

uint64_t sub_10006C734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006C73CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10006C740(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C748(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s20RegistrationResponseV5LinksV10CodingKeysOMa()
{
  return &_s20RegistrationResponseV5LinksV10CodingKeysON;
}

unint64_t sub_10006C768()
{
  unint64_t result;

  result = qword_1000D2A48;
  if (!qword_1000D2A48)
  {
    result = swift_getWitnessTable(&unk_1000A3BD4, &_s20RegistrationResponseV5LinksV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A48);
  }
  return result;
}

unint64_t sub_10006C7A8()
{
  unint64_t result;

  result = qword_1000D2A50;
  if (!qword_1000D2A50)
  {
    result = swift_getWitnessTable(&unk_1000A3C8C, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A50);
  }
  return result;
}

unint64_t sub_10006C7E8()
{
  unint64_t result;

  result = qword_1000D2A58;
  if (!qword_1000D2A58)
  {
    result = swift_getWitnessTable(&unk_1000A3D44, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A58);
  }
  return result;
}

unint64_t sub_10006C828()
{
  unint64_t result;

  result = qword_1000D2A60;
  if (!qword_1000D2A60)
  {
    result = swift_getWitnessTable(&unk_1000A3CB4, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A60);
  }
  return result;
}

unint64_t sub_10006C868()
{
  unint64_t result;

  result = qword_1000D2A68;
  if (!qword_1000D2A68)
  {
    result = swift_getWitnessTable(&unk_1000A3CDC, &_s20RegistrationResponseV16DeliveryFeaturesV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A68);
  }
  return result;
}

unint64_t sub_10006C8A8()
{
  unint64_t result;

  result = qword_1000D2A70;
  if (!qword_1000D2A70)
  {
    result = swift_getWitnessTable(&unk_1000A3BFC, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A70);
  }
  return result;
}

unint64_t sub_10006C8E8()
{
  unint64_t result;

  result = qword_1000D2A78;
  if (!qword_1000D2A78)
  {
    result = swift_getWitnessTable(&unk_1000A3C24, &_s20RegistrationResponseV19RunningClockFeatureV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A78);
  }
  return result;
}

unint64_t sub_10006C928()
{
  unint64_t result;

  result = qword_1000D2A80;
  if (!qword_1000D2A80)
  {
    result = swift_getWitnessTable(&unk_1000A3B44, &_s20RegistrationResponseV5LinksV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A80);
  }
  return result;
}

unint64_t sub_10006C968()
{
  unint64_t result;

  result = qword_1000D2A88;
  if (!qword_1000D2A88)
  {
    result = swift_getWitnessTable(&unk_1000A3B6C, &_s20RegistrationResponseV5LinksV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000D2A88);
  }
  return result;
}

uint64_t sub_10006C9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10006C9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_10006C9E4@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 81) = a1;
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v4 - 72, v4 - 81, v1, v2, v3);
}

uint64_t sub_10006CA08()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 72, v0);
}

uint64_t sub_10006CA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 72, v2);
}

uint64_t sub_10006CA30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3 - 96, v3 - 97, v1, v2, a1);
}

uint64_t sub_10006CA50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v1, v3 - 65, v2, v1, a1);
}

uint64_t sub_10006CA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10006CA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v2, v3 - 81, v0, v2, v1);
}

uint64_t sub_10006CAA4()
{
  return 0x6172747369676572;
}

uint64_t sub_10006CAC8()
{
  uint64_t v0;
  uint64_t v1;

  return KeyedEncodingContainer.encode<A>(_:forKey:)(v1 - 72, v1 - 73, v0);
}

uint64_t sub_10006CAE8@<X0>(uint64_t a1@<X1>, char a2@<W8>)
{
  uint64_t v2;

  *(_BYTE *)(v2 - 72) = a2;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10006CAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10006CB1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 96) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_10006CB34@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 112) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 112, v1);
}

unint64_t sub_10006CB48()
{
  return 0xD000000000000010;
}

uint64_t sub_10006CB68()
{
  return 0x73746E657665;
}

uint64_t sub_10006CB7C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 112));
}

_QWORD *sub_10006CB84(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_10006CB94()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 120));
}

uint64_t sub_10006CB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t sub_10006CBAC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

_QWORD *sub_10006CBBC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va);
}

uint64_t sub_10006CBC8@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 81) = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10006CBD4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_10006CBE0()
{
  _QWORD *v0;

  return sub_100007618(v0);
}

unint64_t sub_10006CBE8()
{
  _QWORD *v0;
  uint64_t v1;

  sub_1000073CC(v0, v1);
  return sub_10006B830();
}

uint64_t sub_10006CC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_getWitnessTable(v2, a2);
}

uint64_t sub_10006CC0C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 - 128));
}

uint64_t sub_10006CC14(uint64_t a1)
{
  return sub_10006CD5C(a1, qword_1000DDA88, 6516856, 0xE300000000000000);
}

uint64_t *sub_10006CC2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10006CC6C(uint64_t a1)
{
  return sub_10006CD5C(a1, qword_1000DDAA0, 0x6E6F6D6D6F63, 0xE600000000000000);
}

uint64_t sub_10006CC88(uint64_t a1)
{
  return sub_10006CDD0(a1, qword_1000DDAB8, 0x696B726F7774656ELL, 26478);
}

uint64_t sub_10006CCA8(uint64_t a1)
{
  return sub_10006CDD0(a1, qword_1000DDAD0, 0x74737973656C6966, 28005);
}

uint64_t sub_10006CCC8(uint64_t a1)
{
  return sub_10006CDD8(a1, qword_1000DDAE8, 0x7263736275736E75, 6644329);
}

uint64_t sub_10006CCEC(uint64_t a1)
{
  return sub_10006CD5C(a1, qword_1000DDB00, 0x7974697669746361, 0xE800000000000000);
}

uint64_t sub_10006CD0C(uint64_t a1)
{
  return sub_10006CD5C(a1, qword_1000DDB18, 0x61684364756F6C63, 0xED0000736C656E6ELL);
}

uint64_t sub_10006CD38(uint64_t a1)
{
  return sub_10006CDD8(a1, qword_1000DDB30, 0x616F6265726F6373, 7562354);
}

uint64_t sub_10006CD5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_10006CC2C(v7, a2);
  sub_1000096EC(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x80000001000A5730, a3, a4);
}

uint64_t sub_10006CDD0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10006CD5C(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000);
}

uint64_t sub_10006CDD8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10006CD5C(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000);
}

uint64_t *sub_10006CDE0()
{
  if (qword_1000CFAF0 != -1)
    swift_once(&qword_1000CFAF0, sub_10006CE20);
  return &qword_1000DDB48;
}

void sub_10006CE20()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;

  type metadata accessor for PersistentStore(0);
  v0 = PersistentStore.__allocating_init()();
  v1 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ActivityAuthorization(0)), "init");
  swift_retain(v0);
  v2 = v1;
  v3 = sub_10006D494(v0, (uint64_t)v2);
  swift_release(v0);

  qword_1000DDB48 = v3;
}

uint64_t sub_10006CEA4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  size_t v20;
  uint64_t isStackAllocationSafe;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  Swift::Int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD v51[5];

  v2 = v0;
  if ((sub_100063B00() & 1) != 0)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(7827308, 0xE300000000000000, 1751607656, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(0xE300000000000000);
    result = 0;
    if ((v3 & 1) == 0)
      return result;
  }
  v5 = v2 + 14;
  v7 = v2[17];
  v6 = v2[18];
  sub_1000073CC(v5, v7);
  v41[1] = 0;
  v8 = dispatch thunk of PersistentStorable.allEventSubscriptionsToConsumers(isConventionalOrUnified:)(1, v7, v6);
  sub_100073004(v51, v8);
  v45 = v51[0];
  v46 = v51[3];
  v9 = v51[4];
  v43 = v51[1];
  v44 = (unint64_t)(v51[2] + 64) >> 6;
  v42 = v8;
  swift_bridgeObjectRetain(v8);
  v50 = 0x80000001000A5730;
LABEL_6:
  if (v9)
  {
    v49 = (v9 - 1) & v9;
    v10 = __clz(__rbit64(v9)) | (v46 << 6);
    goto LABEL_25;
  }
  v11 = v46 + 1;
  if (__OFADD__(v46, 1))
    goto LABEL_93;
  if (v11 >= v44)
    goto LABEL_87;
  v12 = *(_QWORD *)(v43 + 8 * v11);
  if (v12)
  {
LABEL_24:
    v49 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v46 = v11;
LABEL_25:
    v17 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v10);
    v18 = *(_BYTE *)(v17 + 32);
    v19 = v18 & 0x3F;
    v48 = (unint64_t)((1 << v18) + 63) >> 6;
    v20 = 8 * v48;
    isStackAllocationSafe = swift_bridgeObjectRetain(v17);
    if (v19 <= 0xD
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v20, 8), (isStackAllocationSafe & 1) != 0))
    {
      v47 = v41;
      __chkstk_darwin(isStackAllocationSafe);
      bzero((char *)v41 - ((v20 + 15) & 0x3FFFFFFFFFFFFFF0), v20);
      v22 = 0;
      v23 = v17 + 56;
      sub_10006D6FC();
      v25 = v24 >> 6;
      while (1)
      {
        if (v1)
        {
          sub_10006D76C();
        }
        else
        {
          v14 = __OFADD__(v22++, 1);
          if (v14)
          {
            __break(1u);
            goto LABEL_89;
          }
          if (v22 >= v25)
            goto LABEL_52;
          if (!*(_QWORD *)(v23 + 8 * v22))
          {
            v26 = v22 + 1;
            if (v22 + 1 >= v25)
              goto LABEL_52;
            if (!*(_QWORD *)(v23 + 8 * v26))
            {
              v26 = v22 + 2;
              if (v22 + 2 >= v25)
                goto LABEL_52;
              if (!*(_QWORD *)(v23 + 8 * v26))
              {
                v26 = v22 + 3;
                if (v22 + 3 >= v25)
                {
LABEL_52:
                  v30 = sub_10006D744();
                  goto LABEL_79;
                }
                if (!*(_QWORD *)(v23 + 8 * v26))
                {
                  while (1)
                  {
                    v22 = v26 + 1;
                    if (__OFADD__(v26, 1))
                      break;
                    if (v22 >= v25)
                      goto LABEL_52;
                    ++v26;
                    if (*(_QWORD *)(v23 + 8 * v22))
                      goto LABEL_40;
                  }
LABEL_90:
                  __break(1u);
LABEL_91:
                  __break(1u);
LABEL_92:
                  __break(1u);
LABEL_93:
                  __break(1u);
LABEL_94:
                  __break(1u);
                }
              }
            }
            v22 = v26;
          }
LABEL_40:
          sub_10006D784();
        }
        v27 = sub_10006D79C();
        if ((!v29 || v28 != 0x80000001000A5730) && (sub_10006D758(v27, v28) & 1) == 0)
        {
          sub_10006D720();
          if (v14)
            goto LABEL_92;
        }
      }
    }
    v31 = (void *)swift_slowAlloc(v20, -1);
    bzero(v31, v20);
    v32 = 0;
    v33 = v17 + 56;
    sub_10006D6FC();
    v35 = v34 >> 6;
    while (1)
    {
      if (v1)
      {
        sub_10006D76C();
      }
      else
      {
        v14 = __OFADD__(v32++, 1);
        if (v14)
        {
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        if (v32 >= v35)
          goto LABEL_78;
        if (!*(_QWORD *)(v33 + 8 * v32))
        {
          v36 = v32 + 1;
          if (v32 + 1 >= v35)
            goto LABEL_78;
          if (!*(_QWORD *)(v33 + 8 * v36))
          {
            v36 = v32 + 2;
            if (v32 + 2 >= v35)
              goto LABEL_78;
            if (!*(_QWORD *)(v33 + 8 * v36))
            {
              v36 = v32 + 3;
              if (v32 + 3 >= v35)
                goto LABEL_78;
              if (!*(_QWORD *)(v33 + 8 * v36))
              {
                while (1)
                {
                  v32 = v36 + 1;
                  if (__OFADD__(v36, 1))
                    goto LABEL_91;
                  if (v32 >= v35)
                    break;
                  ++v36;
                  if (*(_QWORD *)(v33 + 8 * v32))
                    goto LABEL_66;
                }
LABEL_78:
                v30 = sub_10006D744();
                swift_slowDealloc(v31, -1, -1);
LABEL_79:
                v9 = v49;
                v39 = *(_QWORD *)(v30 + 16);
                swift_release(v30);
                if (v39)
                {
                  swift_bridgeObjectRelease(v42);
                  swift_release(v45);
                  return 1;
                }
                goto LABEL_6;
              }
            }
          }
          v32 = v36;
        }
LABEL_66:
        sub_10006D784();
      }
      v37 = sub_10006D79C();
      if ((!v29 || v38 != v50) && (sub_10006D758(v37, v38) & 1) == 0)
      {
        sub_10006D720();
        if (v14)
          goto LABEL_94;
      }
    }
  }
  sub_10006D7BC();
  if (v13 == v14)
    goto LABEL_87;
  sub_10006D7B0();
  if (v12)
    goto LABEL_23;
  sub_10006D7BC();
  if (v13 == v14)
    goto LABEL_87;
  sub_10006D7B0();
  if (v12)
    goto LABEL_23;
  sub_10006D7BC();
  if (v13 == v14)
    goto LABEL_87;
  sub_10006D7B0();
  if (v12)
    goto LABEL_23;
  sub_10006D7BC();
  if (v13 == v14)
    goto LABEL_87;
  sub_10006D7B0();
  if (v12)
  {
LABEL_23:
    v11 = v15;
    goto LABEL_24;
  }
  v11 = v16 + 5;
  if (v11 >= v44)
    goto LABEL_87;
  v12 = *(_QWORD *)(v43 + 8 * v11);
  if (v12)
    goto LABEL_24;
  v40 = v46 + 7;
  while (v40 < v44)
  {
    v12 = *(_QWORD *)(v43 + 8 * v40++);
    if (v12)
    {
      v11 = v40 - 1;
      goto LABEL_24;
    }
  }
LABEL_87:
  swift_bridgeObjectRelease(v42);
  swift_release(v45);
  return 0;
}

uint64_t sub_10006D3B0()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10006D3DC()
{
  uint64_t v0;

  sub_10006D3B0();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SubscriptionInspectionUtility()
{
  return objc_opt_self(_TtC7sportsd29SubscriptionInspectionUtility);
}

unint64_t sub_10006D418()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2B48;
  if (!qword_1000D2B48)
  {
    v1 = type metadata accessor for SubscriptionInspectionUtility();
    result = swift_getWitnessTable(&unk_1000A3ED0, v1);
    atomic_store(result, (unint64_t *)&qword_1000D2B48);
  }
  return result;
}

uint64_t sub_10006D454()
{
  sub_10006CDE0();
  return swift_retain(qword_1000DDB48);
}

uint64_t sub_10006D470(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for SubscriptionInspectionUtility();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_10006D494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[3];
  uint64_t v15;
  _UNKNOWN **v16;

  v15 = type metadata accessor for ActivityAuthorization(0);
  v16 = &off_1000C5188;
  v14[0] = a2;
  v4 = type metadata accessor for SubscriptionInspectionUtility();
  v5 = swift_allocObject(v4, 160, 15);
  v6 = sub_10000AE58((uint64_t)v14, v15);
  v7 = __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v10 + 16))(v9, v7);
  v11 = sub_10006D560(a1, *v9, v5);
  sub_100007618(v14);
  return v11;
}

uint64_t sub_10006D560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[5];

  v28[3] = type metadata accessor for PersistentStore(0);
  v28[4] = &protocol witness table for PersistentStore;
  v28[0] = a1;
  v6 = type metadata accessor for ActivityAuthorization(0);
  v27[3] = v6;
  v27[4] = &off_1000C5188;
  v27[0] = a2;
  swift_defaultActor_initialize(a3);
  sub_10000AE14((uint64_t)v28, a3 + 112);
  sub_10000AE14((uint64_t)v27, (uint64_t)v26);
  v7 = sub_100043DEC();
  v9 = v8;
  v10 = sub_10000AE58((uint64_t)v26, v26[3]);
  v11 = __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v14 + 16))(v13, v11);
  v15 = *v13;
  v25[3] = v6;
  v25[4] = &off_1000C5188;
  v25[0] = v15;
  v16 = type metadata accessor for ActivityCapUtility();
  v17 = (_QWORD *)swift_allocObject(v16, 72, 7);
  v18 = sub_10000AE58((uint64_t)v25, v6);
  v19 = __chkstk_darwin(v18);
  v21 = (_QWORD *)((char *)v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v22 + 16))(v21, v19);
  v23 = *v21;
  v17[5] = v6;
  v17[6] = &off_1000C5188;
  v17[2] = v23;
  v17[7] = v7;
  v17[8] = v9;
  sub_100007618(v25);
  sub_100007618(v26);
  sub_100007618(v27);
  sub_100007618(v28);
  *(_QWORD *)(a3 + 152) = v17;
  return a3;
}

void sub_10006D720()
{
  uint64_t v0;
  unint64_t v1;

  *(_QWORD *)(v0 + ((v1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v1;
}

Swift::Int sub_10006D744()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  return sub_100016388(v1, *(_QWORD *)(v3 - 160), v2, v0);
}

uint64_t sub_10006D758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000011, v2 | 0x8000000000000000, 0);
}

uint64_t sub_10006D79C()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v0 + 48) + 16 * v1);
}

void sub_10006D7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char v20;
  _QWORD v21[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21);
    String.hash(into:)(v21, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    sub_100018CF8();
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (uint64_t *)(v10 + 16 * v8);
      v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_100073588(*v11, v12) & 1) == 0)
      {
        v14 = ~v7;
        v15 = (v8 + 1) & v14;
        sub_100018CF8();
        if ((v16 & 1) != 0)
        {
          do
          {
            v17 = (uint64_t *)(v10 + 16 * v15);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((sub_100073588(*v17, v18) & 1) != 0)
              break;
            v15 = (v15 + 1) & v14;
            sub_100018CF8();
          }
          while ((v20 & 1) != 0);
        }
      }
    }
  }
}

uint64_t sub_10006D8C0(char a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD v6[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v6);
    sub_100056778((uint64_t)v6, a1);
    v4 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

void sub_10006DAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v16;
  uint64_t v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (!v4)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  sub_100015688();
  if (a2 >= a1 && (v4 & 0x8000000000000000) == 0)
  {
    v6 = a1;
    v7 = (_QWORD *)(a3 + 16 * a1 + 40);
    while (a2 != v6)
    {
      if (a1 < 0)
        goto LABEL_18;
      if (v6 >= *(_QWORD *)(a3 + 16))
        goto LABEL_19;
      v16 = *(v7 - 1);
      v17 = *v7;
      swift_bridgeObjectRetain(*v7);
      v8._countAndFlagsBits = 8250;
      v8._object = (void *)0xE200000000000000;
      String.append(_:)(v8);
      if (v6 >= *(_QWORD *)(a4 + 16))
        goto LABEL_20;
      if (*(_BYTE *)(a4 + 32 + v6))
        v9 = 0x53534543435553;
      else
        v9 = 0x4552554C494146;
      v10 = 0xE700000000000000;
      String.append(_:)(*(Swift::String *)&v9);
      swift_bridgeObjectRelease();
      v11 = _swiftEmptyArrayStorage[2];
      if (v11 >= _swiftEmptyArrayStorage[3] >> 1)
        sub_100015688();
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v16;
      v12[5] = v17;
      ++v6;
      v7 += 2;
      if (a2 == v6)
        goto LABEL_16;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
}

void sub_10006DC98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  objc_class *v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39[2];
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  _QWORD v51[6];
  uint64_t v52;
  _QWORD v53[11];
  _QWORD *v54;

  v48 = a4;
  v47 = a3;
  v46 = type metadata accessor for Date(0);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v39[1] = v4;
    v54 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    v39[0] = a2;
    v43 = (uint64_t)a2 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation + 96;
    v44 = (uint64_t)a2 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation;
    v42 = (uint64_t)a2 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation + 136;
    v41 = &v52;
    v40 = v53;
    v10 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v12 = *(v10 - 1);
      v11 = *v10;
      v13 = v44;
      sub_100009D1C(v44, (uint64_t)v51);
      v14 = *(_QWORD *)(v13 + 40);
      sub_100009D1C(v43, (uint64_t)v41);
      sub_100009D1C(v42, (uint64_t)v40);
      v51[5] = v14;
      v15 = v48;
      v53[5] = v47;
      v53[6] = v48;
      v53[7] = v12;
      v53[8] = v11;
      swift_bridgeObjectRetain_n(v11, 2);
      swift_retain(v14);
      swift_bridgeObjectRetain(v15);
      v17 = Date.init()(v16);
      v18 = Date.timeIntervalSince1970.getter(v17) * 1000.0;
      if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
        break;
      if (v18 <= -1.0)
        goto LABEL_11;
      if (v18 >= 1.84467441e19)
        goto LABEL_12;
      v10 += 2;
      v19 = (unint64_t)v18;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v46);
      v53[9] = v19;
      v20 = (objc_class *)type metadata accessor for ActivityAuthorization(0);
      v21 = objc_msgSend(objc_allocWithZone(v20), "init");
      v22 = sub_100043DEC();
      v49 = v9;
      v24 = v23;
      v50[4] = &off_1000C5188;
      v50[3] = v20;
      v50[0] = v21;
      v25 = type metadata accessor for ActivityCapUtility();
      v26 = (_QWORD *)swift_allocObject(v25, 72, 7);
      v27 = sub_10000AE58((uint64_t)v50, (uint64_t)v20);
      v28 = __chkstk_darwin(v27);
      v30 = (uint64_t *)((char *)v39 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v31 + 16))(v30, v28);
      v32 = *v30;
      v26[5] = v20;
      v26[6] = &off_1000C5188;
      v26[7] = v22;
      v26[2] = v32;
      v26[8] = v24;
      v33 = v49;
      sub_100007618(v50);
      v53[10] = v26;
      sub_10002CCD0();
      v35 = v34;
      sub_10002F608(v51);
      v36 = swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      v37 = v54[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v37);
      v38 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
      specialized ContiguousArray._endMutation()(v38);
      v9 = v33 - 1;
      if (!v9)
      {

        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {

LABEL_9:
    swift_bridgeObjectRelease();
  }
}

void sub_10006E02C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  _QWORD v35[5];
  char *v36;

  v2 = sub_10000738C(&qword_1000D2C10);
  __chkstk_darwin(v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CloudChannelSubscription.Demand(0);
  v34 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v33 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v31 = (char *)&v30 - v8;
  sub_100073384(a1, v35);
  v10 = v35[0];
  v9 = v35[1];
  v11 = v35[3];
  v12 = v35[4];
  v13 = (unint64_t)(v35[2] + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  v36 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_20;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_27;
    v17 = *(_QWORD *)(v9 + 8 * v16);
    v18 = v11 + 1;
    if (!v17)
    {
      v18 = v11 + 2;
      if (v11 + 2 >= v13)
        goto LABEL_27;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (!v17)
      {
        v18 = v11 + 3;
        if (v11 + 3 >= v13)
          goto LABEL_27;
        v17 = *(_QWORD *)(v9 + 8 * v18);
        if (!v17)
        {
          v18 = v11 + 4;
          if (v11 + 4 >= v13)
            goto LABEL_27;
          v17 = *(_QWORD *)(v9 + 8 * v18);
          if (!v17)
          {
            v18 = v11 + 5;
            if (v11 + 5 >= v13)
              goto LABEL_27;
            v17 = *(_QWORD *)(v9 + 8 * v18);
            if (!v17)
            {
              v19 = v11 + 6;
              while (v19 < v13)
              {
                v17 = *(_QWORD *)(v9 + 8 * v19++);
                if (v17)
                {
                  v18 = v19 - 1;
                  goto LABEL_19;
                }
              }
LABEL_27:
              swift_release(v10);
              return;
            }
          }
        }
      }
    }
LABEL_19:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
    v11 = v18;
LABEL_20:
    v20 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v15);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v15);
    swift_bridgeObjectRetain(v22);
    v24 = swift_bridgeObjectRetain(v23);
    CloudChannelSubscription.Demand.init(key:value:)(v21, v22, v23, v24);
    if (sub_100009658((uint64_t)v4, 1, v5) == 1)
    {
      sub_10000A47C((uint64_t)v4, &qword_1000D2C10);
    }
    else
    {
      v25 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v26 = v31;
      v25(v31, v4, v5);
      v32 = v25;
      v25(v33, v26, v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
        v36 = (char *)sub_100013984(0, *((_QWORD *)v36 + 2) + 1, 1, (uint64_t)v36);
      v28 = *((_QWORD *)v36 + 2);
      v27 = *((_QWORD *)v36 + 3);
      if (v28 >= v27 >> 1)
        v36 = (char *)sub_100013984(v27 > 1, v28 + 1, 1, (uint64_t)v36);
      v29 = v36;
      *((_QWORD *)v36 + 2) = v28 + 1;
      v32(&v29[((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v28], v33, v5);
    }
  }
  __break(1u);
}

id sub_10006E338(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  uint64_t v8;
  objc_class *v9;
  id v10;
  char *v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  id v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];

  v31 = a5;
  v32 = a6;
  v33 = (_QWORD *)a4;
  v34 = a3;
  v35 = a1;
  v36 = a2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables] = &_swiftEmptySetSingleton;
  v7 = &v6[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v8 = OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_activityCapUtility;
  v9 = (objc_class *)type metadata accessor for ActivityAuthorization(0);
  v10 = objc_allocWithZone(v9);
  v11 = v6;
  v12 = objc_msgSend(v10, "init");
  v13 = sub_100043DEC();
  v15 = v14;
  v37[3] = v9;
  v37[4] = &off_1000C5188;
  v37[0] = v12;
  v16 = type metadata accessor for ActivityCapUtility();
  v17 = (_QWORD *)sub_10000A748(v16, 72);
  v18 = sub_10000AE58((uint64_t)v37, (uint64_t)v9);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = *v20;
  v17[5] = v9;
  v17[6] = &off_1000C5188;
  v17[2] = v22;
  v17[7] = v13;
  v17[8] = v15;
  sub_100007618(v37);
  *(_QWORD *)&v6[v8] = v17;
  v23 = *((_QWORD *)v7 + 1);
  v24 = v32;
  *(_QWORD *)v7 = v31;
  *((_QWORD *)v7 + 1) = v24;
  swift_bridgeObjectRelease(v23);
  v25 = v33;
  sub_100023E30((uint64_t)v33, (uint64_t)&v11[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation]);

  v26 = v34;
  v27 = sub_1000881C4(v35, v36, (uint64_t)v26);
  objc_msgSend(v26, "setExportedObject:", v27);
  v28 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP7sportsd25SportsdXPCDaemon_Protocol_);
  objc_msgSend(v26, "setExportedInterface:", v28);

  sub_100023FB4(v25);
  return v27;
}

uint64_t sub_10006E53C()
{
  uint64_t v0;

  sub_100023FB4((_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_activityCapUtility));
}

id sub_10006E58C()
{
  void *v0;
  os_log_type_t v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  objc_super v9;

  v2 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v4 = sub_1000187DC();
  v5 = sub_1000096EC(v4, (uint64_t)qword_1000DDA88);
  Logger.logObject.getter(v5);
  v6 = sub_10004ED30();
  if (sub_10007352C(v6))
  {
    v7 = (uint8_t *)sub_100018554(2);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v1, "Connection closed.", v7, 2u);
    sub_10000A818((uint64_t)v7);
  }

  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "dealloc");
}

void sub_10006E6EC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  void (**v38)(const void *, void *);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  void (**v56)(const void *, void *);
  void (**v57)(const void *, void *);
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  void (**v72)(const void *, void *);
  uint8_t *v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t (*v77)(char *, _QWORD, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141[3];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v133 = a5;
  v137 = a1;
  v138 = a3;
  v136 = a2;
  v10 = sub_10000738C(&qword_1000D0888);
  v11 = __chkstk_darwin(v10);
  v134 = (uint64_t)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for SportingEventSubscriptionRequest.ContextKey(0, v11);
  v128 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v131 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v130 = (char *)&v124 - v15;
  __chkstk_darwin(v16);
  v129 = (char *)&v124 - v17;
  __chkstk_darwin(v18);
  v20 = (char *)&v124 - v19;
  v21 = type metadata accessor for SportingEventSubscriptionRequest.SubscriptionType(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v27 = (char *)&v124 - v26;
  v28 = sub_10000738C(&qword_1000D2C38);
  __chkstk_darwin(v28);
  v30 = (char *)&v124 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v33 = (char *)&v124 - v32;
  v139 = swift_allocObject(&unk_1000C81E0, 24, 7);
  v140 = a7;
  *(_QWORD *)(v139 + 16) = a7;
  v135 = a6;
  v34 = *(_QWORD *)(a6 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8);
  if (v34)
  {
    v35 = *(_QWORD *)(a6 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId);
    v36 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0)
      v36 = v35 & 0xFFFFFFFFFFFFLL;
    if (v36)
    {
      _Block_copy(v140);
      swift_bridgeObjectRetain(v34);
      v37 = swift_bridgeObjectRetain(a4);
      SportingEventSubscriptionRequest.SubscriptionType.init(rawValue:)(v138, a4, v37);
      sub_1000732F8((uint64_t)v33, (uint64_t)v30);
      if (sub_100009658((uint64_t)v30, 1, v21) == 1)
      {
        sub_10000A47C((uint64_t)v33, &qword_1000D2C38);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v27, v30, v21);
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v24, v27, v21);
        v46 = sub_10006F2D0((uint64_t)v24);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v21);
        sub_10000A47C((uint64_t)v33, &qword_1000D2C38);
        if (v46 != 6)
        {
          v138 = v35;
          v58 = v136;
          v59 = HIBYTE(v136) & 0xF;
          if ((v136 & 0x2000000000000000) == 0)
            v59 = v137 & 0xFFFFFFFFFFFFLL;
          if (v59)
          {
            if (qword_1000CFAB0 != -1)
              swift_once(&qword_1000CFAB0, sub_10006CC14);
            HIDWORD(v127) = v46;
            v60 = type metadata accessor for Logger(0);
            sub_1000096EC(v60, (uint64_t)qword_1000DDA88);
            v61 = swift_bridgeObjectRetain_n(v58, 2);
            v62 = Logger.logObject.getter(v61);
            v63 = static os_log_type_t.debug.getter(v62);
            if (os_log_type_enabled(v62, v63))
            {
              v64 = (uint8_t *)swift_slowAlloc(12, -1);
              v65 = swift_slowAlloc(32, -1);
              v141[0] = v65;
              *(_DWORD *)v64 = 136315138;
              swift_bridgeObjectRetain(v58);
              sub_100014B44(v137, v58, v141);
              v144 = v66;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v64 + 4, v64 + 12);
              swift_bridgeObjectRelease_n(v58, 3);
              _os_log_impl((void *)&_mh_execute_header, v62, v63, "SportsKitRequestXPCSession: Registering for event '%s'", v64, 0xCu);
              swift_arrayDestroy(v65, 1);
              swift_slowDealloc(v65, -1, -1);
              swift_slowDealloc(v64, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v58, 2);
            }
            v126 = v135 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation;
            v76 = v128;
            v77 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v128 + 104);
            v78 = v132;
            v79 = v77(v20, enum case for SportingEventSubscriptionRequest.ContextKey.leagueId(_:), v132);
            v80 = SportingEventSubscriptionRequest.ContextKey.rawValue.getter(v79);
            v82 = v81;
            v83 = *(void (**)(char *, uint64_t))(v76 + 8);
            v83(v20, v78);
            v84 = v133;
            v128 = sub_10007562C(v80, v82, v133);
            v125 = v85;
            swift_bridgeObjectRelease();
            v86 = (uint64_t)v129;
            v87 = v77(v129, enum case for SportingEventSubscriptionRequest.ContextKey.sportId(_:), v78);
            v88 = SportingEventSubscriptionRequest.ContextKey.rawValue.getter(v87);
            v90 = v89;
            v83((char *)v86, v78);
            v129 = (char *)sub_10007562C(v88, v90, v84);
            v92 = v91;
            swift_bridgeObjectRelease();
            v93 = (uint64_t)v130;
            v94 = v77(v130, enum case for SportingEventSubscriptionRequest.ContextKey.source(_:), v78);
            v95 = SportingEventSubscriptionRequest.ContextKey.rawValue.getter(v94);
            v97 = v96;
            v83((char *)v93, v78);
            v98 = sub_10007562C(v95, v97, v84);
            v100 = v99;
            swift_bridgeObjectRelease();
            v101 = v131;
            v102 = v77(v131, enum case for SportingEventSubscriptionRequest.ContextKey.leagueAbbreviation(_:), v78);
            v103 = SportingEventSubscriptionRequest.ContextKey.rawValue.getter(v102);
            v105 = v104;
            v83(v101, v78);
            v106 = sub_10007562C(v103, v105, v84);
            v108 = v107;
            swift_bridgeObjectRelease();
            v109 = type metadata accessor for SubscriptionRegisterOperation.PreferredData(0);
            v110 = v134;
            sub_10000964C(v134, 1, 1, v109);
            LOBYTE(v122) = BYTE4(v127);
            LOBYTE(v121) = 0;
            v111 = v137;
            v112 = v136;
            sub_100023248(v138, v34, v137, v136, v128, v125, (uint64_t)v129, v92, v98, v100, v121, v106, v108, v122, v110, 0, 0, v123, v124,
              v125,
              v126,
              v127,
              v128,
              (uint64_t)v129,
              (uint64_t)v130,
              v131,
              v132,
              v133,
              v134);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10000A47C(v110, &qword_1000D0888);
            v113 = v142;
            v114 = v143;
            sub_1000073CC(v141, v142);
            v144 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 8))(v113, v114);
            v115 = (_QWORD *)swift_allocObject(&unk_1000C8208, 48, 7);
            v115[2] = v111;
            v115[3] = v112;
            v116 = v139;
            v115[4] = sub_1000733C0;
            v115[5] = v116;
            v117 = (_QWORD *)swift_allocObject(&unk_1000C8230, 48, 7);
            v117[2] = v111;
            v117[3] = v112;
            v117[4] = sub_1000733C0;
            v117[5] = v116;
            swift_bridgeObjectRetain_n(v112, 2);
            swift_retain_n(v116, 2);
            v118 = sub_10000738C(&qword_1000D0B18);
            sub_100031668((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
            v119 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100073344, v115, sub_100073378, v117, v118);
            swift_release(v115);
            swift_release(v117);
            swift_release(v144);
            sub_100007618(v141);
            v120 = v135 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
            swift_beginAccess(v135 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables, v141, 33, 0);
            AnyCancellable.store(in:)(v120);
            swift_endAccess(v141);
            swift_release(v116);
            swift_release(v119);
            v57 = (void (**)(const void *, void *))v140;
          }
          else
          {
            swift_bridgeObjectRelease();
            if (qword_1000CFAC0 != -1)
              swift_once(&qword_1000CFAC0, sub_10006CC88);
            v67 = type metadata accessor for Logger(0);
            v68 = sub_1000096EC(v67, (uint64_t)qword_1000DDAB8);
            v69 = Logger.logObject.getter(v68);
            v70 = static os_log_type_t.error.getter();
            v71 = os_log_type_enabled(v69, v70);
            v72 = (void (**)(const void *, void *))v140;
            if (v71)
            {
              v73 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v73 = 0;
              _os_log_impl((void *)&_mh_execute_header, v69, v70, "Tempo /register missing event canonical id", v73, 2u);
              swift_slowDealloc(v73, -1, -1);
            }

            v74 = sub_100027C78(1u, 0xD00000000000001ALL, 0x80000001000A79E0);
            v75 = (void *)_convertErrorToNSError(_:)(v74);
            v72[2](v72, v75);

            swift_errorRelease(v74);
            swift_release(v139);
            v57 = v72;
          }
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      if (qword_1000CFAC0 != -1)
        swift_once(&qword_1000CFAC0, sub_10006CC88);
      v47 = type metadata accessor for Logger(0);
      sub_1000096EC(v47, (uint64_t)qword_1000DDAB8);
      v48 = swift_bridgeObjectRetain_n(a4, 2);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v141[0] = v52;
        *(_DWORD *)v51 = 136315138;
        swift_bridgeObjectRetain(a4);
        sub_100014B44(v138, a4, v141);
        v144 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v51 + 4, v51 + 12);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Tempo /register invalid subscriptionType: %s", v51, 0xCu);
        swift_arrayDestroy(v52, 1);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v54 = sub_100027C78(1u, 0xD000000000000019, 0x80000001000A79C0);
      v55 = (void *)_convertErrorToNSError(_:)(v54);
      v56 = (void (**)(const void *, void *))v140;
      (*((void (**)(void *, void *))v140 + 2))(v140, v55);

      swift_errorRelease(v54);
      swift_release(v139);
      v57 = v56;
LABEL_19:
      _Block_release(v57);
      return;
    }
  }
  v38 = (void (**)(const void *, void *))v140;
  _Block_copy(v140);
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v39 = type metadata accessor for Logger(0);
  v40 = sub_1000096EC(v39, (uint64_t)qword_1000DDAB8);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Tempo /register missing process bundle id", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }

  v44 = sub_100027C78(1u, 0xD000000000000019, 0x80000001000A7970);
  v45 = (void *)_convertErrorToNSError(_:)(v44);
  v38[2](v38, v45);

  swift_errorRelease(v44);
  swift_release(v139);
  _Block_release(v38);
}

uint64_t sub_10006F2D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for SportingEventSubscriptionRequest.SubscriptionType(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == enum case for SportingEventSubscriptionRequest.SubscriptionType.liveStatistics(_:))
    return 0;
  if (v4 == enum case for SportingEventSubscriptionRequest.SubscriptionType.playByPlay(_:))
    return 1;
  if (v4 == enum case for SportingEventSubscriptionRequest.SubscriptionType.tvClockScore(_:))
    return 5;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return 6;
}

_QWORD *sub_10006F37C(_QWORD *result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;

  v4 = *result;
  if (*result)
  {
    swift_errorRetain(*result);
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v8 = type metadata accessor for Logger(0);
    sub_1000096EC(v8, (uint64_t)qword_1000DDAB8);
    swift_errorRetain(v4);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(v4);
    swift_bridgeObjectRetain(a3);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(64, -1);
      v21 = v13;
      *(_DWORD *)v12 = 136315394;
      swift_bridgeObjectRetain(a3);
      sub_100014B44(a2, a3, &v21);
      v20 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v12 + 12) = 2080;
      swift_getErrorValue(v4, v19, v18);
      v15 = Error.localizedDescription.getter(v18[1], v18[2]);
      sub_100014B44(v15, v16, &v21);
      v20 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Tempo /register failed for id=%s with error=%s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 2);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    swift_errorRetain(v4);
    a4(v4);
    swift_errorRelease(v4);
    return (_QWORD *)swift_errorRelease(v4);
  }
  return result;
}

uint64_t sub_10006F5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  type metadata accessor for SportsSubscriptionState(0);
  swift_bridgeObjectRetain(a3);
  static SportsSubscriptionState.activeSubscriptionEventId.setter(a2, a3);
  return a4(0);
}

void sub_10006F720(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;

  v8 = swift_allocObject(&unk_1000C8190, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  v9 = *(_QWORD *)(a3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8);
  if (!v9)
    goto LABEL_9;
  v10 = *(_QWORD *)(a3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId);
  v11 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v11 = v10 & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    _Block_copy(a4);
    v12 = qword_1000CFAB0;
    swift_bridgeObjectRetain(v9);
    if (v12 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v13 = type metadata accessor for Logger(0);
    sub_1000096EC(v13, (uint64_t)qword_1000DDA88);
    v14 = swift_bridgeObjectRetain_n(a2, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v34 = v8;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v36[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain(a2);
      sub_100014B44(a1, a2, v36);
      v35 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SportsKitRequestXPCSession: Unregistering for event '%s'", v17, 0xCu);
      swift_arrayDestroy(v18, 1);
      swift_slowDealloc(v18, -1, -1);
      v20 = v17;
      v8 = v34;
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    sub_1000235C4(v10, v9, a1, a2, v36);
    swift_bridgeObjectRelease();
    v28 = v37;
    v29 = v38;
    sub_1000073CC(v36, v37);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
    v30 = (_QWORD *)swift_allocObject(&unk_1000C81B8, 48, 7);
    v30[2] = a1;
    v30[3] = a2;
    v30[4] = sub_1000733C0;
    v30[5] = v8;
    swift_bridgeObjectRetain(a2);
    swift_retain(v8);
    v31 = sub_10000738C(&qword_1000D0B18);
    sub_100031668((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v32 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1000732EC, v30, nullsub_1, 0, v31);
    swift_release(v30);
    swift_release(v35);
    sub_100007618(v36);
    v33 = a3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
    swift_beginAccess(a3 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables, v36, 33, 0);
    AnyCancellable.store(in:)(v33);
    swift_endAccess(v36);
    swift_release(v8);
    swift_release(v32);
    _Block_release(a4);
  }
  else
  {
LABEL_9:
    _Block_copy(a4);
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_1000096EC(v21, (uint64_t)qword_1000DDAB8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Tempo /unregister missing process bundle id", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = sub_100027C78(1u, 0xD000000000000019, 0x80000001000A7970);
    v27 = (void *)_convertErrorToNSError(_:)(v26);
    ((void (**)(_QWORD, void *))a4)[2](a4, v27);

    swift_errorRelease(v26);
    swift_release(v8);
    _Block_release(a4);
  }
}

uint64_t sub_10006FBAC(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;

  v5 = *a1;
  if (!*a1)
    return a4(0);
  swift_errorRetain(*a1);
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v8 = type metadata accessor for Logger(0);
  sub_1000096EC(v8, (uint64_t)qword_1000DDAB8);
  swift_errorRetain(v5);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(v5);
  swift_bridgeObjectRetain(a3);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v22 = v13;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain(a3);
    sub_100014B44(a2, a3, &v22);
    v21 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v12 + 12) = 2080;
    swift_getErrorValue(v5, v20, v19);
    v15 = Error.localizedDescription.getter(v19[1], v19[2]);
    sub_100014B44(v15, v16, &v22);
    v21 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Tempo /unregister failed for id=%s - %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }

  swift_errorRetain(v5);
  a4(v5);
  swift_errorRelease(v5);
  return swift_errorRelease(v5);
}

void sub_10006FE94(uint64_t a1, char *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66[3];

  v6 = sub_10000738C(&qword_1000D1B00);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000738C(&qword_1000D1B08);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1000C8140, 24, 7);
  *(_QWORD *)(v14 + 16) = a3;
  v64 = a2;
  v15 = (uint64_t *)&a2[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId];
  v16 = *(_QWORD *)&a2[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8];
  if (!v16)
    goto LABEL_9;
  v17 = *v15;
  v18 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v18 = v17 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    v58 = v17;
    v61 = v13;
    v63 = v10;
    _Block_copy(a3);
    v19 = qword_1000CFAB0;
    swift_bridgeObjectRetain(v16);
    if (v19 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v59 = v7;
    v60 = v6;
    v62 = v11;
    v20 = type metadata accessor for Logger(0);
    sub_1000096EC(v20, (uint64_t)qword_1000DDA88);
    v21 = swift_bridgeObjectRetain_n(a1, 2);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(12, -1);
      v57 = v14;
      v25 = (uint8_t *)v24;
      v56 = swift_slowAlloc(32, -1);
      v66[0] = v56;
      *(_DWORD *)v25 = 136315138;
      v55 = v25 + 4;
      swift_bridgeObjectRetain(a1);
      v27 = Array.description.getter(v26, &type metadata for String);
      v29 = v28;
      swift_bridgeObjectRelease();
      sub_100014B44(v27, v29, v66);
      v65 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v55, v25 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "SportsKitRequestXPCSession: Unregistering for events %s", v25, 0xCu);
      v31 = v56;
      swift_arrayDestroy(v56, 1);
      swift_slowDealloc(v31, -1, -1);
      v32 = v25;
      v14 = v57;
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    swift_bridgeObjectRetain(v16);
    v40 = (char *)v64;
    sub_10006DC98(a1, v40, v58, v16);
    v42 = v41;
    swift_bridgeObjectRelease();
    v66[0] = v42;
    v43 = sub_10000738C(&qword_1000D0B18);
    v44 = sub_10000738C(&qword_1000D1B20);
    sub_100031668((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v46 = v45;
    sub_100031668(&qword_1000D1B28, &qword_1000D1B20, (uint64_t)&protocol conformance descriptor for [A]);
    Publishers.MergeMany.init<A>(_:)(v66, v43, v44, v46, v47);
    sub_100031668(&qword_1000D1B30, &qword_1000D1B00, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
    v48 = v60;
    v49 = v61;
    Publisher.collect()(v60, v50);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v9, v48);
    v51 = (_QWORD *)swift_allocObject(&unk_1000C8168, 40, 7);
    v51[2] = sub_1000733C0;
    v51[3] = v14;
    v51[4] = a1;
    sub_100031668(&qword_1000D1B38, &qword_1000D1B08, (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
    swift_bridgeObjectRetain(a1);
    swift_retain(v14);
    v52 = v63;
    v53 = Publisher.sink(receiveCompletion:receiveValue:)(nullsub_1, 0, sub_1000732DC, v51, v63);
    swift_release(v51);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v52);
    v54 = &v40[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables];
    swift_beginAccess(&v40[OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables], v66, 33, 0);
    AnyCancellable.store(in:)(v54);
    swift_endAccess(v66);
    swift_release(v14);
    swift_release(v53);
    _Block_release(a3);
  }
  else
  {
LABEL_9:
    _Block_copy(a3);
    if (qword_1000CFAC0 != -1)
      swift_once(&qword_1000CFAC0, sub_10006CC88);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_1000096EC(v33, (uint64_t)qword_1000DDAB8);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Tempo /unregister missing process bundle id", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v38 = sub_100027C78(1u, 0xD000000000000019, 0x80000001000A7970);
    v39 = (void *)_convertErrorToNSError(_:)(v38);
    ((void (**)(_QWORD, void *))a3)[2](a3, v39);

    swift_errorRelease(v38);
    swift_release(v14);
    _Block_release(a3);
  }
}

uint64_t sub_10007046C(uint64_t result, uint64_t (*a2)(id), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  id v15;

  v5 = *(_QWORD *)result;
  v6 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (!v6)
    return a2(0);
  if (*(_BYTE *)(v5 + 32) != 1)
  {
LABEL_9:
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v5);
    sub_10006DAC0(0, v6, a4, v5);
    v11 = Array.description.getter(v10, &type metadata for String);
    v13 = v12;
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = sub_100027C78(2u, 0xD00000000000002CLL, 0x80000001000A7990);
    swift_bridgeObjectRelease();
    a2(v15);
    return swift_errorRelease(v15);
  }
  if (v6 == 1)
    return a2(0);
  for (i = 33; ; ++i)
  {
    v9 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    if (*(_BYTE *)(v5 + i) != 1)
      goto LABEL_9;
    if (v9 == v6)
      return a2(0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100070648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;

  v4 = v2;
  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v7 = sub_1000187DC();
  v8 = sub_1000096EC(v7, (uint64_t)qword_1000DDA88);
  Logger.logObject.getter(v8);
  v9 = sub_10004ED30();
  if (sub_100073598(v9))
  {
    v10 = (uint8_t *)sub_100018554(2);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v3, "SportsKitRequestXPCSession: Unsubscribing from all events", v10, 2u);
    sub_10000A818((uint64_t)v10);
  }

  v11 = v4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation;
  sub_100009D1C(v4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation, (uint64_t)v18);
  sub_100009D1C(v11 + 96, (uint64_t)&v19);
  sub_10002F344();
  v17 = v12;
  v13 = sub_10000A748((uint64_t)&unk_1000C8118, 32);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  swift_retain(a2);
  sub_10000738C(&qword_1000D0B18);
  sub_100031668((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v14 = sub_10007360C((uint64_t)sub_100073274, v13, (uint64_t)nullsub_1);
  swift_release(v13);
  swift_release(v17);
  sub_10007327C(v18);
  v15 = v4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
  sub_100057888(v15, (uint64_t)v18);
  AnyCancellable.store(in:)(v15);
  swift_endAccess(v18);
  return swift_release(v14);
}

uint64_t sub_1000707FC(_QWORD *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[8];
  uint64_t v17;

  v3 = *a1;
  if (!*a1)
    return a2(0);
  swift_errorRetain(*a1);
  if (qword_1000CFAC0 != -1)
    swift_once(&qword_1000CFAC0, sub_10006CC88);
  v4 = type metadata accessor for Logger(0);
  sub_1000096EC(v4, (uint64_t)qword_1000DDAB8);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v3, v16, v15);
    v10 = Error.localizedDescription.getter(v15[1], v15[2]);
    sub_100014B44(v10, v11, &v17);
    v14 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Tempo /unregister all failed - %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }

  swift_errorRetain(v3);
  a2(v3);
  swift_errorRelease(v3);
  return swift_errorRelease(v3);
}

void sub_100070A70(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t refreshed;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[3];
  uint64_t v51;
  uint64_t v52;

  v7 = v5;
  v48 = a4;
  refreshed = type metadata accessor for SportsManager.RefreshOptions(0);
  v13 = *(_QWORD *)(refreshed - 8);
  __chkstk_darwin(refreshed);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v16 = sub_1000187DC();
  v17 = sub_1000096EC(v16, (uint64_t)qword_1000DDA88);
  v18 = sub_100018974(a2);
  Logger.logObject.getter(v18);
  v19 = sub_10004ED30();
  if (sub_10007352C(v19))
  {
    v20 = sub_100018554(22);
    v47 = a3;
    v21 = v20;
    v22 = sub_100018554(64);
    v46 = refreshed;
    v44 = v22;
    v50[0] = v22;
    *(_DWORD *)v21 = 136315394;
    v45 = a5;
    swift_bridgeObjectRetain(a2);
    sub_100014B44(a1, a2, v50);
    v24 = sub_100073560(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v25, v26, v27);
    sub_100018A58(a2);
    *(_WORD *)(v21 + 12) = 2080;
    v49 = v47;
    v28 = String.init<A>(reflecting:)(&v49, &type metadata for Int);
    sub_100014B44(v28, v29, v50);
    v31 = sub_100073560(v30);
    a5 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, v32, v33, v34);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v6, "SportsKitRequestXPCSession: Refreshing event '%s' with options %s", (uint8_t *)v21, 0x16u);
    v35 = v44;
    sub_100073600();
    v36 = v35;
    refreshed = v46;
    sub_10000A818(v36);
    v37 = v21;
    a3 = v47;
    sub_10000A818(v37);

  }
  else
  {

    sub_100018540(a2);
  }
  SportsManager.RefreshOptions.init(rawValue:)(a3);
  sub_1000237C0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, refreshed);
  v38 = v51;
  v39 = v52;
  sub_1000073CC(v50, v51);
  v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
  v40 = sub_10000A748((uint64_t)&unk_1000C80C8, 32);
  *(_QWORD *)(v40 + 16) = v48;
  *(_QWORD *)(v40 + 24) = a5;
  swift_retain(a5);
  sub_10000738C(&qword_1000D0B18);
  sub_100031668((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v41 = sub_10007360C((uint64_t)sub_100029574, v40, (uint64_t)nullsub_1);
  swift_release(v40);
  swift_release(v49);
  sub_100007618(v50);
  v42 = v7 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
  sub_100057888(v7 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables, (uint64_t)v50);
  AnyCancellable.store(in:)(v42);
  swift_endAccess(v50);
  swift_release(v41);
  sub_10000A668();
}

void sub_100070DA0()
{
  if (qword_1000CFB10 != -1)
    swift_once(&qword_1000CFB10, sub_1000947D0);
  sub_1000943F0();
}

void sub_100070E14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  _Block_copy(aBlock);
  sub_100070E74(a1, a2, a3, a4, (void (**)(_QWORD, _QWORD))aBlock);
  _Block_release(aBlock);
}

void sub_100070E74(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];
  char v50;
  __int128 v51;
  uint64_t v52[71];
  _QWORD v53[4];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  Swift::String v59;

  v9 = swift_allocObject(&unk_1000C8050, 24, 7);
  *(_QWORD *)(v9 + 16) = a5;
  v10 = *(_QWORD *)(a4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8);
  if (!v10)
    goto LABEL_14;
  v11 = *(_QWORD *)(a4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId);
  v12 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v12 = v11 & 0xFFFFFFFFFFFFLL;
  if (v12)
  {
    swift_bridgeObjectRetain_n(*(_QWORD *)(a4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_bundleId + 8), 2);
    _Block_copy(a5);
    v59._countAndFlagsBits = v11;
    v59._object = (void *)v10;
    sub_100044898(v59);
    if (v13 == 4)
      goto LABEL_9;
    v14 = v13;
    if (qword_1000CFA88 != -1)
      swift_once(&qword_1000CFA88, sub_1000447F8);
    if ((sub_10006D8C0(v14, qword_1000DDA68) & 1) == 0)
    {
LABEL_9:
      swift_bridgeObjectRelease();
      v11 = sub_100043DEC();
      v10 = v15;
    }
    if (qword_1000CFAB0 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v16 = type metadata accessor for Logger(0);
    sub_1000096EC(v16, (uint64_t)qword_1000DDA88);
    v17 = swift_bridgeObjectRetain_n(a2, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v46 = a4;
      v45 = v11;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = v9;
      v21 = swift_slowAlloc(32, -1);
      v52[0] = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain(a2);
      sub_100014B44(a1, a2, v52);
      v48 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "SportsKitRequestXPCSession: Creating activity for event %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1);
      v23 = v21;
      v9 = v47;
      swift_slowDealloc(v23, -1, -1);
      v24 = v20;
      v11 = v45;
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    if ((sub_100063B00() & 1) != 0)
      v36 = 1;
    else
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(7827308, 0xE300000000000000, 1751607656, 0xE400000000000000, 0);
    swift_bridgeObjectRelease();
    sub_100023E30(a4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation, (uint64_t)&v48);
    memset(v53, 0, 24);
    v53[3] = 1;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0;
    LOBYTE(v43) = 0;
    sub_100023A18(a1, a2, v36 & 1, (uint64_t)v53, 0, 1, 0, 0, v43, v11, v10, v44, v45, v46, v47, a1, v48, v49[0], v49[1],
      v49[2],
      v50,
      v51);
    swift_bridgeObjectRelease();
    sub_100023FB4(&v48);
    sub_10008114C();
    v38 = v37;
    sub_10004E0C4(v52);
    v52[0] = v38;
    v39 = (_QWORD *)swift_allocObject(&unk_1000C8078, 48, 7);
    v39[2] = a1;
    v39[3] = a2;
    v39[4] = sub_1000733C0;
    v39[5] = v9;
    swift_bridgeObjectRetain(a2);
    swift_retain(v9);
    v40 = sub_10000738C(&qword_1000D0B18);
    sub_100031668((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v41 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100073248, v39, nullsub_1, 0, v40);
    swift_release(v39);
    swift_release(v52[0]);
    v42 = a4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
    swift_beginAccess(a4 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables, v52, 33, 0);
    AnyCancellable.store(in:)(v42);
    swift_endAccess(v52);
    swift_release(v9);
    v35 = v41;
  }
  else
  {
LABEL_14:
    _Block_copy(a5);
    if (qword_1000CFAB0 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v25 = type metadata accessor for Logger(0);
    sub_1000096EC(v25, (uint64_t)qword_1000DDA88);
    v26 = swift_bridgeObjectRetain_n(a2, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = a1;
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v52[0] = v31;
      *(_DWORD *)v30 = 136315138;
      swift_bridgeObjectRetain(a2);
      sub_100014B44(v29, a2, v52);
      v48 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "SportsKitRequestXPCSession: Creating activity for event %s, missing process bundle id", v30, 0xCu);
      swift_arrayDestroy(v31, 1);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v33 = sub_100027C78(1u, 0xD000000000000019, 0x80000001000A7970);
    v34 = (void *)_convertErrorToNSError(_:)(v33);
    ((void (**)(_QWORD, void *))a5)[2](a5, v34);

    swift_errorRelease(v33);
    v35 = v9;
  }
  swift_release(v35);
  _Block_release(a5);
}

uint64_t sub_10007149C(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t, id, void *))
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v10 = sub_1000735D8((int)a1, a2, a3, a4, a5);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v13 = v12;
  _Block_copy(v10);
  v14 = a1;
  a6(v11, v13, a4, v14, v10);
  _Block_release(v10);

  return swift_bridgeObjectRelease();
}

void sub_100071528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v11 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v11);
  v12 = sub_1000734A8();
  sub_100073518(v12);
  v13 = qword_1000CFA90;
  swift_bridgeObjectRetain(a2);
  v14 = v5;
  swift_retain(a5);
  if (v13 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  v15 = qword_1000DDA70;
  v16 = sub_1000730F4();
  v17 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C7FD8, 72);
  v17[2] = v15;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = a2;
  v17[6] = v14;
  v17[7] = a4;
  v17[8] = a5;
  swift_retain(v15);
  v18 = sub_100043B28(v6, (uint64_t)&unk_1000D2C30, (uint64_t)v17);
  swift_release(v18);
  sub_10000A668();
}

void sub_10007163C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_100071688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[33] = a7;
  v8[34] = a8;
  v8[31] = a5;
  v8[32] = a6;
  v8[30] = a4;
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return swift_task_switch(sub_1000716F4, qword_1000DDA70, 0);
}

uint64_t sub_1000716F4()
{
  uint64_t v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = sub_1000187DC();
  v4 = sub_1000096EC(v3, (uint64_t)qword_1000DDA88);
  v5 = sub_100018974(v2);
  v6 = v4;
  Logger.logObject.getter(v5);
  v7 = sub_10004ED30();
  v8 = sub_100073598(v7);
  v9 = *(_QWORD *)(v0 + 248);
  if (v8)
  {
    v10 = *(_QWORD *)(v0 + 240);
    v11 = (uint8_t *)sub_100018554(12);
    v12 = sub_100018554(32);
    v24 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain(v9);
    sub_100014B44(v10, v9, &v24);
    *(_QWORD *)(v0 + 16) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
    sub_100018A58(v9);
    sub_100018948((void *)&_mh_execute_header, v6, v1, "SportsKitRequestXPCSession: Destroying activity for event %s", v11);
    sub_100018940(v12);
    sub_10000A818(v12);
    sub_10000A818((uint64_t)v11);
  }
  else
  {
    sub_100018540(*(_QWORD *)(v0 + 248));
  }

  v15 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 240);
  sub_100023E30(v17 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation, v0 + 16);
  *(_QWORD *)(v0 + 200) = 0xD000000000000011;
  *(_QWORD *)(v0 + 208) = 0x80000001000A5730;
  *(_QWORD *)(v0 + 216) = v18;
  *(_QWORD *)(v0 + 224) = v16;
  sub_100018A3C();
  *(_QWORD *)(v0 + 232) = sub_10009193C();
  v19 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C8000, 48);
  v19[2] = v18;
  v19[3] = v16;
  v19[4] = v15;
  v19[5] = v14;
  sub_100018A3C();
  swift_retain(v14);
  v20 = sub_10000738C(&qword_1000D0B18);
  sub_100031668((unint64_t *)&qword_1000D0B20, &qword_1000D0B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v21 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1000731E4, v19, nullsub_1, 0, v20);
  swift_release(v19);
  swift_release(*(_QWORD *)(v0 + 232));
  sub_100073210((_QWORD *)(v0 + 16));
  v22 = v17 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables;
  sub_100057888(v17 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_cancellables, v0 + 16);
  AnyCancellable.store(in:)(v22);
  swift_endAccess(v0 + 16);
  swift_release(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071980(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v45)(_QWORD);
  _QWORD v46[3];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;

  v9 = *a1;
  if (*a1)
  {
    sub_100073558();
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v11 = sub_1000187DC();
    sub_1000096EC(v11, (uint64_t)qword_1000DDB00);
    sub_100018A3C();
    sub_100073558();
    sub_100018A3C();
    v12 = sub_100073558();
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v45 = a4;
      v15 = sub_100018554(22);
      v16 = sub_100018554(64);
      v49 = v16;
      *(_DWORD *)v15 = 136315394;
      v17 = sub_100018A3C();
      sub_100073578(v17, v18, v19, v20, v21, v22, v23);
      v48 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v15 + 4, v15 + 12);
      sub_100018A58(a3);
      *(_WORD *)(v15 + 12) = 2080;
      swift_getErrorValue(v9, v47, v46);
      v25 = Error.localizedDescription.getter(v46[1], v46[2]);
      sub_100014B44(v25, v26, &v49);
      v48 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease();
      sub_10002FDC4();
      sub_10002FDC4();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, a6, (uint8_t *)v15, 0x16u);
      sub_100073600();
      sub_10000A818(v16);
      v28 = v15;
      a4 = v45;
      sub_10000A818(v28);
    }
    else
    {
      sub_100018540(a3);
      sub_10002FDC4();
      sub_10002FDC4();
    }

    sub_100073558();
    a4(v9);
    sub_10002FDC4();
    return sub_10002FDC4();
  }
  else
  {
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v30 = sub_1000187DC();
    sub_1000096EC(v30, (uint64_t)qword_1000DDB00);
    v31 = sub_100018974(a3);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)sub_100018554(12);
      v35 = sub_100018554(32);
      v49 = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = sub_100018A3C();
      sub_100073578(v36, v37, v38, v39, v40, v41, v42);
      v48 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v34 + 4, v34 + 12);
      sub_100018A58(a3);
      sub_100018948((void *)&_mh_execute_header, v32, v33, a7, v34);
      sub_100018940(v35);
      sub_10000A818(v35);
      sub_10000A818((uint64_t)v34);

    }
    else
    {

      sub_100018540(a3);
    }
    return ((uint64_t (*)(_QWORD))a4)(0);
  }
}

uint64_t sub_100071D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100071D64(a1, a2, a3, a4, a5);
}

uint64_t sub_100071D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v10 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v10);
  v11 = sub_1000734A8();
  sub_100073518(v11);
  v12 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C7F60, 64);
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = a4;
  v12[7] = a5;
  swift_bridgeObjectRetain(a2);
  swift_retain(a5);
  v13 = sub_100043B28(v5, (uint64_t)&unk_1000D2C20, (uint64_t)v12);
  return swift_release(v13);
}

uint64_t sub_100071E30(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v14 = sub_1000735D8((int)a1, a2, a3, a4, a5);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v17 = v16;
  v18 = sub_10000A748(a6, 24);
  *(_QWORD *)(v18 + 16) = v14;
  v19 = a1;
  a8(v15, v17, a4, a7, v18);

  swift_bridgeObjectRelease();
  return swift_release(v18);
}

uint64_t sub_100071ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch(sub_100071EF4, 0, 0);
}

uint64_t sub_100071EF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v1 = v0[4];
  v2 = sub_1000187DC();
  v3 = sub_1000096EC(v2, (uint64_t)qword_1000DDA88);
  v4 = sub_100018974(v1);
  v5 = v3;
  Logger.logObject.getter(v4);
  v6 = sub_10004ED30();
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[4];
  if (v7)
  {
    v9 = v0[3];
    v10 = (uint8_t *)sub_100018554(12);
    v11 = sub_100018554(32);
    v14 = v11;
    *(_DWORD *)v10 = 136315138;
    sub_100018A3C();
    sub_100014B44(v9, v8, &v14);
    v0[2] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v10 + 4, v10 + 12);
    sub_100018A58(v8);
    sub_100018948((void *)&_mh_execute_header, v5, v6, "SportsKitRequestXPCSession: Checking activity for event %s", v10);
    sub_100018940(v11);
    sub_10000A818(v11);
    sub_10000A818((uint64_t)v10);
  }
  else
  {
    sub_100018540(v0[4]);
  }

  if (qword_1000CFA98 != -1)
    swift_once(&qword_1000CFA98, sub_1000479AC);
  v0[7] = qword_1000DDA78;
  if (qword_1000CFA90 != -1)
    swift_once(&qword_1000CFA90, sub_100047918);
  return swift_task_switch(sub_1000720E0, qword_1000DDA70, 0);
}

uint64_t sub_1000720E0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10004A844(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  *(_BYTE *)(v0 + 64) = v1 & 1;
  sub_100018E50();
  return swift_task_switch(v2, v3, v4);
}

uint64_t sub_100072124()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 40))(*(unsigned __int8 *)(v0 + 64));
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000721E8(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  char v3;

  if (qword_1000CFA98 != -1)
    swift_once(&qword_1000CFA98, sub_1000479AC);
  sub_1000479F8();
  a2[2](a2, v3 & 1);
  _Block_release(a2);
}

uint64_t sub_10007229C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = v1;
  return sub_10004E898((uint64_t)sub_1000722AC);
}

uint64_t sub_1000722AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  sub_10004E97C();
  v1 = *(_QWORD *)(v0 + 104);
  sub_10006E02C(*(_QWORD *)(v0 + 96));
  *(_QWORD *)(v0 + 112) = v2;
  *(_QWORD *)(v0 + 56) = v2;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 88) = 0;
  v3 = sub_1000733FC((_QWORD *)(v1 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation));
  sub_100073474((uint64_t)v3);
  sub_10007353C();
  v4 = (_QWORD *)swift_task_alloc(dword_1000D03CC);
  *(_QWORD *)(v0 + 120) = v4;
  v5 = sub_1000735C8(v4, (uint64_t)sub_100072328);
  return sub_100073428(v5);
}

uint64_t sub_100072328()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 120);
  v3 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    sub_100018E50();
    return sub_1000184AC();
  }
  else
  {
    sub_100007618((_QWORD *)(v3 + 16));
    return sub_1000184F0(*(uint64_t (**)(void))(v3 + 8));
  }
}

uint64_t sub_1000723A0()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 16));
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100072434(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = sub_10000738C(&qword_1000D0410);
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String, v6, &protocol witness table for String);
  v3[4] = v7;
  v8 = dword_1000D2C0C;
  a3;
  v9 = (_QWORD *)swift_task_alloc(v8);
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_1000724D8;
  return sub_10007229C(v7);
}

uint64_t sub_1000724D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  v2 = *v1;
  v5 = v2;
  v3 = *(void **)(v2 + 16);
  sub_1000735EC(*(_QWORD *)(v2 + 40), &v5);

  swift_bridgeObjectRelease();
  if (v0)
  {
    _convertErrorToNSError(_:)(v0);
    sub_1000735E0();
    sub_1000735B8();

  }
  else
  {
    sub_1000735A8();
  }
  _Block_release(*(const void **)(v2 + 24));
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_100072558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_10000738C(&qword_1000D0578);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  sub_10000964C((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_1000C7E70, 48, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v9 = (_QWORD *)swift_allocObject(&unk_1000C7E98, 48, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_1000D2BB0;
  v9[5] = v8;
  v10 = sub_100072C88((uint64_t)v6, (uint64_t)&unk_1000D2BC0, (uint64_t)v9);
  return swift_release(v10);
}

uint64_t sub_100072634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  return sub_10004E898((uint64_t)sub_10007264C);
}

uint64_t sub_10007264C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10004E97C();
  sub_1000734E8();
  *(_BYTE *)(v0 + 88) = 1;
  v2 = sub_1000733FC((_QWORD *)(v1 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation));
  sub_100073474((uint64_t)v2);
  sub_10007353C();
  v3 = (_QWORD *)swift_task_alloc(dword_1000D03CC);
  *(_QWORD *)(v0 + 136) = v3;
  v4 = sub_1000735C8(v3, (uint64_t)sub_1000726AC);
  return sub_100073428(v4);
}

uint64_t sub_1000726AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100073488();
  if (v1)
  {
    sub_100018E50();
    return sub_1000184AC();
  }
  else
  {
    sub_100007618((_QWORD *)(v0 + 16));
    return sub_1000184F0(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_100072704(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_1000D2BF4;
  a4;
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_1000733F8;
  return sub_100072634(v8, v10, v11, v13);
}

uint64_t sub_1000727B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  return sub_10004E898((uint64_t)sub_1000727D0);
}

uint64_t sub_1000727D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  sub_10004E97C();
  sub_1000734E8();
  *(_BYTE *)(v0 + 88) = 2;
  v2 = sub_1000733FC((_QWORD *)(v1 + OBJC_IVAR____TtC7sportsd26SportsKitRequestXPCSession_subscriptionOperation));
  sub_100073474((uint64_t)v2);
  sub_10007353C();
  v3 = (_QWORD *)swift_task_alloc(dword_1000D03CC);
  *(_QWORD *)(v0 + 136) = v3;
  v4 = sub_1000735C8(v3, (uint64_t)sub_100072830);
  return sub_100073428(v4);
}

uint64_t sub_100072830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100073488();
  if (v1)
  {
    sub_100018E50();
    return sub_1000184AC();
  }
  else
  {
    sub_100007618((_QWORD *)(v0 + 16));
    return sub_1000184F0(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_100072874()
{
  uint64_t v0;

  sub_100007618((_QWORD *)(v0 + 16));
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000728B4(void *a1, int a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  void *v12;
  _QWORD *v13;
  id v14;
  id v15;
  id v16;

  v12 = sub_1000735D8((int)a1, a2, (int)a3, (int)a4, a5);
  v13 = (_QWORD *)sub_10000A748(a6, 48);
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = v12;
  v13[5] = a1;
  v14 = a3;
  v15 = a4;
  v16 = a1;
  return sub_100072558(a7, (uint64_t)v13);
}

uint64_t type metadata accessor for SportsKitRequestXPCSession()
{
  return objc_opt_self(_TtC7sportsd26SportsKitRequestXPCSession);
}

uint64_t sub_100072944(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v10 = v9;
  v4[4] = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v4[5] = v12;
  v14 = dword_1000D2BDC;
  a4;
  v15 = (_QWORD *)swift_task_alloc(v14);
  v4[6] = v15;
  *v15 = v4;
  v15[1] = sub_1000729F8;
  return sub_1000727B8(v8, v10, v11, v13);
}

uint64_t sub_1000729F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  sub_10004E97C();
  v9 = v2;
  v10 = v3;
  v8 = v1;
  v4 = (uint64_t *)*v1;
  v8 = v4;
  v5 = (void *)v4[4];
  v6 = (void *)v4[2];
  sub_1000735EC(v4[6], &v8);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    _convertErrorToNSError(_:)(v0);
    sub_1000735E0();
    sub_1000735B8();

  }
  else
  {
    sub_1000735A8();
  }
  _Block_release((const void *)v4[3]);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_100072A8C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10004E97C();
  v1 = (_QWORD *)sub_1000735F8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100073450(v1, (uint64_t)sub_100072AD0);
  return sub_10007343C(v2, v3, v4, v5, v6);
}

uint64_t sub_100072AD0()
{
  uint64_t v0;

  sub_10003B9A0();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100072AF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1000733C4;
  return v6();
}

uint64_t sub_100072B4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10004E97C();
  v1 = (_QWORD *)sub_1000735F8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100073450(v1, (uint64_t)sub_1000733C4);
  return sub_10007343C(v2, v3, v4, v5, v6);
}

uint64_t sub_100072B90(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1000733C4;
  return v7();
}

uint64_t sub_100072BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100040078();
  swift_release(*(_QWORD *)(v0 + 40));
  v1 = sub_100073508();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100072C08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = swift_task_alloc(dword_1000D2BBC);
  v8 = (_QWORD *)sub_10004E88C(v7);
  *v8 = v2;
  v8[1] = sub_1000733C4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1000D2BB8 + dword_1000D2BB8))(a1, v4, v5, v6);
}

uint64_t sub_100072C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = sub_100009658(a1, 1, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10000A47C(a1, &qword_1000D0578);
    v8 = 7168;
  }
  else
  {
    v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v8 = v9 | 0x1C00;
  }
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(a3 + 24);
    ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    v15 = v14;
    swift_unknownObjectRelease(v10);
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = swift_allocObject(&unk_1000C7EC0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v13;
    v19[3] = v15;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000D2BD0, v16);
}

uint64_t sub_100072DCC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100072E30;
  return v6(a1);
}

uint64_t sub_100072E30()
{
  uint64_t v0;

  sub_10003B9A0();
  return sub_1000184C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100072E58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100072E7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(int **)(v1 + 16);
  v5 = swift_task_alloc(dword_1000D2BCC);
  v6 = (_QWORD *)sub_10004E88C(v5);
  *v6 = v2;
  v6[1] = sub_100072AD0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000D2BC8 + dword_1000D2BC8))(a1, v4);
}

uint64_t sub_100072EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  _Block_release(*(const void **)(v0 + 32));
  v1 = sub_100073508();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100072F20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_10004E97C();
  v1 = (_QWORD *)sub_1000735F8();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_100073450(v1, (uint64_t)sub_1000733C4);
  return sub_10007343C(v2, v3, v4, v5, v6);
}

uint64_t sub_100072F64()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100072F98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1000D2BFC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000733C4;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1000D2BF8 + dword_1000D2BF8))(v2, v3, v4);
}

uint64_t sub_100073008()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007302C(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_100073040()
{
  uint64_t v0;

  sub_100040078();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100073070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_task_alloc(dword_1000D2C1C);
  v3 = (_QWORD *)sub_10004E88C(v2);
  v4 = sub_1000734C4(v3);
  return sub_100071ED8(v4, v5, v6, v7, v8, v9, v1);
}

void sub_1000730DC(uint64_t a1)
{
  uint64_t v1;

  sub_10007163C(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1000730F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D1988;
  if (!qword_1000D1988)
  {
    v1 = type metadata accessor for LiveActivityActor();
    result = swift_getWitnessTable(&unk_1000A0FAC, v1);
    atomic_store(result, &qword_1000D1988);
  }
  return result;
}

uint64_t sub_100073134()
{
  uint64_t v0;

  sub_100040078();
  swift_bridgeObjectRelease();

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10007316C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc(dword_1000D2C2C);
  v4 = (_QWORD *)sub_10004E88C(v3);
  v5 = sub_1000734C4(v4);
  return sub_100071688(v5, v6, v7, v8, v9, v10, v1, v2);
}

uint64_t sub_1000731E4(uint64_t *a1)
{
  uint64_t v1;

  return sub_100071980(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), "Failed to destroy activity for canonicalId: %s - %s", "Activity destroyed for canonical ID: %s");
}

_QWORD *sub_100073210(_QWORD *a1)
{
  destroy for SubscriptionStopActivityOperation(a1);
  return a1;
}

uint64_t sub_100073248(uint64_t *a1)
{
  uint64_t v1;

  return sub_100071980(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), "Failed to create activity for canonical ID: %s - %s", "Activity created for canonical ID: %s");
}

uint64_t sub_100073274(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000707FC(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

_QWORD *sub_10007327C(_QWORD *a1)
{
  destroy for SubscriptionUnregisterAllOperation(a1);
  return a1;
}

uint64_t sub_1000732B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000732DC(uint64_t a1)
{
  uint64_t v1;

  return sub_10007046C(a1, *(uint64_t (**)(id))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000732EC(_QWORD *a1)
{
  uint64_t v1;

  return sub_10006FBAC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_1000732F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D2C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100073344(_QWORD *a1)
{
  uint64_t v1;

  return sub_10006F37C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100073354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + 40));
  v1 = sub_100073508();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100073378(uint64_t a1)
{
  uint64_t v1;

  return sub_10006F5DC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(_QWORD))(v1 + 32));
}

uint64_t sub_100073384@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

_QWORD *sub_1000733FC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  sub_1000073CC(a1, v3);
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v4 + 8);
  return sub_100023784(v1);
}

uint64_t sub_100073428(uint64_t a1)
{
  return sub_10000FA5C(a1);
}

uint64_t sub_10007343C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_100073450@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_100073474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v2, v1);
}

uint64_t sub_100073488()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  v5 = *(_QWORD *)(v3 + 136);
  *v4 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000734A8()
{
  return type metadata accessor for TaskPriority(0);
}

uint64_t sub_1000734C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

__n128 sub_1000734E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  result = *(__n128 *)(v0 + 96);
  *(__n128 *)(v0 + 56) = result;
  *(_QWORD *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 80) = v1;
  return result;
}

uint64_t sub_100073508()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100073518(uint64_t a1)
{
  uint64_t v1;

  return sub_10000964C(v1, 1, 1, a1);
}

BOOL sub_10007352C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

_QWORD *sub_10007353C()
{
  _QWORD *v0;
  uint64_t v1;

  return sub_1000073CC(v0, *(_QWORD *)(v1 + 40));
}

uint64_t sub_100073558()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_100073560(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = a1;
  return v1 - 128;
}

void sub_100073578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  unint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  sub_100014B44(v8, v7, (uint64_t *)va);
}

uint64_t sub_100073588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

BOOL sub_100073598(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000735A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 16))(v0, 0);
}

uint64_t sub_1000735B8()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v0, v1);
}

uint64_t sub_1000735C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void *sub_1000735D8(int a1, int a2, int a3, int a4, void *aBlock)
{
  return _Block_copy(aBlock);
}

uint64_t sub_1000735E0()
{
  uint64_t v0;

  return swift_errorRelease(v0);
}

uint64_t sub_1000735EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_1000735F8()
{
  uint64_t v0;

  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

uint64_t sub_100073600()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

uint64_t sub_10007360C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return Publisher.sink(receiveCompletion:receiveValue:)(a1, a2, a3, 0, v3);
}

uint64_t sub_100073618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for WatchlistSuppressionActor();
  v1 = swift_allocObject(v0, 112, 15);
  result = swift_defaultActor_initialize(v1);
  qword_1000DDB50 = v1;
  return result;
}

uint64_t *sub_100073650()
{
  if (qword_1000CFAF8 != -1)
    swift_once(&qword_1000CFAF8, sub_100073618);
  return &qword_1000DDB50;
}

uint64_t type metadata accessor for WatchlistSuppressionActor()
{
  return objc_opt_self(_TtC7sportsd25WatchlistSuppressionActor);
}

uint64_t sub_1000736B0()
{
  sub_100073650();
  return swift_retain(qword_1000DDB50);
}

uint64_t sub_1000736CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for WatchlistSuppressionActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

unint64_t sub_1000736F0()
{
  unint64_t v0;
  Swift::String v1;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v0 = sub_100075034();
  v1._countAndFlagsBits = Error.localizedDescription.getter(&unk_1000C84C0, v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

unint64_t sub_100073780()
{
  return sub_1000736F0();
}

unint64_t sub_100073794(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000017;
  else
    return 0xD000000000000020;
}

unint64_t sub_1000737D0()
{
  char *v0;

  return sub_100073794(*v0);
}

uint64_t sub_1000737D8()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager();
  sub_10000A748(v0, 40);
  result = sub_10007380C();
  qword_1000DDB58 = result;
  return result;
}

uint64_t sub_10007380C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  type metadata accessor for PersistentStore(0);
  v2 = PersistentStore.__allocating_init()();
  *(_QWORD *)(v1 + 24) = v2;
  v3 = swift_retain(v2);
  v4 = dispatch thunk of PersistentStore.retrieveSuppressionTally()(v3);
  swift_release(v2);
  *(_QWORD *)(v1 + 32) = v4;
  return v1;
}

void sub_100073868(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  NSString v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  void (*v33)(uint64_t, void *);
  void *v34;
  void *v35;
  _QWORD *v36;
  char v37[32];

  v4 = sub_100074B6C();
  if (!v4)
    goto LABEL_4;
  v12 = v4;
  v35 = sub_100073A60;
  v36 = 0;
  v32 = 1107296256;
  v33 = sub_10000FA0C;
  v34 = &unk_1000C84D0;
  v13 = sub_100075498((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11, (uint64_t)_NSConcreteStackBlock);
  swift_release(0);
  v14 = objc_msgSend(v12, "remoteObjectProxyWithErrorHandler:", v13);
  _Block_release(v13);

  _bridgeAnyObjectToAny(_:)(v14);
  swift_unknownObjectRelease(v14);
  v15 = sub_10000738C(&qword_1000D2E08);
  if (swift_dynamicCast(&v31, v37, (char *)&type metadata for Any + 8, v15, 6))
  {
    v16 = v31;
    v17 = String._bridgeToObjectiveC()();
    v18 = sub_10000A748((uint64_t)&unk_1000C82A8, 24);
    swift_weakInit(v18 + 16);
    v19 = (_QWORD *)sub_10000A748((uint64_t)&unk_1000C8508, 56);
    v19[2] = sub_1000371C4;
    v19[3] = 0;
    v19[4] = v18;
    v19[5] = a1;
    v19[6] = a2;
    v35 = sub_100075414;
    v36 = v19;
    v32 = 1107296256;
    v33 = sub_10007409C;
    v34 = &unk_1000C8520;
    sub_100075498((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26, (uint64_t)_NSConcreteStackBlock);
    v27 = v36;
    swift_bridgeObjectRetain(a2);
    swift_release(v27);
    sub_1000754B0(v16, "suppressNotificationsFor:completion:");
    sub_1000754A8();
    swift_unknownObjectRelease(v16);

  }
  else
  {
LABEL_4:
    v28 = sub_100075074();
    v29 = sub_100043398((uint64_t)&unk_1000C8430, v28);
    *v30 = 0;
    sub_1000371C4(v29);
    swift_errorRelease(v29);
  }
}

void sub_100073A60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _BYTE v14[8];
  uint64_t v15;

  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v2 = type metadata accessor for Logger(0);
  sub_1000096EC(v2, (uint64_t)qword_1000DDA88);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(a1, v14, v13);
    v8 = Error.localizedDescription.getter(v13[1], v13[2]);
    v10 = v9;
    sub_100014B44(v8, v9, &v15);
    v12 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Watchlist XPC Error: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  sub_1000371C4(a1);
}

uint64_t sub_100073C20(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[24];
  char v71[24];
  char v72[32];

  v69 = a6;
  v11 = type metadata accessor for Date(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000738C(&qword_1000D2E00);
  __chkstk_darwin(v14);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v60 - v18;
  __chkstk_darwin(v20);
  v22 = (char *)&v60 - v21;
  __chkstk_darwin(v23);
  v25 = (char *)&v60 - v24;
  v26 = type metadata accessor for DatedSubscribers(0);
  __chkstk_darwin(v26);
  v32 = __chkstk_darwin(v27);
  if (a1)
    return ((uint64_t (*)(uint64_t, __n128))a2)(a1, v32);
  v63 = v13;
  v64 = v19;
  v60 = v31;
  v61 = v16;
  v66 = (char *)&v60 - v29;
  v67 = a5;
  v34 = v28;
  v35 = v69;
  v68 = v30;
  v65 = a3;
  swift_beginAccess(a4 + 16, v72, 0, 0);
  result = swift_weakLoadStrong(a4 + 16);
  if (result)
  {
    v36 = result;
    v62 = (uint64_t *)(result + 32);
    swift_beginAccess(result + 32, v71, 0, 0);
    v37 = *(_QWORD *)(v36 + 32);
    if (*(_QWORD *)(v37 + 16))
    {
      v38 = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      v39 = sub_100015050(v67, v35);
      if ((v40 & 1) != 0)
      {
        v41 = v34;
        (*(void (**)(char *, unint64_t, uint64_t))(v68 + 16))(v25, *(_QWORD *)(v37 + 56) + *(_QWORD *)(v68 + 72) * v39, v34);
        v42 = (uint64_t)v25;
        v43 = 0;
      }
      else
      {
        v42 = (uint64_t)v25;
        v43 = 1;
        v41 = v34;
      }
      sub_10000964C(v42, v43, 1, v34);
    }
    else
    {
      v41 = v34;
      sub_10000964C((uint64_t)v25, 1, 1, v34);
      v38 = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
    }
    v44 = v66;
    v45 = (uint64_t)v64;
    sub_100075424((uint64_t)v25, (uint64_t)v22);
    v46 = sub_100009658((uint64_t)v22, 1, v41);
    if ((_DWORD)v46 == 1)
    {
      v47 = v63;
      Date.init()(v46);
      DatedSubscribers.init(subscriberCount:lastSubscription:)(0, v47);
      sub_100075198((uint64_t)v22);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v44, v22, v41);
    }
    v48 = v67;
    v49 = v62;
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v37);
    v50 = swift_bridgeObjectRetain(v38);
    static DatedSubscribers.+ infix(_:_:)(v44, 1, v50);
    sub_10000964C(v45, 0, 1, v41);
    swift_beginAccess(v49, v70, 33, 0);
    sub_100092628(v45, v48, v38);
    swift_endAccess(v70);
    v51 = sub_100074ADC();
    v52 = v36;
    if (v51)
    {
      v53 = v51;
      a2();
      swift_release(v52);
      swift_errorRelease(v53);
      return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v44, v41);
    }
    else
    {
      v54 = *v49;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v54);
      v55 = (uint64_t)v61;
      sub_10007556C(v48, v38, v54, (uint64_t)v61);
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v54);
      if (sub_100009658(v55, 1, v41) == 1)
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v41);
        swift_release(v52);
        return sub_100075198(v55);
      }
      else
      {
        v56 = v68;
        v57 = v60;
        v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v60, v55, v41);
        if (DatedSubscribers.subscriberCount.getter(v58) >= 2)
          ((void (*)(_QWORD))a2)(0);
        swift_release(v52);
        v59 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
        v59(v57, v41);
        return ((uint64_t (*)(char *, uint64_t))v59)(v44, v41);
      }
    }
  }
  return result;
}

void sub_10007409C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_1000740F0(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void *v26;
  void **v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  _QWORD *v44;
  void **v45;
  void *v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  void (*v51)(char *, char *, uint64_t);
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  _QWORD *v64;
  char v65[32];
  char v66[32];

  v10 = sub_10000738C(&qword_1000D2E00);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000754D4();
  v58 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v58 + 64);
  __chkstk_darwin(v13);
  v57 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v51 - v16;
  v18 = sub_10000A748((uint64_t)&unk_1000C82F8, 32);
  v59 = a4;
  v60 = v18;
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = a5;
  sub_100018E20(a3 + 32, (uint64_t)v66);
  v19 = *(_QWORD *)(a3 + 32);
  swift_retain(a5);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v19);
  sub_10007556C(a1, a2, v19, (uint64_t)v12);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v19);
  if (sub_100009658((uint64_t)v12, 1, v13) == 1)
  {
    sub_100075198((uint64_t)v12);
    v20 = sub_100075074();
    v21 = sub_100043398((uint64_t)&unk_1000C8430, v20);
    *v22 = 0;
    sub_10002E6C8(v21, (uint64_t (*)(uint64_t, _QWORD))v59);
    swift_errorRelease(v21);
LABEL_8:
    v30 = v60;
    goto LABEL_9;
  }
  v53 = v14;
  v54 = a2;
  v56 = a5;
  v23 = a1;
  v24 = v58;
  v25 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v25(v17, v12, v13);
  v26 = sub_100074B6C();
  v27 = v59;
  if (!v26)
  {
LABEL_7:
    v47 = sub_100075074();
    v48 = sub_100043398((uint64_t)&unk_1000C8430, v47);
    *v49 = 0;
    a5 = v56;
    sub_10002E6C8(v48, (uint64_t (*)(uint64_t, _QWORD))v27);
    swift_errorRelease(v48);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v13);
    goto LABEL_8;
  }
  v28 = v26;
  v55 = v17;
  v29 = sub_10000A748((uint64_t)&unk_1000C8320, 32);
  v30 = v60;
  *(_QWORD *)(v29 + 16) = sub_100075190;
  *(_QWORD *)(v29 + 24) = v30;
  v63 = sub_1000751D8;
  v64 = (_QWORD *)v29;
  v61 = _NSConcreteStackBlock;
  v62 = 1107296256;
  v31 = sub_1000754C8((uint64_t)sub_10000FA0C);
  v32 = v64;
  swift_retain(v30);
  swift_release(v32);
  v33 = objc_msgSend(v28, "remoteObjectProxyWithErrorHandler:", v31);
  _Block_release(v31);

  _bridgeAnyObjectToAny(_:)(v33);
  swift_unknownObjectRelease(v33);
  v34 = sub_10000738C(&qword_1000D2E08);
  if ((swift_dynamicCast(&v61, v65, (char *)&type metadata for Any + 8, v34, 6) & 1) == 0)
  {
    v24 = v58;
    v17 = v55;
    goto LABEL_7;
  }
  v59 = v61;
  v35 = v54;
  v52 = String._bridgeToObjectiveC()();
  v36 = sub_10000A748((uint64_t)&unk_1000C82A8, 24);
  swift_weakInit(v36 + 16);
  v51 = v25;
  v38 = v57;
  v37 = v58;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v57, v55, v13);
  v39 = *(unsigned __int8 *)(v37 + 80);
  v40 = (v39 + 40) & ~v39;
  v41 = (v53 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = (char *)swift_allocObject(&unk_1000C8370, v41 + 16, v39 | 7);
  *((_QWORD *)v42 + 2) = sub_100075190;
  *((_QWORD *)v42 + 3) = v30;
  *((_QWORD *)v42 + 4) = v36;
  v51(&v42[v40], v38, v13);
  v43 = (uint64_t *)&v42[v41];
  *v43 = v23;
  v43[1] = v35;
  v63 = sub_100075274;
  v64 = v42;
  v61 = _NSConcreteStackBlock;
  v62 = 1107296256;
  sub_1000754C8((uint64_t)sub_10007409C);
  v44 = v64;
  swift_bridgeObjectRetain(v35);
  swift_retain(v30);
  swift_release(v44);
  v45 = v59;
  v46 = v52;
  sub_1000754B0(v59, "enableNotificationsFor:completion:");
  sub_1000754A8();
  swift_unknownObjectRelease(v45);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v55, v13);
  a5 = v56;
LABEL_9:
  swift_release(a5);
  return swift_release(v30);
}

uint64_t sub_100074580(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;

  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v4 = type metadata accessor for Logger(0);
  sub_1000096EC(v4, (uint64_t)qword_1000DDA88);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v18 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(a1, v17, v16);
    v10 = Error.localizedDescription.getter(v16[1], v16[2]);
    v12 = v11;
    sub_100014B44(v10, v11, &v18);
    v15 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Watchlist XPC Error: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return a2(a1);
}

uint64_t sub_100074754(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[24];
  _BYTE v49[24];
  _BYTE v50[24];

  v14 = sub_10000738C(&qword_1000D2E00);
  __chkstk_darwin(v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v43 - v18;
  v20 = type metadata accessor for DatedSubscribers(0);
  __chkstk_darwin(v20);
  v25 = __chkstk_darwin(v21);
  v27 = (char *)&v43 - v26;
  if (a1)
    return ((uint64_t (*)(uint64_t, __n128))a2)(a1, v25);
  v46 = v23;
  v47 = v22;
  v43 = v24;
  v44 = a2;
  v45 = a3;
  swift_beginAccess(a4 + 16, v50, 0, 0);
  result = swift_weakLoadStrong(a4 + 16);
  if (result)
  {
    v29 = result;
    if (((uint64_t (*)(void))DatedSubscribers.subscriberCount.getter)() >= 1)
    {
      static DatedSubscribers.- infix(_:_:)(a5, 1);
      v31 = v46;
      v30 = v47;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v19, v27, v47);
      sub_10000964C((uint64_t)v19, 0, 1, v30);
      swift_beginAccess(v29 + 32, v49, 33, 0);
      swift_bridgeObjectRetain(a7);
      sub_100092628((uint64_t)v19, a6, a7);
      v32 = swift_endAccess(v49);
      if (DatedSubscribers.subscriberCount.getter(v32) >= 1)
      {
        v33 = sub_100074ADC();
        if (v33)
        {
          v34 = v33;
          v44();
          swift_release(v29);
          swift_errorRelease(v34);
        }
        else
        {
          v44();
          swift_release(v29);
        }
        return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v27, v47);
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v27, v30);
    }
    swift_beginAccess(v29 + 32, v49, 0, 0);
    v35 = *(_QWORD *)(v29 + 32);
    v36 = a7;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(v35);
    sub_10007556C(a6, a7, v35, (uint64_t)v16);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(v35);
    v37 = v47;
    if (sub_100009658((uint64_t)v16, 1, v47) == 1)
    {
      sub_100075198((uint64_t)v16);
LABEL_14:
      ((void (*)(_QWORD))v44)(0);
      return swift_release(v29);
    }
    v38 = v46;
    v39 = v43;
    v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 32))(v43, v16, v37);
    if (DatedSubscribers.subscriberCount.getter(v40))
    {
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v37);
      goto LABEL_14;
    }
    swift_beginAccess(v29 + 32, v48, 33, 0);
    sub_100096D2C(a6, v36, (uint64_t)v19);
    sub_100075198((uint64_t)v19);
    swift_endAccess(v48);
    v41 = sub_100074ADC();
    if (v41)
    {
      v42 = v41;
      v44();
      swift_release(v29);
      swift_errorRelease(v42);
    }
    else
    {
      v44();
      swift_release(v29);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v43, v47);
  }
  return result;
}

uint64_t sub_100074ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  sub_100018E20(v0 + 32, (uint64_t)v4);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = swift_bridgeObjectRetain(v1);
  dispatch thunk of PersistentStore.persistSuppressionTally(_:)(v2);
  swift_bridgeObjectRelease(v1);
  return 0;
}

void *sub_100074B6C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;

  v1 = v0;
  v2 = *(void **)(v0 + 16);
  if (!v2)
  {
    sub_1000750F0();
    v3 = sub_100074D48(0xD000000000000018, 0x80000001000A7B10, 4096);
    v4 = *(void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v3;

    v5 = *(void **)(v1 + 16);
    if (!v5)
      goto LABEL_6;
    v6 = (void *)objc_opt_self(NSXPCInterface);
    v7 = v5;
    v8 = objc_msgSend(v6, "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP7sportsd51WatchlistSuppressNotificationsXPCConnectionProtocol_);
    sub_1000754BC((uint64_t)v8, "setRemoteObjectInterface:");

    v17 = *(void **)(v1 + 16);
    if (!v17)
      goto LABEL_6;
    v18 = sub_100075498(v9, v10, v11, v12, v13, v14, v15, v16, (uint64_t)_NSConcreteStackBlock);
    v19 = v17;
    objc_msgSend(v19, "setInterruptionHandler:", v18);
    sub_1000754A8();

    v20 = *(void **)(v1 + 16);
    if (v20)
    {
      v21 = sub_10000A748((uint64_t)&unk_1000C82A8, 24);
      v22 = swift_weakInit(v21 + 16);
      sub_100075498(v22, v23, v24, v25, v26, v27, v28, v29, (uint64_t)_NSConcreteStackBlock);
      v30 = v20;
      v31 = swift_release(v21);
      sub_1000754BC(v31, "setInvalidationHandler:");
      sub_1000754A8();

      v32 = *(void **)(v1 + 16);
    }
    else
    {
LABEL_6:
      v32 = 0;
    }
    objc_msgSend(v32, "resume");
    v2 = *(void **)(v1 + 16);
  }
  v33 = v2;
  return v2;
}

id sub_100074D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  NSString v7;
  id v8;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v8 = objc_msgSend(v6, "initWithMachServiceName:options:", v7, a3);

  return v8;
}

void sub_100074DC0()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_1000CFAB0 != -1)
    swift_once(&qword_1000CFAB0, sub_10006CC14);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_1000096EC(v0, (uint64_t)qword_1000DDA88);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Watchlist suppression connection interrupted. This should be recoverable.", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_100074E8C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100074EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    if (qword_1000CFAB0 != -1)
      swift_once(&qword_1000CFAB0, sub_10006CC14);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_1000096EC(v4, (uint64_t)qword_1000DDA88);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Watchlist suppression connection invalidated.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(void **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = 0;
    swift_release(v3);

  }
}

uint64_t sub_100074FC8()
{
  uint64_t v0;

  sub_1000754A0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100074FF0()
{
  uint64_t v0;

  sub_100074FC8();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for WatchlistSuppressNotificationsXPCConnectionManager()
{
  return objc_opt_self(_TtC7sportsd50WatchlistSuppressNotificationsXPCConnectionManager);
}

unint64_t sub_100075034()
{
  unint64_t result;

  result = qword_1000D2DE0;
  if (!qword_1000D2DE0)
  {
    result = swift_getWitnessTable(&unk_1000A402C, &unk_1000C84C0);
    atomic_store(result, (unint64_t *)&qword_1000D2DE0);
  }
  return result;
}

unint64_t sub_100075074()
{
  unint64_t result;

  result = qword_1000D2DE8;
  if (!qword_1000D2DE8)
  {
    result = swift_getWitnessTable(&unk_1000A40B4, &unk_1000C8430);
    atomic_store(result, (unint64_t *)&qword_1000D2DE8);
  }
  return result;
}

unint64_t sub_1000750B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2DF0;
  if (!qword_1000D2DF0)
  {
    v1 = type metadata accessor for WatchlistSuppressionActor();
    result = swift_getWitnessTable(&unk_1000A4134, v1);
    atomic_store(result, (unint64_t *)&qword_1000D2DF0);
  }
  return result;
}

unint64_t sub_1000750F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2DF8;
  if (!qword_1000D2DF8)
  {
    v1 = objc_opt_self(NSXPCConnection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000D2DF8);
  }
  return result;
}

uint64_t sub_10007512C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007513C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100075144()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100075168()
{
  uint64_t v0;

  sub_100074EB8(v0);
}

uint64_t sub_100075170()
{
  uint64_t v0;

  sub_1000754A0();
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100075190(uint64_t a1)
{
  uint64_t v1;

  return sub_10002E6C8(a1, *(uint64_t (**)(uint64_t, _QWORD))(v1 + 16));
}

uint64_t sub_100075198(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000738C(&qword_1000D2E00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000751D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100074580(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1000751E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_1000754D4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  sub_1000754A0();
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100075274(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(sub_1000754D4() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100074754(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + v4, *v5, v5[1]);
}

void type metadata accessor for WatchlistSuppressNotificationXPCConnectionManagerError()
{
  sub_100031ABC();
}

uint64_t sub_1000752DC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100075328 + 4 * byte_1000A3F35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10007535C + 4 * asc_1000A3F30[v4]))();
}

uint64_t sub_10007535C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100075364(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007536CLL);
  return result;
}

uint64_t sub_100075378(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100075380);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100075384(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007538C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for WatchlistSuppressionError()
{
  sub_100031ABC();
}

unint64_t sub_1000753A8()
{
  unint64_t result;

  result = qword_1000D2E10;
  if (!qword_1000D2E10)
  {
    result = swift_getWitnessTable(&unk_1000A420C, &unk_1000C84C0);
    atomic_store(result, (unint64_t *)&qword_1000D2E10);
  }
  return result;
}

uint64_t sub_1000753E4()
{
  uint64_t v0;

  sub_1000754A0();
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100075414(uint64_t a1)
{
  uint64_t v1;

  return sub_100073C20(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100075424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000738C(&qword_1000D2E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100075498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _Block_copy(&a9);
}

uint64_t sub_1000754A0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 24));
}

void sub_1000754A8()
{
  const void *v0;

  _Block_release(v0);
}

id sub_1000754B0(id a1, SEL a2)
{
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, a2, v3, v2);
}

id sub_1000754BC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

void *sub_1000754C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = a1;
  *(_QWORD *)(v2 - 184) = v1;
  return _Block_copy((const void *)(v2 - 208));
}

uint64_t sub_1000754D4()
{
  return type metadata accessor for DatedSubscribers(0);
}

void sub_1000754DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a3 + 16) && (v5 = sub_10007B290(a1, a2), (v6 & 1) != 0))
  {
    v7 = sub_10007B300(v5);
    sub_10007B20C(v7, v8);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
    sub_100006200();
  }
}

void sub_100075518(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_1000150A4(a1), (v6 & 1) != 0))
  {
    sub_100038C60(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3, (uint64_t *)&unk_1000CFF70);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[3] = 1;
  }
  sub_100006200();
}

uint64_t sub_10007556C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_10007B290(a1, a2), (v7 & 1) != 0))
  {
    v8 = v6;
    v9 = *(_QWORD *)(v4 + 56);
    v10 = type metadata accessor for DatedSubscribers(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v8, v10);
    sub_10007B330();
    v14 = v10;
  }
  else
  {
    v14 = type metadata accessor for DatedSubscribers(0);
    v11 = a4;
    v12 = 1;
    v13 = 1;
  }
  return sub_10000964C(v11, v12, v13, v14);
}

void sub_1000755F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a3 + 16))
  {
    v3 = sub_10007B290(a1, a2);
    if ((v4 & 1) != 0)
      sub_10007B3C4(v3);
  }
  sub_100006200();
}

uint64_t sub_10007562C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_10007B290(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

void sub_10007567C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16))
  {
    v4 = sub_10007B290(a1, a2);
    if ((v5 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4));
  }
  sub_100006200();
}

void sub_1000756B4(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a2 + 16) && (v4 = sub_100015108(a1), (v5 & 1) != 0))
  {
    v6 = sub_10007B300(v4);
    sub_10007B20C(v6, v7);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_100006200();
  }
}

void sub_1000756F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_100015138();
    if ((v3 & 1) != 0)
      sub_10007B3C4(v2);
  }
  sub_100006200();
}

uint64_t sub_10007572C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (sub_10001519C(), (v4 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3);
  else
    return 0;
}

void sub_100075770(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a2 + 16) && (v4 = sub_1000150A4(a1), (v5 & 1) != 0))
  {
    v6 = sub_10007B300(v4);
    sub_10007B20C(v6, v7);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    sub_100006200();
  }
}

uint64_t sub_1000757B0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t i;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v5 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v3 = v6;
    v6 = v6 || v5 == v2;
    if (v6)
      return v3;
  }
  __break(1u);
  return result;
}

void sub_100075810(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v95 = a4;
  v96 = a3;
  v97 = a2;
  v98 = a1;
  v99 = a5;
  type metadata accessor for Date(0);
  sub_10000A680();
  __chkstk_darwin(v5);
  v94 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10007B214();
  type metadata accessor for SportsActivityAttributes.EventInfo(v7);
  sub_10000A680();
  __chkstk_darwin(v8);
  sub_10000CD48();
  v100 = v9;
  sub_10000738C(&qword_1000D10A0);
  sub_10000A680();
  __chkstk_darwin(v10);
  sub_10000A7D4();
  v13 = v12 - v11;
  v104 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v105 = *(_QWORD *)(v104 - 8);
  sub_10000A680();
  __chkstk_darwin(v14);
  sub_10000CD48();
  v103 = v15;
  v16 = sub_10007B214();
  v17 = type metadata accessor for Sport(v16);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_10007B1E8();
  v102 = v19;
  __chkstk_darwin(v20);
  v22 = (char *)&v80 - v21;
  v24 = (void *)SportingEventSubscription.sportingEventDetails.getter(v23);
  v25 = (void *)SportingEvent.clock.getter(v24);

  v26 = (void *)SportingEventCurrentClock.current.getter();
  v27 = dispatch thunk of SportingEventClock.isCountingDown.getter();

  if (v27 == 2)
  {
    v29 = SportingEventSubscription.sport.getter(v28);
    v30 = Sport.init(rawValue:)(v29);
    v31 = Sport.isClockCountingDown.getter(v30);
    v32 = v18;
    v33 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
    v34 = v17;
    v28 = v33(v22, v17);
  }
  else
  {
    v32 = v18;
    v34 = v17;
    v31 = v27 & 1;
  }
  SportingEventSubscription.metadata.getter(v28);
  v35 = v104;
  v36 = sub_100009658(v13, 1, v104);
  v37 = v105;
  if (v36 != 1)
  {
    v93 = v31;
    v41 = v103;
    v42 = (*(uint64_t (**)(void))(v105 + 32))();
    v43 = SportingEventSubscription.sport.getter(v42);
    v44 = v102;
    Sport.init(rawValue:)(v43);
    v45 = v101;
    v46 = sub_100077D34();
    if (v45)
    {
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v44, v34);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v41, v35);
      goto LABEL_21;
    }
    v101 = v46;
    v47 = (void *)SportingEventSubscription.sportingEventDetails.getter(v46);
    v48 = (void *)dispatch thunk of SportingEvent.league.getter();

    if (v48)
    {
      v49 = SportingEventLeague.localizedDisplayName.getter();

      v50 = v34;
      if ((unint64_t)v49 >> 62)
      {
        if (v49 < 0)
          v56 = v49;
        else
          v56 = v49 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v49);
        v57 = _CocoaArrayWrapper.endIndex.getter(v56);
        sub_1000061E8();
        if (v57)
          goto LABEL_11;
      }
      else if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_11:
        sub_10007DEC8(0, (v49 & 0xC000000000000001) == 0, v49);
        if ((v49 & 0xC000000000000001) != 0)
          v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v49);
        else
          v51 = *(id *)(v49 + 32);
        v52 = v51;
        v53 = sub_1000061E8();
        v82 = SportingEventLocalizedDisplayName.text.getter(v53);
        v81 = v54;

        goto LABEL_20;
      }
      sub_1000061E8();
      sub_10007B2E0();
    }
    else
    {
      sub_10007B2E0();
      v50 = v34;
    }
LABEL_20:
    v88 = v32;
    v58 = SportingEventSubscription.canonicalId.getter(v55);
    v91 = v59;
    v92 = v58;
    v60 = v102;
    v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 16))(v22, v102, v50);
    v62 = SportingEventSubscription.leagueId.getter(v61);
    v89 = v63;
    v90 = v62;
    sub_100077FA4();
    v65 = SportingEventSubscription.canonicalId.getter(v64);
    v67 = v97;
    v66 = v98;
    v68 = v103;
    v70 = sub_10007D23C(v98, v97, v65, v69);
    v86 = v71;
    v87 = v70;
    v72 = sub_1000185B4();
    v73 = SportingEventSubscription.Metadata.preGameTitle.getter(v72);
    v84 = v74;
    v85 = v73;
    v83 = SportingEventSubscription.Metadata.shortTitle.getter();
    v76 = v75;
    v77 = v94;
    static Date.now.getter(v83);
    swift_bridgeObjectRetain(v67);
    v78 = swift_bridgeObjectRetain(v95);
    SportsActivityAttributes.init(canonicalId:sport:leagueId:leagueName:contenders:eventInfo:clockIsCountingDown:eventURL:preGameTitle:shortTitle:createdDate:bundleId:languageTag:)(v92, v91, v22, v90, v89, v82, v81, v101, v78, v100, v93 & 1, v87, v86, v85, v84, v83, v76, v77, v66,
      v67,
      v96,
      v79);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v60, v50);
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v68, v104);
    goto LABEL_21;
  }
  sub_10000A47C(v13, &qword_1000D10A0);
  v38 = sub_10007772C();
  v39 = sub_100043398((uint64_t)&type metadata for ActivityDataProviderError, v38);
  *v40 = 0;
  swift_willThrow(v39);
LABEL_21:
  sub_100055A00();
}

uint64_t sub_100075CC4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __n128 v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  void *v88;
  void (*v89)(_QWORD, _QWORD, _QWORD);
  uint64_t v90;
  void (*v91)(_QWORD, _QWORD, _QWORD);
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_QWORD, _QWORD, _QWORD);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  NSObject *v114;
  os_log_type_t v115;
  int v116;
  _BOOL4 v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(_QWORD, _QWORD);
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  os_log_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(char *, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t (*v196)(uint64_t);
  uint64_t v197;
  uint64_t v198;
  char v199;
  unsigned int *v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  char *v209;
  void (*v210)(_QWORD, _QWORD, _QWORD);
  char v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(uint64_t);
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  double v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int16 v231;
  uint64_t v232;
  char *v233;
  os_log_t v234;
  int v235;
  unsigned int v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  id v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(_QWORD, _QWORD, _QWORD);
  uint64_t v251;
  uint64_t v252;
  void (*v253)(_QWORD, _QWORD, _QWORD);
  uint64_t v254;
  void (*v255)(_QWORD, _QWORD, _QWORD);
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void (*v276)(uint64_t, uint64_t);
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _BYTE v285[4];
  int v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  void (*v292)(char *, uint64_t);
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char v296[8];
  uint64_t v297;
  char v298[8];
  uint64_t v299[5];
  uint64_t v300;

  v286 = a7;
  LODWORD(v292) = a6;
  v270 = a5;
  v287 = (char *)a4;
  v290 = a3;
  v271 = a2;
  v273 = a8;
  sub_10000738C(&qword_1000D0570);
  sub_10000A680();
  __chkstk_darwin(v12);
  sub_10000CD48();
  v14 = sub_10007B1FC(v13);
  v15 = type metadata accessor for URL(v14);
  sub_10007B2D4(v15, (uint64_t)v298);
  v266 = v16;
  sub_10000A680();
  __chkstk_darwin(v17);
  sub_10000CD48();
  v19 = sub_10007B1FC(v18);
  v20 = type metadata accessor for Date(v19);
  sub_10007B2D4(v20, (uint64_t)&v300);
  v264 = v21;
  sub_10000A680();
  __chkstk_darwin(v22);
  sub_10007B1E8();
  sub_10007B1D8();
  __chkstk_darwin(v23);
  sub_10007B318();
  v25 = sub_10007B1FC(v24);
  v26 = type metadata accessor for SportsActivityContentState.EventInfoState(v25);
  sub_10007B2D4(v26, (uint64_t)v296);
  v260 = v27;
  sub_10000A680();
  __chkstk_darwin(v28);
  sub_10000CD48();
  v265 = v29;
  sub_10000738C(&qword_1000D2E20);
  sub_10000A680();
  __chkstk_darwin(v30);
  sub_10000CD48();
  v282 = v31;
  sub_10000738C(&qword_1000D2E28);
  sub_10000A680();
  __chkstk_darwin(v32);
  sub_10000CD48();
  v34 = sub_10007B1FC(v33);
  v35 = type metadata accessor for SportsActivityContentState(v34);
  sub_10007B2D4(v35, (uint64_t)v299);
  v268 = v36;
  sub_10000A680();
  __chkstk_darwin(v37);
  sub_10007B1E8();
  sub_10007B1D8();
  __chkstk_darwin(v38);
  sub_10007B318();
  v40 = sub_10007B1FC(v39);
  v41 = type metadata accessor for SportingEventProgressStatus(v40);
  sub_10007B2D4(v41, (uint64_t)&v282);
  v254 = v42;
  sub_10000A680();
  __chkstk_darwin(v43);
  sub_10000CD48();
  v45 = sub_10007B1FC(v44);
  v288 = type metadata accessor for SportsActivityPlay(v45);
  v277 = *(_QWORD *)(v288 - 8);
  sub_10000A680();
  __chkstk_darwin(v46);
  sub_10007B1E8();
  sub_10007B1D8();
  __chkstk_darwin(v47);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v48);
  sub_10007B318();
  v289 = v49;
  v291 = sub_10000738C(&qword_1000D2E30);
  sub_10000A680();
  __chkstk_darwin(v50);
  sub_10007B1E8();
  sub_10007B1D8();
  __chkstk_darwin(v51);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v52);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v53);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v54);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v55);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v56);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v57);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v58);
  sub_100043340();
  sub_10007B1D8();
  __chkstk_darwin(v59);
  v61 = (char *)&v232 - v60;
  v62 = type metadata accessor for SportsActivityClock(0);
  v63 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v65 = (char *)&v232 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v66);
  v68 = (char *)&v232 - v67;
  __chkstk_darwin(v69);
  v71 = (char *)&v232 - v70;
  v72 = type metadata accessor for Sport(0);
  v294 = *(_QWORD *)(v72 - 8);
  v295 = v72;
  sub_10000A680();
  __chkstk_darwin(v73);
  sub_10007B260();
  v75 = SportingEventSubscription.sport.getter(v74);
  Sport.init(rawValue:)(v75);
  v76 = v293;
  sub_100077768(v9, (uint64_t)a1, (char)v292, (uint64_t)v71, v77);
  if (v76)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v294 + 8))(v9, v295);
  v247 = v65;
  v292 = (void (*)(char *, uint64_t))v68;
  v248 = v63;
  v293 = v71;
  v249 = v62;
  v78 = v290;
  v79 = (uint64_t)&v61[*(int *)(v291 + 48)];
  sub_10007C994((uint64_t)v61, v79, (uint64_t)a1, v290);
  sub_100077950(v78, (uint64_t)v287, v289);
  v80 = v249;
  v246 = v79;
  v242 = 0;
  v243 = v9;
  v82 = sub_10007B220();
  *(_BYTE *)(v82 + 16) = 0;
  v238 = (unsigned __int8 *)(v82 + 16);
  v83 = sub_10007B220();
  v245 = a1;
  *(_BYTE *)(v83 + 16) = SportingEventSubscription.shouldDisplayPlayByPlay.getter(v84) & 1;
  v244 = (char *)(v83 + 16);
  v85 = sub_10007B220();
  *(_BYTE *)(v85 + 16) = 1;
  v237 = (unsigned __int8 *)(v85 + 16);
  v299[3] = (uint64_t)&type metadata for TVAppFeatureFlags;
  v299[4] = sub_10000A278();
  v86 = isFeatureEnabled(_:)(v299);
  v87 = sub_100007618(v299);
  v241 = v82;
  if ((v86 & 1) != 0 && (v286 & 1) != 0
    || (v88 = (void *)SportingEventSubscription.sportingEventDetails.getter(v87),
        v89 = v253,
        SportingEvent.progressStatus.getter(v88),
        v88,
        sub_10007B388(),
        v91 = v250,
        v92 = (*(uint64_t (**)(void (*)(_QWORD, _QWORD, _QWORD), void (*)(_QWORD, _QWORD, _QWORD)))(v90 + 88))(v89, v250), v92 == enum case for SportingEventProgressStatus.preGame(_:)))
  {
    v93 = sub_10007B298();
    sub_100077BA8(v93, v94, v83);
    v236 = 0;
    v95 = v293;
    v96 = v277;
    v97 = v80;
    v98 = v291;
    v99 = v248;
  }
  else
  {
    v100 = v92 == enum case for SportingEventProgressStatus.inProgress(_:)
        || v92 == enum case for SportingEventProgressStatus.statusBreak(_:);
    v95 = v293;
    v96 = v277;
    v97 = v80;
    v99 = v248;
    if (!v100)
    {
      *v244 = 0;
      sub_10007B388();
      (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), void (*)(_QWORD, _QWORD, _QWORD)))(v101 + 8))(v253, v91);
    }
    v236 = 1;
    v98 = v291;
  }
  v239 = v85;
  if (qword_1000CFAD8 != -1)
    swift_once(&qword_1000CFAD8, sub_10006CCEC);
  v240 = v83;
  v102 = type metadata accessor for Logger(0);
  sub_1000096EC(v102, (uint64_t)qword_1000DDB00);
  v250 = *(void (**)(_QWORD, _QWORD, _QWORD))(v99 + 16);
  v250(v292, v95, v97);
  v253 = *(void (**)(_QWORD, _QWORD, _QWORD))(v96 + 16);
  v253(v276, v289, v288);
  v103 = (uint64_t)v255;
  v104 = (uint64_t)v255 + *(int *)(v98 + 48);
  v105 = type metadata accessor for SportsActivityContender(0);
  v254 = *(_QWORD *)(v105 - 8);
  v106 = *(void (**)(_QWORD, _QWORD, _QWORD))(v254 + 16);
  sub_10007B2BC(v103, (uint64_t)v61);
  v107 = v246;
  sub_10007B2BC(v104, v246);
  sub_100038C60(v103, v279, &qword_1000D2E30);
  sub_100038CB4(v103, v278, &qword_1000D2E30);
  v108 = *(int *)(v98 + 48);
  v109 = (uint64_t)v256;
  v110 = &v256[v108];
  v287 = v61;
  sub_10007B2BC((uint64_t)v256, (uint64_t)v61);
  v255 = v106;
  v106(v110, v107, v105);
  v111 = v280;
  sub_100038C60(v109, v280, &qword_1000D2E30);
  v112 = v274;
  sub_100038CB4(v109, v274, &qword_1000D2E30);
  v113 = (char *)v245;
  v114 = Logger.logObject.getter(v113);
  v115 = static os_log_type_t.debug.getter(v114);
  v116 = v115;
  v117 = os_log_type_enabled(v114, v115);
  v256 = v113;
  if (v117)
  {
    v118 = swift_slowAlloc(52, -1);
    v245 = (id)swift_slowAlloc(160, -1);
    v299[0] = (uint64_t)v245;
    v119.n128_u64[0] = 136316162;
    *(_DWORD *)v118 = 136316162;
    v235 = v116;
    v234 = v114;
    v120 = SportingEventSubscription.canonicalId.getter(v119);
    sub_10007B27C(v120, v121);
    v297 = v122;
    sub_10004E9B0((uint64_t)&v297, (uint64_t)v298, v123, v118 + 12);

    sub_1000061E8();
    *(_WORD *)(v118 + 12) = 2080;
    v124 = v247;
    v125 = v249;
    sub_10006363C((uint64_t)&v282);
    v126 = String.init<A>(reflecting:)(v124, v125);
    sub_10007B27C(v126, v127);
    v129 = sub_10007B35C(v128);
    v233 = v298;
    sub_10004E9B0(v129, (uint64_t)v298, v130, v131);
    sub_1000061E8();
    v132 = sub_10007B3A8();
    v292 = (void (*)(char *, uint64_t))v133;
    v133(v132, v125);
    *(_WORD *)(v118 + 22) = 2080;
    v134 = v251;
    v135 = v288;
    sub_10006363C((uint64_t)v285);
    v136 = String.init<A>(describing:)(v134, v135);
    sub_10007B27C(v136, v137);
    v139 = sub_10007B35C(v138);
    sub_10004E9B0(v139, (uint64_t)v298, v140, v141);
    sub_1000061E8();
    sub_10007B370(*(uint64_t (**)(void))(v277 + 8));
    *(_WORD *)(v118 + 32) = 2080;
    v248 = v118 + 34;
    v142 = *(int *)(v291 + 48);
    v143 = v252;
    v144 = v252 + v142;
    v145 = v279;
    v146 = v279 + v142;
    v106 = v255;
    v255(v252, v279, v105);
    v147 = sub_10007B2BC(v144, v146);
    v148 = SportsActivityContender.scoreEntries.getter(v147);
    sub_10007B388();
    v150 = *(void (**)(_QWORD, _QWORD))(v149 + 8);
    v276 = v150;
    v150(v143, v105);
    v150(v144, v105);
    v151 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(0);
    v251 = v151;
    sub_100005B28(&qword_1000D04B0, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName, (uint64_t)&protocol conformance descriptor for SportingEventCompetitorScoreStatisticType.StatisticName);
    v153 = v152;
    v154 = Dictionary.description.getter(v148, v151, &type metadata for Int, v152);
    v155 = v105;
    v156 = v145;
    v158 = v157;
    sub_1000061E8();
    sub_100014B44(v154, v158, v299);
    v160 = sub_10007B35C(v159);
    v161 = v233;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v160, v233, v248, v162);
    swift_bridgeObjectRelease(v158);
    sub_10007B310(v278);
    sub_10007B310(v156);
    *(_WORD *)(v118 + 42) = 2080;
    v163 = *(int *)(v291 + 48);
    v164 = v143 + v163;
    v165 = v280 + v163;
    ((void (*)(uint64_t))v106)(v143);
    v166 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v106)(v164, v165, v155);
    v167 = SportsActivityContender.scoreEntries.getter(v166);
    v168 = v164;
    v169 = v276;
    v276(v168, v155);
    v169(v143, v155);
    v170 = v288;
    v171 = Dictionary.description.getter(v167, v251, &type metadata for Int, v153);
    v173 = v172;
    v174 = v167;
    v105 = v155;
    swift_bridgeObjectRelease(v174);
    sub_100014B44(v171, v173, v299);
    v176 = sub_10007B35C(v175);
    v177 = v161;
    v178 = v170;
    v179 = v291;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v176, v177, v118 + 44, v180);
    sub_1000061E8();
    sub_10007B310(v274);
    sub_10007B310(v280);
    v181 = v234;
    _os_log_impl((void *)&_mh_execute_header, v234, (os_log_type_t)v235, "Creating activity content for event '%s':\n    clock: %s,\n    play: %s,\n    scoreA: %s,\n    scoreB: %s", (uint8_t *)v118, 0x34u);
    v182 = (uint64_t)v245;
    swift_arrayDestroy(v245, 5);
    sub_10000A818(v182);
    v183 = v118;
    v184 = v249;
    sub_10000A818(v183);

    sub_10007B230();
  }
  else
  {

    v185 = sub_10007B3A8();
    v186 = v249;
    v292 = (void (*)(char *, uint64_t))v187;
    v187(v185, v249);
    v178 = v288;
    sub_10007B370(*(uint64_t (**)(void))(v277 + 8));
    sub_10007B2F8(v278);
    sub_10007B2F8(v279);
    sub_10007B2F8(v112);
    sub_10007B2F8(v111);

    v184 = v186;
    sub_10007B230();
    v179 = v291;
  }
  sub_10006363C((uint64_t)&v282);
  sub_10007B330();
  sub_10000964C(v188, v189, v190, v184);
  sub_10006363C((uint64_t)v285);
  sub_10007B330();
  sub_10000964C(v191, v192, v193, v178);
  sub_10007B288(v290);
  v194 = v261;
  v195 = sub_10007B298();
  v197 = v196(v195);
  v198 = v262;
  static Date.now.getter(v197);
  v199 = static Date.> infix(_:_:)(v194, v198);
  sub_10007B2B4(v198);
  sub_10007B2B4(v194);
  v200 = (unsigned int *)&enum case for SportsActivityContentState.EventInfoState.preGame(_:);
  if ((v199 & 1) == 0)
    v200 = (unsigned int *)&enum case for SportsActivityContentState.EventInfoState.startingSoon(_:);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v260 + 104))(v106, *v200, v263);
  v201 = v238;
  sub_100018E20((uint64_t)v238, (uint64_t)v299);
  LODWORD(v290) = *v201;
  v202 = v237;
  sub_100018E20((uint64_t)v237, (uint64_t)&v297);
  LODWORD(v280) = *v202;
  v203 = v258;
  v204 = v258 + *(int *)(v179 + 48);
  v205 = (uint64_t)v287;
  v206 = v255;
  v255(v258, v287, v105);
  sub_10007B324(v204);
  v207 = v259;
  v208 = v259 + *(int *)(v179 + 48);
  v206(v259, v205, v105);
  sub_10007B324(v208);
  v209 = v244;
  sub_100018E20((uint64_t)v244, (uint64_t)v296);
  v210 = v106;
  v211 = *v209;
  LOBYTE(v209) = *v209 & v270;
  v212 = v257;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v266 + 16))(v257, v271, v267);
  HIBYTE(v231) = (_BYTE)v209;
  LOBYTE(v231) = v211;
  v213 = v284;
  SportsActivityContentState.init(clock:play:eventInfoState:isClockVisible:isEventInfoVisible:isScoreVisible:contenderA:contenderB:shouldDisplayPlayByPlay:shouldShowWatchAlertUI:subscriptionContainerURL:isWaitingForUserConsent:)(v281, v282, v210, v236, v290, v280, v203, v208, v231, v212, v286 & 1);
  sub_10007B388();
  v215 = *(void (**)(uint64_t))(v214 + 8);
  sub_10007B2B4(v207);
  v216 = sub_10007B298();
  v215(v216);
  v217 = v268;
  v218 = v269;
  v219 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v268 + 16))(v283, v213, v269);
  v220 = COERCE_DOUBLE(SportingEventSubscription.heartbeatSessionsTTLSeconds.getter(v219));
  v222 = v272;
  if ((v221 & 1) != 0)
    sub_10000964C(v272, 1, 1, v275);
  else
    sub_100077C60(v272, v220);
  sub_10007B3BC(&qword_1000D2E38, v223, (uint64_t)&protocol conformance descriptor for SportsActivityContentState);
  v225 = v224;
  sub_10007B3BC(&qword_1000D2E40, v226, (uint64_t)&protocol conformance descriptor for SportsActivityContentState);
  v228 = v227;
  sub_10007B3BC(&qword_1000D2E48, v229, (uint64_t)&protocol conformance descriptor for SportsActivityContentState);
  ActivityContent.init(state:staleDate:relevanceScore:)(v283, v222, v218, v225, v228, v230, a9);
  (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v284, v218);
  ((void (*)(uint64_t, uint64_t))v277)(v289, v288);
  sub_10000A47C((uint64_t)v287, &qword_1000D2E30);
  v292(v293, v249);
  (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v243, v295);
  sub_10007B368((uint64_t)&v273);
  sub_10007B368((uint64_t)&v272);
  return sub_10007B368((uint64_t)&v271);
}

void sub_100076D6C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  int v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  Swift::String v87;
  Swift::String v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[6];
  _QWORD *v110;
  Swift::String v111;
  Swift::String v112;

  v107 = a2;
  v106 = a1;
  type metadata accessor for AlertConfiguration.AlertSound(0);
  sub_10000A680();
  __chkstk_darwin(v3);
  sub_10000A7D4();
  v6 = v5 - v4;
  type metadata accessor for LocalizedStringResource(0);
  sub_10000A680();
  __chkstk_darwin(v7);
  sub_10007B1E8();
  v105 = v8;
  __chkstk_darwin(v9);
  sub_10007B318();
  v104 = v10;
  v11 = sub_10007B214();
  v100 = type metadata accessor for SportingEventCompetitorScoreStatisticType.StatisticName(v11);
  v98 = *(_QWORD *)(v100 - 8);
  sub_10000A680();
  __chkstk_darwin(v12);
  sub_10007B1E8();
  v99 = v13;
  __chkstk_darwin(v14);
  sub_10007B318();
  v97 = v15;
  v16 = sub_10007B214();
  v17 = type metadata accessor for SportingEventPlayLevel(v16);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  sub_10000A7D4();
  v21 = v20 - v19;
  v22 = type metadata accessor for Sport(0);
  v101 = *(_QWORD *)(v22 - 8);
  v102 = v22;
  sub_10000A680();
  __chkstk_darwin(v23);
  v103 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SportingEventProgressStatus(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_10007B260();
  v28 = SportingEventSubscription.shouldDisplayPlayByPlay.getter(v27);
  if ((v28 & 1) == 0)
  {
    v45 = type metadata accessor for AlertConfiguration(0);
    sub_10000964C(v107, 1, 1, v45);
    goto LABEL_20;
  }
  v29 = (void *)SportingEventSubscription.sportingEventDetails.getter(v28);
  SportingEvent.progressStatus.getter(v29);

  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88))(v2, v25);
  v96 = v6;
  if ((_DWORD)v30 != enum case for SportingEventProgressStatus.preGame(_:))
  {
    v94 = v25;
    v95 = v2;
    v93 = v26;
    v46 = SportingEventSubscription.sport.getter(v30);
    v47 = (uint64_t)v103;
    v48 = Sport.init(rawValue:)(v46);
    v49 = SportingEventSubscription.mostRecentPlay.getter(v48);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v21, enum case for SportingEventPlayLevel.alerts(_:), v17);
    sub_1000756F4(v21, v49);
    v51 = v50;
    sub_1000185B4();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
    if (v51)
    {
      v92 = (void *)v51;
      sub_10007B24C();
      v52 = sub_10007B298();
      v54 = v53(v52);
      v55 = *(_QWORD *)(v54 + 16);
      if (v55)
      {
        v110 = _swiftEmptyArrayStorage;
        sub_100015688();
        v91 = v54;
        v56 = v54 + 32;
        v57 = v110;
        do
        {
          sub_10000AE14(v56, (uint64_t)v109);
          v58 = v109[3];
          v59 = v109[4];
          sub_10007B288(v109);
          v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v58, v59);
          v62 = v61;
          sub_100007618(v109);
          if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
          {
            sub_100015688();
            v57 = v110;
          }
          v63 = v57[2];
          if (v63 >= v57[3] >> 1)
          {
            sub_100015688();
            v57 = v110;
          }
          v57[2] = v63 + 1;
          v64 = &v57[2 * v63];
          v64[4] = v60;
          v64[5] = v62;
          v56 += 40;
          --v55;
        }
        while (v55);
        swift_bridgeObjectRelease(v91);
        v65 = v108;
        v18 = v106;
      }
      else
      {
        sub_1000185B4();
        v57 = _swiftEmptyArrayStorage;
        v65 = v108;
      }
      v69 = v92;
      v70 = sub_10007C54C((uint64_t)v92, v47, (uint64_t)v57);
      if (!v65)
      {
        v72 = v70;
        v73 = v71;
        swift_bridgeObjectRelease(v57);
        v74 = swift_bridgeObjectRetain(v72);
        v75 = v97;
        Sport.scoreStatisticName.getter(v74);
        v108 = sub_10007572C(v75, v72);
        LODWORD(v107) = v76;
        swift_bridgeObjectRelease(v72);
        v77 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
        v78 = v100;
        v77(v75, v100);
        swift_bridgeObjectRelease(v72);
        v80 = v108;
        if ((v107 & 1) != 0)
          v80 = 0;
        v108 = v80;
        v81 = v99;
        Sport.scoreStatisticName.getter(v79);
        v82 = sub_10007572C(v81, v73);
        v84 = v83;
        swift_bridgeObjectRelease(v73);
        v77(v81, v78);
        if ((v84 & 1) != 0)
          v85 = 0;
        else
          v85 = (_QWORD *)v82;
        v110 = (_QWORD *)v108;
        v109[0] = sub_10007B2C4();
        v109[1] = v86;
        v87._countAndFlagsBits = 45;
        v87._object = (void *)0xE100000000000000;
        String.append(_:)(v87);
        v110 = v85;
        v111._countAndFlagsBits = sub_10007B2C4();
        sub_10007B350(v111);
        sub_1000185B4();
        v88._countAndFlagsBits = 32;
        v88._object = (void *)0xE100000000000000;
        String.append(_:)(v88);
        v89 = v92;
        v112._countAndFlagsBits = SportingEventPlay.playDescription.getter(v90);
        sub_10007B350(v112);

        sub_1000185B4();
        v33 = v109[0];
        (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v102);
        (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v95, v94);
        goto LABEL_4;
      }
      sub_10007B2A4();

      swift_bridgeObjectRelease(v57);
    }
    else
    {
      v66 = sub_10007772C();
      v67 = sub_100043398((uint64_t)&type metadata for ActivityDataProviderError, v66);
      *v68 = 3;
      swift_willThrow(v67);
      sub_10007B2A4();
    }
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v95, v94);
    goto LABEL_20;
  }
  sub_10007B24C();
  v31 = sub_10007B298();
  v33 = v32(v31);
LABEL_4:
  v34 = *(_QWORD *)(v18 + 24);
  v35 = *(_QWORD *)(v18 + 32);
  sub_10007B288((_QWORD *)v18);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v35);
  v37 = v104;
  LocalizedStringResource.init(stringLiteral:)(v36);
  v38 = v105;
  v39 = LocalizedStringResource.init(stringLiteral:)(v33);
  v40 = v96;
  static AlertConfiguration.AlertSound.default.getter(v39);
  AlertConfiguration.init(title:body:sound:)(v37, v38, v40);
  type metadata accessor for AlertConfiguration(0);
  sub_10007B330();
  sub_10000964C(v41, v42, v43, v44);
LABEL_20:
  sub_100055A00();
}

void sub_10007733C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
  sub_100006200();
}

Swift::Int sub_10007735C()
{
  unsigned __int8 *v0;

  return sub_10000B6B8(*v0);
}

void sub_100077364(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10007733C(a1, *v1);
}

uint64_t sub_10007736C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000773A8 + 4 * byte_1000A4240[a1]))(0xD00000000000001DLL, 0x80000001000A7BF0);
}

uint64_t sub_1000773A8()
{
  uint64_t v0;

  return v0 + 22;
}

unint64_t sub_1000773E0()
{
  return 0xD000000000000016;
}

uint64_t sub_1000773FC()
{
  unsigned __int8 *v0;

  return sub_10007736C(*v0);
}

_QWORD *sub_100077408(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v19 = a3;
  v4 = a2(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - v6;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v23 = _swiftEmptyArrayStorage;
    sub_100015764(0, v8, 0);
    v9 = v23;
    v10 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v11 = *(_QWORD *)(v5 + 72);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    do
    {
      v12(v7, v10, v4);
      v23 = v9;
      v14 = v9[2];
      v13 = v9[3];
      if (v14 >= v13 >> 1)
        sub_100015764((char *)(v13 > 1), v14 + 1, 1);
      v21 = v4;
      v22 = v19;
      v15 = (char *)sub_100023784(&v20);
      v12(v15, (uint64_t)v7, v4);
      v16 = v23;
      v23[2] = v14 + 1;
      sub_100009DDC(&v20, (uint64_t)&v16[5 * v14 + 4]);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v9 = v23;
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

void sub_100077574()
{
  sub_1000776A8((uint64_t (*)(void))&SportingEventSubscription.Metadata.competitors.getter, (uint64_t (*)(_QWORD))&type metadata accessor for SportingEventSubscription.Competitor, (uint64_t)&off_1000C8610);
}

void sub_1000775A0(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10000738C(&qword_1000D0570);
  sub_10000A680();
  __chkstk_darwin(v2);
  sub_10000A7D4();
  v5 = v4 - v3;
  v6 = type metadata accessor for SportsActivityAttributes.EventInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000A7D4();
  v10 = v9 - v8;
  v11 = SportsActivityAttributes.eventInfo.getter();
  SportsActivityAttributes.EventInfo.startDate.getter(v11);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  v12 = type metadata accessor for Date(0);
  v13 = sub_100009658(v5, 1, v12);
  if ((_DWORD)v13 == 1)
  {
    Date.init()(v13);
    sub_10000A47C(v5, &qword_1000D0570);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, v5, v12);
  }
}

void sub_1000776A8(uint64_t (*a1)(void), uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;

  v5 = a1();
  sub_100077408(v5, a2, a3);
  swift_bridgeObjectRelease();
  sub_10001860C();
}

void sub_1000776F8()
{
  sub_1000776A8((uint64_t (*)(void))&SportsActivityAttributes.contenders.getter, (uint64_t (*)(_QWORD))&type metadata accessor for SportsActivityAttributes.Contender, (uint64_t)&off_1000C8670);
}

unint64_t sub_10007772C()
{
  unint64_t result;

  result = qword_1000D2E18;
  if (!qword_1000D2E18)
  {
    result = swift_getWitnessTable(&unk_1000A42D0, &type metadata for ActivityDataProviderError);
    atomic_store(result, (unint64_t *)&qword_1000D2E18);
  }
  return result;
}

char *sub_100077768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  int v17;
  __n128 v18;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v9 = type metadata accessor for RunningClockComponentsFormatter.DataSource(0, a5);
  __chkstk_darwin(v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Sport(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v16, a1, v12, v14);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if (v17 == enum case for Sport.baseball(_:))
    return (char *)sub_10007942C(a2, a4, v18);
  if (v17 == enum case for Sport.basketball(_:)
    || v17 == enum case for Sport.football(_:)
    || v17 == enum case for Sport.hockey(_:))
  {
    SportingEventSubscription.createRunningClockDataSource(preferStaticClock:)(a3 & 1, v18);
    SportsActivityGenericClock.init(runningClockDataSource:)(v11);
    v22 = enum case for SportsActivityClock.generic(_:);
    v23 = type metadata accessor for SportsActivityClock(0);
    return (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(a4, v22, v23);
  }
  else if (v17 == enum case for Sport.soccer(_:))
  {
    return sub_100078C8C(a2, a3 & 1, a4);
  }
  else
  {
    v24 = enum case for SportsActivityClock.unknown(_:);
    v25 = type metadata accessor for SportsActivityClock(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(a4, v24, v25);
    return (char *)(*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
}

void sub_100077950(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v29 = a2;
  v30 = a1;
  v4 = type metadata accessor for SportingEventPlayLevel(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SportingEventProgressStatus(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = SportingEventSubscription.shouldDisplayPlayByPlay.getter(v10);
  if ((v13 & 1) != 0)
  {
    v28 = a3;
    v14 = (void *)SportingEventSubscription.sportingEventDetails.getter(v13);
    SportingEvent.progressStatus.getter(v14);

    v15 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v8);
    if ((_DWORD)v15 == enum case for SportingEventProgressStatus.inProgress(_:))
    {
      sub_10007978C(v30, v29, v28);
    }
    else if ((_DWORD)v15 == enum case for SportingEventProgressStatus.final(_:))
    {
      v16 = SportingEventSubscription.mostRecentPlay.getter(v15);
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for SportingEventPlayLevel.all(_:), v4);
      sub_1000756F4((uint64_t)v7, v16);
      v18 = v17;
      swift_bridgeObjectRelease(v16);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v18)
      {
        v19 = v18;
        v20 = SportingEventPlay.playDescription.getter(v19);
        v22 = v21;

      }
      else
      {
        v20 = 0;
        v22 = 0xE000000000000000;
      }
      SportsActivityPlay.init(isLeftBarVisible:isRightBarVisible:isPlay:text:)(0, 0, 0, v20, v22);

    }
    else
    {
      v23 = v30[3];
      v24 = v30[4];
      sub_1000073CC(v30, v23);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
      SportsActivityPlay.init(isLeftBarVisible:isRightBarVisible:isPlay:text:)(0, 0, 0, v25, v26);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
  }
  else
  {
    SportsActivityPlay.init(isLeftBarVisible:isRightBarVisible:isPlay:text:)(0, 0, 0, 0, 0xE000000000000000);
  }
}

uint64_t sub_100077BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[5];
  _BYTE v9[24];
  _BYTE v10[24];

  v4 = a2;
  v6 = a2 + 16;
  swift_beginAccess(a1 + 16, v10, 1, 0);
  *(_BYTE *)(a1 + 16) = 1;
  swift_beginAccess(v6, v9, 1, 0);
  *(_BYTE *)(v4 + 16) = 0;
  v8[3] = &type metadata for TVAppFeatureFlags;
  v8[4] = sub_10000A278();
  LOBYTE(v4) = isFeatureEnabled(_:)(v8);
  result = sub_100007618(v8);
  if ((v4 & 1) != 0)
  {
    result = swift_beginAccess(a3 + 16, v8, 1, 0);
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t sub_100077C60@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 <= 0.0)
    return sub_10000964C(a1, 1, 1, v4);
  v9 = Date.init()(v6);
  Date.addingTimeInterval(_:)(v9, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return sub_10000964C(a1, 0, 1, v4);
}

uint64_t sub_100077D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t result;
  unint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v2 = type metadata accessor for SportingEventSubscription.Competitor(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - v8;
  v10 = *(_QWORD *)(SportingEventSubscription.Metadata.competitors.getter(v7) + 16);
  swift_bridgeObjectRelease();
  if (v10 != 2)
  {
    v25 = sub_10007772C();
    v26 = swift_allocError(&type metadata for ActivityDataProviderError, v25, 0, 0);
    *v27 = 1;
    swift_willThrow(v26);
    return v1;
  }
  result = SportingEventSubscription.Metadata.competitors.getter(v11);
  if (*(_QWORD *)(result + 16))
  {
    v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v14(v9, result + v13, v2);
    swift_bridgeObjectRelease();
    result = SportingEventSubscription.Metadata.competitors.getter(v15);
    if (*(_QWORD *)(result + 16) >= 2uLL)
    {
      v14(v5, result + v13 + *(_QWORD *)(v3 + 72), v2);
      swift_bridgeObjectRelease();
      v16 = sub_10000738C(&qword_1000D2E98);
      v17 = type metadata accessor for SportsActivityAttributes.Contender(0);
      v32 = v2;
      v18 = v9;
      v19 = *(_QWORD *)(v17 - 8);
      v20 = *(_QWORD *)(v19 + 72);
      v21 = *(unsigned __int8 *)(v19 + 80);
      v31 = v5;
      v22 = (v21 + 32) & ~v21;
      v1 = swift_allocObject(v16, v22 + 2 * v20, v21 | 7);
      *(_OWORD *)(v1 + 16) = xmmword_1000A06C0;
      v23 = v1 + v22;
      sub_10007813C(v23);
      if (v0)
      {
        *(_QWORD *)(v1 + 16) = 0;
        swift_release(v1);
        v24 = *(void (**)(char *, uint64_t))(v3 + 8);
        v29 = v32;
        v24(v31, v32);
      }
      else
      {
        v28 = v31;
        sub_10007813C(v23 + v20);
        v24 = *(void (**)(char *, uint64_t))(v3 + 8);
        v29 = v32;
        v24(v28, v32);
      }
      v24(v18, v29);
      return v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100077FA4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_10000738C(&qword_1000D0570);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10000738C(&qword_1000D10A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SportingEventSubscription.Metadata(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  SportingEventSubscription.metadata.getter(v10);
  if (sub_100009658((uint64_t)v5, 1, v6) == 1)
  {
    sub_10000A47C((uint64_t)v5, &qword_1000D10A0);
    v11 = type metadata accessor for Date(0);
    sub_10000964C((uint64_t)v2, 1, 1, v11);
    return SportsActivityAttributes.EventInfo.init(startDate:)(v2);
  }
  else
  {
    v13 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    SportingEventSubscription.Metadata.eventStartDate.getter(v13);
    v14 = type metadata accessor for Date(0);
    sub_10000964C((uint64_t)v2, 0, 1, v14);
    SportsActivityAttributes.EventInfo.init(startDate:)(v2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_10007813C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = a1;
  v1 = type metadata accessor for SportsActivityAttributes.Contender.LogoFilePaths(0);
  __chkstk_darwin(v1);
  v52 = (uint64_t)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - v11;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v46 - v15;
  v17 = SportingEventSubscription.Competitor.localLogoUrl.getter(v14);
  if (!v18)
    goto LABEL_4;
  URL.init(string:)(v17, v18);
  swift_bridgeObjectRelease();
  if (sub_100009658((uint64_t)v5, 1, v6) == 1)
  {
    sub_10000A47C((uint64_t)v5, (uint64_t *)&unk_1000D16E0);
LABEL_4:
    v19 = 0;
    v20 = 0;
    goto LABEL_6;
  }
  v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v16, v5, v6);
  v22 = URL.lastPathComponent.getter(v21);
  v24 = v23;
  v25 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  NSFileManager.currentContainerURL.getter();

  URL.appendingPathComponent(_:)(v22, v24);
  swift_bridgeObjectRelease();
  v26 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v27 = v26(v9, v6);
  v28 = URL.path.getter(v27);
  v20 = v29;
  v26(v12, v6);
  v17 = v26(v16, v6);
  v19 = v28;
LABEL_6:
  v30 = SportingEventSubscription.Competitor.canonicalId.getter(v17);
  v50 = v31;
  v51 = v30;
  v32 = SportingEventSubscription.Competitor.teamColorHex.getter();
  v48 = v33;
  v49 = v32;
  v34 = SportingEventSubscription.Competitor.abbreviation.getter();
  v47 = v35;
  v36 = SportingEventSubscription.Competitor.name.getter();
  v38 = v37;
  if (v20)
    v39 = v19;
  else
    v39 = 0;
  if (v20)
    v40 = v20;
  else
    v40 = 0xE000000000000000;
  v41 = v52;
  v42 = sub_100078400(v52);
  v43 = SportingEventSubscription.Competitor.isHome.getter(v42);
  v44 = SportingEventSubscription.Competitor.ordinal.getter();
  return SportsActivityAttributes.Contender.init(canonicalId:colorHex:abbreviation:name:localLogoURL:logoFilePaths:isHome:ordinal:)(v51, v50, v49, v48, v34, v47, v36, v38, v39, v40, v41, v43 & 1, v44);
}

uint64_t sub_100078400@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  id v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  id v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(char *, uint64_t);
  __n128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;

  v108 = a1;
  v1 = type metadata accessor for URL(0);
  v105 = *(_QWORD *)(v1 - 8);
  v106 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v98 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v98 - v5;
  v7 = sub_10000738C((uint64_t *)&unk_1000D16E0);
  __chkstk_darwin(v7);
  v9 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v98 - v11;
  v13 = sub_10000738C(&qword_1000D12C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SportingEventSubscription.Competitor.LogoFilePaths(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v109 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v107 = (char *)&v98 - v20;
  __chkstk_darwin(v21);
  v103 = (char *)&v98 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v98 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v98 - v27;
  SportingEventSubscription.Competitor.logoFilePaths.getter(v29);
  if (sub_100009658((uint64_t)v15, 1, v16) == 1)
  {
    sub_10000A47C((uint64_t)v15, &qword_1000D12C0);
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_1000096EC(v30, (uint64_t)qword_1000DDB00);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to normalize logos, missing LogoFilePaths.", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    return SportsActivityAttributes.Contender.LogoFilePaths.init(smallSize:defaultSize:)(0, 0xE000000000000000, 0, 0xE000000000000000);
  }
  v104 = v17;
  v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v28, v15, v16);
  v37 = SportingEventSubscription.Competitor.LogoFilePaths.smallSize.getter(v36);
  v98 = v3;
  v99 = v6;
  v102 = v28;
  if (!v38)
    goto LABEL_10;
  URL.init(string:)(v37, v38);
  swift_bridgeObjectRelease();
  v39 = v106;
  if (sub_100009658((uint64_t)v12, 1, v106) == 1)
  {
    sub_10000A47C((uint64_t)v12, (uint64_t *)&unk_1000D16E0);
LABEL_10:
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v40 = type metadata accessor for Logger(0);
    sub_1000096EC(v40, (uint64_t)qword_1000DDB00);
    v41 = v104;
    v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v104 + 16))(v25, v28, v16);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v111 = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = SportingEventSubscription.Competitor.LogoFilePaths.smallSize.getter(v46);
      if (v48)
      {
        v49 = v48;
      }
      else
      {
        v47 = 7104878;
        v49 = 0xE300000000000000;
      }
      sub_100014B44(v47, v49, &v111);
      v110 = v50;
      v41 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v16);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to normalize logo path for small size at %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v16);
    }

    v100 = 0;
    v101 = 0;
    v39 = v106;
    goto LABEL_20;
  }
  v52 = URL.lastPathComponent.getter();
  v54 = v53;
  v55 = *(void (**)(char *, uint64_t))(v105 + 8);
  v55(v12, v39);
  v56 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v57 = v98;
  NSFileManager.currentContainerURL.getter();

  v58 = v99;
  URL.appendingPathComponent(_:)(v52, v54);
  swift_bridgeObjectRelease();
  v59 = ((uint64_t (*)(char *, uint64_t))v55)(v57, v39);
  v60 = URL.path.getter(v59);
  v100 = v61;
  v101 = v60;
  v55(v58, v39);
  v41 = v104;
LABEL_20:
  v62 = v102;
  v63 = SportingEventSubscription.Competitor.LogoFilePaths.defaultSize.getter(v51);
  URL.init(string:)(v63, v64);
  swift_bridgeObjectRelease();
  if (sub_100009658((uint64_t)v9, 1, v39) == 1)
  {
    sub_10000A47C((uint64_t)v9, (uint64_t *)&unk_1000D16E0);
    if (qword_1000CFAD8 != -1)
      swift_once(&qword_1000CFAD8, sub_10006CCEC);
    v65 = type metadata accessor for Logger(0);
    sub_1000096EC(v65, (uint64_t)qword_1000DDB00);
    v66 = *(uint64_t (**)(char *, char *, uint64_t))(v41 + 16);
    v67 = v103;
    v68 = v66(v103, v62, v16);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = swift_slowAlloc(32, -1);
      v111 = v72;
      v73.n128_u64[0] = 136315138;
      *(_DWORD *)v71 = 136315138;
      v74 = SportingEventSubscription.Competitor.LogoFilePaths.defaultSize.getter(v73);
      sub_100014B44(v74, v75, &v111);
      v110 = v76;
      v41 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v71 + 4, v71 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v67, v16);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Failed to normalize logo path for default size at %s", v71, 0xCu);
      swift_arrayDestroy(v72, 1);
      v77 = v72;
      v62 = v102;
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v71, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v67, v16);
    }

    v86 = 0;
    v88 = 0;
  }
  else
  {
    v78 = URL.lastPathComponent.getter();
    v80 = v79;
    v81 = *(void (**)(char *, uint64_t))(v105 + 8);
    v81(v9, v39);
    v82 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v83 = v98;
    NSFileManager.currentContainerURL.getter();

    v84 = v99;
    URL.appendingPathComponent(_:)(v78, v80);
    swift_bridgeObjectRelease();
    v85 = ((uint64_t (*)(char *, uint64_t))v81)(v83, v39);
    v86 = URL.path.getter(v85);
    v88 = v87;
    v81(v84, v39);
    v66 = *(uint64_t (**)(char *, char *, uint64_t))(v41 + 16);
  }
  v89 = v107;
  v90 = v100;
  v91 = v66(v107, v62, v16);
  v92 = v101;
  if (!v90)
  {
    v93 = SportingEventSubscription.Competitor.LogoFilePaths.smallSize.getter(v91);
    if (v94)
    {
      v92 = v93;
      v90 = v94;
    }
    else
    {
      v92 = 0;
      v90 = 0xE000000000000000;
    }
    v89 = v107;
  }
  v95 = *(void (**)(char *, uint64_t))(v41 + 8);
  v95(v89, v16);
  v66(v109, v62, v16);
  if (!v88)
  {
    v86 = SportingEventSubscription.Competitor.LogoFilePaths.defaultSize.getter(v96);
    v88 = v97;
  }
  v95(v109, v16);
  SportsActivityAttributes.Contender.LogoFilePaths.init(smallSize:defaultSize:)(v92, v90, v86, v88);
  return ((uint64_t (*)(char *, uint64_t))v95)(v62, v16);
}

char *sub_100078C8C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void *v61;
  uint64_t v62;
  uint64_t v63;
  char *result;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  void *v68;
  void *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(char *, char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;

  LODWORD(v97) = a2;
  v96 = a3;
  v4 = type metadata accessor for SportingEventClockPeriodType(0);
  v92 = *(void (**)(char *, uint64_t))(v4 - 8);
  v93 = (char *)v4;
  __chkstk_darwin(v4);
  v85 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10000738C(&qword_1000D2E70);
  __chkstk_darwin(v90);
  v91 = (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000738C(&qword_1000D2E78);
  __chkstk_darwin(v7);
  v88 = (uint64_t)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v89 = (char *)&v82 - v10;
  __chkstk_darwin(v11);
  v94 = (uint64_t)&v82 - v12;
  v13 = type metadata accessor for SportingEventProgressStatus(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v82 - v18;
  v20 = sub_10000738C(&qword_1000D2E80);
  __chkstk_darwin(v20);
  v98 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v82 - v24;
  v26 = type metadata accessor for RunningClockComponentsFormatter.DataSource(0, v23);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v95 = (char *)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v31 = (char *)&v82 - v30;
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v82 - v34;
  v87 = a1;
  SportingEventSubscription.createRunningClockDataSource(preferStaticClock:)(v97, v33);
  v36 = type metadata accessor for PenaltyShootoutsViewModel(0);
  v97 = v25;
  v86 = v36;
  v37 = sub_10000964C((uint64_t)v25, 1, 1, v36);
  RunningClockComponentsFormatter.DataSource.progressStatus.getter(v37);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for SportingEventProgressStatus.inProgress(_:), v13);
  LOBYTE(a1) = sub_100056318((uint64_t)v19, (uint64_t)v16);
  v38 = *(void (**)(char *, uint64_t))(v14 + 8);
  v38(v16, v13);
  v38(v19, v13);
  v39 = v26;
  v40 = *(uint64_t (**)(char *, char *, uint64_t))(v27 + 16);
  v41 = v40(v31, v35, v26);
  if ((a1 & 1) == 0)
  {
    v50 = *(void (**)(char *, uint64_t))(v27 + 8);
    v50(v31, v39);
LABEL_30:
    v76 = v95;
    v40(v95, v35, v39);
    v78 = (uint64_t)v97;
    v77 = v98;
    sub_100038C60((uint64_t)v97, v98, &qword_1000D2E80);
    v79 = v96;
    SportsActivitySoccerClock.init(runningClockDataSource:penaltyShootoutsViewModel:)(v76, v77);
    sub_10000A47C(v78, &qword_1000D2E80);
    v50(v35, v39);
    v80 = enum case for SportsActivityClock.soccer(_:);
    v81 = type metadata accessor for SportsActivityClock(0);
    return (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 104))(v79, v80, v81);
  }
  v83 = v27;
  v84 = v40;
  v42 = v94;
  RunningClockComponentsFormatter.DataSource.periodType.getter(v41);
  v43 = v92;
  v44 = (uint64_t)v93;
  v45 = (uint64_t)v89;
  (*((void (**)(char *, _QWORD, char *))v92 + 13))(v89, enum case for SportingEventClockPeriodType.shootouts(_:), v93);
  sub_10000964C(v45, 0, 1, v44);
  v46 = v91;
  v47 = v91 + *(int *)(v90 + 48);
  sub_100038C60(v42, v91, &qword_1000D2E78);
  sub_100038C60(v45, v47, &qword_1000D2E78);
  v48 = sub_100009658(v46, 1, v44);
  v49 = v46;
  if (v48 == 1)
  {
    sub_10000A47C(v45, &qword_1000D2E78);
    sub_10000A47C(v42, &qword_1000D2E78);
    v50 = *(void (**)(char *, uint64_t))(v83 + 8);
    v50(v31, v39);
    if (sub_100009658(v47, 1, v44) == 1)
    {
      sub_10000A47C(v46, &qword_1000D2E78);
      v40 = v84;
      goto LABEL_11;
    }
    v40 = v84;
    v56 = v46;
    goto LABEL_9;
  }
  v52 = (void (**)(char *, _QWORD, char *))v43;
  v53 = v45;
  v54 = v88;
  v55 = v49;
  sub_100038C60(v49, v88, &qword_1000D2E78);
  if (sub_100009658(v47, 1, v44) == 1)
  {
    sub_10000A47C(v53, &qword_1000D2E78);
    sub_10000A47C(v42, &qword_1000D2E78);
    v50 = *(void (**)(char *, uint64_t))(v83 + 8);
    v50(v31, v39);
    ((void (*)(uint64_t, uint64_t))v52[1])(v54, v44);
    v56 = v55;
    v40 = v84;
LABEL_9:
    sub_10000A47C(v56, &qword_1000D2E70);
    goto LABEL_30;
  }
  v57 = v85;
  v52[4](v85, v47, (char *)v44);
  sub_100005B28(&qword_1000D2E88, (uint64_t (*)(uint64_t))&type metadata accessor for SportingEventClockPeriodType, (uint64_t)&protocol conformance descriptor for SportingEventClockPeriodType);
  LODWORD(v90) = dispatch thunk of static Equatable.== infix(_:_:)(v54, v57, v44, v58);
  v59 = v54;
  v60 = (void (*)(char *, uint64_t))v52[1];
  v60(v57, v44);
  sub_10000A47C(v53, &qword_1000D2E78);
  sub_10000A47C(v94, &qword_1000D2E78);
  v50 = *(void (**)(char *, uint64_t))(v83 + 8);
  v50(v31, v39);
  v60((char *)v59, v44);
  sub_10000A47C(v55, &qword_1000D2E78);
  v40 = v84;
  if ((v90 & 1) == 0)
    goto LABEL_30;
LABEL_11:
  v61 = (void *)SportingEventSubscription.sportingEventDetails.getter(v51);
  v62 = dispatch thunk of SportingEvent.competitors.getter(v61);

  if (!((unint64_t)v62 >> 62))
  {
    v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v63)
      goto LABEL_13;
LABEL_28:
    swift_bridgeObjectRelease(v62);
    v66 = _swiftEmptyArrayStorage;
LABEL_29:
    v74 = v98;
    PenaltyShootoutsViewModel.init(contextualShootouts:)(v66);
    v75 = (uint64_t)v97;
    sub_10000A47C((uint64_t)v97, &qword_1000D2E80);
    sub_10000964C(v74, 0, 1, v86);
    sub_100038CB4(v74, v75, &qword_1000D2E80);
    goto LABEL_30;
  }
  if (v62 < 0)
    v73 = v62;
  else
    v73 = v62 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v62);
  v63 = _CocoaArrayWrapper.endIndex.getter(v73);
  swift_bridgeObjectRelease(v62);
  if (!v63)
    goto LABEL_28;
LABEL_13:
  v92 = v50;
  v93 = v35;
  v94 = v39;
  v99 = _swiftEmptyArrayStorage;
  result = sub_100015748(0, v63 & ~(v63 >> 63), 0);
  if ((v63 & 0x8000000000000000) == 0)
  {
    v65 = 0;
    v66 = v99;
    do
    {
      if ((v62 & 0xC000000000000001) != 0)
        v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, v62);
      else
        v67 = *(id *)(v62 + 8 * v65 + 32);
      v68 = v67;
      v69 = (void *)SportingEventCompetitorContainer.competitor.getter(v67);
      v70 = (_QWORD *)SportingEventCompetitor.contextualShootouts()();

      if (!v70)
        v70 = _swiftEmptyArrayStorage;
      v99 = v66;
      v72 = v66[2];
      v71 = v66[3];
      if (v72 >= v71 >> 1)
      {
        sub_100015748((char *)(v71 > 1), v72 + 1, 1);
        v66 = v99;
      }
      ++v65;
      v66[2] = v72 + 1;
      v66[v72 + 4] = v70;
    }
    while (v63 != v65);
    swift_bridgeObjectRelease(v62);
    v35 = v93;
    v39 = v94;
    v40 = v84;
    v50 = v92;
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t sub_10007942C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __n128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a2;
  v4 = type metadata accessor for RunningClockComponentsFormatter.DataSource(0, a3);
  v5 = __chkstk_darwin(v4);
  v52 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SportsActivityBaseballClock(0, v5);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  __chkstk_darwin(v7);
  v51 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SportingEventProgressStatus(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v48 - v15;
  v17 = type metadata accessor for BaseballClockFormatter.FormattedComponents(0, v14);
  v49 = *(_QWORD *)(v17 - 8);
  v50 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BaseballClockFormatter(0, v18);
  static BaseballClockFormatter.formattedComponents(subscription:)(a1);
  v21 = sub_10000738C(&qword_1000D2E90);
  v22 = swift_allocObject(v21, 35, 7);
  v48 = xmmword_1000A0600;
  *(_OWORD *)(v22 + 16) = xmmword_1000A0600;
  v23 = ((uint64_t (*)(void))BaseballClockFormatter.FormattedComponents.activeBases.getter)();
  v24 = sub_1000757B0(1, v23);
  v25 = swift_bridgeObjectRelease(v23);
  *(_BYTE *)(v22 + 32) = v24 & 1;
  v26 = BaseballClockFormatter.FormattedComponents.activeBases.getter(v25);
  v27 = sub_1000757B0(2, v26);
  v28 = swift_bridgeObjectRelease(v26);
  *(_BYTE *)(v22 + 33) = v27 & 1;
  v29 = BaseballClockFormatter.FormattedComponents.activeBases.getter(v28);
  v30 = sub_1000757B0(3, v29);
  swift_bridgeObjectRelease(v29);
  *(_BYTE *)(v22 + 34) = v30 & 1;
  v31 = swift_allocObject(v21, 35, 7);
  *(_OWORD *)(v31 + 16) = v48;
  *(_BYTE *)(v31 + 32) = BaseballClockFormatter.FormattedComponents.outs.getter() > 0;
  *(_BYTE *)(v31 + 33) = BaseballClockFormatter.FormattedComponents.outs.getter() > 1;
  v32 = BaseballClockFormatter.FormattedComponents.outs.getter();
  *(_BYTE *)(v31 + 34) = v32 > 2;
  v33 = (void *)SportingEventSubscription.sportingEventDetails.getter(v32);
  SportingEvent.progressStatus.getter(v33);

  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for SportingEventProgressStatus.inProgress(_:), v9);
  v34 = sub_100056318((uint64_t)v16, (uint64_t)v12);
  v35 = *(void (**)(char *, uint64_t))(v10 + 8);
  v35(v12, v9);
  v36 = ((uint64_t (*)(char *, uint64_t))v35)(v16, v9);
  v37 = BaseballClockFormatter.FormattedComponents.pitchCount.getter(v36);
  v39 = v38;
  v40 = v52;
  SportingEventSubscription.createRunningClockDataSource(preferStaticClock:)(0, v41);
  v42 = v34 & 1;
  v43 = v51;
  SportsActivityBaseballClock.init(basesActiveStates:outsActiveStates:ballsAndStrikes:isActiveBaseVisible:runningClockDataSource:)(v22, v31, v37, v39, v42, v40);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v50);
  v44 = v55;
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v55, v43, v54);
  v45 = enum case for SportsActivityClock.baseball(_:);
  v46 = type metadata accessor for SportsActivityClock(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v44, v45, v46);
}

void sub_10007978C(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD v58[3];
  _QWORD v59[5];
  uint64_t v60;

  v58[1] = a3;
  v5 = sub_10000738C(&qword_1000D1A00);
  __chkstk_darwin(v5);
  v7 = (char *)v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SportingEventPlayLevel(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)v58 - v13;
  sub_100038C60(a2, (uint64_t)v7, &qword_1000D1A00);
  if (sub_100009658((uint64_t)v7, 1, v8) == 1)
  {
    sub_10000A47C((uint64_t)v7, &qword_1000D1A00);
  }
  else
  {
    v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    v17 = SportingEventSubscription.mostRecentPlay.getter(v16);
    sub_1000756F4((uint64_t)v14, v17);
    v19 = v18;
    swift_bridgeObjectRelease(v17);
    v15 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    if (v19)
      goto LABEL_5;
  }
  v20 = SportingEventSubscription.mostRecentPlay.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for SportingEventPlayLevel.all(_:), v8);
  sub_1000756F4((uint64_t)v11, v20);
  v19 = v21;
  swift_bridgeObjectRelease(v20);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (!v19)
  {
    v43 = a1[3];
    v44 = a1[4];
    sub_1000073CC(a1, v43);
    v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44);
    SportsActivityPlay.init(isLeftBarVisible:isRightBarVisible:isPlay:text:)(0, 0, 0, v45, v46);
    return;
  }
LABEL_5:
  v22 = v19;
  v23 = dispatch thunk of SportingEventPlay.competitors.getter(v22);
  v24 = v23;
  if ((unint64_t)v23 >> 62)
  {
    if (v23 >= 0)
      v23 &= 0xFFFFFFFFFFFFFF8uLL;
    v25 = _CocoaArrayWrapper.endIndex.getter(v23);
  }
  else
  {
    v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v24);
  if (v25 != 2)
  {
    v42 = 2;
LABEL_21:
    v47 = sub_10007772C();
    v48 = swift_allocError(&type metadata for ActivityDataProviderError, v47, 0, 0);
    *v49 = v42;
    swift_willThrow(v48);

    return;
  }
  v26 = a1[3];
  v27 = a1[4];
  v28 = sub_1000073CC(a1, v26);
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 32);
  v30 = v29(v26, v27);
  v31 = *(_QWORD *)(v30 + 16);
  swift_bridgeObjectRelease(v30);
  if (v31 != 2)
  {
    v42 = 1;
    goto LABEL_21;
  }
  v32 = v29(v26, v27);
  if (!*(_QWORD *)(v32 + 16))
  {
    __break(1u);
LABEL_33:
    v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v28);
    goto LABEL_16;
  }
  v33 = v32;
  sub_10000AE14(v32 + 32, (uint64_t)v59);
  v34 = swift_bridgeObjectRelease(v33);
  v35 = dispatch thunk of SportingEventPlay.competitors.getter(v34);
  __chkstk_darwin(v35);
  v58[-2] = v59;
  if (v36 < 0 || (v35 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v35);
    v37 = (uint64_t)sub_100079F04(v57);
    swift_bridgeObjectRelease(v35);
  }
  else
  {
    v37 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v35);
  }
  v38 = v58[2];
  v60 = v37;
  sub_10007A0C0((uint64_t (*)(void **, void **))sub_100079EE8);
  if (v38)
  {
    swift_release(v60);
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease(v35);
  v28 = (_QWORD *)v60;
  v29 = (uint64_t (*)(uint64_t, uint64_t))(v60 & 0xC000000000000001);
  sub_10007DEC8(0, (v60 & 0xC000000000000001) == 0, v60);
  if (v29)
    goto LABEL_33;
  v39 = (id)v28[4];
LABEL_16:
  v40 = v39;
  sub_10007DEC8(1, v29 == 0, v28);
  if (v29)
    v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v28);
  else
    v41 = (id)v28[5];
  v50 = v41;
  v51 = swift_release(v28);
  v52 = dispatch thunk of SportingEventCompetitorContainer.isActive.getter(v51);
  v53 = v52;
  if ((v52 & 1) != 0
    || (v52 = dispatch thunk of SportingEventCompetitorContainer.isActive.getter(v52), v52 == 2))
  {
    v54 = 0;
  }
  else
  {
    v54 = v52 & 1;
  }
  v55 = SportingEventPlay.playDescription.getter(v52);
  SportsActivityPlay.init(isLeftBarVisible:isRightBarVisible:isPlay:text:)(v53 & 1, v54, 1, v55, v56);

  sub_100007618(v59);
}

uint64_t sub_100079C00(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v4 = (void *)SportingEventCompetitorContainer.competitor.getter(a1);
  v5 = SportingEventCompetitor.canonicalId.getter();
  v7 = v6;

  v8 = a3[3];
  v9 = a3[4];
  sub_1000073CC(a3, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  if (v5 == v10 && v7 == v11)
  {
    swift_bridgeObjectRelease_n(v7, 2);
    v15 = sub_10000AE14((uint64_t)a3, (uint64_t)v29);
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v10, v11, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v13);
    v15 = sub_10000AE14((uint64_t)a3, (uint64_t)v29);
    v16 = 0;
    if ((v14 & 1) == 0)
      goto LABEL_14;
  }
  v17 = (void *)SportingEventCompetitorContainer.competitor.getter(v15);
  v18 = SportingEventCompetitor.canonicalId.getter();
  v20 = v19;

  v21 = v30;
  v22 = v31;
  sub_1000073CC(v29, v30);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
  if (v18 == v23 && v20 == v24)
  {
    swift_bridgeObjectRelease_n(v20, 2);
    v16 = 0;
  }
  else
  {
    v26 = v24;
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v23, v24, 0);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v26);
    v16 = v27 ^ 1;
  }
LABEL_14:
  sub_100007618(v29);
  return v16 & 1;
}

_QWORD *sub_100079D94(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  if (a1 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17);
    __break(1u);
  }
  else if (a1)
  {
    v2 = sub_10000738C(&qword_1000D04F8);
    result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100079E34(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else if (a1)
  {
    v2 = type metadata accessor for SportingEventCompetitorContainer(0);
    result = static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
    *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return (uint64_t)&_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100079ED8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100079EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100079C00(a1, a2, *(_QWORD **)(v2 + 16)) & 1;
}

_QWORD *sub_100079F04(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_8;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10000738C(&qword_1000D2E50);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v4[2] = v2;
      v4[3] = (2 * ((uint64_t)(v5 - 32) / 8)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v6 = sub_10007ACE0((uint64_t)(v4 + 4), v2, v1);
    v1 = v7;
    swift_bridgeObjectRelease(v6);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_8:
    if (v1 < 0)
      v8 = v1;
    else
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100079FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000738C(&qword_1000CFE30);
  v4 = (_QWORD *)sub_10007B37C(v3, 16 * v1);
  j__malloc_size(v4);
  sub_10007B33C();
  v4[2] = v1;
  v4[3] = v5;
  v6 = sub_10007AEA8((uint64_t)&v9, v4 + 4, v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_1000180CC(v7);
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_10007A0C0(uint64_t (*a1)(void **, void **))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  v2 = v1;
  v4 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *v2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    *v2 = sub_10007B0B8(v4);
  sub_10007A154(a1);
  return specialized ContiguousArray._endMutation()(v6);
}

void sub_10007A154(uint64_t (*a1)(void **, void **))
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  void *v13;
  id v14;
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  id v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  Swift::Int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void **v77;
  void *v78;
  Swift::Int v79;
  void *v80;
  char v81;
  char v82;
  void *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  Swift::Int v94;
  uint64_t v95;
  uint64_t *v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  void *v106;
  id v107;
  uint64_t v108;

  v4 = v1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_135;
    if (v4)
      sub_10007A844(0, v4, 1, a1);
    return;
  }
  v6 = v5;
  v7 = sub_100079E34(v4 / 2);
  v102 = v4;
  v103 = v8;
  v108 = v7;
  v96 = v1;
  if (v4 <= 0)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v30 = _swiftEmptyArrayStorage[2];
LABEL_94:
    if (v30 >= 2)
    {
      v86 = *v96;
      do
      {
        v87 = v30 - 2;
        if (v30 < 2)
          goto LABEL_129;
        if (!v86)
          goto LABEL_143;
        v88 = *(_QWORD *)&v11[16 * v87 + 32];
        v89 = *(_QWORD *)&v11[16 * v30 + 24];
        sub_10007A944((char *)(v86 + 8 * v88), (char *)(v86 + 8 * *(_QWORD *)&v11[16 * v30 + 16]), v86 + 8 * v89, v103, a1);
        if (v2)
          goto LABEL_106;
        if (v89 < v88)
          goto LABEL_130;
        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        {
          sub_10007ACCC((uint64_t)v11);
          v11 = v92;
        }
        if (v87 >= *((_QWORD *)v11 + 2))
          goto LABEL_131;
        v90 = &v11[16 * v87 + 32];
        *(_QWORD *)v90 = v88;
        *((_QWORD *)v90 + 1) = v89;
        v91 = *((_QWORD *)v11 + 2);
        if (v30 > v91)
          goto LABEL_132;
        memmove(&v11[16 * v30 + 16], &v11[16 * v30 + 32], 16 * (v91 - v30));
        *((_QWORD *)v11 + 2) = v91 - 1;
        v30 = v91 - 1;
      }
      while (v91 > 2);
    }
    v93 = swift_bridgeObjectRelease(v11);
    if (v102 >= -1)
    {
LABEL_113:
      *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v93);
      swift_bridgeObjectRelease(v108);
      return;
    }
    __break(1u);
LABEL_109:
    swift_bridgeObjectRelease(v11);

LABEL_111:
LABEL_112:
    if (v102 < -1)
      goto LABEL_136;
    goto LABEL_113;
  }
  v97 = v6;
  v9 = 0;
  v10 = *v1;
  v95 = *v1 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v104 = *v1;
  while (1)
  {
    v12 = v9 + 1;
    if (v9 + 1 >= v4)
      goto LABEL_21;
    v107 = *(id *)(v10 + 8 * v12);
    v106 = *(void **)(v10 + 8 * v9);
    v13 = v106;
    v14 = v107;
    v3 = v13;
    v15 = a1(&v107, &v106);
    if (v2)
    {
      swift_bridgeObjectRelease(v11);

      goto LABEL_111;
    }
    v16 = v15;

    v12 = v9 + 2;
    v98 = v9;
    v4 = v102;
    v10 = v104;
    if (v9 + 2 >= v102)
      goto LABEL_10;
    do
    {
      v17 = v10 + 8 * v9;
      v18 = *(void **)(v17 + 8);
      v107 = *(id *)(v17 + 16);
      v106 = v18;
      v19 = v107;
      v3 = v18;
      v20 = a1(&v107, &v106);

      v4 = v102;
      if (((v16 ^ v20) & 1) != 0)
      {
        v12 = v9 + 2;
        v10 = v104;
        if ((v16 & 1) != 0)
          goto LABEL_11;
LABEL_20:
        v9 = v98;
        goto LABEL_21;
      }
      v21 = v9 + 3;
      ++v9;
      v10 = v104;
    }
    while (v21 < v102);
    v12 = v102;
LABEL_10:
    if ((v16 & 1) == 0)
      goto LABEL_20;
LABEL_11:
    v9 = v98;
    if (v12 < v98)
      goto LABEL_140;
    if (v98 < v12)
    {
      v22 = (uint64_t *)(v95 + 8 * v12);
      v23 = v12;
      v24 = v98;
      v25 = (uint64_t *)(v10 + 8 * v98);
      do
      {
        if (v24 != --v23)
        {
          if (!v10)
            goto LABEL_144;
          v26 = *v25;
          *v25 = *v22;
          *v22 = v26;
        }
        ++v24;
        --v22;
        ++v25;
      }
      while (v24 < v23);
    }
LABEL_21:
    if (v12 < v4)
    {
      if (__OFSUB__(v12, v9))
        goto LABEL_137;
      if (v12 - v9 < v97)
        break;
    }
LABEL_30:
    if (v12 < v9)
      goto LABEL_134;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
    {
      sub_10007ABF4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v11 = v84;
    }
    v29 = *((_QWORD *)v11 + 2);
    v28 = *((_QWORD *)v11 + 3);
    v30 = v29 + 1;
    v10 = v104;
    v100 = v12;
    if (v29 >= v28 >> 1)
    {
      sub_10007ABF4(v28 > 1, v29 + 1, 1, v11);
      v10 = v104;
      v11 = v85;
    }
    *((_QWORD *)v11 + 2) = v30;
    v31 = v11 + 32;
    v32 = &v11[16 * v29 + 32];
    *(_QWORD *)v32 = v9;
    *((_QWORD *)v32 + 1) = v100;
    if (v29)
    {
      while (1)
      {
        v33 = v30 - 1;
        if (v30 >= 4)
        {
          v38 = &v31[2 * v30];
          v39 = *(v38 - 8);
          v40 = *(v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *(v38 - 6);
          v42 = *(v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v30 - 2;
          v46 = &v31[2 * v30 - 4];
          v48 = *v46;
          v47 = v46[1];
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_121;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_123;
          if (v50 >= v41)
          {
            v68 = &v31[2 * v33];
            v70 = *v68;
            v69 = v68[1];
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_133;
            v61 = v36 < v71;
            goto LABEL_67;
          }
        }
        else
        {
          if (v30 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_61;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_122;
        v45 = v30 - 2;
        v51 = &v31[2 * v30 - 4];
        v53 = *v51;
        v52 = v51[1];
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[2 * v33];
        v59 = *v57;
        v58 = v57[1];
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_126;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_67:
          if (v61)
            v33 = v45;
          goto LABEL_69;
        }
LABEL_61:
        if ((v56 & 1) != 0)
          goto LABEL_125;
        v64 = &v31[2 * v33];
        v66 = *v64;
        v65 = v64[1];
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_127;
        if (v67 < v55)
          goto LABEL_78;
LABEL_69:
        v72 = v33 - 1;
        if (v33 - 1 >= v30)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_141;
        v73 = &v31[2 * v72];
        v74 = *v73;
        v3 = &v31[2 * v33];
        v75 = v3[1];
        sub_10007A944((char *)(v10 + 8 * *v73), (char *)(v10 + 8 * *v3), v10 + 8 * v75, v103, a1);
        if (v2)
        {
LABEL_106:
          v93 = swift_bridgeObjectRelease(v11);
          goto LABEL_112;
        }
        if (v75 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *v73 = v74;
        v31[2 * v72 + 1] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v33 >= v76)
          goto LABEL_118;
        v30 = v76 - 1;
        memmove(&v31[2 * v33], v3 + 2, 16 * (v76 - 1 - v33));
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v104;
        if (v76 <= 2)
          goto LABEL_78;
      }
    }
    v30 = 1;
LABEL_78:
    v9 = v100;
    v4 = v102;
    if (v100 >= v102)
      goto LABEL_94;
  }
  if (__OFADD__(v9, v97))
    goto LABEL_138;
  if (v9 + v97 >= v4)
    v27 = v4;
  else
    v27 = v9 + v97;
  if (v27 >= v9)
  {
    if (v12 != v27)
    {
      v77 = (void **)(v95 + 8 * v12);
      v99 = v9;
      v94 = v27;
      do
      {
        v78 = *(void **)(v10 + 8 * v12);
        v101 = v77;
        while (1)
        {
          v79 = v12;
          v107 = v78;
          v106 = *v77;
          v80 = v106;
          v30 = v78;
          v3 = v80;
          v81 = a1(&v107, &v106);
          if (v2)
            goto LABEL_109;
          v82 = v81;

          if ((v82 & 1) == 0)
            break;
          v10 = v104;
          if (!v104)
            goto LABEL_142;
          v83 = *v77;
          v78 = v77[1];
          *v77 = v78;
          v77[1] = v83;
          --v77;
          ++v9;
          v12 = v79;
          if (v79 == v9)
            goto LABEL_88;
        }
        v10 = v104;
        v12 = v79;
LABEL_88:
        ++v12;
        v9 = v99;
        v77 = v101 + 1;
      }
      while (v12 != v94);
      v12 = v94;
    }
    goto LABEL_30;
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
}

void sub_10007A844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void **, void **))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  void *v15;
  void **v18;
  void *v20;
  void *v21;

  if (a3 != a2)
  {
    v6 = a3;
    v7 = a1;
    v8 = *v4;
    v9 = (void **)(*v4 + 8 * a3 - 8);
LABEL_4:
    v10 = *(void **)(v8 + 8 * v6);
    v18 = v9;
    while (1)
    {
      v21 = v10;
      v20 = *v9;
      v11 = v20;
      v12 = v10;
      v13 = v11;
      v14 = a4(&v21, &v20);

      if (v5)
        break;
      if ((v14 & 1) != 0)
      {
        if (!v8)
        {
          __break(1u);
          return;
        }
        v15 = *v9;
        v10 = v9[1];
        *v9 = v10;
        v9[1] = v15;
        --v9;
        if (v6 != ++v7)
          continue;
      }
      ++v6;
      v9 = v18 + 1;
      v7 = a1;
      if (v6 != a2)
        goto LABEL_4;
      return;
    }
  }
}

uint64_t sub_10007A944(char *a1, char *a2, unint64_t a3, char *a4, uint64_t (*a5)(id *, void **))
{
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  char v27;
  char v28;
  char *v29;
  char *v30;
  BOOL v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  void *v36;
  char *v37;
  id v38;
  id v39;
  char v40;
  char v41;
  char *v42;
  BOOL v43;
  char *v44;
  unint64_t v45;
  uint64_t v47;
  char *v48;
  void *v49;
  id v50;

  v5 = a4;
  v6 = a3;
  v7 = a2;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  v48 = a1;
  if (v9 >= v11)
  {
    sub_1000140D8(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v13 = &v5[8 * v11];
    if (v48 >= v7 || v10 < 8)
      goto LABEL_13;
    v33 = (char *)(v6 - 8);
    v44 = v5;
    while (1)
    {
      v45 = (unint64_t)v13;
      v34 = v13 - 8;
      v50 = (id)*((_QWORD *)v13 - 1);
      v35 = v7;
      v37 = v7 - 8;
      v49 = (void *)*((_QWORD *)v7 - 1);
      v36 = v49;
      v38 = v50;
      v39 = v36;
      v40 = a5(&v50, &v49);
      if (v47)
        break;
      v41 = v40;
      v42 = v33 + 8;

      if ((v41 & 1) != 0)
      {
        v43 = v42 != v35 || v33 >= v35;
        v7 = v37;
        v13 = (char *)v45;
      }
      else
      {
        v43 = v42 != (char *)v45 || (unint64_t)v33 >= v45;
        v37 = v34;
        v13 = v34;
        v7 = v35;
      }
      if (v43)
        *(_QWORD *)v33 = *(_QWORD *)v37;
      v5 = v44;
      if (v7 > v48)
      {
        v33 -= 8;
        if (v13 > v44)
          continue;
      }
      goto LABEL_13;
    }

    sub_1000140D8(v44, (uint64_t)(v45 - (_QWORD)v44) / 8, v7);
  }
  else
  {
    sub_1000140D8(a1, (a2 - a1) / 8, a4);
    v13 = &v5[8 * v9];
    if ((unint64_t)v7 < v6 && v8 >= 8)
    {
      v20 = v47;
      while (1)
      {
        v21 = v6;
        v22 = v7;
        v50 = *(id *)v7;
        v23 = v20;
        v49 = *(void **)v5;
        v24 = v49;
        v25 = v50;
        v26 = v24;
        v27 = a5(&v50, &v49);
        v20 = v23;
        if (v23)
        {

          v16 = (v13 - v5) / 8;
          v17 = v5;
          v18 = v48;
          goto LABEL_14;
        }
        v28 = v27;

        if ((v28 & 1) == 0)
          break;
        v29 = v22;
        v7 = v22 + 8;
        v30 = v48;
        if (v48 != v22)
          goto LABEL_21;
LABEL_22:
        v32 = v30 + 8;
        if (v5 >= v13)
        {
          v7 = v32;
          goto LABEL_13;
        }
        v48 = v32;
        v6 = v21;
        if ((unint64_t)v7 >= v21)
        {
          v7 = v32;
          goto LABEL_13;
        }
      }
      v29 = v5;
      v30 = v48;
      v31 = v48 == v5;
      v5 += 8;
      v7 = v22;
      if (v31)
        goto LABEL_22;
LABEL_21:
      *(_QWORD *)v30 = *(_QWORD *)v29;
      goto LABEL_22;
    }
    v7 = a1;
LABEL_13:
    v16 = (v13 - v5) / 8;
    v17 = v5;
    v18 = v7;
LABEL_14:
    sub_1000140D8(v17, v16, v18);
  }
  return 1;
}

void sub_10007ABF4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000738C(&qword_1000D2E68);
    v11 = (char *)sub_10007B37C(v10, 16 * v9);
    j__malloc_size(v11);
    sub_10007B33C();
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v12;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  sub_10001860C();
}

void sub_10007ACCC(uint64_t a1)
{
  sub_10007ABF4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10007ACE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  void (*v11)(_QWORD *, _QWORD);
  void (*v12)(_QWORD *, _QWORD);
  id *v13;
  id v14;
  uint64_t v15;
  _QWORD v16[4];

  v5 = result;
  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    result = swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      if (a3 < 0)
        v8 = a3;
      else
        v8 = a3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_10007AE64();
          swift_bridgeObjectRetain(a3);
          for (i = 0; i != v7; ++i)
          {
            sub_10000738C(&qword_1000D2E58);
            sub_10007DEF0(v16, i, a3);
            v12 = v11;
            v14 = *v13;
            v12(v16, 0);
            *(_QWORD *)(v5 + 8 * i) = v14;
          }
          swift_bridgeObjectRelease(a3);
          return a3;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_1000147C4((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10007AE64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D2E60;
  if (!qword_1000D2E60)
  {
    v1 = sub_100007648(&qword_1000D2E58);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000D2E60);
  }
  return result;
}

uint64_t sub_10007AEA8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_10007B0A4()
{
  sub_1000158DC();
}

uint64_t sub_10007B0B8(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t storeEnumTagSinglePayload for ActivityDataProviderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10007B118 + 4 * byte_1000A424A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10007B14C + 4 * byte_1000A4245[v4]))();
}

uint64_t sub_10007B14C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007B15CLL);
  return result;
}

uint64_t sub_10007B168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007B170);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10007B174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007B17C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivityDataProviderError()
{
  return &type metadata for ActivityDataProviderError;
}

unint64_t sub_10007B19C()
{
  unint64_t result;

  result = qword_1000D2EA0;
  if (!qword_1000D2EA0)
  {
    result = swift_getWitnessTable(&unk_1000A43BC, &type metadata for ActivityDataProviderError);
    atomic_store(result, (unint64_t *)&qword_1000D2EA0);
  }
  return result;
}

void sub_10007B1D8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t sub_10007B1FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t sub_10007B20C(uint64_t a1, uint64_t a2)
{
  return sub_100018090(a1, a2);
}

uint64_t sub_10007B214()
{
  return 0;
}

uint64_t sub_10007B220()
{
  uint64_t v0;

  return swift_allocObject(v0, 17, 7);
}

_QWORD *sub_10007B24C()
{
  uint64_t v0;

  return sub_1000073CC(*(_QWORD **)(v0 - 152), *(_QWORD *)(*(_QWORD *)(v0 - 152) + 24));
}

void sub_10007B27C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_100014B44(a1, a2, (uint64_t *)(v2 - 128));
}

_QWORD *sub_10007B288(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000073CC(a1, v1);
}

unint64_t sub_10007B290(uint64_t a1, uint64_t a2)
{
  return sub_100015050(a1, a2);
}

uint64_t sub_10007B298()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10007B2A4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 192) + 8))(v0, *(_QWORD *)(v1 - 184));
}

uint64_t sub_10007B2B4(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10007B2BC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t sub_10007B2C4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_10007B2D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

void sub_10007B2E0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 272) = 0;
  *(_QWORD *)(v0 - 280) = 0xE000000000000000;
}

void sub_10007B2F8(uint64_t a1)
{
  uint64_t *v1;

  sub_10000A47C(a1, v1);
}

uint64_t sub_10007B300(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 56) + 32 * a1;
}

void sub_10007B310(uint64_t a1)
{
  uint64_t *v1;

  sub_10000A47C(a1, v1);
}

uint64_t sub_10007B324(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

void sub_10007B350(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10007B35C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = a1;
  return v1 - 152;
}

uint64_t sub_10007B368@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(_QWORD *)(a1 - 256));
}

uint64_t sub_10007B370@<X0>(uint64_t (*a1)(void)@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 320) = a1;
  return a1();
}

uint64_t sub_10007B37C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7);
}

uint64_t sub_10007B394()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 200);
}

uint64_t sub_10007B3A8()
{
  uint64_t v0;

  return v0;
}

void sub_10007B3BC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_100005B28(a1, v3, a3);
}

id sub_10007B3C4(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 56) + 8 * a1);
}

uint64_t sub_10007B3D0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  Class isa;
  id v6;
  objc_class *v7;
  unint64_t v8;
  id v9;
  void *v10;
  Class v11;
  id countAndFlagsBits;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t result;
  const char *v20;
  uint64_t v21;
  id v22;

  v4 = (unsigned __int8 *)swift_slowAlloc(20, -1);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6 = -[objc_class bytes](isa, "bytes");
  v7 = isa;
  v8 = Data.count.getter(a1, a2);
  if ((v8 & 0x8000000000000000) != 0)
  {
    sub_1000184DC();
    v20 = "Negative value is not representable";
    v21 = 35;
LABEL_11:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v20, v21, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return result;
  }
  if (HIDWORD(v8))
  {
    sub_1000184DC();
    v20 = "Not enough bits to represent the passed value";
    v21 = 45;
    goto LABEL_11;
  }
  CC_SHA1(v6, v8, v4);
  Data.init(bytes:count:)(v4, 20);
  v9 = objc_msgSend((id)objc_opt_self(AMSMediaTokenService), "createBagForSubProfile");
  if (!v9)
  {
    sub_10007B668();
    v9 = sub_100024D70(0xD000000000000014, 0x80000001000A7C80, 49, 0xE100000000000000);
  }
  v10 = (void *)objc_opt_self(AMSMescal);
  v11 = Data._bridgeToObjectiveC()().super.isa;
  v22 = 0;
  countAndFlagsBits = objc_msgSend(v10, "signatureFromData:type:bag:error:", v11, 1, v9, &v22);

  v13 = v22;
  if (countAndFlagsBits)
  {
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits);
    v16 = v15;

    countAndFlagsBits = (id)Data.base64EncodedString(options:)(0)._countAndFlagsBits;
    sub_1000096A0(v14, v16);

    sub_100055B50();
  }
  else
  {
    v17 = v13;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow(v18);
    sub_100055B50();

  }
  return (uint64_t)countAndFlagsBits;
}

uint64_t type metadata accessor for MescalSignature()
{
  return objc_opt_self(_TtC7sportsd15MescalSignature);
}

unint64_t sub_10007B668()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000D0978;
  if (!qword_1000D0978)
  {
    v1 = objc_opt_self(AMSBag);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000D0978);
  }
  return result;
}

uint64_t sub_10007B6A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1000C2D78, a1, a2, &unk_1000CFB48);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x2D)
    return 45;
  else
    return v3;
}

uint64_t sub_10007B6F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007B720 + 4 * word_1000A4400[a1]))(7368801, 0xE300000000000000);
}

uint64_t sub_10007B720()
{
  return 0x7041746E65696C63;
}

uint64_t sub_10007B740()
{
  return 0x6163696E6F6E6163;
}

uint64_t sub_10007B760()
{
  return 0x707954746E657665;
}

void sub_10007BBAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  sub_100055FBC(*a1, *a2);
}

void sub_10007BBB8()
{
  unsigned __int8 *v0;

  sub_100056550(*v0);
}

uint64_t sub_10007BBC0(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100056864(a1, *v1);
}

void sub_10007BBC8(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_100056BB8(a1, *v1);
}

uint64_t sub_10007BBD0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10007B6A4(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10007BBFC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10007B6F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for SportsMetricsKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xD4)
  {
    if (a2 + 44 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 44) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 45;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2D;
  v5 = v6 - 45;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

